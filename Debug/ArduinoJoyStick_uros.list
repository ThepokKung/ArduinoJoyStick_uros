
ArduinoJoyStick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c00  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d0  08019de0  08019de0  0001ade0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4b0  0801b4b0  0001d590  2**0
                  CONTENTS
  4 .ARM          00000008  0801b4b0  0801b4b0  0001c4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b4b8  0801b4b8  0001d590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801b4b8  0801b4b8  0001c4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b4c8  0801b4c8  0001c4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000590  20000000  0801b4cc  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b364  20000590  0801ba5c  0001d590  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b8f4  0801ba5c  0001d8f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d590  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027853  00000000  00000000  0001d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000525b  00000000  00000000  00044e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f30  00000000  00000000  0004a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001802  00000000  00000000  0004bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed43  00000000  00000000  0004d7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025df3  00000000  00000000  0007c4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001298c9  00000000  00000000  000a22d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001cbba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092b0  00000000  00000000  001cbc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001d4ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000590 	.word	0x20000590
 80001fc:	00000000 	.word	0x00000000
 8000200:	08019dc8 	.word	0x08019dc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000594 	.word	0x20000594
 800021c:	08019dc8 	.word	0x08019dc8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_d2f>:
 8000668:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800066c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000670:	bf24      	itt	cs
 8000672:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000676:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800067a:	d90d      	bls.n	8000698 <__aeabi_d2f+0x30>
 800067c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000680:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000684:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000688:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800068c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000690:	bf08      	it	eq
 8000692:	f020 0001 	biceq.w	r0, r0, #1
 8000696:	4770      	bx	lr
 8000698:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800069c:	d121      	bne.n	80006e2 <__aeabi_d2f+0x7a>
 800069e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80006a2:	bfbc      	itt	lt
 80006a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80006a8:	4770      	bxlt	lr
 80006aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006b2:	f1c2 0218 	rsb	r2, r2, #24
 80006b6:	f1c2 0c20 	rsb	ip, r2, #32
 80006ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80006be:	fa20 f002 	lsr.w	r0, r0, r2
 80006c2:	bf18      	it	ne
 80006c4:	f040 0001 	orrne.w	r0, r0, #1
 80006c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006d4:	ea40 000c 	orr.w	r0, r0, ip
 80006d8:	fa23 f302 	lsr.w	r3, r3, r2
 80006dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006e0:	e7cc      	b.n	800067c <__aeabi_d2f+0x14>
 80006e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006e6:	d107      	bne.n	80006f8 <__aeabi_d2f+0x90>
 80006e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ec:	bf1e      	ittt	ne
 80006ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006f6:	4770      	bxne	lr
 80006f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000700:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_ldivmod>:
 8000708:	b97b      	cbnz	r3, 800072a <__aeabi_ldivmod+0x22>
 800070a:	b972      	cbnz	r2, 800072a <__aeabi_ldivmod+0x22>
 800070c:	2900      	cmp	r1, #0
 800070e:	bfbe      	ittt	lt
 8000710:	2000      	movlt	r0, #0
 8000712:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000716:	e006      	blt.n	8000726 <__aeabi_ldivmod+0x1e>
 8000718:	bf08      	it	eq
 800071a:	2800      	cmpeq	r0, #0
 800071c:	bf1c      	itt	ne
 800071e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000722:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000726:	f000 b9b5 	b.w	8000a94 <__aeabi_idiv0>
 800072a:	f1ad 0c08 	sub.w	ip, sp, #8
 800072e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000732:	2900      	cmp	r1, #0
 8000734:	db09      	blt.n	800074a <__aeabi_ldivmod+0x42>
 8000736:	2b00      	cmp	r3, #0
 8000738:	db1a      	blt.n	8000770 <__aeabi_ldivmod+0x68>
 800073a:	f000 f84d 	bl	80007d8 <__udivmoddi4>
 800073e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000746:	b004      	add	sp, #16
 8000748:	4770      	bx	lr
 800074a:	4240      	negs	r0, r0
 800074c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	db1b      	blt.n	800078c <__aeabi_ldivmod+0x84>
 8000754:	f000 f840 	bl	80007d8 <__udivmoddi4>
 8000758:	f8dd e004 	ldr.w	lr, [sp, #4]
 800075c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000760:	b004      	add	sp, #16
 8000762:	4240      	negs	r0, r0
 8000764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000768:	4252      	negs	r2, r2
 800076a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800076e:	4770      	bx	lr
 8000770:	4252      	negs	r2, r2
 8000772:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000776:	f000 f82f 	bl	80007d8 <__udivmoddi4>
 800077a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000782:	b004      	add	sp, #16
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	4770      	bx	lr
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	f000 f821 	bl	80007d8 <__udivmoddi4>
 8000796:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079e:	b004      	add	sp, #16
 80007a0:	4252      	negs	r2, r2
 80007a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007bc:	f000 b96a 	b.w	8000a94 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	@ 0x30
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2220      	movs	r2, #32
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f018 fa7f 	bl	8018fb4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ab8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000abc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abe:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ac0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000acc:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b04:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b12:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b20:	481e      	ldr	r0, [pc, #120]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b22:	f001 ffa3 	bl	8002a6c <HAL_ADC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b2c:	f001 f874 	bl	8001c18 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b3c:	f003 fb5e 	bl	80041fc <HAL_ADCEx_MultiModeConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b46:	f001 f867 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_ADC1_Init+0x108>)
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000b52:	2307      	movs	r3, #7
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b56:	237f      	movs	r3, #127	@ 0x7f
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b68:	f002 fc98 	bl	800349c <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b72:	f001 f851 	bl	8001c18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_ADC1_Init+0x10c>)
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b84:	f002 fc8a 	bl	800349c <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b8e:	f001 f843 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	@ 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200005ac 	.word	0x200005ac
 8000ba0:	04300002 	.word	0x04300002
 8000ba4:	08600004 	.word	0x08600004

08000ba8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09e      	sub	sp, #120	@ 0x78
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2254      	movs	r2, #84	@ 0x54
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f018 f9f3 	bl	8018fb4 <memset>
  if(adcHandle->Instance==ADC1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd6:	d167      	bne.n	8000ca8 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bde:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000be2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4618      	mov	r0, r3
 8000bea:	f005 f817 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000bf4:	f001 f810 	bl	8001c18 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000bfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	4a26      	ldr	r2, [pc, #152]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f004 f803 	bl	8004c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c44:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <HAL_ADC_MspInit+0x110>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c7e:	f003 fca5 	bl	80045cc <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000c88:	f000 ffc6 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c90:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	2012      	movs	r0, #18
 8000c9e:	f003 fc6d 	bl	800457c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f003 fc84 	bl	80045b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3778      	adds	r7, #120	@ 0x78
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	20000618 	.word	0x20000618
 8000cb8:	40020030 	.word	0x40020030

08000cbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <MX_FREERTOS_Init+0x18>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_FREERTOS_Init+0x1c>)
 8000cc6:	f007 fbb5 	bl	8008434 <osThreadNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a03      	ldr	r2, [pc, #12]	@ (8000cdc <MX_FREERTOS_Init+0x20>)
 8000cce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08019ea0 	.word	0x08019ea0
 8000cd8:	080014b5 	.word	0x080014b5
 8000cdc:	20000678 	.word	0x20000678

08000ce0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cec:	f008 fc76 	bl	80095dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e5c <pvPortMallocMicroROS+0x17c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000cf8:	f000 f986 	bl	8001008 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cfc:	4b58      	ldr	r3, [pc, #352]	@ (8000e60 <pvPortMallocMicroROS+0x180>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f040 8090 	bne.w	8000e2a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01e      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000d10:	2208      	movs	r2, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d015      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	3308      	adds	r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d3a:	f383 8811 	msr	BASEPRI, r3
 8000d3e:	f3bf 8f6f 	isb	sy
 8000d42:	f3bf 8f4f 	dsb	sy
 8000d46:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d06a      	beq.n	8000e2a <pvPortMallocMicroROS+0x14a>
 8000d54:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d865      	bhi.n	8000e2a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d5e:	4b42      	ldr	r3, [pc, #264]	@ (8000e68 <pvPortMallocMicroROS+0x188>)
 8000d60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d62:	4b41      	ldr	r3, [pc, #260]	@ (8000e68 <pvPortMallocMicroROS+0x188>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d68:	e004      	b.n	8000d74 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d903      	bls.n	8000d86 <pvPortMallocMicroROS+0xa6>
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f1      	bne.n	8000d6a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d86:	4b35      	ldr	r3, [pc, #212]	@ (8000e5c <pvPortMallocMicroROS+0x17c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d04c      	beq.n	8000e2a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2208      	movs	r2, #8
 8000d96:	4413      	add	r3, r2
 8000d98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	2308      	movs	r3, #8
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d920      	bls.n	8000df4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00b      	beq.n	8000ddc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dc8:	f383 8811 	msr	BASEPRI, r3
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	613b      	str	r3, [r7, #16]
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dee:	69b8      	ldr	r0, [r7, #24]
 8000df0:	f000 f96c 	bl	80010cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <pvPortMallocMicroROS+0x18c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d203      	bcs.n	8000e16 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a16      	ldr	r2, [pc, #88]	@ (8000e6c <pvPortMallocMicroROS+0x18c>)
 8000e14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <pvPortMallocMicroROS+0x180>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e2a:	f008 fbe5 	bl	80095f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e3c:	f383 8811 	msr	BASEPRI, r3
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	f3bf 8f4f 	dsb	sy
 8000e48:	60fb      	str	r3, [r7, #12]
}
 8000e4a:	bf00      	nop
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e50:	69fb      	ldr	r3, [r7, #28]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3728      	adds	r7, #40	@ 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200041c0 	.word	0x200041c0
 8000e60:	200041cc 	.word	0x200041cc
 8000e64:	200041c4 	.word	0x200041c4
 8000e68:	200041b8 	.word	0x200041b8
 8000e6c:	200041c8 	.word	0x200041c8

08000e70 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d04a      	beq.n	8000f18 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e82:	2308      	movs	r3, #8
 8000e84:	425b      	negs	r3, r3
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10b      	bne.n	8000eb6 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ea2:	f383 8811 	msr	BASEPRI, r3
 8000ea6:	f3bf 8f6f 	isb	sy
 8000eaa:	f3bf 8f4f 	dsb	sy
 8000eae:	60fb      	str	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	e7fd      	b.n	8000eb2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	60bb      	str	r3, [r7, #8]
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d019      	beq.n	8000f18 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d115      	bne.n	8000f18 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000efc:	f008 fb6e 	bl	80095dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <vPortFreeMicroROS+0xb4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <vPortFreeMicroROS+0xb4>)
 8000f0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f0e:	6938      	ldr	r0, [r7, #16]
 8000f10:	f000 f8dc 	bl	80010cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f14:	f008 fb70 	bl	80095f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200041cc 	.word	0x200041cc
 8000f24:	200041c4 	.word	0x200041c4

08000f28 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f34:	2308      	movs	r3, #8
 8000f36:	425b      	negs	r3, r3
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <getBlockSize+0x38>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

	return count;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200041cc 	.word	0x200041cc

08000f64 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f6e:	f008 fb35 	bl	80095dc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f7ff feb4 	bl	8000ce0 <pvPortMallocMicroROS>
 8000f78:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d017      	beq.n	8000fb0 <pvPortReallocMicroROS+0x4c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d014      	beq.n	8000fb0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffce 	bl	8000f28 <getBlockSize>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2208      	movs	r2, #8
 8000f90:	1a9b      	subs	r3, r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d201      	bcs.n	8000fa0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f018 f8ce 	bl	8019146 <memcpy>

		vPortFreeMicroROS(pv);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff60 	bl	8000e70 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000fb0:	f008 fb22 	bl	80095f8 <xTaskResumeAll>

	return newmem;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fc8:	f008 fb08 	bl	80095dc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff fe82 	bl	8000ce0 <pvPortMallocMicroROS>
 8000fdc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fe2:	e004      	b.n	8000fee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	613a      	str	r2, [r7, #16]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	617a      	str	r2, [r7, #20]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f5      	bne.n	8000fe4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000ff8:	f008 fafe 	bl	80095f8 <xTaskResumeAll>
  	return mem;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800100e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001012:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <prvHeapInit+0xac>)
 8001016:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00c      	beq.n	800103c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3307      	adds	r3, #7
 8001026:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <prvHeapInit+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001040:	4a1d      	ldr	r2, [pc, #116]	@ (80010b8 <prvHeapInit+0xb0>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <prvHeapInit+0xb0>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001054:	2208      	movs	r2, #8
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f023 0307 	bic.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <prvHeapInit+0xb4>)
 8001068:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <prvHeapInit+0xb4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <prvHeapInit+0xb4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <prvHeapInit+0xb4>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <prvHeapInit+0xb8>)
 8001096:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <prvHeapInit+0xbc>)
 800109e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <prvHeapInit+0xc0>)
 80010a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	200035b8 	.word	0x200035b8
 80010b8:	200041b8 	.word	0x200041b8
 80010bc:	200041c0 	.word	0x200041c0
 80010c0:	200041c8 	.word	0x200041c8
 80010c4:	200041c4 	.word	0x200041c4
 80010c8:	200041cc 	.word	0x200041cc

080010cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <prvInsertBlockIntoFreeList+0xac>)
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e002      	b.n	80010e0 <prvInsertBlockIntoFreeList+0x14>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d8f7      	bhi.n	80010da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d108      	bne.n	800110e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	441a      	add	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	441a      	add	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d118      	bne.n	8001154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <prvInsertBlockIntoFreeList+0xb0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d00d      	beq.n	800114a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	441a      	add	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e008      	b.n	800115c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <prvInsertBlockIntoFreeList+0xb0>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e003      	b.n	800115c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d002      	beq.n	800116a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200041b8 	.word	0x200041b8
 800117c:	200041c0 	.word	0x200041c0

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_DMA_Init+0x70>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118a:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <MX_DMA_Init+0x70>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6493      	str	r3, [r2, #72]	@ 0x48
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_DMA_Init+0x70>)
 8001194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a2:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	200b      	movs	r0, #11
 80011bc:	f003 f9de 	bl	800457c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c0:	200b      	movs	r0, #11
 80011c2:	f003 f9f5 	bl	80045b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	200c      	movs	r0, #12
 80011cc:	f003 f9d6 	bl	800457c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011d0:	200c      	movs	r0, #12
 80011d2:	f003 f9ed 	bl	80045b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	200d      	movs	r0, #13
 80011dc:	f003 f9ce 	bl	800457c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e0:	200d      	movs	r0, #13
 80011e2:	f003 f9e5 	bl	80045b0 <HAL_NVIC_EnableIRQ>

}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001202:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001208:	4904      	ldr	r1, [pc, #16]	@ (800121c <cubemx_transport_open+0x28>)
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f005 fb70 	bl	80068f0 <HAL_UART_Receive_DMA>
    return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200041d0 	.word	0x200041d0

08001220 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800122e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f005 fba9 	bl	8006988 <HAL_UART_DMAStop>
    return true;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001254:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125c:	2b20      	cmp	r3, #32
 800125e:	d11b      	bne.n	8001298 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f005 fac1 	bl	80067f0 <HAL_UART_Transmit_DMA>
 800126e:	4603      	mov	r3, r0
 8001270:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001272:	e002      	b.n	800127a <cubemx_transport_write+0x3a>
            osDelay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f007 f96f 	bl	8008558 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800127a:	7cfb      	ldrb	r3, [r7, #19]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <cubemx_transport_write+0x4a>
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001286:	2b20      	cmp	r3, #32
 8001288:	d1f4      	bne.n	8001274 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800128a:	7cfb      	ldrb	r3, [r7, #19]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <cubemx_transport_write+0x54>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	e002      	b.n	800129a <cubemx_transport_write+0x5a>
 8001294:	2300      	movs	r3, #0
 8001296:	e000      	b.n	800129a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001298:	2300      	movs	r3, #0
    }
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80012b8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012be:	b672      	cpsid	i
}
 80012c0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <cubemx_transport_read+0x9c>)
 80012d2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012d4:	b662      	cpsie	i
}
 80012d6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3301      	adds	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80012de:	2001      	movs	r0, #1
 80012e0:	f007 f93a 	bl	8008558 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <cubemx_transport_read+0xa0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <cubemx_transport_read+0x9c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d103      	bne.n	80012f8 <cubemx_transport_read+0x54>
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbe2      	blt.n	80012be <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012fc:	e011      	b.n	8001322 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	440b      	add	r3, r1
 8001308:	490f      	ldr	r1, [pc, #60]	@ (8001348 <cubemx_transport_read+0xa4>)
 800130a:	5c8a      	ldrb	r2, [r1, r2]
 800130c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <cubemx_transport_read+0xa0>)
 800131a:	6013      	str	r3, [r2, #0]
        wrote++;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3301      	adds	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <cubemx_transport_read+0x9c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d003      	beq.n	8001336 <cubemx_transport_read+0x92>
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3e3      	bcc.n	80012fe <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001336:	69bb      	ldr	r3, [r7, #24]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200049d4 	.word	0x200049d4
 8001344:	200049d0 	.word	0x200049d0
 8001348:	200041d0 	.word	0x200041d0

0800134c <MX_GPIO_Init>:
        * EXTI
     PB8-BOOT0   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <MX_GPIO_Init+0x12c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a44      	ldr	r2, [pc, #272]	@ (8001478 <MX_GPIO_Init+0x12c>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <MX_GPIO_Init+0x12c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <MX_GPIO_Init+0x12c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a3e      	ldr	r2, [pc, #248]	@ (8001478 <MX_GPIO_Init+0x12c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b3c      	ldr	r3, [pc, #240]	@ (8001478 <MX_GPIO_Init+0x12c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <MX_GPIO_Init+0x12c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a38      	ldr	r2, [pc, #224]	@ (8001478 <MX_GPIO_Init+0x12c>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <MX_GPIO_Init+0x12c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f003 fde3 	bl	8004f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	482b      	ldr	r0, [pc, #172]	@ (800147c <MX_GPIO_Init+0x130>)
 80013ce:	f003 fc3b 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013d2:	2320      	movs	r3, #32
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f003 fc2c 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013f0:	2330      	movs	r3, #48	@ 0x30
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	481e      	ldr	r0, [pc, #120]	@ (800147c <MX_GPIO_Init+0x130>)
 8001404:	f003 fc20 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	2301      	movs	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001420:	f003 fc12 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001424:	2330      	movs	r3, #48	@ 0x30
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142c:	2301      	movs	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	4812      	ldr	r0, [pc, #72]	@ (8001480 <MX_GPIO_Init+0x134>)
 8001438:	f003 fc06 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800143c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001442:	2312      	movs	r3, #18
 8001444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144e:	2304      	movs	r3, #4
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	@ (8001480 <MX_GPIO_Init+0x134>)
 800145a:	f003 fbf5 	bl	8004c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2105      	movs	r1, #5
 8001462:	2028      	movs	r0, #40	@ 0x28
 8001464:	f003 f88a 	bl	800457c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001468:	2028      	movs	r0, #40	@ 0x28
 800146a:	f003 f8a1 	bl	80045b0 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	48000800 	.word	0x48000800
 8001480:	48000400 	.word	0x48000400

08001484 <timer_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END Header_StartDefaultTask */

/* Start Out of Start DefaultTask */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <timer_callback+0x26>
		/* Code here*/
		ReadADC_AVERAGE();
 8001496:	f000 f959 	bl	800174c <ReadADC_AVERAGE>
		SentCMDVEL();
 800149a:	f000 f9a5 	bl	80017e8 <SentCMDVEL>
		CheckButtonK();
 800149e:	f000 faad 	bl	80019fc <CheckButtonK>
		CheckButtonB();
 80014a2:	f000 fae3 	bl	8001a6c <CheckButtonB>
		CheckButtonD();
 80014a6:	f000 fb43 	bl	8001b30 <CheckButtonD>
	}
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b0b2      	sub	sp, #200	@ 0xc8
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close, cubemx_transport_write, cubemx_transport_read);
 80014be:	4b4f      	ldr	r3, [pc, #316]	@ (80015fc <StartDefaultTask+0x148>)
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001600 <StartDefaultTask+0x14c>)
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001604 <StartDefaultTask+0x150>)
 80014c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001608 <StartDefaultTask+0x154>)
 80014ca:	4950      	ldr	r1, [pc, #320]	@ (800160c <StartDefaultTask+0x158>)
 80014cc:	2001      	movs	r0, #1
 80014ce:	f00d fa67 	bl	800e9a0 <rmw_uros_set_custom_transport>

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 80014d2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00c fcfe 	bl	800ded8 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80014dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001610 <StartDefaultTask+0x15c>)
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 80014e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001614 <StartDefaultTask+0x160>)
 80014e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 80014e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001618 <StartDefaultTask+0x164>)
 80014ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 80014ee:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <StartDefaultTask+0x168>)
 80014f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80014f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00c fcfb 	bl	800def4 <rcutils_set_default_allocator>
 80014fe:	4603      	mov	r3, r0
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 800150a:	21be      	movs	r1, #190	@ 0xbe
 800150c:	4844      	ldr	r0, [pc, #272]	@ (8001620 <StartDefaultTask+0x16c>)
 800150e:	f017 fbd1 	bl	8018cb4 <iprintf>
	}

	// micro-ROS app
	allocator = rcl_get_default_allocator();
 8001512:	4c44      	ldr	r4, [pc, #272]	@ (8001624 <StartDefaultTask+0x170>)
 8001514:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001518:	4618      	mov	r0, r3
 800151a:	f00c fd09 	bl	800df30 <rcutils_get_default_allocator>
 800151e:	4625      	mov	r5, r4
 8001520:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 800152c:	f00b f946 	bl	800c7bc <rcl_get_zero_initialized_init_options>
 8001530:	4603      	mov	r3, r0
 8001532:	4a3d      	ldr	r2, [pc, #244]	@ (8001628 <StartDefaultTask+0x174>)
 8001534:	6013      	str	r3, [r2, #0]
	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <StartDefaultTask+0x170>)
 8001538:	466c      	mov	r4, sp
 800153a:	f103 020c 	add.w	r2, r3, #12
 800153e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001542:	e884 0003 	stmia.w	r4, {r0, r1}
 8001546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001548:	4837      	ldr	r0, [pc, #220]	@ (8001628 <StartDefaultTask+0x174>)
 800154a:	f00b f939 	bl	800c7c0 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 50)); //Set Domain ID
 800154e:	2132      	movs	r1, #50	@ 0x32
 8001550:	4835      	ldr	r0, [pc, #212]	@ (8001628 <StartDefaultTask+0x174>)
 8001552:	f00b fa31 	bl	800c9b8 <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <StartDefaultTask+0x170>)
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <StartDefaultTask+0x174>)
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	4832      	ldr	r0, [pc, #200]	@ (800162c <StartDefaultTask+0x178>)
 8001562:	f00c fbdd 	bl	800dd20 <rclc_support_init_with_options>
			&init_options,
			&allocator
	);

	// create node
	rclc_node_init_default(
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <StartDefaultTask+0x178>)
 8001568:	4a31      	ldr	r2, [pc, #196]	@ (8001630 <StartDefaultTask+0x17c>)
 800156a:	4932      	ldr	r1, [pc, #200]	@ (8001634 <StartDefaultTask+0x180>)
 800156c:	4832      	ldr	r0, [pc, #200]	@ (8001638 <StartDefaultTask+0x184>)
 800156e:	f00c fc0b 	bl	800dd88 <rclc_node_init_default>
			"",
			&support
	); //Node name

	// create cmd_vel publisher
	rclc_publisher_init_default(
 8001572:	f009 fcc1 	bl	800aef8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001576:	4602      	mov	r2, r0
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <StartDefaultTask+0x188>)
 800157a:	492f      	ldr	r1, [pc, #188]	@ (8001638 <StartDefaultTask+0x184>)
 800157c:	4830      	ldr	r0, [pc, #192]	@ (8001640 <StartDefaultTask+0x18c>)
 800157e:	f00c fc3f 	bl	800de00 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			"/cmd_vel"
	);

	// create save_path client
	rclc_client_init_default(
 8001582:	f00e ffc3 	bl	801050c <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>
 8001586:	4602      	mov	r2, r0
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <StartDefaultTask+0x190>)
 800158a:	492b      	ldr	r1, [pc, #172]	@ (8001638 <StartDefaultTask+0x184>)
 800158c:	482e      	ldr	r0, [pc, #184]	@ (8001648 <StartDefaultTask+0x194>)
 800158e:	f00b fd77 	bl	800d080 <rclc_client_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(rrr_robot_interfaces, srv, RRRTargetPath),
			"/SavePath"
	);

	// create Ref client
	rclc_client_init_default(
 8001592:	f00e ff9b 	bl	80104cc <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode>
 8001596:	4602      	mov	r2, r0
 8001598:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <StartDefaultTask+0x198>)
 800159a:	4927      	ldr	r1, [pc, #156]	@ (8001638 <StartDefaultTask+0x184>)
 800159c:	482c      	ldr	r0, [pc, #176]	@ (8001650 <StartDefaultTask+0x19c>)
 800159e:	f00b fd6f 	bl	800d080 <rclc_client_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(rrr_robot_interfaces, srv, RRRMode), //Wait to change
			"/Ref"
	);

	// create Mode client
	rclc_client_init_default(
 80015a2:	f00e ff93 	bl	80104cc <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <StartDefaultTask+0x1a0>)
 80015aa:	4923      	ldr	r1, [pc, #140]	@ (8001638 <StartDefaultTask+0x184>)
 80015ac:	482a      	ldr	r0, [pc, #168]	@ (8001658 <StartDefaultTask+0x1a4>)
 80015ae:	f00b fd67 	bl	800d080 <rclc_client_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(rrr_robot_interfaces, srv, RRRMode), //Wait to change
			"/Mode"
	);

	// create Timer
	rclc_timer_init_default(
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <StartDefaultTask+0x1a8>)
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001660 <StartDefaultTask+0x1ac>)
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	491b      	ldr	r1, [pc, #108]	@ (800162c <StartDefaultTask+0x178>)
 80015be:	4829      	ldr	r0, [pc, #164]	@ (8001664 <StartDefaultTask+0x1b0>)
 80015c0:	f00c fc52 	bl	800de68 <rclc_timer_init_default>
			RCL_MS_TO_NS(10),
			timer_callback
	);

	// create executer
	executor = rclc_executor_get_zero_initialized_executor();
 80015c4:	4c28      	ldr	r4, [pc, #160]	@ (8001668 <StartDefaultTask+0x1b4>)
 80015c6:	463b      	mov	r3, r7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00c f8d5 	bl	800d778 <rclc_executor_get_zero_initialized_executor>
 80015ce:	4620      	mov	r0, r4
 80015d0:	463b      	mov	r3, r7
 80015d2:	2288      	movs	r2, #136	@ 0x88
 80015d4:	4619      	mov	r1, r3
 80015d6:	f017 fdb6 	bl	8019146 <memcpy>
	rclc_executor_init(&executor, &support.context, 1, &allocator);
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <StartDefaultTask+0x170>)
 80015dc:	2201      	movs	r2, #1
 80015de:	4913      	ldr	r1, [pc, #76]	@ (800162c <StartDefaultTask+0x178>)
 80015e0:	4821      	ldr	r0, [pc, #132]	@ (8001668 <StartDefaultTask+0x1b4>)
 80015e2:	f00c f8d5 	bl	800d790 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 80015e6:	491f      	ldr	r1, [pc, #124]	@ (8001664 <StartDefaultTask+0x1b0>)
 80015e8:	481f      	ldr	r0, [pc, #124]	@ (8001668 <StartDefaultTask+0x1b4>)
 80015ea:	f00c f941 	bl	800d870 <rclc_executor_add_timer>
//	rclc_executor_add_client(&executor, &savepath_client, &savepath_response, SavePath_client_callback);
	rclc_executor_spin(&executor); //ต้องเรียกก่อนถึงจะเริ่มทำงาน
 80015ee:	481e      	ldr	r0, [pc, #120]	@ (8001668 <StartDefaultTask+0x1b4>)
 80015f0:	f00c fb54 	bl	800dc9c <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 80015f4:	200a      	movs	r0, #10
 80015f6:	f006 ffaf 	bl	8008558 <osDelay>
 80015fa:	e7fb      	b.n	80015f4 <StartDefaultTask+0x140>
 80015fc:	080012a5 	.word	0x080012a5
 8001600:	08001241 	.word	0x08001241
 8001604:	08001221 	.word	0x08001221
 8001608:	080011f5 	.word	0x080011f5
 800160c:	20004d34 	.word	0x20004d34
 8001610:	08001c25 	.word	0x08001c25
 8001614:	08001c69 	.word	0x08001c69
 8001618:	08001ca1 	.word	0x08001ca1
 800161c:	08001d0d 	.word	0x08001d0d
 8001620:	08019dec 	.word	0x08019dec
 8001624:	20004a10 	.word	0x20004a10
 8001628:	200049d8 	.word	0x200049d8
 800162c:	200049dc 	.word	0x200049dc
 8001630:	08019e14 	.word	0x08019e14
 8001634:	08019e18 	.word	0x08019e18
 8001638:	20004a24 	.word	0x20004a24
 800163c:	08019e24 	.word	0x08019e24
 8001640:	20004ac4 	.word	0x20004ac4
 8001644:	08019e30 	.word	0x08019e30
 8001648:	20004ab8 	.word	0x20004ab8
 800164c:	08019e3c 	.word	0x08019e3c
 8001650:	20004abc 	.word	0x20004abc
 8001654:	08019e44 	.word	0x08019e44
 8001658:	20004ac0 	.word	0x20004ac0
 800165c:	08001485 	.word	0x08001485
 8001660:	00989680 	.word	0x00989680
 8001664:	20004b2c 	.word	0x20004b2c
 8001668:	20004a30 	.word	0x20004a30

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001670:	f000 ff3d 	bl	80024ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001674:	f000 f81e 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001678:	f7ff fe68 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 800167c:	f7ff fd80 	bl	8001180 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001680:	f000 fe04 	bl	800228c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001684:	f7ff fa08 	bl	8000a98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //    	rcl_send_request(&savepath_client, &savepath_request, &sequence_number);

  /* Start Analog Read */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001688:	217f      	movs	r1, #127	@ 0x7f
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <main+0x40>)
 800168c:	f002 fd22 	bl	80040d4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 8001690:	22c8      	movs	r2, #200	@ 0xc8
 8001692:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <main+0x44>)
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <main+0x40>)
 8001696:	f001 fba5 	bl	8002de4 <HAL_ADC_Start_DMA>
  /* End Analog Read */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800169a:	f006 fe81 	bl	80083a0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800169e:	f7ff fb0d 	bl	8000cbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016a2:	f006 fea1 	bl	80083e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80016a6:	bf00      	nop
 80016a8:	e7fd      	b.n	80016a6 <main+0x3a>
 80016aa:	bf00      	nop
 80016ac:	200005ac 	.word	0x200005ac
 80016b0:	20004b30 	.word	0x20004b30

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	@ 0x50
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	2238      	movs	r2, #56	@ 0x38
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f017 fc76 	bl	8018fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f003 fc8c 	bl	8004ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e6:	2340      	movs	r3, #64	@ 0x40
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ea:	2302      	movs	r3, #2
 80016ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016f2:	2304      	movs	r3, #4
 80016f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016f6:	2355      	movs	r3, #85	@ 0x55
 80016f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016fe:	2302      	movs	r3, #2
 8001700:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001702:	2302      	movs	r3, #2
 8001704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	4618      	mov	r0, r3
 800170c:	f003 fd26 	bl	800515c <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001716:	f000 fa7f 	bl	8001c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	230f      	movs	r3, #15
 800171c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171e:	2303      	movs	r3, #3
 8001720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2104      	movs	r1, #4
 8001732:	4618      	mov	r0, r3
 8001734:	f004 f824 	bl	8005780 <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800173e:	f000 fa6b 	bl	8001c18 <Error_Handler>
  }
}
 8001742:	bf00      	nop
 8001744:	3750      	adds	r7, #80	@ 0x50
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <ReadADC_AVERAGE>:

/* USER CODE BEGIN 4 */

void ReadADC_AVERAGE() {
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e020      	b.n	80017a2 <ReadADC_AVERAGE+0x56>
		if (i % 2 == 0) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d108      	bne.n	800177c <ReadADC_AVERAGE+0x30>
			temp_1 += ADC_RawRead[i];
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <ReadADC_AVERAGE+0x88>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e00f      	b.n	800179c <ReadADC_AVERAGE+0x50>
		} else if (i % 2 == 1) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	bfb8      	it	lt
 8001786:	425b      	neglt	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d107      	bne.n	800179c <ReadADC_AVERAGE+0x50>
			temp_2 += ADC_RawRead[i];
 800178c:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <ReadADC_AVERAGE+0x88>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001794:	461a      	mov	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80017a6:	dddb      	ble.n	8001760 <ReadADC_AVERAGE+0x14>
		}
	}
	x_axis = (temp_1 / 100);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <ReadADC_AVERAGE+0x8c>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	095b      	lsrs	r3, r3, #5
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <ReadADC_AVERAGE+0x90>)
 80017b6:	801a      	strh	r2, [r3, #0]
	y_axis = (temp_2 / 100);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <ReadADC_AVERAGE+0x8c>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <ReadADC_AVERAGE+0x94>)
 80017c6:	801a      	strh	r2, [r3, #0]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20004b30 	.word	0x20004b30
 80017d8:	51eb851f 	.word	0x51eb851f
 80017dc:	20004cc0 	.word	0x20004cc0
 80017e0:	20004cc2 	.word	0x20004cc2
 80017e4:	00000000 	.word	0x00000000

080017e8 <SentCMDVEL>:


void SentCMDVEL(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	/* Call Velocity */
	float linearX_velocity = (y_axis - 2048) / 2048.0f;  // Normalize -1.0 to 1.0
 80017ee:	4b74      	ldr	r3, [pc, #464]	@ (80019c0 <SentCMDVEL+0x1d8>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fe:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80019c4 <SentCMDVEL+0x1dc>
 8001802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001806:	edc7 7a01 	vstr	s15, [r7, #4]
	float linearY_velocity = (x_axis - 2048) / 2048.0f; // Normalize -1.0 to 1.0
 800180a:	4b6f      	ldr	r3, [pc, #444]	@ (80019c8 <SentCMDVEL+0x1e0>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181a:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 80019c4 <SentCMDVEL+0x1dc>
 800181e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001822:	edc7 7a00 	vstr	s15, [r7]

	/* Check DEADZONE*/
	if (fabs(linearX_velocity) < 0.025f) {
 8001826:	edd7 7a01 	vldr	s15, [r7, #4]
 800182a:	eef0 7ae7 	vabs.f32	s15, s15
 800182e:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80019cc <SentCMDVEL+0x1e4>
 8001832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	d502      	bpl.n	8001842 <SentCMDVEL+0x5a>
		linearX_velocity = 0.0f;
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
	}

	if (fabs(linearY_velocity) < 0.015f) {
 8001842:	edd7 7a00 	vldr	s15, [r7]
 8001846:	eef0 7ae7 	vabs.f32	s15, s15
 800184a:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80019d0 <SentCMDVEL+0x1e8>
 800184e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	d502      	bpl.n	800185e <SentCMDVEL+0x76>
		linearY_velocity = 0.0f;
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
	}

	/* Z button */
	aButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 800185e:	2120      	movs	r1, #32
 8001860:	485c      	ldr	r0, [pc, #368]	@ (80019d4 <SentCMDVEL+0x1ec>)
 8001862:	f003 fb73 	bl	8004f4c <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b5b      	ldr	r3, [pc, #364]	@ (80019d8 <SentCMDVEL+0x1f0>)
 800186c:	701a      	strb	r2, [r3, #0]
	cButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 800186e:	2110      	movs	r1, #16
 8001870:	4858      	ldr	r0, [pc, #352]	@ (80019d4 <SentCMDVEL+0x1ec>)
 8001872:	f003 fb6b 	bl	8004f4c <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b58      	ldr	r3, [pc, #352]	@ (80019dc <SentCMDVEL+0x1f4>)
 800187c:	701a      	strb	r2, [r3, #0]

	/* readbutton state */
	if (aButtonState == GPIO_PIN_RESET && aPrevButton == GPIO_PIN_SET) {
 800187e:	4b56      	ldr	r3, [pc, #344]	@ (80019d8 <SentCMDVEL+0x1f0>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d12f      	bne.n	80018e6 <SentCMDVEL+0xfe>
 8001886:	4b56      	ldr	r3, [pc, #344]	@ (80019e0 <SentCMDVEL+0x1f8>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d12b      	bne.n	80018e6 <SentCMDVEL+0xfe>
		linearZ_velocity += 0.1;
 800188e:	4b55      	ldr	r3, [pc, #340]	@ (80019e4 <SentCMDVEL+0x1fc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe90 	bl	80005b8 <__aeabi_f2d>
 8001898:	a347      	add	r3, pc, #284	@ (adr r3, 80019b8 <SentCMDVEL+0x1d0>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fd2d 	bl	80002fc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7fe fedd 	bl	8000668 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a4c      	ldr	r2, [pc, #304]	@ (80019e4 <SentCMDVEL+0x1fc>)
 80018b2:	6013      	str	r3, [r2, #0]

		HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f000 fe51 	bl	800255c <HAL_Delay>

		/* update button state */
		aPrevButton = aButtonState;
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <SentCMDVEL+0x1f0>)
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	4b48      	ldr	r3, [pc, #288]	@ (80019e0 <SentCMDVEL+0x1f8>)
 80018c0:	701a      	strb	r2, [r3, #0]
		cPrevButton = cButtonState;
 80018c2:	4b46      	ldr	r3, [pc, #280]	@ (80019dc <SentCMDVEL+0x1f4>)
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	4b48      	ldr	r3, [pc, #288]	@ (80019e8 <SentCMDVEL+0x200>)
 80018c8:	701a      	strb	r2, [r3, #0]
	    if (linearZ_velocity > 1.0f) linearZ_velocity = 1.0;
 80018ca:	4b46      	ldr	r3, [pc, #280]	@ (80019e4 <SentCMDVEL+0x1fc>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	dd03      	ble.n	80018e6 <SentCMDVEL+0xfe>
 80018de:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <SentCMDVEL+0x1fc>)
 80018e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018e4:	601a      	str	r2, [r3, #0]
	}
	if (cButtonState == GPIO_PIN_RESET && cPrevButton == GPIO_PIN_SET) {
 80018e6:	4b3d      	ldr	r3, [pc, #244]	@ (80019dc <SentCMDVEL+0x1f4>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d123      	bne.n	8001936 <SentCMDVEL+0x14e>
 80018ee:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <SentCMDVEL+0x200>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d11f      	bne.n	8001936 <SentCMDVEL+0x14e>
		linearZ_velocity -= 0.1;
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <SentCMDVEL+0x1fc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe5c 	bl	80005b8 <__aeabi_f2d>
 8001900:	a32d      	add	r3, pc, #180	@ (adr r3, 80019b8 <SentCMDVEL+0x1d0>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fcf7 	bl	80002f8 <__aeabi_dsub>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7fe fea9 	bl	8000668 <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	4a32      	ldr	r2, [pc, #200]	@ (80019e4 <SentCMDVEL+0x1fc>)
 800191a:	6013      	str	r3, [r2, #0]
	    if (linearZ_velocity < -1.0f) linearZ_velocity = -1.0;
 800191c:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <SentCMDVEL+0x1fc>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	d502      	bpl.n	8001936 <SentCMDVEL+0x14e>
 8001930:	4b2c      	ldr	r3, [pc, #176]	@ (80019e4 <SentCMDVEL+0x1fc>)
 8001932:	4a2e      	ldr	r2, [pc, #184]	@ (80019ec <SentCMDVEL+0x204>)
 8001934:	601a      	str	r2, [r3, #0]
	}

	if (fabs(linearZ_velocity) < 0.001f) {
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <SentCMDVEL+0x1fc>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eef0 7ae7 	vabs.f32	s15, s15
 8001940:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80019f0 <SentCMDVEL+0x208>
 8001944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	d503      	bpl.n	8001956 <SentCMDVEL+0x16e>
		linearZ_velocity = 0.0f;
 800194e:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <SentCMDVEL+0x1fc>)
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(10);
 8001956:	200a      	movs	r0, #10
 8001958:	f000 fe00 	bl	800255c <HAL_Delay>

	/* update button state */
	aPrevButton = aButtonState;
 800195c:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <SentCMDVEL+0x1f0>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <SentCMDVEL+0x1f8>)
 8001962:	701a      	strb	r2, [r3, #0]
	cPrevButton = cButtonState;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <SentCMDVEL+0x1f4>)
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <SentCMDVEL+0x200>)
 800196a:	701a      	strb	r2, [r3, #0]

	twist_msg.linear.x = linearX_velocity;
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7fe fe23 	bl	80005b8 <__aeabi_f2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	491f      	ldr	r1, [pc, #124]	@ (80019f4 <SentCMDVEL+0x20c>)
 8001978:	e9c1 2300 	strd	r2, r3, [r1]
	twist_msg.linear.y = linearY_velocity;
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f7fe fe1b 	bl	80005b8 <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	491b      	ldr	r1, [pc, #108]	@ (80019f4 <SentCMDVEL+0x20c>)
 8001988:	e9c1 2302 	strd	r2, r3, [r1, #8]
	twist_msg.linear.z = linearZ_velocity;
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <SentCMDVEL+0x1fc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fe11 	bl	80005b8 <__aeabi_f2d>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4916      	ldr	r1, [pc, #88]	@ (80019f4 <SentCMDVEL+0x20c>)
 800199c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &twist_msg, NULL));
 80019a0:	2200      	movs	r2, #0
 80019a2:	4914      	ldr	r1, [pc, #80]	@ (80019f4 <SentCMDVEL+0x20c>)
 80019a4:	4814      	ldr	r0, [pc, #80]	@ (80019f8 <SentCMDVEL+0x210>)
 80019a6:	f00b fb25 	bl	800cff4 <rcl_publish>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999
 80019c0:	20004cc2 	.word	0x20004cc2
 80019c4:	45000000 	.word	0x45000000
 80019c8:	20004cc0 	.word	0x20004cc0
 80019cc:	3ccccccd 	.word	0x3ccccccd
 80019d0:	3c75c28f 	.word	0x3c75c28f
 80019d4:	48000800 	.word	0x48000800
 80019d8:	20004ccc 	.word	0x20004ccc
 80019dc:	20004cce 	.word	0x20004cce
 80019e0:	20004cd1 	.word	0x20004cd1
 80019e4:	20004cc4 	.word	0x20004cc4
 80019e8:	20004cd3 	.word	0x20004cd3
 80019ec:	bf800000 	.word	0xbf800000
 80019f0:	3a83126f 	.word	0x3a83126f
 80019f4:	20004ac8 	.word	0x20004ac8
 80019f8:	20004ac4 	.word	0x20004ac4

080019fc <CheckButtonK>:

void CheckButtonK() {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
    kButtonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001a02:	2120      	movs	r1, #32
 8001a04:	4814      	ldr	r0, [pc, #80]	@ (8001a58 <CheckButtonK+0x5c>)
 8001a06:	f003 faa1 	bl	8004f4c <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <CheckButtonK+0x60>)
 8001a10:	701a      	strb	r2, [r3, #0]

    if (kButtonState == GPIO_PIN_RESET && kPrevButton == GPIO_PIN_SET) {
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <CheckButtonK+0x60>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d112      	bne.n	8001a40 <CheckButtonK+0x44>
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <CheckButtonK+0x64>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10e      	bne.n	8001a40 <CheckButtonK+0x44>

    	rrr_robot_interfaces__srv__RRRTargetPath_Request__init(&savepath_request);
 8001a22:	4810      	ldr	r0, [pc, #64]	@ (8001a64 <CheckButtonK+0x68>)
 8001a24:	f00e fd36 	bl	8010494 <rrr_robot_interfaces__srv__RRRTargetPath_Request__init>

    	savepath_request.save_path = true;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <CheckButtonK+0x68>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
    	savepath_request.call_path = false;
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <CheckButtonK+0x68>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	705a      	strb	r2, [r3, #1]

    	int64_t sequence_number;
    	RCSOFTCHECK(rcl_send_request(&savepath_client, &savepath_request, &sequence_number));
 8001a34:	463b      	mov	r3, r7
 8001a36:	461a      	mov	r2, r3
 8001a38:	490a      	ldr	r1, [pc, #40]	@ (8001a64 <CheckButtonK+0x68>)
 8001a3a:	480b      	ldr	r0, [pc, #44]	@ (8001a68 <CheckButtonK+0x6c>)
 8001a3c:	f00a fe36 	bl	800c6ac <rcl_send_request>

    }
    HAL_Delay(10);
 8001a40:	200a      	movs	r0, #10
 8001a42:	f000 fd8b 	bl	800255c <HAL_Delay>

    kPrevButton = kButtonState;
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <CheckButtonK+0x60>)
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <CheckButtonK+0x64>)
 8001a4c:	701a      	strb	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	20004cd0 	.word	0x20004cd0
 8001a60:	20004cd5 	.word	0x20004cd5
 8001a64:	20004af8 	.word	0x20004af8
 8001a68:	20004ab8 	.word	0x20004ab8

08001a6c <CheckButtonB>:

void CheckButtonB() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
    bButtonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001a72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7a:	f003 fa67 	bl	8004f4c <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <CheckButtonB+0xa0>)
 8001a84:	701a      	strb	r2, [r3, #0]

    if (bButtonState == GPIO_PIN_RESET && bPrevButton == GPIO_PIN_SET) {
 8001a86:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <CheckButtonB+0xa0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d132      	bne.n	8001af4 <CheckButtonB+0x88>
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <CheckButtonB+0xa4>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d12e      	bne.n	8001af4 <CheckButtonB+0x88>

    	rrr_robot_interfaces__srv__RRRMode_Request__init(&mode_request);
 8001a96:	481f      	ldr	r0, [pc, #124]	@ (8001b14 <CheckButtonB+0xa8>)
 8001a98:	f00e fcc6 	bl	8010428 <rrr_robot_interfaces__srv__RRRMode_Request__init>

    	teleop_num = teleop_num % 2;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <CheckButtonB+0xac>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <CheckButtonB+0xac>)
 8001aa8:	801a      	strh	r2, [r3, #0]
    	teleop_num = teleop_num + 1;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <CheckButtonB+0xac>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <CheckButtonB+0xac>)
 8001ab4:	801a      	strh	r2, [r3, #0]

    	if (teleop_num == 1){
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <CheckButtonB+0xac>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <CheckButtonB+0x64>
    		rosidl_runtime_c__String__assign(&mode_request.mode_call, "Teleop");
 8001abe:	4917      	ldr	r1, [pc, #92]	@ (8001b1c <CheckButtonB+0xb0>)
 8001ac0:	4814      	ldr	r0, [pc, #80]	@ (8001b14 <CheckButtonB+0xa8>)
 8001ac2:	f00e fc59 	bl	8010378 <rosidl_runtime_c__String__assign>
    		rosidl_runtime_c__String__assign(&mode_request.ref, "");
 8001ac6:	4916      	ldr	r1, [pc, #88]	@ (8001b20 <CheckButtonB+0xb4>)
 8001ac8:	4816      	ldr	r0, [pc, #88]	@ (8001b24 <CheckButtonB+0xb8>)
 8001aca:	f00e fc55 	bl	8010378 <rosidl_runtime_c__String__assign>
 8001ace:	e00b      	b.n	8001ae8 <CheckButtonB+0x7c>
    	}
		else if (teleop_num == 2){
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <CheckButtonB+0xac>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d107      	bne.n	8001ae8 <CheckButtonB+0x7c>
			rosidl_runtime_c__String__assign(&mode_request.mode_call, "Auto");
 8001ad8:	4913      	ldr	r1, [pc, #76]	@ (8001b28 <CheckButtonB+0xbc>)
 8001ada:	480e      	ldr	r0, [pc, #56]	@ (8001b14 <CheckButtonB+0xa8>)
 8001adc:	f00e fc4c 	bl	8010378 <rosidl_runtime_c__String__assign>
			rosidl_runtime_c__String__assign(&mode_request.ref, "");
 8001ae0:	490f      	ldr	r1, [pc, #60]	@ (8001b20 <CheckButtonB+0xb4>)
 8001ae2:	4810      	ldr	r0, [pc, #64]	@ (8001b24 <CheckButtonB+0xb8>)
 8001ae4:	f00e fc48 	bl	8010378 <rosidl_runtime_c__String__assign>
		};

    	int64_t sequence_number;
        RCSOFTCHECK(rcl_send_request(&mode_client, &mode_request, &sequence_number));
 8001ae8:	463b      	mov	r3, r7
 8001aea:	461a      	mov	r2, r3
 8001aec:	4909      	ldr	r1, [pc, #36]	@ (8001b14 <CheckButtonB+0xa8>)
 8001aee:	480f      	ldr	r0, [pc, #60]	@ (8001b2c <CheckButtonB+0xc0>)
 8001af0:	f00a fddc 	bl	800c6ac <rcl_send_request>
    }
    HAL_Delay(10);
 8001af4:	200a      	movs	r0, #10
 8001af6:	f000 fd31 	bl	800255c <HAL_Delay>

    bPrevButton = bButtonState;
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <CheckButtonB+0xa0>)
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <CheckButtonB+0xa4>)
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20004ccd 	.word	0x20004ccd
 8001b10:	20004cd2 	.word	0x20004cd2
 8001b14:	20004afc 	.word	0x20004afc
 8001b18:	20004cc8 	.word	0x20004cc8
 8001b1c:	08019e4c 	.word	0x08019e4c
 8001b20:	08019e14 	.word	0x08019e14
 8001b24:	20004b08 	.word	0x20004b08
 8001b28:	08019e54 	.word	0x08019e54
 8001b2c:	20004ac0 	.word	0x20004ac0

08001b30 <CheckButtonD>:


void CheckButtonD() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
    dButtonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001b36:	2110      	movs	r1, #16
 8001b38:	4824      	ldr	r0, [pc, #144]	@ (8001bcc <CheckButtonD+0x9c>)
 8001b3a:	f003 fa07 	bl	8004f4c <HAL_GPIO_ReadPin>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <CheckButtonD+0xa0>)
 8001b44:	701a      	strb	r2, [r3, #0]

    if (dButtonState == GPIO_PIN_RESET && dPrevButton == GPIO_PIN_SET) {
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <CheckButtonD+0xa0>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d132      	bne.n	8001bb4 <CheckButtonD+0x84>
 8001b4e:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <CheckButtonD+0xa4>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d12e      	bne.n	8001bb4 <CheckButtonD+0x84>

    	rrr_robot_interfaces__srv__RRRMode_Request__init(&ref_request);
 8001b56:	4820      	ldr	r0, [pc, #128]	@ (8001bd8 <CheckButtonD+0xa8>)
 8001b58:	f00e fc66 	bl	8010428 <rrr_robot_interfaces__srv__RRRMode_Request__init>


    	ref_num = ref_num % 2;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <CheckButtonD+0xac>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <CheckButtonD+0xac>)
 8001b68:	801a      	strh	r2, [r3, #0]
    	ref_num = ref_num + 1;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <CheckButtonD+0xac>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <CheckButtonD+0xac>)
 8001b74:	801a      	strh	r2, [r3, #0]

    	if (ref_num == 1){
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <CheckButtonD+0xac>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <CheckButtonD+0x60>
    		rosidl_runtime_c__String__assign(&ref_request.mode_call, "Teleop");
 8001b7e:	4918      	ldr	r1, [pc, #96]	@ (8001be0 <CheckButtonD+0xb0>)
 8001b80:	4815      	ldr	r0, [pc, #84]	@ (8001bd8 <CheckButtonD+0xa8>)
 8001b82:	f00e fbf9 	bl	8010378 <rosidl_runtime_c__String__assign>
    		rosidl_runtime_c__String__assign(&ref_request.ref, "base");
 8001b86:	4917      	ldr	r1, [pc, #92]	@ (8001be4 <CheckButtonD+0xb4>)
 8001b88:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <CheckButtonD+0xb8>)
 8001b8a:	f00e fbf5 	bl	8010378 <rosidl_runtime_c__String__assign>
 8001b8e:	e00b      	b.n	8001ba8 <CheckButtonD+0x78>
    	}
		else if (ref_num == 2){
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <CheckButtonD+0xac>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d107      	bne.n	8001ba8 <CheckButtonD+0x78>
			rosidl_runtime_c__String__assign(&ref_request.mode_call, "Teleop");
 8001b98:	4911      	ldr	r1, [pc, #68]	@ (8001be0 <CheckButtonD+0xb0>)
 8001b9a:	480f      	ldr	r0, [pc, #60]	@ (8001bd8 <CheckButtonD+0xa8>)
 8001b9c:	f00e fbec 	bl	8010378 <rosidl_runtime_c__String__assign>
			rosidl_runtime_c__String__assign(&ref_request.ref, "hand");
 8001ba0:	4912      	ldr	r1, [pc, #72]	@ (8001bec <CheckButtonD+0xbc>)
 8001ba2:	4811      	ldr	r0, [pc, #68]	@ (8001be8 <CheckButtonD+0xb8>)
 8001ba4:	f00e fbe8 	bl	8010378 <rosidl_runtime_c__String__assign>
		};

    	int64_t sequence_number;
    	RCSOFTCHECK(rcl_send_request(&ref_client, &ref_request, &sequence_number));
 8001ba8:	463b      	mov	r3, r7
 8001baa:	461a      	mov	r2, r3
 8001bac:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <CheckButtonD+0xa8>)
 8001bae:	4810      	ldr	r0, [pc, #64]	@ (8001bf0 <CheckButtonD+0xc0>)
 8001bb0:	f00a fd7c 	bl	800c6ac <rcl_send_request>
    }
    HAL_Delay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f000 fcd1 	bl	800255c <HAL_Delay>

    dPrevButton = dButtonState;
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <CheckButtonD+0xa0>)
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <CheckButtonD+0xa4>)
 8001bc0:	701a      	strb	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	20004ccf 	.word	0x20004ccf
 8001bd4:	20004cd4 	.word	0x20004cd4
 8001bd8:	20004b14 	.word	0x20004b14
 8001bdc:	20004cca 	.word	0x20004cca
 8001be0:	08019e4c 	.word	0x08019e4c
 8001be4:	08019e5c 	.word	0x08019e5c
 8001be8:	20004b20 	.word	0x20004b20
 8001bec:	08019e64 	.word	0x08019e64
 8001bf0:	20004abc 	.word	0x20004abc

08001bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c06:	f000 fc8b 	bl	8002520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40012c00 	.word	0x40012c00

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <Error_Handler+0x8>

08001c24 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <microros_allocate+0x3c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <microros_allocate+0x3c>)
 8001c3c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <microros_allocate+0x40>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <microros_allocate+0x40>)
 8001c4c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff f846 	bl	8000ce0 <pvPortMallocMicroROS>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20004cd8 	.word	0x20004cd8
 8001c64:	20004cdc 	.word	0x20004cdc

08001c68 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00c      	beq.n	8001c92 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff f955 	bl	8000f28 <getBlockSize>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <microros_deallocate+0x34>)
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <microros_deallocate+0x34>)
 8001c8a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff f8ef 	bl	8000e70 <vPortFreeMicroROS>
  }
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20004cdc 	.word	0x20004cdc

08001ca0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001cac:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <microros_reallocate+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <microros_reallocate+0x64>)
 8001cba:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <microros_reallocate+0x68>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <microros_reallocate+0x68>)
 8001cca:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d104      	bne.n	8001cdc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f7ff f804 	bl	8000ce0 <pvPortMallocMicroROS>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	e00e      	b.n	8001cfa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7ff f923 	bl	8000f28 <getBlockSize>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <microros_reallocate+0x68>)
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <microros_reallocate+0x68>)
 8001cee:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff f936 	bl	8000f64 <pvPortReallocMicroROS>
 8001cf8:	4603      	mov	r3, r0
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20004cd8 	.word	0x20004cd8
 8001d08:	20004cdc 	.word	0x20004cdc

08001d0c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	4a0c      	ldr	r2, [pc, #48]	@ (8001d54 <microros_zero_allocate+0x48>)
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <microros_zero_allocate+0x48>)
 8001d2a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4a08      	ldr	r2, [pc, #32]	@ (8001d58 <microros_zero_allocate+0x4c>)
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <microros_zero_allocate+0x4c>)
 8001d3e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff f93b 	bl	8000fbe <pvPortCallocMicroROS>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20004cd8 	.word	0x20004cd8
 8001d58:	20004cdc 	.word	0x20004cdc
 8001d5c:	00000000 	.word	0x00000000

08001d60 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d76:	a320      	add	r3, pc, #128	@ (adr r3, 8001df8 <UTILS_NanosecondsToTimespec+0x98>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fcc4 	bl	8000708 <__aeabi_ldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d8e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001df8 <UTILS_NanosecondsToTimespec+0x98>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fcb8 	bl	8000708 <__aeabi_ldivmod>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	da20      	bge.n	8001de6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a11      	ldr	r2, [pc, #68]	@ (8001df0 <UTILS_NanosecondsToTimespec+0x90>)
 8001daa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dae:	1712      	asrs	r2, r2, #28
 8001db0:	17db      	asrs	r3, r3, #31
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	6979      	ldr	r1, [r7, #20]
 8001dc0:	17c8      	asrs	r0, r1, #31
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	ebb2 0804 	subs.w	r8, r2, r4
 8001dca:	eb63 0905 	sbc.w	r9, r3, r5
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	4906      	ldr	r1, [pc, #24]	@ (8001df4 <UTILS_NanosecondsToTimespec+0x94>)
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	441a      	add	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
    }
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001df0:	44b82fa1 	.word	0x44b82fa1
 8001df4:	3b9aca00 	.word	0x3b9aca00
 8001df8:	3b9aca00 	.word	0x3b9aca00
 8001dfc:	00000000 	.word	0x00000000

08001e00 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e04:	b08e      	sub	sp, #56	@ 0x38
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e0a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e0c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e10:	2300      	movs	r3, #0
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e26:	4618      	mov	r0, r3
 8001e28:	f007 fe62 	bl	8009af0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2e:	17da      	asrs	r2, r3, #31
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	61fa      	str	r2, [r7, #28]
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	69b9      	ldr	r1, [r7, #24]
 8001e3e:	000b      	movs	r3, r1
 8001e40:	2200      	movs	r2, #0
 8001e42:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	461c      	mov	r4, r3
 8001e4c:	4615      	mov	r5, r2
 8001e4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e52:	1911      	adds	r1, r2, r4
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	416b      	adcs	r3, r5
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e5e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	f04f 0400 	mov.w	r4, #0
 8001e6e:	f04f 0500 	mov.w	r5, #0
 8001e72:	015d      	lsls	r5, r3, #5
 8001e74:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e78:	0154      	lsls	r4, r2, #5
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	ebb2 0800 	subs.w	r8, r2, r0
 8001e82:	eb63 0901 	sbc.w	r9, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e92:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e96:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	eb18 0a00 	adds.w	sl, r8, r0
 8001ea2:	eb49 0b01 	adc.w	fp, r9, r1
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eb2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eb6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eba:	ebb2 040a 	subs.w	r4, r2, sl
 8001ebe:	603c      	str	r4, [r7, #0]
 8001ec0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eca:	4623      	mov	r3, r4
 8001ecc:	181b      	adds	r3, r3, r0
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	eb41 0303 	adc.w	r3, r1, r3
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	6a3a      	ldr	r2, [r7, #32]
 8001eda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ede:	f7ff ff3f 	bl	8001d60 <UTILS_NanosecondsToTimespec>

    return 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3738      	adds	r7, #56	@ 0x38
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_MspInit+0x50>)
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efa:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <HAL_MspInit+0x50>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f02:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_MspInit+0x50>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_MspInit+0x50>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f12:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <HAL_MspInit+0x50>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_MspInit+0x50>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	210f      	movs	r1, #15
 8001f2a:	f06f 0001 	mvn.w	r0, #1
 8001f2e:	f002 fb25 	bl	800457c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f32:	f003 f903 	bl	800513c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	@ 0x30
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f54:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <HAL_InitTick+0xc4>)
 8001f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f58:	4a2b      	ldr	r2, [pc, #172]	@ (8002008 <HAL_InitTick+0xc4>)
 8001f5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f60:	4b29      	ldr	r3, [pc, #164]	@ (8002008 <HAL_InitTick+0xc4>)
 8001f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f6c:	f107 020c 	add.w	r2, r7, #12
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fdd8 	bl	8005b2c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f7c:	f003 fdc0 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8001f80:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f84:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_InitTick+0xc8>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0c9b      	lsrs	r3, r3, #18
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <HAL_InitTick+0xcc>)
 8001f92:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_InitTick+0xd0>)
 8001f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f96:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <HAL_InitTick+0xcc>)
 8001f98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <HAL_InitTick+0xcc>)
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_InitTick+0xcc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <HAL_InitTick+0xcc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001fb0:	4817      	ldr	r0, [pc, #92]	@ (8002010 <HAL_InitTick+0xcc>)
 8001fb2:	f004 f881 	bl	80060b8 <HAL_TIM_Base_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11b      	bne.n	8001ffc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fc4:	4812      	ldr	r0, [pc, #72]	@ (8002010 <HAL_InitTick+0xcc>)
 8001fc6:	f004 f8d9 	bl	800617c <HAL_TIM_Base_Start_IT>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fd8:	2019      	movs	r0, #25
 8001fda:	f002 fae9 	bl	80045b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d808      	bhi.n	8001ff6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	2019      	movs	r0, #25
 8001fea:	f002 fac7 	bl	800457c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <HAL_InitTick+0xd4>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e002      	b.n	8001ffc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002000:	4618      	mov	r0, r3
 8002002:	3730      	adds	r7, #48	@ 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	431bde83 	.word	0x431bde83
 8002010:	20004ce0 	.word	0x20004ce0
 8002014:	40012c00 	.word	0x40012c00
 8002018:	20000008 	.word	0x20000008

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <DMA1_Channel1_IRQHandler+0x10>)
 800205a:	f002 fc9a 	bl	8004992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20004dc8 	.word	0x20004dc8

08002068 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <DMA1_Channel2_IRQHandler+0x10>)
 800206e:	f002 fc90 	bl	8004992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20004e28 	.word	0x20004e28

0800207c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA1_Channel3_IRQHandler+0x10>)
 8002082:	f002 fc86 	bl	8004992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000618 	.word	0x20000618

08002090 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <ADC1_2_IRQHandler+0x10>)
 8002096:	f000 ff79 	bl	8002f8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200005ac 	.word	0x200005ac

080020a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020aa:	f004 f8df 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20004ce0 	.word	0x20004ce0

080020b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020c0:	f002 ff74 	bl	8004fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80020cc:	4802      	ldr	r0, [pc, #8]	@ (80020d8 <LPUART1_IRQHandler+0x10>)
 80020ce:	f004 fcf1 	bl	8006ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20004d34 	.word	0x20004d34

080020dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return 1;
 80020e0:	2301      	movs	r3, #1
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_kill>:

int _kill(int pid, int sig)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020f6:	f016 fff1 	bl	80190dc <__errno>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2216      	movs	r2, #22
 80020fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_exit>:

void _exit (int status)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002114:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ffe7 	bl	80020ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800211e:	bf00      	nop
 8002120:	e7fd      	b.n	800211e <_exit+0x12>

08002122 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e00a      	b.n	800214a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002134:	f3af 8000 	nop.w
 8002138:	4601      	mov	r1, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	60ba      	str	r2, [r7, #8]
 8002140:	b2ca      	uxtb	r2, r1
 8002142:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	dbf0      	blt.n	8002134 <_read+0x12>
  }

  return len;
 8002152:	687b      	ldr	r3, [r7, #4]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e009      	b.n	8002182 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	60ba      	str	r2, [r7, #8]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	dbf1      	blt.n	800216e <_write+0x12>
  }
  return len;
 800218a:	687b      	ldr	r3, [r7, #4]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_close>:

int _close(int file)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021bc:	605a      	str	r2, [r3, #4]
  return 0;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_isatty>:

int _isatty(int file)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002204:	4a14      	ldr	r2, [pc, #80]	@ (8002258 <_sbrk+0x5c>)
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <_sbrk+0x60>)
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002210:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <_sbrk+0x64>)
 800221a:	4a12      	ldr	r2, [pc, #72]	@ (8002264 <_sbrk+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d207      	bcs.n	800223c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800222c:	f016 ff56 	bl	80190dc <__errno>
 8002230:	4603      	mov	r3, r0
 8002232:	220c      	movs	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800223a:	e009      	b.n	8002250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800223c:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002242:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	4a05      	ldr	r2, [pc, #20]	@ (8002260 <_sbrk+0x64>)
 800224c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20020000 	.word	0x20020000
 800225c:	00000400 	.word	0x00000400
 8002260:	20004d30 	.word	0x20004d30
 8002264:	2000b8f8 	.word	0x2000b8f8

08002268 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <SystemInit+0x20>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002272:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <SystemInit+0x20>)
 8002274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002290:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 8002292:	4a22      	ldr	r2, [pc, #136]	@ (800231c <MX_LPUART1_UART_Init+0x90>)
 8002294:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002296:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 8002298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800229c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80022ce:	4812      	ldr	r0, [pc, #72]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022d0:	f004 fa3e 	bl	8006750 <HAL_UART_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80022da:	f7ff fc9d 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022de:	2100      	movs	r1, #0
 80022e0:	480d      	ldr	r0, [pc, #52]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022e2:	f005 ff4e 	bl	8008182 <HAL_UARTEx_SetTxFifoThreshold>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80022ec:	f7ff fc94 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f0:	2100      	movs	r1, #0
 80022f2:	4809      	ldr	r0, [pc, #36]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 80022f4:	f005 ff83 	bl	80081fe <HAL_UARTEx_SetRxFifoThreshold>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80022fe:	f7ff fc8b 	bl	8001c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	@ (8002318 <MX_LPUART1_UART_Init+0x8c>)
 8002304:	f005 ff04 	bl	8008110 <HAL_UARTEx_DisableFifoMode>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800230e:	f7ff fc83 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20004d34 	.word	0x20004d34
 800231c:	40008000 	.word	0x40008000

08002320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b09e      	sub	sp, #120	@ 0x78
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	2254      	movs	r2, #84	@ 0x54
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f016 fe37 	bl	8018fb4 <memset>
  if(uartHandle->Instance==LPUART1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <HAL_UART_MspInit+0x164>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 8094 	bne.w	800247a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002352:	2320      	movs	r3, #32
 8002354:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fc5c 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800236a:	f7ff fc55 	bl	8001c18 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800236e:	4b46      	ldr	r3, [pc, #280]	@ (8002488 <HAL_UART_MspInit+0x168>)
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	4a45      	ldr	r2, [pc, #276]	@ (8002488 <HAL_UART_MspInit+0x168>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800237a:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <HAL_UART_MspInit+0x168>)
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	4b40      	ldr	r3, [pc, #256]	@ (8002488 <HAL_UART_MspInit+0x168>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	4a3f      	ldr	r2, [pc, #252]	@ (8002488 <HAL_UART_MspInit+0x168>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002392:	4b3d      	ldr	r3, [pc, #244]	@ (8002488 <HAL_UART_MspInit+0x168>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800239e:	230c      	movs	r3, #12
 80023a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80023ae:	230c      	movs	r3, #12
 80023b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023bc:	f002 fc44 	bl	8004c48 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023c2:	4a33      	ldr	r2, [pc, #204]	@ (8002490 <HAL_UART_MspInit+0x170>)
 80023c4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023c8:	2222      	movs	r2, #34	@ 0x22
 80023ca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d2:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023d8:	4b2c      	ldr	r3, [pc, #176]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023da:	2280      	movs	r2, #128	@ 0x80
 80023dc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023de:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e4:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80023ea:	4b28      	ldr	r3, [pc, #160]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023ec:	2220      	movs	r2, #32
 80023ee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023f0:	4b26      	ldr	r3, [pc, #152]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023f2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80023f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80023f8:	4824      	ldr	r0, [pc, #144]	@ (800248c <HAL_UART_MspInit+0x16c>)
 80023fa:	f002 f8e7 	bl	80045cc <HAL_DMA_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002404:	f7ff fc08 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a20      	ldr	r2, [pc, #128]	@ (800248c <HAL_UART_MspInit+0x16c>)
 800240c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002410:	4a1e      	ldr	r2, [pc, #120]	@ (800248c <HAL_UART_MspInit+0x16c>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002416:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002418:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <HAL_UART_MspInit+0x178>)
 800241a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800241c:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <HAL_UART_MspInit+0x174>)
 800241e:	2223      	movs	r2, #35	@ 0x23
 8002420:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002424:	2210      	movs	r2, #16
 8002426:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002428:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <HAL_UART_MspInit+0x174>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800242e:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002430:	2280      	movs	r2, #128	@ 0x80
 8002432:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002434:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <HAL_UART_MspInit+0x174>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002440:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002446:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002448:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800244c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800244e:	4811      	ldr	r0, [pc, #68]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002450:	f002 f8bc 	bl	80045cc <HAL_DMA_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800245a:	f7ff fbdd 	bl	8001c18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002462:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002464:	4a0b      	ldr	r2, [pc, #44]	@ (8002494 <HAL_UART_MspInit+0x174>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2105      	movs	r1, #5
 800246e:	205b      	movs	r0, #91	@ 0x5b
 8002470:	f002 f884 	bl	800457c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002474:	205b      	movs	r0, #91	@ 0x5b
 8002476:	f002 f89b 	bl	80045b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800247a:	bf00      	nop
 800247c:	3778      	adds	r7, #120	@ 0x78
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40008000 	.word	0x40008000
 8002488:	40021000 	.word	0x40021000
 800248c:	20004dc8 	.word	0x20004dc8
 8002490:	40020008 	.word	0x40020008
 8002494:	20004e28 	.word	0x20004e28
 8002498:	4002001c 	.word	0x4002001c

0800249c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800249c:	480d      	ldr	r0, [pc, #52]	@ (80024d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800249e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a0:	f7ff fee2 	bl	8002268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024a6:	490d      	ldr	r1, [pc, #52]	@ (80024dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a8:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <LoopForever+0xe>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024bc:	4c0a      	ldr	r4, [pc, #40]	@ (80024e8 <LoopForever+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ca:	f016 fe0d 	bl	80190e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ce:	f7ff f8cd 	bl	800166c <main>

080024d2 <LoopForever>:

LoopForever:
    b LoopForever
 80024d2:	e7fe      	b.n	80024d2 <LoopForever>
  ldr   r0, =_estack
 80024d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000590 	.word	0x20000590
  ldr r2, =_sidata
 80024e0:	0801b4cc 	.word	0x0801b4cc
  ldr r2, =_sbss
 80024e4:	20000590 	.word	0x20000590
  ldr r4, =_ebss
 80024e8:	2000b8f4 	.word	0x2000b8f4

080024ec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC3_IRQHandler>

080024ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f002 f834 	bl	8004566 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fe:	200f      	movs	r0, #15
 8002500:	f7ff fd20 	bl	8001f44 <HAL_InitTick>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	71fb      	strb	r3, [r7, #7]
 800250e:	e001      	b.n	8002514 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002510:	f7ff fcee 	bl	8001ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002514:	79fb      	ldrb	r3, [r7, #7]

}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_IncTick+0x1c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_IncTick+0x20>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4413      	add	r3, r2
 800252e:	4a03      	ldr	r2, [pc, #12]	@ (800253c <HAL_IncTick+0x1c>)
 8002530:	6013      	str	r3, [r2, #0]
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20004e88 	.word	0x20004e88
 8002540:	2000000c 	.word	0x2000000c

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20004e88 	.word	0x20004e88

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002574:	d004      	beq.n	8002580 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_Delay+0x40>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002580:	bf00      	nop
 8002582:	f7ff ffdf 	bl	8002544 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	429a      	cmp	r2, r3
 8002590:	d8f7      	bhi.n	8002582 <HAL_Delay+0x26>
  {
  }
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000000c 	.word	0x2000000c

080025a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	609a      	str	r2, [r3, #8]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3360      	adds	r3, #96	@ 0x60
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <LL_ADC_SetOffset+0x44>)
 800262a:	4013      	ands	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	4313      	orrs	r3, r2
 8002638:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	03fff000 	.word	0x03fff000

08002650 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3360      	adds	r3, #96	@ 0x60
 800265e:	461a      	mov	r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3360      	adds	r3, #96	@ 0x60
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b087      	sub	sp, #28
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3360      	adds	r3, #96	@ 0x60
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3360      	adds	r3, #96	@ 0x60
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	615a      	str	r2, [r3, #20]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800276a:	b480      	push	{r7}
 800276c:	b087      	sub	sp, #28
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3330      	adds	r3, #48	@ 0x30
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	4413      	add	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	211f      	movs	r1, #31
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	401a      	ands	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	f003 011f 	and.w	r1, r3, #31
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	431a      	orrs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3314      	adds	r3, #20
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0e5b      	lsrs	r3, r3, #25
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	4413      	add	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	0d1b      	lsrs	r3, r3, #20
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2107      	movs	r1, #7
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	401a      	ands	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	0d1b      	lsrs	r3, r3, #20
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	431a      	orrs	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0318 	and.w	r3, r3, #24
 8002862:	4908      	ldr	r1, [pc, #32]	@ (8002884 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002864:	40d9      	lsrs	r1, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	400b      	ands	r3, r1
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	431a      	orrs	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	0007ffff 	.word	0x0007ffff

08002888 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 031f 	and.w	r3, r3, #31
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6093      	str	r3, [r2, #8]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f8:	d101      	bne.n	80028fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800291c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002920:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002948:	d101      	bne.n	800294e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800296c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002994:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002998:	f043 0202 	orr.w	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <LL_ADC_IsEnabled+0x18>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_ADC_IsEnabled+0x1a>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d101      	bne.n	80029ea <LL_ADC_IsDisableOngoing+0x18>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_IsDisableOngoing+0x1a>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d101      	bne.n	8002a38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d101      	bne.n	8002a5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b089      	sub	sp, #36	@ 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1a9      	b.n	8002dda <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fe f887 	bl	8000ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff19 	bl	80028e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff feff 	bl	80028c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff34 	bl	8002934 <LL_ADC_IsInternalRegulatorEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d115      	bne.n	8002afe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff18 	bl	800290c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002adc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d50 <HAL_ADC_Init+0x2e4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	4a9c      	ldr	r2, [pc, #624]	@ (8002d54 <HAL_ADC_Init+0x2e8>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002af0:	e002      	b.n	8002af8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f9      	bne.n	8002af2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff16 	bl	8002934 <LL_ADC_IsInternalRegulatorEnabled>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b12:	f043 0210 	orr.w	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff76 	bl	8002a20 <LL_ADC_REG_IsConversionOngoing>
 8002b34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8142 	bne.w	8002dc8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 813e 	bne.w	8002dc8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b54:	f043 0202 	orr.w	r2, r3, #2
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff23 	bl	80029ac <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d141      	bne.n	8002bf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b74:	d004      	beq.n	8002b80 <HAL_ADC_Init+0x114>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a77      	ldr	r2, [pc, #476]	@ (8002d58 <HAL_ADC_Init+0x2ec>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_Init+0x134>
 8002b80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b84:	f7ff ff12 	bl	80029ac <LL_ADC_IsEnabled>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	4873      	ldr	r0, [pc, #460]	@ (8002d58 <HAL_ADC_Init+0x2ec>)
 8002b8c:	f7ff ff0e 	bl	80029ac <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4323      	orrs	r3, r4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e012      	b.n	8002bc6 <HAL_ADC_Init+0x15a>
 8002ba0:	486e      	ldr	r0, [pc, #440]	@ (8002d5c <HAL_ADC_Init+0x2f0>)
 8002ba2:	f7ff ff03 	bl	80029ac <LL_ADC_IsEnabled>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	486d      	ldr	r0, [pc, #436]	@ (8002d60 <HAL_ADC_Init+0x2f4>)
 8002baa:	f7ff feff 	bl	80029ac <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	431c      	orrs	r4, r3
 8002bb2:	486c      	ldr	r0, [pc, #432]	@ (8002d64 <HAL_ADC_Init+0x2f8>)
 8002bb4:	f7ff fefa 	bl	80029ac <LL_ADC_IsEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d012      	beq.n	8002bf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd2:	d004      	beq.n	8002bde <HAL_ADC_Init+0x172>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a5f      	ldr	r2, [pc, #380]	@ (8002d58 <HAL_ADC_Init+0x2ec>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Init+0x176>
 8002bde:	4a62      	ldr	r2, [pc, #392]	@ (8002d68 <HAL_ADC_Init+0x2fc>)
 8002be0:	e000      	b.n	8002be4 <HAL_ADC_Init+0x178>
 8002be2:	4a62      	ldr	r2, [pc, #392]	@ (8002d6c <HAL_ADC_Init+0x300>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f7ff fcd8 	bl	80025a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7f5b      	ldrb	r3, [r3, #29]
 8002bf4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bfa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	045b      	lsls	r3, r3, #17
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c38:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b48      	ldr	r3, [pc, #288]	@ (8002d70 <HAL_ADC_Init+0x304>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fee5 	bl	8002a46 <LL_ADC_INJ_IsConversionOngoing>
 8002c7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d17f      	bne.n	8002d84 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d17c      	bne.n	8002d84 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ca6:	f023 0302 	bic.w	r3, r3, #2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002cca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002cd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6911      	ldr	r1, [r2, #16]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002cea:	e013      	b.n	8002d14 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002cfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d10:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d12a      	bne.n	8002d74 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d40:	430a      	orrs	r2, r1
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	e019      	b.n	8002d84 <HAL_ADC_Init+0x318>
 8002d50:	20000004 	.word	0x20000004
 8002d54:	053e2d63 	.word	0x053e2d63
 8002d58:	50000100 	.word	0x50000100
 8002d5c:	50000400 	.word	0x50000400
 8002d60:	50000500 	.word	0x50000500
 8002d64:	50000600 	.word	0x50000600
 8002d68:	50000300 	.word	0x50000300
 8002d6c:	50000700 	.word	0x50000700
 8002d70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10c      	bne.n	8002da6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f023 010f 	bic.w	r1, r3, #15
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	1e5a      	subs	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002da4:	e007      	b.n	8002db6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 020f 	bic.w	r2, r2, #15
 8002db4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dc6:	e007      	b.n	8002dd8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	@ 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}
 8002de2:	bf00      	nop

08002de4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002df8:	d004      	beq.n	8002e04 <HAL_ADC_Start_DMA+0x20>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8002f68 <HAL_ADC_Start_DMA+0x184>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_Start_DMA+0x24>
 8002e04:	4b59      	ldr	r3, [pc, #356]	@ (8002f6c <HAL_ADC_Start_DMA+0x188>)
 8002e06:	e000      	b.n	8002e0a <HAL_ADC_Start_DMA+0x26>
 8002e08:	4b59      	ldr	r3, [pc, #356]	@ (8002f70 <HAL_ADC_Start_DMA+0x18c>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fd3c 	bl	8002888 <LL_ADC_GetMultimode>
 8002e10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fe02 	bl	8002a20 <LL_ADC_REG_IsConversionOngoing>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 809b 	bne.w	8002f5a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Start_DMA+0x4e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e096      	b.n	8002f60 <HAL_ADC_Start_DMA+0x17c>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f74 <HAL_ADC_Start_DMA+0x190>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d008      	beq.n	8002e56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d002      	beq.n	8002e56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b09      	cmp	r3, #9
 8002e54:	d17a      	bne.n	8002f4c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 ff60 	bl	8003d1c <ADC_Enable>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d16d      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002f68 <HAL_ADC_Start_DMA+0x184>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d009      	beq.n	8002e98 <HAL_ADC_Start_DMA+0xb4>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3b      	ldr	r2, [pc, #236]	@ (8002f78 <HAL_ADC_Start_DMA+0x194>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d002      	beq.n	8002e94 <HAL_ADC_Start_DMA+0xb0>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	e003      	b.n	8002e9c <HAL_ADC_Start_DMA+0xb8>
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_ADC_Start_DMA+0x198>)
 8002e96:	e001      	b.n	8002e9c <HAL_ADC_Start_DMA+0xb8>
 8002e98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d002      	beq.n	8002eaa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec6:	f023 0206 	bic.w	r2, r3, #6
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ece:	e002      	b.n	8002ed6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	4a29      	ldr	r2, [pc, #164]	@ (8002f80 <HAL_ADC_Start_DMA+0x19c>)
 8002edc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	4a28      	ldr	r2, [pc, #160]	@ (8002f84 <HAL_ADC_Start_DMA+0x1a0>)
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eea:	4a27      	ldr	r2, [pc, #156]	@ (8002f88 <HAL_ADC_Start_DMA+0x1a4>)
 8002eec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	221c      	movs	r2, #28
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0210 	orr.w	r2, r2, #16
 8002f0c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3340      	adds	r3, #64	@ 0x40
 8002f28:	4619      	mov	r1, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f001 fbf5 	bl	800471c <HAL_DMA_Start_IT>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fd5c 	bl	80029f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f40:	e00d      	b.n	8002f5e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002f4a:	e008      	b.n	8002f5e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002f58:	e001      	b.n	8002f5e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	50000100 	.word	0x50000100
 8002f6c:	50000300 	.word	0x50000300
 8002f70:	50000700 	.word	0x50000700
 8002f74:	50000600 	.word	0x50000600
 8002f78:	50000500 	.word	0x50000500
 8002f7c:	50000400 	.word	0x50000400
 8002f80:	08003f07 	.word	0x08003f07
 8002f84:	08003fdf 	.word	0x08003fdf
 8002f88:	08003ffb 	.word	0x08003ffb

08002f8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	@ 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fb0:	d004      	beq.n	8002fbc <HAL_ADC_IRQHandler+0x30>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a8e      	ldr	r2, [pc, #568]	@ (80031f0 <HAL_ADC_IRQHandler+0x264>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_IRQHandler+0x34>
 8002fbc:	4b8d      	ldr	r3, [pc, #564]	@ (80031f4 <HAL_ADC_IRQHandler+0x268>)
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADC_IRQHandler+0x36>
 8002fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80031f8 <HAL_ADC_IRQHandler+0x26c>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fc60 	bl	8002888 <LL_ADC_GetMultimode>
 8002fc8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_ADC_IRQHandler+0x78>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fee:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f001 f8f6 	bl	80041e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2202      	movs	r2, #2
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_ADC_IRQHandler+0x8c>
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8094 	beq.w	800314c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 808e 	beq.w	800314c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fb79 	bl	8002744 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d072      	beq.n	800313e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a64      	ldr	r2, [pc, #400]	@ (80031f0 <HAL_ADC_IRQHandler+0x264>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_ADC_IRQHandler+0xea>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a65      	ldr	r2, [pc, #404]	@ (80031fc <HAL_ADC_IRQHandler+0x270>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d002      	beq.n	8003072 <HAL_ADC_IRQHandler+0xe6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	e003      	b.n	800307a <HAL_ADC_IRQHandler+0xee>
 8003072:	4b63      	ldr	r3, [pc, #396]	@ (8003200 <HAL_ADC_IRQHandler+0x274>)
 8003074:	e001      	b.n	800307a <HAL_ADC_IRQHandler+0xee>
 8003076:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	4293      	cmp	r3, r2
 8003080:	d008      	beq.n	8003094 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b05      	cmp	r3, #5
 800308c:	d002      	beq.n	8003094 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b09      	cmp	r3, #9
 8003092:	d104      	bne.n	800309e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	e014      	b.n	80030c8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a53      	ldr	r2, [pc, #332]	@ (80031f0 <HAL_ADC_IRQHandler+0x264>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_ADC_IRQHandler+0x130>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a53      	ldr	r2, [pc, #332]	@ (80031fc <HAL_ADC_IRQHandler+0x270>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d002      	beq.n	80030b8 <HAL_ADC_IRQHandler+0x12c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e003      	b.n	80030c0 <HAL_ADC_IRQHandler+0x134>
 80030b8:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <HAL_ADC_IRQHandler+0x274>)
 80030ba:	e001      	b.n	80030c0 <HAL_ADC_IRQHandler+0x134>
 80030bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030c0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d135      	bne.n	800313e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d12e      	bne.n	800313e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fc9b 	bl	8002a20 <LL_ADC_REG_IsConversionOngoing>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11a      	bne.n	8003126 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020c 	bic.w	r2, r2, #12
 80030fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d112      	bne.n	800313e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003124:	e00b      	b.n	800313e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f984 	bl	800344c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	220c      	movs	r2, #12
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_ADC_IRQHandler+0x1d4>
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80b3 	beq.w	80032d2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80ad 	beq.w	80032d2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fb14 	bl	80027c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800319a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff facf 	bl	8002744 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031a6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a10      	ldr	r2, [pc, #64]	@ (80031f0 <HAL_ADC_IRQHandler+0x264>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_ADC_IRQHandler+0x23a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a11      	ldr	r2, [pc, #68]	@ (80031fc <HAL_ADC_IRQHandler+0x270>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d002      	beq.n	80031c2 <HAL_ADC_IRQHandler+0x236>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	e003      	b.n	80031ca <HAL_ADC_IRQHandler+0x23e>
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <HAL_ADC_IRQHandler+0x274>)
 80031c4:	e001      	b.n	80031ca <HAL_ADC_IRQHandler+0x23e>
 80031c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d008      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b06      	cmp	r3, #6
 80031dc:	d002      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b07      	cmp	r3, #7
 80031e2:	d10f      	bne.n	8003204 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	e01f      	b.n	800322e <HAL_ADC_IRQHandler+0x2a2>
 80031ee:	bf00      	nop
 80031f0:	50000100 	.word	0x50000100
 80031f4:	50000300 	.word	0x50000300
 80031f8:	50000700 	.word	0x50000700
 80031fc:	50000500 	.word	0x50000500
 8003200:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a8b      	ldr	r2, [pc, #556]	@ (8003438 <HAL_ADC_IRQHandler+0x4ac>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_ADC_IRQHandler+0x296>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a8a      	ldr	r2, [pc, #552]	@ (800343c <HAL_ADC_IRQHandler+0x4b0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d002      	beq.n	800321e <HAL_ADC_IRQHandler+0x292>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	e003      	b.n	8003226 <HAL_ADC_IRQHandler+0x29a>
 800321e:	4b88      	ldr	r3, [pc, #544]	@ (8003440 <HAL_ADC_IRQHandler+0x4b4>)
 8003220:	e001      	b.n	8003226 <HAL_ADC_IRQHandler+0x29a>
 8003222:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003226:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d047      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_ADC_IRQHandler+0x2c2>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03f      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d13a      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	d133      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d12e      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fbeb 	bl	8002a46 <LL_ADC_INJ_IsConversionOngoing>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d11a      	bne.n	80032ac <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003284:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d112      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032aa:	e00b      	b.n	80032c4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 ff67 	bl	8004198 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2260      	movs	r2, #96	@ 0x60
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d011      	beq.n	8003300 <HAL_ADC_IRQHandler+0x374>
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8be 	bl	8003474 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_ADC_IRQHandler+0x3a4>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003318:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 ff4d 	bl	80041c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800332e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_ADC_IRQHandler+0x3d4>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 ff3f 	bl	80041d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d043      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x466>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d03e      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800337c:	2301      	movs	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003380:	e021      	b.n	80033c6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003390:	d004      	beq.n	800339c <HAL_ADC_IRQHandler+0x410>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a28      	ldr	r2, [pc, #160]	@ (8003438 <HAL_ADC_IRQHandler+0x4ac>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_IRQHandler+0x414>
 800339c:	4b29      	ldr	r3, [pc, #164]	@ (8003444 <HAL_ADC_IRQHandler+0x4b8>)
 800339e:	e000      	b.n	80033a2 <HAL_ADC_IRQHandler+0x416>
 80033a0:	4b29      	ldr	r3, [pc, #164]	@ (8003448 <HAL_ADC_IRQHandler+0x4bc>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fa7e 	bl	80028a4 <LL_ADC_GetMultiDMATransfer>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80033ae:	2301      	movs	r3, #1
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b2:	e008      	b.n	80033c6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80033c2:	2301      	movs	r3, #1
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10e      	bne.n	80033ea <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033dc:	f043 0202 	orr.w	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f84f 	bl	8003488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d018      	beq.n	800342e <HAL_ADC_IRQHandler+0x4a2>
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003402:	2b00      	cmp	r3, #0
 8003404:	d013      	beq.n	800342e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	f043 0208 	orr.w	r2, r3, #8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003426:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 febf 	bl	80041ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800342e:	bf00      	nop
 8003430:	3728      	adds	r7, #40	@ 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	50000100 	.word	0x50000100
 800343c:	50000500 	.word	0x50000500
 8003440:	50000400 	.word	0x50000400
 8003444:	50000300 	.word	0x50000300
 8003448:	50000700 	.word	0x50000700

0800344c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b0b6      	sub	sp, #216	@ 0xd8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x24>
 80034ba:	2302      	movs	r3, #2
 80034bc:	f000 bc13 	b.w	8003ce6 <HAL_ADC_ConfigChannel+0x84a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff faa7 	bl	8002a20 <LL_ADC_REG_IsConversionOngoing>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 83f3 	bne.w	8003cc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f7ff f93f 	bl	800276a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fa95 	bl	8002a20 <LL_ADC_REG_IsConversionOngoing>
 80034f6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff faa1 	bl	8002a46 <LL_ADC_INJ_IsConversionOngoing>
 8003504:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003508:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 81d9 	bne.w	80038c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 81d4 	bne.w	80038c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003524:	d10f      	bne.n	8003546 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	4619      	mov	r1, r3
 8003532:	f7ff f959 	bl	80027e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff f8ed 	bl	800271e <LL_ADC_SetSamplingTimeCommonConfig>
 8003544:	e00e      	b.n	8003564 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	461a      	mov	r2, r3
 8003554:	f7ff f948 	bl	80027e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f8dd 	bl	800271e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d022      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6919      	ldr	r1, [r3, #16]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003596:	f7ff f837 	bl	8002608 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6919      	ldr	r1, [r3, #16]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f7ff f883 	bl	80026b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d102      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x126>
 80035bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035c0:	e000      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x128>
 80035c2:	2300      	movs	r3, #0
 80035c4:	461a      	mov	r2, r3
 80035c6:	f7ff f88f 	bl	80026e8 <LL_ADC_SetOffsetSaturation>
 80035ca:	e17b      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f83c 	bl	8002650 <LL_ADC_GetOffsetChannel>
 80035d8:	4603      	mov	r3, r0
 80035da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x15c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff f831 	bl	8002650 <LL_ADC_GetOffsetChannel>
 80035ee:	4603      	mov	r3, r0
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	f003 021f 	and.w	r2, r3, #31
 80035f6:	e01e      	b.n	8003636 <HAL_ADC_ConfigChannel+0x19a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f826 	bl	8002650 <LL_ADC_GetOffsetChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800361a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800361e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e004      	b.n	8003634 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800362a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <HAL_ADC_ConfigChannel+0x1b2>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	e018      	b.n	8003680 <HAL_ADC_ConfigChannel+0x1e4>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003666:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800366a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003672:	2320      	movs	r3, #32
 8003674:	e004      	b.n	8003680 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003680:	429a      	cmp	r2, r3
 8003682:	d106      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fff5 	bl	800267c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe ffd9 	bl	8002650 <LL_ADC_GetOffsetChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_ADC_ConfigChannel+0x222>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe ffce 	bl	8002650 <LL_ADC_GetOffsetChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	0e9b      	lsrs	r3, r3, #26
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	e01e      	b.n	80036fc <HAL_ADC_ConfigChannel+0x260>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe ffc3 	bl	8002650 <LL_ADC_GetOffsetChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80036dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80036e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80036ec:	2320      	movs	r3, #32
 80036ee:	e004      	b.n	80036fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80036f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x278>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	e018      	b.n	8003746 <HAL_ADC_ConfigChannel+0x2aa>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003728:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800372c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003738:	2320      	movs	r3, #32
 800373a:	e004      	b.n	8003746 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800373c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003746:	429a      	cmp	r2, r3
 8003748:	d106      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe ff92 	bl	800267c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe ff76 	bl	8002650 <LL_ADC_GetOffsetChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x2e8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2102      	movs	r1, #2
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe ff6b 	bl	8002650 <LL_ADC_GetOffsetChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	f003 021f 	and.w	r2, r3, #31
 8003782:	e01e      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x326>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe ff60 	bl	8002650 <LL_ADC_GetOffsetChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80037a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80037aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80037b2:	2320      	movs	r3, #32
 80037b4:	e004      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80037b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_ADC_ConfigChannel+0x33e>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0e9b      	lsrs	r3, r3, #26
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	e016      	b.n	8003808 <HAL_ADC_ConfigChannel+0x36c>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80037ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80037f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80037fa:	2320      	movs	r3, #32
 80037fc:	e004      	b.n	8003808 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80037fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003808:	429a      	cmp	r2, r3
 800380a:	d106      	bne.n	800381a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2200      	movs	r2, #0
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe ff31 	bl	800267c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2103      	movs	r1, #3
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe ff15 	bl	8002650 <LL_ADC_GetOffsetChannel>
 8003826:	4603      	mov	r3, r0
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x3aa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2103      	movs	r1, #3
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe ff0a 	bl	8002650 <LL_ADC_GetOffsetChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	0e9b      	lsrs	r3, r3, #26
 8003840:	f003 021f 	and.w	r2, r3, #31
 8003844:	e017      	b.n	8003876 <HAL_ADC_ConfigChannel+0x3da>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2103      	movs	r1, #3
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe feff 	bl	8002650 <LL_ADC_GetOffsetChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800385e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003860:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e003      	b.n	8003874 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800386c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <HAL_ADC_ConfigChannel+0x3f2>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0e9b      	lsrs	r3, r3, #26
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	e011      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x416>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800389c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800389e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80038a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80038aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d106      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	2103      	movs	r1, #3
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fedc 	bl	800267c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f86f 	bl	80029ac <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 813d 	bne.w	8003b50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f7fe ffac 	bl	8002840 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4aa2      	ldr	r2, [pc, #648]	@ (8003b78 <HAL_ADC_ConfigChannel+0x6dc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	f040 812e 	bne.w	8003b50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <HAL_ADC_ConfigChannel+0x480>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	3301      	adds	r3, #1
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2b09      	cmp	r3, #9
 8003912:	bf94      	ite	ls
 8003914:	2301      	movls	r3, #1
 8003916:	2300      	movhi	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e019      	b.n	8003950 <HAL_ADC_ConfigChannel+0x4b4>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800392a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800392c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800392e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e003      	b.n	8003940 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	2b09      	cmp	r3, #9
 8003948:	bf94      	ite	ls
 800394a:	2301      	movls	r3, #1
 800394c:	2300      	movhi	r3, #0
 800394e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003950:	2b00      	cmp	r3, #0
 8003952:	d079      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x4d4>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	3301      	adds	r3, #1
 8003968:	069b      	lsls	r3, r3, #26
 800396a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800396e:	e015      	b.n	800399c <HAL_ADC_ConfigChannel+0x500>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800397e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003980:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	069b      	lsls	r3, r3, #26
 8003998:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x520>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0e9b      	lsrs	r3, r3, #26
 80039ae:	3301      	adds	r3, #1
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ba:	e017      	b.n	80039ec <HAL_ADC_ConfigChannel+0x550>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80039ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80039ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80039d4:	2320      	movs	r3, #32
 80039d6:	e003      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80039d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	ea42 0103 	orr.w	r1, r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x576>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	3301      	adds	r3, #1
 8003a04:	f003 021f 	and.w	r2, r3, #31
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	051b      	lsls	r3, r3, #20
 8003a10:	e018      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x5a8>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	e003      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a30:	fab3 f383 	clz	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f003 021f 	and.w	r2, r3, #31
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a44:	430b      	orrs	r3, r1
 8003a46:	e07e      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d107      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x5c8>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0e9b      	lsrs	r3, r3, #26
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	069b      	lsls	r3, r3, #26
 8003a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a62:	e015      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x5f4>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e003      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	069b      	lsls	r3, r3, #26
 8003a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x614>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003aae:	e017      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x644>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	61fb      	str	r3, [r7, #28]
  return result;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e003      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	ea42 0103 	orr.w	r1, r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10d      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x670>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	3b1e      	subs	r3, #30
 8003b04:	051b      	lsls	r3, r3, #20
 8003b06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	e01b      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x6a8>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	613b      	str	r3, [r7, #16]
  return result;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	e003      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	f003 021f 	and.w	r2, r3, #31
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3b1e      	subs	r3, #30
 8003b3e:	051b      	lsls	r3, r3, #20
 8003b40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7fe fe4c 	bl	80027e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <HAL_ADC_ConfigChannel+0x6e0>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80be 	beq.w	8003cda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b66:	d004      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x6d6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <HAL_ADC_ConfigChannel+0x6e4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10a      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x6ec>
 8003b72:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <HAL_ADC_ConfigChannel+0x6e8>)
 8003b74:	e009      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x6ee>
 8003b76:	bf00      	nop
 8003b78:	407f0000 	.word	0x407f0000
 8003b7c:	80080000 	.word	0x80080000
 8003b80:	50000100 	.word	0x50000100
 8003b84:	50000300 	.word	0x50000300
 8003b88:	4b59      	ldr	r3, [pc, #356]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fd2e 	bl	80025ec <LL_ADC_GetCommonPathInternalCh>
 8003b90:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a56      	ldr	r2, [pc, #344]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x858>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x70c>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a55      	ldr	r2, [pc, #340]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x85c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d13a      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d134      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbc:	d005      	beq.n	8003bca <HAL_ADC_ConfigChannel+0x72e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a4e      	ldr	r2, [pc, #312]	@ (8003cfc <HAL_ADC_ConfigChannel+0x860>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	f040 8085 	bne.w	8003cd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd2:	d004      	beq.n	8003bde <HAL_ADC_ConfigChannel+0x742>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a49      	ldr	r2, [pc, #292]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x746>
 8003bde:	4a49      	ldr	r2, [pc, #292]	@ (8003d04 <HAL_ADC_ConfigChannel+0x868>)
 8003be0:	e000      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x748>
 8003be2:	4a43      	ldr	r2, [pc, #268]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003be8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f7fe fce9 	bl	80025c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf4:	4b44      	ldr	r3, [pc, #272]	@ (8003d08 <HAL_ADC_ConfigChannel+0x86c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	4a44      	ldr	r2, [pc, #272]	@ (8003d0c <HAL_ADC_ConfigChannel+0x870>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c0e:	e002      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f9      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c1c:	e05a      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3b      	ldr	r2, [pc, #236]	@ (8003d10 <HAL_ADC_ConfigChannel+0x874>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d125      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d11f      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a31      	ldr	r2, [pc, #196]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d104      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x7ac>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a34      	ldr	r2, [pc, #208]	@ (8003d14 <HAL_ADC_ConfigChannel+0x878>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d047      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c50:	d004      	beq.n	8003c5c <HAL_ADC_ConfigChannel+0x7c0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2a      	ldr	r2, [pc, #168]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x7c4>
 8003c5c:	4a29      	ldr	r2, [pc, #164]	@ (8003d04 <HAL_ADC_ConfigChannel+0x868>)
 8003c5e:	e000      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x7c6>
 8003c60:	4a23      	ldr	r2, [pc, #140]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7fe fcaa 	bl	80025c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c72:	e031      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a27      	ldr	r2, [pc, #156]	@ (8003d18 <HAL_ADC_ConfigChannel+0x87c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d12d      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d127      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x80c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_ADC_ConfigChannel+0x864>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x810>
 8003ca8:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <HAL_ADC_ConfigChannel+0x868>)
 8003caa:	e000      	b.n	8003cae <HAL_ADC_ConfigChannel+0x812>
 8003cac:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x854>)
 8003cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7fe fc84 	bl	80025c6 <LL_ADC_SetCommonPathInternalCh>
 8003cbe:	e00c      	b.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003cd2:	e002      	b.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ce2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	37d8      	adds	r7, #216	@ 0xd8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	50000700 	.word	0x50000700
 8003cf4:	c3210000 	.word	0xc3210000
 8003cf8:	90c00010 	.word	0x90c00010
 8003cfc:	50000600 	.word	0x50000600
 8003d00:	50000100 	.word	0x50000100
 8003d04:	50000300 	.word	0x50000300
 8003d08:	20000004 	.word	0x20000004
 8003d0c:	053e2d63 	.word	0x053e2d63
 8003d10:	c7520000 	.word	0xc7520000
 8003d14:	50000500 	.word	0x50000500
 8003d18:	cb840000 	.word	0xcb840000

08003d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fe3d 	bl	80029ac <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d176      	bne.n	8003e26 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e30 <ADC_Enable+0x114>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e062      	b.n	8003e28 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fdf8 	bl	800295c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d74:	d004      	beq.n	8003d80 <ADC_Enable+0x64>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003e34 <ADC_Enable+0x118>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <ADC_Enable+0x68>
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <ADC_Enable+0x11c>)
 8003d82:	e000      	b.n	8003d86 <ADC_Enable+0x6a>
 8003d84:	4b2d      	ldr	r3, [pc, #180]	@ (8003e3c <ADC_Enable+0x120>)
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fc30 	bl	80025ec <LL_ADC_GetCommonPathInternalCh>
 8003d8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d96:	4b2a      	ldr	r3, [pc, #168]	@ (8003e40 <ADC_Enable+0x124>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	4a29      	ldr	r2, [pc, #164]	@ (8003e44 <ADC_Enable+0x128>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003db0:	e002      	b.n	8003db8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f9      	bne.n	8003db2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003dbe:	f7fe fbc1 	bl	8002544 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dc4:	e028      	b.n	8003e18 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fdee 	bl	80029ac <LL_ADC_IsEnabled>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fdbe 	bl	800295c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003de0:	f7fe fbb0 	bl	8002544 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d914      	bls.n	8003e18 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d00d      	beq.n	8003e18 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e00:	f043 0210 	orr.w	r2, r3, #16
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e007      	b.n	8003e28 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d1cf      	bne.n	8003dc6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	8000003f 	.word	0x8000003f
 8003e34:	50000100 	.word	0x50000100
 8003e38:	50000300 	.word	0x50000300
 8003e3c:	50000700 	.word	0x50000700
 8003e40:	20000004 	.word	0x20000004
 8003e44:	053e2d63 	.word	0x053e2d63

08003e48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fdbc 	bl	80029d2 <LL_ADC_IsDisableOngoing>
 8003e5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fda3 	bl	80029ac <LL_ADC_IsEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d047      	beq.n	8003efc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d144      	bne.n	8003efc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030d 	and.w	r3, r3, #13
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10c      	bne.n	8003e9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fd7d 	bl	8002984 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e92:	f7fe fb57 	bl	8002544 <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e98:	e029      	b.n	8003eee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	f043 0210 	orr.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e023      	b.n	8003efe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eb6:	f7fe fb45 	bl	8002544 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d914      	bls.n	8003eee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	f043 0210 	orr.w	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e007      	b.n	8003efe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1dc      	bne.n	8003eb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d14b      	bne.n	8003fb8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d021      	beq.n	8003f7e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fc00 	bl	8002744 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d032      	beq.n	8003fb0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d12b      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11f      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f7c:	e018      	b.n	8003fb0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fa4b 	bl	800344c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fb6:	e00e      	b.n	8003fd6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fa5f 	bl	8003488 <HAL_ADC_ErrorCallback>
}
 8003fca:	e004      	b.n	8003fd6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fa37 	bl	8003460 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff fa31 	bl	8003488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <LL_ADC_IsEnabled>:
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <LL_ADC_IsEnabled+0x18>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <LL_ADC_IsEnabled+0x1a>
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_StartCalibration>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004066:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004070:	4313      	orrs	r3, r2
 8004072:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_ADC_IsCalibrationOnGoing>:
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800409a:	d101      	bne.n	80040a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_ADC_REG_IsConversionOngoing>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d101      	bne.n	80040c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e04d      	b.n	800418c <HAL_ADCEx_Calibration_Start+0xb8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fea5 	bl	8003e48 <ADC_Disable>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d136      	bne.n	8004176 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004110:	f023 0302 	bic.w	r3, r3, #2
 8004114:	f043 0202 	orr.w	r2, r3, #2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff96 	bl	8004054 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004128:	e014      	b.n	8004154 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3301      	adds	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4a18      	ldr	r2, [pc, #96]	@ (8004194 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d90d      	bls.n	8004154 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	f023 0312 	bic.w	r3, r3, #18
 8004140:	f043 0210 	orr.w	r2, r3, #16
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e01b      	b.n	800418c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff94 	bl	8004086 <LL_ADC_IsCalibrationOnGoing>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e2      	bne.n	800412a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004174:	e005      	b.n	8004182 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417a:	f043 0210 	orr.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	0004de01 	.word	0x0004de01

08004198 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b0a1      	sub	sp, #132	@ 0x84
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004216:	2302      	movs	r3, #2
 8004218:	e0e7      	b.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004222:	2300      	movs	r3, #0
 8004224:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004226:	2300      	movs	r3, #0
 8004228:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004232:	d102      	bne.n	800423a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004234:	4b6f      	ldr	r3, [pc, #444]	@ (80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	e009      	b.n	800424e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6e      	ldr	r2, [pc, #440]	@ (80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d102      	bne.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004244:	4b6d      	ldr	r3, [pc, #436]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	e001      	b.n	800424e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0be      	b.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff1d 	bl	80040ae <LL_ADC_REG_IsConversionOngoing>
 8004274:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff17 	bl	80040ae <LL_ADC_REG_IsConversionOngoing>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 80a0 	bne.w	80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 809c 	bne.w	80043c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004298:	d004      	beq.n	80042a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a55      	ldr	r2, [pc, #340]	@ (80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d101      	bne.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80042a4:	4b56      	ldr	r3, [pc, #344]	@ (8004400 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80042a6:	e000      	b.n	80042aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80042a8:	4b56      	ldr	r3, [pc, #344]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80042aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d04b      	beq.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042c6:	035b      	lsls	r3, r3, #13
 80042c8:	430b      	orrs	r3, r1
 80042ca:	431a      	orrs	r2, r3
 80042cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042d8:	d004      	beq.n	80042e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a45      	ldr	r2, [pc, #276]	@ (80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10f      	bne.n	8004304 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80042e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80042e8:	f7ff fea1 	bl	800402e <LL_ADC_IsEnabled>
 80042ec:	4604      	mov	r4, r0
 80042ee:	4841      	ldr	r0, [pc, #260]	@ (80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042f0:	f7ff fe9d 	bl	800402e <LL_ADC_IsEnabled>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4323      	orrs	r3, r4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e012      	b.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004304:	483c      	ldr	r0, [pc, #240]	@ (80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004306:	f7ff fe92 	bl	800402e <LL_ADC_IsEnabled>
 800430a:	4604      	mov	r4, r0
 800430c:	483b      	ldr	r0, [pc, #236]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800430e:	f7ff fe8e 	bl	800402e <LL_ADC_IsEnabled>
 8004312:	4603      	mov	r3, r0
 8004314:	431c      	orrs	r4, r3
 8004316:	483c      	ldr	r0, [pc, #240]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004318:	f7ff fe89 	bl	800402e <LL_ADC_IsEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	4323      	orrs	r3, r4
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d056      	beq.n	80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800432e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004336:	f023 030f 	bic.w	r3, r3, #15
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	6892      	ldr	r2, [r2, #8]
 8004342:	430a      	orrs	r2, r1
 8004344:	431a      	orrs	r2, r3
 8004346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004348:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800434a:	e047      	b.n	80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800434c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004356:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004360:	d004      	beq.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a23      	ldr	r2, [pc, #140]	@ (80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10f      	bne.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800436c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004370:	f7ff fe5d 	bl	800402e <LL_ADC_IsEnabled>
 8004374:	4604      	mov	r4, r0
 8004376:	481f      	ldr	r0, [pc, #124]	@ (80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004378:	f7ff fe59 	bl	800402e <LL_ADC_IsEnabled>
 800437c:	4603      	mov	r3, r0
 800437e:	4323      	orrs	r3, r4
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e012      	b.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800438c:	481a      	ldr	r0, [pc, #104]	@ (80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800438e:	f7ff fe4e 	bl	800402e <LL_ADC_IsEnabled>
 8004392:	4604      	mov	r4, r0
 8004394:	4819      	ldr	r0, [pc, #100]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004396:	f7ff fe4a 	bl	800402e <LL_ADC_IsEnabled>
 800439a:	4603      	mov	r3, r0
 800439c:	431c      	orrs	r4, r3
 800439e:	481a      	ldr	r0, [pc, #104]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043a0:	f7ff fe45 	bl	800402e <LL_ADC_IsEnabled>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4323      	orrs	r3, r4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d012      	beq.n	80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80043be:	f023 030f 	bic.w	r3, r3, #15
 80043c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043c6:	e009      	b.n	80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043cc:	f043 0220 	orr.w	r2, r3, #32
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80043da:	e000      	b.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3784      	adds	r7, #132	@ 0x84
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd90      	pop	{r4, r7, pc}
 80043f2:	bf00      	nop
 80043f4:	50000100 	.word	0x50000100
 80043f8:	50000400 	.word	0x50000400
 80043fc:	50000500 	.word	0x50000500
 8004400:	50000300 	.word	0x50000300
 8004404:	50000700 	.word	0x50000700
 8004408:	50000600 	.word	0x50000600

0800440c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004428:	4013      	ands	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443e:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <__NVIC_SetPriorityGrouping+0x44>)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	60d3      	str	r3, [r2, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004458:	4b04      	ldr	r3, [pc, #16]	@ (800446c <__NVIC_GetPriorityGrouping+0x18>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	f003 0307 	and.w	r3, r3, #7
}
 8004462:	4618      	mov	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	db0b      	blt.n	800449a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	4907      	ldr	r1, [pc, #28]	@ (80044a8 <__NVIC_EnableIRQ+0x38>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2001      	movs	r0, #1
 8004492:	fa00 f202 	lsl.w	r2, r0, r2
 8004496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000e100 	.word	0xe000e100

080044ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	6039      	str	r1, [r7, #0]
 80044b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	db0a      	blt.n	80044d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	490c      	ldr	r1, [pc, #48]	@ (80044f8 <__NVIC_SetPriority+0x4c>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	0112      	lsls	r2, r2, #4
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	440b      	add	r3, r1
 80044d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044d4:	e00a      	b.n	80044ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	4908      	ldr	r1, [pc, #32]	@ (80044fc <__NVIC_SetPriority+0x50>)
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	3b04      	subs	r3, #4
 80044e4:	0112      	lsls	r2, r2, #4
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	440b      	add	r3, r1
 80044ea:	761a      	strb	r2, [r3, #24]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000e100 	.word	0xe000e100
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	@ 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f1c3 0307 	rsb	r3, r3, #7
 800451a:	2b04      	cmp	r3, #4
 800451c:	bf28      	it	cs
 800451e:	2304      	movcs	r3, #4
 8004520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3304      	adds	r3, #4
 8004526:	2b06      	cmp	r3, #6
 8004528:	d902      	bls.n	8004530 <NVIC_EncodePriority+0x30>
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3b03      	subs	r3, #3
 800452e:	e000      	b.n	8004532 <NVIC_EncodePriority+0x32>
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	401a      	ands	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fa01 f303 	lsl.w	r3, r1, r3
 8004552:	43d9      	mvns	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004558:	4313      	orrs	r3, r2
         );
}
 800455a:	4618      	mov	r0, r3
 800455c:	3724      	adds	r7, #36	@ 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ff4c 	bl	800440c <__NVIC_SetPriorityGrouping>
}
 8004574:	bf00      	nop
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800458a:	f7ff ff63 	bl	8004454 <__NVIC_GetPriorityGrouping>
 800458e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f7ff ffb3 	bl	8004500 <NVIC_EncodePriority>
 800459a:	4602      	mov	r2, r0
 800459c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff82 	bl	80044ac <__NVIC_SetPriority>
}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ff56 	bl	8004470 <__NVIC_EnableIRQ>
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e08d      	b.n	80046fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b47      	ldr	r3, [pc, #284]	@ (8004704 <HAL_DMA_Init+0x138>)
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d80f      	bhi.n	800460a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b45      	ldr	r3, [pc, #276]	@ (8004708 <HAL_DMA_Init+0x13c>)
 80045f2:	4413      	add	r3, r2
 80045f4:	4a45      	ldr	r2, [pc, #276]	@ (800470c <HAL_DMA_Init+0x140>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	009a      	lsls	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a42      	ldr	r2, [pc, #264]	@ (8004710 <HAL_DMA_Init+0x144>)
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40
 8004608:	e00e      	b.n	8004628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	4b40      	ldr	r3, [pc, #256]	@ (8004714 <HAL_DMA_Init+0x148>)
 8004612:	4413      	add	r3, r2
 8004614:	4a3d      	ldr	r2, [pc, #244]	@ (800470c <HAL_DMA_Init+0x140>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a3c      	ldr	r2, [pc, #240]	@ (8004718 <HAL_DMA_Init+0x14c>)
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800463e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800464c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa82 	bl	8004b84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004688:	d102      	bne.n	8004690 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_DMA_Init+0x104>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d80c      	bhi.n	80046d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 faa2 	bl	8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	e008      	b.n	80046e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40020407 	.word	0x40020407
 8004708:	bffdfff8 	.word	0xbffdfff8
 800470c:	cccccccd 	.word	0xcccccccd
 8004710:	40020000 	.word	0x40020000
 8004714:	bffdfbf8 	.word	0xbffdfbf8
 8004718:	40020400 	.word	0x40020400

0800471c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_DMA_Start_IT+0x20>
 8004738:	2302      	movs	r3, #2
 800473a:	e066      	b.n	800480a <HAL_DMA_Start_IT+0xee>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d155      	bne.n	80047fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f9c7 	bl	8004b08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 020e 	orr.w	r2, r2, #14
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e00f      	b.n	80047b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0204 	bic.w	r2, r2, #4
 80047a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 020a 	orr.w	r2, r2, #10
 80047b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e005      	b.n	8004808 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d005      	beq.n	8004836 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2204      	movs	r2, #4
 800482e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
 8004834:	e037      	b.n	80048a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 020e 	bic.w	r2, r2, #14
 8004844:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004854:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486a:	f003 021f 	and.w	r2, r3, #31
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	2101      	movs	r1, #1
 8004874:	fa01 f202 	lsl.w	r2, r1, r2
 8004878:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004882:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800489a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d00d      	beq.n	80048f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2204      	movs	r2, #4
 80048e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e047      	b.n	8004988 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 020e 	bic.w	r2, r2, #14
 8004906:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004922:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	2101      	movs	r1, #1
 8004936:	fa01 f202 	lsl.w	r2, r1, r2
 800493a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004944:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00c      	beq.n	8004968 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800495c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004966:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
    }
  }
  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2204      	movs	r2, #4
 80049b4:	409a      	lsls	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d026      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x7a>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d021      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d107      	bne.n	80049e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0204 	bic.w	r2, r2, #4
 80049e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	f003 021f 	and.w	r2, r3, #31
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2104      	movs	r1, #4
 80049f4:	fa01 f202 	lsl.w	r2, r1, r2
 80049f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d071      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a0a:	e06c      	b.n	8004ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2202      	movs	r2, #2
 8004a16:	409a      	lsls	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02e      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d029      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020a 	bic.w	r2, r2, #10
 8004a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a54:	f003 021f 	and.w	r2, r3, #31
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d038      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a7c:	e033      	b.n	8004ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	2208      	movs	r2, #8
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02a      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d025      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 020e 	bic.w	r2, r2, #14
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab0:	f003 021f 	and.w	r2, r3, #31
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	2101      	movs	r1, #1
 8004aba:	fa01 f202 	lsl.w	r2, r1, r2
 8004abe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
}
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	f003 021f 	and.w	r2, r3, #31
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2101      	movs	r1, #1
 8004b40:	fa01 f202 	lsl.w	r2, r1, r2
 8004b44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d108      	bne.n	8004b68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b66:	e007      	b.n	8004b78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b16      	ldr	r3, [pc, #88]	@ (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d802      	bhi.n	8004b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b98:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e001      	b.n	8004ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ba0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	3b08      	subs	r3, #8
 8004bae:	4a12      	ldr	r2, [pc, #72]	@ (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	009a      	lsls	r2, r3, #2
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40020407 	.word	0x40020407
 8004bf0:	40020800 	.word	0x40020800
 8004bf4:	40020820 	.word	0x40020820
 8004bf8:	cccccccd 	.word	0xcccccccd
 8004bfc:	40020880 	.word	0x40020880

08004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a08      	ldr	r2, [pc, #32]	@ (8004c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	1000823f 	.word	0x1000823f
 8004c44:	40020940 	.word	0x40020940

08004c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c56:	e15a      	b.n	8004f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	4013      	ands	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 814c 	beq.w	8004f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d005      	beq.n	8004c88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d130      	bne.n	8004cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	2203      	movs	r2, #3
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0201 	and.w	r2, r3, #1
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d017      	beq.n	8004d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	2203      	movs	r2, #3
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d123      	bne.n	8004d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	08da      	lsrs	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3208      	adds	r2, #8
 8004d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	08da      	lsrs	r2, r3, #3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3208      	adds	r2, #8
 8004d74:	6939      	ldr	r1, [r7, #16]
 8004d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2203      	movs	r2, #3
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0203 	and.w	r2, r3, #3
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80a6 	beq.w	8004f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f2c <HAL_GPIO_Init+0x2e4>)
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f2c <HAL_GPIO_Init+0x2e4>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004dc8:	4b58      	ldr	r3, [pc, #352]	@ (8004f2c <HAL_GPIO_Init+0x2e4>)
 8004dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dd4:	4a56      	ldr	r2, [pc, #344]	@ (8004f30 <HAL_GPIO_Init+0x2e8>)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	089b      	lsrs	r3, r3, #2
 8004dda:	3302      	adds	r3, #2
 8004ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	220f      	movs	r2, #15
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004dfe:	d01f      	beq.n	8004e40 <HAL_GPIO_Init+0x1f8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a4c      	ldr	r2, [pc, #304]	@ (8004f34 <HAL_GPIO_Init+0x2ec>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d019      	beq.n	8004e3c <HAL_GPIO_Init+0x1f4>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a4b      	ldr	r2, [pc, #300]	@ (8004f38 <HAL_GPIO_Init+0x2f0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_GPIO_Init+0x1f0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a4a      	ldr	r2, [pc, #296]	@ (8004f3c <HAL_GPIO_Init+0x2f4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00d      	beq.n	8004e34 <HAL_GPIO_Init+0x1ec>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a49      	ldr	r2, [pc, #292]	@ (8004f40 <HAL_GPIO_Init+0x2f8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <HAL_GPIO_Init+0x1e8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a48      	ldr	r2, [pc, #288]	@ (8004f44 <HAL_GPIO_Init+0x2fc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <HAL_GPIO_Init+0x1e4>
 8004e28:	2305      	movs	r3, #5
 8004e2a:	e00a      	b.n	8004e42 <HAL_GPIO_Init+0x1fa>
 8004e2c:	2306      	movs	r3, #6
 8004e2e:	e008      	b.n	8004e42 <HAL_GPIO_Init+0x1fa>
 8004e30:	2304      	movs	r3, #4
 8004e32:	e006      	b.n	8004e42 <HAL_GPIO_Init+0x1fa>
 8004e34:	2303      	movs	r3, #3
 8004e36:	e004      	b.n	8004e42 <HAL_GPIO_Init+0x1fa>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e002      	b.n	8004e42 <HAL_GPIO_Init+0x1fa>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_GPIO_Init+0x1fa>
 8004e40:	2300      	movs	r3, #0
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	f002 0203 	and.w	r2, r2, #3
 8004e48:	0092      	lsls	r2, r2, #2
 8004e4a:	4093      	lsls	r3, r2
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e52:	4937      	ldr	r1, [pc, #220]	@ (8004f30 <HAL_GPIO_Init+0x2e8>)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	3302      	adds	r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e60:	4b39      	ldr	r3, [pc, #228]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e84:	4a30      	ldr	r2, [pc, #192]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	43db      	mvns	r3, r3
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4013      	ands	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004eae:	4a26      	ldr	r2, [pc, #152]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004eb4:	4b24      	ldr	r3, [pc, #144]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ede:	4b1a      	ldr	r3, [pc, #104]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f02:	4a11      	ldr	r2, [pc, #68]	@ (8004f48 <HAL_GPIO_Init+0x300>)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f ae9d 	bne.w	8004c58 <HAL_GPIO_Init+0x10>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40010000 	.word	0x40010000
 8004f34:	48000400 	.word	0x48000400
 8004f38:	48000800 	.word	0x48000800
 8004f3c:	48000c00 	.word	0x48000c00
 8004f40:	48001000 	.word	0x48001000
 8004f44:	48001400 	.word	0x48001400
 8004f48:	40010400 	.word	0x40010400

08004f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	887b      	ldrh	r3, [r7, #2]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e001      	b.n	8004f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	807b      	strh	r3, [r7, #2]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f8c:	787b      	ldrb	r3, [r7, #1]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f98:	e002      	b.n	8004fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fc2:	4a05      	ldr	r2, [pc, #20]	@ (8004fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f806 	bl	8004fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40010400 	.word	0x40010400

08004fdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d141      	bne.n	8005086 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005002:	4b4b      	ldr	r3, [pc, #300]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d131      	bne.n	8005074 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005010:	4b47      	ldr	r3, [pc, #284]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005016:	4a46      	ldr	r2, [pc, #280]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800501c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005020:	4b43      	ldr	r3, [pc, #268]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005028:	4a41      	ldr	r2, [pc, #260]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800502e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005030:	4b40      	ldr	r3, [pc, #256]	@ (8005134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2232      	movs	r2, #50	@ 0x32
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	4a3f      	ldr	r2, [pc, #252]	@ (8005138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	0c9b      	lsrs	r3, r3, #18
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005046:	e002      	b.n	800504e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3b01      	subs	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800504e:	4b38      	ldr	r3, [pc, #224]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505a:	d102      	bne.n	8005062 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f2      	bne.n	8005048 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005062:	4b33      	ldr	r3, [pc, #204]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506e:	d158      	bne.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e057      	b.n	8005124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005074:	4b2e      	ldr	r3, [pc, #184]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800507a:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005084:	e04d      	b.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508c:	d141      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800508e:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509a:	d131      	bne.n	8005100 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800509c:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a2:	4a23      	ldr	r2, [pc, #140]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050ac:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2232      	movs	r2, #50	@ 0x32
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	0c9b      	lsrs	r3, r3, #18
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d2:	e002      	b.n	80050da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050da:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e6:	d102      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f2      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fa:	d112      	bne.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e011      	b.n	8005124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005110:	e007      	b.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800511a:	4a05      	ldr	r2, [pc, #20]	@ (8005130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005120:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40007000 	.word	0x40007000
 8005134:	20000004 	.word	0x20000004
 8005138:	431bde83 	.word	0x431bde83

0800513c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800514a:	6093      	str	r3, [r2, #8]
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40007000 	.word	0x40007000

0800515c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e2fe      	b.n	800576c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d075      	beq.n	8005266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517a:	4b97      	ldr	r3, [pc, #604]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005184:	4b94      	ldr	r3, [pc, #592]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d102      	bne.n	800519a <HAL_RCC_OscConfig+0x3e>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d002      	beq.n	80051a0 <HAL_RCC_OscConfig+0x44>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d10b      	bne.n	80051b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a0:	4b8d      	ldr	r3, [pc, #564]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05b      	beq.n	8005264 <HAL_RCC_OscConfig+0x108>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d157      	bne.n	8005264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e2d9      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c0:	d106      	bne.n	80051d0 <HAL_RCC_OscConfig+0x74>
 80051c2:	4b85      	ldr	r3, [pc, #532]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a84      	ldr	r2, [pc, #528]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e01d      	b.n	800520c <HAL_RCC_OscConfig+0xb0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCC_OscConfig+0x98>
 80051da:	4b7f      	ldr	r3, [pc, #508]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a7e      	ldr	r2, [pc, #504]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4b7c      	ldr	r3, [pc, #496]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a7b      	ldr	r2, [pc, #492]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e00b      	b.n	800520c <HAL_RCC_OscConfig+0xb0>
 80051f4:	4b78      	ldr	r3, [pc, #480]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a77      	ldr	r2, [pc, #476]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80051fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	4b75      	ldr	r3, [pc, #468]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a74      	ldr	r2, [pc, #464]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800520a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d013      	beq.n	800523c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd f996 	bl	8002544 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800521c:	f7fd f992 	bl	8002544 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	@ 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e29e      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800522e:	4b6a      	ldr	r3, [pc, #424]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0xc0>
 800523a:	e014      	b.n	8005266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fd f982 	bl	8002544 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7fd f97e 	bl	8002544 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e28a      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005256:	4b60      	ldr	r3, [pc, #384]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0xe8>
 8005262:	e000      	b.n	8005266 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d075      	beq.n	800535e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005272:	4b59      	ldr	r3, [pc, #356]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800527c:	4b56      	ldr	r3, [pc, #344]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d102      	bne.n	8005292 <HAL_RCC_OscConfig+0x136>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d002      	beq.n	8005298 <HAL_RCC_OscConfig+0x13c>
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d11f      	bne.n	80052d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005298:	4b4f      	ldr	r3, [pc, #316]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_RCC_OscConfig+0x154>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e25d      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b0:	4b49      	ldr	r3, [pc, #292]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	4946      	ldr	r1, [pc, #280]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052c4:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <HAL_RCC_OscConfig+0x280>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fc fe3b 	bl	8001f44 <HAL_InitTick>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d043      	beq.n	800535c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e249      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d023      	beq.n	8005328 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e0:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3c      	ldr	r2, [pc, #240]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80052e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fd f92a 	bl	8002544 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052f4:	f7fd f926 	bl	8002544 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e232      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005306:	4b34      	ldr	r3, [pc, #208]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	492d      	ldr	r1, [pc, #180]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	604b      	str	r3, [r1, #4]
 8005326:	e01a      	b.n	800535e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005328:	4b2b      	ldr	r3, [pc, #172]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2a      	ldr	r2, [pc, #168]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800532e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fd f906 	bl	8002544 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533c:	f7fd f902 	bl	8002544 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e20e      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800534e:	4b22      	ldr	r3, [pc, #136]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x1e0>
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800535c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d041      	beq.n	80053ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01c      	beq.n	80053ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005372:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 8005374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005378:	4a17      	ldr	r2, [pc, #92]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd f8df 	bl	8002544 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538a:	f7fd f8db 	bl	8002544 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1e7      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800539c:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 800539e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ef      	beq.n	800538a <HAL_RCC_OscConfig+0x22e>
 80053aa:	e020      	b.n	80053ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80053ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053b2:	4a09      	ldr	r2, [pc, #36]	@ (80053d8 <HAL_RCC_OscConfig+0x27c>)
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fd f8c2 	bl	8002544 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c2:	e00d      	b.n	80053e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c4:	f7fd f8be 	bl	8002544 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d906      	bls.n	80053e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e1ca      	b.n	800576c <HAL_RCC_OscConfig+0x610>
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ea      	bne.n	80053c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80a6 	beq.w	8005548 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053fc:	2300      	movs	r3, #0
 80053fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005400:	4b84      	ldr	r3, [pc, #528]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_OscConfig+0x2b4>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x2b6>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005416:	4b7f      	ldr	r3, [pc, #508]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	4a7e      	ldr	r2, [pc, #504]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800541c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005420:	6593      	str	r3, [r2, #88]	@ 0x58
 8005422:	4b7c      	ldr	r3, [pc, #496]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800542e:	2301      	movs	r3, #1
 8005430:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005432:	4b79      	ldr	r3, [pc, #484]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d118      	bne.n	8005470 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800543e:	4b76      	ldr	r3, [pc, #472]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a75      	ldr	r2, [pc, #468]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544a:	f7fd f87b 	bl	8002544 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005452:	f7fd f877 	bl	8002544 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e183      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005464:	4b6c      	ldr	r3, [pc, #432]	@ (8005618 <HAL_RCC_OscConfig+0x4bc>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d108      	bne.n	800548a <HAL_RCC_OscConfig+0x32e>
 8005478:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	4a65      	ldr	r2, [pc, #404]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005488:	e024      	b.n	80054d4 <HAL_RCC_OscConfig+0x378>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b05      	cmp	r3, #5
 8005490:	d110      	bne.n	80054b4 <HAL_RCC_OscConfig+0x358>
 8005492:	4b60      	ldr	r3, [pc, #384]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005498:	4a5e      	ldr	r2, [pc, #376]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800549a:	f043 0304 	orr.w	r3, r3, #4
 800549e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054b2:	e00f      	b.n	80054d4 <HAL_RCC_OscConfig+0x378>
 80054b4:	4b57      	ldr	r3, [pc, #348]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ba:	4a56      	ldr	r2, [pc, #344]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054c4:	4b53      	ldr	r3, [pc, #332]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	4a52      	ldr	r2, [pc, #328]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f023 0304 	bic.w	r3, r3, #4
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d016      	beq.n	800550a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fd f832 	bl	8002544 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fd f82e 	bl	8002544 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e138      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fa:	4b46      	ldr	r3, [pc, #280]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ed      	beq.n	80054e4 <HAL_RCC_OscConfig+0x388>
 8005508:	e015      	b.n	8005536 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550a:	f7fd f81b 	bl	8002544 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005510:	e00a      	b.n	8005528 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fd f817 	bl	8002544 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e121      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005528:	4b3a      	ldr	r3, [pc, #232]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ed      	bne.n	8005512 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005536:	7ffb      	ldrb	r3, [r7, #31]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d105      	bne.n	8005548 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553c:	4b35      	ldr	r3, [pc, #212]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005540:	4a34      	ldr	r2, [pc, #208]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005546:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d03c      	beq.n	80055ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01c      	beq.n	8005596 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800555c:	4b2d      	ldr	r3, [pc, #180]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800555e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005562:	4a2c      	ldr	r2, [pc, #176]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fc ffea 	bl	8002544 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005574:	f7fc ffe6 	bl	8002544 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0f2      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005586:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ef      	beq.n	8005574 <HAL_RCC_OscConfig+0x418>
 8005594:	e01b      	b.n	80055ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005596:	4b1f      	ldr	r3, [pc, #124]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800559c:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a6:	f7fc ffcd 	bl	8002544 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ae:	f7fc ffc9 	bl	8002544 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e0d5      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055c0:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1ef      	bne.n	80055ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80c9 	beq.w	800576a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b0c      	cmp	r3, #12
 80055e2:	f000 8083 	beq.w	80056ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d15e      	bne.n	80056ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a08      	ldr	r2, [pc, #32]	@ (8005614 <HAL_RCC_OscConfig+0x4b8>)
 80055f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fc ffa3 	bl	8002544 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005600:	e00c      	b.n	800561c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005602:	f7fc ff9f 	bl	8002544 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d905      	bls.n	800561c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e0ab      	b.n	800576c <HAL_RCC_OscConfig+0x610>
 8005614:	40021000 	.word	0x40021000
 8005618:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800561c:	4b55      	ldr	r3, [pc, #340]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1ec      	bne.n	8005602 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005628:	4b52      	ldr	r3, [pc, #328]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	4b52      	ldr	r3, [pc, #328]	@ (8005778 <HAL_RCC_OscConfig+0x61c>)
 800562e:	4013      	ands	r3, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6a11      	ldr	r1, [r2, #32]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005638:	3a01      	subs	r2, #1
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005642:	0212      	lsls	r2, r2, #8
 8005644:	4311      	orrs	r1, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800564a:	0852      	lsrs	r2, r2, #1
 800564c:	3a01      	subs	r2, #1
 800564e:	0552      	lsls	r2, r2, #21
 8005650:	4311      	orrs	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005656:	0852      	lsrs	r2, r2, #1
 8005658:	3a01      	subs	r2, #1
 800565a:	0652      	lsls	r2, r2, #25
 800565c:	4311      	orrs	r1, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005662:	06d2      	lsls	r2, r2, #27
 8005664:	430a      	orrs	r2, r1
 8005666:	4943      	ldr	r1, [pc, #268]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 8005668:	4313      	orrs	r3, r2
 800566a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566c:	4b41      	ldr	r3, [pc, #260]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a40      	ldr	r2, [pc, #256]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 8005672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005676:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005678:	4b3e      	ldr	r3, [pc, #248]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a3d      	ldr	r2, [pc, #244]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 800567e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005682:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fc ff5e 	bl	8002544 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568c:	f7fc ff5a 	bl	8002544 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e066      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569e:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x530>
 80056aa:	e05e      	b.n	800576a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ac:	4b31      	ldr	r3, [pc, #196]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a30      	ldr	r2, [pc, #192]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fc ff44 	bl	8002544 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c0:	f7fc ff40 	bl	8002544 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e04c      	b.n	800576c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d2:	4b28      	ldr	r3, [pc, #160]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056de:	4b25      	ldr	r3, [pc, #148]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	4924      	ldr	r1, [pc, #144]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056e4:	4b25      	ldr	r3, [pc, #148]	@ (800577c <HAL_RCC_OscConfig+0x620>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	60cb      	str	r3, [r1, #12]
 80056ea:	e03e      	b.n	800576a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e039      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005774 <HAL_RCC_OscConfig+0x618>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0203 	and.w	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	429a      	cmp	r2, r3
 800570a:	d12c      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	3b01      	subs	r3, #1
 8005718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d123      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d11b      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d113      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d109      	bne.n	8005766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	3b01      	subs	r3, #1
 8005760:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d001      	beq.n	800576a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	019f800c 	.word	0x019f800c
 800577c:	feeefffc 	.word	0xfeeefffc

08005780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e11e      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005798:	4b91      	ldr	r3, [pc, #580]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d910      	bls.n	80057c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a6:	4b8e      	ldr	r3, [pc, #568]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f023 020f 	bic.w	r2, r3, #15
 80057ae:	498c      	ldr	r1, [pc, #560]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b6:	4b8a      	ldr	r3, [pc, #552]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e106      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d073      	beq.n	80058bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d129      	bne.n	8005830 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057dc:	4b81      	ldr	r3, [pc, #516]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0f4      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057ec:	f000 f9d0 	bl	8005b90 <RCC_GetSysClockFreqFromPLLSource>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4a7c      	ldr	r2, [pc, #496]	@ (80059e8 <HAL_RCC_ClockConfig+0x268>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d93f      	bls.n	800587a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057fa:	4b7a      	ldr	r3, [pc, #488]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800580e:	2b00      	cmp	r3, #0
 8005810:	d033      	beq.n	800587a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005816:	2b00      	cmp	r3, #0
 8005818:	d12f      	bne.n	800587a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800581a:	4b72      	ldr	r3, [pc, #456]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005822:	4a70      	ldr	r2, [pc, #448]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005828:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e024      	b.n	800587a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d107      	bne.n	8005848 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005838:	4b6a      	ldr	r3, [pc, #424]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0c6      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005848:	4b66      	ldr	r3, [pc, #408]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0be      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005858:	f000 f8ce 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 800585c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4a61      	ldr	r2, [pc, #388]	@ (80059e8 <HAL_RCC_ClockConfig+0x268>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d909      	bls.n	800587a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005866:	4b5f      	ldr	r3, [pc, #380]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800586e:	4a5d      	ldr	r2, [pc, #372]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005874:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005876:	2380      	movs	r3, #128	@ 0x80
 8005878:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800587a:	4b5a      	ldr	r3, [pc, #360]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f023 0203 	bic.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4957      	ldr	r1, [pc, #348]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005888:	4313      	orrs	r3, r2
 800588a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588c:	f7fc fe5a 	bl	8002544 <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005892:	e00a      	b.n	80058aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005894:	f7fc fe56 	bl	8002544 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e095      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058aa:	4b4e      	ldr	r3, [pc, #312]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 020c 	and.w	r2, r3, #12
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d1eb      	bne.n	8005894 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d023      	beq.n	8005910 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d4:	4b43      	ldr	r3, [pc, #268]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4a42      	ldr	r2, [pc, #264]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058ec:	4b3d      	ldr	r3, [pc, #244]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058f4:	4a3b      	ldr	r2, [pc, #236]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fc:	4b39      	ldr	r3, [pc, #228]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4936      	ldr	r1, [pc, #216]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
 800590e:	e008      	b.n	8005922 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b80      	cmp	r3, #128	@ 0x80
 8005914:	d105      	bne.n	8005922 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005916:	4b33      	ldr	r3, [pc, #204]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4a32      	ldr	r2, [pc, #200]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800591c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005920:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005922:	4b2f      	ldr	r3, [pc, #188]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d21d      	bcs.n	800596c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005930:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f023 020f 	bic.w	r2, r3, #15
 8005938:	4929      	ldr	r1, [pc, #164]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	4313      	orrs	r3, r2
 800593e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005940:	f7fc fe00 	bl	8002544 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	e00a      	b.n	800595e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005948:	f7fc fdfc 	bl	8002544 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e03b      	b.n	80059d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b20      	ldr	r3, [pc, #128]	@ (80059e0 <HAL_RCC_ClockConfig+0x260>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d1ed      	bne.n	8005948 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005978:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4917      	ldr	r1, [pc, #92]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005996:	4b13      	ldr	r3, [pc, #76]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	490f      	ldr	r1, [pc, #60]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059aa:	f000 f825 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4b0c      	ldr	r3, [pc, #48]	@ (80059e4 <HAL_RCC_ClockConfig+0x264>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	490c      	ldr	r1, [pc, #48]	@ (80059ec <HAL_RCC_ClockConfig+0x26c>)
 80059bc:	5ccb      	ldrb	r3, [r1, r3]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	4a0a      	ldr	r2, [pc, #40]	@ (80059f0 <HAL_RCC_ClockConfig+0x270>)
 80059c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059ca:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <HAL_RCC_ClockConfig+0x274>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fc fab8 	bl	8001f44 <HAL_InitTick>
 80059d4:	4603      	mov	r3, r0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40022000 	.word	0x40022000
 80059e4:	40021000 	.word	0x40021000
 80059e8:	04c4b400 	.word	0x04c4b400
 80059ec:	08019ec4 	.word	0x08019ec4
 80059f0:	20000004 	.word	0x20000004
 80059f4:	20000008 	.word	0x20000008

080059f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059fe:	4b2c      	ldr	r3, [pc, #176]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d102      	bne.n	8005a10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	e047      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a10:	4b27      	ldr	r3, [pc, #156]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a1c:	4b26      	ldr	r3, [pc, #152]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	e03e      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a22:	4b23      	ldr	r3, [pc, #140]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d136      	bne.n	8005a9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a2e:	4b20      	ldr	r3, [pc, #128]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a38:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	3301      	adds	r3, #1
 8005a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d10c      	bne.n	8005a66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a56:	68d2      	ldr	r2, [r2, #12]
 8005a58:	0a12      	lsrs	r2, r2, #8
 8005a5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	617b      	str	r3, [r7, #20]
      break;
 8005a64:	e00c      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a66:	4a13      	ldr	r2, [pc, #76]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	4a10      	ldr	r2, [pc, #64]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a70:	68d2      	ldr	r2, [r2, #12]
 8005a72:	0a12      	lsrs	r2, r2, #8
 8005a74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a78:	fb02 f303 	mul.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
      break;
 8005a7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a80:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	0e5b      	lsrs	r3, r3, #25
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e001      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005aa0:	693b      	ldr	r3, [r7, #16]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	00f42400 	.word	0x00f42400
 8005ab8:	016e3600 	.word	0x016e3600

08005abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	@ (8005ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000004 	.word	0x20000004

08005ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ad8:	f7ff fff0 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005adc:	4602      	mov	r2, r0
 8005ade:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	4904      	ldr	r1, [pc, #16]	@ (8005afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aea:	5ccb      	ldrb	r3, [r1, r3]
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	08019ed4 	.word	0x08019ed4

08005b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b04:	f7ff ffda 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	0adb      	lsrs	r3, r3, #11
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4904      	ldr	r1, [pc, #16]	@ (8005b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000
 8005b28:	08019ed4 	.word	0x08019ed4

08005b2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	220f      	movs	r2, #15
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b3c:	4b12      	ldr	r3, [pc, #72]	@ (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0203 	and.w	r2, r3, #3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b48:	4b0f      	ldr	r3, [pc, #60]	@ (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b54:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b60:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <HAL_RCC_GetClockConfig+0x5c>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	08db      	lsrs	r3, r3, #3
 8005b66:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <HAL_RCC_GetClockConfig+0x60>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	601a      	str	r2, [r3, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40022000 	.word	0x40022000

08005b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b96:	4b1e      	ldr	r3, [pc, #120]	@ (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d10c      	bne.n	8005bce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bb4:	4a17      	ldr	r2, [pc, #92]	@ (8005c14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	4a14      	ldr	r2, [pc, #80]	@ (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bbe:	68d2      	ldr	r2, [r2, #12]
 8005bc0:	0a12      	lsrs	r2, r2, #8
 8005bc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	617b      	str	r3, [r7, #20]
    break;
 8005bcc:	e00c      	b.n	8005be8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bce:	4a12      	ldr	r2, [pc, #72]	@ (8005c18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bd8:	68d2      	ldr	r2, [r2, #12]
 8005bda:	0a12      	lsrs	r2, r2, #8
 8005bdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
    break;
 8005be6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0e5b      	lsrs	r3, r3, #25
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c02:	687b      	ldr	r3, [r7, #4]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40021000 	.word	0x40021000
 8005c14:	016e3600 	.word	0x016e3600
 8005c18:	00f42400 	.word	0x00f42400

08005c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c24:	2300      	movs	r3, #0
 8005c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c28:	2300      	movs	r3, #0
 8005c2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8098 	beq.w	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3e:	4b43      	ldr	r3, [pc, #268]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	4b40      	ldr	r3, [pc, #256]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c56:	4b3d      	ldr	r3, [pc, #244]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c66:	4b3a      	ldr	r3, [pc, #232]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a39      	ldr	r2, [pc, #228]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c72:	f7fc fc67 	bl	8002544 <HAL_GetTick>
 8005c76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c78:	e009      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7a:	f7fc fc63 	bl	8002544 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d902      	bls.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	74fb      	strb	r3, [r7, #19]
        break;
 8005c8c:	e005      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c8e:	4b30      	ldr	r3, [pc, #192]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ef      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c9a:	7cfb      	ldrb	r3, [r7, #19]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d159      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005caa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01e      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d019      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cbc:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cc8:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cce:	4a1f      	ldr	r2, [pc, #124]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cde:	4a1b      	ldr	r2, [pc, #108]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ce8:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfa:	f7fc fc23 	bl	8002544 <HAL_GetTick>
 8005cfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d00:	e00b      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fc fc1f 	bl	8002544 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d902      	bls.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	74fb      	strb	r3, [r7, #19]
            break;
 8005d18:	e006      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0ec      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d2e:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d3c:	4903      	ldr	r1, [pc, #12]	@ (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d44:	e008      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
 8005d48:	74bb      	strb	r3, [r7, #18]
 8005d4a:	e005      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	7cfb      	ldrb	r3, [r7, #19]
 8005d56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d58:	7c7b      	ldrb	r3, [r7, #17]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d105      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5e:	4ba7      	ldr	r3, [pc, #668]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d62:	4aa6      	ldr	r2, [pc, #664]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d76:	4ba1      	ldr	r3, [pc, #644]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7c:	f023 0203 	bic.w	r2, r3, #3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	499d      	ldr	r1, [pc, #628]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d98:	4b98      	ldr	r3, [pc, #608]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9e:	f023 020c 	bic.w	r2, r3, #12
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	4995      	ldr	r1, [pc, #596]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dba:	4b90      	ldr	r3, [pc, #576]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	498c      	ldr	r1, [pc, #560]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ddc:	4b87      	ldr	r3, [pc, #540]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	4984      	ldr	r1, [pc, #528]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	497b      	ldr	r1, [pc, #492]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e20:	4b76      	ldr	r3, [pc, #472]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	4973      	ldr	r1, [pc, #460]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e42:	4b6e      	ldr	r3, [pc, #440]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	496a      	ldr	r1, [pc, #424]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e64:	4b65      	ldr	r3, [pc, #404]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	4962      	ldr	r1, [pc, #392]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e86:	4b5d      	ldr	r3, [pc, #372]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	4959      	ldr	r1, [pc, #356]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ea8:	4b54      	ldr	r3, [pc, #336]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eae:	f023 0203 	bic.w	r2, r3, #3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	4951      	ldr	r1, [pc, #324]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eca:	4b4c      	ldr	r3, [pc, #304]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	4948      	ldr	r1, [pc, #288]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d015      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eec:	4b43      	ldr	r3, [pc, #268]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	4940      	ldr	r1, [pc, #256]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f0a:	d105      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a3a      	ldr	r2, [pc, #232]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f16:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f24:	4b35      	ldr	r3, [pc, #212]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f32:	4932      	ldr	r1, [pc, #200]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f42:	d105      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f44:	4b2d      	ldr	r3, [pc, #180]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a2c      	ldr	r2, [pc, #176]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f4e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d015      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f5c:	4b27      	ldr	r3, [pc, #156]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6a:	4924      	ldr	r1, [pc, #144]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f7a:	d105      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4a1e      	ldr	r2, [pc, #120]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f94:	4b19      	ldr	r3, [pc, #100]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa2:	4916      	ldr	r1, [pc, #88]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fb4:	4b11      	ldr	r3, [pc, #68]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a10      	ldr	r2, [pc, #64]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d019      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	4908      	ldr	r1, [pc, #32]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fea:	d109      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fec:	4b03      	ldr	r3, [pc, #12]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4a02      	ldr	r2, [pc, #8]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ff6:	60d3      	str	r3, [r2, #12]
 8005ff8:	e002      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ffa:	bf00      	nop
 8005ffc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d015      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800600c:	4b29      	ldr	r3, [pc, #164]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006012:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	4926      	ldr	r1, [pc, #152]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800602a:	d105      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800602c:	4b21      	ldr	r3, [pc, #132]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	4a20      	ldr	r2, [pc, #128]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006036:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d015      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006044:	4b1b      	ldr	r3, [pc, #108]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006052:	4918      	ldr	r1, [pc, #96]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006062:	d105      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006064:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a12      	ldr	r2, [pc, #72]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800606a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800606e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d015      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800607c:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800607e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006082:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608a:	490a      	ldr	r1, [pc, #40]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006096:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800609a:	d105      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40021000 	.word	0x40021000

080060b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e049      	b.n	800615e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f841 	bl	8006166 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f000 fa30 	bl	800655c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d001      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e054      	b.n	800623e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a26      	ldr	r2, [pc, #152]	@ (800624c <HAL_TIM_Base_Start_IT+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d022      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061be:	d01d      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a22      	ldr	r2, [pc, #136]	@ (8006250 <HAL_TIM_Base_Start_IT+0xd4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d018      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a21      	ldr	r2, [pc, #132]	@ (8006254 <HAL_TIM_Base_Start_IT+0xd8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006258 <HAL_TIM_Base_Start_IT+0xdc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00e      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1e      	ldr	r2, [pc, #120]	@ (800625c <HAL_TIM_Base_Start_IT+0xe0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006260 <HAL_TIM_Base_Start_IT+0xe4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <HAL_TIM_Base_Start_IT+0xe8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d115      	bne.n	8006228 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	4b19      	ldr	r3, [pc, #100]	@ (8006268 <HAL_TIM_Base_Start_IT+0xec>)
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b06      	cmp	r3, #6
 800620c:	d015      	beq.n	800623a <HAL_TIM_Base_Start_IT+0xbe>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006214:	d011      	beq.n	800623a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006226:	e008      	b.n	800623a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e000      	b.n	800623c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40013400 	.word	0x40013400
 8006260:	40014000 	.word	0x40014000
 8006264:	40015000 	.word	0x40015000
 8006268:	00010007 	.word	0x00010007

0800626c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d020      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0202 	mvn.w	r2, #2
 80062a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f931 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 80062bc:	e005      	b.n	80062ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f923 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f934 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d020      	beq.n	800631c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01b      	beq.n	800631c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0204 	mvn.w	r2, #4
 80062ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f90b 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 8006308:	e005      	b.n	8006316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f8fd 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f90e 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d020      	beq.n	8006368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0208 	mvn.w	r2, #8
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8e5 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f8d7 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f8e8 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	d020      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01b      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0210 	mvn.w	r2, #16
 8006384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2208      	movs	r2, #8
 800638a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f8bf 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 80063a0:	e005      	b.n	80063ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f8b1 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f8c2 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00c      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0201 	mvn.w	r2, #1
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb fc0e 	bl	8001bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80063fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f969 	bl	80066d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00c      	beq.n	800642a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f961 	bl	80066ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00c      	beq.n	800644e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f87c 	bl	8006546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00c      	beq.n	8006472 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f06f 0220 	mvn.w	r2, #32
 800646a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f929 	bl	80066c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800648e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f935 	bl	8006700 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80064b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f92d 	bl	8006714 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00c      	beq.n	80064de <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80064d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f925 	bl	8006728 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00c      	beq.n	8006502 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80064fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f91d 	bl	800673c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a4c      	ldr	r2, [pc, #304]	@ (80066a0 <TIM_Base_SetConfig+0x144>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d017      	beq.n	80065a4 <TIM_Base_SetConfig+0x48>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657a:	d013      	beq.n	80065a4 <TIM_Base_SetConfig+0x48>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a49      	ldr	r2, [pc, #292]	@ (80066a4 <TIM_Base_SetConfig+0x148>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00f      	beq.n	80065a4 <TIM_Base_SetConfig+0x48>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a48      	ldr	r2, [pc, #288]	@ (80066a8 <TIM_Base_SetConfig+0x14c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00b      	beq.n	80065a4 <TIM_Base_SetConfig+0x48>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a47      	ldr	r2, [pc, #284]	@ (80066ac <TIM_Base_SetConfig+0x150>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d007      	beq.n	80065a4 <TIM_Base_SetConfig+0x48>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a46      	ldr	r2, [pc, #280]	@ (80066b0 <TIM_Base_SetConfig+0x154>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_Base_SetConfig+0x48>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a45      	ldr	r2, [pc, #276]	@ (80066b4 <TIM_Base_SetConfig+0x158>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d108      	bne.n	80065b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a39      	ldr	r2, [pc, #228]	@ (80066a0 <TIM_Base_SetConfig+0x144>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d023      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c4:	d01f      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a36      	ldr	r2, [pc, #216]	@ (80066a4 <TIM_Base_SetConfig+0x148>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01b      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a35      	ldr	r2, [pc, #212]	@ (80066a8 <TIM_Base_SetConfig+0x14c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d017      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a34      	ldr	r2, [pc, #208]	@ (80066ac <TIM_Base_SetConfig+0x150>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a33      	ldr	r2, [pc, #204]	@ (80066b0 <TIM_Base_SetConfig+0x154>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00f      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a33      	ldr	r2, [pc, #204]	@ (80066b8 <TIM_Base_SetConfig+0x15c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a32      	ldr	r2, [pc, #200]	@ (80066bc <TIM_Base_SetConfig+0x160>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a31      	ldr	r2, [pc, #196]	@ (80066c0 <TIM_Base_SetConfig+0x164>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_Base_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2c      	ldr	r2, [pc, #176]	@ (80066b4 <TIM_Base_SetConfig+0x158>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <TIM_Base_SetConfig+0x144>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <TIM_Base_SetConfig+0x110>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1a      	ldr	r2, [pc, #104]	@ (80066b0 <TIM_Base_SetConfig+0x154>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00f      	beq.n	800666c <TIM_Base_SetConfig+0x110>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1a      	ldr	r2, [pc, #104]	@ (80066b8 <TIM_Base_SetConfig+0x15c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00b      	beq.n	800666c <TIM_Base_SetConfig+0x110>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a19      	ldr	r2, [pc, #100]	@ (80066bc <TIM_Base_SetConfig+0x160>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_Base_SetConfig+0x110>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a18      	ldr	r2, [pc, #96]	@ (80066c0 <TIM_Base_SetConfig+0x164>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_Base_SetConfig+0x110>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a13      	ldr	r2, [pc, #76]	@ (80066b4 <TIM_Base_SetConfig+0x158>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d103      	bne.n	8006674 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d105      	bne.n	8006692 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f023 0201 	bic.w	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	611a      	str	r2, [r3, #16]
  }
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00
 80066b0:	40013400 	.word	0x40013400
 80066b4:	40015000 	.word	0x40015000
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800

080066c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e042      	b.n	80067e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fb fdd3 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2224      	movs	r2, #36	@ 0x24
 800677e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 f806 	bl	80077ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd07 	bl	80071b4 <UART_SetConfig>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e01b      	b.n	80067e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 f885 	bl	80078f0 <UART_CheckIdleState>
 80067e6:	4603      	mov	r3, r0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	@ 0x28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006804:	2b20      	cmp	r3, #32
 8006806:	d167      	bne.n	80068d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_UART_Transmit_DMA+0x24>
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e060      	b.n	80068da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	88fa      	ldrh	r2, [r7, #6]
 8006822:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	88fa      	ldrh	r2, [r7, #6]
 800682a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	@ 0x21
 800683a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d028      	beq.n	8006898 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800684a:	4a26      	ldr	r2, [pc, #152]	@ (80068e4 <HAL_UART_Transmit_DMA+0xf4>)
 800684c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006852:	4a25      	ldr	r2, [pc, #148]	@ (80068e8 <HAL_UART_Transmit_DMA+0xf8>)
 8006854:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800685a:	4a24      	ldr	r2, [pc, #144]	@ (80068ec <HAL_UART_Transmit_DMA+0xfc>)
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006862:	2200      	movs	r2, #0
 8006864:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800686e:	4619      	mov	r1, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3328      	adds	r3, #40	@ 0x28
 8006876:	461a      	mov	r2, r3
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	f7fd ff4f 	bl	800471c <HAL_DMA_Start_IT>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2210      	movs	r2, #16
 8006888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e020      	b.n	80068da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2240      	movs	r2, #64	@ 0x40
 800689e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	613b      	str	r3, [r7, #16]
   return(result);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c0:	623a      	str	r2, [r7, #32]
 80068c2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	e000      	b.n	80068da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80068d8:	2302      	movs	r3, #2
  }
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3728      	adds	r7, #40	@ 0x28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	08007dbb 	.word	0x08007dbb
 80068e8:	08007e55 	.word	0x08007e55
 80068ec:	08007fdb 	.word	0x08007fdb

080068f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006904:	2b20      	cmp	r3, #32
 8006906:	d137      	bne.n	8006978 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Receive_DMA+0x24>
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e030      	b.n	800697a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <HAL_UART_Receive_DMA+0x94>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d01f      	beq.n	8006968 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d018      	beq.n	8006968 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	613b      	str	r3, [r7, #16]
   return(result);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	69f9      	ldr	r1, [r7, #28]
 800695a:	6a3a      	ldr	r2, [r7, #32]
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	61bb      	str	r3, [r7, #24]
   return(result);
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006968:	88fb      	ldrh	r3, [r7, #6]
 800696a:	461a      	mov	r2, r3
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f001 f8d6 	bl	8007b20 <UART_Start_Receive_DMA>
 8006974:	4603      	mov	r3, r0
 8006976:	e000      	b.n	800697a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006978:	2302      	movs	r3, #2
  }
}
 800697a:	4618      	mov	r0, r3
 800697c:	3728      	adds	r7, #40	@ 0x28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40008000 	.word	0x40008000

08006988 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b090      	sub	sp, #64	@ 0x40
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800699e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069aa:	2b80      	cmp	r3, #128	@ 0x80
 80069ac:	d139      	bne.n	8006a22 <HAL_UART_DMAStop+0x9a>
 80069ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b0:	2b21      	cmp	r3, #33	@ 0x21
 80069b2:	d136      	bne.n	8006a22 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d015      	beq.n	8006a1c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fd ff0c 	bl	8004812 <HAL_DMA_Abort>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00d      	beq.n	8006a1c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe f873 	bl	8004af0 <HAL_DMA_GetError>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d105      	bne.n	8006a1c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2210      	movs	r2, #16
 8006a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e047      	b.n	8006aac <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f925 	bl	8007c6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2c:	2b40      	cmp	r3, #64	@ 0x40
 8006a2e:	d13c      	bne.n	8006aaa <HAL_UART_DMAStop+0x122>
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	2b22      	cmp	r3, #34	@ 0x22
 8006a34:	d139      	bne.n	8006aaa <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a56:	61ba      	str	r2, [r7, #24]
 8006a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6979      	ldr	r1, [r7, #20]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	613b      	str	r3, [r7, #16]
   return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d017      	beq.n	8006aa4 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fd fec9 	bl	8004812 <HAL_DMA_Abort>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe f82f 	bl	8004af0 <HAL_DMA_GetError>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d105      	bne.n	8006aa4 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e003      	b.n	8006aac <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 f922 	bl	8007cee <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3740      	adds	r7, #64	@ 0x40
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ade:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11b      	bne.n	8006b28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d015      	beq.n	8006b28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8300 	beq.w	800711e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
      }
      return;
 8006b26:	e2fa      	b.n	800711e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8123 	beq.w	8006d78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b36:	4b8d      	ldr	r3, [pc, #564]	@ (8006d6c <HAL_UART_IRQHandler+0x2b8>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b42:	4b8b      	ldr	r3, [pc, #556]	@ (8006d70 <HAL_UART_IRQHandler+0x2bc>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 8116 	beq.w	8006d78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d011      	beq.n	8006b7c <HAL_UART_IRQHandler+0xc8>
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b72:	f043 0201 	orr.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d011      	beq.n	8006bac <HAL_UART_IRQHandler+0xf8>
 8006b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba2:	f043 0204 	orr.w	r2, r3, #4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d011      	beq.n	8006bdc <HAL_UART_IRQHandler+0x128>
 8006bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2204      	movs	r2, #4
 8006bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd2:	f043 0202 	orr.w	r2, r3, #2
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d017      	beq.n	8006c18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d105      	bne.n	8006c00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8006d6c <HAL_UART_IRQHandler+0x2b8>)
 8006bfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2208      	movs	r2, #8
 8006c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0e:	f043 0208 	orr.w	r2, r3, #8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d012      	beq.n	8006c4a <HAL_UART_IRQHandler+0x196>
 8006c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8266 	beq.w	8007122 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d013      	beq.n	8006c8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d105      	bne.n	8006c7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ca0:	d005      	beq.n	8006cae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ca6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d054      	beq.n	8006d58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 f81d 	bl	8007cee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbe:	2b40      	cmp	r3, #64	@ 0x40
 8006cc0:	d146      	bne.n	8006d50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006cee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1d9      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d017      	beq.n	8006d48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1e:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <HAL_UART_IRQHandler+0x2c0>)
 8006d20:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fd fdcb 	bl	80048c4 <HAL_DMA_Abort_IT>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d019      	beq.n	8006d68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006d42:	4610      	mov	r0, r2
 8006d44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d46:	e00f      	b.n	8006d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa1d 	bl	8007188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4e:	e00b      	b.n	8006d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa19 	bl	8007188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d56:	e007      	b.n	8006d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fa15 	bl	8007188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006d66:	e1dc      	b.n	8007122 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	bf00      	nop
    return;
 8006d6a:	e1da      	b.n	8007122 <HAL_UART_IRQHandler+0x66e>
 8006d6c:	10000001 	.word	0x10000001
 8006d70:	04000120 	.word	0x04000120
 8006d74:	0800805b 	.word	0x0800805b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	f040 8170 	bne.w	8007062 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 8169 	beq.w	8007062 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8162 	beq.w	8007062 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2210      	movs	r2, #16
 8006da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	f040 80d8 	bne.w	8006f66 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80af 	beq.w	8006f2c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	f080 80a7 	bcs.w	8006f2c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006de4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 8087 	bne.w	8006f0a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1da      	bne.n	8006dfc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e1      	bne.n	8006e46 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006eac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e3      	bne.n	8006e82 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ed8:	f023 0310 	bic.w	r3, r3, #16
 8006edc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ef0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e4      	bne.n	8006ec8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fd fc84 	bl	8004812 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f939 	bl	800719c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006f2a:	e0fc      	b.n	8007126 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f36:	429a      	cmp	r2, r3
 8006f38:	f040 80f5 	bne.w	8007126 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	f040 80eb 	bne.w	8007126 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f91c 	bl	800719c <HAL_UARTEx_RxEventCallback>
      return;
 8006f64:	e0df      	b.n	8007126 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80d1 	beq.w	800712a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80cc 	beq.w	800712a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e4      	bne.n	8006f92 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ff0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e1      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	60fb      	str	r3, [r7, #12]
   return(result);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f023 0310 	bic.w	r3, r3, #16
 800702c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	69b9      	ldr	r1, [r7, #24]
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	617b      	str	r3, [r7, #20]
   return(result);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e4      	bne.n	8007018 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f89e 	bl	800719c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007060:	e063      	b.n	800712a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00e      	beq.n	800708c <HAL_UART_IRQHandler+0x5d8>
 800706e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d008      	beq.n	800708c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007082:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f825 	bl	80080d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800708a:	e051      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007094:	2b00      	cmp	r3, #0
 8007096:	d014      	beq.n	80070c2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800709c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d008      	beq.n	80070c2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d03a      	beq.n	800712e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
    }
    return;
 80070c0:	e035      	b.n	800712e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <HAL_UART_IRQHandler+0x62e>
 80070ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 ffcf 	bl	800807e <UART_EndTransmit_IT>
    return;
 80070e0:	e026      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_UART_IRQHandler+0x64e>
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fffe 	bl	80080fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007100:	e016      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007106:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d010      	beq.n	8007130 <HAL_UART_IRQHandler+0x67c>
 800710e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007112:	2b00      	cmp	r3, #0
 8007114:	da0c      	bge.n	8007130 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 ffe6 	bl	80080e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800711c:	e008      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
      return;
 800711e:	bf00      	nop
 8007120:	e006      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
    return;
 8007122:	bf00      	nop
 8007124:	e004      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
      return;
 8007126:	bf00      	nop
 8007128:	e002      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
      return;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <HAL_UART_IRQHandler+0x67c>
    return;
 800712e:	bf00      	nop
  }
}
 8007130:	37e8      	adds	r7, #232	@ 0xe8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop

08007138 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b8:	b08c      	sub	sp, #48	@ 0x30
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	431a      	orrs	r2, r3
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	4313      	orrs	r3, r2
 80071da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4baa      	ldr	r3, [pc, #680]	@ (800748c <UART_SetConfig+0x2d8>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	6812      	ldr	r2, [r2, #0]
 80071ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071ec:	430b      	orrs	r3, r1
 80071ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a9f      	ldr	r2, [pc, #636]	@ (8007490 <UART_SetConfig+0x2dc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800721c:	4313      	orrs	r3, r2
 800721e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800722a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007234:	430b      	orrs	r3, r1
 8007236:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	f023 010f 	bic.w	r1, r3, #15
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a90      	ldr	r2, [pc, #576]	@ (8007494 <UART_SetConfig+0x2e0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d125      	bne.n	80072a4 <UART_SetConfig+0xf0>
 8007258:	4b8f      	ldr	r3, [pc, #572]	@ (8007498 <UART_SetConfig+0x2e4>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	2b03      	cmp	r3, #3
 8007264:	d81a      	bhi.n	800729c <UART_SetConfig+0xe8>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <UART_SetConfig+0xb8>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	0800727d 	.word	0x0800727d
 8007270:	0800728d 	.word	0x0800728d
 8007274:	08007285 	.word	0x08007285
 8007278:	08007295 	.word	0x08007295
 800727c:	2301      	movs	r3, #1
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007282:	e116      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007284:	2302      	movs	r3, #2
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728a:	e112      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007292:	e10e      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729a:	e10a      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e106      	b.n	80074b2 <UART_SetConfig+0x2fe>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a7c      	ldr	r2, [pc, #496]	@ (800749c <UART_SetConfig+0x2e8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d138      	bne.n	8007320 <UART_SetConfig+0x16c>
 80072ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007498 <UART_SetConfig+0x2e4>)
 80072b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b4:	f003 030c 	and.w	r3, r3, #12
 80072b8:	2b0c      	cmp	r3, #12
 80072ba:	d82d      	bhi.n	8007318 <UART_SetConfig+0x164>
 80072bc:	a201      	add	r2, pc, #4	@ (adr r2, 80072c4 <UART_SetConfig+0x110>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072f9 	.word	0x080072f9
 80072c8:	08007319 	.word	0x08007319
 80072cc:	08007319 	.word	0x08007319
 80072d0:	08007319 	.word	0x08007319
 80072d4:	08007309 	.word	0x08007309
 80072d8:	08007319 	.word	0x08007319
 80072dc:	08007319 	.word	0x08007319
 80072e0:	08007319 	.word	0x08007319
 80072e4:	08007301 	.word	0x08007301
 80072e8:	08007319 	.word	0x08007319
 80072ec:	08007319 	.word	0x08007319
 80072f0:	08007319 	.word	0x08007319
 80072f4:	08007311 	.word	0x08007311
 80072f8:	2300      	movs	r3, #0
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	e0d8      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007300:	2302      	movs	r3, #2
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007306:	e0d4      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007308:	2304      	movs	r3, #4
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730e:	e0d0      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007310:	2308      	movs	r3, #8
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007316:	e0cc      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007318:	2310      	movs	r3, #16
 800731a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731e:	e0c8      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a5e      	ldr	r2, [pc, #376]	@ (80074a0 <UART_SetConfig+0x2ec>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d125      	bne.n	8007376 <UART_SetConfig+0x1c2>
 800732a:	4b5b      	ldr	r3, [pc, #364]	@ (8007498 <UART_SetConfig+0x2e4>)
 800732c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007330:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007334:	2b30      	cmp	r3, #48	@ 0x30
 8007336:	d016      	beq.n	8007366 <UART_SetConfig+0x1b2>
 8007338:	2b30      	cmp	r3, #48	@ 0x30
 800733a:	d818      	bhi.n	800736e <UART_SetConfig+0x1ba>
 800733c:	2b20      	cmp	r3, #32
 800733e:	d00a      	beq.n	8007356 <UART_SetConfig+0x1a2>
 8007340:	2b20      	cmp	r3, #32
 8007342:	d814      	bhi.n	800736e <UART_SetConfig+0x1ba>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <UART_SetConfig+0x19a>
 8007348:	2b10      	cmp	r3, #16
 800734a:	d008      	beq.n	800735e <UART_SetConfig+0x1aa>
 800734c:	e00f      	b.n	800736e <UART_SetConfig+0x1ba>
 800734e:	2300      	movs	r3, #0
 8007350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007354:	e0ad      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007356:	2302      	movs	r3, #2
 8007358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735c:	e0a9      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800735e:	2304      	movs	r3, #4
 8007360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007364:	e0a5      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007366:	2308      	movs	r3, #8
 8007368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800736c:	e0a1      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800736e:	2310      	movs	r3, #16
 8007370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007374:	e09d      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a4a      	ldr	r2, [pc, #296]	@ (80074a4 <UART_SetConfig+0x2f0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d125      	bne.n	80073cc <UART_SetConfig+0x218>
 8007380:	4b45      	ldr	r3, [pc, #276]	@ (8007498 <UART_SetConfig+0x2e4>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007386:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800738a:	2bc0      	cmp	r3, #192	@ 0xc0
 800738c:	d016      	beq.n	80073bc <UART_SetConfig+0x208>
 800738e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007390:	d818      	bhi.n	80073c4 <UART_SetConfig+0x210>
 8007392:	2b80      	cmp	r3, #128	@ 0x80
 8007394:	d00a      	beq.n	80073ac <UART_SetConfig+0x1f8>
 8007396:	2b80      	cmp	r3, #128	@ 0x80
 8007398:	d814      	bhi.n	80073c4 <UART_SetConfig+0x210>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <UART_SetConfig+0x1f0>
 800739e:	2b40      	cmp	r3, #64	@ 0x40
 80073a0:	d008      	beq.n	80073b4 <UART_SetConfig+0x200>
 80073a2:	e00f      	b.n	80073c4 <UART_SetConfig+0x210>
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073aa:	e082      	b.n	80074b2 <UART_SetConfig+0x2fe>
 80073ac:	2302      	movs	r3, #2
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b2:	e07e      	b.n	80074b2 <UART_SetConfig+0x2fe>
 80073b4:	2304      	movs	r3, #4
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ba:	e07a      	b.n	80074b2 <UART_SetConfig+0x2fe>
 80073bc:	2308      	movs	r3, #8
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c2:	e076      	b.n	80074b2 <UART_SetConfig+0x2fe>
 80073c4:	2310      	movs	r3, #16
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ca:	e072      	b.n	80074b2 <UART_SetConfig+0x2fe>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a35      	ldr	r2, [pc, #212]	@ (80074a8 <UART_SetConfig+0x2f4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d12a      	bne.n	800742c <UART_SetConfig+0x278>
 80073d6:	4b30      	ldr	r3, [pc, #192]	@ (8007498 <UART_SetConfig+0x2e4>)
 80073d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073e4:	d01a      	beq.n	800741c <UART_SetConfig+0x268>
 80073e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ea:	d81b      	bhi.n	8007424 <UART_SetConfig+0x270>
 80073ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073f0:	d00c      	beq.n	800740c <UART_SetConfig+0x258>
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073f6:	d815      	bhi.n	8007424 <UART_SetConfig+0x270>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <UART_SetConfig+0x250>
 80073fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007400:	d008      	beq.n	8007414 <UART_SetConfig+0x260>
 8007402:	e00f      	b.n	8007424 <UART_SetConfig+0x270>
 8007404:	2300      	movs	r3, #0
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740a:	e052      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800740c:	2302      	movs	r3, #2
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007412:	e04e      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007414:	2304      	movs	r3, #4
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741a:	e04a      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800741c:	2308      	movs	r3, #8
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007422:	e046      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742a:	e042      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a17      	ldr	r2, [pc, #92]	@ (8007490 <UART_SetConfig+0x2dc>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d13a      	bne.n	80074ac <UART_SetConfig+0x2f8>
 8007436:	4b18      	ldr	r3, [pc, #96]	@ (8007498 <UART_SetConfig+0x2e4>)
 8007438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007440:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007444:	d01a      	beq.n	800747c <UART_SetConfig+0x2c8>
 8007446:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800744a:	d81b      	bhi.n	8007484 <UART_SetConfig+0x2d0>
 800744c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007450:	d00c      	beq.n	800746c <UART_SetConfig+0x2b8>
 8007452:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007456:	d815      	bhi.n	8007484 <UART_SetConfig+0x2d0>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <UART_SetConfig+0x2b0>
 800745c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007460:	d008      	beq.n	8007474 <UART_SetConfig+0x2c0>
 8007462:	e00f      	b.n	8007484 <UART_SetConfig+0x2d0>
 8007464:	2300      	movs	r3, #0
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746a:	e022      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800746c:	2302      	movs	r3, #2
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007472:	e01e      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007474:	2304      	movs	r3, #4
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747a:	e01a      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800747c:	2308      	movs	r3, #8
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007482:	e016      	b.n	80074b2 <UART_SetConfig+0x2fe>
 8007484:	2310      	movs	r3, #16
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748a:	e012      	b.n	80074b2 <UART_SetConfig+0x2fe>
 800748c:	cfff69f3 	.word	0xcfff69f3
 8007490:	40008000 	.word	0x40008000
 8007494:	40013800 	.word	0x40013800
 8007498:	40021000 	.word	0x40021000
 800749c:	40004400 	.word	0x40004400
 80074a0:	40004800 	.word	0x40004800
 80074a4:	40004c00 	.word	0x40004c00
 80074a8:	40005000 	.word	0x40005000
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4aae      	ldr	r2, [pc, #696]	@ (8007770 <UART_SetConfig+0x5bc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	f040 8097 	bne.w	80075ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d823      	bhi.n	800750e <UART_SetConfig+0x35a>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <UART_SetConfig+0x318>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	0800750f 	.word	0x0800750f
 80074d4:	080074f9 	.word	0x080074f9
 80074d8:	0800750f 	.word	0x0800750f
 80074dc:	080074ff 	.word	0x080074ff
 80074e0:	0800750f 	.word	0x0800750f
 80074e4:	0800750f 	.word	0x0800750f
 80074e8:	0800750f 	.word	0x0800750f
 80074ec:	08007507 	.word	0x08007507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074f0:	f7fe faf0 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 80074f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074f6:	e010      	b.n	800751a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f8:	4b9e      	ldr	r3, [pc, #632]	@ (8007774 <UART_SetConfig+0x5c0>)
 80074fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074fc:	e00d      	b.n	800751a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fe:	f7fe fa7b 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8007502:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007504:	e009      	b.n	800751a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800750a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800750c:	e005      	b.n	800751a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8130 	beq.w	8007782 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007526:	4a94      	ldr	r2, [pc, #592]	@ (8007778 <UART_SetConfig+0x5c4>)
 8007528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800752c:	461a      	mov	r2, r3
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	fbb3 f3f2 	udiv	r3, r3, r2
 8007534:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	4413      	add	r3, r2
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	429a      	cmp	r2, r3
 8007544:	d305      	bcc.n	8007552 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	429a      	cmp	r2, r3
 8007550:	d903      	bls.n	800755a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007558:	e113      	b.n	8007782 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	2200      	movs	r2, #0
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	60fa      	str	r2, [r7, #12]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007566:	4a84      	ldr	r2, [pc, #528]	@ (8007778 <UART_SetConfig+0x5c4>)
 8007568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756c:	b29b      	uxth	r3, r3
 800756e:	2200      	movs	r2, #0
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007578:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800757c:	f7f9 f914 	bl	80007a8 <__aeabi_uldivmod>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4610      	mov	r0, r2
 8007586:	4619      	mov	r1, r3
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	020b      	lsls	r3, r1, #8
 8007592:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007596:	0202      	lsls	r2, r0, #8
 8007598:	6979      	ldr	r1, [r7, #20]
 800759a:	6849      	ldr	r1, [r1, #4]
 800759c:	0849      	lsrs	r1, r1, #1
 800759e:	2000      	movs	r0, #0
 80075a0:	460c      	mov	r4, r1
 80075a2:	4605      	mov	r5, r0
 80075a4:	eb12 0804 	adds.w	r8, r2, r4
 80075a8:	eb43 0905 	adc.w	r9, r3, r5
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	469a      	mov	sl, r3
 80075b4:	4693      	mov	fp, r2
 80075b6:	4652      	mov	r2, sl
 80075b8:	465b      	mov	r3, fp
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	f7f9 f8f3 	bl	80007a8 <__aeabi_uldivmod>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4613      	mov	r3, r2
 80075c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075d0:	d308      	bcc.n	80075e4 <UART_SetConfig+0x430>
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d8:	d204      	bcs.n	80075e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6a3a      	ldr	r2, [r7, #32]
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	e0ce      	b.n	8007782 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075ea:	e0ca      	b.n	8007782 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075f4:	d166      	bne.n	80076c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80075f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d827      	bhi.n	800764e <UART_SetConfig+0x49a>
 80075fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <UART_SetConfig+0x450>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007629 	.word	0x08007629
 8007608:	08007631 	.word	0x08007631
 800760c:	08007639 	.word	0x08007639
 8007610:	0800764f 	.word	0x0800764f
 8007614:	0800763f 	.word	0x0800763f
 8007618:	0800764f 	.word	0x0800764f
 800761c:	0800764f 	.word	0x0800764f
 8007620:	0800764f 	.word	0x0800764f
 8007624:	08007647 	.word	0x08007647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007628:	f7fe fa54 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 800762c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800762e:	e014      	b.n	800765a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007630:	f7fe fa66 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8007634:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007636:	e010      	b.n	800765a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007638:	4b4e      	ldr	r3, [pc, #312]	@ (8007774 <UART_SetConfig+0x5c0>)
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800763c:	e00d      	b.n	800765a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800763e:	f7fe f9db 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8007642:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007644:	e009      	b.n	800765a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800764c:	e005      	b.n	800765a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 8090 	beq.w	8007782 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	4a44      	ldr	r2, [pc, #272]	@ (8007778 <UART_SetConfig+0x5c4>)
 8007668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800766c:	461a      	mov	r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	fbb3 f3f2 	udiv	r3, r3, r2
 8007674:	005a      	lsls	r2, r3, #1
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	441a      	add	r2, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	fbb2 f3f3 	udiv	r3, r2, r3
 8007686:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	2b0f      	cmp	r3, #15
 800768c:	d916      	bls.n	80076bc <UART_SetConfig+0x508>
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007694:	d212      	bcs.n	80076bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	b29b      	uxth	r3, r3
 800769a:	f023 030f 	bic.w	r3, r3, #15
 800769e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	8bfb      	ldrh	r3, [r7, #30]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	8bfa      	ldrh	r2, [r7, #30]
 80076b8:	60da      	str	r2, [r3, #12]
 80076ba:	e062      	b.n	8007782 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076c2:	e05e      	b.n	8007782 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d828      	bhi.n	800771e <UART_SetConfig+0x56a>
 80076cc:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <UART_SetConfig+0x520>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	08007701 	.word	0x08007701
 80076dc:	08007709 	.word	0x08007709
 80076e0:	0800771f 	.word	0x0800771f
 80076e4:	0800770f 	.word	0x0800770f
 80076e8:	0800771f 	.word	0x0800771f
 80076ec:	0800771f 	.word	0x0800771f
 80076f0:	0800771f 	.word	0x0800771f
 80076f4:	08007717 	.word	0x08007717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f8:	f7fe f9ec 	bl	8005ad4 <HAL_RCC_GetPCLK1Freq>
 80076fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076fe:	e014      	b.n	800772a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007700:	f7fe f9fe 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8007704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007706:	e010      	b.n	800772a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007708:	4b1a      	ldr	r3, [pc, #104]	@ (8007774 <UART_SetConfig+0x5c0>)
 800770a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800770c:	e00d      	b.n	800772a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800770e:	f7fe f973 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8007712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007714:	e009      	b.n	800772a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800771a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800771c:	e005      	b.n	800772a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007728:	bf00      	nop
    }

    if (pclk != 0U)
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	2b00      	cmp	r3, #0
 800772e:	d028      	beq.n	8007782 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	4a10      	ldr	r2, [pc, #64]	@ (8007778 <UART_SetConfig+0x5c4>)
 8007736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773a:	461a      	mov	r2, r3
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	441a      	add	r2, r3
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d910      	bls.n	800777c <UART_SetConfig+0x5c8>
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007760:	d20c      	bcs.n	800777c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	b29a      	uxth	r2, r3
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60da      	str	r2, [r3, #12]
 800776c:	e009      	b.n	8007782 <UART_SetConfig+0x5ce>
 800776e:	bf00      	nop
 8007770:	40008000 	.word	0x40008000
 8007774:	00f42400 	.word	0x00f42400
 8007778:	08019edc 	.word	0x08019edc
      }
      else
      {
        ret = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2201      	movs	r2, #1
 8007786:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2201      	movs	r2, #1
 800778e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2200      	movs	r2, #0
 8007796:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2200      	movs	r2, #0
 800779c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800779e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3730      	adds	r7, #48	@ 0x30
 80077a6:	46bd      	mov	sp, r7
 80077a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01a      	beq.n	80078c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078aa:	d10a      	bne.n	80078c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]
  }
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b098      	sub	sp, #96	@ 0x60
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007900:	f7fa fe20 	bl	8002544 <HAL_GetTick>
 8007904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b08      	cmp	r3, #8
 8007912:	d12f      	bne.n	8007974 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800791c:	2200      	movs	r2, #0
 800791e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f88e 	bl	8007a44 <UART_WaitOnFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d022      	beq.n	8007974 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800793c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007942:	653b      	str	r3, [r7, #80]	@ 0x50
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800794c:	647b      	str	r3, [r7, #68]	@ 0x44
 800794e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800795a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e6      	bne.n	800792e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e063      	b.n	8007a3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b04      	cmp	r3, #4
 8007980:	d149      	bne.n	8007a16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007982:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798a:	2200      	movs	r2, #0
 800798c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f857 	bl	8007a44 <UART_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d03c      	beq.n	8007a16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	623b      	str	r3, [r7, #32]
   return(result);
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80079bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079ee:	61fa      	str	r2, [r7, #28]
 80079f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	69b9      	ldr	r1, [r7, #24]
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	617b      	str	r3, [r7, #20]
   return(result);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e5      	bne.n	80079ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e012      	b.n	8007a3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3758      	adds	r7, #88	@ 0x58
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a54:	e04f      	b.n	8007af6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a5c:	d04b      	beq.n	8007af6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5e:	f7fa fd71 	bl	8002544 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d302      	bcc.n	8007a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e04e      	b.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d037      	beq.n	8007af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b80      	cmp	r3, #128	@ 0x80
 8007a8a:	d034      	beq.n	8007af6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b40      	cmp	r3, #64	@ 0x40
 8007a90:	d031      	beq.n	8007af6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d110      	bne.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f920 	bl	8007cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e029      	b.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ad0:	d111      	bne.n	8007af6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f906 	bl	8007cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e00f      	b.n	8007b16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	4013      	ands	r3, r2
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	bf0c      	ite	eq
 8007b06:	2301      	moveq	r3, #1
 8007b08:	2300      	movne	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d0a0      	beq.n	8007a56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b096      	sub	sp, #88	@ 0x58
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2222      	movs	r2, #34	@ 0x22
 8007b48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d02d      	beq.n	8007bb2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5c:	4a40      	ldr	r2, [pc, #256]	@ (8007c60 <UART_Start_Receive_DMA+0x140>)
 8007b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b66:	4a3f      	ldr	r2, [pc, #252]	@ (8007c64 <UART_Start_Receive_DMA+0x144>)
 8007b68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b70:	4a3d      	ldr	r2, [pc, #244]	@ (8007c68 <UART_Start_Receive_DMA+0x148>)
 8007b72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3324      	adds	r3, #36	@ 0x24
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b90:	461a      	mov	r2, r3
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	f7fc fdc2 	bl	800471c <HAL_DMA_Start_IT>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e051      	b.n	8007c56 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d018      	beq.n	8007bec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bda:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e6      	bne.n	8007bba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3308      	adds	r3, #8
 8007c0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8007c0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e5      	bne.n	8007bec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3308      	adds	r3, #8
 8007c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c40:	623a      	str	r2, [r7, #32]
 8007c42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	69f9      	ldr	r1, [r7, #28]
 8007c46:	6a3a      	ldr	r2, [r7, #32]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e5      	bne.n	8007c20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3758      	adds	r7, #88	@ 0x58
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	08007e71 	.word	0x08007e71
 8007c64:	08007f9d 	.word	0x08007f9d
 8007c68:	08007fdb 	.word	0x08007fdb

08007c6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b08f      	sub	sp, #60	@ 0x3c
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e6      	bne.n	8007c74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc6:	61ba      	str	r2, [r7, #24]
 8007cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e5      	bne.n	8007ca6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007ce2:	bf00      	nop
 8007ce4:	373c      	adds	r7, #60	@ 0x3c
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b095      	sub	sp, #84	@ 0x54
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e3      	bne.n	8007d28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d118      	bne.n	8007d9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f023 0310 	bic.w	r3, r3, #16
 8007d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d86:	61bb      	str	r3, [r7, #24]
 8007d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6979      	ldr	r1, [r7, #20]
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	613b      	str	r3, [r7, #16]
   return(result);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e6      	bne.n	8007d68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007dae:	bf00      	nop
 8007db0:	3754      	adds	r7, #84	@ 0x54
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b090      	sub	sp, #64	@ 0x40
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d137      	bne.n	8007e46 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	623b      	str	r3, [r7, #32]
   return(result);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e5      	bne.n	8007dde <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	69b9      	ldr	r1, [r7, #24]
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e6      	bne.n	8007e12 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e44:	e002      	b.n	8007e4c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e46:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007e48:	f7ff f976 	bl	8007138 <HAL_UART_TxCpltCallback>
}
 8007e4c:	bf00      	nop
 8007e4e:	3740      	adds	r7, #64	@ 0x40
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff f972 	bl	800714c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e68:	bf00      	nop
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b09c      	sub	sp, #112	@ 0x70
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0320 	and.w	r3, r3, #32
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d171      	bne.n	8007f70 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007eb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007eb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e6      	bne.n	8007e94 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ee6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ee8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e5      	bne.n	8007ec6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3308      	adds	r3, #8
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	623b      	str	r3, [r7, #32]
   return(result);
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f10:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e5      	bne.n	8007efa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d118      	bne.n	8007f70 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0310 	bic.w	r3, r3, #16
 8007f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e6      	bne.n	8007f3e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f72:	2200      	movs	r2, #0
 8007f74:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d107      	bne.n	8007f8e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f84:	4619      	mov	r1, r3
 8007f86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f88:	f7ff f908 	bl	800719c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f8c:	e002      	b.n	8007f94 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f90:	f7ff f8e6 	bl	8007160 <HAL_UART_RxCpltCallback>
}
 8007f94:	bf00      	nop
 8007f96:	3770      	adds	r7, #112	@ 0x70
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d109      	bne.n	8007fcc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff f8e9 	bl	800719c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fca:	e002      	b.n	8007fd2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff f8d1 	bl	8007174 <HAL_UART_RxHalfCpltCallback>
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b086      	sub	sp, #24
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008002:	2b80      	cmp	r3, #128	@ 0x80
 8008004:	d109      	bne.n	800801a <UART_DMAError+0x40>
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b21      	cmp	r3, #33	@ 0x21
 800800a:	d106      	bne.n	800801a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2200      	movs	r2, #0
 8008010:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008014:	6978      	ldr	r0, [r7, #20]
 8008016:	f7ff fe29 	bl	8007c6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008024:	2b40      	cmp	r3, #64	@ 0x40
 8008026:	d109      	bne.n	800803c <UART_DMAError+0x62>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b22      	cmp	r3, #34	@ 0x22
 800802c:	d106      	bne.n	800803c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2200      	movs	r2, #0
 8008032:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f7ff fe59 	bl	8007cee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008042:	f043 0210 	orr.w	r2, r3, #16
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800804c:	6978      	ldr	r0, [r7, #20]
 800804e:	f7ff f89b 	bl	8007188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008052:	bf00      	nop
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff f889 	bl	8007188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b088      	sub	sp, #32
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	60bb      	str	r3, [r7, #8]
   return(result);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6979      	ldr	r1, [r7, #20]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	613b      	str	r3, [r7, #16]
   return(result);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e6      	bne.n	8008086 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff f836 	bl	8007138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080cc:	bf00      	nop
 80080ce:	3720      	adds	r7, #32
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_UARTEx_DisableFifoMode+0x16>
 8008122:	2302      	movs	r3, #2
 8008124:	e027      	b.n	8008176 <HAL_UARTEx_DisableFifoMode+0x66>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2224      	movs	r2, #36	@ 0x24
 8008132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0201 	bic.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008154:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2220      	movs	r2, #32
 8008168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008196:	2302      	movs	r3, #2
 8008198:	e02d      	b.n	80081f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2224      	movs	r2, #36	@ 0x24
 80081a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0201 	bic.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f850 	bl	800827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008212:	2302      	movs	r3, #2
 8008214:	e02d      	b.n	8008272 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2224      	movs	r2, #36	@ 0x24
 8008222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0201 	bic.w	r2, r2, #1
 800823c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f812 	bl	800827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008288:	2b00      	cmp	r3, #0
 800828a:	d108      	bne.n	800829e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800829c:	e031      	b.n	8008302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800829e:	2308      	movs	r3, #8
 80082a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082a2:	2308      	movs	r3, #8
 80082a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	0e5b      	lsrs	r3, r3, #25
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	0f5b      	lsrs	r3, r3, #29
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	7b3a      	ldrb	r2, [r7, #12]
 80082ca:	4911      	ldr	r1, [pc, #68]	@ (8008310 <UARTEx_SetNbDataToProcess+0x94>)
 80082cc:	5c8a      	ldrb	r2, [r1, r2]
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082d2:	7b3a      	ldrb	r2, [r7, #12]
 80082d4:	490f      	ldr	r1, [pc, #60]	@ (8008314 <UARTEx_SetNbDataToProcess+0x98>)
 80082d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	7b7a      	ldrb	r2, [r7, #13]
 80082e8:	4909      	ldr	r1, [pc, #36]	@ (8008310 <UARTEx_SetNbDataToProcess+0x94>)
 80082ea:	5c8a      	ldrb	r2, [r1, r2]
 80082ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082f0:	7b7a      	ldrb	r2, [r7, #13]
 80082f2:	4908      	ldr	r1, [pc, #32]	@ (8008314 <UARTEx_SetNbDataToProcess+0x98>)
 80082f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	08019ef4 	.word	0x08019ef4
 8008314:	08019efc 	.word	0x08019efc

08008318 <__NVIC_SetPriority>:
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db0a      	blt.n	8008342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	490c      	ldr	r1, [pc, #48]	@ (8008364 <__NVIC_SetPriority+0x4c>)
 8008332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008336:	0112      	lsls	r2, r2, #4
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	440b      	add	r3, r1
 800833c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008340:	e00a      	b.n	8008358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	b2da      	uxtb	r2, r3
 8008346:	4908      	ldr	r1, [pc, #32]	@ (8008368 <__NVIC_SetPriority+0x50>)
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	3b04      	subs	r3, #4
 8008350:	0112      	lsls	r2, r2, #4
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	440b      	add	r3, r1
 8008356:	761a      	strb	r2, [r3, #24]
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	e000e100 	.word	0xe000e100
 8008368:	e000ed00 	.word	0xe000ed00

0800836c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008370:	4b05      	ldr	r3, [pc, #20]	@ (8008388 <SysTick_Handler+0x1c>)
 8008372:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008374:	f001 fd40 	bl	8009df8 <xTaskGetSchedulerState>
 8008378:	4603      	mov	r3, r0
 800837a:	2b01      	cmp	r3, #1
 800837c:	d001      	beq.n	8008382 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800837e:	f002 fb3b 	bl	800a9f8 <xPortSysTickHandler>
  }
}
 8008382:	bf00      	nop
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	e000e010 	.word	0xe000e010

0800838c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008390:	2100      	movs	r1, #0
 8008392:	f06f 0004 	mvn.w	r0, #4
 8008396:	f7ff ffbf 	bl	8008318 <__NVIC_SetPriority>
#endif
}
 800839a:	bf00      	nop
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083a6:	f3ef 8305 	mrs	r3, IPSR
 80083aa:	603b      	str	r3, [r7, #0]
  return(result);
 80083ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083b2:	f06f 0305 	mvn.w	r3, #5
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	e00c      	b.n	80083d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083ba:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <osKernelInitialize+0x44>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d105      	bne.n	80083ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083c2:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <osKernelInitialize+0x44>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	607b      	str	r3, [r7, #4]
 80083cc:	e002      	b.n	80083d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80083ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083d4:	687b      	ldr	r3, [r7, #4]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20004e8c 	.word	0x20004e8c

080083e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ee:	f3ef 8305 	mrs	r3, IPSR
 80083f2:	603b      	str	r3, [r7, #0]
  return(result);
 80083f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <osKernelStart+0x1a>
    stat = osErrorISR;
 80083fa:	f06f 0305 	mvn.w	r3, #5
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	e010      	b.n	8008424 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008402:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <osKernelStart+0x48>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d109      	bne.n	800841e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800840a:	f7ff ffbf 	bl	800838c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800840e:	4b08      	ldr	r3, [pc, #32]	@ (8008430 <osKernelStart+0x48>)
 8008410:	2202      	movs	r2, #2
 8008412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008414:	f001 f87a 	bl	800950c <vTaskStartScheduler>
      stat = osOK;
 8008418:	2300      	movs	r3, #0
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	e002      	b.n	8008424 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008424:	687b      	ldr	r3, [r7, #4]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20004e8c 	.word	0x20004e8c

08008434 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	@ 0x38
 8008438:	af04      	add	r7, sp, #16
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008444:	f3ef 8305 	mrs	r3, IPSR
 8008448:	617b      	str	r3, [r7, #20]
  return(result);
 800844a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800844c:	2b00      	cmp	r3, #0
 800844e:	d17e      	bne.n	800854e <osThreadNew+0x11a>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d07b      	beq.n	800854e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008456:	2380      	movs	r3, #128	@ 0x80
 8008458:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800845a:	2318      	movs	r3, #24
 800845c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800845e:	2300      	movs	r3, #0
 8008460:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008466:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d045      	beq.n	80084fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <osThreadNew+0x48>
        name = attr->name;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d008      	beq.n	80084a2 <osThreadNew+0x6e>
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b38      	cmp	r3, #56	@ 0x38
 8008494:	d805      	bhi.n	80084a2 <osThreadNew+0x6e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <osThreadNew+0x72>
        return (NULL);
 80084a2:	2300      	movs	r3, #0
 80084a4:	e054      	b.n	8008550 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00e      	beq.n	80084dc <osThreadNew+0xa8>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b5b      	cmp	r3, #91	@ 0x5b
 80084c4:	d90a      	bls.n	80084dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d006      	beq.n	80084dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <osThreadNew+0xa8>
        mem = 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	e010      	b.n	80084fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10c      	bne.n	80084fe <osThreadNew+0xca>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d108      	bne.n	80084fe <osThreadNew+0xca>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <osThreadNew+0xca>
          mem = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	e001      	b.n	80084fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d110      	bne.n	8008526 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800850c:	9202      	str	r2, [sp, #8]
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fe1a 	bl	8009154 <xTaskCreateStatic>
 8008520:	4603      	mov	r3, r0
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	e013      	b.n	800854e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d110      	bne.n	800854e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	b29a      	uxth	r2, r3
 8008530:	f107 0310 	add.w	r3, r7, #16
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fe68 	bl	8009214 <xTaskCreate>
 8008544:	4603      	mov	r3, r0
 8008546:	2b01      	cmp	r3, #1
 8008548:	d001      	beq.n	800854e <osThreadNew+0x11a>
            hTask = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800854e:	693b      	ldr	r3, [r7, #16]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3728      	adds	r7, #40	@ 0x28
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008560:	f3ef 8305 	mrs	r3, IPSR
 8008564:	60bb      	str	r3, [r7, #8]
  return(result);
 8008566:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <osDelay+0x1c>
    stat = osErrorISR;
 800856c:	f06f 0305 	mvn.w	r3, #5
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e007      	b.n	8008584 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008574:	2300      	movs	r3, #0
 8008576:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <osDelay+0x2c>
      vTaskDelay(ticks);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 ff8e 	bl	80094a0 <vTaskDelay>
    }
  }

  return (stat);
 8008584:	68fb      	ldr	r3, [r7, #12]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4a07      	ldr	r2, [pc, #28]	@ (80085bc <vApplicationGetIdleTaskMemory+0x2c>)
 80085a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4a06      	ldr	r2, [pc, #24]	@ (80085c0 <vApplicationGetIdleTaskMemory+0x30>)
 80085a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2280      	movs	r2, #128	@ 0x80
 80085ac:	601a      	str	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20004e90 	.word	0x20004e90
 80085c0:	20004eec 	.word	0x20004eec

080085c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4a07      	ldr	r2, [pc, #28]	@ (80085f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80085d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	4a06      	ldr	r2, [pc, #24]	@ (80085f4 <vApplicationGetTimerTaskMemory+0x30>)
 80085da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085e2:	601a      	str	r2, [r3, #0]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	200050ec 	.word	0x200050ec
 80085f4:	20005148 	.word	0x20005148

080085f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f103 0208 	add.w	r2, r3, #8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f103 0208 	add.w	r2, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f103 0208 	add.w	r2, r3, #8
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
}
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086b0:	d103      	bne.n	80086ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	e00c      	b.n	80086d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3308      	adds	r3, #8
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e002      	b.n	80086c8 <vListInsert+0x2e>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d2f6      	bcs.n	80086c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	601a      	str	r2, [r3, #0]
}
 8008700:	bf00      	nop
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6892      	ldr	r2, [r2, #8]
 8008722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6852      	ldr	r2, [r2, #4]
 800872c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d103      	bne.n	8008740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	1e5a      	subs	r2, r3, #1
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xQueueGenericReset+0x2c>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	60bb      	str	r3, [r7, #8]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800878c:	f002 f8a4 	bl	800a8d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008798:	68f9      	ldr	r1, [r7, #12]
 800879a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	441a      	add	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087bc:	3b01      	subs	r3, #1
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087c2:	fb01 f303 	mul.w	r3, r1, r3
 80087c6:	441a      	add	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	22ff      	movs	r2, #255	@ 0xff
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	22ff      	movs	r2, #255	@ 0xff
 80087d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d114      	bne.n	800880c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d01a      	beq.n	8008820 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3310      	adds	r3, #16
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 f91a 	bl	8009a28 <xTaskRemoveFromEventList>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d012      	beq.n	8008820 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008830 <xQueueGenericReset+0xd0>)
 80087fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	e009      	b.n	8008820 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3310      	adds	r3, #16
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff fef1 	bl	80085f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3324      	adds	r3, #36	@ 0x24
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff feec 	bl	80085f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008820:	f002 f88c 	bl	800a93c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008824:	2301      	movs	r3, #1
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08e      	sub	sp, #56	@ 0x38
 8008838:	af02      	add	r7, sp, #8
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10b      	bne.n	8008860 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10b      	bne.n	800887e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop
 800887c:	e7fd      	b.n	800887a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <xQueueGenericCreateStatic+0x56>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <xQueueGenericCreateStatic+0x5a>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <xQueueGenericCreateStatic+0x5c>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	623b      	str	r3, [r7, #32]
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <xQueueGenericCreateStatic+0x84>
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <xQueueGenericCreateStatic+0x88>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <xQueueGenericCreateStatic+0x8a>
 80088bc:	2300      	movs	r3, #0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10b      	bne.n	80088da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	61fb      	str	r3, [r7, #28]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088da:	2350      	movs	r3, #80	@ 0x50
 80088dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b50      	cmp	r3, #80	@ 0x50
 80088e2:	d00b      	beq.n	80088fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	61bb      	str	r3, [r7, #24]
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	e7fd      	b.n	80088f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00d      	beq.n	8008924 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008910:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 f805 	bl	800892e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008926:	4618      	mov	r0, r3
 8008928:	3730      	adds	r7, #48	@ 0x30
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	e002      	b.n	8008950 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800895c:	2101      	movs	r1, #1
 800895e:	69b8      	ldr	r0, [r7, #24]
 8008960:	f7ff fefe 	bl	8008760 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08e      	sub	sp, #56	@ 0x38
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008982:	2300      	movs	r3, #0
 8008984:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <xQueueGenericSend+0x34>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	e7fd      	b.n	80089a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSend+0x42>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <xQueueGenericSend+0x46>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <xQueueGenericSend+0x48>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10b      	bne.n	80089d8 <xQueueGenericSend+0x64>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d103      	bne.n	80089e6 <xQueueGenericSend+0x72>
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d101      	bne.n	80089ea <xQueueGenericSend+0x76>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <xQueueGenericSend+0x78>
 80089ea:	2300      	movs	r3, #0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <xQueueGenericSend+0x94>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	623b      	str	r3, [r7, #32]
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	e7fd      	b.n	8008a04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a08:	f001 f9f6 	bl	8009df8 <xTaskGetSchedulerState>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <xQueueGenericSend+0xa4>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <xQueueGenericSend+0xa8>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e000      	b.n	8008a1e <xQueueGenericSend+0xaa>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <xQueueGenericSend+0xc6>
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	61fb      	str	r3, [r7, #28]
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	e7fd      	b.n	8008a36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a3a:	f001 ff4d 	bl	800a8d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d302      	bcc.n	8008a50 <xQueueGenericSend+0xdc>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d129      	bne.n	8008aa4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a56:	f000 fa0f 	bl	8008e78 <prvCopyDataToQueue>
 8008a5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	3324      	adds	r3, #36	@ 0x24
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 ffdd 	bl	8009a28 <xTaskRemoveFromEventList>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d013      	beq.n	8008a9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a74:	4b3f      	ldr	r3, [pc, #252]	@ (8008b74 <xQueueGenericSend+0x200>)
 8008a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	e00a      	b.n	8008a9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d007      	beq.n	8008a9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a8c:	4b39      	ldr	r3, [pc, #228]	@ (8008b74 <xQueueGenericSend+0x200>)
 8008a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a9c:	f001 ff4e 	bl	800a93c <vPortExitCritical>
				return pdPASS;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e063      	b.n	8008b6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008aaa:	f001 ff47 	bl	800a93c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e05c      	b.n	8008b6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 f83f 	bl	8009b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ac6:	f001 ff39 	bl	800a93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aca:	f000 fd87 	bl	80095dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ace:	f001 ff03 	bl	800a8d8 <vPortEnterCritical>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ad8:	b25b      	sxtb	r3, r3
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ade:	d103      	bne.n	8008ae8 <xQueueGenericSend+0x174>
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aee:	b25b      	sxtb	r3, r3
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008af4:	d103      	bne.n	8008afe <xQueueGenericSend+0x18a>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008afe:	f001 ff1d 	bl	800a93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b02:	1d3a      	adds	r2, r7, #4
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 f82e 	bl	8009b6c <xTaskCheckForTimeOut>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d124      	bne.n	8008b60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b18:	f000 faa6 	bl	8009068 <prvIsQueueFull>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d018      	beq.n	8008b54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	3310      	adds	r3, #16
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 ff2a 	bl	8009984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b32:	f000 fa31 	bl	8008f98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b36:	f000 fd5f 	bl	80095f8 <xTaskResumeAll>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f af7c 	bne.w	8008a3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b42:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <xQueueGenericSend+0x200>)
 8008b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	e772      	b.n	8008a3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b56:	f000 fa1f 	bl	8008f98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b5a:	f000 fd4d 	bl	80095f8 <xTaskResumeAll>
 8008b5e:	e76c      	b.n	8008a3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b62:	f000 fa19 	bl	8008f98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b66:	f000 fd47 	bl	80095f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3738      	adds	r7, #56	@ 0x38
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed04 	.word	0xe000ed04

08008b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b090      	sub	sp, #64	@ 0x40
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10b      	bne.n	8008ba8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d103      	bne.n	8008bb6 <xQueueGenericSendFromISR+0x3e>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <xQueueGenericSendFromISR+0x42>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e000      	b.n	8008bbc <xQueueGenericSendFromISR+0x44>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d103      	bne.n	8008be6 <xQueueGenericSendFromISR+0x6e>
 8008bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <xQueueGenericSendFromISR+0x72>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <xQueueGenericSendFromISR+0x74>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10b      	bne.n	8008c08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	623b      	str	r3, [r7, #32]
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	e7fd      	b.n	8008c04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c08:	f001 ff46 	bl	800aa98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8008c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	61fa      	str	r2, [r7, #28]
 8008c22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <xQueueGenericSendFromISR+0xc2>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d12f      	bne.n	8008c9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	68b9      	ldr	r1, [r7, #8]
 8008c4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c50:	f000 f912 	bl	8008e78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c5c:	d112      	bne.n	8008c84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d016      	beq.n	8008c94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	3324      	adds	r3, #36	@ 0x24
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fedc 	bl	8009a28 <xTaskRemoveFromEventList>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	e007      	b.n	8008c94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008c88:	3301      	adds	r3, #1
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	b25a      	sxtb	r2, r3
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c94:	2301      	movs	r3, #1
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008c98:	e001      	b.n	8008c9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ca8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3740      	adds	r7, #64	@ 0x40
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08c      	sub	sp, #48	@ 0x30
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <xQueueReceive+0x32>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	623b      	str	r3, [r7, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d103      	bne.n	8008cf4 <xQueueReceive+0x40>
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <xQueueReceive+0x44>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <xQueueReceive+0x46>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10b      	bne.n	8008d16 <xQueueReceive+0x62>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	61fb      	str	r3, [r7, #28]
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	e7fd      	b.n	8008d12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d16:	f001 f86f 	bl	8009df8 <xTaskGetSchedulerState>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d102      	bne.n	8008d26 <xQueueReceive+0x72>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <xQueueReceive+0x76>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e000      	b.n	8008d2c <xQueueReceive+0x78>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10b      	bne.n	8008d48 <xQueueReceive+0x94>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	61bb      	str	r3, [r7, #24]
}
 8008d42:	bf00      	nop
 8008d44:	bf00      	nop
 8008d46:	e7fd      	b.n	8008d44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d48:	f001 fdc6 	bl	800a8d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01f      	beq.n	8008d98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d5c:	f000 f8f6 	bl	8008f4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	1e5a      	subs	r2, r3, #1
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00f      	beq.n	8008d90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d72:	3310      	adds	r3, #16
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fe57 	bl	8009a28 <xTaskRemoveFromEventList>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d007      	beq.n	8008d90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d80:	4b3c      	ldr	r3, [pc, #240]	@ (8008e74 <xQueueReceive+0x1c0>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d90:	f001 fdd4 	bl	800a93c <vPortExitCritical>
				return pdPASS;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e069      	b.n	8008e6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d103      	bne.n	8008da6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d9e:	f001 fdcd 	bl	800a93c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e062      	b.n	8008e6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dac:	f107 0310 	add.w	r3, r7, #16
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fec5 	bl	8009b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008db6:	2301      	movs	r3, #1
 8008db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dba:	f001 fdbf 	bl	800a93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dbe:	f000 fc0d 	bl	80095dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dc2:	f001 fd89 	bl	800a8d8 <vPortEnterCritical>
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dcc:	b25b      	sxtb	r3, r3
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dd2:	d103      	bne.n	8008ddc <xQueueReceive+0x128>
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008de2:	b25b      	sxtb	r3, r3
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008de8:	d103      	bne.n	8008df2 <xQueueReceive+0x13e>
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008df2:	f001 fda3 	bl	800a93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df6:	1d3a      	adds	r2, r7, #4
 8008df8:	f107 0310 	add.w	r3, r7, #16
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 feb4 	bl	8009b6c <xTaskCheckForTimeOut>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d123      	bne.n	8008e52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0c:	f000 f916 	bl	800903c <prvIsQueueEmpty>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d017      	beq.n	8008e46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	3324      	adds	r3, #36	@ 0x24
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fdb0 	bl	8009984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e26:	f000 f8b7 	bl	8008f98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e2a:	f000 fbe5 	bl	80095f8 <xTaskResumeAll>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d189      	bne.n	8008d48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e34:	4b0f      	ldr	r3, [pc, #60]	@ (8008e74 <xQueueReceive+0x1c0>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	e780      	b.n	8008d48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e48:	f000 f8a6 	bl	8008f98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e4c:	f000 fbd4 	bl	80095f8 <xTaskResumeAll>
 8008e50:	e77a      	b.n	8008d48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e54:	f000 f8a0 	bl	8008f98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e58:	f000 fbce 	bl	80095f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e5e:	f000 f8ed 	bl	800903c <prvIsQueueEmpty>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f43f af6f 	beq.w	8008d48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3730      	adds	r7, #48	@ 0x30
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	e000ed04 	.word	0xe000ed04

08008e78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10d      	bne.n	8008eb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d14d      	bne.n	8008f3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 ffc6 	bl	8009e34 <xTaskPriorityDisinherit>
 8008ea8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	609a      	str	r2, [r3, #8]
 8008eb0:	e043      	b.n	8008f3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d119      	bne.n	8008eec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6858      	ldr	r0, [r3, #4]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	68b9      	ldr	r1, [r7, #8]
 8008ec4:	f010 f93f 	bl	8019146 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed0:	441a      	add	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d32b      	bcc.n	8008f3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	e026      	b.n	8008f3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68d8      	ldr	r0, [r3, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	f010 f925 	bl	8019146 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	425b      	negs	r3, r3
 8008f06:	441a      	add	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d207      	bcs.n	8008f28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f20:	425b      	negs	r3, r3
 8008f22:	441a      	add	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d105      	bne.n	8008f3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f42:	697b      	ldr	r3, [r7, #20]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d018      	beq.n	8008f90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f66:	441a      	add	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d303      	bcc.n	8008f80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68d9      	ldr	r1, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6838      	ldr	r0, [r7, #0]
 8008f8c:	f010 f8db 	bl	8019146 <memcpy>
	}
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fa0:	f001 fc9a 	bl	800a8d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008faa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fac:	e011      	b.n	8008fd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d012      	beq.n	8008fdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3324      	adds	r3, #36	@ 0x24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fd34 	bl	8009a28 <xTaskRemoveFromEventList>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fc6:	f000 fe35 	bl	8009c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dce9      	bgt.n	8008fae <prvUnlockQueue+0x16>
 8008fda:	e000      	b.n	8008fde <prvUnlockQueue+0x46>
					break;
 8008fdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	22ff      	movs	r2, #255	@ 0xff
 8008fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008fe6:	f001 fca9 	bl	800a93c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fea:	f001 fc75 	bl	800a8d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ff4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ff6:	e011      	b.n	800901c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d012      	beq.n	8009026 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3310      	adds	r3, #16
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fd0f 	bl	8009a28 <xTaskRemoveFromEventList>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009010:	f000 fe10 	bl	8009c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	3b01      	subs	r3, #1
 8009018:	b2db      	uxtb	r3, r3
 800901a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800901c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dce9      	bgt.n	8008ff8 <prvUnlockQueue+0x60>
 8009024:	e000      	b.n	8009028 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009026:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	22ff      	movs	r2, #255	@ 0xff
 800902c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009030:	f001 fc84 	bl	800a93c <vPortExitCritical>
}
 8009034:	bf00      	nop
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009044:	f001 fc48 	bl	800a8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e001      	b.n	800905a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800905a:	f001 fc6f 	bl	800a93c <vPortExitCritical>

	return xReturn;
 800905e:	68fb      	ldr	r3, [r7, #12]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009070:	f001 fc32 	bl	800a8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907c:	429a      	cmp	r2, r3
 800907e:	d102      	bne.n	8009086 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009080:	2301      	movs	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e001      	b.n	800908a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800908a:	f001 fc57 	bl	800a93c <vPortExitCritical>

	return xReturn;
 800908e:	68fb      	ldr	r3, [r7, #12]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	e014      	b.n	80090d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090a8:	4a0f      	ldr	r2, [pc, #60]	@ (80090e8 <vQueueAddToRegistry+0x50>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10b      	bne.n	80090cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090b4:	490c      	ldr	r1, [pc, #48]	@ (80090e8 <vQueueAddToRegistry+0x50>)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090be:	4a0a      	ldr	r2, [pc, #40]	@ (80090e8 <vQueueAddToRegistry+0x50>)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4413      	add	r3, r2
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090ca:	e006      	b.n	80090da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b07      	cmp	r3, #7
 80090d6:	d9e7      	bls.n	80090a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20005548 	.word	0x20005548

080090ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090fc:	f001 fbec 	bl	800a8d8 <vPortEnterCritical>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009106:	b25b      	sxtb	r3, r3
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800910c:	d103      	bne.n	8009116 <vQueueWaitForMessageRestricted+0x2a>
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800911c:	b25b      	sxtb	r3, r3
 800911e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009122:	d103      	bne.n	800912c <vQueueWaitForMessageRestricted+0x40>
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800912c:	f001 fc06 	bl	800a93c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	3324      	adds	r3, #36	@ 0x24
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 fc45 	bl	80099d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009146:	6978      	ldr	r0, [r7, #20]
 8009148:	f7ff ff26 	bl	8008f98 <prvUnlockQueue>
	}
 800914c:	bf00      	nop
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08e      	sub	sp, #56	@ 0x38
 8009158:	af04      	add	r7, sp, #16
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10b      	bne.n	8009180 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	623b      	str	r3, [r7, #32]
}
 800917a:	bf00      	nop
 800917c:	bf00      	nop
 800917e:	e7fd      	b.n	800917c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	61fb      	str	r3, [r7, #28]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800919e:	235c      	movs	r3, #92	@ 0x5c
 80091a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80091a6:	d00b      	beq.n	80091c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61bb      	str	r3, [r7, #24]
}
 80091ba:	bf00      	nop
 80091bc:	bf00      	nop
 80091be:	e7fd      	b.n	80091bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01e      	beq.n	8009206 <xTaskCreateStatic+0xb2>
 80091c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01b      	beq.n	8009206 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091e0:	2300      	movs	r3, #0
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e6:	9302      	str	r3, [sp, #8]
 80091e8:	f107 0314 	add.w	r3, r7, #20
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f850 	bl	800929e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009200:	f000 f8de 	bl	80093c0 <prvAddNewTaskToReadyList>
 8009204:	e001      	b.n	800920a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800920a:	697b      	ldr	r3, [r7, #20]
	}
 800920c:	4618      	mov	r0, r3
 800920e:	3728      	adds	r7, #40	@ 0x28
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08c      	sub	sp, #48	@ 0x30
 8009218:	af04      	add	r7, sp, #16
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	4613      	mov	r3, r2
 8009222:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4618      	mov	r0, r3
 800922a:	f001 fc77 	bl	800ab1c <pvPortMalloc>
 800922e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00e      	beq.n	8009254 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009236:	205c      	movs	r0, #92	@ 0x5c
 8009238:	f001 fc70 	bl	800ab1c <pvPortMalloc>
 800923c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	631a      	str	r2, [r3, #48]	@ 0x30
 800924a:	e005      	b.n	8009258 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800924c:	6978      	ldr	r0, [r7, #20]
 800924e:	f001 fd33 	bl	800acb8 <vPortFree>
 8009252:	e001      	b.n	8009258 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009254:	2300      	movs	r3, #0
 8009256:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d017      	beq.n	800928e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009266:	88fa      	ldrh	r2, [r7, #6]
 8009268:	2300      	movs	r3, #0
 800926a:	9303      	str	r3, [sp, #12]
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	9302      	str	r3, [sp, #8]
 8009270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68b9      	ldr	r1, [r7, #8]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f80e 	bl	800929e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009282:	69f8      	ldr	r0, [r7, #28]
 8009284:	f000 f89c 	bl	80093c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009288:	2301      	movs	r3, #1
 800928a:	61bb      	str	r3, [r7, #24]
 800928c:	e002      	b.n	8009294 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800928e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009292:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009294:	69bb      	ldr	r3, [r7, #24]
	}
 8009296:	4618      	mov	r0, r3
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b088      	sub	sp, #32
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	461a      	mov	r2, r3
 80092b6:	21a5      	movs	r1, #165	@ 0xa5
 80092b8:	f00f fe7c 	bl	8018fb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092c6:	3b01      	subs	r3, #1
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	f023 0307 	bic.w	r3, r3, #7
 80092d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	617b      	str	r3, [r7, #20]
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	e7fd      	b.n	80092f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01f      	beq.n	800933e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092fe:	2300      	movs	r3, #0
 8009300:	61fb      	str	r3, [r7, #28]
 8009302:	e012      	b.n	800932a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	4413      	add	r3, r2
 800930a:	7819      	ldrb	r1, [r3, #0]
 800930c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	3334      	adds	r3, #52	@ 0x34
 8009314:	460a      	mov	r2, r1
 8009316:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d006      	beq.n	8009332 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	3301      	adds	r3, #1
 8009328:	61fb      	str	r3, [r7, #28]
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2b0f      	cmp	r3, #15
 800932e:	d9e9      	bls.n	8009304 <prvInitialiseNewTask+0x66>
 8009330:	e000      	b.n	8009334 <prvInitialiseNewTask+0x96>
			{
				break;
 8009332:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800933c:	e003      	b.n	8009346 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009348:	2b37      	cmp	r3, #55	@ 0x37
 800934a:	d901      	bls.n	8009350 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800934c:	2337      	movs	r3, #55	@ 0x37
 800934e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009354:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800935a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	2200      	movs	r2, #0
 8009360:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	3304      	adds	r3, #4
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff f966 	bl	8008638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	3318      	adds	r3, #24
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff f961 	bl	8008638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800937a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	2200      	movs	r2, #0
 8009390:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	68f9      	ldr	r1, [r7, #12]
 800939e:	69b8      	ldr	r0, [r7, #24]
 80093a0:	f001 f966 	bl	800a670 <pxPortInitialiseStack>
 80093a4:	4602      	mov	r2, r0
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b6:	bf00      	nop
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093c8:	f001 fa86 	bl	800a8d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093cc:	4b2d      	ldr	r3, [pc, #180]	@ (8009484 <prvAddNewTaskToReadyList+0xc4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3301      	adds	r3, #1
 80093d2:	4a2c      	ldr	r2, [pc, #176]	@ (8009484 <prvAddNewTaskToReadyList+0xc4>)
 80093d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009488 <prvAddNewTaskToReadyList+0xc8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d109      	bne.n	80093f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093de:	4a2a      	ldr	r2, [pc, #168]	@ (8009488 <prvAddNewTaskToReadyList+0xc8>)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093e4:	4b27      	ldr	r3, [pc, #156]	@ (8009484 <prvAddNewTaskToReadyList+0xc4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d110      	bne.n	800940e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093ec:	f000 fc46 	bl	8009c7c <prvInitialiseTaskLists>
 80093f0:	e00d      	b.n	800940e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093f2:	4b26      	ldr	r3, [pc, #152]	@ (800948c <prvAddNewTaskToReadyList+0xcc>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d109      	bne.n	800940e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093fa:	4b23      	ldr	r3, [pc, #140]	@ (8009488 <prvAddNewTaskToReadyList+0xc8>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	429a      	cmp	r2, r3
 8009406:	d802      	bhi.n	800940e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009408:	4a1f      	ldr	r2, [pc, #124]	@ (8009488 <prvAddNewTaskToReadyList+0xc8>)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800940e:	4b20      	ldr	r3, [pc, #128]	@ (8009490 <prvAddNewTaskToReadyList+0xd0>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3301      	adds	r3, #1
 8009414:	4a1e      	ldr	r2, [pc, #120]	@ (8009490 <prvAddNewTaskToReadyList+0xd0>)
 8009416:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009418:	4b1d      	ldr	r3, [pc, #116]	@ (8009490 <prvAddNewTaskToReadyList+0xd0>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009424:	4b1b      	ldr	r3, [pc, #108]	@ (8009494 <prvAddNewTaskToReadyList+0xd4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d903      	bls.n	8009434 <prvAddNewTaskToReadyList+0x74>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009430:	4a18      	ldr	r2, [pc, #96]	@ (8009494 <prvAddNewTaskToReadyList+0xd4>)
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4a15      	ldr	r2, [pc, #84]	@ (8009498 <prvAddNewTaskToReadyList+0xd8>)
 8009442:	441a      	add	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3304      	adds	r3, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f7ff f901 	bl	8008652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009450:	f001 fa74 	bl	800a93c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009454:	4b0d      	ldr	r3, [pc, #52]	@ (800948c <prvAddNewTaskToReadyList+0xcc>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00e      	beq.n	800947a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800945c:	4b0a      	ldr	r3, [pc, #40]	@ (8009488 <prvAddNewTaskToReadyList+0xc8>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	429a      	cmp	r2, r3
 8009468:	d207      	bcs.n	800947a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800946a:	4b0c      	ldr	r3, [pc, #48]	@ (800949c <prvAddNewTaskToReadyList+0xdc>)
 800946c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20005a5c 	.word	0x20005a5c
 8009488:	20005588 	.word	0x20005588
 800948c:	20005a68 	.word	0x20005a68
 8009490:	20005a78 	.word	0x20005a78
 8009494:	20005a64 	.word	0x20005a64
 8009498:	2000558c 	.word	0x2000558c
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d018      	beq.n	80094e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094b2:	4b14      	ldr	r3, [pc, #80]	@ (8009504 <vTaskDelay+0x64>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00b      	beq.n	80094d2 <vTaskDelay+0x32>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	60bb      	str	r3, [r7, #8]
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	e7fd      	b.n	80094ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094d2:	f000 f883 	bl	80095dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094d6:	2100      	movs	r1, #0
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fd1b 	bl	8009f14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094de:	f000 f88b 	bl	80095f8 <xTaskResumeAll>
 80094e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d107      	bne.n	80094fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80094ea:	4b07      	ldr	r3, [pc, #28]	@ (8009508 <vTaskDelay+0x68>)
 80094ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20005a84 	.word	0x20005a84
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	@ 0x28
 8009510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009512:	2300      	movs	r3, #0
 8009514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800951a:	463a      	mov	r2, r7
 800951c:	1d39      	adds	r1, r7, #4
 800951e:	f107 0308 	add.w	r3, r7, #8
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff f834 	bl	8008590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	9202      	str	r2, [sp, #8]
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	2300      	movs	r3, #0
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	2300      	movs	r3, #0
 8009538:	460a      	mov	r2, r1
 800953a:	4922      	ldr	r1, [pc, #136]	@ (80095c4 <vTaskStartScheduler+0xb8>)
 800953c:	4822      	ldr	r0, [pc, #136]	@ (80095c8 <vTaskStartScheduler+0xbc>)
 800953e:	f7ff fe09 	bl	8009154 <xTaskCreateStatic>
 8009542:	4603      	mov	r3, r0
 8009544:	4a21      	ldr	r2, [pc, #132]	@ (80095cc <vTaskStartScheduler+0xc0>)
 8009546:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009548:	4b20      	ldr	r3, [pc, #128]	@ (80095cc <vTaskStartScheduler+0xc0>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009550:	2301      	movs	r3, #1
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e001      	b.n	800955a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d102      	bne.n	8009566 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009560:	f000 fd2c 	bl	8009fbc <xTimerCreateTimerTask>
 8009564:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d116      	bne.n	800959a <vTaskStartScheduler+0x8e>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	613b      	str	r3, [r7, #16]
}
 800957e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009580:	4b13      	ldr	r3, [pc, #76]	@ (80095d0 <vTaskStartScheduler+0xc4>)
 8009582:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009586:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009588:	4b12      	ldr	r3, [pc, #72]	@ (80095d4 <vTaskStartScheduler+0xc8>)
 800958a:	2201      	movs	r2, #1
 800958c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800958e:	4b12      	ldr	r3, [pc, #72]	@ (80095d8 <vTaskStartScheduler+0xcc>)
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009594:	f001 f8fc 	bl	800a790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009598:	e00f      	b.n	80095ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095a0:	d10b      	bne.n	80095ba <vTaskStartScheduler+0xae>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	60fb      	str	r3, [r7, #12]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <vTaskStartScheduler+0xaa>
}
 80095ba:	bf00      	nop
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	08019e6c 	.word	0x08019e6c
 80095c8:	08009c4d 	.word	0x08009c4d
 80095cc:	20005a80 	.word	0x20005a80
 80095d0:	20005a7c 	.word	0x20005a7c
 80095d4:	20005a68 	.word	0x20005a68
 80095d8:	20005a60 	.word	0x20005a60

080095dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095e0:	4b04      	ldr	r3, [pc, #16]	@ (80095f4 <vTaskSuspendAll+0x18>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	4a03      	ldr	r2, [pc, #12]	@ (80095f4 <vTaskSuspendAll+0x18>)
 80095e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095ea:	bf00      	nop
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	20005a84 	.word	0x20005a84

080095f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009602:	2300      	movs	r3, #0
 8009604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009606:	4b42      	ldr	r3, [pc, #264]	@ (8009710 <xTaskResumeAll+0x118>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10b      	bne.n	8009626 <xTaskResumeAll+0x2e>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	603b      	str	r3, [r7, #0]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009626:	f001 f957 	bl	800a8d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800962a:	4b39      	ldr	r3, [pc, #228]	@ (8009710 <xTaskResumeAll+0x118>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3b01      	subs	r3, #1
 8009630:	4a37      	ldr	r2, [pc, #220]	@ (8009710 <xTaskResumeAll+0x118>)
 8009632:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009634:	4b36      	ldr	r3, [pc, #216]	@ (8009710 <xTaskResumeAll+0x118>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d162      	bne.n	8009702 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800963c:	4b35      	ldr	r3, [pc, #212]	@ (8009714 <xTaskResumeAll+0x11c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d05e      	beq.n	8009702 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009644:	e02f      	b.n	80096a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009646:	4b34      	ldr	r3, [pc, #208]	@ (8009718 <xTaskResumeAll+0x120>)
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3318      	adds	r3, #24
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff f85a 	bl	800870c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3304      	adds	r3, #4
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff f855 	bl	800870c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009666:	4b2d      	ldr	r3, [pc, #180]	@ (800971c <xTaskResumeAll+0x124>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d903      	bls.n	8009676 <xTaskResumeAll+0x7e>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	4a2a      	ldr	r2, [pc, #168]	@ (800971c <xTaskResumeAll+0x124>)
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4a27      	ldr	r2, [pc, #156]	@ (8009720 <xTaskResumeAll+0x128>)
 8009684:	441a      	add	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3304      	adds	r3, #4
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f7fe ffe0 	bl	8008652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009696:	4b23      	ldr	r3, [pc, #140]	@ (8009724 <xTaskResumeAll+0x12c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096a0:	4b21      	ldr	r3, [pc, #132]	@ (8009728 <xTaskResumeAll+0x130>)
 80096a2:	2201      	movs	r2, #1
 80096a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009718 <xTaskResumeAll+0x120>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1cb      	bne.n	8009646 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096b4:	f000 fb80 	bl	8009db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096b8:	4b1c      	ldr	r3, [pc, #112]	@ (800972c <xTaskResumeAll+0x134>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d010      	beq.n	80096e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096c4:	f000 f846 	bl	8009754 <xTaskIncrementTick>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80096ce:	4b16      	ldr	r3, [pc, #88]	@ (8009728 <xTaskResumeAll+0x130>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1f1      	bne.n	80096c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80096e0:	4b12      	ldr	r3, [pc, #72]	@ (800972c <xTaskResumeAll+0x134>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096e6:	4b10      	ldr	r3, [pc, #64]	@ (8009728 <xTaskResumeAll+0x130>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096ee:	2301      	movs	r3, #1
 80096f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009730 <xTaskResumeAll+0x138>)
 80096f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009702:	f001 f91b 	bl	800a93c <vPortExitCritical>

	return xAlreadyYielded;
 8009706:	68bb      	ldr	r3, [r7, #8]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20005a84 	.word	0x20005a84
 8009714:	20005a5c 	.word	0x20005a5c
 8009718:	20005a1c 	.word	0x20005a1c
 800971c:	20005a64 	.word	0x20005a64
 8009720:	2000558c 	.word	0x2000558c
 8009724:	20005588 	.word	0x20005588
 8009728:	20005a70 	.word	0x20005a70
 800972c:	20005a6c 	.word	0x20005a6c
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800973a:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <xTaskGetTickCount+0x1c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009740:	687b      	ldr	r3, [r7, #4]
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20005a60 	.word	0x20005a60

08009754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800975a:	2300      	movs	r3, #0
 800975c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800975e:	4b4f      	ldr	r3, [pc, #316]	@ (800989c <xTaskIncrementTick+0x148>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 8090 	bne.w	8009888 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009768:	4b4d      	ldr	r3, [pc, #308]	@ (80098a0 <xTaskIncrementTick+0x14c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3301      	adds	r3, #1
 800976e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009770:	4a4b      	ldr	r2, [pc, #300]	@ (80098a0 <xTaskIncrementTick+0x14c>)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d121      	bne.n	80097c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800977c:	4b49      	ldr	r3, [pc, #292]	@ (80098a4 <xTaskIncrementTick+0x150>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00b      	beq.n	800979e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	603b      	str	r3, [r7, #0]
}
 8009798:	bf00      	nop
 800979a:	bf00      	nop
 800979c:	e7fd      	b.n	800979a <xTaskIncrementTick+0x46>
 800979e:	4b41      	ldr	r3, [pc, #260]	@ (80098a4 <xTaskIncrementTick+0x150>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	4b40      	ldr	r3, [pc, #256]	@ (80098a8 <xTaskIncrementTick+0x154>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a3e      	ldr	r2, [pc, #248]	@ (80098a4 <xTaskIncrementTick+0x150>)
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	4a3e      	ldr	r2, [pc, #248]	@ (80098a8 <xTaskIncrementTick+0x154>)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	4b3e      	ldr	r3, [pc, #248]	@ (80098ac <xTaskIncrementTick+0x158>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3301      	adds	r3, #1
 80097b8:	4a3c      	ldr	r2, [pc, #240]	@ (80098ac <xTaskIncrementTick+0x158>)
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	f000 fafc 	bl	8009db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097c0:	4b3b      	ldr	r3, [pc, #236]	@ (80098b0 <xTaskIncrementTick+0x15c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d349      	bcc.n	800985e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ca:	4b36      	ldr	r3, [pc, #216]	@ (80098a4 <xTaskIncrementTick+0x150>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d4:	4b36      	ldr	r3, [pc, #216]	@ (80098b0 <xTaskIncrementTick+0x15c>)
 80097d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097da:	601a      	str	r2, [r3, #0]
					break;
 80097dc:	e03f      	b.n	800985e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097de:	4b31      	ldr	r3, [pc, #196]	@ (80098a4 <xTaskIncrementTick+0x150>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d203      	bcs.n	80097fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097f6:	4a2e      	ldr	r2, [pc, #184]	@ (80098b0 <xTaskIncrementTick+0x15c>)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097fc:	e02f      	b.n	800985e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	3304      	adds	r3, #4
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe ff82 	bl	800870c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3318      	adds	r3, #24
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe ff79 	bl	800870c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981e:	4b25      	ldr	r3, [pc, #148]	@ (80098b4 <xTaskIncrementTick+0x160>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d903      	bls.n	800982e <xTaskIncrementTick+0xda>
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982a:	4a22      	ldr	r2, [pc, #136]	@ (80098b4 <xTaskIncrementTick+0x160>)
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009832:	4613      	mov	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4a1f      	ldr	r2, [pc, #124]	@ (80098b8 <xTaskIncrementTick+0x164>)
 800983c:	441a      	add	r2, r3
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7fe ff04 	bl	8008652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984e:	4b1b      	ldr	r3, [pc, #108]	@ (80098bc <xTaskIncrementTick+0x168>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009854:	429a      	cmp	r2, r3
 8009856:	d3b8      	bcc.n	80097ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800985c:	e7b5      	b.n	80097ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800985e:	4b17      	ldr	r3, [pc, #92]	@ (80098bc <xTaskIncrementTick+0x168>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009864:	4914      	ldr	r1, [pc, #80]	@ (80098b8 <xTaskIncrementTick+0x164>)
 8009866:	4613      	mov	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	440b      	add	r3, r1
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d901      	bls.n	800987a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800987a:	4b11      	ldr	r3, [pc, #68]	@ (80098c0 <xTaskIncrementTick+0x16c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d007      	beq.n	8009892 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009882:	2301      	movs	r3, #1
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	e004      	b.n	8009892 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009888:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <xTaskIncrementTick+0x170>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3301      	adds	r3, #1
 800988e:	4a0d      	ldr	r2, [pc, #52]	@ (80098c4 <xTaskIncrementTick+0x170>)
 8009890:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009892:	697b      	ldr	r3, [r7, #20]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20005a84 	.word	0x20005a84
 80098a0:	20005a60 	.word	0x20005a60
 80098a4:	20005a14 	.word	0x20005a14
 80098a8:	20005a18 	.word	0x20005a18
 80098ac:	20005a74 	.word	0x20005a74
 80098b0:	20005a7c 	.word	0x20005a7c
 80098b4:	20005a64 	.word	0x20005a64
 80098b8:	2000558c 	.word	0x2000558c
 80098bc:	20005588 	.word	0x20005588
 80098c0:	20005a70 	.word	0x20005a70
 80098c4:	20005a6c 	.word	0x20005a6c

080098c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098ce:	4b28      	ldr	r3, [pc, #160]	@ (8009970 <vTaskSwitchContext+0xa8>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098d6:	4b27      	ldr	r3, [pc, #156]	@ (8009974 <vTaskSwitchContext+0xac>)
 80098d8:	2201      	movs	r2, #1
 80098da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098dc:	e042      	b.n	8009964 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80098de:	4b25      	ldr	r3, [pc, #148]	@ (8009974 <vTaskSwitchContext+0xac>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e4:	4b24      	ldr	r3, [pc, #144]	@ (8009978 <vTaskSwitchContext+0xb0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e011      	b.n	8009910 <vTaskSwitchContext+0x48>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10b      	bne.n	800990a <vTaskSwitchContext+0x42>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	607b      	str	r3, [r7, #4]
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	e7fd      	b.n	8009906 <vTaskSwitchContext+0x3e>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3b01      	subs	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	491a      	ldr	r1, [pc, #104]	@ (800997c <vTaskSwitchContext+0xb4>)
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0e3      	beq.n	80098ec <vTaskSwitchContext+0x24>
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4a13      	ldr	r2, [pc, #76]	@ (800997c <vTaskSwitchContext+0xb4>)
 8009930:	4413      	add	r3, r2
 8009932:	60bb      	str	r3, [r7, #8]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	3308      	adds	r3, #8
 8009946:	429a      	cmp	r2, r3
 8009948:	d104      	bne.n	8009954 <vTaskSwitchContext+0x8c>
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	605a      	str	r2, [r3, #4]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	4a09      	ldr	r2, [pc, #36]	@ (8009980 <vTaskSwitchContext+0xb8>)
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	4a06      	ldr	r2, [pc, #24]	@ (8009978 <vTaskSwitchContext+0xb0>)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6013      	str	r3, [r2, #0]
}
 8009964:	bf00      	nop
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	20005a84 	.word	0x20005a84
 8009974:	20005a70 	.word	0x20005a70
 8009978:	20005a64 	.word	0x20005a64
 800997c:	2000558c 	.word	0x2000558c
 8009980:	20005588 	.word	0x20005588

08009984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10b      	bne.n	80099ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	60fb      	str	r3, [r7, #12]
}
 80099a6:	bf00      	nop
 80099a8:	bf00      	nop
 80099aa:	e7fd      	b.n	80099a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ac:	4b07      	ldr	r3, [pc, #28]	@ (80099cc <vTaskPlaceOnEventList+0x48>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3318      	adds	r3, #24
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7fe fe70 	bl	800869a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ba:	2101      	movs	r1, #1
 80099bc:	6838      	ldr	r0, [r7, #0]
 80099be:	f000 faa9 	bl	8009f14 <prvAddCurrentTaskToDelayedList>
}
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20005588 	.word	0x20005588

080099d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10b      	bne.n	80099fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	617b      	str	r3, [r7, #20]
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop
 80099f8:	e7fd      	b.n	80099f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009a24 <vTaskPlaceOnEventListRestricted+0x54>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3318      	adds	r3, #24
 8009a00:	4619      	mov	r1, r3
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7fe fe25 	bl	8008652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	68b8      	ldr	r0, [r7, #8]
 8009a18:	f000 fa7c 	bl	8009f14 <prvAddCurrentTaskToDelayedList>
	}
 8009a1c:	bf00      	nop
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20005588 	.word	0x20005588

08009a28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10b      	bne.n	8009a56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	60fb      	str	r3, [r7, #12]
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	e7fd      	b.n	8009a52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	3318      	adds	r3, #24
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fe56 	bl	800870c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a60:	4b1d      	ldr	r3, [pc, #116]	@ (8009ad8 <xTaskRemoveFromEventList+0xb0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d11d      	bne.n	8009aa4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe fe4d 	bl	800870c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a76:	4b19      	ldr	r3, [pc, #100]	@ (8009adc <xTaskRemoveFromEventList+0xb4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d903      	bls.n	8009a86 <xTaskRemoveFromEventList+0x5e>
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a82:	4a16      	ldr	r2, [pc, #88]	@ (8009adc <xTaskRemoveFromEventList+0xb4>)
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4a13      	ldr	r2, [pc, #76]	@ (8009ae0 <xTaskRemoveFromEventList+0xb8>)
 8009a94:	441a      	add	r2, r3
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f7fe fdd8 	bl	8008652 <vListInsertEnd>
 8009aa2:	e005      	b.n	8009ab0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	3318      	adds	r3, #24
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	480e      	ldr	r0, [pc, #56]	@ (8009ae4 <xTaskRemoveFromEventList+0xbc>)
 8009aac:	f7fe fdd1 	bl	8008652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae8 <xTaskRemoveFromEventList+0xc0>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d905      	bls.n	8009aca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8009aec <xTaskRemoveFromEventList+0xc4>)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	e001      	b.n	8009ace <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ace:	697b      	ldr	r3, [r7, #20]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20005a84 	.word	0x20005a84
 8009adc:	20005a64 	.word	0x20005a64
 8009ae0:	2000558c 	.word	0x2000558c
 8009ae4:	20005a1c 	.word	0x20005a1c
 8009ae8:	20005588 	.word	0x20005588
 8009aec:	20005a70 	.word	0x20005a70

08009af0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10b      	bne.n	8009b16 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	60fb      	str	r3, [r7, #12]
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	e7fd      	b.n	8009b12 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009b16:	f000 fedf 	bl	800a8d8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b1a:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <vTaskSetTimeOutState+0x48>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009b22:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <vTaskSetTimeOutState+0x4c>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009b2a:	f000 ff07 	bl	800a93c <vPortExitCritical>
}
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20005a74 	.word	0x20005a74
 8009b3c:	20005a60 	.word	0x20005a60

08009b40 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b48:	4b06      	ldr	r3, [pc, #24]	@ (8009b64 <vTaskInternalSetTimeOutState+0x24>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <vTaskInternalSetTimeOutState+0x28>)
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	605a      	str	r2, [r3, #4]
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	20005a74 	.word	0x20005a74
 8009b68:	20005a60 	.word	0x20005a60

08009b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10b      	bne.n	8009b94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	613b      	str	r3, [r7, #16]
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	e7fd      	b.n	8009b90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10b      	bne.n	8009bb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	60fb      	str	r3, [r7, #12]
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	e7fd      	b.n	8009bae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009bb2:	f000 fe91 	bl	800a8d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8009c2c <xTaskCheckForTimeOut+0xc0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bce:	d102      	bne.n	8009bd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	e023      	b.n	8009c1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b15      	ldr	r3, [pc, #84]	@ (8009c30 <xTaskCheckForTimeOut+0xc4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d007      	beq.n	8009bf2 <xTaskCheckForTimeOut+0x86>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d302      	bcc.n	8009bf2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bec:	2301      	movs	r3, #1
 8009bee:	61fb      	str	r3, [r7, #28]
 8009bf0:	e015      	b.n	8009c1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d20b      	bcs.n	8009c14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	1ad2      	subs	r2, r2, r3
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff ff99 	bl	8009b40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61fb      	str	r3, [r7, #28]
 8009c12:	e004      	b.n	8009c1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c1e:	f000 fe8d 	bl	800a93c <vPortExitCritical>

	return xReturn;
 8009c22:	69fb      	ldr	r3, [r7, #28]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3720      	adds	r7, #32
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20005a60 	.word	0x20005a60
 8009c30:	20005a74 	.word	0x20005a74

08009c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c38:	4b03      	ldr	r3, [pc, #12]	@ (8009c48 <vTaskMissedYield+0x14>)
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]
}
 8009c3e:	bf00      	nop
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	20005a70 	.word	0x20005a70

08009c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c54:	f000 f852 	bl	8009cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c58:	4b06      	ldr	r3, [pc, #24]	@ (8009c74 <prvIdleTask+0x28>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d9f9      	bls.n	8009c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c60:	4b05      	ldr	r3, [pc, #20]	@ (8009c78 <prvIdleTask+0x2c>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c70:	e7f0      	b.n	8009c54 <prvIdleTask+0x8>
 8009c72:	bf00      	nop
 8009c74:	2000558c 	.word	0x2000558c
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c82:	2300      	movs	r3, #0
 8009c84:	607b      	str	r3, [r7, #4]
 8009c86:	e00c      	b.n	8009ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4413      	add	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4a12      	ldr	r2, [pc, #72]	@ (8009cdc <prvInitialiseTaskLists+0x60>)
 8009c94:	4413      	add	r3, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fcae 	bl	80085f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b37      	cmp	r3, #55	@ 0x37
 8009ca6:	d9ef      	bls.n	8009c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ca8:	480d      	ldr	r0, [pc, #52]	@ (8009ce0 <prvInitialiseTaskLists+0x64>)
 8009caa:	f7fe fca5 	bl	80085f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cae:	480d      	ldr	r0, [pc, #52]	@ (8009ce4 <prvInitialiseTaskLists+0x68>)
 8009cb0:	f7fe fca2 	bl	80085f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cb4:	480c      	ldr	r0, [pc, #48]	@ (8009ce8 <prvInitialiseTaskLists+0x6c>)
 8009cb6:	f7fe fc9f 	bl	80085f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cba:	480c      	ldr	r0, [pc, #48]	@ (8009cec <prvInitialiseTaskLists+0x70>)
 8009cbc:	f7fe fc9c 	bl	80085f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cc0:	480b      	ldr	r0, [pc, #44]	@ (8009cf0 <prvInitialiseTaskLists+0x74>)
 8009cc2:	f7fe fc99 	bl	80085f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <prvInitialiseTaskLists+0x78>)
 8009cc8:	4a05      	ldr	r2, [pc, #20]	@ (8009ce0 <prvInitialiseTaskLists+0x64>)
 8009cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <prvInitialiseTaskLists+0x7c>)
 8009cce:	4a05      	ldr	r2, [pc, #20]	@ (8009ce4 <prvInitialiseTaskLists+0x68>)
 8009cd0:	601a      	str	r2, [r3, #0]
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	2000558c 	.word	0x2000558c
 8009ce0:	200059ec 	.word	0x200059ec
 8009ce4:	20005a00 	.word	0x20005a00
 8009ce8:	20005a1c 	.word	0x20005a1c
 8009cec:	20005a30 	.word	0x20005a30
 8009cf0:	20005a48 	.word	0x20005a48
 8009cf4:	20005a14 	.word	0x20005a14
 8009cf8:	20005a18 	.word	0x20005a18

08009cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d02:	e019      	b.n	8009d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d04:	f000 fde8 	bl	800a8d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d08:	4b10      	ldr	r3, [pc, #64]	@ (8009d4c <prvCheckTasksWaitingTermination+0x50>)
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe fcf9 	bl	800870c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d50 <prvCheckTasksWaitingTermination+0x54>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	4a0b      	ldr	r2, [pc, #44]	@ (8009d50 <prvCheckTasksWaitingTermination+0x54>)
 8009d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d24:	4b0b      	ldr	r3, [pc, #44]	@ (8009d54 <prvCheckTasksWaitingTermination+0x58>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8009d54 <prvCheckTasksWaitingTermination+0x58>)
 8009d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d2e:	f000 fe05 	bl	800a93c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f810 	bl	8009d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d38:	4b06      	ldr	r3, [pc, #24]	@ (8009d54 <prvCheckTasksWaitingTermination+0x58>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e1      	bne.n	8009d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20005a30 	.word	0x20005a30
 8009d50:	20005a5c 	.word	0x20005a5c
 8009d54:	20005a44 	.word	0x20005a44

08009d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d108      	bne.n	8009d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 ffa2 	bl	800acb8 <vPortFree>
				vPortFree( pxTCB );
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 ff9f 	bl	800acb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d7a:	e019      	b.n	8009db0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d103      	bne.n	8009d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 ff96 	bl	800acb8 <vPortFree>
	}
 8009d8c:	e010      	b.n	8009db0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d00b      	beq.n	8009db0 <prvDeleteTCB+0x58>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	60fb      	str	r3, [r7, #12]
}
 8009daa:	bf00      	nop
 8009dac:	bf00      	nop
 8009dae:	e7fd      	b.n	8009dac <prvDeleteTCB+0x54>
	}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8009df0 <prvResetNextTaskUnblockTime+0x38>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009df4 <prvResetNextTaskUnblockTime+0x3c>)
 8009dca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009dce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dd0:	e008      	b.n	8009de4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd2:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <prvResetNextTaskUnblockTime+0x38>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4a04      	ldr	r2, [pc, #16]	@ (8009df4 <prvResetNextTaskUnblockTime+0x3c>)
 8009de2:	6013      	str	r3, [r2, #0]
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20005a14 	.word	0x20005a14
 8009df4:	20005a7c 	.word	0x20005a7c

08009df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8009e2c <xTaskGetSchedulerState+0x34>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d102      	bne.n	8009e0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e06:	2301      	movs	r3, #1
 8009e08:	607b      	str	r3, [r7, #4]
 8009e0a:	e008      	b.n	8009e1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e0c:	4b08      	ldr	r3, [pc, #32]	@ (8009e30 <xTaskGetSchedulerState+0x38>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d102      	bne.n	8009e1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e14:	2302      	movs	r3, #2
 8009e16:	607b      	str	r3, [r7, #4]
 8009e18:	e001      	b.n	8009e1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e1e:	687b      	ldr	r3, [r7, #4]
	}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	20005a68 	.word	0x20005a68
 8009e30:	20005a84 	.word	0x20005a84

08009e34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d058      	beq.n	8009efc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f08 <xTaskPriorityDisinherit+0xd4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d00b      	beq.n	8009e6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	60fb      	str	r3, [r7, #12]
}
 8009e66:	bf00      	nop
 8009e68:	bf00      	nop
 8009e6a:	e7fd      	b.n	8009e68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10b      	bne.n	8009e8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	60bb      	str	r3, [r7, #8]
}
 8009e86:	bf00      	nop
 8009e88:	bf00      	nop
 8009e8a:	e7fd      	b.n	8009e88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e90:	1e5a      	subs	r2, r3, #1
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d02c      	beq.n	8009efc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d128      	bne.n	8009efc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fc2c 	bl	800870c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8009f0c <xTaskPriorityDisinherit+0xd8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d903      	bls.n	8009edc <xTaskPriorityDisinherit+0xa8>
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8009f0c <xTaskPriorityDisinherit+0xd8>)
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4a09      	ldr	r2, [pc, #36]	@ (8009f10 <xTaskPriorityDisinherit+0xdc>)
 8009eea:	441a      	add	r2, r3
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7fe fbad 	bl	8008652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009efc:	697b      	ldr	r3, [r7, #20]
	}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20005588 	.word	0x20005588
 8009f0c:	20005a64 	.word	0x20005a64
 8009f10:	2000558c 	.word	0x2000558c

08009f14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f1e:	4b21      	ldr	r3, [pc, #132]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f24:	4b20      	ldr	r3, [pc, #128]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fbee 	bl	800870c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f36:	d10a      	bne.n	8009f4e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d007      	beq.n	8009f4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4819      	ldr	r0, [pc, #100]	@ (8009fac <prvAddCurrentTaskToDelayedList+0x98>)
 8009f48:	f7fe fb83 	bl	8008652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f4c:	e026      	b.n	8009f9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f56:	4b14      	ldr	r3, [pc, #80]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d209      	bcs.n	8009f7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f66:	4b12      	ldr	r3, [pc, #72]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7fe fb91 	bl	800869a <vListInsert>
}
 8009f78:	e010      	b.n	8009f9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4619      	mov	r1, r3
 8009f86:	4610      	mov	r0, r2
 8009f88:	f7fe fb87 	bl	800869a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d202      	bcs.n	8009f9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f96:	4a08      	ldr	r2, [pc, #32]	@ (8009fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	6013      	str	r3, [r2, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20005a60 	.word	0x20005a60
 8009fa8:	20005588 	.word	0x20005588
 8009fac:	20005a48 	.word	0x20005a48
 8009fb0:	20005a18 	.word	0x20005a18
 8009fb4:	20005a14 	.word	0x20005a14
 8009fb8:	20005a7c 	.word	0x20005a7c

08009fbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08a      	sub	sp, #40	@ 0x28
 8009fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fc6:	f000 fb13 	bl	800a5f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fca:	4b1d      	ldr	r3, [pc, #116]	@ (800a040 <xTimerCreateTimerTask+0x84>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d021      	beq.n	800a016 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fda:	1d3a      	adds	r2, r7, #4
 8009fdc:	f107 0108 	add.w	r1, r7, #8
 8009fe0:	f107 030c 	add.w	r3, r7, #12
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe faed 	bl	80085c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	9202      	str	r2, [sp, #8]
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	460a      	mov	r2, r1
 8009ffc:	4911      	ldr	r1, [pc, #68]	@ (800a044 <xTimerCreateTimerTask+0x88>)
 8009ffe:	4812      	ldr	r0, [pc, #72]	@ (800a048 <xTimerCreateTimerTask+0x8c>)
 800a000:	f7ff f8a8 	bl	8009154 <xTaskCreateStatic>
 800a004:	4603      	mov	r3, r0
 800a006:	4a11      	ldr	r2, [pc, #68]	@ (800a04c <xTimerCreateTimerTask+0x90>)
 800a008:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a00a:	4b10      	ldr	r3, [pc, #64]	@ (800a04c <xTimerCreateTimerTask+0x90>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a012:	2301      	movs	r3, #1
 800a014:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10b      	bne.n	800a034 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	613b      	str	r3, [r7, #16]
}
 800a02e:	bf00      	nop
 800a030:	bf00      	nop
 800a032:	e7fd      	b.n	800a030 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a034:	697b      	ldr	r3, [r7, #20]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20005ab8 	.word	0x20005ab8
 800a044:	08019e74 	.word	0x08019e74
 800a048:	0800a189 	.word	0x0800a189
 800a04c:	20005abc 	.word	0x20005abc

0800a050 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	@ 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a05e:	2300      	movs	r3, #0
 800a060:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10b      	bne.n	800a080 <xTimerGenericCommand+0x30>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	623b      	str	r3, [r7, #32]
}
 800a07a:	bf00      	nop
 800a07c:	bf00      	nop
 800a07e:	e7fd      	b.n	800a07c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a080:	4b19      	ldr	r3, [pc, #100]	@ (800a0e8 <xTimerGenericCommand+0x98>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d02a      	beq.n	800a0de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b05      	cmp	r3, #5
 800a098:	dc18      	bgt.n	800a0cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a09a:	f7ff fead 	bl	8009df8 <xTaskGetSchedulerState>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d109      	bne.n	800a0b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0a4:	4b10      	ldr	r3, [pc, #64]	@ (800a0e8 <xTimerGenericCommand+0x98>)
 800a0a6:	6818      	ldr	r0, [r3, #0]
 800a0a8:	f107 0110 	add.w	r1, r7, #16
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b0:	f7fe fc60 	bl	8008974 <xQueueGenericSend>
 800a0b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0b6:	e012      	b.n	800a0de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e8 <xTimerGenericCommand+0x98>)
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	f107 0110 	add.w	r1, r7, #16
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f7fe fc56 	bl	8008974 <xQueueGenericSend>
 800a0c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0ca:	e008      	b.n	800a0de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0cc:	4b06      	ldr	r3, [pc, #24]	@ (800a0e8 <xTimerGenericCommand+0x98>)
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	f107 0110 	add.w	r1, r7, #16
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	f7fe fd4e 	bl	8008b78 <xQueueGenericSendFromISR>
 800a0dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3728      	adds	r7, #40	@ 0x28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20005ab8 	.word	0x20005ab8

0800a0ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f6:	4b23      	ldr	r3, [pc, #140]	@ (800a184 <prvProcessExpiredTimer+0x98>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	3304      	adds	r3, #4
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fb01 	bl	800870c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d023      	beq.n	800a160 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	699a      	ldr	r2, [r3, #24]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	18d1      	adds	r1, r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	6978      	ldr	r0, [r7, #20]
 800a126:	f000 f8d5 	bl	800a2d4 <prvInsertTimerInActiveList>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d020      	beq.n	800a172 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a130:	2300      	movs	r3, #0
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	2100      	movs	r1, #0
 800a13a:	6978      	ldr	r0, [r7, #20]
 800a13c:	f7ff ff88 	bl	800a050 <xTimerGenericCommand>
 800a140:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d114      	bne.n	800a172 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	60fb      	str	r3, [r7, #12]
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a166:	f023 0301 	bic.w	r3, r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	4798      	blx	r3
}
 800a17a:	bf00      	nop
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20005ab0 	.word	0x20005ab0

0800a188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a190:	f107 0308 	add.w	r3, r7, #8
 800a194:	4618      	mov	r0, r3
 800a196:	f000 f859 	bl	800a24c <prvGetNextExpireTime>
 800a19a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f805 	bl	800a1b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1a6:	f000 f8d7 	bl	800a358 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1aa:	bf00      	nop
 800a1ac:	e7f0      	b.n	800a190 <prvTimerTask+0x8>
	...

0800a1b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ba:	f7ff fa0f 	bl	80095dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1be:	f107 0308 	add.w	r3, r7, #8
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f866 	bl	800a294 <prvSampleTimeNow>
 800a1c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d130      	bne.n	800a232 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <prvProcessTimerOrBlockTask+0x3c>
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d806      	bhi.n	800a1ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1de:	f7ff fa0b 	bl	80095f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1e2:	68f9      	ldr	r1, [r7, #12]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff ff81 	bl	800a0ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ea:	e024      	b.n	800a236 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d008      	beq.n	800a204 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1f2:	4b13      	ldr	r3, [pc, #76]	@ (800a240 <prvProcessTimerOrBlockTask+0x90>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <prvProcessTimerOrBlockTask+0x50>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e000      	b.n	800a202 <prvProcessTimerOrBlockTask+0x52>
 800a200:	2300      	movs	r3, #0
 800a202:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a204:	4b0f      	ldr	r3, [pc, #60]	@ (800a244 <prvProcessTimerOrBlockTask+0x94>)
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	f7fe ff6b 	bl	80090ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a216:	f7ff f9ef 	bl	80095f8 <xTaskResumeAll>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a220:	4b09      	ldr	r3, [pc, #36]	@ (800a248 <prvProcessTimerOrBlockTask+0x98>)
 800a222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
}
 800a230:	e001      	b.n	800a236 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a232:	f7ff f9e1 	bl	80095f8 <xTaskResumeAll>
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20005ab4 	.word	0x20005ab4
 800a244:	20005ab8 	.word	0x20005ab8
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a254:	4b0e      	ldr	r3, [pc, #56]	@ (800a290 <prvGetNextExpireTime+0x44>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <prvGetNextExpireTime+0x16>
 800a25e:	2201      	movs	r2, #1
 800a260:	e000      	b.n	800a264 <prvGetNextExpireTime+0x18>
 800a262:	2200      	movs	r2, #0
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d105      	bne.n	800a27c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a270:	4b07      	ldr	r3, [pc, #28]	@ (800a290 <prvGetNextExpireTime+0x44>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e001      	b.n	800a280 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a280:	68fb      	ldr	r3, [r7, #12]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20005ab0 	.word	0x20005ab0

0800a294 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a29c:	f7ff fa4a 	bl	8009734 <xTaskGetTickCount>
 800a2a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d0 <prvSampleTimeNow+0x3c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d205      	bcs.n	800a2b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2ac:	f000 f93a 	bl	800a524 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	e002      	b.n	800a2be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2be:	4a04      	ldr	r2, [pc, #16]	@ (800a2d0 <prvSampleTimeNow+0x3c>)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20005ac0 	.word	0x20005ac0

0800a2d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d812      	bhi.n	800a320 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	1ad2      	subs	r2, r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	429a      	cmp	r2, r3
 800a306:	d302      	bcc.n	800a30e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a308:	2301      	movs	r3, #1
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	e01b      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a30e:	4b10      	ldr	r3, [pc, #64]	@ (800a350 <prvInsertTimerInActiveList+0x7c>)
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3304      	adds	r3, #4
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f7fe f9be 	bl	800869a <vListInsert>
 800a31e:	e012      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d206      	bcs.n	800a336 <prvInsertTimerInActiveList+0x62>
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d302      	bcc.n	800a336 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a330:	2301      	movs	r3, #1
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	e007      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a336:	4b07      	ldr	r3, [pc, #28]	@ (800a354 <prvInsertTimerInActiveList+0x80>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f7fe f9aa 	bl	800869a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a346:	697b      	ldr	r3, [r7, #20]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20005ab4 	.word	0x20005ab4
 800a354:	20005ab0 	.word	0x20005ab0

0800a358 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08e      	sub	sp, #56	@ 0x38
 800a35c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a35e:	e0ce      	b.n	800a4fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	da19      	bge.n	800a39a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a366:	1d3b      	adds	r3, r7, #4
 800a368:	3304      	adds	r3, #4
 800a36a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10b      	bne.n	800a38a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	61fb      	str	r3, [r7, #28]
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	e7fd      	b.n	800a386 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a390:	6850      	ldr	r0, [r2, #4]
 800a392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a394:	6892      	ldr	r2, [r2, #8]
 800a396:	4611      	mov	r1, r2
 800a398:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f2c0 80ae 	blt.w	800a4fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe f9aa 	bl	800870c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff ff6a 	bl	800a294 <prvSampleTimeNow>
 800a3c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b09      	cmp	r3, #9
 800a3c6:	f200 8097 	bhi.w	800a4f8 <prvProcessReceivedCommands+0x1a0>
 800a3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d0 <prvProcessReceivedCommands+0x78>)
 800a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d0:	0800a3f9 	.word	0x0800a3f9
 800a3d4:	0800a3f9 	.word	0x0800a3f9
 800a3d8:	0800a3f9 	.word	0x0800a3f9
 800a3dc:	0800a46f 	.word	0x0800a46f
 800a3e0:	0800a483 	.word	0x0800a483
 800a3e4:	0800a4cf 	.word	0x0800a4cf
 800a3e8:	0800a3f9 	.word	0x0800a3f9
 800a3ec:	0800a3f9 	.word	0x0800a3f9
 800a3f0:	0800a46f 	.word	0x0800a46f
 800a3f4:	0800a483 	.word	0x0800a483
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3fe:	f043 0301 	orr.w	r3, r3, #1
 800a402:	b2da      	uxtb	r2, r3
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	18d1      	adds	r1, r2, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a418:	f7ff ff5c 	bl	800a2d4 <prvInsertTimerInActiveList>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d06c      	beq.n	800a4fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a428:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d061      	beq.n	800a4fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	441a      	add	r2, r3
 800a440:	2300      	movs	r3, #0
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	2300      	movs	r3, #0
 800a446:	2100      	movs	r1, #0
 800a448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a44a:	f7ff fe01 	bl	800a050 <xTimerGenericCommand>
 800a44e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d152      	bne.n	800a4fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	61bb      	str	r3, [r7, #24]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a474:	f023 0301 	bic.w	r3, r3, #1
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a480:	e03d      	b.n	800a4fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	b2da      	uxtb	r2, r3
 800a48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a490:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a498:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10b      	bne.n	800a4ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	617b      	str	r3, [r7, #20]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	18d1      	adds	r1, r2, r3
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4c8:	f7ff ff04 	bl	800a2d4 <prvInsertTimerInActiveList>
					break;
 800a4cc:	e017      	b.n	800a4fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d103      	bne.n	800a4e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4de:	f000 fbeb 	bl	800acb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4e2:	e00c      	b.n	800a4fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4f6:	e002      	b.n	800a4fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a4f8:	bf00      	nop
 800a4fa:	e000      	b.n	800a4fe <prvProcessReceivedCommands+0x1a6>
					break;
 800a4fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4fe:	4b08      	ldr	r3, [pc, #32]	@ (800a520 <prvProcessReceivedCommands+0x1c8>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	1d39      	adds	r1, r7, #4
 800a504:	2200      	movs	r2, #0
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fbd4 	bl	8008cb4 <xQueueReceive>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f47f af26 	bne.w	800a360 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop
 800a518:	3730      	adds	r7, #48	@ 0x30
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	20005ab8 	.word	0x20005ab8

0800a524 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a52a:	e049      	b.n	800a5c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a52c:	4b2e      	ldr	r3, [pc, #184]	@ (800a5e8 <prvSwitchTimerLists+0xc4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a536:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e8 <prvSwitchTimerLists+0xc4>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3304      	adds	r3, #4
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe f8e1 	bl	800870c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d02f      	beq.n	800a5c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	4413      	add	r3, r2
 800a568:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d90e      	bls.n	800a590 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a57e:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e8 <prvSwitchTimerLists+0xc4>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3304      	adds	r3, #4
 800a586:	4619      	mov	r1, r3
 800a588:	4610      	mov	r0, r2
 800a58a:	f7fe f886 	bl	800869a <vListInsert>
 800a58e:	e017      	b.n	800a5c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a590:	2300      	movs	r3, #0
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	2100      	movs	r1, #0
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fd58 	bl	800a050 <xTimerGenericCommand>
 800a5a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10b      	bne.n	800a5c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	603b      	str	r3, [r7, #0]
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5c0:	4b09      	ldr	r3, [pc, #36]	@ (800a5e8 <prvSwitchTimerLists+0xc4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1b0      	bne.n	800a52c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5ca:	4b07      	ldr	r3, [pc, #28]	@ (800a5e8 <prvSwitchTimerLists+0xc4>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5d0:	4b06      	ldr	r3, [pc, #24]	@ (800a5ec <prvSwitchTimerLists+0xc8>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a04      	ldr	r2, [pc, #16]	@ (800a5e8 <prvSwitchTimerLists+0xc4>)
 800a5d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5d8:	4a04      	ldr	r2, [pc, #16]	@ (800a5ec <prvSwitchTimerLists+0xc8>)
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	6013      	str	r3, [r2, #0]
}
 800a5de:	bf00      	nop
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20005ab0 	.word	0x20005ab0
 800a5ec:	20005ab4 	.word	0x20005ab4

0800a5f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5f6:	f000 f96f 	bl	800a8d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5fa:	4b15      	ldr	r3, [pc, #84]	@ (800a650 <prvCheckForValidListAndQueue+0x60>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d120      	bne.n	800a644 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a602:	4814      	ldr	r0, [pc, #80]	@ (800a654 <prvCheckForValidListAndQueue+0x64>)
 800a604:	f7fd fff8 	bl	80085f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a608:	4813      	ldr	r0, [pc, #76]	@ (800a658 <prvCheckForValidListAndQueue+0x68>)
 800a60a:	f7fd fff5 	bl	80085f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a60e:	4b13      	ldr	r3, [pc, #76]	@ (800a65c <prvCheckForValidListAndQueue+0x6c>)
 800a610:	4a10      	ldr	r2, [pc, #64]	@ (800a654 <prvCheckForValidListAndQueue+0x64>)
 800a612:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a614:	4b12      	ldr	r3, [pc, #72]	@ (800a660 <prvCheckForValidListAndQueue+0x70>)
 800a616:	4a10      	ldr	r2, [pc, #64]	@ (800a658 <prvCheckForValidListAndQueue+0x68>)
 800a618:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a61a:	2300      	movs	r3, #0
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	4b11      	ldr	r3, [pc, #68]	@ (800a664 <prvCheckForValidListAndQueue+0x74>)
 800a620:	4a11      	ldr	r2, [pc, #68]	@ (800a668 <prvCheckForValidListAndQueue+0x78>)
 800a622:	2110      	movs	r1, #16
 800a624:	200a      	movs	r0, #10
 800a626:	f7fe f905 	bl	8008834 <xQueueGenericCreateStatic>
 800a62a:	4603      	mov	r3, r0
 800a62c:	4a08      	ldr	r2, [pc, #32]	@ (800a650 <prvCheckForValidListAndQueue+0x60>)
 800a62e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a630:	4b07      	ldr	r3, [pc, #28]	@ (800a650 <prvCheckForValidListAndQueue+0x60>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d005      	beq.n	800a644 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a638:	4b05      	ldr	r3, [pc, #20]	@ (800a650 <prvCheckForValidListAndQueue+0x60>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	490b      	ldr	r1, [pc, #44]	@ (800a66c <prvCheckForValidListAndQueue+0x7c>)
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe fd2a 	bl	8009098 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a644:	f000 f97a 	bl	800a93c <vPortExitCritical>
}
 800a648:	bf00      	nop
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20005ab8 	.word	0x20005ab8
 800a654:	20005a88 	.word	0x20005a88
 800a658:	20005a9c 	.word	0x20005a9c
 800a65c:	20005ab0 	.word	0x20005ab0
 800a660:	20005ab4 	.word	0x20005ab4
 800a664:	20005b64 	.word	0x20005b64
 800a668:	20005ac4 	.word	0x20005ac4
 800a66c:	08019e7c 	.word	0x08019e7c

0800a670 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3b04      	subs	r3, #4
 800a680:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3b04      	subs	r3, #4
 800a68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	f023 0201 	bic.w	r2, r3, #1
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3b04      	subs	r3, #4
 800a69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6a0:	4a0c      	ldr	r2, [pc, #48]	@ (800a6d4 <pxPortInitialiseStack+0x64>)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3b14      	subs	r3, #20
 800a6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f06f 0202 	mvn.w	r2, #2
 800a6be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3b20      	subs	r3, #32
 800a6c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	0800a6d9 	.word	0x0800a6d9

0800a6d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6e2:	4b13      	ldr	r3, [pc, #76]	@ (800a730 <prvTaskExitError+0x58>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6ea:	d00b      	beq.n	800a704 <prvTaskExitError+0x2c>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	60fb      	str	r3, [r7, #12]
}
 800a6fe:	bf00      	nop
 800a700:	bf00      	nop
 800a702:	e7fd      	b.n	800a700 <prvTaskExitError+0x28>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	60bb      	str	r3, [r7, #8]
}
 800a716:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a718:	bf00      	nop
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0fc      	beq.n	800a71a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20000010 	.word	0x20000010
	...

0800a740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a740:	4b07      	ldr	r3, [pc, #28]	@ (800a760 <pxCurrentTCBConst2>)
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	6808      	ldr	r0, [r1, #0]
 800a746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	f380 8809 	msr	PSP, r0
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f04f 0000 	mov.w	r0, #0
 800a756:	f380 8811 	msr	BASEPRI, r0
 800a75a:	4770      	bx	lr
 800a75c:	f3af 8000 	nop.w

0800a760 <pxCurrentTCBConst2>:
 800a760:	20005588 	.word	0x20005588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop

0800a768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a768:	4808      	ldr	r0, [pc, #32]	@ (800a78c <prvPortStartFirstTask+0x24>)
 800a76a:	6800      	ldr	r0, [r0, #0]
 800a76c:	6800      	ldr	r0, [r0, #0]
 800a76e:	f380 8808 	msr	MSP, r0
 800a772:	f04f 0000 	mov.w	r0, #0
 800a776:	f380 8814 	msr	CONTROL, r0
 800a77a:	b662      	cpsie	i
 800a77c:	b661      	cpsie	f
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	df00      	svc	0
 800a788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a78a:	bf00      	nop
 800a78c:	e000ed08 	.word	0xe000ed08

0800a790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a796:	4b47      	ldr	r3, [pc, #284]	@ (800a8b4 <xPortStartScheduler+0x124>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a47      	ldr	r2, [pc, #284]	@ (800a8b8 <xPortStartScheduler+0x128>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d10b      	bne.n	800a7b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	613b      	str	r3, [r7, #16]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b4 <xPortStartScheduler+0x124>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a8bc <xPortStartScheduler+0x12c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10b      	bne.n	800a7da <xPortStartScheduler+0x4a>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	60fb      	str	r3, [r7, #12]
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7da:	4b39      	ldr	r3, [pc, #228]	@ (800a8c0 <xPortStartScheduler+0x130>)
 800a7dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	22ff      	movs	r2, #255	@ 0xff
 800a7ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	4b31      	ldr	r3, [pc, #196]	@ (800a8c4 <xPortStartScheduler+0x134>)
 800a800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a802:	4b31      	ldr	r3, [pc, #196]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a804:	2207      	movs	r2, #7
 800a806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a808:	e009      	b.n	800a81e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a80a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3b01      	subs	r3, #1
 800a810:	4a2d      	ldr	r2, [pc, #180]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a826:	2b80      	cmp	r3, #128	@ 0x80
 800a828:	d0ef      	beq.n	800a80a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a82a:	4b27      	ldr	r3, [pc, #156]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f1c3 0307 	rsb	r3, r3, #7
 800a832:	2b04      	cmp	r3, #4
 800a834:	d00b      	beq.n	800a84e <xPortStartScheduler+0xbe>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60bb      	str	r3, [r7, #8]
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	e7fd      	b.n	800a84a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a84e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	4a1c      	ldr	r2, [pc, #112]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a858:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a860:	4a19      	ldr	r2, [pc, #100]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	b2da      	uxtb	r2, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a86c:	4b17      	ldr	r3, [pc, #92]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a16      	ldr	r2, [pc, #88]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a878:	4b14      	ldr	r3, [pc, #80]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a13      	ldr	r2, [pc, #76]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a87e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a884:	f000 f8da 	bl	800aa3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a888:	4b11      	ldr	r3, [pc, #68]	@ (800a8d0 <xPortStartScheduler+0x140>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a88e:	f000 f8f9 	bl	800aa84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a892:	4b10      	ldr	r3, [pc, #64]	@ (800a8d4 <xPortStartScheduler+0x144>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a0f      	ldr	r2, [pc, #60]	@ (800a8d4 <xPortStartScheduler+0x144>)
 800a898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a89c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a89e:	f7ff ff63 	bl	800a768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8a2:	f7ff f811 	bl	80098c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a8a6:	f7ff ff17 	bl	800a6d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	e000ed00 	.word	0xe000ed00
 800a8b8:	410fc271 	.word	0x410fc271
 800a8bc:	410fc270 	.word	0x410fc270
 800a8c0:	e000e400 	.word	0xe000e400
 800a8c4:	20005bb4 	.word	0x20005bb4
 800a8c8:	20005bb8 	.word	0x20005bb8
 800a8cc:	e000ed20 	.word	0xe000ed20
 800a8d0:	20000010 	.word	0x20000010
 800a8d4:	e000ef34 	.word	0xe000ef34

0800a8d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
}
 800a8f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8f2:	4b10      	ldr	r3, [pc, #64]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d110      	bne.n	800a926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a904:	4b0c      	ldr	r3, [pc, #48]	@ (800a938 <vPortEnterCritical+0x60>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00b      	beq.n	800a926 <vPortEnterCritical+0x4e>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	603b      	str	r3, [r7, #0]
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	e7fd      	b.n	800a922 <vPortEnterCritical+0x4a>
	}
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	20000010 	.word	0x20000010
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a942:	4b12      	ldr	r3, [pc, #72]	@ (800a98c <vPortExitCritical+0x50>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10b      	bne.n	800a962 <vPortExitCritical+0x26>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	607b      	str	r3, [r7, #4]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a962:	4b0a      	ldr	r3, [pc, #40]	@ (800a98c <vPortExitCritical+0x50>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a08      	ldr	r2, [pc, #32]	@ (800a98c <vPortExitCritical+0x50>)
 800a96a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a96c:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <vPortExitCritical+0x50>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d105      	bne.n	800a980 <vPortExitCritical+0x44>
 800a974:	2300      	movs	r3, #0
 800a976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f383 8811 	msr	BASEPRI, r3
}
 800a97e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	20000010 	.word	0x20000010

0800a990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b15      	ldr	r3, [pc, #84]	@ (800a9f0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f01e 0f10 	tst.w	lr, #16
 800a9a0:	bf08      	it	eq
 800a9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a9b4:	f380 8811 	msr	BASEPRI, r0
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f7fe ff82 	bl	80098c8 <vTaskSwitchContext>
 800a9c4:	f04f 0000 	mov.w	r0, #0
 800a9c8:	f380 8811 	msr	BASEPRI, r0
 800a9cc:	bc09      	pop	{r0, r3}
 800a9ce:	6819      	ldr	r1, [r3, #0]
 800a9d0:	6808      	ldr	r0, [r1, #0]
 800a9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d6:	f01e 0f10 	tst.w	lr, #16
 800a9da:	bf08      	it	eq
 800a9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9e0:	f380 8809 	msr	PSP, r0
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	f3af 8000 	nop.w

0800a9f0 <pxCurrentTCBConst>:
 800a9f0:	20005588 	.word	0x20005588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	607b      	str	r3, [r7, #4]
}
 800aa10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa12:	f7fe fe9f 	bl	8009754 <xTaskIncrementTick>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <xPortSysTickHandler+0x40>)
 800aa1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	2300      	movs	r3, #0
 800aa26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f383 8811 	msr	BASEPRI, r3
}
 800aa2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa40:	4b0b      	ldr	r3, [pc, #44]	@ (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa46:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <vPortSetupTimerInterrupt+0x38>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <vPortSetupTimerInterrupt+0x3c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	@ (800aa7c <vPortSetupTimerInterrupt+0x40>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	099b      	lsrs	r3, r3, #6
 800aa58:	4a09      	ldr	r2, [pc, #36]	@ (800aa80 <vPortSetupTimerInterrupt+0x44>)
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa5e:	4b04      	ldr	r3, [pc, #16]	@ (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	e000e010 	.word	0xe000e010
 800aa74:	e000e018 	.word	0xe000e018
 800aa78:	20000004 	.word	0x20000004
 800aa7c:	10624dd3 	.word	0x10624dd3
 800aa80:	e000e014 	.word	0xe000e014

0800aa84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa94 <vPortEnableVFP+0x10>
 800aa88:	6801      	ldr	r1, [r0, #0]
 800aa8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa8e:	6001      	str	r1, [r0, #0]
 800aa90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa92:	bf00      	nop
 800aa94:	e000ed88 	.word	0xe000ed88

0800aa98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa9e:	f3ef 8305 	mrs	r3, IPSR
 800aaa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b0f      	cmp	r3, #15
 800aaa8:	d915      	bls.n	800aad6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaaa:	4a18      	ldr	r2, [pc, #96]	@ (800ab0c <vPortValidateInterruptPriority+0x74>)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aab4:	4b16      	ldr	r3, [pc, #88]	@ (800ab10 <vPortValidateInterruptPriority+0x78>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	7afa      	ldrb	r2, [r7, #11]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d20b      	bcs.n	800aad6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	e7fd      	b.n	800aad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aad6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab14 <vPortValidateInterruptPriority+0x7c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aade:	4b0e      	ldr	r3, [pc, #56]	@ (800ab18 <vPortValidateInterruptPriority+0x80>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d90b      	bls.n	800aafe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	603b      	str	r3, [r7, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <vPortValidateInterruptPriority+0x62>
	}
 800aafe:	bf00      	nop
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	e000e3f0 	.word	0xe000e3f0
 800ab10:	20005bb4 	.word	0x20005bb4
 800ab14:	e000ed0c 	.word	0xe000ed0c
 800ab18:	20005bb8 	.word	0x20005bb8

0800ab1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	@ 0x28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab28:	f7fe fd58 	bl	80095dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab2c:	4b5c      	ldr	r3, [pc, #368]	@ (800aca0 <pvPortMalloc+0x184>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab34:	f000 f924 	bl	800ad80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab38:	4b5a      	ldr	r3, [pc, #360]	@ (800aca4 <pvPortMalloc+0x188>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f040 8095 	bne.w	800ac70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01e      	beq.n	800ab8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d015      	beq.n	800ab8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f023 0307 	bic.w	r3, r3, #7
 800ab64:	3308      	adds	r3, #8
 800ab66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00b      	beq.n	800ab8a <pvPortMalloc+0x6e>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	617b      	str	r3, [r7, #20]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d06f      	beq.n	800ac70 <pvPortMalloc+0x154>
 800ab90:	4b45      	ldr	r3, [pc, #276]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d86a      	bhi.n	800ac70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab9a:	4b44      	ldr	r3, [pc, #272]	@ (800acac <pvPortMalloc+0x190>)
 800ab9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab9e:	4b43      	ldr	r3, [pc, #268]	@ (800acac <pvPortMalloc+0x190>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aba4:	e004      	b.n	800abb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d903      	bls.n	800abc2 <pvPortMalloc+0xa6>
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1f1      	bne.n	800aba6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abc2:	4b37      	ldr	r3, [pc, #220]	@ (800aca0 <pvPortMalloc+0x184>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abc8:	429a      	cmp	r2, r3
 800abca:	d051      	beq.n	800ac70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2208      	movs	r2, #8
 800abd2:	4413      	add	r3, r2
 800abd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	1ad2      	subs	r2, r2, r3
 800abe6:	2308      	movs	r3, #8
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	429a      	cmp	r2, r3
 800abec:	d920      	bls.n	800ac30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4413      	add	r3, r2
 800abf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <pvPortMalloc+0xfc>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	613b      	str	r3, [r7, #16]
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	1ad2      	subs	r2, r2, r3
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac2a:	69b8      	ldr	r0, [r7, #24]
 800ac2c:	f000 f90a 	bl	800ae44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac30:	4b1d      	ldr	r3, [pc, #116]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	4b1b      	ldr	r3, [pc, #108]	@ (800acb0 <pvPortMalloc+0x194>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d203      	bcs.n	800ac52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac4a:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <pvPortMalloc+0x194>)
 800ac50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b13      	ldr	r3, [pc, #76]	@ (800aca4 <pvPortMalloc+0x188>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac66:	4b13      	ldr	r3, [pc, #76]	@ (800acb4 <pvPortMalloc+0x198>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	4a11      	ldr	r2, [pc, #68]	@ (800acb4 <pvPortMalloc+0x198>)
 800ac6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac70:	f7fe fcc2 	bl	80095f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00b      	beq.n	800ac96 <pvPortMalloc+0x17a>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60fb      	str	r3, [r7, #12]
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <pvPortMalloc+0x176>
	return pvReturn;
 800ac96:	69fb      	ldr	r3, [r7, #28]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3728      	adds	r7, #40	@ 0x28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	200067c4 	.word	0x200067c4
 800aca4:	200067d8 	.word	0x200067d8
 800aca8:	200067c8 	.word	0x200067c8
 800acac:	200067bc 	.word	0x200067bc
 800acb0:	200067cc 	.word	0x200067cc
 800acb4:	200067d0 	.word	0x200067d0

0800acb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d04f      	beq.n	800ad6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acca:	2308      	movs	r3, #8
 800accc:	425b      	negs	r3, r3
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4413      	add	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	4b25      	ldr	r3, [pc, #148]	@ (800ad74 <vPortFree+0xbc>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4013      	ands	r3, r2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10b      	bne.n	800acfe <vPortFree+0x46>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60fb      	str	r3, [r7, #12]
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	e7fd      	b.n	800acfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <vPortFree+0x66>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60bb      	str	r3, [r7, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	4b14      	ldr	r3, [pc, #80]	@ (800ad74 <vPortFree+0xbc>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4013      	ands	r3, r2
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01e      	beq.n	800ad6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11a      	bne.n	800ad6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	4b0e      	ldr	r3, [pc, #56]	@ (800ad74 <vPortFree+0xbc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	43db      	mvns	r3, r3
 800ad3e:	401a      	ands	r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad44:	f7fe fc4a 	bl	80095dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad78 <vPortFree+0xc0>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4413      	add	r3, r2
 800ad52:	4a09      	ldr	r2, [pc, #36]	@ (800ad78 <vPortFree+0xc0>)
 800ad54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad56:	6938      	ldr	r0, [r7, #16]
 800ad58:	f000 f874 	bl	800ae44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad5c:	4b07      	ldr	r3, [pc, #28]	@ (800ad7c <vPortFree+0xc4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3301      	adds	r3, #1
 800ad62:	4a06      	ldr	r2, [pc, #24]	@ (800ad7c <vPortFree+0xc4>)
 800ad64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad66:	f7fe fc47 	bl	80095f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad6a:	bf00      	nop
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	200067d8 	.word	0x200067d8
 800ad78:	200067c8 	.word	0x200067c8
 800ad7c:	200067d4 	.word	0x200067d4

0800ad80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ad8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad8c:	4b27      	ldr	r3, [pc, #156]	@ (800ae2c <prvHeapInit+0xac>)
 800ad8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00c      	beq.n	800adb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3307      	adds	r3, #7
 800ad9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	4a1f      	ldr	r2, [pc, #124]	@ (800ae2c <prvHeapInit+0xac>)
 800adb0:	4413      	add	r3, r2
 800adb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae30 <prvHeapInit+0xb0>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adbe:	4b1c      	ldr	r3, [pc, #112]	@ (800ae30 <prvHeapInit+0xb0>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	4413      	add	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adcc:	2208      	movs	r2, #8
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0307 	bic.w	r3, r3, #7
 800adda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4a15      	ldr	r2, [pc, #84]	@ (800ae34 <prvHeapInit+0xb4>)
 800ade0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ade2:	4b14      	ldr	r3, [pc, #80]	@ (800ae34 <prvHeapInit+0xb4>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2200      	movs	r2, #0
 800ade8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adea:	4b12      	ldr	r3, [pc, #72]	@ (800ae34 <prvHeapInit+0xb4>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2200      	movs	r2, #0
 800adf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	1ad2      	subs	r2, r2, r3
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae00:	4b0c      	ldr	r3, [pc, #48]	@ (800ae34 <prvHeapInit+0xb4>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae38 <prvHeapInit+0xb8>)
 800ae0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4a09      	ldr	r2, [pc, #36]	@ (800ae3c <prvHeapInit+0xbc>)
 800ae16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae18:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <prvHeapInit+0xc0>)
 800ae1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae1e:	601a      	str	r2, [r3, #0]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	20005bbc 	.word	0x20005bbc
 800ae30:	200067bc 	.word	0x200067bc
 800ae34:	200067c4 	.word	0x200067c4
 800ae38:	200067cc 	.word	0x200067cc
 800ae3c:	200067c8 	.word	0x200067c8
 800ae40:	200067d8 	.word	0x200067d8

0800ae44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae4c:	4b28      	ldr	r3, [pc, #160]	@ (800aef0 <prvInsertBlockIntoFreeList+0xac>)
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	e002      	b.n	800ae58 <prvInsertBlockIntoFreeList+0x14>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d8f7      	bhi.n	800ae52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d108      	bne.n	800ae86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	441a      	add	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	441a      	add	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d118      	bne.n	800aecc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	4b15      	ldr	r3, [pc, #84]	@ (800aef4 <prvInsertBlockIntoFreeList+0xb0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d00d      	beq.n	800aec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	441a      	add	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	e008      	b.n	800aed4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aec2:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <prvInsertBlockIntoFreeList+0xb0>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	e003      	b.n	800aed4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d002      	beq.n	800aee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee2:	bf00      	nop
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	200067bc 	.word	0x200067bc
 800aef4:	200067c4 	.word	0x200067c4

0800aef8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aef8:	4b04      	ldr	r3, [pc, #16]	@ (800af0c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	b10a      	cbz	r2, 800af02 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800aefe:	4803      	ldr	r0, [pc, #12]	@ (800af0c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800af00:	4770      	bx	lr
 800af02:	4a03      	ldr	r2, [pc, #12]	@ (800af10 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800af04:	4801      	ldr	r0, [pc, #4]	@ (800af0c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800af06:	6812      	ldr	r2, [r2, #0]
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	4770      	bx	lr
 800af0c:	2000001c 	.word	0x2000001c
 800af10:	200001d0 	.word	0x200001d0

0800af14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800af14:	4a02      	ldr	r2, [pc, #8]	@ (800af20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800af16:	4b03      	ldr	r3, [pc, #12]	@ (800af24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800af18:	6812      	ldr	r2, [r2, #0]
 800af1a:	601a      	str	r2, [r3, #0]
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	200001d0 	.word	0x200001d0
 800af24:	2000001c 	.word	0x2000001c

0800af28 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800af28:	f005 bd5a 	b.w	80109e0 <geometry_msgs__msg__Twist__init>

0800af2c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800af2c:	f005 bd7c 	b.w	8010a28 <geometry_msgs__msg__Twist__fini>

0800af30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800af30:	b510      	push	{r4, lr}
 800af32:	f000 f819 	bl	800af68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af36:	4c07      	ldr	r4, [pc, #28]	@ (800af54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800af38:	60e0      	str	r0, [r4, #12]
 800af3a:	f000 f815 	bl	800af68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af3e:	4b06      	ldr	r3, [pc, #24]	@ (800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800af40:	64a0      	str	r0, [r4, #72]	@ 0x48
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	b10a      	cbz	r2, 800af4a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800af46:	4804      	ldr	r0, [pc, #16]	@ (800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	4a04      	ldr	r2, [pc, #16]	@ (800af5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800af4c:	4802      	ldr	r0, [pc, #8]	@ (800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800af4e:	6812      	ldr	r2, [r2, #0]
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	bd10      	pop	{r4, pc}
 800af54:	20000028 	.word	0x20000028
 800af58:	200000a0 	.word	0x200000a0
 800af5c:	200001d4 	.word	0x200001d4

0800af60 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800af60:	f005 bd6e 	b.w	8010a40 <geometry_msgs__msg__Vector3__init>

0800af64 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800af64:	f005 bd70 	b.w	8010a48 <geometry_msgs__msg__Vector3__fini>

0800af68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800af68:	4b04      	ldr	r3, [pc, #16]	@ (800af7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	b10a      	cbz	r2, 800af72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800af6e:	4803      	ldr	r0, [pc, #12]	@ (800af7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af70:	4770      	bx	lr
 800af72:	4a03      	ldr	r2, [pc, #12]	@ (800af80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800af74:	4801      	ldr	r0, [pc, #4]	@ (800af7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af76:	6812      	ldr	r2, [r2, #0]
 800af78:	601a      	str	r2, [r3, #0]
 800af7a:	4770      	bx	lr
 800af7c:	20000160 	.word	0x20000160
 800af80:	200001d4 	.word	0x200001d4

0800af84 <get_serialized_size_geometry_msgs__msg__Twist>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4604      	mov	r4, r0
 800af88:	b148      	cbz	r0, 800af9e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800af8a:	460d      	mov	r5, r1
 800af8c:	f000 f860 	bl	800b050 <get_serialized_size_geometry_msgs__msg__Vector3>
 800af90:	4606      	mov	r6, r0
 800af92:	1829      	adds	r1, r5, r0
 800af94:	f104 0018 	add.w	r0, r4, #24
 800af98:	f000 f85a 	bl	800b050 <get_serialized_size_geometry_msgs__msg__Vector3>
 800af9c:	4430      	add	r0, r6
 800af9e:	bd70      	pop	{r4, r5, r6, pc}

0800afa0 <_Twist__cdr_deserialize>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	460c      	mov	r4, r1
 800afa4:	b189      	cbz	r1, 800afca <_Twist__cdr_deserialize+0x2a>
 800afa6:	4605      	mov	r5, r0
 800afa8:	f000 f8de 	bl	800b168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800afac:	6843      	ldr	r3, [r0, #4]
 800afae:	4621      	mov	r1, r4
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	4628      	mov	r0, r5
 800afb4:	4798      	blx	r3
 800afb6:	f000 f8d7 	bl	800b168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800afba:	6843      	ldr	r3, [r0, #4]
 800afbc:	f104 0118 	add.w	r1, r4, #24
 800afc0:	4628      	mov	r0, r5
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afc8:	4718      	bx	r3
 800afca:	4608      	mov	r0, r1
 800afcc:	bd70      	pop	{r4, r5, r6, pc}
 800afce:	bf00      	nop

0800afd0 <_Twist__cdr_serialize>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	9101      	str	r1, [sp, #4]
 800afd6:	b190      	cbz	r0, 800affe <_Twist__cdr_serialize+0x2e>
 800afd8:	4604      	mov	r4, r0
 800afda:	f000 f8c5 	bl	800b168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800afde:	6843      	ldr	r3, [r0, #4]
 800afe0:	9901      	ldr	r1, [sp, #4]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	4620      	mov	r0, r4
 800afe6:	4798      	blx	r3
 800afe8:	f000 f8be 	bl	800b168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800afec:	6843      	ldr	r3, [r0, #4]
 800afee:	9901      	ldr	r1, [sp, #4]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	f104 0018 	add.w	r0, r4, #24
 800aff6:	b002      	add	sp, #8
 800aff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800affc:	4718      	bx	r3
 800affe:	b002      	add	sp, #8
 800b000:	bd10      	pop	{r4, pc}
 800b002:	bf00      	nop

0800b004 <_Twist__get_serialized_size>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4604      	mov	r4, r0
 800b008:	b148      	cbz	r0, 800b01e <_Twist__get_serialized_size+0x1a>
 800b00a:	2100      	movs	r1, #0
 800b00c:	f000 f820 	bl	800b050 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b010:	4605      	mov	r5, r0
 800b012:	4601      	mov	r1, r0
 800b014:	f104 0018 	add.w	r0, r4, #24
 800b018:	f000 f81a 	bl	800b050 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b01c:	4428      	add	r0, r5
 800b01e:	bd38      	pop	{r3, r4, r5, pc}

0800b020 <_Twist__max_serialized_size>:
 800b020:	b510      	push	{r4, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	2301      	movs	r3, #1
 800b026:	2100      	movs	r1, #0
 800b028:	f10d 0007 	add.w	r0, sp, #7
 800b02c:	f88d 3007 	strb.w	r3, [sp, #7]
 800b030:	f000 f87e 	bl	800b130 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b034:	4604      	mov	r4, r0
 800b036:	4601      	mov	r1, r0
 800b038:	f10d 0007 	add.w	r0, sp, #7
 800b03c:	f000 f878 	bl	800b130 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b040:	4420      	add	r0, r4
 800b042:	b002      	add	sp, #8
 800b044:	bd10      	pop	{r4, pc}
 800b046:	bf00      	nop

0800b048 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b048:	4800      	ldr	r0, [pc, #0]	@ (800b04c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800b04a:	4770      	bx	lr
 800b04c:	2000016c 	.word	0x2000016c

0800b050 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800b050:	b1b8      	cbz	r0, 800b082 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800b052:	b538      	push	{r3, r4, r5, lr}
 800b054:	460d      	mov	r5, r1
 800b056:	4628      	mov	r0, r5
 800b058:	2108      	movs	r1, #8
 800b05a:	f001 f9fd 	bl	800c458 <ucdr_alignment>
 800b05e:	f105 0308 	add.w	r3, r5, #8
 800b062:	181c      	adds	r4, r3, r0
 800b064:	2108      	movs	r1, #8
 800b066:	4620      	mov	r0, r4
 800b068:	f001 f9f6 	bl	800c458 <ucdr_alignment>
 800b06c:	3008      	adds	r0, #8
 800b06e:	4404      	add	r4, r0
 800b070:	2108      	movs	r1, #8
 800b072:	4620      	mov	r0, r4
 800b074:	f001 f9f0 	bl	800c458 <ucdr_alignment>
 800b078:	f1c5 0508 	rsb	r5, r5, #8
 800b07c:	4428      	add	r0, r5
 800b07e:	4420      	add	r0, r4
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	4770      	bx	lr

0800b084 <_Vector3__cdr_deserialize>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	460c      	mov	r4, r1
 800b088:	b171      	cbz	r1, 800b0a8 <_Vector3__cdr_deserialize+0x24>
 800b08a:	4605      	mov	r5, r0
 800b08c:	f001 f8c6 	bl	800c21c <ucdr_deserialize_double>
 800b090:	f104 0108 	add.w	r1, r4, #8
 800b094:	4628      	mov	r0, r5
 800b096:	f001 f8c1 	bl	800c21c <ucdr_deserialize_double>
 800b09a:	f104 0110 	add.w	r1, r4, #16
 800b09e:	4628      	mov	r0, r5
 800b0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0a4:	f001 b8ba 	b.w	800c21c <ucdr_deserialize_double>
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}

0800b0ac <_Vector3__cdr_serialize>:
 800b0ac:	b198      	cbz	r0, 800b0d6 <_Vector3__cdr_serialize+0x2a>
 800b0ae:	b538      	push	{r3, r4, r5, lr}
 800b0b0:	ed90 0b00 	vldr	d0, [r0]
 800b0b4:	460d      	mov	r5, r1
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	f000 ffdf 	bl	800c07c <ucdr_serialize_double>
 800b0be:	ed94 0b02 	vldr	d0, [r4, #8]
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 ffda 	bl	800c07c <ucdr_serialize_double>
 800b0c8:	ed94 0b04 	vldr	d0, [r4, #16]
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0d2:	f000 bfd3 	b.w	800c07c <ucdr_serialize_double>
 800b0d6:	4770      	bx	lr

0800b0d8 <_Vector3__get_serialized_size>:
 800b0d8:	b198      	cbz	r0, 800b102 <_Vector3__get_serialized_size+0x2a>
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	2108      	movs	r1, #8
 800b0de:	2000      	movs	r0, #0
 800b0e0:	f001 f9ba 	bl	800c458 <ucdr_alignment>
 800b0e4:	f100 0408 	add.w	r4, r0, #8
 800b0e8:	2108      	movs	r1, #8
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f001 f9b4 	bl	800c458 <ucdr_alignment>
 800b0f0:	3008      	adds	r0, #8
 800b0f2:	4404      	add	r4, r0
 800b0f4:	2108      	movs	r1, #8
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f001 f9ae 	bl	800c458 <ucdr_alignment>
 800b0fc:	3008      	adds	r0, #8
 800b0fe:	4420      	add	r0, r4
 800b100:	bd10      	pop	{r4, pc}
 800b102:	4770      	bx	lr

0800b104 <_Vector3__max_serialized_size>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	2108      	movs	r1, #8
 800b108:	2000      	movs	r0, #0
 800b10a:	f001 f9a5 	bl	800c458 <ucdr_alignment>
 800b10e:	f100 0508 	add.w	r5, r0, #8
 800b112:	2108      	movs	r1, #8
 800b114:	4628      	mov	r0, r5
 800b116:	f001 f99f 	bl	800c458 <ucdr_alignment>
 800b11a:	f100 0408 	add.w	r4, r0, #8
 800b11e:	442c      	add	r4, r5
 800b120:	2108      	movs	r1, #8
 800b122:	4620      	mov	r0, r4
 800b124:	f001 f998 	bl	800c458 <ucdr_alignment>
 800b128:	3008      	adds	r0, #8
 800b12a:	4420      	add	r0, r4
 800b12c:	bd38      	pop	{r3, r4, r5, pc}
 800b12e:	bf00      	nop

0800b130 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800b130:	b570      	push	{r4, r5, r6, lr}
 800b132:	2301      	movs	r3, #1
 800b134:	460c      	mov	r4, r1
 800b136:	7003      	strb	r3, [r0, #0]
 800b138:	2108      	movs	r1, #8
 800b13a:	4620      	mov	r0, r4
 800b13c:	f001 f98c 	bl	800c458 <ucdr_alignment>
 800b140:	f104 0508 	add.w	r5, r4, #8
 800b144:	1946      	adds	r6, r0, r5
 800b146:	2108      	movs	r1, #8
 800b148:	4630      	mov	r0, r6
 800b14a:	f001 f985 	bl	800c458 <ucdr_alignment>
 800b14e:	f100 0508 	add.w	r5, r0, #8
 800b152:	4435      	add	r5, r6
 800b154:	2108      	movs	r1, #8
 800b156:	4628      	mov	r0, r5
 800b158:	f001 f97e 	bl	800c458 <ucdr_alignment>
 800b15c:	f1c4 0408 	rsb	r4, r4, #8
 800b160:	4420      	add	r0, r4
 800b162:	4428      	add	r0, r5
 800b164:	bd70      	pop	{r4, r5, r6, pc}
 800b166:	bf00      	nop

0800b168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800b168:	4800      	ldr	r0, [pc, #0]	@ (800b16c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800b16a:	4770      	bx	lr
 800b16c:	20000194 	.word	0x20000194

0800b170 <ucdr_serialize_bool>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	460d      	mov	r5, r1
 800b174:	2101      	movs	r1, #1
 800b176:	4604      	mov	r4, r0
 800b178:	f001 f922 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b17c:	b148      	cbz	r0, 800b192 <ucdr_serialize_bool+0x22>
 800b17e:	68a3      	ldr	r3, [r4, #8]
 800b180:	701d      	strb	r5, [r3, #0]
 800b182:	68a2      	ldr	r2, [r4, #8]
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	2101      	movs	r1, #1
 800b188:	440a      	add	r2, r1
 800b18a:	440b      	add	r3, r1
 800b18c:	60a2      	str	r2, [r4, #8]
 800b18e:	6123      	str	r3, [r4, #16]
 800b190:	7561      	strb	r1, [r4, #21]
 800b192:	7da0      	ldrb	r0, [r4, #22]
 800b194:	f080 0001 	eor.w	r0, r0, #1
 800b198:	bd38      	pop	{r3, r4, r5, pc}
 800b19a:	bf00      	nop

0800b19c <ucdr_deserialize_bool>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	460d      	mov	r5, r1
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	f001 f90c 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b1a8:	b160      	cbz	r0, 800b1c4 <ucdr_deserialize_bool+0x28>
 800b1aa:	68a2      	ldr	r2, [r4, #8]
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b1b2:	3900      	subs	r1, #0
 800b1b4:	bf18      	it	ne
 800b1b6:	2101      	movne	r1, #1
 800b1b8:	7029      	strb	r1, [r5, #0]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	2101      	movs	r1, #1
 800b1be:	60a2      	str	r2, [r4, #8]
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	7561      	strb	r1, [r4, #21]
 800b1c4:	7da0      	ldrb	r0, [r4, #22]
 800b1c6:	f080 0001 	eor.w	r0, r0, #1
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}

0800b1cc <ucdr_serialize_uint8_t>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	460d      	mov	r5, r1
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	f001 f8f4 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b1d8:	b148      	cbz	r0, 800b1ee <ucdr_serialize_uint8_t+0x22>
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	701d      	strb	r5, [r3, #0]
 800b1de:	68a2      	ldr	r2, [r4, #8]
 800b1e0:	6923      	ldr	r3, [r4, #16]
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	440a      	add	r2, r1
 800b1e6:	440b      	add	r3, r1
 800b1e8:	60a2      	str	r2, [r4, #8]
 800b1ea:	6123      	str	r3, [r4, #16]
 800b1ec:	7561      	strb	r1, [r4, #21]
 800b1ee:	7da0      	ldrb	r0, [r4, #22]
 800b1f0:	f080 0001 	eor.w	r0, r0, #1
 800b1f4:	bd38      	pop	{r3, r4, r5, pc}
 800b1f6:	bf00      	nop

0800b1f8 <ucdr_deserialize_uint8_t>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	460d      	mov	r5, r1
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	4604      	mov	r4, r0
 800b200:	f001 f8de 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b204:	b150      	cbz	r0, 800b21c <ucdr_deserialize_uint8_t+0x24>
 800b206:	68a3      	ldr	r3, [r4, #8]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	702b      	strb	r3, [r5, #0]
 800b20c:	68a2      	ldr	r2, [r4, #8]
 800b20e:	6923      	ldr	r3, [r4, #16]
 800b210:	2101      	movs	r1, #1
 800b212:	440a      	add	r2, r1
 800b214:	440b      	add	r3, r1
 800b216:	60a2      	str	r2, [r4, #8]
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	7561      	strb	r1, [r4, #21]
 800b21c:	7da0      	ldrb	r0, [r4, #22]
 800b21e:	f080 0001 	eor.w	r0, r0, #1
 800b222:	bd38      	pop	{r3, r4, r5, pc}

0800b224 <ucdr_serialize_uint16_t>:
 800b224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	460b      	mov	r3, r1
 800b22c:	2102      	movs	r1, #2
 800b22e:	4604      	mov	r4, r0
 800b230:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b234:	f001 f918 	bl	800c468 <ucdr_buffer_alignment>
 800b238:	4601      	mov	r1, r0
 800b23a:	4620      	mov	r0, r4
 800b23c:	7d67      	ldrb	r7, [r4, #21]
 800b23e:	f001 f957 	bl	800c4f0 <ucdr_advance_buffer>
 800b242:	2102      	movs	r1, #2
 800b244:	4620      	mov	r0, r4
 800b246:	f001 f8af 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b24a:	bb78      	cbnz	r0, 800b2ac <ucdr_serialize_uint16_t+0x88>
 800b24c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b250:	42ab      	cmp	r3, r5
 800b252:	d926      	bls.n	800b2a2 <ucdr_serialize_uint16_t+0x7e>
 800b254:	1b5e      	subs	r6, r3, r5
 800b256:	60a3      	str	r3, [r4, #8]
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	f1c6 0802 	rsb	r8, r6, #2
 800b25e:	4433      	add	r3, r6
 800b260:	6123      	str	r3, [r4, #16]
 800b262:	4641      	mov	r1, r8
 800b264:	4620      	mov	r0, r4
 800b266:	f001 f8ab 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d03b      	beq.n	800b2e6 <ucdr_serialize_uint16_t+0xc2>
 800b26e:	7d23      	ldrb	r3, [r4, #20]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d04a      	beq.n	800b30a <ucdr_serialize_uint16_t+0xe6>
 800b274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b278:	702b      	strb	r3, [r5, #0]
 800b27a:	2e00      	cmp	r6, #0
 800b27c:	d040      	beq.n	800b300 <ucdr_serialize_uint16_t+0xdc>
 800b27e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b282:	706b      	strb	r3, [r5, #1]
 800b284:	6923      	ldr	r3, [r4, #16]
 800b286:	68a2      	ldr	r2, [r4, #8]
 800b288:	7da0      	ldrb	r0, [r4, #22]
 800b28a:	3302      	adds	r3, #2
 800b28c:	1b9e      	subs	r6, r3, r6
 800b28e:	4442      	add	r2, r8
 800b290:	2302      	movs	r3, #2
 800b292:	f080 0001 	eor.w	r0, r0, #1
 800b296:	60a2      	str	r2, [r4, #8]
 800b298:	6126      	str	r6, [r4, #16]
 800b29a:	7563      	strb	r3, [r4, #21]
 800b29c:	b002      	add	sp, #8
 800b29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a2:	2102      	movs	r1, #2
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f001 f88b 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b2aa:	b190      	cbz	r0, 800b2d2 <ucdr_serialize_uint16_t+0xae>
 800b2ac:	7d23      	ldrb	r3, [r4, #20]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	68a3      	ldr	r3, [r4, #8]
 800b2b2:	d014      	beq.n	800b2de <ucdr_serialize_uint16_t+0xba>
 800b2b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2b8:	701a      	strb	r2, [r3, #0]
 800b2ba:	68a3      	ldr	r3, [r4, #8]
 800b2bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2c0:	705a      	strb	r2, [r3, #1]
 800b2c2:	68a2      	ldr	r2, [r4, #8]
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	3202      	adds	r2, #2
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	2102      	movs	r1, #2
 800b2cc:	60a2      	str	r2, [r4, #8]
 800b2ce:	6123      	str	r3, [r4, #16]
 800b2d0:	7561      	strb	r1, [r4, #21]
 800b2d2:	7da0      	ldrb	r0, [r4, #22]
 800b2d4:	f080 0001 	eor.w	r0, r0, #1
 800b2d8:	b002      	add	sp, #8
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b2e2:	801a      	strh	r2, [r3, #0]
 800b2e4:	e7ed      	b.n	800b2c2 <ucdr_serialize_uint16_t+0x9e>
 800b2e6:	68a2      	ldr	r2, [r4, #8]
 800b2e8:	6923      	ldr	r3, [r4, #16]
 800b2ea:	7da0      	ldrb	r0, [r4, #22]
 800b2ec:	7567      	strb	r7, [r4, #21]
 800b2ee:	1b92      	subs	r2, r2, r6
 800b2f0:	1b9b      	subs	r3, r3, r6
 800b2f2:	f080 0001 	eor.w	r0, r0, #1
 800b2f6:	60a2      	str	r2, [r4, #8]
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	b002      	add	sp, #8
 800b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b306:	701a      	strb	r2, [r3, #0]
 800b308:	e7bc      	b.n	800b284 <ucdr_serialize_uint16_t+0x60>
 800b30a:	4628      	mov	r0, r5
 800b30c:	f10d 0506 	add.w	r5, sp, #6
 800b310:	4629      	mov	r1, r5
 800b312:	4632      	mov	r2, r6
 800b314:	f00d ff17 	bl	8019146 <memcpy>
 800b318:	68a0      	ldr	r0, [r4, #8]
 800b31a:	4642      	mov	r2, r8
 800b31c:	19a9      	adds	r1, r5, r6
 800b31e:	f00d ff12 	bl	8019146 <memcpy>
 800b322:	e7af      	b.n	800b284 <ucdr_serialize_uint16_t+0x60>

0800b324 <ucdr_serialize_endian_uint16_t>:
 800b324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b328:	b083      	sub	sp, #12
 800b32a:	460d      	mov	r5, r1
 800b32c:	2102      	movs	r1, #2
 800b32e:	4604      	mov	r4, r0
 800b330:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b334:	f001 f898 	bl	800c468 <ucdr_buffer_alignment>
 800b338:	4601      	mov	r1, r0
 800b33a:	4620      	mov	r0, r4
 800b33c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b340:	f001 f8d6 	bl	800c4f0 <ucdr_advance_buffer>
 800b344:	2102      	movs	r1, #2
 800b346:	4620      	mov	r0, r4
 800b348:	f001 f82e 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b34c:	bb70      	cbnz	r0, 800b3ac <ucdr_serialize_endian_uint16_t+0x88>
 800b34e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b352:	42be      	cmp	r6, r7
 800b354:	d925      	bls.n	800b3a2 <ucdr_serialize_endian_uint16_t+0x7e>
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	60a6      	str	r6, [r4, #8]
 800b35a:	1bf6      	subs	r6, r6, r7
 800b35c:	4433      	add	r3, r6
 800b35e:	f1c6 0902 	rsb	r9, r6, #2
 800b362:	6123      	str	r3, [r4, #16]
 800b364:	4649      	mov	r1, r9
 800b366:	4620      	mov	r0, r4
 800b368:	f001 f82a 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d039      	beq.n	800b3e4 <ucdr_serialize_endian_uint16_t+0xc0>
 800b370:	2d01      	cmp	r5, #1
 800b372:	d04a      	beq.n	800b40a <ucdr_serialize_endian_uint16_t+0xe6>
 800b374:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b378:	703b      	strb	r3, [r7, #0]
 800b37a:	2e00      	cmp	r6, #0
 800b37c:	d040      	beq.n	800b400 <ucdr_serialize_endian_uint16_t+0xdc>
 800b37e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b382:	707b      	strb	r3, [r7, #1]
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	68a2      	ldr	r2, [r4, #8]
 800b388:	7da0      	ldrb	r0, [r4, #22]
 800b38a:	3302      	adds	r3, #2
 800b38c:	444a      	add	r2, r9
 800b38e:	1b9b      	subs	r3, r3, r6
 800b390:	2102      	movs	r1, #2
 800b392:	f080 0001 	eor.w	r0, r0, #1
 800b396:	60a2      	str	r2, [r4, #8]
 800b398:	6123      	str	r3, [r4, #16]
 800b39a:	7561      	strb	r1, [r4, #21]
 800b39c:	b003      	add	sp, #12
 800b39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3a2:	2102      	movs	r1, #2
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f001 f80b 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b3aa:	b188      	cbz	r0, 800b3d0 <ucdr_serialize_endian_uint16_t+0xac>
 800b3ac:	2d01      	cmp	r5, #1
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	d014      	beq.n	800b3dc <ucdr_serialize_endian_uint16_t+0xb8>
 800b3b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	68a3      	ldr	r3, [r4, #8]
 800b3ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3be:	705a      	strb	r2, [r3, #1]
 800b3c0:	68a2      	ldr	r2, [r4, #8]
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	3202      	adds	r2, #2
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	2102      	movs	r1, #2
 800b3ca:	60a2      	str	r2, [r4, #8]
 800b3cc:	6123      	str	r3, [r4, #16]
 800b3ce:	7561      	strb	r1, [r4, #21]
 800b3d0:	7da0      	ldrb	r0, [r4, #22]
 800b3d2:	f080 0001 	eor.w	r0, r0, #1
 800b3d6:	b003      	add	sp, #12
 800b3d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b3e0:	801a      	strh	r2, [r3, #0]
 800b3e2:	e7ed      	b.n	800b3c0 <ucdr_serialize_endian_uint16_t+0x9c>
 800b3e4:	68a2      	ldr	r2, [r4, #8]
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	7da0      	ldrb	r0, [r4, #22]
 800b3ea:	f884 8015 	strb.w	r8, [r4, #21]
 800b3ee:	1b92      	subs	r2, r2, r6
 800b3f0:	1b9b      	subs	r3, r3, r6
 800b3f2:	f080 0001 	eor.w	r0, r0, #1
 800b3f6:	60a2      	str	r2, [r4, #8]
 800b3f8:	6123      	str	r3, [r4, #16]
 800b3fa:	b003      	add	sp, #12
 800b3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	e7bc      	b.n	800b384 <ucdr_serialize_endian_uint16_t+0x60>
 800b40a:	f10d 0506 	add.w	r5, sp, #6
 800b40e:	4629      	mov	r1, r5
 800b410:	4632      	mov	r2, r6
 800b412:	4638      	mov	r0, r7
 800b414:	f00d fe97 	bl	8019146 <memcpy>
 800b418:	68a0      	ldr	r0, [r4, #8]
 800b41a:	464a      	mov	r2, r9
 800b41c:	19a9      	adds	r1, r5, r6
 800b41e:	f00d fe92 	bl	8019146 <memcpy>
 800b422:	e7af      	b.n	800b384 <ucdr_serialize_endian_uint16_t+0x60>

0800b424 <ucdr_deserialize_uint16_t>:
 800b424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b428:	460d      	mov	r5, r1
 800b42a:	2102      	movs	r1, #2
 800b42c:	4604      	mov	r4, r0
 800b42e:	f001 f81b 	bl	800c468 <ucdr_buffer_alignment>
 800b432:	4601      	mov	r1, r0
 800b434:	4620      	mov	r0, r4
 800b436:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b43a:	f001 f859 	bl	800c4f0 <ucdr_advance_buffer>
 800b43e:	2102      	movs	r1, #2
 800b440:	4620      	mov	r0, r4
 800b442:	f000 ffb1 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b446:	bb60      	cbnz	r0, 800b4a2 <ucdr_deserialize_uint16_t+0x7e>
 800b448:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b44c:	42be      	cmp	r6, r7
 800b44e:	d923      	bls.n	800b498 <ucdr_deserialize_uint16_t+0x74>
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	60a6      	str	r6, [r4, #8]
 800b454:	1bf6      	subs	r6, r6, r7
 800b456:	4433      	add	r3, r6
 800b458:	f1c6 0902 	rsb	r9, r6, #2
 800b45c:	6123      	str	r3, [r4, #16]
 800b45e:	4649      	mov	r1, r9
 800b460:	4620      	mov	r0, r4
 800b462:	f000 ffad 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b466:	2800      	cmp	r0, #0
 800b468:	d034      	beq.n	800b4d4 <ucdr_deserialize_uint16_t+0xb0>
 800b46a:	7d23      	ldrb	r3, [r4, #20]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d042      	beq.n	800b4f6 <ucdr_deserialize_uint16_t+0xd2>
 800b470:	787b      	ldrb	r3, [r7, #1]
 800b472:	702b      	strb	r3, [r5, #0]
 800b474:	2e00      	cmp	r6, #0
 800b476:	d03a      	beq.n	800b4ee <ucdr_deserialize_uint16_t+0xca>
 800b478:	783b      	ldrb	r3, [r7, #0]
 800b47a:	706b      	strb	r3, [r5, #1]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	68a2      	ldr	r2, [r4, #8]
 800b480:	7da0      	ldrb	r0, [r4, #22]
 800b482:	2102      	movs	r1, #2
 800b484:	3302      	adds	r3, #2
 800b486:	444a      	add	r2, r9
 800b488:	1b9b      	subs	r3, r3, r6
 800b48a:	7561      	strb	r1, [r4, #21]
 800b48c:	60a2      	str	r2, [r4, #8]
 800b48e:	6123      	str	r3, [r4, #16]
 800b490:	f080 0001 	eor.w	r0, r0, #1
 800b494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b498:	2102      	movs	r1, #2
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 ff90 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b4a0:	b180      	cbz	r0, 800b4c4 <ucdr_deserialize_uint16_t+0xa0>
 800b4a2:	7d23      	ldrb	r3, [r4, #20]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	d011      	beq.n	800b4ce <ucdr_deserialize_uint16_t+0xaa>
 800b4aa:	785b      	ldrb	r3, [r3, #1]
 800b4ac:	702b      	strb	r3, [r5, #0]
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	706b      	strb	r3, [r5, #1]
 800b4b4:	68a2      	ldr	r2, [r4, #8]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	3202      	adds	r2, #2
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	2102      	movs	r1, #2
 800b4be:	60a2      	str	r2, [r4, #8]
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	7561      	strb	r1, [r4, #21]
 800b4c4:	7da0      	ldrb	r0, [r4, #22]
 800b4c6:	f080 0001 	eor.w	r0, r0, #1
 800b4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	802b      	strh	r3, [r5, #0]
 800b4d2:	e7ef      	b.n	800b4b4 <ucdr_deserialize_uint16_t+0x90>
 800b4d4:	68a2      	ldr	r2, [r4, #8]
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	7da0      	ldrb	r0, [r4, #22]
 800b4da:	f884 8015 	strb.w	r8, [r4, #21]
 800b4de:	1b92      	subs	r2, r2, r6
 800b4e0:	1b9b      	subs	r3, r3, r6
 800b4e2:	60a2      	str	r2, [r4, #8]
 800b4e4:	6123      	str	r3, [r4, #16]
 800b4e6:	f080 0001 	eor.w	r0, r0, #1
 800b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	68a3      	ldr	r3, [r4, #8]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	706b      	strb	r3, [r5, #1]
 800b4f4:	e7c2      	b.n	800b47c <ucdr_deserialize_uint16_t+0x58>
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f00d fe23 	bl	8019146 <memcpy>
 800b500:	68a1      	ldr	r1, [r4, #8]
 800b502:	464a      	mov	r2, r9
 800b504:	19a8      	adds	r0, r5, r6
 800b506:	f00d fe1e 	bl	8019146 <memcpy>
 800b50a:	e7b7      	b.n	800b47c <ucdr_deserialize_uint16_t+0x58>

0800b50c <ucdr_deserialize_endian_uint16_t>:
 800b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	460e      	mov	r6, r1
 800b512:	2102      	movs	r1, #2
 800b514:	4604      	mov	r4, r0
 800b516:	4615      	mov	r5, r2
 800b518:	f000 ffa6 	bl	800c468 <ucdr_buffer_alignment>
 800b51c:	4601      	mov	r1, r0
 800b51e:	4620      	mov	r0, r4
 800b520:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b524:	f000 ffe4 	bl	800c4f0 <ucdr_advance_buffer>
 800b528:	2102      	movs	r1, #2
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 ff3c 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b530:	bb70      	cbnz	r0, 800b590 <ucdr_deserialize_endian_uint16_t+0x84>
 800b532:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b536:	4547      	cmp	r7, r8
 800b538:	d925      	bls.n	800b586 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	60a7      	str	r7, [r4, #8]
 800b53e:	eba7 0708 	sub.w	r7, r7, r8
 800b542:	443b      	add	r3, r7
 800b544:	f1c7 0a02 	rsb	sl, r7, #2
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	4651      	mov	r1, sl
 800b54c:	4620      	mov	r0, r4
 800b54e:	f000 ff37 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b552:	2800      	cmp	r0, #0
 800b554:	d034      	beq.n	800b5c0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b556:	2e01      	cmp	r6, #1
 800b558:	d043      	beq.n	800b5e2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b55a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b55e:	702b      	strb	r3, [r5, #0]
 800b560:	2f00      	cmp	r7, #0
 800b562:	d03a      	beq.n	800b5da <ucdr_deserialize_endian_uint16_t+0xce>
 800b564:	f898 3000 	ldrb.w	r3, [r8]
 800b568:	706b      	strb	r3, [r5, #1]
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	68a2      	ldr	r2, [r4, #8]
 800b56e:	7da0      	ldrb	r0, [r4, #22]
 800b570:	2102      	movs	r1, #2
 800b572:	3302      	adds	r3, #2
 800b574:	4452      	add	r2, sl
 800b576:	1bdb      	subs	r3, r3, r7
 800b578:	7561      	strb	r1, [r4, #21]
 800b57a:	60a2      	str	r2, [r4, #8]
 800b57c:	6123      	str	r3, [r4, #16]
 800b57e:	f080 0001 	eor.w	r0, r0, #1
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	2102      	movs	r1, #2
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 ff19 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b58e:	b178      	cbz	r0, 800b5b0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b590:	2e01      	cmp	r6, #1
 800b592:	68a3      	ldr	r3, [r4, #8]
 800b594:	d011      	beq.n	800b5ba <ucdr_deserialize_endian_uint16_t+0xae>
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	702b      	strb	r3, [r5, #0]
 800b59a:	68a3      	ldr	r3, [r4, #8]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	706b      	strb	r3, [r5, #1]
 800b5a0:	68a2      	ldr	r2, [r4, #8]
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	3202      	adds	r2, #2
 800b5a6:	3302      	adds	r3, #2
 800b5a8:	2102      	movs	r1, #2
 800b5aa:	60a2      	str	r2, [r4, #8]
 800b5ac:	6123      	str	r3, [r4, #16]
 800b5ae:	7561      	strb	r1, [r4, #21]
 800b5b0:	7da0      	ldrb	r0, [r4, #22]
 800b5b2:	f080 0001 	eor.w	r0, r0, #1
 800b5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	802b      	strh	r3, [r5, #0]
 800b5be:	e7ef      	b.n	800b5a0 <ucdr_deserialize_endian_uint16_t+0x94>
 800b5c0:	68a2      	ldr	r2, [r4, #8]
 800b5c2:	6923      	ldr	r3, [r4, #16]
 800b5c4:	7da0      	ldrb	r0, [r4, #22]
 800b5c6:	f884 9015 	strb.w	r9, [r4, #21]
 800b5ca:	1bd2      	subs	r2, r2, r7
 800b5cc:	1bdb      	subs	r3, r3, r7
 800b5ce:	60a2      	str	r2, [r4, #8]
 800b5d0:	6123      	str	r3, [r4, #16]
 800b5d2:	f080 0001 	eor.w	r0, r0, #1
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	706b      	strb	r3, [r5, #1]
 800b5e0:	e7c3      	b.n	800b56a <ucdr_deserialize_endian_uint16_t+0x5e>
 800b5e2:	4641      	mov	r1, r8
 800b5e4:	463a      	mov	r2, r7
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f00d fdad 	bl	8019146 <memcpy>
 800b5ec:	68a1      	ldr	r1, [r4, #8]
 800b5ee:	4652      	mov	r2, sl
 800b5f0:	19e8      	adds	r0, r5, r7
 800b5f2:	f00d fda8 	bl	8019146 <memcpy>
 800b5f6:	e7b8      	b.n	800b56a <ucdr_deserialize_endian_uint16_t+0x5e>

0800b5f8 <ucdr_serialize_uint32_t>:
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	4604      	mov	r4, r0
 800b600:	9101      	str	r1, [sp, #4]
 800b602:	2104      	movs	r1, #4
 800b604:	f000 ff30 	bl	800c468 <ucdr_buffer_alignment>
 800b608:	4601      	mov	r1, r0
 800b60a:	4620      	mov	r0, r4
 800b60c:	7d67      	ldrb	r7, [r4, #21]
 800b60e:	f000 ff6f 	bl	800c4f0 <ucdr_advance_buffer>
 800b612:	2104      	movs	r1, #4
 800b614:	4620      	mov	r0, r4
 800b616:	f000 fec7 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d139      	bne.n	800b692 <ucdr_serialize_uint32_t+0x9a>
 800b61e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b622:	42ab      	cmp	r3, r5
 800b624:	d930      	bls.n	800b688 <ucdr_serialize_uint32_t+0x90>
 800b626:	1b5e      	subs	r6, r3, r5
 800b628:	60a3      	str	r3, [r4, #8]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	f1c6 0804 	rsb	r8, r6, #4
 800b630:	4433      	add	r3, r6
 800b632:	6123      	str	r3, [r4, #16]
 800b634:	4641      	mov	r1, r8
 800b636:	4620      	mov	r0, r4
 800b638:	f000 fec2 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d04c      	beq.n	800b6da <ucdr_serialize_uint32_t+0xe2>
 800b640:	7d23      	ldrb	r3, [r4, #20]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d063      	beq.n	800b70e <ucdr_serialize_uint32_t+0x116>
 800b646:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b64a:	702b      	strb	r3, [r5, #0]
 800b64c:	2e00      	cmp	r6, #0
 800b64e:	d051      	beq.n	800b6f4 <ucdr_serialize_uint32_t+0xfc>
 800b650:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b654:	706b      	strb	r3, [r5, #1]
 800b656:	2e01      	cmp	r6, #1
 800b658:	d050      	beq.n	800b6fc <ucdr_serialize_uint32_t+0x104>
 800b65a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b65e:	70ab      	strb	r3, [r5, #2]
 800b660:	2e02      	cmp	r6, #2
 800b662:	d04f      	beq.n	800b704 <ucdr_serialize_uint32_t+0x10c>
 800b664:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b668:	70eb      	strb	r3, [r5, #3]
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	68a2      	ldr	r2, [r4, #8]
 800b66e:	7da0      	ldrb	r0, [r4, #22]
 800b670:	3304      	adds	r3, #4
 800b672:	1b9e      	subs	r6, r3, r6
 800b674:	4442      	add	r2, r8
 800b676:	2304      	movs	r3, #4
 800b678:	f080 0001 	eor.w	r0, r0, #1
 800b67c:	60a2      	str	r2, [r4, #8]
 800b67e:	6126      	str	r6, [r4, #16]
 800b680:	7563      	strb	r3, [r4, #21]
 800b682:	b002      	add	sp, #8
 800b684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b688:	2104      	movs	r1, #4
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fe98 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b690:	b1d0      	cbz	r0, 800b6c8 <ucdr_serialize_uint32_t+0xd0>
 800b692:	7d23      	ldrb	r3, [r4, #20]
 800b694:	2b01      	cmp	r3, #1
 800b696:	68a3      	ldr	r3, [r4, #8]
 800b698:	d01c      	beq.n	800b6d4 <ucdr_serialize_uint32_t+0xdc>
 800b69a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6a6:	705a      	strb	r2, [r3, #1]
 800b6a8:	68a3      	ldr	r3, [r4, #8]
 800b6aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6ae:	709a      	strb	r2, [r3, #2]
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6b6:	70da      	strb	r2, [r3, #3]
 800b6b8:	68a2      	ldr	r2, [r4, #8]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	3204      	adds	r2, #4
 800b6be:	3304      	adds	r3, #4
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	60a2      	str	r2, [r4, #8]
 800b6c4:	6123      	str	r3, [r4, #16]
 800b6c6:	7561      	strb	r1, [r4, #21]
 800b6c8:	7da0      	ldrb	r0, [r4, #22]
 800b6ca:	f080 0001 	eor.w	r0, r0, #1
 800b6ce:	b002      	add	sp, #8
 800b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d4:	9a01      	ldr	r2, [sp, #4]
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	e7ee      	b.n	800b6b8 <ucdr_serialize_uint32_t+0xc0>
 800b6da:	68a2      	ldr	r2, [r4, #8]
 800b6dc:	6923      	ldr	r3, [r4, #16]
 800b6de:	7da0      	ldrb	r0, [r4, #22]
 800b6e0:	7567      	strb	r7, [r4, #21]
 800b6e2:	1b92      	subs	r2, r2, r6
 800b6e4:	1b9b      	subs	r3, r3, r6
 800b6e6:	f080 0001 	eor.w	r0, r0, #1
 800b6ea:	60a2      	str	r2, [r4, #8]
 800b6ec:	6123      	str	r3, [r4, #16]
 800b6ee:	b002      	add	sp, #8
 800b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6fa:	701a      	strb	r2, [r3, #0]
 800b6fc:	68a3      	ldr	r3, [r4, #8]
 800b6fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b702:	701a      	strb	r2, [r3, #0]
 800b704:	68a3      	ldr	r3, [r4, #8]
 800b706:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b70a:	701a      	strb	r2, [r3, #0]
 800b70c:	e7ad      	b.n	800b66a <ucdr_serialize_uint32_t+0x72>
 800b70e:	4628      	mov	r0, r5
 800b710:	ad01      	add	r5, sp, #4
 800b712:	4629      	mov	r1, r5
 800b714:	4632      	mov	r2, r6
 800b716:	f00d fd16 	bl	8019146 <memcpy>
 800b71a:	68a0      	ldr	r0, [r4, #8]
 800b71c:	4642      	mov	r2, r8
 800b71e:	19a9      	adds	r1, r5, r6
 800b720:	f00d fd11 	bl	8019146 <memcpy>
 800b724:	e7a1      	b.n	800b66a <ucdr_serialize_uint32_t+0x72>
 800b726:	bf00      	nop

0800b728 <ucdr_serialize_endian_uint32_t>:
 800b728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b72c:	b083      	sub	sp, #12
 800b72e:	460d      	mov	r5, r1
 800b730:	2104      	movs	r1, #4
 800b732:	4604      	mov	r4, r0
 800b734:	9201      	str	r2, [sp, #4]
 800b736:	f000 fe97 	bl	800c468 <ucdr_buffer_alignment>
 800b73a:	4601      	mov	r1, r0
 800b73c:	4620      	mov	r0, r4
 800b73e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b742:	f000 fed5 	bl	800c4f0 <ucdr_advance_buffer>
 800b746:	2104      	movs	r1, #4
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 fe2d 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d138      	bne.n	800b7c4 <ucdr_serialize_endian_uint32_t+0x9c>
 800b752:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b756:	42b7      	cmp	r7, r6
 800b758:	d92f      	bls.n	800b7ba <ucdr_serialize_endian_uint32_t+0x92>
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	60a7      	str	r7, [r4, #8]
 800b75e:	1bbf      	subs	r7, r7, r6
 800b760:	443b      	add	r3, r7
 800b762:	f1c7 0904 	rsb	r9, r7, #4
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	4649      	mov	r1, r9
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 fe28 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b770:	2800      	cmp	r0, #0
 800b772:	d04a      	beq.n	800b80a <ucdr_serialize_endian_uint32_t+0xe2>
 800b774:	2d01      	cmp	r5, #1
 800b776:	d063      	beq.n	800b840 <ucdr_serialize_endian_uint32_t+0x118>
 800b778:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b77c:	7033      	strb	r3, [r6, #0]
 800b77e:	2f00      	cmp	r7, #0
 800b780:	d051      	beq.n	800b826 <ucdr_serialize_endian_uint32_t+0xfe>
 800b782:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b786:	7073      	strb	r3, [r6, #1]
 800b788:	2f01      	cmp	r7, #1
 800b78a:	d050      	beq.n	800b82e <ucdr_serialize_endian_uint32_t+0x106>
 800b78c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b790:	70b3      	strb	r3, [r6, #2]
 800b792:	2f02      	cmp	r7, #2
 800b794:	d04f      	beq.n	800b836 <ucdr_serialize_endian_uint32_t+0x10e>
 800b796:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b79a:	70f3      	strb	r3, [r6, #3]
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	68a2      	ldr	r2, [r4, #8]
 800b7a0:	7da0      	ldrb	r0, [r4, #22]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	444a      	add	r2, r9
 800b7a6:	1bdb      	subs	r3, r3, r7
 800b7a8:	2104      	movs	r1, #4
 800b7aa:	f080 0001 	eor.w	r0, r0, #1
 800b7ae:	60a2      	str	r2, [r4, #8]
 800b7b0:	6123      	str	r3, [r4, #16]
 800b7b2:	7561      	strb	r1, [r4, #21]
 800b7b4:	b003      	add	sp, #12
 800b7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7ba:	2104      	movs	r1, #4
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 fdff 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b7c2:	b1c8      	cbz	r0, 800b7f8 <ucdr_serialize_endian_uint32_t+0xd0>
 800b7c4:	2d01      	cmp	r5, #1
 800b7c6:	68a3      	ldr	r3, [r4, #8]
 800b7c8:	d01c      	beq.n	800b804 <ucdr_serialize_endian_uint32_t+0xdc>
 800b7ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b7ce:	701a      	strb	r2, [r3, #0]
 800b7d0:	68a3      	ldr	r3, [r4, #8]
 800b7d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7d6:	705a      	strb	r2, [r3, #1]
 800b7d8:	68a3      	ldr	r3, [r4, #8]
 800b7da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b7de:	709a      	strb	r2, [r3, #2]
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b7e6:	70da      	strb	r2, [r3, #3]
 800b7e8:	68a2      	ldr	r2, [r4, #8]
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	3204      	adds	r2, #4
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	2104      	movs	r1, #4
 800b7f2:	60a2      	str	r2, [r4, #8]
 800b7f4:	6123      	str	r3, [r4, #16]
 800b7f6:	7561      	strb	r1, [r4, #21]
 800b7f8:	7da0      	ldrb	r0, [r4, #22]
 800b7fa:	f080 0001 	eor.w	r0, r0, #1
 800b7fe:	b003      	add	sp, #12
 800b800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b804:	9a01      	ldr	r2, [sp, #4]
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	e7ee      	b.n	800b7e8 <ucdr_serialize_endian_uint32_t+0xc0>
 800b80a:	68a2      	ldr	r2, [r4, #8]
 800b80c:	6923      	ldr	r3, [r4, #16]
 800b80e:	7da0      	ldrb	r0, [r4, #22]
 800b810:	f884 8015 	strb.w	r8, [r4, #21]
 800b814:	1bd2      	subs	r2, r2, r7
 800b816:	1bdb      	subs	r3, r3, r7
 800b818:	f080 0001 	eor.w	r0, r0, #1
 800b81c:	60a2      	str	r2, [r4, #8]
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	b003      	add	sp, #12
 800b822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b826:	68a3      	ldr	r3, [r4, #8]
 800b828:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	68a3      	ldr	r3, [r4, #8]
 800b830:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	e7ad      	b.n	800b79c <ucdr_serialize_endian_uint32_t+0x74>
 800b840:	ad01      	add	r5, sp, #4
 800b842:	4629      	mov	r1, r5
 800b844:	463a      	mov	r2, r7
 800b846:	4630      	mov	r0, r6
 800b848:	f00d fc7d 	bl	8019146 <memcpy>
 800b84c:	68a0      	ldr	r0, [r4, #8]
 800b84e:	464a      	mov	r2, r9
 800b850:	19e9      	adds	r1, r5, r7
 800b852:	f00d fc78 	bl	8019146 <memcpy>
 800b856:	e7a1      	b.n	800b79c <ucdr_serialize_endian_uint32_t+0x74>

0800b858 <ucdr_deserialize_uint32_t>:
 800b858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b85c:	460d      	mov	r5, r1
 800b85e:	2104      	movs	r1, #4
 800b860:	4604      	mov	r4, r0
 800b862:	f000 fe01 	bl	800c468 <ucdr_buffer_alignment>
 800b866:	4601      	mov	r1, r0
 800b868:	4620      	mov	r0, r4
 800b86a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b86e:	f000 fe3f 	bl	800c4f0 <ucdr_advance_buffer>
 800b872:	2104      	movs	r1, #4
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fd97 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d138      	bne.n	800b8f0 <ucdr_deserialize_uint32_t+0x98>
 800b87e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b882:	42b7      	cmp	r7, r6
 800b884:	d92f      	bls.n	800b8e6 <ucdr_deserialize_uint32_t+0x8e>
 800b886:	6923      	ldr	r3, [r4, #16]
 800b888:	60a7      	str	r7, [r4, #8]
 800b88a:	1bbf      	subs	r7, r7, r6
 800b88c:	443b      	add	r3, r7
 800b88e:	f1c7 0904 	rsb	r9, r7, #4
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	4649      	mov	r1, r9
 800b896:	4620      	mov	r0, r4
 800b898:	f000 fd92 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d046      	beq.n	800b92e <ucdr_deserialize_uint32_t+0xd6>
 800b8a0:	7d23      	ldrb	r3, [r4, #20]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d05c      	beq.n	800b960 <ucdr_deserialize_uint32_t+0x108>
 800b8a6:	78f3      	ldrb	r3, [r6, #3]
 800b8a8:	702b      	strb	r3, [r5, #0]
 800b8aa:	2f00      	cmp	r7, #0
 800b8ac:	d04c      	beq.n	800b948 <ucdr_deserialize_uint32_t+0xf0>
 800b8ae:	78b3      	ldrb	r3, [r6, #2]
 800b8b0:	706b      	strb	r3, [r5, #1]
 800b8b2:	2f01      	cmp	r7, #1
 800b8b4:	f105 0302 	add.w	r3, r5, #2
 800b8b8:	d04a      	beq.n	800b950 <ucdr_deserialize_uint32_t+0xf8>
 800b8ba:	7873      	ldrb	r3, [r6, #1]
 800b8bc:	70ab      	strb	r3, [r5, #2]
 800b8be:	2f02      	cmp	r7, #2
 800b8c0:	f105 0303 	add.w	r3, r5, #3
 800b8c4:	d048      	beq.n	800b958 <ucdr_deserialize_uint32_t+0x100>
 800b8c6:	7833      	ldrb	r3, [r6, #0]
 800b8c8:	70eb      	strb	r3, [r5, #3]
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	68a2      	ldr	r2, [r4, #8]
 800b8ce:	7da0      	ldrb	r0, [r4, #22]
 800b8d0:	2104      	movs	r1, #4
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	444a      	add	r2, r9
 800b8d6:	1bdb      	subs	r3, r3, r7
 800b8d8:	7561      	strb	r1, [r4, #21]
 800b8da:	60a2      	str	r2, [r4, #8]
 800b8dc:	6123      	str	r3, [r4, #16]
 800b8de:	f080 0001 	eor.w	r0, r0, #1
 800b8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e6:	2104      	movs	r1, #4
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 fd69 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b8ee:	b1b0      	cbz	r0, 800b91e <ucdr_deserialize_uint32_t+0xc6>
 800b8f0:	7d23      	ldrb	r3, [r4, #20]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	68a3      	ldr	r3, [r4, #8]
 800b8f6:	d017      	beq.n	800b928 <ucdr_deserialize_uint32_t+0xd0>
 800b8f8:	78db      	ldrb	r3, [r3, #3]
 800b8fa:	702b      	strb	r3, [r5, #0]
 800b8fc:	68a3      	ldr	r3, [r4, #8]
 800b8fe:	789b      	ldrb	r3, [r3, #2]
 800b900:	706b      	strb	r3, [r5, #1]
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	70ab      	strb	r3, [r5, #2]
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	70eb      	strb	r3, [r5, #3]
 800b90e:	68a2      	ldr	r2, [r4, #8]
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	3204      	adds	r2, #4
 800b914:	3304      	adds	r3, #4
 800b916:	2104      	movs	r1, #4
 800b918:	60a2      	str	r2, [r4, #8]
 800b91a:	6123      	str	r3, [r4, #16]
 800b91c:	7561      	strb	r1, [r4, #21]
 800b91e:	7da0      	ldrb	r0, [r4, #22]
 800b920:	f080 0001 	eor.w	r0, r0, #1
 800b924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	e7ef      	b.n	800b90e <ucdr_deserialize_uint32_t+0xb6>
 800b92e:	68a2      	ldr	r2, [r4, #8]
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	7da0      	ldrb	r0, [r4, #22]
 800b934:	f884 8015 	strb.w	r8, [r4, #21]
 800b938:	1bd2      	subs	r2, r2, r7
 800b93a:	1bdb      	subs	r3, r3, r7
 800b93c:	60a2      	str	r2, [r4, #8]
 800b93e:	6123      	str	r3, [r4, #16]
 800b940:	f080 0001 	eor.w	r0, r0, #1
 800b944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b948:	68a3      	ldr	r3, [r4, #8]
 800b94a:	789b      	ldrb	r3, [r3, #2]
 800b94c:	706b      	strb	r3, [r5, #1]
 800b94e:	1cab      	adds	r3, r5, #2
 800b950:	68a2      	ldr	r2, [r4, #8]
 800b952:	7852      	ldrb	r2, [r2, #1]
 800b954:	f803 2b01 	strb.w	r2, [r3], #1
 800b958:	68a2      	ldr	r2, [r4, #8]
 800b95a:	7812      	ldrb	r2, [r2, #0]
 800b95c:	701a      	strb	r2, [r3, #0]
 800b95e:	e7b4      	b.n	800b8ca <ucdr_deserialize_uint32_t+0x72>
 800b960:	4631      	mov	r1, r6
 800b962:	463a      	mov	r2, r7
 800b964:	4628      	mov	r0, r5
 800b966:	f00d fbee 	bl	8019146 <memcpy>
 800b96a:	68a1      	ldr	r1, [r4, #8]
 800b96c:	464a      	mov	r2, r9
 800b96e:	19e8      	adds	r0, r5, r7
 800b970:	f00d fbe9 	bl	8019146 <memcpy>
 800b974:	e7a9      	b.n	800b8ca <ucdr_deserialize_uint32_t+0x72>
 800b976:	bf00      	nop

0800b978 <ucdr_deserialize_endian_uint32_t>:
 800b978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	460e      	mov	r6, r1
 800b97e:	2104      	movs	r1, #4
 800b980:	4604      	mov	r4, r0
 800b982:	4615      	mov	r5, r2
 800b984:	f000 fd70 	bl	800c468 <ucdr_buffer_alignment>
 800b988:	4601      	mov	r1, r0
 800b98a:	4620      	mov	r0, r4
 800b98c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b990:	f000 fdae 	bl	800c4f0 <ucdr_advance_buffer>
 800b994:	2104      	movs	r1, #4
 800b996:	4620      	mov	r0, r4
 800b998:	f000 fd06 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d13c      	bne.n	800ba1a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b9a0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b9a4:	42bb      	cmp	r3, r7
 800b9a6:	d933      	bls.n	800ba10 <ucdr_deserialize_endian_uint32_t+0x98>
 800b9a8:	eba3 0807 	sub.w	r8, r3, r7
 800b9ac:	60a3      	str	r3, [r4, #8]
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	f1c8 0a04 	rsb	sl, r8, #4
 800b9b4:	4443      	add	r3, r8
 800b9b6:	6123      	str	r3, [r4, #16]
 800b9b8:	4651      	mov	r1, sl
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fd00 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d048      	beq.n	800ba56 <ucdr_deserialize_endian_uint32_t+0xde>
 800b9c4:	2e01      	cmp	r6, #1
 800b9c6:	d061      	beq.n	800ba8c <ucdr_deserialize_endian_uint32_t+0x114>
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	702b      	strb	r3, [r5, #0]
 800b9cc:	f1b8 0f00 	cmp.w	r8, #0
 800b9d0:	d050      	beq.n	800ba74 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b9d2:	78bb      	ldrb	r3, [r7, #2]
 800b9d4:	706b      	strb	r3, [r5, #1]
 800b9d6:	f1b8 0f01 	cmp.w	r8, #1
 800b9da:	f105 0302 	add.w	r3, r5, #2
 800b9de:	d04d      	beq.n	800ba7c <ucdr_deserialize_endian_uint32_t+0x104>
 800b9e0:	787b      	ldrb	r3, [r7, #1]
 800b9e2:	70ab      	strb	r3, [r5, #2]
 800b9e4:	f1b8 0f02 	cmp.w	r8, #2
 800b9e8:	f105 0303 	add.w	r3, r5, #3
 800b9ec:	d04a      	beq.n	800ba84 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b9ee:	783b      	ldrb	r3, [r7, #0]
 800b9f0:	70eb      	strb	r3, [r5, #3]
 800b9f2:	6923      	ldr	r3, [r4, #16]
 800b9f4:	68a2      	ldr	r2, [r4, #8]
 800b9f6:	7da0      	ldrb	r0, [r4, #22]
 800b9f8:	2104      	movs	r1, #4
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4452      	add	r2, sl
 800b9fe:	eba3 0308 	sub.w	r3, r3, r8
 800ba02:	7561      	strb	r1, [r4, #21]
 800ba04:	60a2      	str	r2, [r4, #8]
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	f080 0001 	eor.w	r0, r0, #1
 800ba0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba10:	2104      	movs	r1, #4
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 fcd4 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800ba18:	b1a8      	cbz	r0, 800ba46 <ucdr_deserialize_endian_uint32_t+0xce>
 800ba1a:	2e01      	cmp	r6, #1
 800ba1c:	68a3      	ldr	r3, [r4, #8]
 800ba1e:	d017      	beq.n	800ba50 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ba20:	78db      	ldrb	r3, [r3, #3]
 800ba22:	702b      	strb	r3, [r5, #0]
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	789b      	ldrb	r3, [r3, #2]
 800ba28:	706b      	strb	r3, [r5, #1]
 800ba2a:	68a3      	ldr	r3, [r4, #8]
 800ba2c:	785b      	ldrb	r3, [r3, #1]
 800ba2e:	70ab      	strb	r3, [r5, #2]
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	70eb      	strb	r3, [r5, #3]
 800ba36:	68a2      	ldr	r2, [r4, #8]
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	3204      	adds	r2, #4
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	2104      	movs	r1, #4
 800ba40:	60a2      	str	r2, [r4, #8]
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	7561      	strb	r1, [r4, #21]
 800ba46:	7da0      	ldrb	r0, [r4, #22]
 800ba48:	f080 0001 	eor.w	r0, r0, #1
 800ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	602b      	str	r3, [r5, #0]
 800ba54:	e7ef      	b.n	800ba36 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ba56:	68a2      	ldr	r2, [r4, #8]
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	7da0      	ldrb	r0, [r4, #22]
 800ba5c:	f884 9015 	strb.w	r9, [r4, #21]
 800ba60:	eba2 0208 	sub.w	r2, r2, r8
 800ba64:	eba3 0308 	sub.w	r3, r3, r8
 800ba68:	60a2      	str	r2, [r4, #8]
 800ba6a:	6123      	str	r3, [r4, #16]
 800ba6c:	f080 0001 	eor.w	r0, r0, #1
 800ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba74:	68a3      	ldr	r3, [r4, #8]
 800ba76:	789b      	ldrb	r3, [r3, #2]
 800ba78:	706b      	strb	r3, [r5, #1]
 800ba7a:	1cab      	adds	r3, r5, #2
 800ba7c:	68a2      	ldr	r2, [r4, #8]
 800ba7e:	7852      	ldrb	r2, [r2, #1]
 800ba80:	f803 2b01 	strb.w	r2, [r3], #1
 800ba84:	68a2      	ldr	r2, [r4, #8]
 800ba86:	7812      	ldrb	r2, [r2, #0]
 800ba88:	701a      	strb	r2, [r3, #0]
 800ba8a:	e7b2      	b.n	800b9f2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	4642      	mov	r2, r8
 800ba90:	4628      	mov	r0, r5
 800ba92:	f00d fb58 	bl	8019146 <memcpy>
 800ba96:	68a1      	ldr	r1, [r4, #8]
 800ba98:	4652      	mov	r2, sl
 800ba9a:	eb05 0008 	add.w	r0, r5, r8
 800ba9e:	f00d fb52 	bl	8019146 <memcpy>
 800baa2:	e7a6      	b.n	800b9f2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800baa4 <ucdr_serialize_uint64_t>:
 800baa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa8:	2108      	movs	r1, #8
 800baaa:	b082      	sub	sp, #8
 800baac:	4604      	mov	r4, r0
 800baae:	e9cd 2300 	strd	r2, r3, [sp]
 800bab2:	f000 fcd9 	bl	800c468 <ucdr_buffer_alignment>
 800bab6:	4601      	mov	r1, r0
 800bab8:	4620      	mov	r0, r4
 800baba:	7d67      	ldrb	r7, [r4, #21]
 800babc:	f000 fd18 	bl	800c4f0 <ucdr_advance_buffer>
 800bac0:	2108      	movs	r1, #8
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fc70 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d14e      	bne.n	800bb6a <ucdr_serialize_uint64_t+0xc6>
 800bacc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bad0:	42ab      	cmp	r3, r5
 800bad2:	d945      	bls.n	800bb60 <ucdr_serialize_uint64_t+0xbc>
 800bad4:	1b5e      	subs	r6, r3, r5
 800bad6:	60a3      	str	r3, [r4, #8]
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	f1c6 0808 	rsb	r8, r6, #8
 800bade:	4433      	add	r3, r6
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	4641      	mov	r1, r8
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 fc6b 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800baea:	2800      	cmp	r0, #0
 800baec:	d074      	beq.n	800bbd8 <ucdr_serialize_uint64_t+0x134>
 800baee:	7d23      	ldrb	r3, [r4, #20]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	f000 809b 	beq.w	800bc2c <ucdr_serialize_uint64_t+0x188>
 800baf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bafa:	702b      	strb	r3, [r5, #0]
 800bafc:	2e00      	cmp	r6, #0
 800bafe:	d078      	beq.n	800bbf2 <ucdr_serialize_uint64_t+0x14e>
 800bb00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb04:	706b      	strb	r3, [r5, #1]
 800bb06:	2e01      	cmp	r6, #1
 800bb08:	d077      	beq.n	800bbfa <ucdr_serialize_uint64_t+0x156>
 800bb0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bb0e:	70ab      	strb	r3, [r5, #2]
 800bb10:	2e02      	cmp	r6, #2
 800bb12:	d076      	beq.n	800bc02 <ucdr_serialize_uint64_t+0x15e>
 800bb14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bb18:	70eb      	strb	r3, [r5, #3]
 800bb1a:	2e03      	cmp	r6, #3
 800bb1c:	d075      	beq.n	800bc0a <ucdr_serialize_uint64_t+0x166>
 800bb1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb22:	712b      	strb	r3, [r5, #4]
 800bb24:	2e04      	cmp	r6, #4
 800bb26:	d074      	beq.n	800bc12 <ucdr_serialize_uint64_t+0x16e>
 800bb28:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bb2c:	716b      	strb	r3, [r5, #5]
 800bb2e:	2e05      	cmp	r6, #5
 800bb30:	d073      	beq.n	800bc1a <ucdr_serialize_uint64_t+0x176>
 800bb32:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bb36:	71ab      	strb	r3, [r5, #6]
 800bb38:	2e06      	cmp	r6, #6
 800bb3a:	d072      	beq.n	800bc22 <ucdr_serialize_uint64_t+0x17e>
 800bb3c:	f89d 3000 	ldrb.w	r3, [sp]
 800bb40:	71eb      	strb	r3, [r5, #7]
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	68a2      	ldr	r2, [r4, #8]
 800bb46:	7da0      	ldrb	r0, [r4, #22]
 800bb48:	3308      	adds	r3, #8
 800bb4a:	1b9e      	subs	r6, r3, r6
 800bb4c:	4442      	add	r2, r8
 800bb4e:	2308      	movs	r3, #8
 800bb50:	f080 0001 	eor.w	r0, r0, #1
 800bb54:	60a2      	str	r2, [r4, #8]
 800bb56:	6126      	str	r6, [r4, #16]
 800bb58:	7563      	strb	r3, [r4, #21]
 800bb5a:	b002      	add	sp, #8
 800bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb60:	2108      	movs	r1, #8
 800bb62:	4620      	mov	r0, r4
 800bb64:	f000 fc2c 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bb68:	b350      	cbz	r0, 800bbc0 <ucdr_serialize_uint64_t+0x11c>
 800bb6a:	7d23      	ldrb	r3, [r4, #20]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d02d      	beq.n	800bbcc <ucdr_serialize_uint64_t+0x128>
 800bb70:	68a3      	ldr	r3, [r4, #8]
 800bb72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	68a3      	ldr	r3, [r4, #8]
 800bb7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb7e:	705a      	strb	r2, [r3, #1]
 800bb80:	68a3      	ldr	r3, [r4, #8]
 800bb82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb86:	709a      	strb	r2, [r3, #2]
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb8e:	70da      	strb	r2, [r3, #3]
 800bb90:	68a3      	ldr	r3, [r4, #8]
 800bb92:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bb96:	711a      	strb	r2, [r3, #4]
 800bb98:	68a3      	ldr	r3, [r4, #8]
 800bb9a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bb9e:	715a      	strb	r2, [r3, #5]
 800bba0:	68a3      	ldr	r3, [r4, #8]
 800bba2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bba6:	719a      	strb	r2, [r3, #6]
 800bba8:	68a3      	ldr	r3, [r4, #8]
 800bbaa:	f89d 2000 	ldrb.w	r2, [sp]
 800bbae:	71da      	strb	r2, [r3, #7]
 800bbb0:	68a2      	ldr	r2, [r4, #8]
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	3208      	adds	r2, #8
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	2108      	movs	r1, #8
 800bbba:	60a2      	str	r2, [r4, #8]
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	7561      	strb	r1, [r4, #21]
 800bbc0:	7da0      	ldrb	r0, [r4, #22]
 800bbc2:	f080 0001 	eor.w	r0, r0, #1
 800bbc6:	b002      	add	sp, #8
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	466b      	mov	r3, sp
 800bbce:	cb03      	ldmia	r3!, {r0, r1}
 800bbd0:	68a3      	ldr	r3, [r4, #8]
 800bbd2:	6018      	str	r0, [r3, #0]
 800bbd4:	6059      	str	r1, [r3, #4]
 800bbd6:	e7eb      	b.n	800bbb0 <ucdr_serialize_uint64_t+0x10c>
 800bbd8:	68a2      	ldr	r2, [r4, #8]
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	7da0      	ldrb	r0, [r4, #22]
 800bbde:	7567      	strb	r7, [r4, #21]
 800bbe0:	1b92      	subs	r2, r2, r6
 800bbe2:	1b9b      	subs	r3, r3, r6
 800bbe4:	f080 0001 	eor.w	r0, r0, #1
 800bbe8:	60a2      	str	r2, [r4, #8]
 800bbea:	6123      	str	r3, [r4, #16]
 800bbec:	b002      	add	sp, #8
 800bbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbf8:	701a      	strb	r2, [r3, #0]
 800bbfa:	68a3      	ldr	r3, [r4, #8]
 800bbfc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	68a3      	ldr	r3, [r4, #8]
 800bc04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc08:	701a      	strb	r2, [r3, #0]
 800bc0a:	68a3      	ldr	r3, [r4, #8]
 800bc0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bc10:	701a      	strb	r2, [r3, #0]
 800bc12:	68a3      	ldr	r3, [r4, #8]
 800bc14:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bc20:	701a      	strb	r2, [r3, #0]
 800bc22:	68a3      	ldr	r3, [r4, #8]
 800bc24:	f89d 2000 	ldrb.w	r2, [sp]
 800bc28:	701a      	strb	r2, [r3, #0]
 800bc2a:	e78a      	b.n	800bb42 <ucdr_serialize_uint64_t+0x9e>
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	466d      	mov	r5, sp
 800bc30:	4629      	mov	r1, r5
 800bc32:	4632      	mov	r2, r6
 800bc34:	f00d fa87 	bl	8019146 <memcpy>
 800bc38:	68a0      	ldr	r0, [r4, #8]
 800bc3a:	4642      	mov	r2, r8
 800bc3c:	19a9      	adds	r1, r5, r6
 800bc3e:	f00d fa82 	bl	8019146 <memcpy>
 800bc42:	e77e      	b.n	800bb42 <ucdr_serialize_uint64_t+0x9e>

0800bc44 <ucdr_serialize_int16_t>:
 800bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	b082      	sub	sp, #8
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	2102      	movs	r1, #2
 800bc4e:	4604      	mov	r4, r0
 800bc50:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bc54:	f000 fc08 	bl	800c468 <ucdr_buffer_alignment>
 800bc58:	4601      	mov	r1, r0
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	7d67      	ldrb	r7, [r4, #21]
 800bc5e:	f000 fc47 	bl	800c4f0 <ucdr_advance_buffer>
 800bc62:	2102      	movs	r1, #2
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 fb9f 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800bc6a:	bb78      	cbnz	r0, 800bccc <ucdr_serialize_int16_t+0x88>
 800bc6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	d926      	bls.n	800bcc2 <ucdr_serialize_int16_t+0x7e>
 800bc74:	1b5e      	subs	r6, r3, r5
 800bc76:	60a3      	str	r3, [r4, #8]
 800bc78:	6923      	ldr	r3, [r4, #16]
 800bc7a:	f1c6 0802 	rsb	r8, r6, #2
 800bc7e:	4433      	add	r3, r6
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	4641      	mov	r1, r8
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 fb9b 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d03b      	beq.n	800bd06 <ucdr_serialize_int16_t+0xc2>
 800bc8e:	7d23      	ldrb	r3, [r4, #20]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d04a      	beq.n	800bd2a <ucdr_serialize_int16_t+0xe6>
 800bc94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc98:	702b      	strb	r3, [r5, #0]
 800bc9a:	2e00      	cmp	r6, #0
 800bc9c:	d040      	beq.n	800bd20 <ucdr_serialize_int16_t+0xdc>
 800bc9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bca2:	706b      	strb	r3, [r5, #1]
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	68a2      	ldr	r2, [r4, #8]
 800bca8:	7da0      	ldrb	r0, [r4, #22]
 800bcaa:	3302      	adds	r3, #2
 800bcac:	1b9e      	subs	r6, r3, r6
 800bcae:	4442      	add	r2, r8
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	f080 0001 	eor.w	r0, r0, #1
 800bcb6:	60a2      	str	r2, [r4, #8]
 800bcb8:	6126      	str	r6, [r4, #16]
 800bcba:	7563      	strb	r3, [r4, #21]
 800bcbc:	b002      	add	sp, #8
 800bcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc2:	2102      	movs	r1, #2
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f000 fb7b 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bcca:	b190      	cbz	r0, 800bcf2 <ucdr_serialize_int16_t+0xae>
 800bccc:	7d23      	ldrb	r3, [r4, #20]
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	d014      	beq.n	800bcfe <ucdr_serialize_int16_t+0xba>
 800bcd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bce0:	705a      	strb	r2, [r3, #1]
 800bce2:	68a2      	ldr	r2, [r4, #8]
 800bce4:	6923      	ldr	r3, [r4, #16]
 800bce6:	3202      	adds	r2, #2
 800bce8:	3302      	adds	r3, #2
 800bcea:	2102      	movs	r1, #2
 800bcec:	60a2      	str	r2, [r4, #8]
 800bcee:	6123      	str	r3, [r4, #16]
 800bcf0:	7561      	strb	r1, [r4, #21]
 800bcf2:	7da0      	ldrb	r0, [r4, #22]
 800bcf4:	f080 0001 	eor.w	r0, r0, #1
 800bcf8:	b002      	add	sp, #8
 800bcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bd02:	801a      	strh	r2, [r3, #0]
 800bd04:	e7ed      	b.n	800bce2 <ucdr_serialize_int16_t+0x9e>
 800bd06:	68a2      	ldr	r2, [r4, #8]
 800bd08:	6923      	ldr	r3, [r4, #16]
 800bd0a:	7da0      	ldrb	r0, [r4, #22]
 800bd0c:	7567      	strb	r7, [r4, #21]
 800bd0e:	1b92      	subs	r2, r2, r6
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	f080 0001 	eor.w	r0, r0, #1
 800bd16:	60a2      	str	r2, [r4, #8]
 800bd18:	6123      	str	r3, [r4, #16]
 800bd1a:	b002      	add	sp, #8
 800bd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd20:	68a3      	ldr	r3, [r4, #8]
 800bd22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	e7bc      	b.n	800bca4 <ucdr_serialize_int16_t+0x60>
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	f10d 0506 	add.w	r5, sp, #6
 800bd30:	4629      	mov	r1, r5
 800bd32:	4632      	mov	r2, r6
 800bd34:	f00d fa07 	bl	8019146 <memcpy>
 800bd38:	68a0      	ldr	r0, [r4, #8]
 800bd3a:	4642      	mov	r2, r8
 800bd3c:	19a9      	adds	r1, r5, r6
 800bd3e:	f00d fa02 	bl	8019146 <memcpy>
 800bd42:	e7af      	b.n	800bca4 <ucdr_serialize_int16_t+0x60>

0800bd44 <ucdr_deserialize_int16_t>:
 800bd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd48:	460d      	mov	r5, r1
 800bd4a:	2102      	movs	r1, #2
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	f000 fb8b 	bl	800c468 <ucdr_buffer_alignment>
 800bd52:	4601      	mov	r1, r0
 800bd54:	4620      	mov	r0, r4
 800bd56:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd5a:	f000 fbc9 	bl	800c4f0 <ucdr_advance_buffer>
 800bd5e:	2102      	movs	r1, #2
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fb21 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800bd66:	bb60      	cbnz	r0, 800bdc2 <ucdr_deserialize_int16_t+0x7e>
 800bd68:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bd6c:	42be      	cmp	r6, r7
 800bd6e:	d923      	bls.n	800bdb8 <ucdr_deserialize_int16_t+0x74>
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	60a6      	str	r6, [r4, #8]
 800bd74:	1bf6      	subs	r6, r6, r7
 800bd76:	4433      	add	r3, r6
 800bd78:	f1c6 0902 	rsb	r9, r6, #2
 800bd7c:	6123      	str	r3, [r4, #16]
 800bd7e:	4649      	mov	r1, r9
 800bd80:	4620      	mov	r0, r4
 800bd82:	f000 fb1d 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d034      	beq.n	800bdf4 <ucdr_deserialize_int16_t+0xb0>
 800bd8a:	7d23      	ldrb	r3, [r4, #20]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d042      	beq.n	800be16 <ucdr_deserialize_int16_t+0xd2>
 800bd90:	787b      	ldrb	r3, [r7, #1]
 800bd92:	702b      	strb	r3, [r5, #0]
 800bd94:	2e00      	cmp	r6, #0
 800bd96:	d03a      	beq.n	800be0e <ucdr_deserialize_int16_t+0xca>
 800bd98:	783b      	ldrb	r3, [r7, #0]
 800bd9a:	706b      	strb	r3, [r5, #1]
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	68a2      	ldr	r2, [r4, #8]
 800bda0:	7da0      	ldrb	r0, [r4, #22]
 800bda2:	2102      	movs	r1, #2
 800bda4:	3302      	adds	r3, #2
 800bda6:	444a      	add	r2, r9
 800bda8:	1b9b      	subs	r3, r3, r6
 800bdaa:	7561      	strb	r1, [r4, #21]
 800bdac:	60a2      	str	r2, [r4, #8]
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	f080 0001 	eor.w	r0, r0, #1
 800bdb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb8:	2102      	movs	r1, #2
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 fb00 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bdc0:	b180      	cbz	r0, 800bde4 <ucdr_deserialize_int16_t+0xa0>
 800bdc2:	7d23      	ldrb	r3, [r4, #20]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	68a3      	ldr	r3, [r4, #8]
 800bdc8:	d011      	beq.n	800bdee <ucdr_deserialize_int16_t+0xaa>
 800bdca:	785b      	ldrb	r3, [r3, #1]
 800bdcc:	702b      	strb	r3, [r5, #0]
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	706b      	strb	r3, [r5, #1]
 800bdd4:	68a2      	ldr	r2, [r4, #8]
 800bdd6:	6923      	ldr	r3, [r4, #16]
 800bdd8:	3202      	adds	r2, #2
 800bdda:	3302      	adds	r3, #2
 800bddc:	2102      	movs	r1, #2
 800bdde:	60a2      	str	r2, [r4, #8]
 800bde0:	6123      	str	r3, [r4, #16]
 800bde2:	7561      	strb	r1, [r4, #21]
 800bde4:	7da0      	ldrb	r0, [r4, #22]
 800bde6:	f080 0001 	eor.w	r0, r0, #1
 800bdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	802b      	strh	r3, [r5, #0]
 800bdf2:	e7ef      	b.n	800bdd4 <ucdr_deserialize_int16_t+0x90>
 800bdf4:	68a2      	ldr	r2, [r4, #8]
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	7da0      	ldrb	r0, [r4, #22]
 800bdfa:	f884 8015 	strb.w	r8, [r4, #21]
 800bdfe:	1b92      	subs	r2, r2, r6
 800be00:	1b9b      	subs	r3, r3, r6
 800be02:	60a2      	str	r2, [r4, #8]
 800be04:	6123      	str	r3, [r4, #16]
 800be06:	f080 0001 	eor.w	r0, r0, #1
 800be0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0e:	68a3      	ldr	r3, [r4, #8]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	706b      	strb	r3, [r5, #1]
 800be14:	e7c2      	b.n	800bd9c <ucdr_deserialize_int16_t+0x58>
 800be16:	4639      	mov	r1, r7
 800be18:	4632      	mov	r2, r6
 800be1a:	4628      	mov	r0, r5
 800be1c:	f00d f993 	bl	8019146 <memcpy>
 800be20:	68a1      	ldr	r1, [r4, #8]
 800be22:	464a      	mov	r2, r9
 800be24:	19a8      	adds	r0, r5, r6
 800be26:	f00d f98e 	bl	8019146 <memcpy>
 800be2a:	e7b7      	b.n	800bd9c <ucdr_deserialize_int16_t+0x58>

0800be2c <ucdr_serialize_int32_t>:
 800be2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	4604      	mov	r4, r0
 800be34:	9101      	str	r1, [sp, #4]
 800be36:	2104      	movs	r1, #4
 800be38:	f000 fb16 	bl	800c468 <ucdr_buffer_alignment>
 800be3c:	4601      	mov	r1, r0
 800be3e:	4620      	mov	r0, r4
 800be40:	7d67      	ldrb	r7, [r4, #21]
 800be42:	f000 fb55 	bl	800c4f0 <ucdr_advance_buffer>
 800be46:	2104      	movs	r1, #4
 800be48:	4620      	mov	r0, r4
 800be4a:	f000 faad 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d139      	bne.n	800bec6 <ucdr_serialize_int32_t+0x9a>
 800be52:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be56:	42ab      	cmp	r3, r5
 800be58:	d930      	bls.n	800bebc <ucdr_serialize_int32_t+0x90>
 800be5a:	1b5e      	subs	r6, r3, r5
 800be5c:	60a3      	str	r3, [r4, #8]
 800be5e:	6923      	ldr	r3, [r4, #16]
 800be60:	f1c6 0804 	rsb	r8, r6, #4
 800be64:	4433      	add	r3, r6
 800be66:	6123      	str	r3, [r4, #16]
 800be68:	4641      	mov	r1, r8
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 faa8 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800be70:	2800      	cmp	r0, #0
 800be72:	d04c      	beq.n	800bf0e <ucdr_serialize_int32_t+0xe2>
 800be74:	7d23      	ldrb	r3, [r4, #20]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d063      	beq.n	800bf42 <ucdr_serialize_int32_t+0x116>
 800be7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be7e:	702b      	strb	r3, [r5, #0]
 800be80:	2e00      	cmp	r6, #0
 800be82:	d051      	beq.n	800bf28 <ucdr_serialize_int32_t+0xfc>
 800be84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be88:	706b      	strb	r3, [r5, #1]
 800be8a:	2e01      	cmp	r6, #1
 800be8c:	d050      	beq.n	800bf30 <ucdr_serialize_int32_t+0x104>
 800be8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be92:	70ab      	strb	r3, [r5, #2]
 800be94:	2e02      	cmp	r6, #2
 800be96:	d04f      	beq.n	800bf38 <ucdr_serialize_int32_t+0x10c>
 800be98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be9c:	70eb      	strb	r3, [r5, #3]
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	68a2      	ldr	r2, [r4, #8]
 800bea2:	7da0      	ldrb	r0, [r4, #22]
 800bea4:	3304      	adds	r3, #4
 800bea6:	1b9e      	subs	r6, r3, r6
 800bea8:	4442      	add	r2, r8
 800beaa:	2304      	movs	r3, #4
 800beac:	f080 0001 	eor.w	r0, r0, #1
 800beb0:	60a2      	str	r2, [r4, #8]
 800beb2:	6126      	str	r6, [r4, #16]
 800beb4:	7563      	strb	r3, [r4, #21]
 800beb6:	b002      	add	sp, #8
 800beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bebc:	2104      	movs	r1, #4
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 fa7e 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bec4:	b1d0      	cbz	r0, 800befc <ucdr_serialize_int32_t+0xd0>
 800bec6:	7d23      	ldrb	r3, [r4, #20]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	d01c      	beq.n	800bf08 <ucdr_serialize_int32_t+0xdc>
 800bece:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bed2:	701a      	strb	r2, [r3, #0]
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800beda:	705a      	strb	r2, [r3, #1]
 800bedc:	68a3      	ldr	r3, [r4, #8]
 800bede:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bee2:	709a      	strb	r2, [r3, #2]
 800bee4:	68a3      	ldr	r3, [r4, #8]
 800bee6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800beea:	70da      	strb	r2, [r3, #3]
 800beec:	68a2      	ldr	r2, [r4, #8]
 800beee:	6923      	ldr	r3, [r4, #16]
 800bef0:	3204      	adds	r2, #4
 800bef2:	3304      	adds	r3, #4
 800bef4:	2104      	movs	r1, #4
 800bef6:	60a2      	str	r2, [r4, #8]
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	7561      	strb	r1, [r4, #21]
 800befc:	7da0      	ldrb	r0, [r4, #22]
 800befe:	f080 0001 	eor.w	r0, r0, #1
 800bf02:	b002      	add	sp, #8
 800bf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf08:	9a01      	ldr	r2, [sp, #4]
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	e7ee      	b.n	800beec <ucdr_serialize_int32_t+0xc0>
 800bf0e:	68a2      	ldr	r2, [r4, #8]
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	7da0      	ldrb	r0, [r4, #22]
 800bf14:	7567      	strb	r7, [r4, #21]
 800bf16:	1b92      	subs	r2, r2, r6
 800bf18:	1b9b      	subs	r3, r3, r6
 800bf1a:	f080 0001 	eor.w	r0, r0, #1
 800bf1e:	60a2      	str	r2, [r4, #8]
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	b002      	add	sp, #8
 800bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf28:	68a3      	ldr	r3, [r4, #8]
 800bf2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	68a3      	ldr	r3, [r4, #8]
 800bf32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf36:	701a      	strb	r2, [r3, #0]
 800bf38:	68a3      	ldr	r3, [r4, #8]
 800bf3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf3e:	701a      	strb	r2, [r3, #0]
 800bf40:	e7ad      	b.n	800be9e <ucdr_serialize_int32_t+0x72>
 800bf42:	4628      	mov	r0, r5
 800bf44:	ad01      	add	r5, sp, #4
 800bf46:	4629      	mov	r1, r5
 800bf48:	4632      	mov	r2, r6
 800bf4a:	f00d f8fc 	bl	8019146 <memcpy>
 800bf4e:	68a0      	ldr	r0, [r4, #8]
 800bf50:	4642      	mov	r2, r8
 800bf52:	19a9      	adds	r1, r5, r6
 800bf54:	f00d f8f7 	bl	8019146 <memcpy>
 800bf58:	e7a1      	b.n	800be9e <ucdr_serialize_int32_t+0x72>
 800bf5a:	bf00      	nop

0800bf5c <ucdr_deserialize_int32_t>:
 800bf5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf60:	460d      	mov	r5, r1
 800bf62:	2104      	movs	r1, #4
 800bf64:	4604      	mov	r4, r0
 800bf66:	f000 fa7f 	bl	800c468 <ucdr_buffer_alignment>
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf72:	f000 fabd 	bl	800c4f0 <ucdr_advance_buffer>
 800bf76:	2104      	movs	r1, #4
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 fa15 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d138      	bne.n	800bff4 <ucdr_deserialize_int32_t+0x98>
 800bf82:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bf86:	42b7      	cmp	r7, r6
 800bf88:	d92f      	bls.n	800bfea <ucdr_deserialize_int32_t+0x8e>
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	60a7      	str	r7, [r4, #8]
 800bf8e:	1bbf      	subs	r7, r7, r6
 800bf90:	443b      	add	r3, r7
 800bf92:	f1c7 0904 	rsb	r9, r7, #4
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	4649      	mov	r1, r9
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fa10 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d046      	beq.n	800c032 <ucdr_deserialize_int32_t+0xd6>
 800bfa4:	7d23      	ldrb	r3, [r4, #20]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d05c      	beq.n	800c064 <ucdr_deserialize_int32_t+0x108>
 800bfaa:	78f3      	ldrb	r3, [r6, #3]
 800bfac:	702b      	strb	r3, [r5, #0]
 800bfae:	2f00      	cmp	r7, #0
 800bfb0:	d04c      	beq.n	800c04c <ucdr_deserialize_int32_t+0xf0>
 800bfb2:	78b3      	ldrb	r3, [r6, #2]
 800bfb4:	706b      	strb	r3, [r5, #1]
 800bfb6:	2f01      	cmp	r7, #1
 800bfb8:	f105 0302 	add.w	r3, r5, #2
 800bfbc:	d04a      	beq.n	800c054 <ucdr_deserialize_int32_t+0xf8>
 800bfbe:	7873      	ldrb	r3, [r6, #1]
 800bfc0:	70ab      	strb	r3, [r5, #2]
 800bfc2:	2f02      	cmp	r7, #2
 800bfc4:	f105 0303 	add.w	r3, r5, #3
 800bfc8:	d048      	beq.n	800c05c <ucdr_deserialize_int32_t+0x100>
 800bfca:	7833      	ldrb	r3, [r6, #0]
 800bfcc:	70eb      	strb	r3, [r5, #3]
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	68a2      	ldr	r2, [r4, #8]
 800bfd2:	7da0      	ldrb	r0, [r4, #22]
 800bfd4:	2104      	movs	r1, #4
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	444a      	add	r2, r9
 800bfda:	1bdb      	subs	r3, r3, r7
 800bfdc:	7561      	strb	r1, [r4, #21]
 800bfde:	60a2      	str	r2, [r4, #8]
 800bfe0:	6123      	str	r3, [r4, #16]
 800bfe2:	f080 0001 	eor.w	r0, r0, #1
 800bfe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfea:	2104      	movs	r1, #4
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 f9e7 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800bff2:	b1b0      	cbz	r0, 800c022 <ucdr_deserialize_int32_t+0xc6>
 800bff4:	7d23      	ldrb	r3, [r4, #20]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	68a3      	ldr	r3, [r4, #8]
 800bffa:	d017      	beq.n	800c02c <ucdr_deserialize_int32_t+0xd0>
 800bffc:	78db      	ldrb	r3, [r3, #3]
 800bffe:	702b      	strb	r3, [r5, #0]
 800c000:	68a3      	ldr	r3, [r4, #8]
 800c002:	789b      	ldrb	r3, [r3, #2]
 800c004:	706b      	strb	r3, [r5, #1]
 800c006:	68a3      	ldr	r3, [r4, #8]
 800c008:	785b      	ldrb	r3, [r3, #1]
 800c00a:	70ab      	strb	r3, [r5, #2]
 800c00c:	68a3      	ldr	r3, [r4, #8]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	70eb      	strb	r3, [r5, #3]
 800c012:	68a2      	ldr	r2, [r4, #8]
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	3204      	adds	r2, #4
 800c018:	3304      	adds	r3, #4
 800c01a:	2104      	movs	r1, #4
 800c01c:	60a2      	str	r2, [r4, #8]
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	7561      	strb	r1, [r4, #21]
 800c022:	7da0      	ldrb	r0, [r4, #22]
 800c024:	f080 0001 	eor.w	r0, r0, #1
 800c028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	602b      	str	r3, [r5, #0]
 800c030:	e7ef      	b.n	800c012 <ucdr_deserialize_int32_t+0xb6>
 800c032:	68a2      	ldr	r2, [r4, #8]
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	7da0      	ldrb	r0, [r4, #22]
 800c038:	f884 8015 	strb.w	r8, [r4, #21]
 800c03c:	1bd2      	subs	r2, r2, r7
 800c03e:	1bdb      	subs	r3, r3, r7
 800c040:	60a2      	str	r2, [r4, #8]
 800c042:	6123      	str	r3, [r4, #16]
 800c044:	f080 0001 	eor.w	r0, r0, #1
 800c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04c:	68a3      	ldr	r3, [r4, #8]
 800c04e:	789b      	ldrb	r3, [r3, #2]
 800c050:	706b      	strb	r3, [r5, #1]
 800c052:	1cab      	adds	r3, r5, #2
 800c054:	68a2      	ldr	r2, [r4, #8]
 800c056:	7852      	ldrb	r2, [r2, #1]
 800c058:	f803 2b01 	strb.w	r2, [r3], #1
 800c05c:	68a2      	ldr	r2, [r4, #8]
 800c05e:	7812      	ldrb	r2, [r2, #0]
 800c060:	701a      	strb	r2, [r3, #0]
 800c062:	e7b4      	b.n	800bfce <ucdr_deserialize_int32_t+0x72>
 800c064:	4631      	mov	r1, r6
 800c066:	463a      	mov	r2, r7
 800c068:	4628      	mov	r0, r5
 800c06a:	f00d f86c 	bl	8019146 <memcpy>
 800c06e:	68a1      	ldr	r1, [r4, #8]
 800c070:	464a      	mov	r2, r9
 800c072:	19e8      	adds	r0, r5, r7
 800c074:	f00d f867 	bl	8019146 <memcpy>
 800c078:	e7a9      	b.n	800bfce <ucdr_deserialize_int32_t+0x72>
 800c07a:	bf00      	nop

0800c07c <ucdr_serialize_double>:
 800c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c080:	2108      	movs	r1, #8
 800c082:	b082      	sub	sp, #8
 800c084:	4604      	mov	r4, r0
 800c086:	ed8d 0b00 	vstr	d0, [sp]
 800c08a:	f000 f9ed 	bl	800c468 <ucdr_buffer_alignment>
 800c08e:	4601      	mov	r1, r0
 800c090:	4620      	mov	r0, r4
 800c092:	7d67      	ldrb	r7, [r4, #21]
 800c094:	f000 fa2c 	bl	800c4f0 <ucdr_advance_buffer>
 800c098:	2108      	movs	r1, #8
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 f984 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d14e      	bne.n	800c142 <ucdr_serialize_double+0xc6>
 800c0a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c0a8:	42ab      	cmp	r3, r5
 800c0aa:	d945      	bls.n	800c138 <ucdr_serialize_double+0xbc>
 800c0ac:	1b5e      	subs	r6, r3, r5
 800c0ae:	60a3      	str	r3, [r4, #8]
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	f1c6 0808 	rsb	r8, r6, #8
 800c0b6:	4433      	add	r3, r6
 800c0b8:	6123      	str	r3, [r4, #16]
 800c0ba:	4641      	mov	r1, r8
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 f97f 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d074      	beq.n	800c1b0 <ucdr_serialize_double+0x134>
 800c0c6:	7d23      	ldrb	r3, [r4, #20]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	f000 809b 	beq.w	800c204 <ucdr_serialize_double+0x188>
 800c0ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0d2:	702b      	strb	r3, [r5, #0]
 800c0d4:	2e00      	cmp	r6, #0
 800c0d6:	d078      	beq.n	800c1ca <ucdr_serialize_double+0x14e>
 800c0d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c0dc:	706b      	strb	r3, [r5, #1]
 800c0de:	2e01      	cmp	r6, #1
 800c0e0:	d077      	beq.n	800c1d2 <ucdr_serialize_double+0x156>
 800c0e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c0e6:	70ab      	strb	r3, [r5, #2]
 800c0e8:	2e02      	cmp	r6, #2
 800c0ea:	d076      	beq.n	800c1da <ucdr_serialize_double+0x15e>
 800c0ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0f0:	70eb      	strb	r3, [r5, #3]
 800c0f2:	2e03      	cmp	r6, #3
 800c0f4:	d075      	beq.n	800c1e2 <ucdr_serialize_double+0x166>
 800c0f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c0fa:	712b      	strb	r3, [r5, #4]
 800c0fc:	2e04      	cmp	r6, #4
 800c0fe:	d074      	beq.n	800c1ea <ucdr_serialize_double+0x16e>
 800c100:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c104:	716b      	strb	r3, [r5, #5]
 800c106:	2e05      	cmp	r6, #5
 800c108:	d073      	beq.n	800c1f2 <ucdr_serialize_double+0x176>
 800c10a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c10e:	71ab      	strb	r3, [r5, #6]
 800c110:	2e06      	cmp	r6, #6
 800c112:	d072      	beq.n	800c1fa <ucdr_serialize_double+0x17e>
 800c114:	f89d 3000 	ldrb.w	r3, [sp]
 800c118:	71eb      	strb	r3, [r5, #7]
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	68a2      	ldr	r2, [r4, #8]
 800c11e:	7da0      	ldrb	r0, [r4, #22]
 800c120:	3308      	adds	r3, #8
 800c122:	1b9e      	subs	r6, r3, r6
 800c124:	4442      	add	r2, r8
 800c126:	2308      	movs	r3, #8
 800c128:	f080 0001 	eor.w	r0, r0, #1
 800c12c:	60a2      	str	r2, [r4, #8]
 800c12e:	6126      	str	r6, [r4, #16]
 800c130:	7563      	strb	r3, [r4, #21]
 800c132:	b002      	add	sp, #8
 800c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c138:	2108      	movs	r1, #8
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 f940 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800c140:	b350      	cbz	r0, 800c198 <ucdr_serialize_double+0x11c>
 800c142:	7d23      	ldrb	r3, [r4, #20]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d02d      	beq.n	800c1a4 <ucdr_serialize_double+0x128>
 800c148:	68a3      	ldr	r3, [r4, #8]
 800c14a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	68a3      	ldr	r3, [r4, #8]
 800c152:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c156:	705a      	strb	r2, [r3, #1]
 800c158:	68a3      	ldr	r3, [r4, #8]
 800c15a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c15e:	709a      	strb	r2, [r3, #2]
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c166:	70da      	strb	r2, [r3, #3]
 800c168:	68a3      	ldr	r3, [r4, #8]
 800c16a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c16e:	711a      	strb	r2, [r3, #4]
 800c170:	68a3      	ldr	r3, [r4, #8]
 800c172:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c176:	715a      	strb	r2, [r3, #5]
 800c178:	68a3      	ldr	r3, [r4, #8]
 800c17a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c17e:	719a      	strb	r2, [r3, #6]
 800c180:	68a3      	ldr	r3, [r4, #8]
 800c182:	f89d 2000 	ldrb.w	r2, [sp]
 800c186:	71da      	strb	r2, [r3, #7]
 800c188:	68a2      	ldr	r2, [r4, #8]
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	3208      	adds	r2, #8
 800c18e:	3308      	adds	r3, #8
 800c190:	2108      	movs	r1, #8
 800c192:	60a2      	str	r2, [r4, #8]
 800c194:	6123      	str	r3, [r4, #16]
 800c196:	7561      	strb	r1, [r4, #21]
 800c198:	7da0      	ldrb	r0, [r4, #22]
 800c19a:	f080 0001 	eor.w	r0, r0, #1
 800c19e:	b002      	add	sp, #8
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	466b      	mov	r3, sp
 800c1a6:	cb03      	ldmia	r3!, {r0, r1}
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	6018      	str	r0, [r3, #0]
 800c1ac:	6059      	str	r1, [r3, #4]
 800c1ae:	e7eb      	b.n	800c188 <ucdr_serialize_double+0x10c>
 800c1b0:	68a2      	ldr	r2, [r4, #8]
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	7da0      	ldrb	r0, [r4, #22]
 800c1b6:	7567      	strb	r7, [r4, #21]
 800c1b8:	1b92      	subs	r2, r2, r6
 800c1ba:	1b9b      	subs	r3, r3, r6
 800c1bc:	f080 0001 	eor.w	r0, r0, #1
 800c1c0:	60a2      	str	r2, [r4, #8]
 800c1c2:	6123      	str	r3, [r4, #16]
 800c1c4:	b002      	add	sp, #8
 800c1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ca:	68a3      	ldr	r3, [r4, #8]
 800c1cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	68a3      	ldr	r3, [r4, #8]
 800c1e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c1e8:	701a      	strb	r2, [r3, #0]
 800c1ea:	68a3      	ldr	r3, [r4, #8]
 800c1ec:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c1f0:	701a      	strb	r2, [r3, #0]
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c1f8:	701a      	strb	r2, [r3, #0]
 800c1fa:	68a3      	ldr	r3, [r4, #8]
 800c1fc:	f89d 2000 	ldrb.w	r2, [sp]
 800c200:	701a      	strb	r2, [r3, #0]
 800c202:	e78a      	b.n	800c11a <ucdr_serialize_double+0x9e>
 800c204:	4628      	mov	r0, r5
 800c206:	466d      	mov	r5, sp
 800c208:	4629      	mov	r1, r5
 800c20a:	4632      	mov	r2, r6
 800c20c:	f00c ff9b 	bl	8019146 <memcpy>
 800c210:	68a0      	ldr	r0, [r4, #8]
 800c212:	4642      	mov	r2, r8
 800c214:	19a9      	adds	r1, r5, r6
 800c216:	f00c ff96 	bl	8019146 <memcpy>
 800c21a:	e77e      	b.n	800c11a <ucdr_serialize_double+0x9e>

0800c21c <ucdr_deserialize_double>:
 800c21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c220:	460d      	mov	r5, r1
 800c222:	2108      	movs	r1, #8
 800c224:	4604      	mov	r4, r0
 800c226:	f000 f91f 	bl	800c468 <ucdr_buffer_alignment>
 800c22a:	4601      	mov	r1, r0
 800c22c:	4620      	mov	r0, r4
 800c22e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c232:	f000 f95d 	bl	800c4f0 <ucdr_advance_buffer>
 800c236:	2108      	movs	r1, #8
 800c238:	4620      	mov	r0, r4
 800c23a:	f000 f8b5 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d151      	bne.n	800c2e6 <ucdr_deserialize_double+0xca>
 800c242:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c246:	42be      	cmp	r6, r7
 800c248:	d948      	bls.n	800c2dc <ucdr_deserialize_double+0xc0>
 800c24a:	6923      	ldr	r3, [r4, #16]
 800c24c:	60a6      	str	r6, [r4, #8]
 800c24e:	1bf6      	subs	r6, r6, r7
 800c250:	4433      	add	r3, r6
 800c252:	f1c6 0808 	rsb	r8, r6, #8
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	4641      	mov	r1, r8
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 f8b0 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800c260:	2800      	cmp	r0, #0
 800c262:	d06d      	beq.n	800c340 <ucdr_deserialize_double+0x124>
 800c264:	7d23      	ldrb	r3, [r4, #20]
 800c266:	2b01      	cmp	r3, #1
 800c268:	f000 8093 	beq.w	800c392 <ucdr_deserialize_double+0x176>
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	702b      	strb	r3, [r5, #0]
 800c270:	2e00      	cmp	r6, #0
 800c272:	d072      	beq.n	800c35a <ucdr_deserialize_double+0x13e>
 800c274:	79bb      	ldrb	r3, [r7, #6]
 800c276:	706b      	strb	r3, [r5, #1]
 800c278:	2e01      	cmp	r6, #1
 800c27a:	f105 0302 	add.w	r3, r5, #2
 800c27e:	d070      	beq.n	800c362 <ucdr_deserialize_double+0x146>
 800c280:	797b      	ldrb	r3, [r7, #5]
 800c282:	70ab      	strb	r3, [r5, #2]
 800c284:	2e02      	cmp	r6, #2
 800c286:	f105 0303 	add.w	r3, r5, #3
 800c28a:	d06e      	beq.n	800c36a <ucdr_deserialize_double+0x14e>
 800c28c:	793b      	ldrb	r3, [r7, #4]
 800c28e:	70eb      	strb	r3, [r5, #3]
 800c290:	2e03      	cmp	r6, #3
 800c292:	f105 0304 	add.w	r3, r5, #4
 800c296:	d06c      	beq.n	800c372 <ucdr_deserialize_double+0x156>
 800c298:	78fb      	ldrb	r3, [r7, #3]
 800c29a:	712b      	strb	r3, [r5, #4]
 800c29c:	2e04      	cmp	r6, #4
 800c29e:	f105 0305 	add.w	r3, r5, #5
 800c2a2:	d06a      	beq.n	800c37a <ucdr_deserialize_double+0x15e>
 800c2a4:	78bb      	ldrb	r3, [r7, #2]
 800c2a6:	716b      	strb	r3, [r5, #5]
 800c2a8:	2e05      	cmp	r6, #5
 800c2aa:	f105 0306 	add.w	r3, r5, #6
 800c2ae:	d068      	beq.n	800c382 <ucdr_deserialize_double+0x166>
 800c2b0:	787b      	ldrb	r3, [r7, #1]
 800c2b2:	71ab      	strb	r3, [r5, #6]
 800c2b4:	2e06      	cmp	r6, #6
 800c2b6:	f105 0307 	add.w	r3, r5, #7
 800c2ba:	d066      	beq.n	800c38a <ucdr_deserialize_double+0x16e>
 800c2bc:	783b      	ldrb	r3, [r7, #0]
 800c2be:	71eb      	strb	r3, [r5, #7]
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	68a2      	ldr	r2, [r4, #8]
 800c2c4:	7da0      	ldrb	r0, [r4, #22]
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	1b9e      	subs	r6, r3, r6
 800c2ca:	2308      	movs	r3, #8
 800c2cc:	4442      	add	r2, r8
 800c2ce:	7563      	strb	r3, [r4, #21]
 800c2d0:	60a2      	str	r2, [r4, #8]
 800c2d2:	6126      	str	r6, [r4, #16]
 800c2d4:	f080 0001 	eor.w	r0, r0, #1
 800c2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2dc:	2108      	movs	r1, #8
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f000 f86e 	bl	800c3c0 <ucdr_check_final_buffer_behavior>
 800c2e4:	b310      	cbz	r0, 800c32c <ucdr_deserialize_double+0x110>
 800c2e6:	7d23      	ldrb	r3, [r4, #20]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	68a3      	ldr	r3, [r4, #8]
 800c2ec:	d023      	beq.n	800c336 <ucdr_deserialize_double+0x11a>
 800c2ee:	79db      	ldrb	r3, [r3, #7]
 800c2f0:	702b      	strb	r3, [r5, #0]
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	799b      	ldrb	r3, [r3, #6]
 800c2f6:	706b      	strb	r3, [r5, #1]
 800c2f8:	68a3      	ldr	r3, [r4, #8]
 800c2fa:	795b      	ldrb	r3, [r3, #5]
 800c2fc:	70ab      	strb	r3, [r5, #2]
 800c2fe:	68a3      	ldr	r3, [r4, #8]
 800c300:	791b      	ldrb	r3, [r3, #4]
 800c302:	70eb      	strb	r3, [r5, #3]
 800c304:	68a3      	ldr	r3, [r4, #8]
 800c306:	78db      	ldrb	r3, [r3, #3]
 800c308:	712b      	strb	r3, [r5, #4]
 800c30a:	68a3      	ldr	r3, [r4, #8]
 800c30c:	789b      	ldrb	r3, [r3, #2]
 800c30e:	716b      	strb	r3, [r5, #5]
 800c310:	68a3      	ldr	r3, [r4, #8]
 800c312:	785b      	ldrb	r3, [r3, #1]
 800c314:	71ab      	strb	r3, [r5, #6]
 800c316:	68a3      	ldr	r3, [r4, #8]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	71eb      	strb	r3, [r5, #7]
 800c31c:	68a2      	ldr	r2, [r4, #8]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	3208      	adds	r2, #8
 800c322:	3308      	adds	r3, #8
 800c324:	2108      	movs	r1, #8
 800c326:	60a2      	str	r2, [r4, #8]
 800c328:	6123      	str	r3, [r4, #16]
 800c32a:	7561      	strb	r1, [r4, #21]
 800c32c:	7da0      	ldrb	r0, [r4, #22]
 800c32e:	f080 0001 	eor.w	r0, r0, #1
 800c332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	606b      	str	r3, [r5, #4]
 800c33c:	602a      	str	r2, [r5, #0]
 800c33e:	e7ed      	b.n	800c31c <ucdr_deserialize_double+0x100>
 800c340:	68a2      	ldr	r2, [r4, #8]
 800c342:	6923      	ldr	r3, [r4, #16]
 800c344:	7da0      	ldrb	r0, [r4, #22]
 800c346:	f884 9015 	strb.w	r9, [r4, #21]
 800c34a:	1b92      	subs	r2, r2, r6
 800c34c:	1b9b      	subs	r3, r3, r6
 800c34e:	60a2      	str	r2, [r4, #8]
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	f080 0001 	eor.w	r0, r0, #1
 800c356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	799b      	ldrb	r3, [r3, #6]
 800c35e:	706b      	strb	r3, [r5, #1]
 800c360:	1cab      	adds	r3, r5, #2
 800c362:	68a2      	ldr	r2, [r4, #8]
 800c364:	7952      	ldrb	r2, [r2, #5]
 800c366:	f803 2b01 	strb.w	r2, [r3], #1
 800c36a:	68a2      	ldr	r2, [r4, #8]
 800c36c:	7912      	ldrb	r2, [r2, #4]
 800c36e:	f803 2b01 	strb.w	r2, [r3], #1
 800c372:	68a2      	ldr	r2, [r4, #8]
 800c374:	78d2      	ldrb	r2, [r2, #3]
 800c376:	f803 2b01 	strb.w	r2, [r3], #1
 800c37a:	68a2      	ldr	r2, [r4, #8]
 800c37c:	7892      	ldrb	r2, [r2, #2]
 800c37e:	f803 2b01 	strb.w	r2, [r3], #1
 800c382:	68a2      	ldr	r2, [r4, #8]
 800c384:	7852      	ldrb	r2, [r2, #1]
 800c386:	f803 2b01 	strb.w	r2, [r3], #1
 800c38a:	68a2      	ldr	r2, [r4, #8]
 800c38c:	7812      	ldrb	r2, [r2, #0]
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e796      	b.n	800c2c0 <ucdr_deserialize_double+0xa4>
 800c392:	4639      	mov	r1, r7
 800c394:	4632      	mov	r2, r6
 800c396:	4628      	mov	r0, r5
 800c398:	f00c fed5 	bl	8019146 <memcpy>
 800c39c:	68a1      	ldr	r1, [r4, #8]
 800c39e:	4642      	mov	r2, r8
 800c3a0:	19a8      	adds	r0, r5, r6
 800c3a2:	f00c fed0 	bl	8019146 <memcpy>
 800c3a6:	e78b      	b.n	800c2c0 <ucdr_deserialize_double+0xa4>

0800c3a8 <ucdr_check_buffer_available_for>:
 800c3a8:	7d83      	ldrb	r3, [r0, #22]
 800c3aa:	b93b      	cbnz	r3, 800c3bc <ucdr_check_buffer_available_for+0x14>
 800c3ac:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c3b0:	4419      	add	r1, r3
 800c3b2:	4288      	cmp	r0, r1
 800c3b4:	bf34      	ite	cc
 800c3b6:	2000      	movcc	r0, #0
 800c3b8:	2001      	movcs	r0, #1
 800c3ba:	4770      	bx	lr
 800c3bc:	2000      	movs	r0, #0
 800c3be:	4770      	bx	lr

0800c3c0 <ucdr_check_final_buffer_behavior>:
 800c3c0:	7d83      	ldrb	r3, [r0, #22]
 800c3c2:	b943      	cbnz	r3, 800c3d6 <ucdr_check_final_buffer_behavior+0x16>
 800c3c4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c3c8:	4291      	cmp	r1, r2
 800c3ca:	b510      	push	{r4, lr}
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	d205      	bcs.n	800c3dc <ucdr_check_final_buffer_behavior+0x1c>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	bd10      	pop	{r4, pc}
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4618      	mov	r0, r3
 800c3da:	4770      	bx	lr
 800c3dc:	6982      	ldr	r2, [r0, #24]
 800c3de:	b13a      	cbz	r2, 800c3f0 <ucdr_check_final_buffer_behavior+0x30>
 800c3e0:	69c1      	ldr	r1, [r0, #28]
 800c3e2:	4790      	blx	r2
 800c3e4:	f080 0301 	eor.w	r3, r0, #1
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	75a0      	strb	r0, [r4, #22]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	bd10      	pop	{r4, pc}
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	75a0      	strb	r0, [r4, #22]
 800c3f4:	e7fa      	b.n	800c3ec <ucdr_check_final_buffer_behavior+0x2c>
 800c3f6:	bf00      	nop

0800c3f8 <ucdr_set_on_full_buffer_callback>:
 800c3f8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop

0800c400 <ucdr_init_buffer_origin_offset_endian>:
 800c400:	b410      	push	{r4}
 800c402:	9c01      	ldr	r4, [sp, #4]
 800c404:	6001      	str	r1, [r0, #0]
 800c406:	440a      	add	r2, r1
 800c408:	6042      	str	r2, [r0, #4]
 800c40a:	190a      	adds	r2, r1, r4
 800c40c:	441c      	add	r4, r3
 800c40e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c412:	6082      	str	r2, [r0, #8]
 800c414:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c418:	7503      	strb	r3, [r0, #20]
 800c41a:	2200      	movs	r2, #0
 800c41c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c420:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c424:	7542      	strb	r2, [r0, #21]
 800c426:	7582      	strb	r2, [r0, #22]
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop

0800c42c <ucdr_init_buffer_origin_offset>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	9c04      	ldr	r4, [sp, #16]
 800c432:	9400      	str	r4, [sp, #0]
 800c434:	2401      	movs	r4, #1
 800c436:	9401      	str	r4, [sp, #4]
 800c438:	f7ff ffe2 	bl	800c400 <ucdr_init_buffer_origin_offset_endian>
 800c43c:	b002      	add	sp, #8
 800c43e:	bd10      	pop	{r4, pc}

0800c440 <ucdr_init_buffer_origin>:
 800c440:	b510      	push	{r4, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	2400      	movs	r4, #0
 800c446:	9400      	str	r4, [sp, #0]
 800c448:	f7ff fff0 	bl	800c42c <ucdr_init_buffer_origin_offset>
 800c44c:	b002      	add	sp, #8
 800c44e:	bd10      	pop	{r4, pc}

0800c450 <ucdr_init_buffer>:
 800c450:	2300      	movs	r3, #0
 800c452:	f7ff bff5 	b.w	800c440 <ucdr_init_buffer_origin>
 800c456:	bf00      	nop

0800c458 <ucdr_alignment>:
 800c458:	fbb0 f3f1 	udiv	r3, r0, r1
 800c45c:	fb03 0011 	mls	r0, r3, r1, r0
 800c460:	1a08      	subs	r0, r1, r0
 800c462:	3901      	subs	r1, #1
 800c464:	4008      	ands	r0, r1
 800c466:	4770      	bx	lr

0800c468 <ucdr_buffer_alignment>:
 800c468:	7d43      	ldrb	r3, [r0, #21]
 800c46a:	428b      	cmp	r3, r1
 800c46c:	d208      	bcs.n	800c480 <ucdr_buffer_alignment+0x18>
 800c46e:	6900      	ldr	r0, [r0, #16]
 800c470:	fbb0 f3f1 	udiv	r3, r0, r1
 800c474:	fb01 0013 	mls	r0, r1, r3, r0
 800c478:	1a08      	subs	r0, r1, r0
 800c47a:	3901      	subs	r1, #1
 800c47c:	4008      	ands	r0, r1
 800c47e:	4770      	bx	lr
 800c480:	2000      	movs	r0, #0
 800c482:	4770      	bx	lr

0800c484 <ucdr_align_to>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4604      	mov	r4, r0
 800c488:	460d      	mov	r5, r1
 800c48a:	f7ff ffed 	bl	800c468 <ucdr_buffer_alignment>
 800c48e:	68a3      	ldr	r3, [r4, #8]
 800c490:	6921      	ldr	r1, [r4, #16]
 800c492:	7565      	strb	r5, [r4, #21]
 800c494:	181a      	adds	r2, r3, r0
 800c496:	6863      	ldr	r3, [r4, #4]
 800c498:	4293      	cmp	r3, r2
 800c49a:	4408      	add	r0, r1
 800c49c:	bf28      	it	cs
 800c49e:	4613      	movcs	r3, r2
 800c4a0:	6120      	str	r0, [r4, #16]
 800c4a2:	60a3      	str	r3, [r4, #8]
 800c4a4:	bd38      	pop	{r3, r4, r5, pc}
 800c4a6:	bf00      	nop

0800c4a8 <ucdr_buffer_length>:
 800c4a8:	6882      	ldr	r2, [r0, #8]
 800c4aa:	6800      	ldr	r0, [r0, #0]
 800c4ac:	1a10      	subs	r0, r2, r0
 800c4ae:	4770      	bx	lr

0800c4b0 <ucdr_buffer_remaining>:
 800c4b0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c4b4:	1a10      	subs	r0, r2, r0
 800c4b6:	4770      	bx	lr

0800c4b8 <ucdr_check_final_buffer_behavior_array>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	7d83      	ldrb	r3, [r0, #22]
 800c4bc:	b963      	cbnz	r3, 800c4d8 <ucdr_check_final_buffer_behavior_array+0x20>
 800c4be:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	d308      	bcc.n	800c4dc <ucdr_check_final_buffer_behavior_array+0x24>
 800c4ca:	b139      	cbz	r1, 800c4dc <ucdr_check_final_buffer_behavior_array+0x24>
 800c4cc:	6983      	ldr	r3, [r0, #24]
 800c4ce:	b163      	cbz	r3, 800c4ea <ucdr_check_final_buffer_behavior_array+0x32>
 800c4d0:	69c1      	ldr	r1, [r0, #28]
 800c4d2:	4798      	blx	r3
 800c4d4:	75a0      	strb	r0, [r4, #22]
 800c4d6:	b108      	cbz	r0, 800c4dc <ucdr_check_final_buffer_behavior_array+0x24>
 800c4d8:	2000      	movs	r0, #0
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7ff ffe7 	bl	800c4b0 <ucdr_buffer_remaining>
 800c4e2:	42a8      	cmp	r0, r5
 800c4e4:	bf28      	it	cs
 800c4e6:	4628      	movcs	r0, r5
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	7583      	strb	r3, [r0, #22]
 800c4ee:	e7f3      	b.n	800c4d8 <ucdr_check_final_buffer_behavior_array+0x20>

0800c4f0 <ucdr_advance_buffer>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	f7ff ff57 	bl	800c3a8 <ucdr_check_buffer_available_for>
 800c4fa:	b178      	cbz	r0, 800c51c <ucdr_advance_buffer+0x2c>
 800c4fc:	6923      	ldr	r3, [r4, #16]
 800c4fe:	68a2      	ldr	r2, [r4, #8]
 800c500:	442b      	add	r3, r5
 800c502:	6123      	str	r3, [r4, #16]
 800c504:	2301      	movs	r3, #1
 800c506:	442a      	add	r2, r5
 800c508:	7563      	strb	r3, [r4, #21]
 800c50a:	60a2      	str	r2, [r4, #8]
 800c50c:	bd38      	pop	{r3, r4, r5, pc}
 800c50e:	68a2      	ldr	r2, [r4, #8]
 800c510:	6923      	ldr	r3, [r4, #16]
 800c512:	4402      	add	r2, r0
 800c514:	4403      	add	r3, r0
 800c516:	1a2d      	subs	r5, r5, r0
 800c518:	60a2      	str	r2, [r4, #8]
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	4629      	mov	r1, r5
 800c51e:	2201      	movs	r2, #1
 800c520:	4620      	mov	r0, r4
 800c522:	f7ff ffc9 	bl	800c4b8 <ucdr_check_final_buffer_behavior_array>
 800c526:	2800      	cmp	r0, #0
 800c528:	d1f1      	bne.n	800c50e <ucdr_advance_buffer+0x1e>
 800c52a:	2301      	movs	r3, #1
 800c52c:	7563      	strb	r3, [r4, #21]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}

0800c530 <rcl_get_zero_initialized_client>:
 800c530:	4b01      	ldr	r3, [pc, #4]	@ (800c538 <rcl_get_zero_initialized_client+0x8>)
 800c532:	6818      	ldr	r0, [r3, #0]
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	0801a0c4 	.word	0x0801a0c4

0800c53c <rcl_client_init>:
 800c53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c540:	b089      	sub	sp, #36	@ 0x24
 800c542:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c544:	b1c5      	cbz	r5, 800c578 <rcl_client_init+0x3c>
 800c546:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c54a:	4604      	mov	r4, r0
 800c54c:	4648      	mov	r0, r9
 800c54e:	4688      	mov	r8, r1
 800c550:	4617      	mov	r7, r2
 800c552:	461e      	mov	r6, r3
 800c554:	f001 fcfa 	bl	800df4c <rcutils_allocator_is_valid>
 800c558:	b170      	cbz	r0, 800c578 <rcl_client_init+0x3c>
 800c55a:	b16c      	cbz	r4, 800c578 <rcl_client_init+0x3c>
 800c55c:	4640      	mov	r0, r8
 800c55e:	f000 fb83 	bl	800cc68 <rcl_node_is_valid>
 800c562:	2800      	cmp	r0, #0
 800c564:	d05e      	beq.n	800c624 <rcl_client_init+0xe8>
 800c566:	b13f      	cbz	r7, 800c578 <rcl_client_init+0x3c>
 800c568:	b136      	cbz	r6, 800c578 <rcl_client_init+0x3c>
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	b14b      	cbz	r3, 800c582 <rcl_client_init+0x46>
 800c56e:	2664      	movs	r6, #100	@ 0x64
 800c570:	4630      	mov	r0, r6
 800c572:	b009      	add	sp, #36	@ 0x24
 800c574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c578:	260b      	movs	r6, #11
 800c57a:	4630      	mov	r0, r6
 800c57c:	b009      	add	sp, #36	@ 0x24
 800c57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c582:	aa07      	add	r2, sp, #28
 800c584:	9205      	str	r2, [sp, #20]
 800c586:	2201      	movs	r2, #1
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	9203      	str	r2, [sp, #12]
 800c58c:	9307      	str	r3, [sp, #28]
 800c58e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c596:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c59a:	4631      	mov	r1, r6
 800c59c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	f000 fbb5 	bl	800cd10 <rcl_node_resolve_name>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d14b      	bne.n	800c642 <rcl_client_init+0x106>
 800c5aa:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c5ac:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c5ae:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800c5b2:	4798      	blx	r3
 800c5b4:	6020      	str	r0, [r4, #0]
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d049      	beq.n	800c64e <rcl_client_init+0x112>
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	f000 fb76 	bl	800ccac <rcl_node_get_rmw_handle>
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	9a07      	ldr	r2, [sp, #28]
 800c5c4:	6826      	ldr	r6, [r4, #0]
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	f002 fa00 	bl	800e9cc <rmw_create_client>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 800c5d2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800c5d6:	b360      	cbz	r0, 800c632 <rcl_client_init+0xf6>
 800c5d8:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800c5dc:	f002 fb0c 	bl	800ebf8 <rmw_client_request_publisher_get_actual_qos>
 800c5e0:	bb28      	cbnz	r0, 800c62e <rcl_client_init+0xf2>
 800c5e2:	6821      	ldr	r1, [r4, #0]
 800c5e4:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 800c5e8:	31b8      	adds	r1, #184	@ 0xb8
 800c5ea:	f002 fb15 	bl	800ec18 <rmw_client_response_subscription_get_actual_qos>
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	b9e8      	cbnz	r0, 800c62e <rcl_client_init+0xf2>
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c5f8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800c5fc:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 800c600:	4629      	mov	r1, r5
 800c602:	4618      	mov	r0, r3
 800c604:	2268      	movs	r2, #104	@ 0x68
 800c606:	f00c fd9e 	bl	8019146 <memcpy>
 800c60a:	2100      	movs	r1, #0
 800c60c:	4603      	mov	r3, r0
 800c60e:	2000      	movs	r0, #0
 800c610:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
 800c614:	9807      	ldr	r0, [sp, #28]
 800c616:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c618:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c61a:	4798      	blx	r3
 800c61c:	4630      	mov	r0, r6
 800c61e:	b009      	add	sp, #36	@ 0x24
 800c620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c624:	26c8      	movs	r6, #200	@ 0xc8
 800c626:	4630      	mov	r0, r6
 800c628:	b009      	add	sp, #36	@ 0x24
 800c62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	b12b      	cbz	r3, 800c63e <rcl_client_init+0x102>
 800c632:	4618      	mov	r0, r3
 800c634:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c636:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c638:	4790      	blx	r2
 800c63a:	2300      	movs	r3, #0
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	2601      	movs	r6, #1
 800c640:	e7e8      	b.n	800c614 <rcl_client_init+0xd8>
 800c642:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 800c646:	2b01      	cmp	r3, #1
 800c648:	d903      	bls.n	800c652 <rcl_client_init+0x116>
 800c64a:	280a      	cmp	r0, #10
 800c64c:	d1f7      	bne.n	800c63e <rcl_client_init+0x102>
 800c64e:	260a      	movs	r6, #10
 800c650:	e7e0      	b.n	800c614 <rcl_client_init+0xd8>
 800c652:	2668      	movs	r6, #104	@ 0x68
 800c654:	e7de      	b.n	800c614 <rcl_client_init+0xd8>
 800c656:	bf00      	nop

0800c658 <rcl_client_get_default_options>:
 800c658:	b530      	push	{r4, r5, lr}
 800c65a:	4d0f      	ldr	r5, [pc, #60]	@ (800c698 <rcl_client_get_default_options+0x40>)
 800c65c:	490f      	ldr	r1, [pc, #60]	@ (800c69c <rcl_client_get_default_options+0x44>)
 800c65e:	b087      	sub	sp, #28
 800c660:	4604      	mov	r4, r0
 800c662:	2250      	movs	r2, #80	@ 0x50
 800c664:	4628      	mov	r0, r5
 800c666:	f00c fd6e 	bl	8019146 <memcpy>
 800c66a:	4668      	mov	r0, sp
 800c66c:	f001 fc60 	bl	800df30 <rcutils_get_default_allocator>
 800c670:	46ec      	mov	ip, sp
 800c672:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c676:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c67a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c67e:	2268      	movs	r2, #104	@ 0x68
 800c680:	f8dc 3000 	ldr.w	r3, [ip]
 800c684:	f8ce 3000 	str.w	r3, [lr]
 800c688:	4629      	mov	r1, r5
 800c68a:	4620      	mov	r0, r4
 800c68c:	f00c fd5b 	bl	8019146 <memcpy>
 800c690:	4620      	mov	r0, r4
 800c692:	b007      	add	sp, #28
 800c694:	bd30      	pop	{r4, r5, pc}
 800c696:	bf00      	nop
 800c698:	200067e0 	.word	0x200067e0
 800c69c:	0801a0c8 	.word	0x0801a0c8

0800c6a0 <rcl_client_get_rmw_handle>:
 800c6a0:	b118      	cbz	r0, 800c6aa <rcl_client_get_rmw_handle+0xa>
 800c6a2:	6800      	ldr	r0, [r0, #0]
 800c6a4:	b108      	cbz	r0, 800c6aa <rcl_client_get_rmw_handle+0xa>
 800c6a6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800c6aa:	4770      	bx	lr

0800c6ac <rcl_send_request>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	b1e8      	cbz	r0, 800c6ee <rcl_send_request+0x42>
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	6800      	ldr	r0, [r0, #0]
 800c6b6:	b1d0      	cbz	r0, 800c6ee <rcl_send_request+0x42>
 800c6b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800c6bc:	b1bb      	cbz	r3, 800c6ee <rcl_send_request+0x42>
 800c6be:	460e      	mov	r6, r1
 800c6c0:	b1d1      	cbz	r1, 800c6f8 <rcl_send_request+0x4c>
 800c6c2:	4615      	mov	r5, r2
 800c6c4:	b1c2      	cbz	r2, 800c6f8 <rcl_send_request+0x4c>
 800c6c6:	2105      	movs	r1, #5
 800c6c8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800c6cc:	f001 fc4c 	bl	800df68 <__atomic_load_8>
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	e9c5 0100 	strd	r0, r1, [r5]
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4631      	mov	r1, r6
 800c6da:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800c6de:	f002 ffc9 	bl	800f674 <rmw_send_request>
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	b160      	cbz	r0, 800c700 <rcl_send_request+0x54>
 800c6e6:	2601      	movs	r6, #1
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	b002      	add	sp, #8
 800c6ec:	bd70      	pop	{r4, r5, r6, pc}
 800c6ee:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	b002      	add	sp, #8
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	260b      	movs	r6, #11
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	b002      	add	sp, #8
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	6820      	ldr	r0, [r4, #0]
 800c702:	2105      	movs	r1, #5
 800c704:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c708:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800c70c:	9100      	str	r1, [sp, #0]
 800c70e:	f001 fc97 	bl	800e040 <__atomic_exchange_8>
 800c712:	4630      	mov	r0, r6
 800c714:	b002      	add	sp, #8
 800c716:	bd70      	pop	{r4, r5, r6, pc}

0800c718 <rcl_take_response>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	468e      	mov	lr, r1
 800c71c:	460c      	mov	r4, r1
 800c71e:	4616      	mov	r6, r2
 800c720:	4605      	mov	r5, r0
 800c722:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c726:	b08c      	sub	sp, #48	@ 0x30
 800c728:	f10d 0c18 	add.w	ip, sp, #24
 800c72c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c730:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c734:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c738:	b35d      	cbz	r5, 800c792 <rcl_take_response+0x7a>
 800c73a:	682b      	ldr	r3, [r5, #0]
 800c73c:	b34b      	cbz	r3, 800c792 <rcl_take_response+0x7a>
 800c73e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800c742:	b330      	cbz	r0, 800c792 <rcl_take_response+0x7a>
 800c744:	b346      	cbz	r6, 800c798 <rcl_take_response+0x80>
 800c746:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800c7a0 <rcl_take_response+0x88>
 800c74a:	2300      	movs	r3, #0
 800c74c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c750:	4632      	mov	r2, r6
 800c752:	f10d 0307 	add.w	r3, sp, #7
 800c756:	a902      	add	r1, sp, #8
 800c758:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c75c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c760:	f003 f890 	bl	800f884 <rmw_take_response>
 800c764:	4605      	mov	r5, r0
 800c766:	b9c8      	cbnz	r0, 800c79c <rcl_take_response+0x84>
 800c768:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c76c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c770:	2a00      	cmp	r2, #0
 800c772:	bf08      	it	eq
 800c774:	461d      	moveq	r5, r3
 800c776:	f10d 0e18 	add.w	lr, sp, #24
 800c77a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c77e:	46a4      	mov	ip, r4
 800c780:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c784:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c788:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c78c:	4628      	mov	r0, r5
 800c78e:	b00c      	add	sp, #48	@ 0x30
 800c790:	bd70      	pop	{r4, r5, r6, pc}
 800c792:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800c796:	e7ee      	b.n	800c776 <rcl_take_response+0x5e>
 800c798:	250b      	movs	r5, #11
 800c79a:	e7ec      	b.n	800c776 <rcl_take_response+0x5e>
 800c79c:	2501      	movs	r5, #1
 800c79e:	e7ea      	b.n	800c776 <rcl_take_response+0x5e>
	...

0800c7a8 <rcl_client_is_valid>:
 800c7a8:	b130      	cbz	r0, 800c7b8 <rcl_client_is_valid+0x10>
 800c7aa:	6800      	ldr	r0, [r0, #0]
 800c7ac:	b120      	cbz	r0, 800c7b8 <rcl_client_is_valid+0x10>
 800c7ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800c7b2:	3800      	subs	r0, #0
 800c7b4:	bf18      	it	ne
 800c7b6:	2001      	movne	r0, #1
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop

0800c7bc <rcl_get_zero_initialized_init_options>:
 800c7bc:	2000      	movs	r0, #0
 800c7be:	4770      	bx	lr

0800c7c0 <rcl_init_options_init>:
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7c4:	b097      	sub	sp, #92	@ 0x5c
 800c7c6:	ae1d      	add	r6, sp, #116	@ 0x74
 800c7c8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	d058      	beq.n	800c882 <rcl_init_options_init+0xc2>
 800c7d0:	6803      	ldr	r3, [r0, #0]
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	b133      	cbz	r3, 800c7e4 <rcl_init_options_init+0x24>
 800c7d6:	2464      	movs	r4, #100	@ 0x64
 800c7d8:	4620      	mov	r0, r4
 800c7da:	b017      	add	sp, #92	@ 0x5c
 800c7dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c7e0:	b004      	add	sp, #16
 800c7e2:	4770      	bx	lr
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f001 fbb1 	bl	800df4c <rcutils_allocator_is_valid>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d049      	beq.n	800c882 <rcl_init_options_init+0xc2>
 800c7ee:	46b4      	mov	ip, r6
 800c7f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7f4:	ac11      	add	r4, sp, #68	@ 0x44
 800c7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7f8:	f8dc 3000 	ldr.w	r3, [ip]
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c800:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c802:	2050      	movs	r0, #80	@ 0x50
 800c804:	4798      	blx	r3
 800c806:	4604      	mov	r4, r0
 800c808:	6028      	str	r0, [r5, #0]
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d03b      	beq.n	800c886 <rcl_init_options_init+0xc6>
 800c80e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c812:	4686      	mov	lr, r0
 800c814:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c818:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c81c:	f8dc 3000 	ldr.w	r3, [ip]
 800c820:	f8ce 3000 	str.w	r3, [lr]
 800c824:	a802      	add	r0, sp, #8
 800c826:	f001 ff63 	bl	800e6f0 <rmw_get_zero_initialized_init_options>
 800c82a:	f10d 0e08 	add.w	lr, sp, #8
 800c82e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c832:	f104 0c18 	add.w	ip, r4, #24
 800c836:	682f      	ldr	r7, [r5, #0]
 800c838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c83c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c840:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c844:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c848:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c84c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c850:	ac20      	add	r4, sp, #128	@ 0x80
 800c852:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c856:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c85a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c85e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c862:	f107 0018 	add.w	r0, r7, #24
 800c866:	f002 f9ed 	bl	800ec44 <rmw_init_options_init>
 800c86a:	4604      	mov	r4, r0
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d0b3      	beq.n	800c7d8 <rcl_init_options_init+0x18>
 800c870:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c872:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c874:	6828      	ldr	r0, [r5, #0]
 800c876:	4798      	blx	r3
 800c878:	4620      	mov	r0, r4
 800c87a:	f007 fd23 	bl	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c87e:	4604      	mov	r4, r0
 800c880:	e7aa      	b.n	800c7d8 <rcl_init_options_init+0x18>
 800c882:	240b      	movs	r4, #11
 800c884:	e7a8      	b.n	800c7d8 <rcl_init_options_init+0x18>
 800c886:	240a      	movs	r4, #10
 800c888:	e7a6      	b.n	800c7d8 <rcl_init_options_init+0x18>
 800c88a:	bf00      	nop

0800c88c <rcl_init_options_fini>:
 800c88c:	b530      	push	{r4, r5, lr}
 800c88e:	b087      	sub	sp, #28
 800c890:	b1f0      	cbz	r0, 800c8d0 <rcl_init_options_fini+0x44>
 800c892:	6803      	ldr	r3, [r0, #0]
 800c894:	4604      	mov	r4, r0
 800c896:	b1db      	cbz	r3, 800c8d0 <rcl_init_options_fini+0x44>
 800c898:	469c      	mov	ip, r3
 800c89a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c89e:	f10d 0e04 	add.w	lr, sp, #4
 800c8a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c8aa:	f8ce 3000 	str.w	r3, [lr]
 800c8ae:	a801      	add	r0, sp, #4
 800c8b0:	f001 fb4c 	bl	800df4c <rcutils_allocator_is_valid>
 800c8b4:	b160      	cbz	r0, 800c8d0 <rcl_init_options_fini+0x44>
 800c8b6:	6820      	ldr	r0, [r4, #0]
 800c8b8:	3018      	adds	r0, #24
 800c8ba:	f002 fa73 	bl	800eda4 <rmw_init_options_fini>
 800c8be:	4605      	mov	r5, r0
 800c8c0:	b950      	cbnz	r0, 800c8d8 <rcl_init_options_fini+0x4c>
 800c8c2:	6820      	ldr	r0, [r4, #0]
 800c8c4:	9b02      	ldr	r3, [sp, #8]
 800c8c6:	9905      	ldr	r1, [sp, #20]
 800c8c8:	4798      	blx	r3
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	b007      	add	sp, #28
 800c8ce:	bd30      	pop	{r4, r5, pc}
 800c8d0:	250b      	movs	r5, #11
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	b007      	add	sp, #28
 800c8d6:	bd30      	pop	{r4, r5, pc}
 800c8d8:	f007 fcf4 	bl	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c8dc:	4605      	mov	r5, r0
 800c8de:	e7f8      	b.n	800c8d2 <rcl_init_options_fini+0x46>

0800c8e0 <rcl_init_options_copy>:
 800c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e4:	b094      	sub	sp, #80	@ 0x50
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	d058      	beq.n	800c99c <rcl_init_options_copy+0xbc>
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	6800      	ldr	r0, [r0, #0]
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d054      	beq.n	800c99c <rcl_init_options_copy+0xbc>
 800c8f2:	460e      	mov	r6, r1
 800c8f4:	f001 fb2a 	bl	800df4c <rcutils_allocator_is_valid>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d04f      	beq.n	800c99c <rcl_init_options_copy+0xbc>
 800c8fc:	2e00      	cmp	r6, #0
 800c8fe:	d04d      	beq.n	800c99c <rcl_init_options_copy+0xbc>
 800c900:	6833      	ldr	r3, [r6, #0]
 800c902:	b123      	cbz	r3, 800c90e <rcl_init_options_copy+0x2e>
 800c904:	2464      	movs	r4, #100	@ 0x64
 800c906:	4620      	mov	r0, r4
 800c908:	b014      	add	sp, #80	@ 0x50
 800c90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90e:	6827      	ldr	r7, [r4, #0]
 800c910:	46bc      	mov	ip, r7
 800c912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c916:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c91a:	f8dc 3000 	ldr.w	r3, [ip]
 800c91e:	f8d7 8000 	ldr.w	r8, [r7]
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	4619      	mov	r1, r3
 800c926:	2050      	movs	r0, #80	@ 0x50
 800c928:	47c0      	blx	r8
 800c92a:	4605      	mov	r5, r0
 800c92c:	6030      	str	r0, [r6, #0]
 800c92e:	b3d0      	cbz	r0, 800c9a6 <rcl_init_options_copy+0xc6>
 800c930:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c934:	4686      	mov	lr, r0
 800c936:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c93a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c93e:	f8dc 3000 	ldr.w	r3, [ip]
 800c942:	f8ce 3000 	str.w	r3, [lr]
 800c946:	4668      	mov	r0, sp
 800c948:	f001 fed2 	bl	800e6f0 <rmw_get_zero_initialized_init_options>
 800c94c:	46ee      	mov	lr, sp
 800c94e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c952:	f105 0c18 	add.w	ip, r5, #24
 800c956:	6824      	ldr	r4, [r4, #0]
 800c958:	6835      	ldr	r5, [r6, #0]
 800c95a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c95e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c962:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c966:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c96a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c96e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c972:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c976:	f104 0018 	add.w	r0, r4, #24
 800c97a:	f105 0118 	add.w	r1, r5, #24
 800c97e:	f002 f9c9 	bl	800ed14 <rmw_init_options_copy>
 800c982:	4604      	mov	r4, r0
 800c984:	2800      	cmp	r0, #0
 800c986:	d0be      	beq.n	800c906 <rcl_init_options_copy+0x26>
 800c988:	f001 fbaa 	bl	800e0e0 <rcutils_get_error_string>
 800c98c:	f001 fbc0 	bl	800e110 <rcutils_reset_error>
 800c990:	4630      	mov	r0, r6
 800c992:	f7ff ff7b 	bl	800c88c <rcl_init_options_fini>
 800c996:	b140      	cbz	r0, 800c9aa <rcl_init_options_copy+0xca>
 800c998:	4604      	mov	r4, r0
 800c99a:	e7b4      	b.n	800c906 <rcl_init_options_copy+0x26>
 800c99c:	240b      	movs	r4, #11
 800c99e:	4620      	mov	r0, r4
 800c9a0:	b014      	add	sp, #80	@ 0x50
 800c9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a6:	240a      	movs	r4, #10
 800c9a8:	e7ad      	b.n	800c906 <rcl_init_options_copy+0x26>
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	b014      	add	sp, #80	@ 0x50
 800c9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b2:	f007 bc87 	b.w	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c9b6:	bf00      	nop

0800c9b8 <rcl_init_options_set_domain_id>:
 800c9b8:	b120      	cbz	r0, 800c9c4 <rcl_init_options_set_domain_id+0xc>
 800c9ba:	6803      	ldr	r3, [r0, #0]
 800c9bc:	b113      	cbz	r3, 800c9c4 <rcl_init_options_set_domain_id+0xc>
 800c9be:	6259      	str	r1, [r3, #36]	@ 0x24
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	4770      	bx	lr
 800c9c4:	200b      	movs	r0, #11
 800c9c6:	4770      	bx	lr

0800c9c8 <rcl_get_zero_initialized_node>:
 800c9c8:	4a03      	ldr	r2, [pc, #12]	@ (800c9d8 <rcl_get_zero_initialized_node+0x10>)
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	4770      	bx	lr
 800c9d8:	0801a134 	.word	0x0801a134

0800c9dc <rcl_node_init>:
 800c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e0:	b0a9      	sub	sp, #164	@ 0xa4
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c9e8:	a823      	add	r0, sp, #140	@ 0x8c
 800c9ea:	460e      	mov	r6, r1
 800c9ec:	4615      	mov	r5, r2
 800c9ee:	461f      	mov	r7, r3
 800c9f0:	f007 ff2c 	bl	801484c <rcl_guard_condition_get_default_options>
 800c9f4:	f1b8 0f00 	cmp.w	r8, #0
 800c9f8:	f000 80e6 	beq.w	800cbc8 <rcl_node_init+0x1ec>
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	f001 faa5 	bl	800df4c <rcutils_allocator_is_valid>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	f000 80e0 	beq.w	800cbc8 <rcl_node_init+0x1ec>
 800ca08:	2e00      	cmp	r6, #0
 800ca0a:	f000 80dd 	beq.w	800cbc8 <rcl_node_init+0x1ec>
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	f000 80da 	beq.w	800cbc8 <rcl_node_init+0x1ec>
 800ca14:	2c00      	cmp	r4, #0
 800ca16:	f000 80d7 	beq.w	800cbc8 <rcl_node_init+0x1ec>
 800ca1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ca1e:	f1b9 0f00 	cmp.w	r9, #0
 800ca22:	f040 80fd 	bne.w	800cc20 <rcl_node_init+0x244>
 800ca26:	2f00      	cmp	r7, #0
 800ca28:	f000 80ce 	beq.w	800cbc8 <rcl_node_init+0x1ec>
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f007 fc67 	bl	8014300 <rcl_context_is_valid>
 800ca32:	4682      	mov	sl, r0
 800ca34:	2800      	cmp	r0, #0
 800ca36:	f000 80cd 	beq.w	800cbd4 <rcl_node_init+0x1f8>
 800ca3a:	464a      	mov	r2, r9
 800ca3c:	a922      	add	r1, sp, #136	@ 0x88
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800ca44:	f001 ff4e 	bl	800e8e4 <rmw_validate_node_name>
 800ca48:	4681      	mov	r9, r0
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f040 80be 	bne.w	800cbcc <rcl_node_init+0x1f0>
 800ca50:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f040 80f0 	bne.w	800cc38 <rcl_node_init+0x25c>
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f7f3 fbeb 	bl	8000234 <strlen>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f040 80bb 	bne.w	800cbda <rcl_node_init+0x1fe>
 800ca64:	4d7c      	ldr	r5, [pc, #496]	@ (800cc58 <rcl_node_init+0x27c>)
 800ca66:	a922      	add	r1, sp, #136	@ 0x88
 800ca68:	2200      	movs	r2, #0
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f001 ff1c 	bl	800e8a8 <rmw_validate_namespace>
 800ca70:	4681      	mov	r9, r0
 800ca72:	2800      	cmp	r0, #0
 800ca74:	f040 80aa 	bne.w	800cbcc <rcl_node_init+0x1f0>
 800ca78:	4682      	mov	sl, r0
 800ca7a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f040 80e0 	bne.w	800cc42 <rcl_node_init+0x266>
 800ca82:	f8d8 3000 	ldr.w	r3, [r8]
 800ca86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ca8a:	2078      	movs	r0, #120	@ 0x78
 800ca8c:	4798      	blx	r3
 800ca8e:	4681      	mov	r9, r0
 800ca90:	6060      	str	r0, [r4, #4]
 800ca92:	2800      	cmp	r0, #0
 800ca94:	f000 80ca 	beq.w	800cc2c <rcl_node_init+0x250>
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800caa0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800caa4:	a808      	add	r0, sp, #32
 800caa6:	f000 f907 	bl	800ccb8 <rcl_node_get_default_options>
 800caaa:	a908      	add	r1, sp, #32
 800caac:	4648      	mov	r0, r9
 800caae:	2268      	movs	r2, #104	@ 0x68
 800cab0:	f00c fb49 	bl	8019146 <memcpy>
 800cab4:	6861      	ldr	r1, [r4, #4]
 800cab6:	6027      	str	r7, [r4, #0]
 800cab8:	4640      	mov	r0, r8
 800caba:	f000 f90b 	bl	800ccd4 <rcl_node_options_copy>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d158      	bne.n	800cb74 <rcl_node_init+0x198>
 800cac2:	4628      	mov	r0, r5
 800cac4:	f7f3 fbb6 	bl	8000234 <strlen>
 800cac8:	4428      	add	r0, r5
 800caca:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800cace:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800cad2:	2b2f      	cmp	r3, #47	@ 0x2f
 800cad4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	bf0c      	ite	eq
 800cadc:	4b5f      	ldreq	r3, [pc, #380]	@ (800cc5c <rcl_node_init+0x280>)
 800cade:	4b60      	ldrne	r3, [pc, #384]	@ (800cc60 <rcl_node_init+0x284>)
 800cae0:	9302      	str	r3, [sp, #8]
 800cae2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800caec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800caf0:	f001 fb2a 	bl	800e148 <rcutils_format_string_limit>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800cafa:	6818      	ldr	r0, [r3, #0]
 800cafc:	4631      	mov	r1, r6
 800cafe:	3028      	adds	r0, #40	@ 0x28
 800cb00:	462a      	mov	r2, r5
 800cb02:	6866      	ldr	r6, [r4, #4]
 800cb04:	f002 fb78 	bl	800f1f8 <rmw_create_node>
 800cb08:	6863      	ldr	r3, [r4, #4]
 800cb0a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800cb0c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d032      	beq.n	800cb78 <rcl_node_init+0x19c>
 800cb12:	f002 fc05 	bl	800f320 <rmw_node_get_graph_guard_condition>
 800cb16:	4681      	mov	r9, r0
 800cb18:	b360      	cbz	r0, 800cb74 <rcl_node_init+0x198>
 800cb1a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cb22:	6866      	ldr	r6, [r4, #4]
 800cb24:	2008      	movs	r0, #8
 800cb26:	4798      	blx	r3
 800cb28:	6863      	ldr	r3, [r4, #4]
 800cb2a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800cb2c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800cb30:	f1bb 0f00 	cmp.w	fp, #0
 800cb34:	d020      	beq.n	800cb78 <rcl_node_init+0x19c>
 800cb36:	a806      	add	r0, sp, #24
 800cb38:	f007 fdac 	bl	8014694 <rcl_get_zero_initialized_guard_condition>
 800cb3c:	a806      	add	r0, sp, #24
 800cb3e:	c803      	ldmia	r0, {r0, r1}
 800cb40:	6863      	ldr	r3, [r4, #4]
 800cb42:	46c4      	mov	ip, r8
 800cb44:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800cb48:	e88b 0003 	stmia.w	fp, {r0, r1}
 800cb4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb50:	ae23      	add	r6, sp, #140	@ 0x8c
 800cb52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cb54:	f8dc 3000 	ldr.w	r3, [ip]
 800cb58:	6033      	str	r3, [r6, #0]
 800cb5a:	ab28      	add	r3, sp, #160	@ 0xa0
 800cb5c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800cb60:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cb64:	4649      	mov	r1, r9
 800cb66:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb68:	463a      	mov	r2, r7
 800cb6a:	4670      	mov	r0, lr
 800cb6c:	f007 fde8 	bl	8014740 <rcl_guard_condition_init_from_rmw>
 800cb70:	4681      	mov	r9, r0
 800cb72:	b328      	cbz	r0, 800cbc0 <rcl_node_init+0x1e4>
 800cb74:	6863      	ldr	r3, [r4, #4]
 800cb76:	b1f3      	cbz	r3, 800cbb6 <rcl_node_init+0x1da>
 800cb78:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800cb7a:	b128      	cbz	r0, 800cb88 <rcl_node_init+0x1ac>
 800cb7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb80:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cb84:	4798      	blx	r3
 800cb86:	6863      	ldr	r3, [r4, #4]
 800cb88:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800cb8a:	b110      	cbz	r0, 800cb92 <rcl_node_init+0x1b6>
 800cb8c:	f002 fb4c 	bl	800f228 <rmw_destroy_node>
 800cb90:	6863      	ldr	r3, [r4, #4]
 800cb92:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800cb94:	b148      	cbz	r0, 800cbaa <rcl_node_init+0x1ce>
 800cb96:	f007 fe33 	bl	8014800 <rcl_guard_condition_fini>
 800cb9a:	6863      	ldr	r3, [r4, #4]
 800cb9c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cba0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800cba2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cba6:	4798      	blx	r3
 800cba8:	6863      	ldr	r3, [r4, #4]
 800cbaa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbb4:	4798      	blx	r3
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	e9c4 3300 	strd	r3, r3, [r4]
 800cbbc:	f04f 0901 	mov.w	r9, #1
 800cbc0:	f1ba 0f00 	cmp.w	sl, #0
 800cbc4:	d125      	bne.n	800cc12 <rcl_node_init+0x236>
 800cbc6:	e001      	b.n	800cbcc <rcl_node_init+0x1f0>
 800cbc8:	f04f 090b 	mov.w	r9, #11
 800cbcc:	4648      	mov	r0, r9
 800cbce:	b029      	add	sp, #164	@ 0xa4
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800cbd8:	e7f8      	b.n	800cbcc <rcl_node_init+0x1f0>
 800cbda:	782b      	ldrb	r3, [r5, #0]
 800cbdc:	2b2f      	cmp	r3, #47	@ 0x2f
 800cbde:	f43f af42 	beq.w	800ca66 <rcl_node_init+0x8a>
 800cbe2:	9503      	str	r5, [sp, #12]
 800cbe4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	4b1e      	ldr	r3, [pc, #120]	@ (800cc64 <rcl_node_init+0x288>)
 800cbec:	9302      	str	r3, [sp, #8]
 800cbee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cbf2:	9301      	str	r3, [sp, #4]
 800cbf4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800cbf8:	f001 faa6 	bl	800e148 <rcutils_format_string_limit>
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	b340      	cbz	r0, 800cc52 <rcl_node_init+0x276>
 800cc00:	2200      	movs	r2, #0
 800cc02:	a922      	add	r1, sp, #136	@ 0x88
 800cc04:	9222      	str	r2, [sp, #136]	@ 0x88
 800cc06:	f001 fe4f 	bl	800e8a8 <rmw_validate_namespace>
 800cc0a:	4681      	mov	r9, r0
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f43f af34 	beq.w	800ca7a <rcl_node_init+0x9e>
 800cc12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	4798      	blx	r3
 800cc1e:	e7d5      	b.n	800cbcc <rcl_node_init+0x1f0>
 800cc20:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800cc24:	4648      	mov	r0, r9
 800cc26:	b029      	add	sp, #164	@ 0xa4
 800cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2c:	f04f 090a 	mov.w	r9, #10
 800cc30:	f1ba 0f00 	cmp.w	sl, #0
 800cc34:	d1ed      	bne.n	800cc12 <rcl_node_init+0x236>
 800cc36:	e7c9      	b.n	800cbcc <rcl_node_init+0x1f0>
 800cc38:	f001 fea6 	bl	800e988 <rmw_node_name_validation_result_string>
 800cc3c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800cc40:	e7c4      	b.n	800cbcc <rcl_node_init+0x1f0>
 800cc42:	f001 fe43 	bl	800e8cc <rmw_namespace_validation_result_string>
 800cc46:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800cc4a:	f1ba 0f00 	cmp.w	sl, #0
 800cc4e:	d1e0      	bne.n	800cc12 <rcl_node_init+0x236>
 800cc50:	e7bc      	b.n	800cbcc <rcl_node_init+0x1f0>
 800cc52:	f04f 090a 	mov.w	r9, #10
 800cc56:	e7b9      	b.n	800cbcc <rcl_node_init+0x1f0>
 800cc58:	0801a11c 	.word	0x0801a11c
 800cc5c:	0801a124 	.word	0x0801a124
 800cc60:	0801a12c 	.word	0x0801a12c
 800cc64:	0801a120 	.word	0x0801a120

0800cc68 <rcl_node_is_valid>:
 800cc68:	b130      	cbz	r0, 800cc78 <rcl_node_is_valid+0x10>
 800cc6a:	6843      	ldr	r3, [r0, #4]
 800cc6c:	b123      	cbz	r3, 800cc78 <rcl_node_is_valid+0x10>
 800cc6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc70:	b113      	cbz	r3, 800cc78 <rcl_node_is_valid+0x10>
 800cc72:	6800      	ldr	r0, [r0, #0]
 800cc74:	f007 bb44 	b.w	8014300 <rcl_context_is_valid>
 800cc78:	2000      	movs	r0, #0
 800cc7a:	4770      	bx	lr

0800cc7c <rcl_node_get_name>:
 800cc7c:	b120      	cbz	r0, 800cc88 <rcl_node_get_name+0xc>
 800cc7e:	6840      	ldr	r0, [r0, #4]
 800cc80:	b110      	cbz	r0, 800cc88 <rcl_node_get_name+0xc>
 800cc82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800cc84:	b100      	cbz	r0, 800cc88 <rcl_node_get_name+0xc>
 800cc86:	6880      	ldr	r0, [r0, #8]
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop

0800cc8c <rcl_node_get_namespace>:
 800cc8c:	b120      	cbz	r0, 800cc98 <rcl_node_get_namespace+0xc>
 800cc8e:	6840      	ldr	r0, [r0, #4]
 800cc90:	b110      	cbz	r0, 800cc98 <rcl_node_get_namespace+0xc>
 800cc92:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800cc94:	b100      	cbz	r0, 800cc98 <rcl_node_get_namespace+0xc>
 800cc96:	68c0      	ldr	r0, [r0, #12]
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop

0800cc9c <rcl_node_get_options>:
 800cc9c:	b128      	cbz	r0, 800ccaa <rcl_node_get_options+0xe>
 800cc9e:	6840      	ldr	r0, [r0, #4]
 800cca0:	b118      	cbz	r0, 800ccaa <rcl_node_get_options+0xe>
 800cca2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	bf08      	it	eq
 800cca8:	2000      	moveq	r0, #0
 800ccaa:	4770      	bx	lr

0800ccac <rcl_node_get_rmw_handle>:
 800ccac:	b110      	cbz	r0, 800ccb4 <rcl_node_get_rmw_handle+0x8>
 800ccae:	6840      	ldr	r0, [r0, #4]
 800ccb0:	b100      	cbz	r0, 800ccb4 <rcl_node_get_rmw_handle+0x8>
 800ccb2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop

0800ccb8 <rcl_node_get_default_options>:
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	2268      	movs	r2, #104	@ 0x68
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	f00c f978 	bl	8018fb4 <memset>
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f001 f933 	bl	800df30 <rcutils_get_default_allocator>
 800ccca:	2301      	movs	r3, #1
 800cccc:	7523      	strb	r3, [r4, #20]
 800ccce:	4620      	mov	r0, r4
 800ccd0:	bd10      	pop	{r4, pc}
 800ccd2:	bf00      	nop

0800ccd4 <rcl_node_options_copy>:
 800ccd4:	b1d0      	cbz	r0, 800cd0c <rcl_node_options_copy+0x38>
 800ccd6:	b570      	push	{r4, r5, r6, lr}
 800ccd8:	460c      	mov	r4, r1
 800ccda:	b1a9      	cbz	r1, 800cd08 <rcl_node_options_copy+0x34>
 800ccdc:	4288      	cmp	r0, r1
 800ccde:	4684      	mov	ip, r0
 800cce0:	d012      	beq.n	800cd08 <rcl_node_options_copy+0x34>
 800cce2:	4605      	mov	r5, r0
 800cce4:	8a86      	ldrh	r6, [r0, #20]
 800cce6:	468e      	mov	lr, r1
 800cce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccee:	682b      	ldr	r3, [r5, #0]
 800ccf0:	f8ce 3000 	str.w	r3, [lr]
 800ccf4:	f10c 0118 	add.w	r1, ip, #24
 800ccf8:	2250      	movs	r2, #80	@ 0x50
 800ccfa:	82a6      	strh	r6, [r4, #20]
 800ccfc:	f104 0018 	add.w	r0, r4, #24
 800cd00:	f00c fa21 	bl	8019146 <memcpy>
 800cd04:	2000      	movs	r0, #0
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
 800cd08:	200b      	movs	r0, #11
 800cd0a:	bd70      	pop	{r4, r5, r6, pc}
 800cd0c:	200b      	movs	r0, #11
 800cd0e:	4770      	bx	lr

0800cd10 <rcl_node_resolve_name>:
 800cd10:	b082      	sub	sp, #8
 800cd12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd16:	b091      	sub	sp, #68	@ 0x44
 800cd18:	ac1a      	add	r4, sp, #104	@ 0x68
 800cd1a:	e884 000c 	stmia.w	r4, {r2, r3}
 800cd1e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d03b      	beq.n	800cd9e <rcl_node_resolve_name+0x8e>
 800cd26:	460c      	mov	r4, r1
 800cd28:	4605      	mov	r5, r0
 800cd2a:	f7ff ffb7 	bl	800cc9c <rcl_node_get_options>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d037      	beq.n	800cda2 <rcl_node_resolve_name+0x92>
 800cd32:	4628      	mov	r0, r5
 800cd34:	f7ff ffa2 	bl	800cc7c <rcl_node_get_name>
 800cd38:	4606      	mov	r6, r0
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f7ff ffa6 	bl	800cc8c <rcl_node_get_namespace>
 800cd40:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800cd44:	4681      	mov	r9, r0
 800cd46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cd4a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800cd4c:	46ac      	mov	ip, r5
 800cd4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd52:	f8de 3000 	ldr.w	r3, [lr]
 800cd56:	f8cc 3000 	str.w	r3, [ip]
 800cd5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd5c:	b1fb      	cbz	r3, 800cd9e <rcl_node_resolve_name+0x8e>
 800cd5e:	468a      	mov	sl, r1
 800cd60:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800cd64:	f001 fb48 	bl	800e3f8 <rcutils_get_zero_initialized_string_map>
 800cd68:	ab10      	add	r3, sp, #64	@ 0x40
 800cd6a:	9008      	str	r0, [sp, #32]
 800cd6c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cd70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cd74:	2100      	movs	r1, #0
 800cd76:	e895 000c 	ldmia.w	r5, {r2, r3}
 800cd7a:	a808      	add	r0, sp, #32
 800cd7c:	f001 fbb4 	bl	800e4e8 <rcutils_string_map_init>
 800cd80:	4607      	mov	r7, r0
 800cd82:	b180      	cbz	r0, 800cda6 <rcl_node_resolve_name+0x96>
 800cd84:	f001 f9ac 	bl	800e0e0 <rcutils_get_error_string>
 800cd88:	f001 f9c2 	bl	800e110 <rcutils_reset_error>
 800cd8c:	2f0a      	cmp	r7, #10
 800cd8e:	bf18      	it	ne
 800cd90:	2701      	movne	r7, #1
 800cd92:	4638      	mov	r0, r7
 800cd94:	b011      	add	sp, #68	@ 0x44
 800cd96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9a:	b002      	add	sp, #8
 800cd9c:	4770      	bx	lr
 800cd9e:	270b      	movs	r7, #11
 800cda0:	e7f7      	b.n	800cd92 <rcl_node_resolve_name+0x82>
 800cda2:	2701      	movs	r7, #1
 800cda4:	e7f5      	b.n	800cd92 <rcl_node_resolve_name+0x82>
 800cda6:	9009      	str	r0, [sp, #36]	@ 0x24
 800cda8:	9007      	str	r0, [sp, #28]
 800cdaa:	a808      	add	r0, sp, #32
 800cdac:	f007 fc6c 	bl	8014688 <rcl_get_default_topic_name_substitutions>
 800cdb0:	4607      	mov	r7, r0
 800cdb2:	b1a8      	cbz	r0, 800cde0 <rcl_node_resolve_name+0xd0>
 800cdb4:	280a      	cmp	r0, #10
 800cdb6:	9c07      	ldr	r4, [sp, #28]
 800cdb8:	d000      	beq.n	800cdbc <rcl_node_resolve_name+0xac>
 800cdba:	2701      	movs	r7, #1
 800cdbc:	a808      	add	r0, sp, #32
 800cdbe:	f001 fbd3 	bl	800e568 <rcutils_string_map_fini>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d13d      	bne.n	800ce42 <rcl_node_resolve_name+0x132>
 800cdc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdc8:	4659      	mov	r1, fp
 800cdca:	47d0      	blx	sl
 800cdcc:	4659      	mov	r1, fp
 800cdce:	4620      	mov	r0, r4
 800cdd0:	47d0      	blx	sl
 800cdd2:	f1b8 0f00 	cmp.w	r8, #0
 800cdd6:	d0dc      	beq.n	800cd92 <rcl_node_resolve_name+0x82>
 800cdd8:	2f67      	cmp	r7, #103	@ 0x67
 800cdda:	bf08      	it	eq
 800cddc:	2768      	moveq	r7, #104	@ 0x68
 800cdde:	e7d8      	b.n	800cd92 <rcl_node_resolve_name+0x82>
 800cde0:	ab09      	add	r3, sp, #36	@ 0x24
 800cde2:	9305      	str	r3, [sp, #20]
 800cde4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cde6:	46ec      	mov	ip, sp
 800cde8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	f8cc 3000 	str.w	r3, [ip]
 800cdf2:	464a      	mov	r2, r9
 800cdf4:	4631      	mov	r1, r6
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	ab08      	add	r3, sp, #32
 800cdfa:	f007 fae7 	bl	80143cc <rcl_expand_topic_name>
 800cdfe:	4607      	mov	r7, r0
 800ce00:	b9b8      	cbnz	r0, 800ce32 <rcl_node_resolve_name+0x122>
 800ce02:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ce04:	9009      	str	r0, [sp, #36]	@ 0x24
 800ce06:	4602      	mov	r2, r0
 800ce08:	a90a      	add	r1, sp, #40	@ 0x28
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f001 fc88 	bl	800e720 <rmw_validate_full_topic_name>
 800ce10:	b988      	cbnz	r0, 800ce36 <rcl_node_resolve_name+0x126>
 800ce12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ce14:	b9d5      	cbnz	r5, 800ce4c <rcl_node_resolve_name+0x13c>
 800ce16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce18:	a808      	add	r0, sp, #32
 800ce1a:	601c      	str	r4, [r3, #0]
 800ce1c:	f001 fba4 	bl	800e568 <rcutils_string_map_fini>
 800ce20:	4607      	mov	r7, r0
 800ce22:	b1a8      	cbz	r0, 800ce50 <rcl_node_resolve_name+0x140>
 800ce24:	f001 f95c 	bl	800e0e0 <rcutils_get_error_string>
 800ce28:	462c      	mov	r4, r5
 800ce2a:	f001 f971 	bl	800e110 <rcutils_reset_error>
 800ce2e:	2701      	movs	r7, #1
 800ce30:	e7c9      	b.n	800cdc6 <rcl_node_resolve_name+0xb6>
 800ce32:	9c07      	ldr	r4, [sp, #28]
 800ce34:	e7c2      	b.n	800cdbc <rcl_node_resolve_name+0xac>
 800ce36:	f001 f953 	bl	800e0e0 <rcutils_get_error_string>
 800ce3a:	2701      	movs	r7, #1
 800ce3c:	f001 f968 	bl	800e110 <rcutils_reset_error>
 800ce40:	e7bc      	b.n	800cdbc <rcl_node_resolve_name+0xac>
 800ce42:	f001 f94d 	bl	800e0e0 <rcutils_get_error_string>
 800ce46:	f001 f963 	bl	800e110 <rcutils_reset_error>
 800ce4a:	e7bc      	b.n	800cdc6 <rcl_node_resolve_name+0xb6>
 800ce4c:	2767      	movs	r7, #103	@ 0x67
 800ce4e:	e7b5      	b.n	800cdbc <rcl_node_resolve_name+0xac>
 800ce50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce52:	4659      	mov	r1, fp
 800ce54:	47d0      	blx	sl
 800ce56:	4659      	mov	r1, fp
 800ce58:	4638      	mov	r0, r7
 800ce5a:	47d0      	blx	sl
 800ce5c:	e799      	b.n	800cd92 <rcl_node_resolve_name+0x82>
 800ce5e:	bf00      	nop

0800ce60 <rcl_get_zero_initialized_publisher>:
 800ce60:	4b01      	ldr	r3, [pc, #4]	@ (800ce68 <rcl_get_zero_initialized_publisher+0x8>)
 800ce62:	6818      	ldr	r0, [r3, #0]
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	0801a13c 	.word	0x0801a13c

0800ce6c <rcl_publisher_init>:
 800ce6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce70:	b088      	sub	sp, #32
 800ce72:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ce74:	2d00      	cmp	r5, #0
 800ce76:	d069      	beq.n	800cf4c <rcl_publisher_init+0xe0>
 800ce78:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	4648      	mov	r0, r9
 800ce80:	460e      	mov	r6, r1
 800ce82:	4690      	mov	r8, r2
 800ce84:	461f      	mov	r7, r3
 800ce86:	f001 f861 	bl	800df4c <rcutils_allocator_is_valid>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d05e      	beq.n	800cf4c <rcl_publisher_init+0xe0>
 800ce8e:	2c00      	cmp	r4, #0
 800ce90:	d05c      	beq.n	800cf4c <rcl_publisher_init+0xe0>
 800ce92:	f8d4 a000 	ldr.w	sl, [r4]
 800ce96:	f1ba 0f00 	cmp.w	sl, #0
 800ce9a:	d004      	beq.n	800cea6 <rcl_publisher_init+0x3a>
 800ce9c:	2764      	movs	r7, #100	@ 0x64
 800ce9e:	4638      	mov	r0, r7
 800cea0:	b008      	add	sp, #32
 800cea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7ff fede 	bl	800cc68 <rcl_node_is_valid>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d052      	beq.n	800cf56 <rcl_publisher_init+0xea>
 800ceb0:	f1b8 0f00 	cmp.w	r8, #0
 800ceb4:	d04a      	beq.n	800cf4c <rcl_publisher_init+0xe0>
 800ceb6:	2f00      	cmp	r7, #0
 800ceb8:	d048      	beq.n	800cf4c <rcl_publisher_init+0xe0>
 800ceba:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800cebe:	aa07      	add	r2, sp, #28
 800cec0:	9205      	str	r2, [sp, #20]
 800cec2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ceca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cece:	f8cd a01c 	str.w	sl, [sp, #28]
 800ced2:	4639      	mov	r1, r7
 800ced4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7ff ff19 	bl	800cd10 <rcl_node_resolve_name>
 800cede:	4607      	mov	r7, r0
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d14f      	bne.n	800cf84 <rcl_publisher_init+0x118>
 800cee4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cee6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cee8:	20c8      	movs	r0, #200	@ 0xc8
 800ceea:	4798      	blx	r3
 800ceec:	6020      	str	r0, [r4, #0]
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d04e      	beq.n	800cf90 <rcl_publisher_init+0x124>
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7ff feda 	bl	800ccac <rcl_node_get_rmw_handle>
 800cef8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	9a07      	ldr	r2, [sp, #28]
 800cf00:	6827      	ldr	r7, [r4, #0]
 800cf02:	462b      	mov	r3, r5
 800cf04:	4641      	mov	r1, r8
 800cf06:	f002 fa75 	bl	800f3f4 <rmw_create_publisher>
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800cf10:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cf14:	b370      	cbz	r0, 800cf74 <rcl_publisher_init+0x108>
 800cf16:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800cf1a:	f002 fb49 	bl	800f5b0 <rmw_publisher_get_actual_qos>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	4607      	mov	r7, r0
 800cf22:	b9d0      	cbnz	r0, 800cf5a <rcl_publisher_init+0xee>
 800cf24:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800cf28:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	2270      	movs	r2, #112	@ 0x70
 800cf30:	4618      	mov	r0, r3
 800cf32:	f00c f908 	bl	8019146 <memcpy>
 800cf36:	6832      	ldr	r2, [r6, #0]
 800cf38:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800cf3c:	9807      	ldr	r0, [sp, #28]
 800cf3e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800cf40:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cf42:	4798      	blx	r3
 800cf44:	4638      	mov	r0, r7
 800cf46:	b008      	add	sp, #32
 800cf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4c:	270b      	movs	r7, #11
 800cf4e:	4638      	mov	r0, r7
 800cf50:	b008      	add	sp, #32
 800cf52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf56:	27c8      	movs	r7, #200	@ 0xc8
 800cf58:	e7a1      	b.n	800ce9e <rcl_publisher_init+0x32>
 800cf5a:	b18b      	cbz	r3, 800cf80 <rcl_publisher_init+0x114>
 800cf5c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cf60:	b142      	cbz	r2, 800cf74 <rcl_publisher_init+0x108>
 800cf62:	4630      	mov	r0, r6
 800cf64:	f7ff fea2 	bl	800ccac <rcl_node_get_rmw_handle>
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cf6e:	f002 fb2f 	bl	800f5d0 <rmw_destroy_publisher>
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800cf76:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cf78:	4618      	mov	r0, r3
 800cf7a:	4790      	blx	r2
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6023      	str	r3, [r4, #0]
 800cf80:	2701      	movs	r7, #1
 800cf82:	e7db      	b.n	800cf3c <rcl_publisher_init+0xd0>
 800cf84:	2867      	cmp	r0, #103	@ 0x67
 800cf86:	d0d9      	beq.n	800cf3c <rcl_publisher_init+0xd0>
 800cf88:	2869      	cmp	r0, #105	@ 0x69
 800cf8a:	d003      	beq.n	800cf94 <rcl_publisher_init+0x128>
 800cf8c:	280a      	cmp	r0, #10
 800cf8e:	d1f7      	bne.n	800cf80 <rcl_publisher_init+0x114>
 800cf90:	270a      	movs	r7, #10
 800cf92:	e7d3      	b.n	800cf3c <rcl_publisher_init+0xd0>
 800cf94:	2767      	movs	r7, #103	@ 0x67
 800cf96:	e7d1      	b.n	800cf3c <rcl_publisher_init+0xd0>

0800cf98 <rcl_publisher_get_default_options>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	4d14      	ldr	r5, [pc, #80]	@ (800cfec <rcl_publisher_get_default_options+0x54>)
 800cf9c:	4914      	ldr	r1, [pc, #80]	@ (800cff0 <rcl_publisher_get_default_options+0x58>)
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	2250      	movs	r2, #80	@ 0x50
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f00c f8ce 	bl	8019146 <memcpy>
 800cfaa:	a802      	add	r0, sp, #8
 800cfac:	f000 ffc0 	bl	800df30 <rcutils_get_default_allocator>
 800cfb0:	f10d 0c08 	add.w	ip, sp, #8
 800cfb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cfb8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800cfbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cfc0:	466e      	mov	r6, sp
 800cfc2:	f8dc 3000 	ldr.w	r3, [ip]
 800cfc6:	f8ce 3000 	str.w	r3, [lr]
 800cfca:	4630      	mov	r0, r6
 800cfcc:	f001 fba0 	bl	800e710 <rmw_get_default_publisher_options>
 800cfd0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cfd4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cfd8:	e883 0003 	stmia.w	r3, {r0, r1}
 800cfdc:	2270      	movs	r2, #112	@ 0x70
 800cfde:	4629      	mov	r1, r5
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f00c f8b0 	bl	8019146 <memcpy>
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	b008      	add	sp, #32
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
 800cfec:	20006848 	.word	0x20006848
 800cff0:	0801a140 	.word	0x0801a140

0800cff4 <rcl_publish>:
 800cff4:	b1f8      	cbz	r0, 800d036 <rcl_publish+0x42>
 800cff6:	6803      	ldr	r3, [r0, #0]
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	4604      	mov	r4, r0
 800cffc:	b1b3      	cbz	r3, 800d02c <rcl_publish+0x38>
 800cffe:	4616      	mov	r6, r2
 800d000:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d004:	b192      	cbz	r2, 800d02c <rcl_publish+0x38>
 800d006:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d00a:	460d      	mov	r5, r1
 800d00c:	f007 f978 	bl	8014300 <rcl_context_is_valid>
 800d010:	b160      	cbz	r0, 800d02c <rcl_publish+0x38>
 800d012:	6823      	ldr	r3, [r4, #0]
 800d014:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d018:	b140      	cbz	r0, 800d02c <rcl_publish+0x38>
 800d01a:	b155      	cbz	r5, 800d032 <rcl_publish+0x3e>
 800d01c:	4632      	mov	r2, r6
 800d01e:	4629      	mov	r1, r5
 800d020:	f002 f988 	bl	800f334 <rmw_publish>
 800d024:	3800      	subs	r0, #0
 800d026:	bf18      	it	ne
 800d028:	2001      	movne	r0, #1
 800d02a:	bd70      	pop	{r4, r5, r6, pc}
 800d02c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d030:	bd70      	pop	{r4, r5, r6, pc}
 800d032:	200b      	movs	r0, #11
 800d034:	bd70      	pop	{r4, r5, r6, pc}
 800d036:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d03a:	4770      	bx	lr

0800d03c <rcl_publisher_is_valid>:
 800d03c:	b1a0      	cbz	r0, 800d068 <rcl_publisher_is_valid+0x2c>
 800d03e:	6803      	ldr	r3, [r0, #0]
 800d040:	b510      	push	{r4, lr}
 800d042:	4604      	mov	r4, r0
 800d044:	b173      	cbz	r3, 800d064 <rcl_publisher_is_valid+0x28>
 800d046:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d04a:	b15a      	cbz	r2, 800d064 <rcl_publisher_is_valid+0x28>
 800d04c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d050:	f007 f956 	bl	8014300 <rcl_context_is_valid>
 800d054:	b130      	cbz	r0, 800d064 <rcl_publisher_is_valid+0x28>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d05c:	3800      	subs	r0, #0
 800d05e:	bf18      	it	ne
 800d060:	2001      	movne	r0, #1
 800d062:	bd10      	pop	{r4, pc}
 800d064:	2000      	movs	r0, #0
 800d066:	bd10      	pop	{r4, pc}
 800d068:	2000      	movs	r0, #0
 800d06a:	4770      	bx	lr

0800d06c <rcl_publisher_is_valid_except_context>:
 800d06c:	b130      	cbz	r0, 800d07c <rcl_publisher_is_valid_except_context+0x10>
 800d06e:	6800      	ldr	r0, [r0, #0]
 800d070:	b120      	cbz	r0, 800d07c <rcl_publisher_is_valid_except_context+0x10>
 800d072:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800d076:	3800      	subs	r0, #0
 800d078:	bf18      	it	ne
 800d07a:	2001      	movne	r0, #1
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <rclc_client_init_default>:
 800d080:	b368      	cbz	r0, 800d0de <rclc_client_init_default+0x5e>
 800d082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d086:	460d      	mov	r5, r1
 800d088:	b09e      	sub	sp, #120	@ 0x78
 800d08a:	b321      	cbz	r1, 800d0d6 <rclc_client_init_default+0x56>
 800d08c:	4616      	mov	r6, r2
 800d08e:	b312      	cbz	r2, 800d0d6 <rclc_client_init_default+0x56>
 800d090:	461f      	mov	r7, r3
 800d092:	b303      	cbz	r3, 800d0d6 <rclc_client_init_default+0x56>
 800d094:	4604      	mov	r4, r0
 800d096:	f7ff fa4b 	bl	800c530 <rcl_get_zero_initialized_client>
 800d09a:	f10d 0810 	add.w	r8, sp, #16
 800d09e:	6020      	str	r0, [r4, #0]
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	f7ff fad9 	bl	800c658 <rcl_client_get_default_options>
 800d0a6:	490f      	ldr	r1, [pc, #60]	@ (800d0e4 <rclc_client_init_default+0x64>)
 800d0a8:	2250      	movs	r2, #80	@ 0x50
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	f00c f84b 	bl	8019146 <memcpy>
 800d0b0:	f8cd 8000 	str.w	r8, [sp]
 800d0b4:	463b      	mov	r3, r7
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff fa3e 	bl	800c53c <rcl_client_init>
 800d0c0:	b910      	cbnz	r0, 800d0c8 <rclc_client_init_default+0x48>
 800d0c2:	b01e      	add	sp, #120	@ 0x78
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	9003      	str	r0, [sp, #12]
 800d0ca:	f001 f821 	bl	800e110 <rcutils_reset_error>
 800d0ce:	9803      	ldr	r0, [sp, #12]
 800d0d0:	b01e      	add	sp, #120	@ 0x78
 800d0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d6:	200b      	movs	r0, #11
 800d0d8:	b01e      	add	sp, #120	@ 0x78
 800d0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0de:	200b      	movs	r0, #11
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	0801a190 	.word	0x0801a190

0800d0e8 <_rclc_check_for_new_data>:
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d046      	beq.n	800d17a <_rclc_check_for_new_data+0x92>
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	7802      	ldrb	r2, [r0, #0]
 800d0f0:	b084      	sub	sp, #16
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2a0a      	cmp	r2, #10
 800d0f6:	d842      	bhi.n	800d17e <_rclc_check_for_new_data+0x96>
 800d0f8:	e8df f002 	tbb	[pc, r2]
 800d0fc:	14181212 	.word	0x14181212
 800d100:	06060614 	.word	0x06060614
 800d104:	2e1a      	.short	0x2e1a
 800d106:	16          	.byte	0x16
 800d107:	00          	.byte	0x00
 800d108:	6a0a      	ldr	r2, [r1, #32]
 800d10a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d10c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d110:	2000      	movs	r0, #0
 800d112:	1a12      	subs	r2, r2, r0
 800d114:	bf18      	it	ne
 800d116:	2201      	movne	r2, #1
 800d118:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d11c:	b004      	add	sp, #16
 800d11e:	bd10      	pop	{r4, pc}
 800d120:	680a      	ldr	r2, [r1, #0]
 800d122:	e7f2      	b.n	800d10a <_rclc_check_for_new_data+0x22>
 800d124:	698a      	ldr	r2, [r1, #24]
 800d126:	e7f0      	b.n	800d10a <_rclc_check_for_new_data+0x22>
 800d128:	688a      	ldr	r2, [r1, #8]
 800d12a:	e7ee      	b.n	800d10a <_rclc_check_for_new_data+0x22>
 800d12c:	690a      	ldr	r2, [r1, #16]
 800d12e:	e7ec      	b.n	800d10a <_rclc_check_for_new_data+0x22>
 800d130:	685c      	ldr	r4, [r3, #4]
 800d132:	4608      	mov	r0, r1
 800d134:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800d138:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800d13c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800d140:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800d14a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800d14e:	f104 0110 	add.w	r1, r4, #16
 800d152:	f009 faf9 	bl	8016748 <rcl_action_client_wait_set_get_entities_ready>
 800d156:	e7e1      	b.n	800d11c <_rclc_check_for_new_data+0x34>
 800d158:	685c      	ldr	r4, [r3, #4]
 800d15a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d15e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800d162:	e9cd 3200 	strd	r3, r2, [sp]
 800d166:	4608      	mov	r0, r1
 800d168:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d16c:	f104 0220 	add.w	r2, r4, #32
 800d170:	f104 0110 	add.w	r1, r4, #16
 800d174:	f009 fd00 	bl	8016b78 <rcl_action_server_wait_set_get_entities_ready>
 800d178:	e7d0      	b.n	800d11c <_rclc_check_for_new_data+0x34>
 800d17a:	200b      	movs	r0, #11
 800d17c:	4770      	bx	lr
 800d17e:	2001      	movs	r0, #1
 800d180:	e7cc      	b.n	800d11c <_rclc_check_for_new_data+0x34>
 800d182:	bf00      	nop

0800d184 <_rclc_take_new_data>:
 800d184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d186:	b09b      	sub	sp, #108	@ 0x6c
 800d188:	2800      	cmp	r0, #0
 800d18a:	f000 8088 	beq.w	800d29e <_rclc_take_new_data+0x11a>
 800d18e:	7803      	ldrb	r3, [r0, #0]
 800d190:	4604      	mov	r4, r0
 800d192:	2b0a      	cmp	r3, #10
 800d194:	f200 8167 	bhi.w	800d466 <_rclc_take_new_data+0x2e2>
 800d198:	e8df f003 	tbb	[pc, r3]
 800d19c:	44152d2d 	.word	0x44152d2d
 800d1a0:	19191944 	.word	0x19191944
 800d1a4:	065a      	.short	0x065a
 800d1a6:	15          	.byte	0x15
 800d1a7:	00          	.byte	0x00
 800d1a8:	6840      	ldr	r0, [r0, #4]
 800d1aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f040 80b2 	bne.w	800d318 <_rclc_take_new_data+0x194>
 800d1b4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f040 80e4 	bne.w	800d386 <_rclc_take_new_data+0x202>
 800d1be:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d16f      	bne.n	800d2a6 <_rclc_take_new_data+0x122>
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	b01b      	add	sp, #108	@ 0x6c
 800d1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ce:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d1d0:	6a0b      	ldr	r3, [r1, #32]
 800d1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d0f5      	beq.n	800d1c6 <_rclc_take_new_data+0x42>
 800d1da:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d1de:	f104 0110 	add.w	r1, r4, #16
 800d1e2:	f007 fd8d 	bl	8014d00 <rcl_take_request>
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d0ec      	beq.n	800d1c6 <_rclc_take_new_data+0x42>
 800d1ec:	f240 2359 	movw	r3, #601	@ 0x259
 800d1f0:	4298      	cmp	r0, r3
 800d1f2:	d013      	beq.n	800d21c <_rclc_take_new_data+0x98>
 800d1f4:	e029      	b.n	800d24a <_rclc_take_new_data+0xc6>
 800d1f6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d1f8:	680b      	ldr	r3, [r1, #0]
 800d1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0e1      	beq.n	800d1c6 <_rclc_take_new_data+0x42>
 800d202:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d206:	2300      	movs	r3, #0
 800d208:	aa0a      	add	r2, sp, #40	@ 0x28
 800d20a:	f007 fddb 	bl	8014dc4 <rcl_take>
 800d20e:	4605      	mov	r5, r0
 800d210:	2800      	cmp	r0, #0
 800d212:	d0d9      	beq.n	800d1c8 <_rclc_take_new_data+0x44>
 800d214:	f240 1391 	movw	r3, #401	@ 0x191
 800d218:	4298      	cmp	r0, r3
 800d21a:	d116      	bne.n	800d24a <_rclc_take_new_data+0xc6>
 800d21c:	2300      	movs	r3, #0
 800d21e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d222:	e7d1      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d224:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d226:	698b      	ldr	r3, [r1, #24]
 800d228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d0ca      	beq.n	800d1c6 <_rclc_take_new_data+0x42>
 800d230:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d234:	f104 0110 	add.w	r1, r4, #16
 800d238:	f7ff fa6e 	bl	800c718 <rcl_take_response>
 800d23c:	4605      	mov	r5, r0
 800d23e:	2800      	cmp	r0, #0
 800d240:	d0c1      	beq.n	800d1c6 <_rclc_take_new_data+0x42>
 800d242:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d246:	4298      	cmp	r0, r3
 800d248:	d0be      	beq.n	800d1c8 <_rclc_take_new_data+0x44>
 800d24a:	f000 ff61 	bl	800e110 <rcutils_reset_error>
 800d24e:	e7bb      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d250:	6840      	ldr	r0, [r0, #4]
 800d252:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d256:	2b00      	cmp	r3, #0
 800d258:	d17d      	bne.n	800d356 <_rclc_take_new_data+0x1d2>
 800d25a:	69c3      	ldr	r3, [r0, #28]
 800d25c:	b11b      	cbz	r3, 800d266 <_rclc_take_new_data+0xe2>
 800d25e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d262:	2b00      	cmp	r3, #0
 800d264:	d144      	bne.n	800d2f0 <_rclc_take_new_data+0x16c>
 800d266:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f040 80ac 	bne.w	800d3c8 <_rclc_take_new_data+0x244>
 800d270:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d274:	2b00      	cmp	r3, #0
 800d276:	d0a6      	beq.n	800d1c6 <_rclc_take_new_data+0x42>
 800d278:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d27a:	a90a      	add	r1, sp, #40	@ 0x28
 800d27c:	3010      	adds	r0, #16
 800d27e:	f009 f93b 	bl	80164f8 <rcl_action_take_result_response>
 800d282:	4605      	mov	r5, r0
 800d284:	2800      	cmp	r0, #0
 800d286:	d1e0      	bne.n	800d24a <_rclc_take_new_data+0xc6>
 800d288:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d28c:	6860      	ldr	r0, [r4, #4]
 800d28e:	f009 fd97 	bl	8016dc0 <rclc_action_find_handle_by_result_request_sequence_number>
 800d292:	2800      	cmp	r0, #0
 800d294:	d098      	beq.n	800d1c8 <_rclc_take_new_data+0x44>
 800d296:	2301      	movs	r3, #1
 800d298:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d29c:	e794      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d29e:	250b      	movs	r5, #11
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	b01b      	add	sp, #108	@ 0x6c
 800d2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a6:	ae04      	add	r6, sp, #16
 800d2a8:	aa0a      	add	r2, sp, #40	@ 0x28
 800d2aa:	3010      	adds	r0, #16
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	f009 fb97 	bl	80169e0 <rcl_action_take_cancel_request>
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d1c8      	bne.n	800d24a <_rclc_take_new_data+0xc6>
 800d2b8:	6860      	ldr	r0, [r4, #4]
 800d2ba:	a90a      	add	r1, sp, #40	@ 0x28
 800d2bc:	f009 fd3e 	bl	8016d3c <rclc_action_find_goal_handle_by_uuid>
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	f000 80bb 	beq.w	800d43e <_rclc_take_new_data+0x2ba>
 800d2c8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	f009 fcbf 	bl	8016c50 <rcl_action_transition_goal_state>
 800d2d2:	2803      	cmp	r0, #3
 800d2d4:	4684      	mov	ip, r0
 800d2d6:	f040 80a7 	bne.w	800d428 <_rclc_take_new_data+0x2a4>
 800d2da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d2dc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d2e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d2e6:	e884 0003 	stmia.w	r4, {r0, r1}
 800d2ea:	f887 c008 	strb.w	ip, [r7, #8]
 800d2ee:	e76b      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d2f0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d2f2:	3010      	adds	r0, #16
 800d2f4:	f009 f980 	bl	80165f8 <rcl_action_take_feedback>
 800d2f8:	4605      	mov	r5, r0
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d1a5      	bne.n	800d24a <_rclc_take_new_data+0xc6>
 800d2fe:	6860      	ldr	r0, [r4, #4]
 800d300:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d302:	f009 fd1b 	bl	8016d3c <rclc_action_find_goal_handle_by_uuid>
 800d306:	4603      	mov	r3, r0
 800d308:	2800      	cmp	r0, #0
 800d30a:	f000 80a3 	beq.w	800d454 <_rclc_take_new_data+0x2d0>
 800d30e:	2201      	movs	r2, #1
 800d310:	6860      	ldr	r0, [r4, #4]
 800d312:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d316:	e7a6      	b.n	800d266 <_rclc_take_new_data+0xe2>
 800d318:	f009 fcea 	bl	8016cf0 <rclc_action_take_goal_handle>
 800d31c:	4606      	mov	r6, r0
 800d31e:	6860      	ldr	r0, [r4, #4]
 800d320:	2e00      	cmp	r6, #0
 800d322:	f43f af47 	beq.w	800d1b4 <_rclc_take_new_data+0x30>
 800d326:	6070      	str	r0, [r6, #4]
 800d328:	69f2      	ldr	r2, [r6, #28]
 800d32a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d32e:	3010      	adds	r0, #16
 800d330:	f009 fa9e 	bl	8016870 <rcl_action_take_goal_request>
 800d334:	4605      	mov	r5, r0
 800d336:	2800      	cmp	r0, #0
 800d338:	f040 808e 	bne.w	800d458 <_rclc_take_new_data+0x2d4>
 800d33c:	69f7      	ldr	r7, [r6, #28]
 800d33e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d340:	7235      	strb	r5, [r6, #8]
 800d342:	f8c6 0009 	str.w	r0, [r6, #9]
 800d346:	f8c6 100d 	str.w	r1, [r6, #13]
 800d34a:	6860      	ldr	r0, [r4, #4]
 800d34c:	f8c6 2011 	str.w	r2, [r6, #17]
 800d350:	f8c6 3015 	str.w	r3, [r6, #21]
 800d354:	e72e      	b.n	800d1b4 <_rclc_take_new_data+0x30>
 800d356:	aa04      	add	r2, sp, #16
 800d358:	a90a      	add	r1, sp, #40	@ 0x28
 800d35a:	3010      	adds	r0, #16
 800d35c:	f009 f854 	bl	8016408 <rcl_action_take_goal_response>
 800d360:	4605      	mov	r5, r0
 800d362:	2800      	cmp	r0, #0
 800d364:	f47f af71 	bne.w	800d24a <_rclc_take_new_data+0xc6>
 800d368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d36c:	6860      	ldr	r0, [r4, #4]
 800d36e:	f009 fd15 	bl	8016d9c <rclc_action_find_handle_by_goal_request_sequence_number>
 800d372:	b130      	cbz	r0, 800d382 <_rclc_take_new_data+0x1fe>
 800d374:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d378:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d37c:	2201      	movs	r2, #1
 800d37e:	f880 2020 	strb.w	r2, [r0, #32]
 800d382:	6860      	ldr	r0, [r4, #4]
 800d384:	e769      	b.n	800d25a <_rclc_take_new_data+0xd6>
 800d386:	aa04      	add	r2, sp, #16
 800d388:	3010      	adds	r0, #16
 800d38a:	a90a      	add	r1, sp, #40	@ 0x28
 800d38c:	f009 fae8 	bl	8016960 <rcl_action_take_result_request>
 800d390:	4605      	mov	r5, r0
 800d392:	2800      	cmp	r0, #0
 800d394:	f47f af59 	bne.w	800d24a <_rclc_take_new_data+0xc6>
 800d398:	6860      	ldr	r0, [r4, #4]
 800d39a:	a904      	add	r1, sp, #16
 800d39c:	f009 fcce 	bl	8016d3c <rclc_action_find_goal_handle_by_uuid>
 800d3a0:	4607      	mov	r7, r0
 800d3a2:	b160      	cbz	r0, 800d3be <_rclc_take_new_data+0x23a>
 800d3a4:	ad0a      	add	r5, sp, #40	@ 0x28
 800d3a6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d3aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d3ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d3b2:	f04f 0c02 	mov.w	ip, #2
 800d3b6:	e886 0003 	stmia.w	r6, {r0, r1}
 800d3ba:	f887 c008 	strb.w	ip, [r7, #8]
 800d3be:	6860      	ldr	r0, [r4, #4]
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d3c6:	e6fa      	b.n	800d1be <_rclc_take_new_data+0x3a>
 800d3c8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d3cc:	a90a      	add	r1, sp, #40	@ 0x28
 800d3ce:	3010      	adds	r0, #16
 800d3d0:	f009 f8d2 	bl	8016578 <rcl_action_take_cancel_response>
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	f47f af37 	bne.w	800d24a <_rclc_take_new_data+0xc6>
 800d3dc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d3e0:	6860      	ldr	r0, [r4, #4]
 800d3e2:	f009 fcff 	bl	8016de4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	6860      	ldr	r0, [r4, #4]
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	f43f af40 	beq.w	800d270 <_rclc_take_new_data+0xec>
 800d3f0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d3f2:	2701      	movs	r7, #1
 800d3f4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f43f af3a 	beq.w	800d270 <_rclc_take_new_data+0xec>
 800d3fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d3fe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d402:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d406:	f009 fc99 	bl	8016d3c <rclc_action_find_goal_handle_by_uuid>
 800d40a:	b138      	cbz	r0, 800d41c <_rclc_take_new_data+0x298>
 800d40c:	6860      	ldr	r0, [r4, #4]
 800d40e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d410:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d414:	3501      	adds	r5, #1
 800d416:	42ab      	cmp	r3, r5
 800d418:	d8f0      	bhi.n	800d3fc <_rclc_take_new_data+0x278>
 800d41a:	e729      	b.n	800d270 <_rclc_take_new_data+0xec>
 800d41c:	6860      	ldr	r0, [r4, #4]
 800d41e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d420:	3501      	adds	r5, #1
 800d422:	42ab      	cmp	r3, r5
 800d424:	d8ea      	bhi.n	800d3fc <_rclc_take_new_data+0x278>
 800d426:	e723      	b.n	800d270 <_rclc_take_new_data+0xec>
 800d428:	ab06      	add	r3, sp, #24
 800d42a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d42c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d430:	2103      	movs	r1, #3
 800d432:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d436:	6860      	ldr	r0, [r4, #4]
 800d438:	f009 fd4a 	bl	8016ed0 <rclc_action_server_goal_cancel_reject>
 800d43c:	e6c4      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d43e:	ab06      	add	r3, sp, #24
 800d440:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d442:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d446:	2102      	movs	r1, #2
 800d448:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d44c:	6860      	ldr	r0, [r4, #4]
 800d44e:	f009 fd3f 	bl	8016ed0 <rclc_action_server_goal_cancel_reject>
 800d452:	e6b9      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d454:	6860      	ldr	r0, [r4, #4]
 800d456:	e706      	b.n	800d266 <_rclc_take_new_data+0xe2>
 800d458:	6860      	ldr	r0, [r4, #4]
 800d45a:	4631      	mov	r1, r6
 800d45c:	f009 fc58 	bl	8016d10 <rclc_action_remove_used_goal_handle>
 800d460:	f000 fe56 	bl	800e110 <rcutils_reset_error>
 800d464:	e6b0      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d466:	2501      	movs	r5, #1
 800d468:	e6ae      	b.n	800d1c8 <_rclc_take_new_data+0x44>
 800d46a:	bf00      	nop

0800d46c <_rclc_execute.part.0>:
 800d46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d46e:	7803      	ldrb	r3, [r0, #0]
 800d470:	b087      	sub	sp, #28
 800d472:	4604      	mov	r4, r0
 800d474:	2b0a      	cmp	r3, #10
 800d476:	f200 8136 	bhi.w	800d6e6 <_rclc_execute.part.0+0x27a>
 800d47a:	e8df f003 	tbb	[pc, r3]
 800d47e:	435e      	.short	0x435e
 800d480:	06a1664f 	.word	0x06a1664f
 800d484:	6c1e0606 	.word	0x6c1e0606
 800d488:	59          	.byte	0x59
 800d489:	00          	.byte	0x00
 800d48a:	2b06      	cmp	r3, #6
 800d48c:	f000 8122 	beq.w	800d6d4 <_rclc_execute.part.0+0x268>
 800d490:	2b07      	cmp	r3, #7
 800d492:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d494:	f040 8118 	bne.w	800d6c8 <_rclc_execute.part.0+0x25c>
 800d498:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d49c:	6880      	ldr	r0, [r0, #8]
 800d49e:	4798      	blx	r3
 800d4a0:	f104 0110 	add.w	r1, r4, #16
 800d4a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d4a6:	6860      	ldr	r0, [r4, #4]
 800d4a8:	f007 fc6a 	bl	8014d80 <rcl_send_response>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d033      	beq.n	800d518 <_rclc_execute.part.0+0xac>
 800d4b0:	9005      	str	r0, [sp, #20]
 800d4b2:	f000 fe2d 	bl	800e110 <rcutils_reset_error>
 800d4b6:	9805      	ldr	r0, [sp, #20]
 800d4b8:	e02e      	b.n	800d518 <_rclc_execute.part.0+0xac>
 800d4ba:	6840      	ldr	r0, [r0, #4]
 800d4bc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 8086 	beq.w	800d5d2 <_rclc_execute.part.0+0x166>
 800d4c6:	2600      	movs	r6, #0
 800d4c8:	2701      	movs	r7, #1
 800d4ca:	e004      	b.n	800d4d6 <_rclc_execute.part.0+0x6a>
 800d4cc:	f009 fbea 	bl	8016ca4 <rclc_action_send_result_request>
 800d4d0:	b998      	cbnz	r0, 800d4fa <_rclc_execute.part.0+0x8e>
 800d4d2:	722f      	strb	r7, [r5, #8]
 800d4d4:	6860      	ldr	r0, [r4, #4]
 800d4d6:	f009 fc97 	bl	8016e08 <rclc_action_find_first_handle_with_goal_response>
 800d4da:	4605      	mov	r5, r0
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d077      	beq.n	800d5d0 <_rclc_execute.part.0+0x164>
 800d4e0:	6863      	ldr	r3, [r4, #4]
 800d4e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4e4:	699b      	ldr	r3, [r3, #24]
 800d4e6:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d4ea:	f885 6020 	strb.w	r6, [r5, #32]
 800d4ee:	4798      	blx	r3
 800d4f0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1e8      	bne.n	800d4cc <_rclc_execute.part.0+0x60>
 800d4fa:	6860      	ldr	r0, [r4, #4]
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	f009 fc07 	bl	8016d10 <rclc_action_remove_used_goal_handle>
 800d502:	e7e7      	b.n	800d4d4 <_rclc_execute.part.0+0x68>
 800d504:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d508:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d50c:	2d00      	cmp	r5, #0
 800d50e:	f000 80c9 	beq.w	800d6a4 <_rclc_execute.part.0+0x238>
 800d512:	6880      	ldr	r0, [r0, #8]
 800d514:	4798      	blx	r3
 800d516:	2000      	movs	r0, #0
 800d518:	b007      	add	sp, #28
 800d51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51c:	6840      	ldr	r0, [r0, #4]
 800d51e:	f007 ff61 	bl	80153e4 <rcl_timer_call>
 800d522:	f240 3321 	movw	r3, #801	@ 0x321
 800d526:	4298      	cmp	r0, r3
 800d528:	d004      	beq.n	800d534 <_rclc_execute.part.0+0xc8>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	d0f4      	beq.n	800d518 <_rclc_execute.part.0+0xac>
 800d52e:	e7bf      	b.n	800d4b0 <_rclc_execute.part.0+0x44>
 800d530:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d532:	4798      	blx	r3
 800d534:	2000      	movs	r0, #0
 800d536:	b007      	add	sp, #28
 800d538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d53a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d53e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d540:	b925      	cbnz	r5, 800d54c <_rclc_execute.part.0+0xe0>
 800d542:	4628      	mov	r0, r5
 800d544:	4798      	blx	r3
 800d546:	4628      	mov	r0, r5
 800d548:	e7e6      	b.n	800d518 <_rclc_execute.part.0+0xac>
 800d54a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d54c:	68a0      	ldr	r0, [r4, #8]
 800d54e:	4798      	blx	r3
 800d550:	2000      	movs	r0, #0
 800d552:	b007      	add	sp, #28
 800d554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d556:	6840      	ldr	r0, [r0, #4]
 800d558:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d55c:	bb3b      	cbnz	r3, 800d5ae <_rclc_execute.part.0+0x142>
 800d55e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d07b      	beq.n	800d65e <_rclc_execute.part.0+0x1f2>
 800d566:	f640 0634 	movw	r6, #2100	@ 0x834
 800d56a:	2701      	movs	r7, #1
 800d56c:	e007      	b.n	800d57e <_rclc_execute.part.0+0x112>
 800d56e:	4628      	mov	r0, r5
 800d570:	f009 fc62 	bl	8016e38 <rclc_action_server_response_goal_request>
 800d574:	6860      	ldr	r0, [r4, #4]
 800d576:	4629      	mov	r1, r5
 800d578:	f009 fbca 	bl	8016d10 <rclc_action_remove_used_goal_handle>
 800d57c:	6860      	ldr	r0, [r4, #4]
 800d57e:	2100      	movs	r1, #0
 800d580:	f009 fbf4 	bl	8016d6c <rclc_action_find_first_handle_by_status>
 800d584:	4605      	mov	r5, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	d066      	beq.n	800d658 <_rclc_execute.part.0+0x1ec>
 800d58a:	6863      	ldr	r3, [r4, #4]
 800d58c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d58e:	699b      	ldr	r3, [r3, #24]
 800d590:	4798      	blx	r3
 800d592:	42b0      	cmp	r0, r6
 800d594:	f04f 0100 	mov.w	r1, #0
 800d598:	d1e9      	bne.n	800d56e <_rclc_execute.part.0+0x102>
 800d59a:	2101      	movs	r1, #1
 800d59c:	4628      	mov	r0, r5
 800d59e:	f009 fc4b 	bl	8016e38 <rclc_action_server_response_goal_request>
 800d5a2:	722f      	strb	r7, [r5, #8]
 800d5a4:	e7ea      	b.n	800d57c <_rclc_execute.part.0+0x110>
 800d5a6:	6848      	ldr	r0, [r1, #4]
 800d5a8:	f009 fbb2 	bl	8016d10 <rclc_action_remove_used_goal_handle>
 800d5ac:	6860      	ldr	r0, [r4, #4]
 800d5ae:	f009 fbe9 	bl	8016d84 <rclc_action_find_first_terminated_handle>
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d1f6      	bne.n	800d5a6 <_rclc_execute.part.0+0x13a>
 800d5b8:	6860      	ldr	r0, [r4, #4]
 800d5ba:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d5be:	e7ce      	b.n	800d55e <_rclc_execute.part.0+0xf2>
 800d5c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5c2:	6880      	ldr	r0, [r0, #8]
 800d5c4:	f104 0110 	add.w	r1, r4, #16
 800d5c8:	4798      	blx	r3
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	b007      	add	sp, #28
 800d5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5d0:	6860      	ldr	r0, [r4, #4]
 800d5d2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d5d6:	b18b      	cbz	r3, 800d5fc <_rclc_execute.part.0+0x190>
 800d5d8:	68c5      	ldr	r5, [r0, #12]
 800d5da:	b32d      	cbz	r5, 800d628 <_rclc_execute.part.0+0x1bc>
 800d5dc:	2600      	movs	r6, #0
 800d5de:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d5e2:	b143      	cbz	r3, 800d5f6 <_rclc_execute.part.0+0x18a>
 800d5e4:	69c3      	ldr	r3, [r0, #28]
 800d5e6:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d5ea:	b123      	cbz	r3, 800d5f6 <_rclc_execute.part.0+0x18a>
 800d5ec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d5ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	4798      	blx	r3
 800d5f4:	6860      	ldr	r0, [r4, #4]
 800d5f6:	682d      	ldr	r5, [r5, #0]
 800d5f8:	2d00      	cmp	r5, #0
 800d5fa:	d1f0      	bne.n	800d5de <_rclc_execute.part.0+0x172>
 800d5fc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d600:	b193      	cbz	r3, 800d628 <_rclc_execute.part.0+0x1bc>
 800d602:	68c5      	ldr	r5, [r0, #12]
 800d604:	b185      	cbz	r5, 800d628 <_rclc_execute.part.0+0x1bc>
 800d606:	2600      	movs	r6, #0
 800d608:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d60c:	b14b      	cbz	r3, 800d622 <_rclc_execute.part.0+0x1b6>
 800d60e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d610:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d614:	b12b      	cbz	r3, 800d622 <_rclc_execute.part.0+0x1b6>
 800d616:	4628      	mov	r0, r5
 800d618:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d61c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d61e:	4798      	blx	r3
 800d620:	6860      	ldr	r0, [r4, #4]
 800d622:	682d      	ldr	r5, [r5, #0]
 800d624:	2d00      	cmp	r5, #0
 800d626:	d1ef      	bne.n	800d608 <_rclc_execute.part.0+0x19c>
 800d628:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d081      	beq.n	800d534 <_rclc_execute.part.0+0xc8>
 800d630:	2700      	movs	r7, #0
 800d632:	e00b      	b.n	800d64c <_rclc_execute.part.0+0x1e0>
 800d634:	6863      	ldr	r3, [r4, #4]
 800d636:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d63a:	6a1e      	ldr	r6, [r3, #32]
 800d63c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d640:	47b0      	blx	r6
 800d642:	6860      	ldr	r0, [r4, #4]
 800d644:	4629      	mov	r1, r5
 800d646:	f009 fb63 	bl	8016d10 <rclc_action_remove_used_goal_handle>
 800d64a:	6860      	ldr	r0, [r4, #4]
 800d64c:	f009 fbe8 	bl	8016e20 <rclc_action_find_first_handle_with_result_response>
 800d650:	4605      	mov	r5, r0
 800d652:	2800      	cmp	r0, #0
 800d654:	d1ee      	bne.n	800d634 <_rclc_execute.part.0+0x1c8>
 800d656:	e76d      	b.n	800d534 <_rclc_execute.part.0+0xc8>
 800d658:	6860      	ldr	r0, [r4, #4]
 800d65a:	f880 5020 	strb.w	r5, [r0, #32]
 800d65e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d662:	2b00      	cmp	r3, #0
 800d664:	f43f af66 	beq.w	800d534 <_rclc_execute.part.0+0xc8>
 800d668:	68c5      	ldr	r5, [r0, #12]
 800d66a:	b1b5      	cbz	r5, 800d69a <_rclc_execute.part.0+0x22e>
 800d66c:	2602      	movs	r6, #2
 800d66e:	e001      	b.n	800d674 <_rclc_execute.part.0+0x208>
 800d670:	682d      	ldr	r5, [r5, #0]
 800d672:	b195      	cbz	r5, 800d69a <_rclc_execute.part.0+0x22e>
 800d674:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d678:	2b03      	cmp	r3, #3
 800d67a:	d1f9      	bne.n	800d670 <_rclc_execute.part.0+0x204>
 800d67c:	69c3      	ldr	r3, [r0, #28]
 800d67e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d680:	4628      	mov	r0, r5
 800d682:	4798      	blx	r3
 800d684:	4603      	mov	r3, r0
 800d686:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d68a:	4628      	mov	r0, r5
 800d68c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d690:	b163      	cbz	r3, 800d6ac <_rclc_execute.part.0+0x240>
 800d692:	f009 fbf1 	bl	8016e78 <rclc_action_server_goal_cancel_accept>
 800d696:	6860      	ldr	r0, [r4, #4]
 800d698:	e7ea      	b.n	800d670 <_rclc_execute.part.0+0x204>
 800d69a:	2300      	movs	r3, #0
 800d69c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	e739      	b.n	800d518 <_rclc_execute.part.0+0xac>
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	4798      	blx	r3
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	e735      	b.n	800d518 <_rclc_execute.part.0+0xac>
 800d6ac:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d6ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d6b2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d6b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ba:	6860      	ldr	r0, [r4, #4]
 800d6bc:	2101      	movs	r1, #1
 800d6be:	f009 fc07 	bl	8016ed0 <rclc_action_server_goal_cancel_reject>
 800d6c2:	722e      	strb	r6, [r5, #8]
 800d6c4:	6860      	ldr	r0, [r4, #4]
 800d6c6:	e7d3      	b.n	800d670 <_rclc_execute.part.0+0x204>
 800d6c8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d6ca:	6880      	ldr	r0, [r0, #8]
 800d6cc:	4798      	blx	r3
 800d6ce:	f104 0110 	add.w	r1, r4, #16
 800d6d2:	e6e7      	b.n	800d4a4 <_rclc_execute.part.0+0x38>
 800d6d4:	f100 0110 	add.w	r1, r0, #16
 800d6d8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d6da:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d6dc:	6880      	ldr	r0, [r0, #8]
 800d6de:	9105      	str	r1, [sp, #20]
 800d6e0:	4798      	blx	r3
 800d6e2:	9905      	ldr	r1, [sp, #20]
 800d6e4:	e6de      	b.n	800d4a4 <_rclc_execute.part.0+0x38>
 800d6e6:	2001      	movs	r0, #1
 800d6e8:	e716      	b.n	800d518 <_rclc_execute.part.0+0xac>
 800d6ea:	bf00      	nop

0800d6ec <rclc_executor_trigger_any>:
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d03f      	beq.n	800d770 <rclc_executor_trigger_any+0x84>
 800d6f0:	2900      	cmp	r1, #0
 800d6f2:	d03e      	beq.n	800d772 <rclc_executor_trigger_any+0x86>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d037      	beq.n	800d770 <rclc_executor_trigger_any+0x84>
 800d700:	b430      	push	{r4, r5}
 800d702:	f893 c000 	ldrb.w	ip, [r3]
 800d706:	f1bc 0f08 	cmp.w	ip, #8
 800d70a:	d11e      	bne.n	800d74a <rclc_executor_trigger_any+0x5e>
 800d70c:	685c      	ldr	r4, [r3, #4]
 800d70e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d710:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d714:	d105      	bne.n	800d722 <rclc_executor_trigger_any+0x36>
 800d716:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d71a:	b910      	cbnz	r0, 800d722 <rclc_executor_trigger_any+0x36>
 800d71c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d720:	b128      	cbz	r0, 800d72e <rclc_executor_trigger_any+0x42>
 800d722:	bc30      	pop	{r4, r5}
 800d724:	4770      	bx	lr
 800d726:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d72a:	2800      	cmp	r0, #0
 800d72c:	d1f9      	bne.n	800d722 <rclc_executor_trigger_any+0x36>
 800d72e:	3201      	adds	r2, #1
 800d730:	4291      	cmp	r1, r2
 800d732:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d736:	d018      	beq.n	800d76a <rclc_executor_trigger_any+0x7e>
 800d738:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d0f0      	beq.n	800d722 <rclc_executor_trigger_any+0x36>
 800d740:	f893 c000 	ldrb.w	ip, [r3]
 800d744:	f1bc 0f08 	cmp.w	ip, #8
 800d748:	d0e0      	beq.n	800d70c <rclc_executor_trigger_any+0x20>
 800d74a:	f1bc 0f09 	cmp.w	ip, #9
 800d74e:	d1ea      	bne.n	800d726 <rclc_executor_trigger_any+0x3a>
 800d750:	685c      	ldr	r4, [r3, #4]
 800d752:	6a25      	ldr	r5, [r4, #32]
 800d754:	2d00      	cmp	r5, #0
 800d756:	d1e4      	bne.n	800d722 <rclc_executor_trigger_any+0x36>
 800d758:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d1e0      	bne.n	800d722 <rclc_executor_trigger_any+0x36>
 800d760:	3201      	adds	r2, #1
 800d762:	4291      	cmp	r1, r2
 800d764:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d768:	d1e6      	bne.n	800d738 <rclc_executor_trigger_any+0x4c>
 800d76a:	2000      	movs	r0, #0
 800d76c:	bc30      	pop	{r4, r5}
 800d76e:	4770      	bx	lr
 800d770:	4770      	bx	lr
 800d772:	4608      	mov	r0, r1
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop

0800d778 <rclc_executor_get_zero_initialized_executor>:
 800d778:	b510      	push	{r4, lr}
 800d77a:	4903      	ldr	r1, [pc, #12]	@ (800d788 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d77c:	4604      	mov	r4, r0
 800d77e:	2288      	movs	r2, #136	@ 0x88
 800d780:	f00b fce1 	bl	8019146 <memcpy>
 800d784:	4620      	mov	r0, r4
 800d786:	bd10      	pop	{r4, pc}
 800d788:	0801a1e0 	.word	0x0801a1e0
 800d78c:	00000000 	.word	0x00000000

0800d790 <rclc_executor_init>:
 800d790:	2800      	cmp	r0, #0
 800d792:	d05f      	beq.n	800d854 <rclc_executor_init+0xc4>
 800d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d798:	460c      	mov	r4, r1
 800d79a:	b0b0      	sub	sp, #192	@ 0xc0
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d051      	beq.n	800d844 <rclc_executor_init+0xb4>
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	4616      	mov	r6, r2
 800d7a6:	461f      	mov	r7, r3
 800d7a8:	f000 fbd0 	bl	800df4c <rcutils_allocator_is_valid>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d049      	beq.n	800d844 <rclc_executor_init+0xb4>
 800d7b0:	2e00      	cmp	r6, #0
 800d7b2:	d047      	beq.n	800d844 <rclc_executor_init+0xb4>
 800d7b4:	492c      	ldr	r1, [pc, #176]	@ (800d868 <rclc_executor_init+0xd8>)
 800d7b6:	2288      	movs	r2, #136	@ 0x88
 800d7b8:	a80e      	add	r0, sp, #56	@ 0x38
 800d7ba:	f00b fcc4 	bl	8019146 <memcpy>
 800d7be:	a90e      	add	r1, sp, #56	@ 0x38
 800d7c0:	2288      	movs	r2, #136	@ 0x88
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f00b fcbf 	bl	8019146 <memcpy>
 800d7c8:	602c      	str	r4, [r5, #0]
 800d7ca:	4668      	mov	r0, sp
 800d7cc:	60ae      	str	r6, [r5, #8]
 800d7ce:	466c      	mov	r4, sp
 800d7d0:	f008 f84c 	bl	801586c <rcl_get_zero_initialized_wait_set>
 800d7d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7d6:	f105 0c14 	add.w	ip, r5, #20
 800d7da:	f8d7 8000 	ldr.w	r8, [r7]
 800d7de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7ee:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d860 <rclc_executor_init+0xd0>
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	f8cc 3000 	str.w	r3, [ip]
 800d7f8:	6939      	ldr	r1, [r7, #16]
 800d7fa:	612f      	str	r7, [r5, #16]
 800d7fc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d800:	01b0      	lsls	r0, r6, #6
 800d802:	47c0      	blx	r8
 800d804:	6068      	str	r0, [r5, #4]
 800d806:	b338      	cbz	r0, 800d858 <rclc_executor_init+0xc8>
 800d808:	2400      	movs	r4, #0
 800d80a:	e000      	b.n	800d80e <rclc_executor_init+0x7e>
 800d80c:	6868      	ldr	r0, [r5, #4]
 800d80e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d812:	4631      	mov	r1, r6
 800d814:	3401      	adds	r4, #1
 800d816:	f000 fa6b 	bl	800dcf0 <rclc_executor_handle_init>
 800d81a:	42a6      	cmp	r6, r4
 800d81c:	d1f6      	bne.n	800d80c <rclc_executor_init+0x7c>
 800d81e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d822:	f000 fa59 	bl	800dcd8 <rclc_executor_handle_counters_zero_init>
 800d826:	4a11      	ldr	r2, [pc, #68]	@ (800d86c <rclc_executor_init+0xdc>)
 800d828:	686b      	ldr	r3, [r5, #4]
 800d82a:	2000      	movs	r0, #0
 800d82c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d830:	b163      	cbz	r3, 800d84c <rclc_executor_init+0xbc>
 800d832:	692b      	ldr	r3, [r5, #16]
 800d834:	b153      	cbz	r3, 800d84c <rclc_executor_init+0xbc>
 800d836:	68ab      	ldr	r3, [r5, #8]
 800d838:	b143      	cbz	r3, 800d84c <rclc_executor_init+0xbc>
 800d83a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d83e:	b030      	add	sp, #192	@ 0xc0
 800d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d844:	200b      	movs	r0, #11
 800d846:	b030      	add	sp, #192	@ 0xc0
 800d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d84c:	4618      	mov	r0, r3
 800d84e:	b030      	add	sp, #192	@ 0xc0
 800d850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d854:	200b      	movs	r0, #11
 800d856:	4770      	bx	lr
 800d858:	200a      	movs	r0, #10
 800d85a:	e7f4      	b.n	800d846 <rclc_executor_init+0xb6>
 800d85c:	f3af 8000 	nop.w
 800d860:	3b9aca00 	.word	0x3b9aca00
 800d864:	00000000 	.word	0x00000000
 800d868:	0801a1e0 	.word	0x0801a1e0
 800d86c:	0800d6ed 	.word	0x0800d6ed

0800d870 <rclc_executor_add_timer>:
 800d870:	b300      	cbz	r0, 800d8b4 <rclc_executor_add_timer+0x44>
 800d872:	b1f9      	cbz	r1, 800d8b4 <rclc_executor_add_timer+0x44>
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d87a:	4293      	cmp	r3, r2
 800d87c:	4604      	mov	r4, r0
 800d87e:	d301      	bcc.n	800d884 <rclc_executor_add_timer+0x14>
 800d880:	2001      	movs	r0, #1
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	6840      	ldr	r0, [r0, #4]
 800d886:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d88a:	019d      	lsls	r5, r3, #6
 800d88c:	6051      	str	r1, [r2, #4]
 800d88e:	2102      	movs	r1, #2
 800d890:	5341      	strh	r1, [r0, r5]
 800d892:	3301      	adds	r3, #1
 800d894:	2000      	movs	r0, #0
 800d896:	2101      	movs	r1, #1
 800d898:	f104 0514 	add.w	r5, r4, #20
 800d89c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d89e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	60e3      	str	r3, [r4, #12]
 800d8a4:	f007 fff6 	bl	8015894 <rcl_wait_set_is_valid>
 800d8a8:	b930      	cbnz	r0, 800d8b8 <rclc_executor_add_timer+0x48>
 800d8aa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	200b      	movs	r0, #11
 800d8b6:	4770      	bx	lr
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f007 fff1 	bl	80158a0 <rcl_wait_set_fini>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d0f3      	beq.n	800d8aa <rclc_executor_add_timer+0x3a>
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}

0800d8c4 <rclc_executor_prepare>:
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d044      	beq.n	800d952 <rclc_executor_prepare+0x8e>
 800d8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ca:	f100 0514 	add.w	r5, r0, #20
 800d8ce:	b09b      	sub	sp, #108	@ 0x6c
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f007 ffde 	bl	8015894 <rcl_wait_set_is_valid>
 800d8d8:	b110      	cbz	r0, 800d8e0 <rclc_executor_prepare+0x1c>
 800d8da:	2000      	movs	r0, #0
 800d8dc:	b01b      	add	sp, #108	@ 0x6c
 800d8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	f007 ffdd 	bl	80158a0 <rcl_wait_set_fini>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d130      	bne.n	800d94c <rclc_executor_prepare+0x88>
 800d8ea:	a80c      	add	r0, sp, #48	@ 0x30
 800d8ec:	f007 ffbe 	bl	801586c <rcl_get_zero_initialized_wait_set>
 800d8f0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d8f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d8f8:	46ae      	mov	lr, r5
 800d8fa:	6927      	ldr	r7, [r4, #16]
 800d8fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d900:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d904:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d908:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d90c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d910:	f8dc 3000 	ldr.w	r3, [ip]
 800d914:	f8ce 3000 	str.w	r3, [lr]
 800d918:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d91a:	ae04      	add	r6, sp, #16
 800d91c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	6822      	ldr	r2, [r4, #0]
 800d922:	6033      	str	r3, [r6, #0]
 800d924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d926:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d928:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d92c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d930:	e9cd 2100 	strd	r2, r1, [sp]
 800d934:	4628      	mov	r0, r5
 800d936:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d938:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d93a:	f008 faaf 	bl	8015e9c <rcl_wait_set_init>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d0cc      	beq.n	800d8dc <rclc_executor_prepare+0x18>
 800d942:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d944:	f000 fbe4 	bl	800e110 <rcutils_reset_error>
 800d948:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d94a:	e7c7      	b.n	800d8dc <rclc_executor_prepare+0x18>
 800d94c:	f000 fbe0 	bl	800e110 <rcutils_reset_error>
 800d950:	e7cb      	b.n	800d8ea <rclc_executor_prepare+0x26>
 800d952:	200b      	movs	r0, #11
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop

0800d958 <rclc_executor_spin_some.part.0>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	f100 0614 	add.w	r6, r0, #20
 800d960:	b083      	sub	sp, #12
 800d962:	4691      	mov	r9, r2
 800d964:	4698      	mov	r8, r3
 800d966:	4605      	mov	r5, r0
 800d968:	f7ff ffac 	bl	800d8c4 <rclc_executor_prepare>
 800d96c:	4630      	mov	r0, r6
 800d96e:	f008 f863 	bl	8015a38 <rcl_wait_set_clear>
 800d972:	4607      	mov	r7, r0
 800d974:	2800      	cmp	r0, #0
 800d976:	f040 80ed 	bne.w	800db54 <rclc_executor_spin_some.part.0+0x1fc>
 800d97a:	68ab      	ldr	r3, [r5, #8]
 800d97c:	4604      	mov	r4, r0
 800d97e:	b303      	cbz	r3, 800d9c2 <rclc_executor_spin_some.part.0+0x6a>
 800d980:	6869      	ldr	r1, [r5, #4]
 800d982:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d986:	01a2      	lsls	r2, r4, #6
 800d988:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d98c:	b1cb      	cbz	r3, 800d9c2 <rclc_executor_spin_some.part.0+0x6a>
 800d98e:	5c8b      	ldrb	r3, [r1, r2]
 800d990:	2b0a      	cmp	r3, #10
 800d992:	f200 80d8 	bhi.w	800db46 <rclc_executor_spin_some.part.0+0x1ee>
 800d996:	e8df f003 	tbb	[pc, r3]
 800d99a:	9c9c      	.short	0x9c9c
 800d99c:	068c8ca7 	.word	0x068c8ca7
 800d9a0:	bdc90606 	.word	0xbdc90606
 800d9a4:	b2          	.byte	0xb2
 800d9a5:	00          	.byte	0x00
 800d9a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d9aa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f008 fb8a 	bl	80160c8 <rcl_wait_set_add_service>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	f040 8086 	bne.w	800dac6 <rclc_executor_spin_some.part.0+0x16e>
 800d9ba:	68ab      	ldr	r3, [r5, #8]
 800d9bc:	3401      	adds	r4, #1
 800d9be:	429c      	cmp	r4, r3
 800d9c0:	d3de      	bcc.n	800d980 <rclc_executor_spin_some.part.0+0x28>
 800d9c2:	4643      	mov	r3, r8
 800d9c4:	464a      	mov	r2, r9
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f008 fbaa 	bl	8016120 <rcl_wait>
 800d9cc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 80c7 	beq.w	800db64 <rclc_executor_spin_some.part.0+0x20c>
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	f040 80b5 	bne.w	800db46 <rclc_executor_spin_some.part.0+0x1ee>
 800d9dc:	68ab      	ldr	r3, [r5, #8]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f000 8159 	beq.w	800dc96 <rclc_executor_spin_some.part.0+0x33e>
 800d9e4:	2400      	movs	r4, #0
 800d9e6:	46a0      	mov	r8, r4
 800d9e8:	f240 1991 	movw	r9, #401	@ 0x191
 800d9ec:	e00a      	b.n	800da04 <rclc_executor_spin_some.part.0+0xac>
 800d9ee:	f7ff fb7b 	bl	800d0e8 <_rclc_check_for_new_data>
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	b110      	cbz	r0, 800d9fc <rclc_executor_spin_some.part.0+0xa4>
 800d9f6:	4548      	cmp	r0, r9
 800d9f8:	f040 80b2 	bne.w	800db60 <rclc_executor_spin_some.part.0+0x208>
 800d9fc:	68ab      	ldr	r3, [r5, #8]
 800d9fe:	4598      	cmp	r8, r3
 800da00:	f080 8126 	bcs.w	800dc50 <rclc_executor_spin_some.part.0+0x2f8>
 800da04:	686a      	ldr	r2, [r5, #4]
 800da06:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800da0a:	4631      	mov	r1, r6
 800da0c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800da10:	f108 0801 	add.w	r8, r8, #1
 800da14:	f1bc 0f00 	cmp.w	ip, #0
 800da18:	d1e9      	bne.n	800d9ee <rclc_executor_spin_some.part.0+0x96>
 800da1a:	4619      	mov	r1, r3
 800da1c:	4610      	mov	r0, r2
 800da1e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800da22:	4798      	blx	r3
 800da24:	2800      	cmp	r0, #0
 800da26:	f000 809b 	beq.w	800db60 <rclc_executor_spin_some.part.0+0x208>
 800da2a:	68ab      	ldr	r3, [r5, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 8097 	beq.w	800db60 <rclc_executor_spin_some.part.0+0x208>
 800da32:	f04f 0800 	mov.w	r8, #0
 800da36:	f240 1991 	movw	r9, #401	@ 0x191
 800da3a:	e009      	b.n	800da50 <rclc_executor_spin_some.part.0+0xf8>
 800da3c:	f7ff fba2 	bl	800d184 <_rclc_take_new_data>
 800da40:	4604      	mov	r4, r0
 800da42:	b110      	cbz	r0, 800da4a <rclc_executor_spin_some.part.0+0xf2>
 800da44:	4548      	cmp	r0, r9
 800da46:	f040 808b 	bne.w	800db60 <rclc_executor_spin_some.part.0+0x208>
 800da4a:	68ab      	ldr	r3, [r5, #8]
 800da4c:	4598      	cmp	r8, r3
 800da4e:	d209      	bcs.n	800da64 <rclc_executor_spin_some.part.0+0x10c>
 800da50:	6868      	ldr	r0, [r5, #4]
 800da52:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800da56:	4631      	mov	r1, r6
 800da58:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800da5c:	f108 0801 	add.w	r8, r8, #1
 800da60:	2a00      	cmp	r2, #0
 800da62:	d1eb      	bne.n	800da3c <rclc_executor_spin_some.part.0+0xe4>
 800da64:	2600      	movs	r6, #0
 800da66:	b97b      	cbnz	r3, 800da88 <rclc_executor_spin_some.part.0+0x130>
 800da68:	e07a      	b.n	800db60 <rclc_executor_spin_some.part.0+0x208>
 800da6a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800da6e:	2a08      	cmp	r2, #8
 800da70:	f000 80fd 	beq.w	800dc6e <rclc_executor_spin_some.part.0+0x316>
 800da74:	2a09      	cmp	r2, #9
 800da76:	f000 80ef 	beq.w	800dc58 <rclc_executor_spin_some.part.0+0x300>
 800da7a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800da7e:	b98a      	cbnz	r2, 800daa4 <rclc_executor_spin_some.part.0+0x14c>
 800da80:	3601      	adds	r6, #1
 800da82:	429e      	cmp	r6, r3
 800da84:	d262      	bcs.n	800db4c <rclc_executor_spin_some.part.0+0x1f4>
 800da86:	2400      	movs	r4, #0
 800da88:	686a      	ldr	r2, [r5, #4]
 800da8a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800da8e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800da92:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800da96:	2900      	cmp	r1, #0
 800da98:	d062      	beq.n	800db60 <rclc_executor_spin_some.part.0+0x208>
 800da9a:	7841      	ldrb	r1, [r0, #1]
 800da9c:	2900      	cmp	r1, #0
 800da9e:	d0e4      	beq.n	800da6a <rclc_executor_spin_some.part.0+0x112>
 800daa0:	2901      	cmp	r1, #1
 800daa2:	d1ed      	bne.n	800da80 <rclc_executor_spin_some.part.0+0x128>
 800daa4:	f7ff fce2 	bl	800d46c <_rclc_execute.part.0>
 800daa8:	2800      	cmp	r0, #0
 800daaa:	f040 80b6 	bne.w	800dc1a <rclc_executor_spin_some.part.0+0x2c2>
 800daae:	68ab      	ldr	r3, [r5, #8]
 800dab0:	e7e6      	b.n	800da80 <rclc_executor_spin_some.part.0+0x128>
 800dab2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dab6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800daba:	4630      	mov	r0, r6
 800dabc:	f008 fad8 	bl	8016070 <rcl_wait_set_add_client>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	f43f af7a 	beq.w	800d9ba <rclc_executor_spin_some.part.0+0x62>
 800dac6:	9001      	str	r0, [sp, #4]
 800dac8:	f000 fb22 	bl	800e110 <rcutils_reset_error>
 800dacc:	9801      	ldr	r0, [sp, #4]
 800dace:	4607      	mov	r7, r0
 800dad0:	e03c      	b.n	800db4c <rclc_executor_spin_some.part.0+0x1f4>
 800dad2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dad6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dada:	4630      	mov	r0, r6
 800dadc:	f007 ff80 	bl	80159e0 <rcl_wait_set_add_subscription>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	f43f af6a 	beq.w	800d9ba <rclc_executor_spin_some.part.0+0x62>
 800dae6:	e7ee      	b.n	800dac6 <rclc_executor_spin_some.part.0+0x16e>
 800dae8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800daec:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800daf0:	4630      	mov	r0, r6
 800daf2:	f008 fa8d 	bl	8016010 <rcl_wait_set_add_timer>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f43f af5f 	beq.w	800d9ba <rclc_executor_spin_some.part.0+0x62>
 800dafc:	e7e3      	b.n	800dac6 <rclc_executor_spin_some.part.0+0x16e>
 800dafe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800db02:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800db06:	4630      	mov	r0, r6
 800db08:	f008 fa56 	bl	8015fb8 <rcl_wait_set_add_guard_condition>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f43f af54 	beq.w	800d9ba <rclc_executor_spin_some.part.0+0x62>
 800db12:	e7d8      	b.n	800dac6 <rclc_executor_spin_some.part.0+0x16e>
 800db14:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800db18:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800db1c:	3110      	adds	r1, #16
 800db1e:	4630      	mov	r0, r6
 800db20:	f008 ffd6 	bl	8016ad0 <rcl_action_wait_set_add_action_server>
 800db24:	2800      	cmp	r0, #0
 800db26:	f43f af48 	beq.w	800d9ba <rclc_executor_spin_some.part.0+0x62>
 800db2a:	e7cc      	b.n	800dac6 <rclc_executor_spin_some.part.0+0x16e>
 800db2c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800db30:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800db34:	3110      	adds	r1, #16
 800db36:	2300      	movs	r3, #0
 800db38:	4630      	mov	r0, r6
 800db3a:	f008 fda1 	bl	8016680 <rcl_action_wait_set_add_action_client>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f43f af3b 	beq.w	800d9ba <rclc_executor_spin_some.part.0+0x62>
 800db44:	e7bf      	b.n	800dac6 <rclc_executor_spin_some.part.0+0x16e>
 800db46:	f000 fae3 	bl	800e110 <rcutils_reset_error>
 800db4a:	2701      	movs	r7, #1
 800db4c:	4638      	mov	r0, r7
 800db4e:	b003      	add	sp, #12
 800db50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db54:	f000 fadc 	bl	800e110 <rcutils_reset_error>
 800db58:	4638      	mov	r0, r7
 800db5a:	b003      	add	sp, #12
 800db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db60:	4627      	mov	r7, r4
 800db62:	e7f3      	b.n	800db4c <rclc_executor_spin_some.part.0+0x1f4>
 800db64:	68ab      	ldr	r3, [r5, #8]
 800db66:	2b00      	cmp	r3, #0
 800db68:	f000 8092 	beq.w	800dc90 <rclc_executor_spin_some.part.0+0x338>
 800db6c:	2400      	movs	r4, #0
 800db6e:	46a0      	mov	r8, r4
 800db70:	f240 1991 	movw	r9, #401	@ 0x191
 800db74:	e008      	b.n	800db88 <rclc_executor_spin_some.part.0+0x230>
 800db76:	f7ff fab7 	bl	800d0e8 <_rclc_check_for_new_data>
 800db7a:	4604      	mov	r4, r0
 800db7c:	b108      	cbz	r0, 800db82 <rclc_executor_spin_some.part.0+0x22a>
 800db7e:	4548      	cmp	r0, r9
 800db80:	d1ee      	bne.n	800db60 <rclc_executor_spin_some.part.0+0x208>
 800db82:	68ab      	ldr	r3, [r5, #8]
 800db84:	4598      	cmp	r8, r3
 800db86:	d265      	bcs.n	800dc54 <rclc_executor_spin_some.part.0+0x2fc>
 800db88:	686a      	ldr	r2, [r5, #4]
 800db8a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800db8e:	4631      	mov	r1, r6
 800db90:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800db94:	f108 0801 	add.w	r8, r8, #1
 800db98:	f1bc 0f00 	cmp.w	ip, #0
 800db9c:	d1eb      	bne.n	800db76 <rclc_executor_spin_some.part.0+0x21e>
 800db9e:	4619      	mov	r1, r3
 800dba0:	4610      	mov	r0, r2
 800dba2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800dba6:	4798      	blx	r3
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d0d9      	beq.n	800db60 <rclc_executor_spin_some.part.0+0x208>
 800dbac:	68ab      	ldr	r3, [r5, #8]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d0d6      	beq.n	800db60 <rclc_executor_spin_some.part.0+0x208>
 800dbb2:	f04f 0800 	mov.w	r8, #0
 800dbb6:	f240 1991 	movw	r9, #401	@ 0x191
 800dbba:	f240 2a59 	movw	sl, #601	@ 0x259
 800dbbe:	e00e      	b.n	800dbde <rclc_executor_spin_some.part.0+0x286>
 800dbc0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800dbc4:	2b08      	cmp	r3, #8
 800dbc6:	d033      	beq.n	800dc30 <rclc_executor_spin_some.part.0+0x2d8>
 800dbc8:	2b09      	cmp	r3, #9
 800dbca:	d028      	beq.n	800dc1e <rclc_executor_spin_some.part.0+0x2c6>
 800dbcc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800dbd0:	b9fb      	cbnz	r3, 800dc12 <rclc_executor_spin_some.part.0+0x2ba>
 800dbd2:	68ab      	ldr	r3, [r5, #8]
 800dbd4:	f108 0801 	add.w	r8, r8, #1
 800dbd8:	4598      	cmp	r8, r3
 800dbda:	d2b7      	bcs.n	800db4c <rclc_executor_spin_some.part.0+0x1f4>
 800dbdc:	2400      	movs	r4, #0
 800dbde:	6868      	ldr	r0, [r5, #4]
 800dbe0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dbe4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800dbe8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d0b7      	beq.n	800db60 <rclc_executor_spin_some.part.0+0x208>
 800dbf0:	4631      	mov	r1, r6
 800dbf2:	f7ff fac7 	bl	800d184 <_rclc_take_new_data>
 800dbf6:	b118      	cbz	r0, 800dc00 <rclc_executor_spin_some.part.0+0x2a8>
 800dbf8:	4548      	cmp	r0, r9
 800dbfa:	d001      	beq.n	800dc00 <rclc_executor_spin_some.part.0+0x2a8>
 800dbfc:	4550      	cmp	r0, sl
 800dbfe:	d10c      	bne.n	800dc1a <rclc_executor_spin_some.part.0+0x2c2>
 800dc00:	686b      	ldr	r3, [r5, #4]
 800dc02:	eb13 000b 	adds.w	r0, r3, fp
 800dc06:	d021      	beq.n	800dc4c <rclc_executor_spin_some.part.0+0x2f4>
 800dc08:	7842      	ldrb	r2, [r0, #1]
 800dc0a:	2a00      	cmp	r2, #0
 800dc0c:	d0d8      	beq.n	800dbc0 <rclc_executor_spin_some.part.0+0x268>
 800dc0e:	2a01      	cmp	r2, #1
 800dc10:	d1df      	bne.n	800dbd2 <rclc_executor_spin_some.part.0+0x27a>
 800dc12:	f7ff fc2b 	bl	800d46c <_rclc_execute.part.0>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d0db      	beq.n	800dbd2 <rclc_executor_spin_some.part.0+0x27a>
 800dc1a:	4607      	mov	r7, r0
 800dc1c:	e796      	b.n	800db4c <rclc_executor_spin_some.part.0+0x1f4>
 800dc1e:	6843      	ldr	r3, [r0, #4]
 800dc20:	6a1a      	ldr	r2, [r3, #32]
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	d1f5      	bne.n	800dc12 <rclc_executor_spin_some.part.0+0x2ba>
 800dc26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0d1      	beq.n	800dbd2 <rclc_executor_spin_some.part.0+0x27a>
 800dc2e:	e7f0      	b.n	800dc12 <rclc_executor_spin_some.part.0+0x2ba>
 800dc30:	6843      	ldr	r3, [r0, #4]
 800dc32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc34:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800dc38:	d1eb      	bne.n	800dc12 <rclc_executor_spin_some.part.0+0x2ba>
 800dc3a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800dc3e:	2a00      	cmp	r2, #0
 800dc40:	d1e7      	bne.n	800dc12 <rclc_executor_spin_some.part.0+0x2ba>
 800dc42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d0c3      	beq.n	800dbd2 <rclc_executor_spin_some.part.0+0x27a>
 800dc4a:	e7e2      	b.n	800dc12 <rclc_executor_spin_some.part.0+0x2ba>
 800dc4c:	270b      	movs	r7, #11
 800dc4e:	e77d      	b.n	800db4c <rclc_executor_spin_some.part.0+0x1f4>
 800dc50:	686a      	ldr	r2, [r5, #4]
 800dc52:	e6e2      	b.n	800da1a <rclc_executor_spin_some.part.0+0xc2>
 800dc54:	686a      	ldr	r2, [r5, #4]
 800dc56:	e7a2      	b.n	800db9e <rclc_executor_spin_some.part.0+0x246>
 800dc58:	6842      	ldr	r2, [r0, #4]
 800dc5a:	6a11      	ldr	r1, [r2, #32]
 800dc5c:	2900      	cmp	r1, #0
 800dc5e:	f47f af21 	bne.w	800daa4 <rclc_executor_spin_some.part.0+0x14c>
 800dc62:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800dc66:	2a00      	cmp	r2, #0
 800dc68:	f43f af0a 	beq.w	800da80 <rclc_executor_spin_some.part.0+0x128>
 800dc6c:	e71a      	b.n	800daa4 <rclc_executor_spin_some.part.0+0x14c>
 800dc6e:	6842      	ldr	r2, [r0, #4]
 800dc70:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800dc72:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800dc76:	f47f af15 	bne.w	800daa4 <rclc_executor_spin_some.part.0+0x14c>
 800dc7a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800dc7e:	2900      	cmp	r1, #0
 800dc80:	f47f af10 	bne.w	800daa4 <rclc_executor_spin_some.part.0+0x14c>
 800dc84:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800dc88:	2a00      	cmp	r2, #0
 800dc8a:	f43f aef9 	beq.w	800da80 <rclc_executor_spin_some.part.0+0x128>
 800dc8e:	e709      	b.n	800daa4 <rclc_executor_spin_some.part.0+0x14c>
 800dc90:	686a      	ldr	r2, [r5, #4]
 800dc92:	461c      	mov	r4, r3
 800dc94:	e783      	b.n	800db9e <rclc_executor_spin_some.part.0+0x246>
 800dc96:	686a      	ldr	r2, [r5, #4]
 800dc98:	461c      	mov	r4, r3
 800dc9a:	e6be      	b.n	800da1a <rclc_executor_spin_some.part.0+0xc2>

0800dc9c <rclc_executor_spin>:
 800dc9c:	b1d0      	cbz	r0, 800dcd4 <rclc_executor_spin+0x38>
 800dc9e:	b510      	push	{r4, lr}
 800dca0:	4604      	mov	r4, r0
 800dca2:	b082      	sub	sp, #8
 800dca4:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800dca8:	6820      	ldr	r0, [r4, #0]
 800dcaa:	e9cd 2300 	strd	r2, r3, [sp]
 800dcae:	f006 fb27 	bl	8014300 <rcl_context_is_valid>
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcb8:	4620      	mov	r0, r4
 800dcba:	b131      	cbz	r1, 800dcca <rclc_executor_spin+0x2e>
 800dcbc:	f7ff fe4c 	bl	800d958 <rclc_executor_spin_some.part.0>
 800dcc0:	f030 0302 	bics.w	r3, r0, #2
 800dcc4:	d0ee      	beq.n	800dca4 <rclc_executor_spin+0x8>
 800dcc6:	b002      	add	sp, #8
 800dcc8:	bd10      	pop	{r4, pc}
 800dcca:	f000 fa21 	bl	800e110 <rcutils_reset_error>
 800dcce:	2001      	movs	r0, #1
 800dcd0:	b002      	add	sp, #8
 800dcd2:	bd10      	pop	{r4, pc}
 800dcd4:	200b      	movs	r0, #11
 800dcd6:	4770      	bx	lr

0800dcd8 <rclc_executor_handle_counters_zero_init>:
 800dcd8:	b130      	cbz	r0, 800dce8 <rclc_executor_handle_counters_zero_init+0x10>
 800dcda:	b508      	push	{r3, lr}
 800dcdc:	2220      	movs	r2, #32
 800dcde:	2100      	movs	r1, #0
 800dce0:	f00b f968 	bl	8018fb4 <memset>
 800dce4:	2000      	movs	r0, #0
 800dce6:	bd08      	pop	{r3, pc}
 800dce8:	200b      	movs	r0, #11
 800dcea:	4770      	bx	lr
 800dcec:	0000      	movs	r0, r0
	...

0800dcf0 <rclc_executor_handle_init>:
 800dcf0:	b168      	cbz	r0, 800dd0e <rclc_executor_handle_init+0x1e>
 800dcf2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800dd18 <rclc_executor_handle_init+0x28>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	220b      	movs	r2, #11
 800dcfa:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800dcfe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800dd02:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800dd06:	8002      	strh	r2, [r0, #0]
 800dd08:	8703      	strh	r3, [r0, #56]	@ 0x38
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	4770      	bx	lr
 800dd0e:	200b      	movs	r0, #11
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	f3af 8000 	nop.w
	...

0800dd20 <rclc_support_init_with_options>:
 800dd20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd24:	b083      	sub	sp, #12
 800dd26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dd28:	b340      	cbz	r0, 800dd7c <rclc_support_init_with_options+0x5c>
 800dd2a:	461d      	mov	r5, r3
 800dd2c:	b333      	cbz	r3, 800dd7c <rclc_support_init_with_options+0x5c>
 800dd2e:	b32e      	cbz	r6, 800dd7c <rclc_support_init_with_options+0x5c>
 800dd30:	46e9      	mov	r9, sp
 800dd32:	4604      	mov	r4, r0
 800dd34:	4648      	mov	r0, r9
 800dd36:	460f      	mov	r7, r1
 800dd38:	4690      	mov	r8, r2
 800dd3a:	f006 fad7 	bl	80142ec <rcl_get_zero_initialized_context>
 800dd3e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800dd42:	462a      	mov	r2, r5
 800dd44:	e884 0003 	stmia.w	r4, {r0, r1}
 800dd48:	4623      	mov	r3, r4
 800dd4a:	4641      	mov	r1, r8
 800dd4c:	4638      	mov	r0, r7
 800dd4e:	f006 fdaf 	bl	80148b0 <rcl_init>
 800dd52:	4605      	mov	r5, r0
 800dd54:	b960      	cbnz	r0, 800dd70 <rclc_support_init_with_options+0x50>
 800dd56:	60a6      	str	r6, [r4, #8]
 800dd58:	4632      	mov	r2, r6
 800dd5a:	f104 010c 	add.w	r1, r4, #12
 800dd5e:	2003      	movs	r0, #3
 800dd60:	f007 f8b0 	bl	8014ec4 <rcl_clock_init>
 800dd64:	4605      	mov	r5, r0
 800dd66:	b918      	cbnz	r0, 800dd70 <rclc_support_init_with_options+0x50>
 800dd68:	4628      	mov	r0, r5
 800dd6a:	b003      	add	sp, #12
 800dd6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd70:	f000 f9ce 	bl	800e110 <rcutils_reset_error>
 800dd74:	4628      	mov	r0, r5
 800dd76:	b003      	add	sp, #12
 800dd78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd7c:	250b      	movs	r5, #11
 800dd7e:	4628      	mov	r0, r5
 800dd80:	b003      	add	sp, #12
 800dd82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd86:	bf00      	nop

0800dd88 <rclc_node_init_default>:
 800dd88:	b3b8      	cbz	r0, 800ddfa <rclc_node_init_default+0x72>
 800dd8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd8e:	460d      	mov	r5, r1
 800dd90:	b0a1      	sub	sp, #132	@ 0x84
 800dd92:	b329      	cbz	r1, 800dde0 <rclc_node_init_default+0x58>
 800dd94:	4616      	mov	r6, r2
 800dd96:	b31a      	cbz	r2, 800dde0 <rclc_node_init_default+0x58>
 800dd98:	461f      	mov	r7, r3
 800dd9a:	b30b      	cbz	r3, 800dde0 <rclc_node_init_default+0x58>
 800dd9c:	f10d 0810 	add.w	r8, sp, #16
 800dda0:	4604      	mov	r4, r0
 800dda2:	4640      	mov	r0, r8
 800dda4:	f7fe fe10 	bl	800c9c8 <rcl_get_zero_initialized_node>
 800dda8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ddac:	f10d 0918 	add.w	r9, sp, #24
 800ddb0:	e884 0003 	stmia.w	r4, {r0, r1}
 800ddb4:	4648      	mov	r0, r9
 800ddb6:	f7fe ff7f 	bl	800ccb8 <rcl_node_get_default_options>
 800ddba:	4640      	mov	r0, r8
 800ddbc:	f7fe fe04 	bl	800c9c8 <rcl_get_zero_initialized_node>
 800ddc0:	f8cd 9000 	str.w	r9, [sp]
 800ddc4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ddc8:	463b      	mov	r3, r7
 800ddca:	e884 0003 	stmia.w	r4, {r0, r1}
 800ddce:	4632      	mov	r2, r6
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f7fe fe02 	bl	800c9dc <rcl_node_init>
 800ddd8:	b930      	cbnz	r0, 800dde8 <rclc_node_init_default+0x60>
 800ddda:	b021      	add	sp, #132	@ 0x84
 800dddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde0:	200b      	movs	r0, #11
 800dde2:	b021      	add	sp, #132	@ 0x84
 800dde4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde8:	9003      	str	r0, [sp, #12]
 800ddea:	f000 f991 	bl	800e110 <rcutils_reset_error>
 800ddee:	f000 f98f 	bl	800e110 <rcutils_reset_error>
 800ddf2:	9803      	ldr	r0, [sp, #12]
 800ddf4:	b021      	add	sp, #132	@ 0x84
 800ddf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddfa:	200b      	movs	r0, #11
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop

0800de00 <rclc_publisher_init_default>:
 800de00:	b368      	cbz	r0, 800de5e <rclc_publisher_init_default+0x5e>
 800de02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de06:	460d      	mov	r5, r1
 800de08:	b0a0      	sub	sp, #128	@ 0x80
 800de0a:	b321      	cbz	r1, 800de56 <rclc_publisher_init_default+0x56>
 800de0c:	4616      	mov	r6, r2
 800de0e:	b312      	cbz	r2, 800de56 <rclc_publisher_init_default+0x56>
 800de10:	461f      	mov	r7, r3
 800de12:	b303      	cbz	r3, 800de56 <rclc_publisher_init_default+0x56>
 800de14:	4604      	mov	r4, r0
 800de16:	f7ff f823 	bl	800ce60 <rcl_get_zero_initialized_publisher>
 800de1a:	f10d 0810 	add.w	r8, sp, #16
 800de1e:	6020      	str	r0, [r4, #0]
 800de20:	4640      	mov	r0, r8
 800de22:	f7ff f8b9 	bl	800cf98 <rcl_publisher_get_default_options>
 800de26:	490f      	ldr	r1, [pc, #60]	@ (800de64 <rclc_publisher_init_default+0x64>)
 800de28:	2250      	movs	r2, #80	@ 0x50
 800de2a:	4640      	mov	r0, r8
 800de2c:	f00b f98b 	bl	8019146 <memcpy>
 800de30:	f8cd 8000 	str.w	r8, [sp]
 800de34:	463b      	mov	r3, r7
 800de36:	4632      	mov	r2, r6
 800de38:	4629      	mov	r1, r5
 800de3a:	4620      	mov	r0, r4
 800de3c:	f7ff f816 	bl	800ce6c <rcl_publisher_init>
 800de40:	b910      	cbnz	r0, 800de48 <rclc_publisher_init_default+0x48>
 800de42:	b020      	add	sp, #128	@ 0x80
 800de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de48:	9003      	str	r0, [sp, #12]
 800de4a:	f000 f961 	bl	800e110 <rcutils_reset_error>
 800de4e:	9803      	ldr	r0, [sp, #12]
 800de50:	b020      	add	sp, #128	@ 0x80
 800de52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de56:	200b      	movs	r0, #11
 800de58:	b020      	add	sp, #128	@ 0x80
 800de5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de5e:	200b      	movs	r0, #11
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	0801a268 	.word	0x0801a268

0800de68 <rclc_timer_init_default>:
 800de68:	b360      	cbz	r0, 800dec4 <rclc_timer_init_default+0x5c>
 800de6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6e:	460e      	mov	r6, r1
 800de70:	b08a      	sub	sp, #40	@ 0x28
 800de72:	b319      	cbz	r1, 800debc <rclc_timer_init_default+0x54>
 800de74:	4690      	mov	r8, r2
 800de76:	461f      	mov	r7, r3
 800de78:	4605      	mov	r5, r0
 800de7a:	f007 fa01 	bl	8015280 <rcl_get_zero_initialized_timer>
 800de7e:	68b4      	ldr	r4, [r6, #8]
 800de80:	6028      	str	r0, [r5, #0]
 800de82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de84:	f10d 0c0c 	add.w	ip, sp, #12
 800de88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	f8cc 3000 	str.w	r3, [ip]
 800de92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de94:	9302      	str	r3, [sp, #8]
 800de96:	e9cd 8700 	strd	r8, r7, [sp]
 800de9a:	4628      	mov	r0, r5
 800de9c:	4632      	mov	r2, r6
 800de9e:	f106 010c 	add.w	r1, r6, #12
 800dea2:	f007 f9f5 	bl	8015290 <rcl_timer_init>
 800dea6:	b910      	cbnz	r0, 800deae <rclc_timer_init_default+0x46>
 800dea8:	b00a      	add	sp, #40	@ 0x28
 800deaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deae:	9009      	str	r0, [sp, #36]	@ 0x24
 800deb0:	f000 f92e 	bl	800e110 <rcutils_reset_error>
 800deb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800deb6:	b00a      	add	sp, #40	@ 0x28
 800deb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800debc:	200b      	movs	r0, #11
 800debe:	b00a      	add	sp, #40	@ 0x28
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	200b      	movs	r0, #11
 800dec6:	4770      	bx	lr

0800dec8 <__default_zero_allocate>:
 800dec8:	f00a bb8a 	b.w	80185e0 <calloc>

0800decc <__default_reallocate>:
 800decc:	f00a bd28 	b.w	8018920 <realloc>

0800ded0 <__default_deallocate>:
 800ded0:	f00a bc04 	b.w	80186dc <free>

0800ded4 <__default_allocate>:
 800ded4:	f00a bbfa 	b.w	80186cc <malloc>

0800ded8 <rcutils_get_zero_initialized_allocator>:
 800ded8:	b510      	push	{r4, lr}
 800deda:	4c05      	ldr	r4, [pc, #20]	@ (800def0 <rcutils_get_zero_initialized_allocator+0x18>)
 800dedc:	4686      	mov	lr, r0
 800dede:	4684      	mov	ip, r0
 800dee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dee2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	f8cc 3000 	str.w	r3, [ip]
 800deec:	4670      	mov	r0, lr
 800deee:	bd10      	pop	{r4, pc}
 800def0:	0801a2b8 	.word	0x0801a2b8

0800def4 <rcutils_set_default_allocator>:
 800def4:	b1a8      	cbz	r0, 800df22 <rcutils_set_default_allocator+0x2e>
 800def6:	6802      	ldr	r2, [r0, #0]
 800def8:	b1a2      	cbz	r2, 800df24 <rcutils_set_default_allocator+0x30>
 800defa:	6841      	ldr	r1, [r0, #4]
 800defc:	b1a1      	cbz	r1, 800df28 <rcutils_set_default_allocator+0x34>
 800defe:	b410      	push	{r4}
 800df00:	68c4      	ldr	r4, [r0, #12]
 800df02:	b164      	cbz	r4, 800df1e <rcutils_set_default_allocator+0x2a>
 800df04:	6880      	ldr	r0, [r0, #8]
 800df06:	b138      	cbz	r0, 800df18 <rcutils_set_default_allocator+0x24>
 800df08:	4b08      	ldr	r3, [pc, #32]	@ (800df2c <rcutils_set_default_allocator+0x38>)
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	2200      	movs	r2, #0
 800df0e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800df12:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800df16:	2001      	movs	r0, #1
 800df18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	4620      	mov	r0, r4
 800df20:	e7fa      	b.n	800df18 <rcutils_set_default_allocator+0x24>
 800df22:	4770      	bx	lr
 800df24:	4610      	mov	r0, r2
 800df26:	4770      	bx	lr
 800df28:	4608      	mov	r0, r1
 800df2a:	4770      	bx	lr
 800df2c:	200001bc 	.word	0x200001bc

0800df30 <rcutils_get_default_allocator>:
 800df30:	b510      	push	{r4, lr}
 800df32:	4c05      	ldr	r4, [pc, #20]	@ (800df48 <rcutils_get_default_allocator+0x18>)
 800df34:	4686      	mov	lr, r0
 800df36:	4684      	mov	ip, r0
 800df38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	f8cc 3000 	str.w	r3, [ip]
 800df44:	4670      	mov	r0, lr
 800df46:	bd10      	pop	{r4, pc}
 800df48:	200001bc 	.word	0x200001bc

0800df4c <rcutils_allocator_is_valid>:
 800df4c:	b158      	cbz	r0, 800df66 <rcutils_allocator_is_valid+0x1a>
 800df4e:	6803      	ldr	r3, [r0, #0]
 800df50:	b143      	cbz	r3, 800df64 <rcutils_allocator_is_valid+0x18>
 800df52:	6843      	ldr	r3, [r0, #4]
 800df54:	b133      	cbz	r3, 800df64 <rcutils_allocator_is_valid+0x18>
 800df56:	68c3      	ldr	r3, [r0, #12]
 800df58:	b123      	cbz	r3, 800df64 <rcutils_allocator_is_valid+0x18>
 800df5a:	6880      	ldr	r0, [r0, #8]
 800df5c:	3800      	subs	r0, #0
 800df5e:	bf18      	it	ne
 800df60:	2001      	movne	r0, #1
 800df62:	4770      	bx	lr
 800df64:	4618      	mov	r0, r3
 800df66:	4770      	bx	lr

0800df68 <__atomic_load_8>:
 800df68:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800df6c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800df70:	4a15      	ldr	r2, [pc, #84]	@ (800dfc8 <__atomic_load_8+0x60>)
 800df72:	4b16      	ldr	r3, [pc, #88]	@ (800dfcc <__atomic_load_8+0x64>)
 800df74:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800df78:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800df7c:	fb02 f101 	mul.w	r1, r2, r1
 800df80:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800df84:	fba3 2301 	umull	r2, r3, r3, r1
 800df88:	091b      	lsrs	r3, r3, #4
 800df8a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800df8e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800df92:	b4d0      	push	{r4, r6, r7}
 800df94:	4c0e      	ldr	r4, [pc, #56]	@ (800dfd0 <__atomic_load_8+0x68>)
 800df96:	1ac9      	subs	r1, r1, r3
 800df98:	1862      	adds	r2, r4, r1
 800df9a:	f04f 0c01 	mov.w	ip, #1
 800df9e:	e8d2 3f4f 	ldrexb	r3, [r2]
 800dfa2:	e8c2 cf46 	strexb	r6, ip, [r2]
 800dfa6:	2e00      	cmp	r6, #0
 800dfa8:	d1f9      	bne.n	800df9e <__atomic_load_8+0x36>
 800dfaa:	f3bf 8f5b 	dmb	ish
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1f4      	bne.n	800df9e <__atomic_load_8+0x36>
 800dfb4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800dfb8:	f3bf 8f5b 	dmb	ish
 800dfbc:	5463      	strb	r3, [r4, r1]
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	4639      	mov	r1, r7
 800dfc2:	bcd0      	pop	{r4, r6, r7}
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	27d4eb2d 	.word	0x27d4eb2d
 800dfcc:	b21642c9 	.word	0xb21642c9
 800dfd0:	200068b8 	.word	0x200068b8

0800dfd4 <__atomic_store_8>:
 800dfd4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800dfd8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800dfdc:	b570      	push	{r4, r5, r6, lr}
 800dfde:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800dfe2:	4c14      	ldr	r4, [pc, #80]	@ (800e034 <__atomic_store_8+0x60>)
 800dfe4:	4d14      	ldr	r5, [pc, #80]	@ (800e038 <__atomic_store_8+0x64>)
 800dfe6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800dfea:	fb04 f101 	mul.w	r1, r4, r1
 800dfee:	4c13      	ldr	r4, [pc, #76]	@ (800e03c <__atomic_store_8+0x68>)
 800dff0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800dff4:	fba4 4e01 	umull	r4, lr, r4, r1
 800dff8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800dffc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800e000:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800e004:	eba1 0e0e 	sub.w	lr, r1, lr
 800e008:	eb05 0c0e 	add.w	ip, r5, lr
 800e00c:	f04f 0401 	mov.w	r4, #1
 800e010:	e8dc 1f4f 	ldrexb	r1, [ip]
 800e014:	e8cc 4f46 	strexb	r6, r4, [ip]
 800e018:	2e00      	cmp	r6, #0
 800e01a:	d1f9      	bne.n	800e010 <__atomic_store_8+0x3c>
 800e01c:	f3bf 8f5b 	dmb	ish
 800e020:	b2c9      	uxtb	r1, r1
 800e022:	2900      	cmp	r1, #0
 800e024:	d1f4      	bne.n	800e010 <__atomic_store_8+0x3c>
 800e026:	e9c0 2300 	strd	r2, r3, [r0]
 800e02a:	f3bf 8f5b 	dmb	ish
 800e02e:	f805 100e 	strb.w	r1, [r5, lr]
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	27d4eb2d 	.word	0x27d4eb2d
 800e038:	200068b8 	.word	0x200068b8
 800e03c:	b21642c9 	.word	0xb21642c9

0800e040 <__atomic_exchange_8>:
 800e040:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800e044:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800e048:	4916      	ldr	r1, [pc, #88]	@ (800e0a4 <__atomic_exchange_8+0x64>)
 800e04a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800e04e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800e052:	fb01 fc0c 	mul.w	ip, r1, ip
 800e056:	4914      	ldr	r1, [pc, #80]	@ (800e0a8 <__atomic_exchange_8+0x68>)
 800e058:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800e05c:	b570      	push	{r4, r5, r6, lr}
 800e05e:	4605      	mov	r5, r0
 800e060:	fba1 010c 	umull	r0, r1, r1, ip
 800e064:	0909      	lsrs	r1, r1, #4
 800e066:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800e06a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800e06e:	4e0f      	ldr	r6, [pc, #60]	@ (800e0ac <__atomic_exchange_8+0x6c>)
 800e070:	ebac 0c01 	sub.w	ip, ip, r1
 800e074:	eb06 010c 	add.w	r1, r6, ip
 800e078:	f04f 0e01 	mov.w	lr, #1
 800e07c:	e8d1 4f4f 	ldrexb	r4, [r1]
 800e080:	e8c1 ef40 	strexb	r0, lr, [r1]
 800e084:	2800      	cmp	r0, #0
 800e086:	d1f9      	bne.n	800e07c <__atomic_exchange_8+0x3c>
 800e088:	f3bf 8f5b 	dmb	ish
 800e08c:	b2e4      	uxtb	r4, r4
 800e08e:	2c00      	cmp	r4, #0
 800e090:	d1f4      	bne.n	800e07c <__atomic_exchange_8+0x3c>
 800e092:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e096:	e9c5 2300 	strd	r2, r3, [r5]
 800e09a:	f3bf 8f5b 	dmb	ish
 800e09e:	f806 400c 	strb.w	r4, [r6, ip]
 800e0a2:	bd70      	pop	{r4, r5, r6, pc}
 800e0a4:	27d4eb2d 	.word	0x27d4eb2d
 800e0a8:	b21642c9 	.word	0xb21642c9
 800e0ac:	200068b8 	.word	0x200068b8

0800e0b0 <rcutils_get_env>:
 800e0b0:	b168      	cbz	r0, 800e0ce <rcutils_get_env+0x1e>
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	460c      	mov	r4, r1
 800e0b6:	b129      	cbz	r1, 800e0c4 <rcutils_get_env+0x14>
 800e0b8:	f00a fac0 	bl	801863c <getenv>
 800e0bc:	b120      	cbz	r0, 800e0c8 <rcutils_get_env+0x18>
 800e0be:	6020      	str	r0, [r4, #0]
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	bd10      	pop	{r4, pc}
 800e0c4:	4803      	ldr	r0, [pc, #12]	@ (800e0d4 <rcutils_get_env+0x24>)
 800e0c6:	bd10      	pop	{r4, pc}
 800e0c8:	4b03      	ldr	r3, [pc, #12]	@ (800e0d8 <rcutils_get_env+0x28>)
 800e0ca:	6023      	str	r3, [r4, #0]
 800e0cc:	bd10      	pop	{r4, pc}
 800e0ce:	4803      	ldr	r0, [pc, #12]	@ (800e0dc <rcutils_get_env+0x2c>)
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	0801a2e8 	.word	0x0801a2e8
 800e0d8:	0801a6a0 	.word	0x0801a6a0
 800e0dc:	0801a2cc 	.word	0x0801a2cc

0800e0e0 <rcutils_get_error_string>:
 800e0e0:	4b06      	ldr	r3, [pc, #24]	@ (800e0fc <rcutils_get_error_string+0x1c>)
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	b13b      	cbz	r3, 800e0f6 <rcutils_get_error_string+0x16>
 800e0e6:	4b06      	ldr	r3, [pc, #24]	@ (800e100 <rcutils_get_error_string+0x20>)
 800e0e8:	781a      	ldrb	r2, [r3, #0]
 800e0ea:	b90a      	cbnz	r2, 800e0f0 <rcutils_get_error_string+0x10>
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	701a      	strb	r2, [r3, #0]
 800e0f0:	4b04      	ldr	r3, [pc, #16]	@ (800e104 <rcutils_get_error_string+0x24>)
 800e0f2:	7818      	ldrb	r0, [r3, #0]
 800e0f4:	4770      	bx	lr
 800e0f6:	4b04      	ldr	r3, [pc, #16]	@ (800e108 <rcutils_get_error_string+0x28>)
 800e0f8:	7818      	ldrb	r0, [r3, #0]
 800e0fa:	4770      	bx	lr
 800e0fc:	200068cf 	.word	0x200068cf
 800e100:	200068e1 	.word	0x200068e1
 800e104:	200068e0 	.word	0x200068e0
 800e108:	0801ac44 	.word	0x0801ac44
 800e10c:	00000000 	.word	0x00000000

0800e110 <rcutils_reset_error>:
 800e110:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e130 <rcutils_reset_error+0x20>
 800e114:	4a08      	ldr	r2, [pc, #32]	@ (800e138 <rcutils_reset_error+0x28>)
 800e116:	4809      	ldr	r0, [pc, #36]	@ (800e13c <rcutils_reset_error+0x2c>)
 800e118:	4909      	ldr	r1, [pc, #36]	@ (800e140 <rcutils_reset_error+0x30>)
 800e11a:	2300      	movs	r3, #0
 800e11c:	8013      	strh	r3, [r2, #0]
 800e11e:	ed82 7b02 	vstr	d7, [r2, #8]
 800e122:	4a08      	ldr	r2, [pc, #32]	@ (800e144 <rcutils_reset_error+0x34>)
 800e124:	7003      	strb	r3, [r0, #0]
 800e126:	700b      	strb	r3, [r1, #0]
 800e128:	7013      	strb	r3, [r2, #0]
 800e12a:	4770      	bx	lr
 800e12c:	f3af 8000 	nop.w
	...
 800e138:	200068d0 	.word	0x200068d0
 800e13c:	200068e1 	.word	0x200068e1
 800e140:	200068e0 	.word	0x200068e0
 800e144:	200068cf 	.word	0x200068cf

0800e148 <rcutils_format_string_limit>:
 800e148:	b40f      	push	{r0, r1, r2, r3}
 800e14a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e14c:	b083      	sub	sp, #12
 800e14e:	ac08      	add	r4, sp, #32
 800e150:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e152:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e156:	b34e      	cbz	r6, 800e1ac <rcutils_format_string_limit+0x64>
 800e158:	a808      	add	r0, sp, #32
 800e15a:	f7ff fef7 	bl	800df4c <rcutils_allocator_is_valid>
 800e15e:	b328      	cbz	r0, 800e1ac <rcutils_format_string_limit+0x64>
 800e160:	2100      	movs	r1, #0
 800e162:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e164:	4632      	mov	r2, r6
 800e166:	4608      	mov	r0, r1
 800e168:	e9cd 3300 	strd	r3, r3, [sp]
 800e16c:	f000 f8f4 	bl	800e358 <rcutils_vsnprintf>
 800e170:	1c43      	adds	r3, r0, #1
 800e172:	4605      	mov	r5, r0
 800e174:	d01a      	beq.n	800e1ac <rcutils_format_string_limit+0x64>
 800e176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e178:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e17a:	1c47      	adds	r7, r0, #1
 800e17c:	429f      	cmp	r7, r3
 800e17e:	bf84      	itt	hi
 800e180:	461f      	movhi	r7, r3
 800e182:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800e186:	4638      	mov	r0, r7
 800e188:	9b08      	ldr	r3, [sp, #32]
 800e18a:	4798      	blx	r3
 800e18c:	4604      	mov	r4, r0
 800e18e:	b168      	cbz	r0, 800e1ac <rcutils_format_string_limit+0x64>
 800e190:	9b01      	ldr	r3, [sp, #4]
 800e192:	4632      	mov	r2, r6
 800e194:	4639      	mov	r1, r7
 800e196:	f000 f8df 	bl	800e358 <rcutils_vsnprintf>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	db02      	blt.n	800e1a4 <rcutils_format_string_limit+0x5c>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	5563      	strb	r3, [r4, r5]
 800e1a2:	e004      	b.n	800e1ae <rcutils_format_string_limit+0x66>
 800e1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	4798      	blx	r3
 800e1ac:	2400      	movs	r4, #0
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	b003      	add	sp, #12
 800e1b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e1b6:	b004      	add	sp, #16
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop

0800e1bc <rcutils_repl_str>:
 800e1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c0:	ed2d 8b02 	vpush	{d8}
 800e1c4:	b087      	sub	sp, #28
 800e1c6:	4680      	mov	r8, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	f8cd 8004 	str.w	r8, [sp, #4]
 800e1ce:	ee08 2a10 	vmov	s16, r2
 800e1d2:	468a      	mov	sl, r1
 800e1d4:	4699      	mov	r9, r3
 800e1d6:	f7f2 f82d 	bl	8000234 <strlen>
 800e1da:	2600      	movs	r6, #0
 800e1dc:	4647      	mov	r7, r8
 800e1de:	9002      	str	r0, [sp, #8]
 800e1e0:	46b3      	mov	fp, r6
 800e1e2:	2510      	movs	r5, #16
 800e1e4:	46b0      	mov	r8, r6
 800e1e6:	e01d      	b.n	800e224 <rcutils_repl_str+0x68>
 800e1e8:	f10b 0b01 	add.w	fp, fp, #1
 800e1ec:	455e      	cmp	r6, fp
 800e1ee:	d211      	bcs.n	800e214 <rcutils_repl_str+0x58>
 800e1f0:	442e      	add	r6, r5
 800e1f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e1f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e1fa:	00b1      	lsls	r1, r6, #2
 800e1fc:	4798      	blx	r3
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f000 8088 	beq.w	800e314 <rcutils_repl_str+0x158>
 800e204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e208:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e20c:	4680      	mov	r8, r0
 800e20e:	bf28      	it	cs
 800e210:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e214:	9a01      	ldr	r2, [sp, #4]
 800e216:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e21a:	1aa2      	subs	r2, r4, r2
 800e21c:	f843 2c04 	str.w	r2, [r3, #-4]
 800e220:	9b02      	ldr	r3, [sp, #8]
 800e222:	18e7      	adds	r7, r4, r3
 800e224:	4651      	mov	r1, sl
 800e226:	4638      	mov	r0, r7
 800e228:	f00a feeb 	bl	8019002 <strstr>
 800e22c:	4604      	mov	r4, r0
 800e22e:	4640      	mov	r0, r8
 800e230:	2c00      	cmp	r4, #0
 800e232:	d1d9      	bne.n	800e1e8 <rcutils_repl_str+0x2c>
 800e234:	46b8      	mov	r8, r7
 800e236:	4607      	mov	r7, r0
 800e238:	4640      	mov	r0, r8
 800e23a:	f7f1 fffb 	bl	8000234 <strlen>
 800e23e:	9b01      	ldr	r3, [sp, #4]
 800e240:	eba8 0303 	sub.w	r3, r8, r3
 800e244:	181c      	adds	r4, r3, r0
 800e246:	9404      	str	r4, [sp, #16]
 800e248:	f1bb 0f00 	cmp.w	fp, #0
 800e24c:	d04a      	beq.n	800e2e4 <rcutils_repl_str+0x128>
 800e24e:	ee18 0a10 	vmov	r0, s16
 800e252:	f7f1 ffef 	bl	8000234 <strlen>
 800e256:	9b02      	ldr	r3, [sp, #8]
 800e258:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e25c:	1ac3      	subs	r3, r0, r3
 800e25e:	fb0b 4303 	mla	r3, fp, r3, r4
 800e262:	461a      	mov	r2, r3
 800e264:	9305      	str	r3, [sp, #20]
 800e266:	4606      	mov	r6, r0
 800e268:	f8d9 3000 	ldr.w	r3, [r9]
 800e26c:	1c50      	adds	r0, r2, #1
 800e26e:	4798      	blx	r3
 800e270:	9003      	str	r0, [sp, #12]
 800e272:	2800      	cmp	r0, #0
 800e274:	d04f      	beq.n	800e316 <rcutils_repl_str+0x15a>
 800e276:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e27a:	683a      	ldr	r2, [r7, #0]
 800e27c:	4641      	mov	r1, r8
 800e27e:	f00a ff62 	bl	8019146 <memcpy>
 800e282:	683d      	ldr	r5, [r7, #0]
 800e284:	9b03      	ldr	r3, [sp, #12]
 800e286:	9701      	str	r7, [sp, #4]
 800e288:	46ba      	mov	sl, r7
 800e28a:	441d      	add	r5, r3
 800e28c:	9f02      	ldr	r7, [sp, #8]
 800e28e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e292:	2401      	movs	r4, #1
 800e294:	46d1      	mov	r9, sl
 800e296:	ee18 aa10 	vmov	sl, s16
 800e29a:	e00a      	b.n	800e2b2 <rcutils_repl_str+0xf6>
 800e29c:	f8d9 5000 	ldr.w	r5, [r9]
 800e2a0:	1aaa      	subs	r2, r5, r2
 800e2a2:	1885      	adds	r5, r0, r2
 800e2a4:	f00a ff4f 	bl	8019146 <memcpy>
 800e2a8:	45a3      	cmp	fp, r4
 800e2aa:	f104 0201 	add.w	r2, r4, #1
 800e2ae:	d935      	bls.n	800e31c <rcutils_repl_str+0x160>
 800e2b0:	4614      	mov	r4, r2
 800e2b2:	4632      	mov	r2, r6
 800e2b4:	4651      	mov	r1, sl
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f00a ff45 	bl	8019146 <memcpy>
 800e2bc:	f859 2b04 	ldr.w	r2, [r9], #4
 800e2c0:	45a3      	cmp	fp, r4
 800e2c2:	443a      	add	r2, r7
 800e2c4:	eb05 0006 	add.w	r0, r5, r6
 800e2c8:	eb08 0102 	add.w	r1, r8, r2
 800e2cc:	d1e6      	bne.n	800e29c <rcutils_repl_str+0xe0>
 800e2ce:	9b04      	ldr	r3, [sp, #16]
 800e2d0:	1a9a      	subs	r2, r3, r2
 800e2d2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e2d6:	f00a ff36 	bl	8019146 <memcpy>
 800e2da:	9a03      	ldr	r2, [sp, #12]
 800e2dc:	9905      	ldr	r1, [sp, #20]
 800e2de:	2300      	movs	r3, #0
 800e2e0:	5453      	strb	r3, [r2, r1]
 800e2e2:	e00b      	b.n	800e2fc <rcutils_repl_str+0x140>
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f8d9 3000 	ldr.w	r3, [r9]
 800e2ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	4798      	blx	r3
 800e2f2:	9003      	str	r0, [sp, #12]
 800e2f4:	b110      	cbz	r0, 800e2fc <rcutils_repl_str+0x140>
 800e2f6:	9901      	ldr	r1, [sp, #4]
 800e2f8:	f00a ff1d 	bl	8019136 <strcpy>
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e302:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e306:	4798      	blx	r3
 800e308:	9803      	ldr	r0, [sp, #12]
 800e30a:	b007      	add	sp, #28
 800e30c:	ecbd 8b02 	vpop	{d8}
 800e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e314:	4647      	mov	r7, r8
 800e316:	2300      	movs	r3, #0
 800e318:	9303      	str	r3, [sp, #12]
 800e31a:	e7ef      	b.n	800e2fc <rcutils_repl_str+0x140>
 800e31c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e320:	e7db      	b.n	800e2da <rcutils_repl_str+0x11e>
 800e322:	bf00      	nop

0800e324 <rcutils_snprintf>:
 800e324:	b40c      	push	{r2, r3}
 800e326:	b530      	push	{r4, r5, lr}
 800e328:	b083      	sub	sp, #12
 800e32a:	ab06      	add	r3, sp, #24
 800e32c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	b152      	cbz	r2, 800e34a <rcutils_snprintf+0x26>
 800e334:	b138      	cbz	r0, 800e346 <rcutils_snprintf+0x22>
 800e336:	b141      	cbz	r1, 800e34a <rcutils_snprintf+0x26>
 800e338:	f00a fd70 	bl	8018e1c <vsniprintf>
 800e33c:	b003      	add	sp, #12
 800e33e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e342:	b002      	add	sp, #8
 800e344:	4770      	bx	lr
 800e346:	2900      	cmp	r1, #0
 800e348:	d0f6      	beq.n	800e338 <rcutils_snprintf+0x14>
 800e34a:	f00a fec7 	bl	80190dc <__errno>
 800e34e:	2316      	movs	r3, #22
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e356:	e7f1      	b.n	800e33c <rcutils_snprintf+0x18>

0800e358 <rcutils_vsnprintf>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	b13a      	cbz	r2, 800e36c <rcutils_vsnprintf+0x14>
 800e35c:	b120      	cbz	r0, 800e368 <rcutils_vsnprintf+0x10>
 800e35e:	b129      	cbz	r1, 800e36c <rcutils_vsnprintf+0x14>
 800e360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e364:	f00a bd5a 	b.w	8018e1c <vsniprintf>
 800e368:	2900      	cmp	r1, #0
 800e36a:	d0f9      	beq.n	800e360 <rcutils_vsnprintf+0x8>
 800e36c:	f00a feb6 	bl	80190dc <__errno>
 800e370:	2316      	movs	r3, #22
 800e372:	6003      	str	r3, [r0, #0]
 800e374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e378:	bd70      	pop	{r4, r5, r6, pc}
 800e37a:	bf00      	nop

0800e37c <rcutils_strdup>:
 800e37c:	b084      	sub	sp, #16
 800e37e:	b570      	push	{r4, r5, r6, lr}
 800e380:	b082      	sub	sp, #8
 800e382:	ac07      	add	r4, sp, #28
 800e384:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e388:	4605      	mov	r5, r0
 800e38a:	b1b0      	cbz	r0, 800e3ba <rcutils_strdup+0x3e>
 800e38c:	f7f1 ff52 	bl	8000234 <strlen>
 800e390:	1c42      	adds	r2, r0, #1
 800e392:	9b07      	ldr	r3, [sp, #28]
 800e394:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e396:	9201      	str	r2, [sp, #4]
 800e398:	4606      	mov	r6, r0
 800e39a:	4610      	mov	r0, r2
 800e39c:	4798      	blx	r3
 800e39e:	4604      	mov	r4, r0
 800e3a0:	b128      	cbz	r0, 800e3ae <rcutils_strdup+0x32>
 800e3a2:	9a01      	ldr	r2, [sp, #4]
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f00a fece 	bl	8019146 <memcpy>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	55a3      	strb	r3, [r4, r6]
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	b002      	add	sp, #8
 800e3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3b6:	b004      	add	sp, #16
 800e3b8:	4770      	bx	lr
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	e7f7      	b.n	800e3ae <rcutils_strdup+0x32>
 800e3be:	bf00      	nop

0800e3c0 <rcutils_strndup>:
 800e3c0:	b082      	sub	sp, #8
 800e3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c4:	ac06      	add	r4, sp, #24
 800e3c6:	e884 000c 	stmia.w	r4, {r2, r3}
 800e3ca:	4605      	mov	r5, r0
 800e3cc:	b188      	cbz	r0, 800e3f2 <rcutils_strndup+0x32>
 800e3ce:	1c4f      	adds	r7, r1, #1
 800e3d0:	460e      	mov	r6, r1
 800e3d2:	4638      	mov	r0, r7
 800e3d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3d6:	4790      	blx	r2
 800e3d8:	4604      	mov	r4, r0
 800e3da:	b128      	cbz	r0, 800e3e8 <rcutils_strndup+0x28>
 800e3dc:	463a      	mov	r2, r7
 800e3de:	4629      	mov	r1, r5
 800e3e0:	f00a feb1 	bl	8019146 <memcpy>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	55a3      	strb	r3, [r4, r6]
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e3ee:	b002      	add	sp, #8
 800e3f0:	4770      	bx	lr
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	e7f8      	b.n	800e3e8 <rcutils_strndup+0x28>
 800e3f6:	bf00      	nop

0800e3f8 <rcutils_get_zero_initialized_string_map>:
 800e3f8:	4b01      	ldr	r3, [pc, #4]	@ (800e400 <rcutils_get_zero_initialized_string_map+0x8>)
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	6018      	str	r0, [r3, #0]
 800e3fe:	4770      	bx	lr
 800e400:	200068e4 	.word	0x200068e4

0800e404 <rcutils_string_map_reserve>:
 800e404:	2800      	cmp	r0, #0
 800e406:	d05f      	beq.n	800e4c8 <rcutils_string_map_reserve+0xc4>
 800e408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e40c:	460c      	mov	r4, r1
 800e40e:	6801      	ldr	r1, [r0, #0]
 800e410:	b082      	sub	sp, #8
 800e412:	4605      	mov	r5, r0
 800e414:	b129      	cbz	r1, 800e422 <rcutils_string_map_reserve+0x1e>
 800e416:	68cb      	ldr	r3, [r1, #12]
 800e418:	42a3      	cmp	r3, r4
 800e41a:	d906      	bls.n	800e42a <rcutils_string_map_reserve+0x26>
 800e41c:	461c      	mov	r4, r3
 800e41e:	2900      	cmp	r1, #0
 800e420:	d1f9      	bne.n	800e416 <rcutils_string_map_reserve+0x12>
 800e422:	201f      	movs	r0, #31
 800e424:	b002      	add	sp, #8
 800e426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e42a:	688b      	ldr	r3, [r1, #8]
 800e42c:	42a3      	cmp	r3, r4
 800e42e:	d047      	beq.n	800e4c0 <rcutils_string_map_reserve+0xbc>
 800e430:	6a0e      	ldr	r6, [r1, #32]
 800e432:	2c00      	cmp	r4, #0
 800e434:	d034      	beq.n	800e4a0 <rcutils_string_map_reserve+0x9c>
 800e436:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e43a:	d243      	bcs.n	800e4c4 <rcutils_string_map_reserve+0xc0>
 800e43c:	00a7      	lsls	r7, r4, #2
 800e43e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800e442:	6808      	ldr	r0, [r1, #0]
 800e444:	4632      	mov	r2, r6
 800e446:	4639      	mov	r1, r7
 800e448:	47c0      	blx	r8
 800e44a:	2800      	cmp	r0, #0
 800e44c:	d03a      	beq.n	800e4c4 <rcutils_string_map_reserve+0xc0>
 800e44e:	682b      	ldr	r3, [r5, #0]
 800e450:	4632      	mov	r2, r6
 800e452:	6018      	str	r0, [r3, #0]
 800e454:	4639      	mov	r1, r7
 800e456:	6858      	ldr	r0, [r3, #4]
 800e458:	47c0      	blx	r8
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d032      	beq.n	800e4c4 <rcutils_string_map_reserve+0xc0>
 800e45e:	682d      	ldr	r5, [r5, #0]
 800e460:	68ab      	ldr	r3, [r5, #8]
 800e462:	6068      	str	r0, [r5, #4]
 800e464:	42a3      	cmp	r3, r4
 800e466:	d226      	bcs.n	800e4b6 <rcutils_string_map_reserve+0xb2>
 800e468:	682a      	ldr	r2, [r5, #0]
 800e46a:	eb00 0c07 	add.w	ip, r0, r7
 800e46e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800e472:	45e6      	cmp	lr, ip
 800e474:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800e478:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e47c:	d203      	bcs.n	800e486 <rcutils_string_map_reserve+0x82>
 800e47e:	eb02 0c07 	add.w	ip, r2, r7
 800e482:	4566      	cmp	r6, ip
 800e484:	d322      	bcc.n	800e4cc <rcutils_string_map_reserve+0xc8>
 800e486:	1ae3      	subs	r3, r4, r3
 800e488:	009a      	lsls	r2, r3, #2
 800e48a:	4670      	mov	r0, lr
 800e48c:	2100      	movs	r1, #0
 800e48e:	9201      	str	r2, [sp, #4]
 800e490:	f00a fd90 	bl	8018fb4 <memset>
 800e494:	9a01      	ldr	r2, [sp, #4]
 800e496:	2100      	movs	r1, #0
 800e498:	4630      	mov	r0, r6
 800e49a:	f00a fd8b 	bl	8018fb4 <memset>
 800e49e:	e00a      	b.n	800e4b6 <rcutils_string_map_reserve+0xb2>
 800e4a0:	694f      	ldr	r7, [r1, #20]
 800e4a2:	6808      	ldr	r0, [r1, #0]
 800e4a4:	4631      	mov	r1, r6
 800e4a6:	47b8      	blx	r7
 800e4a8:	682b      	ldr	r3, [r5, #0]
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	6858      	ldr	r0, [r3, #4]
 800e4ae:	601c      	str	r4, [r3, #0]
 800e4b0:	47b8      	blx	r7
 800e4b2:	682d      	ldr	r5, [r5, #0]
 800e4b4:	606c      	str	r4, [r5, #4]
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	60ac      	str	r4, [r5, #8]
 800e4ba:	b002      	add	sp, #8
 800e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	e7af      	b.n	800e424 <rcutils_string_map_reserve+0x20>
 800e4c4:	200a      	movs	r0, #10
 800e4c6:	e7ad      	b.n	800e424 <rcutils_string_map_reserve+0x20>
 800e4c8:	200b      	movs	r0, #11
 800e4ca:	4770      	bx	lr
 800e4cc:	1f0b      	subs	r3, r1, #4
 800e4ce:	4418      	add	r0, r3
 800e4d0:	4413      	add	r3, r2
 800e4d2:	3a04      	subs	r2, #4
 800e4d4:	4417      	add	r7, r2
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f843 2f04 	str.w	r2, [r3, #4]!
 800e4dc:	42bb      	cmp	r3, r7
 800e4de:	f840 2f04 	str.w	r2, [r0, #4]!
 800e4e2:	d1f9      	bne.n	800e4d8 <rcutils_string_map_reserve+0xd4>
 800e4e4:	e7e7      	b.n	800e4b6 <rcutils_string_map_reserve+0xb2>
 800e4e6:	bf00      	nop

0800e4e8 <rcutils_string_map_init>:
 800e4e8:	b082      	sub	sp, #8
 800e4ea:	b570      	push	{r4, r5, r6, lr}
 800e4ec:	ac04      	add	r4, sp, #16
 800e4ee:	e884 000c 	stmia.w	r4, {r2, r3}
 800e4f2:	b380      	cbz	r0, 800e556 <rcutils_string_map_init+0x6e>
 800e4f4:	6806      	ldr	r6, [r0, #0]
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	b12e      	cbz	r6, 800e506 <rcutils_string_map_init+0x1e>
 800e4fa:	251e      	movs	r5, #30
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e502:	b002      	add	sp, #8
 800e504:	4770      	bx	lr
 800e506:	a804      	add	r0, sp, #16
 800e508:	460d      	mov	r5, r1
 800e50a:	f7ff fd1f 	bl	800df4c <rcutils_allocator_is_valid>
 800e50e:	b310      	cbz	r0, 800e556 <rcutils_string_map_init+0x6e>
 800e510:	9b04      	ldr	r3, [sp, #16]
 800e512:	9908      	ldr	r1, [sp, #32]
 800e514:	2024      	movs	r0, #36	@ 0x24
 800e516:	4798      	blx	r3
 800e518:	6020      	str	r0, [r4, #0]
 800e51a:	b310      	cbz	r0, 800e562 <rcutils_string_map_init+0x7a>
 800e51c:	f10d 0e10 	add.w	lr, sp, #16
 800e520:	e9c0 6600 	strd	r6, r6, [r0]
 800e524:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800e528:	f100 0c10 	add.w	ip, r0, #16
 800e52c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e530:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e534:	f8de 3000 	ldr.w	r3, [lr]
 800e538:	f8cc 3000 	str.w	r3, [ip]
 800e53c:	4629      	mov	r1, r5
 800e53e:	4620      	mov	r0, r4
 800e540:	f7ff ff60 	bl	800e404 <rcutils_string_map_reserve>
 800e544:	4605      	mov	r5, r0
 800e546:	2800      	cmp	r0, #0
 800e548:	d0d8      	beq.n	800e4fc <rcutils_string_map_init+0x14>
 800e54a:	9b05      	ldr	r3, [sp, #20]
 800e54c:	9908      	ldr	r1, [sp, #32]
 800e54e:	6820      	ldr	r0, [r4, #0]
 800e550:	4798      	blx	r3
 800e552:	6026      	str	r6, [r4, #0]
 800e554:	e7d2      	b.n	800e4fc <rcutils_string_map_init+0x14>
 800e556:	250b      	movs	r5, #11
 800e558:	4628      	mov	r0, r5
 800e55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e55e:	b002      	add	sp, #8
 800e560:	4770      	bx	lr
 800e562:	250a      	movs	r5, #10
 800e564:	e7ca      	b.n	800e4fc <rcutils_string_map_init+0x14>
 800e566:	bf00      	nop

0800e568 <rcutils_string_map_fini>:
 800e568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e56c:	b082      	sub	sp, #8
 800e56e:	2800      	cmp	r0, #0
 800e570:	d03a      	beq.n	800e5e8 <rcutils_string_map_fini+0x80>
 800e572:	6804      	ldr	r4, [r0, #0]
 800e574:	4606      	mov	r6, r0
 800e576:	2c00      	cmp	r4, #0
 800e578:	d032      	beq.n	800e5e0 <rcutils_string_map_fini+0x78>
 800e57a:	68a3      	ldr	r3, [r4, #8]
 800e57c:	b32b      	cbz	r3, 800e5ca <rcutils_string_map_fini+0x62>
 800e57e:	2500      	movs	r5, #0
 800e580:	6822      	ldr	r2, [r4, #0]
 800e582:	462f      	mov	r7, r5
 800e584:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e588:	b1e0      	cbz	r0, 800e5c4 <rcutils_string_map_fini+0x5c>
 800e58a:	6a21      	ldr	r1, [r4, #32]
 800e58c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800e590:	9101      	str	r1, [sp, #4]
 800e592:	47c0      	blx	r8
 800e594:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e598:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e59c:	9901      	ldr	r1, [sp, #4]
 800e59e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5a2:	47c0      	blx	r8
 800e5a4:	68e3      	ldr	r3, [r4, #12]
 800e5a6:	6862      	ldr	r2, [r4, #4]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e5ae:	60e3      	str	r3, [r4, #12]
 800e5b0:	6834      	ldr	r4, [r6, #0]
 800e5b2:	68a3      	ldr	r3, [r4, #8]
 800e5b4:	3501      	adds	r5, #1
 800e5b6:	429d      	cmp	r5, r3
 800e5b8:	d207      	bcs.n	800e5ca <rcutils_string_map_fini+0x62>
 800e5ba:	6822      	ldr	r2, [r4, #0]
 800e5bc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	d1e2      	bne.n	800e58a <rcutils_string_map_fini+0x22>
 800e5c4:	3501      	adds	r5, #1
 800e5c6:	429d      	cmp	r5, r3
 800e5c8:	d3dc      	bcc.n	800e584 <rcutils_string_map_fini+0x1c>
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	f7ff ff19 	bl	800e404 <rcutils_string_map_reserve>
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	b920      	cbnz	r0, 800e5e0 <rcutils_string_map_fini+0x78>
 800e5d6:	6830      	ldr	r0, [r6, #0]
 800e5d8:	6943      	ldr	r3, [r0, #20]
 800e5da:	6a01      	ldr	r1, [r0, #32]
 800e5dc:	4798      	blx	r3
 800e5de:	6034      	str	r4, [r6, #0]
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	b002      	add	sp, #8
 800e5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e8:	240b      	movs	r4, #11
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	b002      	add	sp, #8
 800e5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f2:	bf00      	nop

0800e5f4 <rcutils_string_map_getn>:
 800e5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f8:	b300      	cbz	r0, 800e63c <rcutils_string_map_getn+0x48>
 800e5fa:	6807      	ldr	r7, [r0, #0]
 800e5fc:	b1ff      	cbz	r7, 800e63e <rcutils_string_map_getn+0x4a>
 800e5fe:	4688      	mov	r8, r1
 800e600:	b1e1      	cbz	r1, 800e63c <rcutils_string_map_getn+0x48>
 800e602:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800e606:	683e      	ldr	r6, [r7, #0]
 800e608:	f1ba 0f00 	cmp.w	sl, #0
 800e60c:	d016      	beq.n	800e63c <rcutils_string_map_getn+0x48>
 800e60e:	4691      	mov	r9, r2
 800e610:	3e04      	subs	r6, #4
 800e612:	2400      	movs	r4, #0
 800e614:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800e618:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e61c:	4628      	mov	r0, r5
 800e61e:	3401      	adds	r4, #1
 800e620:	b155      	cbz	r5, 800e638 <rcutils_string_map_getn+0x44>
 800e622:	f7f1 fe07 	bl	8000234 <strlen>
 800e626:	4548      	cmp	r0, r9
 800e628:	4602      	mov	r2, r0
 800e62a:	4629      	mov	r1, r5
 800e62c:	bf38      	it	cc
 800e62e:	464a      	movcc	r2, r9
 800e630:	4640      	mov	r0, r8
 800e632:	f00a fcd4 	bl	8018fde <strncmp>
 800e636:	b128      	cbz	r0, 800e644 <rcutils_string_map_getn+0x50>
 800e638:	45a2      	cmp	sl, r4
 800e63a:	d1eb      	bne.n	800e614 <rcutils_string_map_getn+0x20>
 800e63c:	2700      	movs	r7, #0
 800e63e:	4638      	mov	r0, r7
 800e640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f853 700b 	ldr.w	r7, [r3, fp]
 800e64a:	4638      	mov	r0, r7
 800e64c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e650 <rcutils_system_time_now>:
 800e650:	b308      	cbz	r0, 800e696 <rcutils_system_time_now+0x46>
 800e652:	b570      	push	{r4, r5, r6, lr}
 800e654:	b084      	sub	sp, #16
 800e656:	4604      	mov	r4, r0
 800e658:	4669      	mov	r1, sp
 800e65a:	2001      	movs	r0, #1
 800e65c:	f7f3 fbd0 	bl	8001e00 <clock_gettime>
 800e660:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e664:	2d00      	cmp	r5, #0
 800e666:	db13      	blt.n	800e690 <rcutils_system_time_now+0x40>
 800e668:	9902      	ldr	r1, [sp, #8]
 800e66a:	2900      	cmp	r1, #0
 800e66c:	db0d      	blt.n	800e68a <rcutils_system_time_now+0x3a>
 800e66e:	4e0b      	ldr	r6, [pc, #44]	@ (800e69c <rcutils_system_time_now+0x4c>)
 800e670:	fba3 3206 	umull	r3, r2, r3, r6
 800e674:	185b      	adds	r3, r3, r1
 800e676:	fb06 2205 	mla	r2, r6, r5, r2
 800e67a:	f04f 0000 	mov.w	r0, #0
 800e67e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e682:	e9c4 3200 	strd	r3, r2, [r4]
 800e686:	b004      	add	sp, #16
 800e688:	bd70      	pop	{r4, r5, r6, pc}
 800e68a:	ea53 0205 	orrs.w	r2, r3, r5
 800e68e:	d1ee      	bne.n	800e66e <rcutils_system_time_now+0x1e>
 800e690:	2002      	movs	r0, #2
 800e692:	b004      	add	sp, #16
 800e694:	bd70      	pop	{r4, r5, r6, pc}
 800e696:	200b      	movs	r0, #11
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	3b9aca00 	.word	0x3b9aca00

0800e6a0 <rcutils_steady_time_now>:
 800e6a0:	b308      	cbz	r0, 800e6e6 <rcutils_steady_time_now+0x46>
 800e6a2:	b570      	push	{r4, r5, r6, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	4669      	mov	r1, sp
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	f7f3 fba8 	bl	8001e00 <clock_gettime>
 800e6b0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e6b4:	2d00      	cmp	r5, #0
 800e6b6:	db13      	blt.n	800e6e0 <rcutils_steady_time_now+0x40>
 800e6b8:	9902      	ldr	r1, [sp, #8]
 800e6ba:	2900      	cmp	r1, #0
 800e6bc:	db0d      	blt.n	800e6da <rcutils_steady_time_now+0x3a>
 800e6be:	4e0b      	ldr	r6, [pc, #44]	@ (800e6ec <rcutils_steady_time_now+0x4c>)
 800e6c0:	fba3 3206 	umull	r3, r2, r3, r6
 800e6c4:	185b      	adds	r3, r3, r1
 800e6c6:	fb06 2205 	mla	r2, r6, r5, r2
 800e6ca:	f04f 0000 	mov.w	r0, #0
 800e6ce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e6d2:	e9c4 3200 	strd	r3, r2, [r4]
 800e6d6:	b004      	add	sp, #16
 800e6d8:	bd70      	pop	{r4, r5, r6, pc}
 800e6da:	ea53 0205 	orrs.w	r2, r3, r5
 800e6de:	d1ee      	bne.n	800e6be <rcutils_steady_time_now+0x1e>
 800e6e0:	2002      	movs	r0, #2
 800e6e2:	b004      	add	sp, #16
 800e6e4:	bd70      	pop	{r4, r5, r6, pc}
 800e6e6:	200b      	movs	r0, #11
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	3b9aca00 	.word	0x3b9aca00

0800e6f0 <rmw_get_zero_initialized_init_options>:
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	2238      	movs	r2, #56	@ 0x38
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	f00a fc5c 	bl	8018fb4 <memset>
 800e6fc:	f104 0010 	add.w	r0, r4, #16
 800e700:	f000 f80a 	bl	800e718 <rmw_get_default_security_options>
 800e704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e708:	60e3      	str	r3, [r4, #12]
 800e70a:	4620      	mov	r0, r4
 800e70c:	bd10      	pop	{r4, pc}
 800e70e:	bf00      	nop

0800e710 <rmw_get_default_publisher_options>:
 800e710:	2200      	movs	r2, #0
 800e712:	6002      	str	r2, [r0, #0]
 800e714:	7102      	strb	r2, [r0, #4]
 800e716:	4770      	bx	lr

0800e718 <rmw_get_default_security_options>:
 800e718:	2200      	movs	r2, #0
 800e71a:	7002      	strb	r2, [r0, #0]
 800e71c:	6042      	str	r2, [r0, #4]
 800e71e:	4770      	bx	lr

0800e720 <rmw_validate_full_topic_name>:
 800e720:	2800      	cmp	r0, #0
 800e722:	d057      	beq.n	800e7d4 <rmw_validate_full_topic_name+0xb4>
 800e724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e728:	460d      	mov	r5, r1
 800e72a:	2900      	cmp	r1, #0
 800e72c:	d054      	beq.n	800e7d8 <rmw_validate_full_topic_name+0xb8>
 800e72e:	4616      	mov	r6, r2
 800e730:	4604      	mov	r4, r0
 800e732:	f7f1 fd7f 	bl	8000234 <strlen>
 800e736:	b148      	cbz	r0, 800e74c <rmw_validate_full_topic_name+0x2c>
 800e738:	7823      	ldrb	r3, [r4, #0]
 800e73a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e73c:	d00d      	beq.n	800e75a <rmw_validate_full_topic_name+0x3a>
 800e73e:	2302      	movs	r3, #2
 800e740:	602b      	str	r3, [r5, #0]
 800e742:	b13e      	cbz	r6, 800e754 <rmw_validate_full_topic_name+0x34>
 800e744:	2000      	movs	r0, #0
 800e746:	6030      	str	r0, [r6, #0]
 800e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e74c:	2301      	movs	r3, #1
 800e74e:	602b      	str	r3, [r5, #0]
 800e750:	2e00      	cmp	r6, #0
 800e752:	d1f7      	bne.n	800e744 <rmw_validate_full_topic_name+0x24>
 800e754:	2000      	movs	r0, #0
 800e756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e75a:	1e43      	subs	r3, r0, #1
 800e75c:	5ce2      	ldrb	r2, [r4, r3]
 800e75e:	2a2f      	cmp	r2, #47	@ 0x2f
 800e760:	d03c      	beq.n	800e7dc <rmw_validate_full_topic_name+0xbc>
 800e762:	1e63      	subs	r3, r4, #1
 800e764:	eb03 0800 	add.w	r8, r3, r0
 800e768:	f1c4 0e01 	rsb	lr, r4, #1
 800e76c:	eb0e 0703 	add.w	r7, lr, r3
 800e770:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e774:	f021 0220 	bic.w	r2, r1, #32
 800e778:	3a41      	subs	r2, #65	@ 0x41
 800e77a:	2a19      	cmp	r2, #25
 800e77c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800e780:	d90b      	bls.n	800e79a <rmw_validate_full_topic_name+0x7a>
 800e782:	295f      	cmp	r1, #95	@ 0x5f
 800e784:	d009      	beq.n	800e79a <rmw_validate_full_topic_name+0x7a>
 800e786:	f1bc 0f0a 	cmp.w	ip, #10
 800e78a:	d906      	bls.n	800e79a <rmw_validate_full_topic_name+0x7a>
 800e78c:	2304      	movs	r3, #4
 800e78e:	602b      	str	r3, [r5, #0]
 800e790:	2e00      	cmp	r6, #0
 800e792:	d0df      	beq.n	800e754 <rmw_validate_full_topic_name+0x34>
 800e794:	6037      	str	r7, [r6, #0]
 800e796:	2000      	movs	r0, #0
 800e798:	e7d6      	b.n	800e748 <rmw_validate_full_topic_name+0x28>
 800e79a:	4543      	cmp	r3, r8
 800e79c:	d1e6      	bne.n	800e76c <rmw_validate_full_topic_name+0x4c>
 800e79e:	4f1a      	ldr	r7, [pc, #104]	@ (800e808 <rmw_validate_full_topic_name+0xe8>)
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e004      	b.n	800e7ae <rmw_validate_full_topic_name+0x8e>
 800e7a4:	4298      	cmp	r0, r3
 800e7a6:	f104 0401 	add.w	r4, r4, #1
 800e7aa:	d91c      	bls.n	800e7e6 <rmw_validate_full_topic_name+0xc6>
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	4298      	cmp	r0, r3
 800e7b0:	f103 0201 	add.w	r2, r3, #1
 800e7b4:	d0f6      	beq.n	800e7a4 <rmw_validate_full_topic_name+0x84>
 800e7b6:	7821      	ldrb	r1, [r4, #0]
 800e7b8:	292f      	cmp	r1, #47	@ 0x2f
 800e7ba:	d1f3      	bne.n	800e7a4 <rmw_validate_full_topic_name+0x84>
 800e7bc:	7861      	ldrb	r1, [r4, #1]
 800e7be:	292f      	cmp	r1, #47	@ 0x2f
 800e7c0:	d01c      	beq.n	800e7fc <rmw_validate_full_topic_name+0xdc>
 800e7c2:	5dc9      	ldrb	r1, [r1, r7]
 800e7c4:	0749      	lsls	r1, r1, #29
 800e7c6:	d5ed      	bpl.n	800e7a4 <rmw_validate_full_topic_name+0x84>
 800e7c8:	2206      	movs	r2, #6
 800e7ca:	602a      	str	r2, [r5, #0]
 800e7cc:	2e00      	cmp	r6, #0
 800e7ce:	d0c1      	beq.n	800e754 <rmw_validate_full_topic_name+0x34>
 800e7d0:	6033      	str	r3, [r6, #0]
 800e7d2:	e7bf      	b.n	800e754 <rmw_validate_full_topic_name+0x34>
 800e7d4:	200b      	movs	r0, #11
 800e7d6:	4770      	bx	lr
 800e7d8:	200b      	movs	r0, #11
 800e7da:	e7b5      	b.n	800e748 <rmw_validate_full_topic_name+0x28>
 800e7dc:	2203      	movs	r2, #3
 800e7de:	602a      	str	r2, [r5, #0]
 800e7e0:	2e00      	cmp	r6, #0
 800e7e2:	d1f5      	bne.n	800e7d0 <rmw_validate_full_topic_name+0xb0>
 800e7e4:	e7b6      	b.n	800e754 <rmw_validate_full_topic_name+0x34>
 800e7e6:	28f7      	cmp	r0, #247	@ 0xf7
 800e7e8:	d802      	bhi.n	800e7f0 <rmw_validate_full_topic_name+0xd0>
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	6028      	str	r0, [r5, #0]
 800e7ee:	e7ab      	b.n	800e748 <rmw_validate_full_topic_name+0x28>
 800e7f0:	2307      	movs	r3, #7
 800e7f2:	602b      	str	r3, [r5, #0]
 800e7f4:	2e00      	cmp	r6, #0
 800e7f6:	d0ad      	beq.n	800e754 <rmw_validate_full_topic_name+0x34>
 800e7f8:	23f6      	movs	r3, #246	@ 0xf6
 800e7fa:	e7e9      	b.n	800e7d0 <rmw_validate_full_topic_name+0xb0>
 800e7fc:	2205      	movs	r2, #5
 800e7fe:	602a      	str	r2, [r5, #0]
 800e800:	2e00      	cmp	r6, #0
 800e802:	d1e5      	bne.n	800e7d0 <rmw_validate_full_topic_name+0xb0>
 800e804:	e7a6      	b.n	800e754 <rmw_validate_full_topic_name+0x34>
 800e806:	bf00      	nop
 800e808:	0801b33e 	.word	0x0801b33e

0800e80c <rmw_validate_namespace_with_size>:
 800e80c:	b340      	cbz	r0, 800e860 <rmw_validate_namespace_with_size+0x54>
 800e80e:	b570      	push	{r4, r5, r6, lr}
 800e810:	4614      	mov	r4, r2
 800e812:	b0c2      	sub	sp, #264	@ 0x108
 800e814:	b332      	cbz	r2, 800e864 <rmw_validate_namespace_with_size+0x58>
 800e816:	2901      	cmp	r1, #1
 800e818:	460d      	mov	r5, r1
 800e81a:	461e      	mov	r6, r3
 800e81c:	d102      	bne.n	800e824 <rmw_validate_namespace_with_size+0x18>
 800e81e:	7803      	ldrb	r3, [r0, #0]
 800e820:	2b2f      	cmp	r3, #47	@ 0x2f
 800e822:	d012      	beq.n	800e84a <rmw_validate_namespace_with_size+0x3e>
 800e824:	aa01      	add	r2, sp, #4
 800e826:	4669      	mov	r1, sp
 800e828:	f7ff ff7a 	bl	800e720 <rmw_validate_full_topic_name>
 800e82c:	b978      	cbnz	r0, 800e84e <rmw_validate_namespace_with_size+0x42>
 800e82e:	9b00      	ldr	r3, [sp, #0]
 800e830:	b14b      	cbz	r3, 800e846 <rmw_validate_namespace_with_size+0x3a>
 800e832:	2b07      	cmp	r3, #7
 800e834:	d007      	beq.n	800e846 <rmw_validate_namespace_with_size+0x3a>
 800e836:	1e5a      	subs	r2, r3, #1
 800e838:	2a05      	cmp	r2, #5
 800e83a:	d82b      	bhi.n	800e894 <rmw_validate_namespace_with_size+0x88>
 800e83c:	e8df f002 	tbb	[pc, r2]
 800e840:	1e212427 	.word	0x1e212427
 800e844:	141b      	.short	0x141b
 800e846:	2df5      	cmp	r5, #245	@ 0xf5
 800e848:	d803      	bhi.n	800e852 <rmw_validate_namespace_with_size+0x46>
 800e84a:	2000      	movs	r0, #0
 800e84c:	6020      	str	r0, [r4, #0]
 800e84e:	b042      	add	sp, #264	@ 0x108
 800e850:	bd70      	pop	{r4, r5, r6, pc}
 800e852:	2307      	movs	r3, #7
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	2e00      	cmp	r6, #0
 800e858:	d0f9      	beq.n	800e84e <rmw_validate_namespace_with_size+0x42>
 800e85a:	23f4      	movs	r3, #244	@ 0xf4
 800e85c:	6033      	str	r3, [r6, #0]
 800e85e:	e7f6      	b.n	800e84e <rmw_validate_namespace_with_size+0x42>
 800e860:	200b      	movs	r0, #11
 800e862:	4770      	bx	lr
 800e864:	200b      	movs	r0, #11
 800e866:	e7f2      	b.n	800e84e <rmw_validate_namespace_with_size+0x42>
 800e868:	2306      	movs	r3, #6
 800e86a:	6023      	str	r3, [r4, #0]
 800e86c:	2e00      	cmp	r6, #0
 800e86e:	d0ee      	beq.n	800e84e <rmw_validate_namespace_with_size+0x42>
 800e870:	9b01      	ldr	r3, [sp, #4]
 800e872:	6033      	str	r3, [r6, #0]
 800e874:	e7eb      	b.n	800e84e <rmw_validate_namespace_with_size+0x42>
 800e876:	2305      	movs	r3, #5
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	e7f7      	b.n	800e86c <rmw_validate_namespace_with_size+0x60>
 800e87c:	2304      	movs	r3, #4
 800e87e:	6023      	str	r3, [r4, #0]
 800e880:	e7f4      	b.n	800e86c <rmw_validate_namespace_with_size+0x60>
 800e882:	2303      	movs	r3, #3
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	e7f1      	b.n	800e86c <rmw_validate_namespace_with_size+0x60>
 800e888:	2302      	movs	r3, #2
 800e88a:	6023      	str	r3, [r4, #0]
 800e88c:	e7ee      	b.n	800e86c <rmw_validate_namespace_with_size+0x60>
 800e88e:	2301      	movs	r3, #1
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	e7eb      	b.n	800e86c <rmw_validate_namespace_with_size+0x60>
 800e894:	4a03      	ldr	r2, [pc, #12]	@ (800e8a4 <rmw_validate_namespace_with_size+0x98>)
 800e896:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e89a:	a802      	add	r0, sp, #8
 800e89c:	f7ff fd42 	bl	800e324 <rcutils_snprintf>
 800e8a0:	2001      	movs	r0, #1
 800e8a2:	e7d4      	b.n	800e84e <rmw_validate_namespace_with_size+0x42>
 800e8a4:	0801a304 	.word	0x0801a304

0800e8a8 <rmw_validate_namespace>:
 800e8a8:	b168      	cbz	r0, 800e8c6 <rmw_validate_namespace+0x1e>
 800e8aa:	b570      	push	{r4, r5, r6, lr}
 800e8ac:	460d      	mov	r5, r1
 800e8ae:	4616      	mov	r6, r2
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	f7f1 fcbf 	bl	8000234 <strlen>
 800e8b6:	4633      	mov	r3, r6
 800e8b8:	4601      	mov	r1, r0
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4620      	mov	r0, r4
 800e8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8c2:	f7ff bfa3 	b.w	800e80c <rmw_validate_namespace_with_size>
 800e8c6:	200b      	movs	r0, #11
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop

0800e8cc <rmw_namespace_validation_result_string>:
 800e8cc:	2807      	cmp	r0, #7
 800e8ce:	bf9a      	itte	ls
 800e8d0:	4b02      	ldrls	r3, [pc, #8]	@ (800e8dc <rmw_namespace_validation_result_string+0x10>)
 800e8d2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e8d6:	4802      	ldrhi	r0, [pc, #8]	@ (800e8e0 <rmw_namespace_validation_result_string+0x14>)
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	0801a4fc 	.word	0x0801a4fc
 800e8e0:	0801a354 	.word	0x0801a354

0800e8e4 <rmw_validate_node_name>:
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d03b      	beq.n	800e960 <rmw_validate_node_name+0x7c>
 800e8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ec:	460d      	mov	r5, r1
 800e8ee:	2900      	cmp	r1, #0
 800e8f0:	d038      	beq.n	800e964 <rmw_validate_node_name+0x80>
 800e8f2:	4616      	mov	r6, r2
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	f7f1 fc9d 	bl	8000234 <strlen>
 800e8fa:	b1e0      	cbz	r0, 800e936 <rmw_validate_node_name+0x52>
 800e8fc:	1e63      	subs	r3, r4, #1
 800e8fe:	eb03 0800 	add.w	r8, r3, r0
 800e902:	f1c4 0101 	rsb	r1, r4, #1
 800e906:	18cf      	adds	r7, r1, r3
 800e908:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e90c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800e910:	f02e 0c20 	bic.w	ip, lr, #32
 800e914:	2a09      	cmp	r2, #9
 800e916:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800e91a:	d914      	bls.n	800e946 <rmw_validate_node_name+0x62>
 800e91c:	f1bc 0f19 	cmp.w	ip, #25
 800e920:	d911      	bls.n	800e946 <rmw_validate_node_name+0x62>
 800e922:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e926:	d00e      	beq.n	800e946 <rmw_validate_node_name+0x62>
 800e928:	2302      	movs	r3, #2
 800e92a:	602b      	str	r3, [r5, #0]
 800e92c:	b106      	cbz	r6, 800e930 <rmw_validate_node_name+0x4c>
 800e92e:	6037      	str	r7, [r6, #0]
 800e930:	2000      	movs	r0, #0
 800e932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e936:	2301      	movs	r3, #1
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	2e00      	cmp	r6, #0
 800e93c:	d0f8      	beq.n	800e930 <rmw_validate_node_name+0x4c>
 800e93e:	2000      	movs	r0, #0
 800e940:	6030      	str	r0, [r6, #0]
 800e942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e946:	4543      	cmp	r3, r8
 800e948:	d1dd      	bne.n	800e906 <rmw_validate_node_name+0x22>
 800e94a:	7822      	ldrb	r2, [r4, #0]
 800e94c:	4b0d      	ldr	r3, [pc, #52]	@ (800e984 <rmw_validate_node_name+0xa0>)
 800e94e:	5cd3      	ldrb	r3, [r2, r3]
 800e950:	f013 0304 	ands.w	r3, r3, #4
 800e954:	d110      	bne.n	800e978 <rmw_validate_node_name+0x94>
 800e956:	28ff      	cmp	r0, #255	@ 0xff
 800e958:	d806      	bhi.n	800e968 <rmw_validate_node_name+0x84>
 800e95a:	602b      	str	r3, [r5, #0]
 800e95c:	4618      	mov	r0, r3
 800e95e:	e7e8      	b.n	800e932 <rmw_validate_node_name+0x4e>
 800e960:	200b      	movs	r0, #11
 800e962:	4770      	bx	lr
 800e964:	200b      	movs	r0, #11
 800e966:	e7e4      	b.n	800e932 <rmw_validate_node_name+0x4e>
 800e968:	2204      	movs	r2, #4
 800e96a:	602a      	str	r2, [r5, #0]
 800e96c:	2e00      	cmp	r6, #0
 800e96e:	d0df      	beq.n	800e930 <rmw_validate_node_name+0x4c>
 800e970:	22fe      	movs	r2, #254	@ 0xfe
 800e972:	6032      	str	r2, [r6, #0]
 800e974:	4618      	mov	r0, r3
 800e976:	e7dc      	b.n	800e932 <rmw_validate_node_name+0x4e>
 800e978:	2303      	movs	r3, #3
 800e97a:	602b      	str	r3, [r5, #0]
 800e97c:	2e00      	cmp	r6, #0
 800e97e:	d1de      	bne.n	800e93e <rmw_validate_node_name+0x5a>
 800e980:	e7d6      	b.n	800e930 <rmw_validate_node_name+0x4c>
 800e982:	bf00      	nop
 800e984:	0801b33e 	.word	0x0801b33e

0800e988 <rmw_node_name_validation_result_string>:
 800e988:	2804      	cmp	r0, #4
 800e98a:	bf9a      	itte	ls
 800e98c:	4b02      	ldrls	r3, [pc, #8]	@ (800e998 <rmw_node_name_validation_result_string+0x10>)
 800e98e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e992:	4802      	ldrhi	r0, [pc, #8]	@ (800e99c <rmw_node_name_validation_result_string+0x14>)
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	0801a608 	.word	0x0801a608
 800e99c:	0801a51c 	.word	0x0801a51c

0800e9a0 <rmw_uros_set_custom_transport>:
 800e9a0:	b470      	push	{r4, r5, r6}
 800e9a2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e9a6:	b162      	cbz	r2, 800e9c2 <rmw_uros_set_custom_transport+0x22>
 800e9a8:	b15b      	cbz	r3, 800e9c2 <rmw_uros_set_custom_transport+0x22>
 800e9aa:	b155      	cbz	r5, 800e9c2 <rmw_uros_set_custom_transport+0x22>
 800e9ac:	b14e      	cbz	r6, 800e9c2 <rmw_uros_set_custom_transport+0x22>
 800e9ae:	4c06      	ldr	r4, [pc, #24]	@ (800e9c8 <rmw_uros_set_custom_transport+0x28>)
 800e9b0:	7020      	strb	r0, [r4, #0]
 800e9b2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e9b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e9ba:	6166      	str	r6, [r4, #20]
 800e9bc:	2000      	movs	r0, #0
 800e9be:	bc70      	pop	{r4, r5, r6}
 800e9c0:	4770      	bx	lr
 800e9c2:	200b      	movs	r0, #11
 800e9c4:	bc70      	pop	{r4, r5, r6}
 800e9c6:	4770      	bx	lr
 800e9c8:	200068e8 	.word	0x200068e8

0800e9cc <rmw_create_client>:
 800e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d0:	b091      	sub	sp, #68	@ 0x44
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	f000 80ba 	beq.w	800eb4c <rmw_create_client+0x180>
 800e9d8:	4689      	mov	r9, r1
 800e9da:	2900      	cmp	r1, #0
 800e9dc:	f000 80b6 	beq.w	800eb4c <rmw_create_client+0x180>
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	6800      	ldr	r0, [r0, #0]
 800e9e4:	4614      	mov	r4, r2
 800e9e6:	461d      	mov	r5, r3
 800e9e8:	f001 fc42 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	f000 80ad 	beq.w	800eb4c <rmw_create_client+0x180>
 800e9f2:	2c00      	cmp	r4, #0
 800e9f4:	f000 80aa 	beq.w	800eb4c <rmw_create_client+0x180>
 800e9f8:	7823      	ldrb	r3, [r4, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 80a6 	beq.w	800eb4c <rmw_create_client+0x180>
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	f000 80a3 	beq.w	800eb4c <rmw_create_client+0x180>
 800ea06:	4854      	ldr	r0, [pc, #336]	@ (800eb58 <rmw_create_client+0x18c>)
 800ea08:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800ea0c:	f008 fc14 	bl	8017238 <get_memory>
 800ea10:	4606      	mov	r6, r0
 800ea12:	2800      	cmp	r0, #0
 800ea14:	f000 809b 	beq.w	800eb4e <rmw_create_client+0x182>
 800ea18:	6887      	ldr	r7, [r0, #8]
 800ea1a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800ea1e:	f000 f90b 	bl	800ec38 <rmw_get_implementation_identifier>
 800ea22:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800ea26:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ea28:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f7f1 fc01 	bl	8000234 <strlen>
 800ea32:	1c42      	adds	r2, r0, #1
 800ea34:	2a3c      	cmp	r2, #60	@ 0x3c
 800ea36:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800ea3a:	f200 8084 	bhi.w	800eb46 <rmw_create_client+0x17a>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4650      	mov	r0, sl
 800ea42:	f00a fb80 	bl	8019146 <memcpy>
 800ea46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800ea50:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea52:	2250      	movs	r2, #80	@ 0x50
 800ea54:	f107 0020 	add.w	r0, r7, #32
 800ea58:	f00a fb75 	bl	8019146 <memcpy>
 800ea5c:	493f      	ldr	r1, [pc, #252]	@ (800eb5c <rmw_create_client+0x190>)
 800ea5e:	4648      	mov	r0, r9
 800ea60:	f001 fc20 	bl	80102a4 <get_service_typesupport_handle>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d06e      	beq.n	800eb46 <rmw_create_client+0x17a>
 800ea68:	6843      	ldr	r3, [r0, #4]
 800ea6a:	617b      	str	r3, [r7, #20]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d06a      	beq.n	800eb46 <rmw_create_client+0x17a>
 800ea70:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ea74:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800eb64 <rmw_create_client+0x198>
 800ea78:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800eb68 <rmw_create_client+0x19c>
 800ea7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea80:	2107      	movs	r1, #7
 800ea82:	f8b3 05a0 	ldrh.w	r0, [r3, #1440]	@ 0x5a0
 800ea86:	1c42      	adds	r2, r0, #1
 800ea88:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
 800ea8c:	f002 fa8c 	bl	8010fa8 <uxr_object_id>
 800ea90:	2364      	movs	r3, #100	@ 0x64
 800ea92:	6138      	str	r0, [r7, #16]
 800ea94:	4652      	mov	r2, sl
 800ea96:	6978      	ldr	r0, [r7, #20]
 800ea98:	4649      	mov	r1, r9
 800ea9a:	f001 fb37 	bl	801010c <generate_service_types>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d051      	beq.n	800eb46 <rmw_create_client+0x17a>
 800eaa2:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800eb6c <rmw_create_client+0x1a0>
 800eaa6:	4a2e      	ldr	r2, [pc, #184]	@ (800eb60 <rmw_create_client+0x194>)
 800eaa8:	233c      	movs	r3, #60	@ 0x3c
 800eaaa:	4659      	mov	r1, fp
 800eaac:	4620      	mov	r0, r4
 800eaae:	f001 fafb 	bl	80100a8 <generate_service_topics>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d047      	beq.n	800eb46 <rmw_create_client+0x17a>
 800eab6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eaba:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800eabe:	a80c      	add	r0, sp, #48	@ 0x30
 800eac0:	4629      	mov	r1, r5
 800eac2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eac6:	f001 fad5 	bl	8010074 <convert_qos_profile>
 800eaca:	4a25      	ldr	r2, [pc, #148]	@ (800eb60 <rmw_create_client+0x194>)
 800eacc:	9400      	str	r4, [sp, #0]
 800eace:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ead2:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800ead6:	a80c      	add	r0, sp, #48	@ 0x30
 800ead8:	c803      	ldmia	r0, {r0, r1}
 800eada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eadc:	9005      	str	r0, [sp, #20]
 800eade:	9a08      	ldr	r2, [sp, #32]
 800eae0:	f8ad 1018 	strh.w	r1, [sp, #24]
 800eae4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eae8:	2306      	movs	r3, #6
 800eaea:	9307      	str	r3, [sp, #28]
 800eaec:	6811      	ldr	r1, [r2, #0]
 800eaee:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800eaf2:	693a      	ldr	r2, [r7, #16]
 800eaf4:	f002 f95c 	bl	8010db0 <uxr_buffer_create_requester_bin>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eafe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb02:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb06:	f001 fa99 	bl	801003c <run_xrce_session>
 800eb0a:	b1e0      	cbz	r0, 800eb46 <rmw_create_client+0x17a>
 800eb0c:	7a2b      	ldrb	r3, [r5, #8]
 800eb0e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eb12:	2200      	movs	r2, #0
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800eb1a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800eb1e:	bf0c      	ite	eq
 800eb20:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800eb24:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800eb28:	673a      	str	r2, [r7, #112]	@ 0x70
 800eb2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb2c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800eb30:	ab0e      	add	r3, sp, #56	@ 0x38
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	6811      	ldr	r1, [r2, #0]
 800eb36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb38:	693a      	ldr	r2, [r7, #16]
 800eb3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb3e:	f002 fa63 	bl	8011008 <uxr_buffer_request_data>
 800eb42:	8338      	strh	r0, [r7, #24]
 800eb44:	e003      	b.n	800eb4e <rmw_create_client+0x182>
 800eb46:	4630      	mov	r0, r6
 800eb48:	f001 f962 	bl	800fe10 <rmw_uxrce_fini_client_memory>
 800eb4c:	2600      	movs	r6, #0
 800eb4e:	4630      	mov	r0, r6
 800eb50:	b011      	add	sp, #68	@ 0x44
 800eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb56:	bf00      	nop
 800eb58:	20006a80 	.word	0x20006a80
 800eb5c:	08019ff8 	.word	0x08019ff8
 800eb60:	200069a4 	.word	0x200069a4
 800eb64:	200069e0 	.word	0x200069e0
 800eb68:	20006940 	.word	0x20006940
 800eb6c:	20006904 	.word	0x20006904

0800eb70 <rmw_destroy_client>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	b128      	cbz	r0, 800eb80 <rmw_destroy_client+0x10>
 800eb74:	4604      	mov	r4, r0
 800eb76:	6800      	ldr	r0, [r0, #0]
 800eb78:	460d      	mov	r5, r1
 800eb7a:	f001 fb79 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800eb7e:	b910      	cbnz	r0, 800eb86 <rmw_destroy_client+0x16>
 800eb80:	2401      	movs	r4, #1
 800eb82:	4620      	mov	r0, r4
 800eb84:	bd70      	pop	{r4, r5, r6, pc}
 800eb86:	6863      	ldr	r3, [r4, #4]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d0f9      	beq.n	800eb80 <rmw_destroy_client+0x10>
 800eb8c:	2d00      	cmp	r5, #0
 800eb8e:	d0f7      	beq.n	800eb80 <rmw_destroy_client+0x10>
 800eb90:	6828      	ldr	r0, [r5, #0]
 800eb92:	f001 fb6d 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d0f2      	beq.n	800eb80 <rmw_destroy_client+0x10>
 800eb9a:	686e      	ldr	r6, [r5, #4]
 800eb9c:	2e00      	cmp	r6, #0
 800eb9e:	d0ef      	beq.n	800eb80 <rmw_destroy_client+0x10>
 800eba0:	6864      	ldr	r4, [r4, #4]
 800eba2:	6932      	ldr	r2, [r6, #16]
 800eba4:	6920      	ldr	r0, [r4, #16]
 800eba6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebae:	6819      	ldr	r1, [r3, #0]
 800ebb0:	f002 fa64 	bl	801107c <uxr_buffer_cancel_data>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	6920      	ldr	r0, [r4, #16]
 800ebb8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ebbc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ebc0:	f001 fa3c 	bl	801003c <run_xrce_session>
 800ebc4:	6920      	ldr	r0, [r4, #16]
 800ebc6:	6932      	ldr	r2, [r6, #16]
 800ebc8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebd0:	6819      	ldr	r1, [r3, #0]
 800ebd2:	f001 ff93 	bl	8010afc <uxr_buffer_delete_entity>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	6920      	ldr	r0, [r4, #16]
 800ebda:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ebde:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ebe2:	f001 fa2b 	bl	801003c <run_xrce_session>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	4628      	mov	r0, r5
 800ebea:	bf14      	ite	ne
 800ebec:	2400      	movne	r4, #0
 800ebee:	2402      	moveq	r4, #2
 800ebf0:	f001 f90e 	bl	800fe10 <rmw_uxrce_fini_client_memory>
 800ebf4:	e7c5      	b.n	800eb82 <rmw_destroy_client+0x12>
 800ebf6:	bf00      	nop

0800ebf8 <rmw_client_request_publisher_get_actual_qos>:
 800ebf8:	b150      	cbz	r0, 800ec10 <rmw_client_request_publisher_get_actual_qos+0x18>
 800ebfa:	b508      	push	{r3, lr}
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	b149      	cbz	r1, 800ec14 <rmw_client_request_publisher_get_actual_qos+0x1c>
 800ec00:	6841      	ldr	r1, [r0, #4]
 800ec02:	2250      	movs	r2, #80	@ 0x50
 800ec04:	3120      	adds	r1, #32
 800ec06:	4618      	mov	r0, r3
 800ec08:	f00a fa9d 	bl	8019146 <memcpy>
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	bd08      	pop	{r3, pc}
 800ec10:	200b      	movs	r0, #11
 800ec12:	4770      	bx	lr
 800ec14:	200b      	movs	r0, #11
 800ec16:	bd08      	pop	{r3, pc}

0800ec18 <rmw_client_response_subscription_get_actual_qos>:
 800ec18:	b150      	cbz	r0, 800ec30 <rmw_client_response_subscription_get_actual_qos+0x18>
 800ec1a:	b508      	push	{r3, lr}
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	b149      	cbz	r1, 800ec34 <rmw_client_response_subscription_get_actual_qos+0x1c>
 800ec20:	6841      	ldr	r1, [r0, #4]
 800ec22:	2250      	movs	r2, #80	@ 0x50
 800ec24:	3120      	adds	r1, #32
 800ec26:	4618      	mov	r0, r3
 800ec28:	f00a fa8d 	bl	8019146 <memcpy>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	bd08      	pop	{r3, pc}
 800ec30:	200b      	movs	r0, #11
 800ec32:	4770      	bx	lr
 800ec34:	200b      	movs	r0, #11
 800ec36:	bd08      	pop	{r3, pc}

0800ec38 <rmw_get_implementation_identifier>:
 800ec38:	4b01      	ldr	r3, [pc, #4]	@ (800ec40 <rmw_get_implementation_identifier+0x8>)
 800ec3a:	6818      	ldr	r0, [r3, #0]
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	0801b2bc 	.word	0x0801b2bc

0800ec44 <rmw_init_options_init>:
 800ec44:	b084      	sub	sp, #16
 800ec46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec48:	b083      	sub	sp, #12
 800ec4a:	ad09      	add	r5, sp, #36	@ 0x24
 800ec4c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ec50:	b130      	cbz	r0, 800ec60 <rmw_init_options_init+0x1c>
 800ec52:	4604      	mov	r4, r0
 800ec54:	4628      	mov	r0, r5
 800ec56:	f7ff f979 	bl	800df4c <rcutils_allocator_is_valid>
 800ec5a:	b108      	cbz	r0, 800ec60 <rmw_init_options_init+0x1c>
 800ec5c:	68a6      	ldr	r6, [r4, #8]
 800ec5e:	b12e      	cbz	r6, 800ec6c <rmw_init_options_init+0x28>
 800ec60:	200b      	movs	r0, #11
 800ec62:	b003      	add	sp, #12
 800ec64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec68:	b004      	add	sp, #16
 800ec6a:	4770      	bx	lr
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e9c4 2300 	strd	r2, r3, [r4]
 800ec74:	4b22      	ldr	r3, [pc, #136]	@ (800ed00 <rmw_init_options_init+0xbc>)
 800ec76:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800ed10 <rmw_init_options_init+0xcc>
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	60a3      	str	r3, [r4, #8]
 800ec7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec80:	f104 0c20 	add.w	ip, r4, #32
 800ec84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec88:	466f      	mov	r7, sp
 800ec8a:	682b      	ldr	r3, [r5, #0]
 800ec8c:	f8cc 3000 	str.w	r3, [ip]
 800ec90:	4638      	mov	r0, r7
 800ec92:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ec96:	60e6      	str	r6, [r4, #12]
 800ec98:	f7ff fd3e 	bl	800e718 <rmw_get_default_security_options>
 800ec9c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800eca0:	f104 0310 	add.w	r3, r4, #16
 800eca4:	e883 0003 	stmia.w	r3, {r0, r1}
 800eca8:	2203      	movs	r2, #3
 800ecaa:	4816      	ldr	r0, [pc, #88]	@ (800ed04 <rmw_init_options_init+0xc0>)
 800ecac:	4916      	ldr	r1, [pc, #88]	@ (800ed08 <rmw_init_options_init+0xc4>)
 800ecae:	7626      	strb	r6, [r4, #24]
 800ecb0:	f000 ffee 	bl	800fc90 <rmw_uxrce_init_init_options_impl_memory>
 800ecb4:	4813      	ldr	r0, [pc, #76]	@ (800ed04 <rmw_init_options_init+0xc0>)
 800ecb6:	f008 fabf 	bl	8017238 <get_memory>
 800ecba:	b1f0      	cbz	r0, 800ecfa <rmw_init_options_init+0xb6>
 800ecbc:	4a13      	ldr	r2, [pc, #76]	@ (800ed0c <rmw_init_options_init+0xc8>)
 800ecbe:	6883      	ldr	r3, [r0, #8]
 800ecc0:	6851      	ldr	r1, [r2, #4]
 800ecc2:	7810      	ldrb	r0, [r2, #0]
 800ecc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecc6:	7418      	strb	r0, [r3, #16]
 800ecc8:	6159      	str	r1, [r3, #20]
 800ecca:	68d1      	ldr	r1, [r2, #12]
 800eccc:	61d9      	str	r1, [r3, #28]
 800ecce:	6911      	ldr	r1, [r2, #16]
 800ecd0:	6219      	str	r1, [r3, #32]
 800ecd2:	6951      	ldr	r1, [r2, #20]
 800ecd4:	6892      	ldr	r2, [r2, #8]
 800ecd6:	619a      	str	r2, [r3, #24]
 800ecd8:	6259      	str	r1, [r3, #36]	@ 0x24
 800ecda:	f004 f983 	bl	8012fe4 <uxr_nanos>
 800ecde:	f009 fdb3 	bl	8018848 <srand>
 800ece2:	f009 fddf 	bl	80188a4 <rand>
 800ece6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ece8:	6298      	str	r0, [r3, #40]	@ 0x28
 800ecea:	2800      	cmp	r0, #0
 800ecec:	d0f9      	beq.n	800ece2 <rmw_init_options_init+0x9e>
 800ecee:	2000      	movs	r0, #0
 800ecf0:	b003      	add	sp, #12
 800ecf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ecf6:	b004      	add	sp, #16
 800ecf8:	4770      	bx	lr
 800ecfa:	2001      	movs	r0, #1
 800ecfc:	e7b1      	b.n	800ec62 <rmw_init_options_init+0x1e>
 800ecfe:	bf00      	nop
 800ed00:	0801b2bc 	.word	0x0801b2bc
 800ed04:	2000b65c 	.word	0x2000b65c
 800ed08:	20006e30 	.word	0x20006e30
 800ed0c:	200068e8 	.word	0x200068e8
 800ed10:	0801a11c 	.word	0x0801a11c

0800ed14 <rmw_init_options_copy>:
 800ed14:	b570      	push	{r4, r5, r6, lr}
 800ed16:	b158      	cbz	r0, 800ed30 <rmw_init_options_copy+0x1c>
 800ed18:	460d      	mov	r5, r1
 800ed1a:	b149      	cbz	r1, 800ed30 <rmw_init_options_copy+0x1c>
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	6880      	ldr	r0, [r0, #8]
 800ed20:	b120      	cbz	r0, 800ed2c <rmw_init_options_copy+0x18>
 800ed22:	4b1e      	ldr	r3, [pc, #120]	@ (800ed9c <rmw_init_options_copy+0x88>)
 800ed24:	6819      	ldr	r1, [r3, #0]
 800ed26:	f7f1 fa7b 	bl	8000220 <strcmp>
 800ed2a:	bb90      	cbnz	r0, 800ed92 <rmw_init_options_copy+0x7e>
 800ed2c:	68ab      	ldr	r3, [r5, #8]
 800ed2e:	b113      	cbz	r3, 800ed36 <rmw_init_options_copy+0x22>
 800ed30:	250b      	movs	r5, #11
 800ed32:	4628      	mov	r0, r5
 800ed34:	bd70      	pop	{r4, r5, r6, pc}
 800ed36:	4623      	mov	r3, r4
 800ed38:	462a      	mov	r2, r5
 800ed3a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800ed3e:	f8d3 c000 	ldr.w	ip, [r3]
 800ed42:	6858      	ldr	r0, [r3, #4]
 800ed44:	6899      	ldr	r1, [r3, #8]
 800ed46:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800ed4a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ed4e:	3310      	adds	r3, #16
 800ed50:	42b3      	cmp	r3, r6
 800ed52:	f8c2 c000 	str.w	ip, [r2]
 800ed56:	6050      	str	r0, [r2, #4]
 800ed58:	6091      	str	r1, [r2, #8]
 800ed5a:	f102 0210 	add.w	r2, r2, #16
 800ed5e:	d1ee      	bne.n	800ed3e <rmw_init_options_copy+0x2a>
 800ed60:	6819      	ldr	r1, [r3, #0]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	480e      	ldr	r0, [pc, #56]	@ (800eda0 <rmw_init_options_copy+0x8c>)
 800ed66:	6053      	str	r3, [r2, #4]
 800ed68:	6011      	str	r1, [r2, #0]
 800ed6a:	f008 fa65 	bl	8017238 <get_memory>
 800ed6e:	b198      	cbz	r0, 800ed98 <rmw_init_options_copy+0x84>
 800ed70:	6883      	ldr	r3, [r0, #8]
 800ed72:	636b      	str	r3, [r5, #52]	@ 0x34
 800ed74:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ed76:	f102 0c10 	add.w	ip, r2, #16
 800ed7a:	f103 0410 	add.w	r4, r3, #16
 800ed7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed84:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800ed88:	2500      	movs	r5, #0
 800ed8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ed8e:	4628      	mov	r0, r5
 800ed90:	bd70      	pop	{r4, r5, r6, pc}
 800ed92:	250c      	movs	r5, #12
 800ed94:	4628      	mov	r0, r5
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	2501      	movs	r5, #1
 800ed9a:	e7ca      	b.n	800ed32 <rmw_init_options_copy+0x1e>
 800ed9c:	0801b2bc 	.word	0x0801b2bc
 800eda0:	2000b65c 	.word	0x2000b65c

0800eda4 <rmw_init_options_fini>:
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d03d      	beq.n	800ee24 <rmw_init_options_fini+0x80>
 800eda8:	b510      	push	{r4, lr}
 800edaa:	4604      	mov	r4, r0
 800edac:	b08e      	sub	sp, #56	@ 0x38
 800edae:	3020      	adds	r0, #32
 800edb0:	f7ff f8cc 	bl	800df4c <rcutils_allocator_is_valid>
 800edb4:	b360      	cbz	r0, 800ee10 <rmw_init_options_fini+0x6c>
 800edb6:	68a0      	ldr	r0, [r4, #8]
 800edb8:	b120      	cbz	r0, 800edc4 <rmw_init_options_fini+0x20>
 800edba:	4b1c      	ldr	r3, [pc, #112]	@ (800ee2c <rmw_init_options_fini+0x88>)
 800edbc:	6819      	ldr	r1, [r3, #0]
 800edbe:	f7f1 fa2f 	bl	8000220 <strcmp>
 800edc2:	bb68      	cbnz	r0, 800ee20 <rmw_init_options_fini+0x7c>
 800edc4:	4b1a      	ldr	r3, [pc, #104]	@ (800ee30 <rmw_init_options_fini+0x8c>)
 800edc6:	6819      	ldr	r1, [r3, #0]
 800edc8:	b331      	cbz	r1, 800ee18 <rmw_init_options_fini+0x74>
 800edca:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800edcc:	e001      	b.n	800edd2 <rmw_init_options_fini+0x2e>
 800edce:	6849      	ldr	r1, [r1, #4]
 800edd0:	b311      	cbz	r1, 800ee18 <rmw_init_options_fini+0x74>
 800edd2:	688b      	ldr	r3, [r1, #8]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d1fa      	bne.n	800edce <rmw_init_options_fini+0x2a>
 800edd8:	4815      	ldr	r0, [pc, #84]	@ (800ee30 <rmw_init_options_fini+0x8c>)
 800edda:	f008 fa3d 	bl	8017258 <put_memory>
 800edde:	4668      	mov	r0, sp
 800ede0:	f7ff fc86 	bl	800e6f0 <rmw_get_zero_initialized_init_options>
 800ede4:	46ee      	mov	lr, sp
 800ede6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edea:	46a4      	mov	ip, r4
 800edec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ee04:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ee08:	2300      	movs	r3, #0
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	b00e      	add	sp, #56	@ 0x38
 800ee0e:	bd10      	pop	{r4, pc}
 800ee10:	230b      	movs	r3, #11
 800ee12:	4618      	mov	r0, r3
 800ee14:	b00e      	add	sp, #56	@ 0x38
 800ee16:	bd10      	pop	{r4, pc}
 800ee18:	2301      	movs	r3, #1
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	b00e      	add	sp, #56	@ 0x38
 800ee1e:	bd10      	pop	{r4, pc}
 800ee20:	230c      	movs	r3, #12
 800ee22:	e7f2      	b.n	800ee0a <rmw_init_options_fini+0x66>
 800ee24:	230b      	movs	r3, #11
 800ee26:	4618      	mov	r0, r3
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	0801b2bc 	.word	0x0801b2bc
 800ee30:	2000b65c 	.word	0x2000b65c

0800ee34 <rmw_init>:
 800ee34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee38:	b083      	sub	sp, #12
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	f000 80d3 	beq.w	800efe6 <rmw_init+0x1b2>
 800ee40:	460e      	mov	r6, r1
 800ee42:	2900      	cmp	r1, #0
 800ee44:	f000 80cf 	beq.w	800efe6 <rmw_init+0x1b2>
 800ee48:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ee4a:	4605      	mov	r5, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f000 80ca 	beq.w	800efe6 <rmw_init+0x1b2>
 800ee52:	4b78      	ldr	r3, [pc, #480]	@ (800f034 <rmw_init+0x200>)
 800ee54:	6880      	ldr	r0, [r0, #8]
 800ee56:	681f      	ldr	r7, [r3, #0]
 800ee58:	b128      	cbz	r0, 800ee66 <rmw_init+0x32>
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	f7f1 f9e0 	bl	8000220 <strcmp>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	f040 80ca 	bne.w	800effa <rmw_init+0x1c6>
 800ee66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee6a:	4c73      	ldr	r4, [pc, #460]	@ (800f038 <rmw_init+0x204>)
 800ee6c:	4973      	ldr	r1, [pc, #460]	@ (800f03c <rmw_init+0x208>)
 800ee6e:	4874      	ldr	r0, [pc, #464]	@ (800f040 <rmw_init+0x20c>)
 800ee70:	60b7      	str	r7, [r6, #8]
 800ee72:	e9c6 2300 	strd	r2, r3, [r6]
 800ee76:	68eb      	ldr	r3, [r5, #12]
 800ee78:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f000 fea8 	bl	800fbd0 <rmw_uxrce_init_session_memory>
 800ee80:	4620      	mov	r0, r4
 800ee82:	4970      	ldr	r1, [pc, #448]	@ (800f044 <rmw_init+0x210>)
 800ee84:	2204      	movs	r2, #4
 800ee86:	f000 fee3 	bl	800fc50 <rmw_uxrce_init_static_input_buffer_memory>
 800ee8a:	f04f 0800 	mov.w	r8, #0
 800ee8e:	486c      	ldr	r0, [pc, #432]	@ (800f040 <rmw_init+0x20c>)
 800ee90:	f884 800d 	strb.w	r8, [r4, #13]
 800ee94:	f008 f9d0 	bl	8017238 <get_memory>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	f000 80a9 	beq.w	800eff0 <rmw_init+0x1bc>
 800ee9e:	6884      	ldr	r4, [r0, #8]
 800eea0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800eea2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800eea4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800eea8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800eeac:	9101      	str	r1, [sp, #4]
 800eeae:	6a00      	ldr	r0, [r0, #32]
 800eeb0:	9000      	str	r0, [sp, #0]
 800eeb2:	f104 0910 	add.w	r9, r4, #16
 800eeb6:	4661      	mov	r1, ip
 800eeb8:	4648      	mov	r0, r9
 800eeba:	f002 f82f 	bl	8010f1c <uxr_set_custom_transport_callbacks>
 800eebe:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800eec2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eec6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800eeca:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800eece:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800eed2:	495d      	ldr	r1, [pc, #372]	@ (800f048 <rmw_init+0x214>)
 800eed4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800eed8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800eedc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800eee0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800eee4:	4859      	ldr	r0, [pc, #356]	@ (800f04c <rmw_init+0x218>)
 800eee6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800eeea:	2201      	movs	r2, #1
 800eeec:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800eeee:	f000 fe4f 	bl	800fb90 <rmw_uxrce_init_node_memory>
 800eef2:	4957      	ldr	r1, [pc, #348]	@ (800f050 <rmw_init+0x21c>)
 800eef4:	4857      	ldr	r0, [pc, #348]	@ (800f054 <rmw_init+0x220>)
 800eef6:	2205      	movs	r2, #5
 800eef8:	f000 fe2a 	bl	800fb50 <rmw_uxrce_init_subscription_memory>
 800eefc:	4956      	ldr	r1, [pc, #344]	@ (800f058 <rmw_init+0x224>)
 800eefe:	4857      	ldr	r0, [pc, #348]	@ (800f05c <rmw_init+0x228>)
 800ef00:	220a      	movs	r2, #10
 800ef02:	f000 fe05 	bl	800fb10 <rmw_uxrce_init_publisher_memory>
 800ef06:	4956      	ldr	r1, [pc, #344]	@ (800f060 <rmw_init+0x22c>)
 800ef08:	4856      	ldr	r0, [pc, #344]	@ (800f064 <rmw_init+0x230>)
 800ef0a:	2202      	movs	r2, #2
 800ef0c:	f000 fdc0 	bl	800fa90 <rmw_uxrce_init_service_memory>
 800ef10:	4955      	ldr	r1, [pc, #340]	@ (800f068 <rmw_init+0x234>)
 800ef12:	4856      	ldr	r0, [pc, #344]	@ (800f06c <rmw_init+0x238>)
 800ef14:	2204      	movs	r2, #4
 800ef16:	f000 fddb 	bl	800fad0 <rmw_uxrce_init_client_memory>
 800ef1a:	4955      	ldr	r1, [pc, #340]	@ (800f070 <rmw_init+0x23c>)
 800ef1c:	4855      	ldr	r0, [pc, #340]	@ (800f074 <rmw_init+0x240>)
 800ef1e:	220f      	movs	r2, #15
 800ef20:	f000 fe76 	bl	800fc10 <rmw_uxrce_init_topic_memory>
 800ef24:	4954      	ldr	r1, [pc, #336]	@ (800f078 <rmw_init+0x244>)
 800ef26:	4855      	ldr	r0, [pc, #340]	@ (800f07c <rmw_init+0x248>)
 800ef28:	2203      	movs	r2, #3
 800ef2a:	f000 feb1 	bl	800fc90 <rmw_uxrce_init_init_options_impl_memory>
 800ef2e:	4954      	ldr	r1, [pc, #336]	@ (800f080 <rmw_init+0x24c>)
 800ef30:	4854      	ldr	r0, [pc, #336]	@ (800f084 <rmw_init+0x250>)
 800ef32:	2204      	movs	r2, #4
 800ef34:	f000 fecc 	bl	800fcd0 <rmw_uxrce_init_wait_set_memory>
 800ef38:	4953      	ldr	r1, [pc, #332]	@ (800f088 <rmw_init+0x254>)
 800ef3a:	4854      	ldr	r0, [pc, #336]	@ (800f08c <rmw_init+0x258>)
 800ef3c:	2204      	movs	r2, #4
 800ef3e:	f000 fee7 	bl	800fd10 <rmw_uxrce_init_guard_condition_memory>
 800ef42:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ef44:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800ef46:	4642      	mov	r2, r8
 800ef48:	f000 fd8a 	bl	800fa60 <rmw_uxrce_transport_init>
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d158      	bne.n	800f004 <rmw_init+0x1d0>
 800ef52:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ef54:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ef58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ef5a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f002 fa12 	bl	8011388 <uxr_init_session>
 800ef64:	494a      	ldr	r1, [pc, #296]	@ (800f090 <rmw_init+0x25c>)
 800ef66:	4622      	mov	r2, r4
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f002 fa31 	bl	80113d0 <uxr_set_topic_callback>
 800ef6e:	4949      	ldr	r1, [pc, #292]	@ (800f094 <rmw_init+0x260>)
 800ef70:	463a      	mov	r2, r7
 800ef72:	4628      	mov	r0, r5
 800ef74:	f002 fa28 	bl	80113c8 <uxr_set_status_callback>
 800ef78:	4947      	ldr	r1, [pc, #284]	@ (800f098 <rmw_init+0x264>)
 800ef7a:	463a      	mov	r2, r7
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f002 fa2b 	bl	80113d8 <uxr_set_request_callback>
 800ef82:	4946      	ldr	r1, [pc, #280]	@ (800f09c <rmw_init+0x268>)
 800ef84:	463a      	mov	r2, r7
 800ef86:	4628      	mov	r0, r5
 800ef88:	f002 fa2a 	bl	80113e0 <uxr_set_reply_callback>
 800ef8c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ef90:	2304      	movs	r3, #4
 800ef92:	0092      	lsls	r2, r2, #2
 800ef94:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800ef98:	4628      	mov	r0, r5
 800ef9a:	f002 fa5f 	bl	801145c <uxr_create_input_reliable_stream>
 800ef9e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800efa2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800efa6:	0092      	lsls	r2, r2, #2
 800efa8:	2304      	movs	r3, #4
 800efaa:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800efae:	4628      	mov	r0, r5
 800efb0:	f002 fa2c 	bl	801140c <uxr_create_output_reliable_stream>
 800efb4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800efb8:	4628      	mov	r0, r5
 800efba:	f002 fa49 	bl	8011450 <uxr_create_input_best_effort_stream>
 800efbe:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800efc2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800efc6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800efca:	3114      	adds	r1, #20
 800efcc:	4628      	mov	r0, r5
 800efce:	f002 fa0b 	bl	80113e8 <uxr_create_output_best_effort_stream>
 800efd2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800efd6:	4628      	mov	r0, r5
 800efd8:	f002 ff96 	bl	8011f08 <uxr_create_session>
 800efdc:	b1f8      	cbz	r0, 800f01e <rmw_init+0x1ea>
 800efde:	4638      	mov	r0, r7
 800efe0:	b003      	add	sp, #12
 800efe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efe6:	270b      	movs	r7, #11
 800efe8:	4638      	mov	r0, r7
 800efea:	b003      	add	sp, #12
 800efec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff0:	2701      	movs	r7, #1
 800eff2:	4638      	mov	r0, r7
 800eff4:	b003      	add	sp, #12
 800eff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800effa:	270c      	movs	r7, #12
 800effc:	4638      	mov	r0, r7
 800effe:	b003      	add	sp, #12
 800f000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f004:	4648      	mov	r0, r9
 800f006:	f001 ffcb 	bl	8010fa0 <uxr_close_custom_transport>
 800f00a:	480d      	ldr	r0, [pc, #52]	@ (800f040 <rmw_init+0x20c>)
 800f00c:	4621      	mov	r1, r4
 800f00e:	f008 f923 	bl	8017258 <put_memory>
 800f012:	4638      	mov	r0, r7
 800f014:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800f018:	b003      	add	sp, #12
 800f01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f01e:	4648      	mov	r0, r9
 800f020:	f001 ffbe 	bl	8010fa0 <uxr_close_custom_transport>
 800f024:	4806      	ldr	r0, [pc, #24]	@ (800f040 <rmw_init+0x20c>)
 800f026:	4621      	mov	r1, r4
 800f028:	f008 f916 	bl	8017258 <put_memory>
 800f02c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800f02e:	2701      	movs	r7, #1
 800f030:	e7d5      	b.n	800efde <rmw_init+0x1aa>
 800f032:	bf00      	nop
 800f034:	0801b2bc 	.word	0x0801b2bc
 800f038:	2000b6ac 	.word	0x2000b6ac
 800f03c:	20007958 	.word	0x20007958
 800f040:	2000b69c 	.word	0x2000b69c
 800f044:	20008f00 	.word	0x20008f00
 800f048:	20006eb4 	.word	0x20006eb4
 800f04c:	2000b66c 	.word	0x2000b66c
 800f050:	2000b000 	.word	0x2000b000
 800f054:	2000b6bc 	.word	0x2000b6bc
 800f058:	20006f58 	.word	0x20006f58
 800f05c:	2000b67c 	.word	0x2000b67c
 800f060:	200077c8 	.word	0x200077c8
 800f064:	2000b68c 	.word	0x2000b68c
 800f068:	20006a90 	.word	0x20006a90
 800f06c:	20006a80 	.word	0x20006a80
 800f070:	2000b438 	.word	0x2000b438
 800f074:	2000b6cc 	.word	0x2000b6cc
 800f078:	20006e30 	.word	0x20006e30
 800f07c:	2000b65c 	.word	0x2000b65c
 800f080:	2000b5dc 	.word	0x2000b5dc
 800f084:	2000b6dc 	.word	0x2000b6dc
 800f088:	20006db0 	.word	0x20006db0
 800f08c:	2000b64c 	.word	0x2000b64c
 800f090:	08017071 	.word	0x08017071
 800f094:	08017069 	.word	0x08017069
 800f098:	08017109 	.word	0x08017109
 800f09c:	080171a5 	.word	0x080171a5

0800f0a0 <rmw_context_fini>:
 800f0a0:	4b17      	ldr	r3, [pc, #92]	@ (800f100 <rmw_context_fini+0x60>)
 800f0a2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800f0a4:	b570      	push	{r4, r5, r6, lr}
 800f0a6:	681c      	ldr	r4, [r3, #0]
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	b334      	cbz	r4, 800f0fa <rmw_context_fini+0x5a>
 800f0ac:	2600      	movs	r6, #0
 800f0ae:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f0b2:	6902      	ldr	r2, [r0, #16]
 800f0b4:	428a      	cmp	r2, r1
 800f0b6:	d018      	beq.n	800f0ea <rmw_context_fini+0x4a>
 800f0b8:	2c00      	cmp	r4, #0
 800f0ba:	d1f8      	bne.n	800f0ae <rmw_context_fini+0xe>
 800f0bc:	b189      	cbz	r1, 800f0e2 <rmw_context_fini+0x42>
 800f0be:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800f0c2:	789b      	ldrb	r3, [r3, #2]
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800f0ca:	bf14      	ite	ne
 800f0cc:	210a      	movne	r1, #10
 800f0ce:	2100      	moveq	r1, #0
 800f0d0:	f002 fef2 	bl	8011eb8 <uxr_delete_session_retries>
 800f0d4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f0d6:	f000 fe3b 	bl	800fd50 <rmw_uxrce_fini_session_memory>
 800f0da:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800f0dc:	3010      	adds	r0, #16
 800f0de:	f001 ff5f 	bl	8010fa0 <uxr_close_custom_transport>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ea:	3018      	adds	r0, #24
 800f0ec:	f000 f89c 	bl	800f228 <rmw_destroy_node>
 800f0f0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	2c00      	cmp	r4, #0
 800f0f6:	d1da      	bne.n	800f0ae <rmw_context_fini+0xe>
 800f0f8:	e7e0      	b.n	800f0bc <rmw_context_fini+0x1c>
 800f0fa:	4626      	mov	r6, r4
 800f0fc:	e7de      	b.n	800f0bc <rmw_context_fini+0x1c>
 800f0fe:	bf00      	nop
 800f100:	2000b66c 	.word	0x2000b66c

0800f104 <create_node>:
 800f104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f108:	b083      	sub	sp, #12
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d05f      	beq.n	800f1ce <create_node+0xca>
 800f10e:	4606      	mov	r6, r0
 800f110:	4835      	ldr	r0, [pc, #212]	@ (800f1e8 <create_node+0xe4>)
 800f112:	460f      	mov	r7, r1
 800f114:	4690      	mov	r8, r2
 800f116:	461d      	mov	r5, r3
 800f118:	f008 f88e 	bl	8017238 <get_memory>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d056      	beq.n	800f1ce <create_node+0xca>
 800f120:	6884      	ldr	r4, [r0, #8]
 800f122:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f124:	6123      	str	r3, [r4, #16]
 800f126:	f7ff fd87 	bl	800ec38 <rmw_get_implementation_identifier>
 800f12a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f12e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f132:	f8c4 9020 	str.w	r9, [r4, #32]
 800f136:	4630      	mov	r0, r6
 800f138:	f7f1 f87c 	bl	8000234 <strlen>
 800f13c:	1c42      	adds	r2, r0, #1
 800f13e:	2a3c      	cmp	r2, #60	@ 0x3c
 800f140:	f104 0518 	add.w	r5, r4, #24
 800f144:	d840      	bhi.n	800f1c8 <create_node+0xc4>
 800f146:	4648      	mov	r0, r9
 800f148:	4631      	mov	r1, r6
 800f14a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f14e:	f009 fffa 	bl	8019146 <memcpy>
 800f152:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f156:	4638      	mov	r0, r7
 800f158:	f7f1 f86c 	bl	8000234 <strlen>
 800f15c:	1c42      	adds	r2, r0, #1
 800f15e:	2a3c      	cmp	r2, #60	@ 0x3c
 800f160:	d832      	bhi.n	800f1c8 <create_node+0xc4>
 800f162:	4639      	mov	r1, r7
 800f164:	4648      	mov	r0, r9
 800f166:	f009 ffee 	bl	8019146 <memcpy>
 800f16a:	6923      	ldr	r3, [r4, #16]
 800f16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f170:	2101      	movs	r1, #1
 800f172:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800f176:	1842      	adds	r2, r0, r1
 800f178:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800f17c:	f001 ff14 	bl	8010fa8 <uxr_object_id>
 800f180:	6160      	str	r0, [r4, #20]
 800f182:	783b      	ldrb	r3, [r7, #0]
 800f184:	2b2f      	cmp	r3, #47	@ 0x2f
 800f186:	d127      	bne.n	800f1d8 <create_node+0xd4>
 800f188:	787b      	ldrb	r3, [r7, #1]
 800f18a:	bb2b      	cbnz	r3, 800f1d8 <create_node+0xd4>
 800f18c:	4a17      	ldr	r2, [pc, #92]	@ (800f1ec <create_node+0xe8>)
 800f18e:	4818      	ldr	r0, [pc, #96]	@ (800f1f0 <create_node+0xec>)
 800f190:	4633      	mov	r3, r6
 800f192:	213c      	movs	r1, #60	@ 0x3c
 800f194:	f009 fda0 	bl	8018cd8 <sniprintf>
 800f198:	6920      	ldr	r0, [r4, #16]
 800f19a:	4915      	ldr	r1, [pc, #84]	@ (800f1f0 <create_node+0xec>)
 800f19c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f1a0:	9100      	str	r1, [sp, #0]
 800f1a2:	2106      	movs	r1, #6
 800f1a4:	9101      	str	r1, [sp, #4]
 800f1a6:	6811      	ldr	r1, [r2, #0]
 800f1a8:	6962      	ldr	r2, [r4, #20]
 800f1aa:	fa1f f388 	uxth.w	r3, r8
 800f1ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1b2:	f001 fcef 	bl	8010b94 <uxr_buffer_create_participant_bin>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	6920      	ldr	r0, [r4, #16]
 800f1ba:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f1be:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f1c2:	f000 ff3b 	bl	801003c <run_xrce_session>
 800f1c6:	b918      	cbnz	r0, 800f1d0 <create_node+0xcc>
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f000 fdc7 	bl	800fd5c <rmw_uxrce_fini_node_memory>
 800f1ce:	2500      	movs	r5, #0
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	b003      	add	sp, #12
 800f1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1d8:	4a06      	ldr	r2, [pc, #24]	@ (800f1f4 <create_node+0xf0>)
 800f1da:	9600      	str	r6, [sp, #0]
 800f1dc:	463b      	mov	r3, r7
 800f1de:	213c      	movs	r1, #60	@ 0x3c
 800f1e0:	4803      	ldr	r0, [pc, #12]	@ (800f1f0 <create_node+0xec>)
 800f1e2:	f009 fd79 	bl	8018cd8 <sniprintf>
 800f1e6:	e7d7      	b.n	800f198 <create_node+0x94>
 800f1e8:	2000b66c 	.word	0x2000b66c
 800f1ec:	0801a62c 	.word	0x0801a62c
 800f1f0:	20006a44 	.word	0x20006a44
 800f1f4:	0801a12c 	.word	0x0801a12c

0800f1f8 <rmw_create_node>:
 800f1f8:	b199      	cbz	r1, 800f222 <rmw_create_node+0x2a>
 800f1fa:	780b      	ldrb	r3, [r1, #0]
 800f1fc:	468c      	mov	ip, r1
 800f1fe:	b183      	cbz	r3, 800f222 <rmw_create_node+0x2a>
 800f200:	b410      	push	{r4}
 800f202:	4614      	mov	r4, r2
 800f204:	b14a      	cbz	r2, 800f21a <rmw_create_node+0x22>
 800f206:	7813      	ldrb	r3, [r2, #0]
 800f208:	b13b      	cbz	r3, 800f21a <rmw_create_node+0x22>
 800f20a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f20c:	4603      	mov	r3, r0
 800f20e:	4621      	mov	r1, r4
 800f210:	4660      	mov	r0, ip
 800f212:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f216:	f7ff bf75 	b.w	800f104 <create_node>
 800f21a:	2000      	movs	r0, #0
 800f21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	2000      	movs	r0, #0
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop

0800f228 <rmw_destroy_node>:
 800f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22a:	b328      	cbz	r0, 800f278 <rmw_destroy_node+0x50>
 800f22c:	4607      	mov	r7, r0
 800f22e:	6800      	ldr	r0, [r0, #0]
 800f230:	b120      	cbz	r0, 800f23c <rmw_destroy_node+0x14>
 800f232:	4b36      	ldr	r3, [pc, #216]	@ (800f30c <rmw_destroy_node+0xe4>)
 800f234:	6819      	ldr	r1, [r3, #0]
 800f236:	f7f0 fff3 	bl	8000220 <strcmp>
 800f23a:	b9e8      	cbnz	r0, 800f278 <rmw_destroy_node+0x50>
 800f23c:	687d      	ldr	r5, [r7, #4]
 800f23e:	b1dd      	cbz	r5, 800f278 <rmw_destroy_node+0x50>
 800f240:	4b33      	ldr	r3, [pc, #204]	@ (800f310 <rmw_destroy_node+0xe8>)
 800f242:	681c      	ldr	r4, [r3, #0]
 800f244:	2c00      	cmp	r4, #0
 800f246:	d05f      	beq.n	800f308 <rmw_destroy_node+0xe0>
 800f248:	2600      	movs	r6, #0
 800f24a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f24e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f252:	429d      	cmp	r5, r3
 800f254:	d013      	beq.n	800f27e <rmw_destroy_node+0x56>
 800f256:	2c00      	cmp	r4, #0
 800f258:	d1f7      	bne.n	800f24a <rmw_destroy_node+0x22>
 800f25a:	4b2e      	ldr	r3, [pc, #184]	@ (800f314 <rmw_destroy_node+0xec>)
 800f25c:	681c      	ldr	r4, [r3, #0]
 800f25e:	b1c4      	cbz	r4, 800f292 <rmw_destroy_node+0x6a>
 800f260:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f264:	6a0b      	ldr	r3, [r1, #32]
 800f266:	429d      	cmp	r5, r3
 800f268:	d1f9      	bne.n	800f25e <rmw_destroy_node+0x36>
 800f26a:	317c      	adds	r1, #124	@ 0x7c
 800f26c:	4638      	mov	r0, r7
 800f26e:	f000 fb97 	bl	800f9a0 <rmw_destroy_subscription>
 800f272:	2801      	cmp	r0, #1
 800f274:	4606      	mov	r6, r0
 800f276:	d1f2      	bne.n	800f25e <rmw_destroy_node+0x36>
 800f278:	2601      	movs	r6, #1
 800f27a:	4630      	mov	r0, r6
 800f27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27e:	3184      	adds	r1, #132	@ 0x84
 800f280:	4638      	mov	r0, r7
 800f282:	f000 f9a5 	bl	800f5d0 <rmw_destroy_publisher>
 800f286:	2801      	cmp	r0, #1
 800f288:	4606      	mov	r6, r0
 800f28a:	d0f5      	beq.n	800f278 <rmw_destroy_node+0x50>
 800f28c:	2c00      	cmp	r4, #0
 800f28e:	d1dc      	bne.n	800f24a <rmw_destroy_node+0x22>
 800f290:	e7e3      	b.n	800f25a <rmw_destroy_node+0x32>
 800f292:	4b21      	ldr	r3, [pc, #132]	@ (800f318 <rmw_destroy_node+0xf0>)
 800f294:	681c      	ldr	r4, [r3, #0]
 800f296:	b16c      	cbz	r4, 800f2b4 <rmw_destroy_node+0x8c>
 800f298:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f29c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f29e:	429d      	cmp	r5, r3
 800f2a0:	d1f9      	bne.n	800f296 <rmw_destroy_node+0x6e>
 800f2a2:	317c      	adds	r1, #124	@ 0x7c
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	f000 fb37 	bl	800f918 <rmw_destroy_service>
 800f2aa:	2801      	cmp	r0, #1
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	d0e3      	beq.n	800f278 <rmw_destroy_node+0x50>
 800f2b0:	2c00      	cmp	r4, #0
 800f2b2:	d1f1      	bne.n	800f298 <rmw_destroy_node+0x70>
 800f2b4:	4b19      	ldr	r3, [pc, #100]	@ (800f31c <rmw_destroy_node+0xf4>)
 800f2b6:	681c      	ldr	r4, [r3, #0]
 800f2b8:	b16c      	cbz	r4, 800f2d6 <rmw_destroy_node+0xae>
 800f2ba:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f2be:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f2c0:	429d      	cmp	r5, r3
 800f2c2:	d1f9      	bne.n	800f2b8 <rmw_destroy_node+0x90>
 800f2c4:	317c      	adds	r1, #124	@ 0x7c
 800f2c6:	4638      	mov	r0, r7
 800f2c8:	f7ff fc52 	bl	800eb70 <rmw_destroy_client>
 800f2cc:	2801      	cmp	r0, #1
 800f2ce:	4606      	mov	r6, r0
 800f2d0:	d0d2      	beq.n	800f278 <rmw_destroy_node+0x50>
 800f2d2:	2c00      	cmp	r4, #0
 800f2d4:	d1f1      	bne.n	800f2ba <rmw_destroy_node+0x92>
 800f2d6:	6928      	ldr	r0, [r5, #16]
 800f2d8:	696a      	ldr	r2, [r5, #20]
 800f2da:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f2de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f2e2:	6819      	ldr	r1, [r3, #0]
 800f2e4:	f001 fc0a 	bl	8010afc <uxr_buffer_delete_entity>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	6928      	ldr	r0, [r5, #16]
 800f2ec:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f2f0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f2f4:	f000 fea2 	bl	801003c <run_xrce_session>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	bf08      	it	eq
 800f2fc:	2602      	moveq	r6, #2
 800f2fe:	4638      	mov	r0, r7
 800f300:	f000 fd2c 	bl	800fd5c <rmw_uxrce_fini_node_memory>
 800f304:	4630      	mov	r0, r6
 800f306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f308:	4626      	mov	r6, r4
 800f30a:	e7a6      	b.n	800f25a <rmw_destroy_node+0x32>
 800f30c:	0801b2bc 	.word	0x0801b2bc
 800f310:	2000b67c 	.word	0x2000b67c
 800f314:	2000b6bc 	.word	0x2000b6bc
 800f318:	2000b68c 	.word	0x2000b68c
 800f31c:	20006a80 	.word	0x20006a80

0800f320 <rmw_node_get_graph_guard_condition>:
 800f320:	6843      	ldr	r3, [r0, #4]
 800f322:	6918      	ldr	r0, [r3, #16]
 800f324:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop

0800f32c <flush_session>:
 800f32c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f32e:	f002 bc7b 	b.w	8011c28 <uxr_run_session_until_confirm_delivery>
 800f332:	bf00      	nop

0800f334 <rmw_publish>:
 800f334:	2800      	cmp	r0, #0
 800f336:	d053      	beq.n	800f3e0 <rmw_publish+0xac>
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	460d      	mov	r5, r1
 800f33c:	b08e      	sub	sp, #56	@ 0x38
 800f33e:	2900      	cmp	r1, #0
 800f340:	d04b      	beq.n	800f3da <rmw_publish+0xa6>
 800f342:	4604      	mov	r4, r0
 800f344:	6800      	ldr	r0, [r0, #0]
 800f346:	f000 ff93 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d045      	beq.n	800f3da <rmw_publish+0xa6>
 800f34e:	6866      	ldr	r6, [r4, #4]
 800f350:	2e00      	cmp	r6, #0
 800f352:	d042      	beq.n	800f3da <rmw_publish+0xa6>
 800f354:	69b4      	ldr	r4, [r6, #24]
 800f356:	4628      	mov	r0, r5
 800f358:	6923      	ldr	r3, [r4, #16]
 800f35a:	4798      	blx	r3
 800f35c:	69f3      	ldr	r3, [r6, #28]
 800f35e:	9005      	str	r0, [sp, #20]
 800f360:	b113      	cbz	r3, 800f368 <rmw_publish+0x34>
 800f362:	a805      	add	r0, sp, #20
 800f364:	4798      	blx	r3
 800f366:	9805      	ldr	r0, [sp, #20]
 800f368:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f36c:	691b      	ldr	r3, [r3, #16]
 800f36e:	9000      	str	r0, [sp, #0]
 800f370:	6972      	ldr	r2, [r6, #20]
 800f372:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f374:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f378:	ab06      	add	r3, sp, #24
 800f37a:	f003 fed3 	bl	8013124 <uxr_prepare_output_stream>
 800f37e:	b1d8      	cbz	r0, 800f3b8 <rmw_publish+0x84>
 800f380:	68a3      	ldr	r3, [r4, #8]
 800f382:	a906      	add	r1, sp, #24
 800f384:	4628      	mov	r0, r5
 800f386:	4798      	blx	r3
 800f388:	6a33      	ldr	r3, [r6, #32]
 800f38a:	4604      	mov	r4, r0
 800f38c:	b10b      	cbz	r3, 800f392 <rmw_publish+0x5e>
 800f38e:	a806      	add	r0, sp, #24
 800f390:	4798      	blx	r3
 800f392:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f396:	2b01      	cmp	r3, #1
 800f398:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f39c:	d022      	beq.n	800f3e4 <rmw_publish+0xb0>
 800f39e:	6918      	ldr	r0, [r3, #16]
 800f3a0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f3a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3a6:	f002 fc3f 	bl	8011c28 <uxr_run_session_until_confirm_delivery>
 800f3aa:	4020      	ands	r0, r4
 800f3ac:	b2c4      	uxtb	r4, r0
 800f3ae:	f084 0001 	eor.w	r0, r4, #1
 800f3b2:	b2c0      	uxtb	r0, r0
 800f3b4:	b00e      	add	sp, #56	@ 0x38
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f3bc:	6918      	ldr	r0, [r3, #16]
 800f3be:	9b05      	ldr	r3, [sp, #20]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f3f0 <rmw_publish+0xbc>)
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	9602      	str	r6, [sp, #8]
 800f3c8:	6972      	ldr	r2, [r6, #20]
 800f3ca:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f3cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3d0:	ab06      	add	r3, sp, #24
 800f3d2:	f003 fed7 	bl	8013184 <uxr_prepare_output_stream_fragmented>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d1d2      	bne.n	800f380 <rmw_publish+0x4c>
 800f3da:	2001      	movs	r0, #1
 800f3dc:	b00e      	add	sp, #56	@ 0x38
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	2001      	movs	r0, #1
 800f3e2:	4770      	bx	lr
 800f3e4:	6918      	ldr	r0, [r3, #16]
 800f3e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f3ea:	f002 f85d 	bl	80114a8 <uxr_flash_output_streams>
 800f3ee:	e7de      	b.n	800f3ae <rmw_publish+0x7a>
 800f3f0:	0800f32d 	.word	0x0800f32d

0800f3f4 <rmw_create_publisher>:
 800f3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f8:	b087      	sub	sp, #28
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	f000 80cc 	beq.w	800f598 <rmw_create_publisher+0x1a4>
 800f400:	460e      	mov	r6, r1
 800f402:	2900      	cmp	r1, #0
 800f404:	f000 80c8 	beq.w	800f598 <rmw_create_publisher+0x1a4>
 800f408:	4604      	mov	r4, r0
 800f40a:	6800      	ldr	r0, [r0, #0]
 800f40c:	4615      	mov	r5, r2
 800f40e:	4698      	mov	r8, r3
 800f410:	f000 ff2e 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f414:	2800      	cmp	r0, #0
 800f416:	f000 80bf 	beq.w	800f598 <rmw_create_publisher+0x1a4>
 800f41a:	2d00      	cmp	r5, #0
 800f41c:	f000 80bc 	beq.w	800f598 <rmw_create_publisher+0x1a4>
 800f420:	782b      	ldrb	r3, [r5, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	f000 80b8 	beq.w	800f598 <rmw_create_publisher+0x1a4>
 800f428:	f1b8 0f00 	cmp.w	r8, #0
 800f42c:	f000 80b4 	beq.w	800f598 <rmw_create_publisher+0x1a4>
 800f430:	485c      	ldr	r0, [pc, #368]	@ (800f5a4 <rmw_create_publisher+0x1b0>)
 800f432:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f436:	f007 feff 	bl	8017238 <get_memory>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	f000 80ac 	beq.w	800f598 <rmw_create_publisher+0x1a4>
 800f440:	6884      	ldr	r4, [r0, #8]
 800f442:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f446:	f7ff fbf7 	bl	800ec38 <rmw_get_implementation_identifier>
 800f44a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f44e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f452:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f456:	4628      	mov	r0, r5
 800f458:	f7f0 feec 	bl	8000234 <strlen>
 800f45c:	3001      	adds	r0, #1
 800f45e:	283c      	cmp	r0, #60	@ 0x3c
 800f460:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800f464:	f200 8091 	bhi.w	800f58a <rmw_create_publisher+0x196>
 800f468:	4a4f      	ldr	r2, [pc, #316]	@ (800f5a8 <rmw_create_publisher+0x1b4>)
 800f46a:	462b      	mov	r3, r5
 800f46c:	213c      	movs	r1, #60	@ 0x3c
 800f46e:	4650      	mov	r0, sl
 800f470:	f009 fc32 	bl	8018cd8 <sniprintf>
 800f474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f478:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f47a:	4641      	mov	r1, r8
 800f47c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f480:	2250      	movs	r2, #80	@ 0x50
 800f482:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f486:	f009 fe5e 	bl	8019146 <memcpy>
 800f48a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f48e:	4947      	ldr	r1, [pc, #284]	@ (800f5ac <rmw_create_publisher+0x1b8>)
 800f490:	2b02      	cmp	r3, #2
 800f492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f496:	bf0c      	ite	eq
 800f498:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f49c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f4a0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f000 feef 	bl	801028c <get_message_typesupport_handle>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d06b      	beq.n	800f58a <rmw_create_publisher+0x196>
 800f4b2:	6842      	ldr	r2, [r0, #4]
 800f4b4:	61a2      	str	r2, [r4, #24]
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	d067      	beq.n	800f58a <rmw_create_publisher+0x196>
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	4643      	mov	r3, r8
 800f4be:	4648      	mov	r0, r9
 800f4c0:	f007 ff06 	bl	80172d0 <create_topic>
 800f4c4:	6260      	str	r0, [r4, #36]	@ 0x24
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d063      	beq.n	800f592 <rmw_create_publisher+0x19e>
 800f4ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f4d2:	2103      	movs	r1, #3
 800f4d4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f4d8:	1c42      	adds	r2, r0, #1
 800f4da:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f4de:	f001 fd63 	bl	8010fa8 <uxr_object_id>
 800f4e2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f4e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4ea:	6120      	str	r0, [r4, #16]
 800f4ec:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f4f0:	6910      	ldr	r0, [r2, #16]
 800f4f2:	2506      	movs	r5, #6
 800f4f4:	9500      	str	r5, [sp, #0]
 800f4f6:	6819      	ldr	r1, [r3, #0]
 800f4f8:	6922      	ldr	r2, [r4, #16]
 800f4fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f4fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f502:	f001 fbaf 	bl	8010c64 <uxr_buffer_create_publisher_bin>
 800f506:	4602      	mov	r2, r0
 800f508:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f50c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f510:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f514:	f000 fd92 	bl	801003c <run_xrce_session>
 800f518:	b3b8      	cbz	r0, 800f58a <rmw_create_publisher+0x196>
 800f51a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f51e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f522:	2105      	movs	r1, #5
 800f524:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f528:	1c42      	adds	r2, r0, #1
 800f52a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f52e:	f001 fd3b 	bl	8010fa8 <uxr_object_id>
 800f532:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f536:	6160      	str	r0, [r4, #20]
 800f538:	691e      	ldr	r6, [r3, #16]
 800f53a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f53e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f542:	f10d 0a10 	add.w	sl, sp, #16
 800f546:	4641      	mov	r1, r8
 800f548:	4650      	mov	r0, sl
 800f54a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800f54e:	f000 fd91 	bl	8010074 <convert_qos_profile>
 800f552:	9503      	str	r5, [sp, #12]
 800f554:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f558:	9001      	str	r0, [sp, #4]
 800f55a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f55e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f568:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f56c:	f8d8 1000 	ldr.w	r1, [r8]
 800f570:	4630      	mov	r0, r6
 800f572:	f001 fba7 	bl	8010cc4 <uxr_buffer_create_datawriter_bin>
 800f576:	4602      	mov	r2, r0
 800f578:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f57c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f580:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f584:	f000 fd5a 	bl	801003c <run_xrce_session>
 800f588:	b938      	cbnz	r0, 800f59a <rmw_create_publisher+0x1a6>
 800f58a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f58c:	b108      	cbz	r0, 800f592 <rmw_create_publisher+0x19e>
 800f58e:	f000 fc55 	bl	800fe3c <rmw_uxrce_fini_topic_memory>
 800f592:	4638      	mov	r0, r7
 800f594:	f000 fbfa 	bl	800fd8c <rmw_uxrce_fini_publisher_memory>
 800f598:	2700      	movs	r7, #0
 800f59a:	4638      	mov	r0, r7
 800f59c:	b007      	add	sp, #28
 800f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a2:	bf00      	nop
 800f5a4:	2000b67c 	.word	0x2000b67c
 800f5a8:	0801a62c 	.word	0x0801a62c
 800f5ac:	08019ff8 	.word	0x08019ff8

0800f5b0 <rmw_publisher_get_actual_qos>:
 800f5b0:	b150      	cbz	r0, 800f5c8 <rmw_publisher_get_actual_qos+0x18>
 800f5b2:	b508      	push	{r3, lr}
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	b149      	cbz	r1, 800f5cc <rmw_publisher_get_actual_qos+0x1c>
 800f5b8:	6841      	ldr	r1, [r0, #4]
 800f5ba:	2250      	movs	r2, #80	@ 0x50
 800f5bc:	3128      	adds	r1, #40	@ 0x28
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f009 fdc1 	bl	8019146 <memcpy>
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	bd08      	pop	{r3, pc}
 800f5c8:	200b      	movs	r0, #11
 800f5ca:	4770      	bx	lr
 800f5cc:	200b      	movs	r0, #11
 800f5ce:	bd08      	pop	{r3, pc}

0800f5d0 <rmw_destroy_publisher>:
 800f5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d2:	b128      	cbz	r0, 800f5e0 <rmw_destroy_publisher+0x10>
 800f5d4:	4604      	mov	r4, r0
 800f5d6:	6800      	ldr	r0, [r0, #0]
 800f5d8:	460d      	mov	r5, r1
 800f5da:	f000 fe49 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f5de:	b910      	cbnz	r0, 800f5e6 <rmw_destroy_publisher+0x16>
 800f5e0:	2401      	movs	r4, #1
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5e6:	6863      	ldr	r3, [r4, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d0f9      	beq.n	800f5e0 <rmw_destroy_publisher+0x10>
 800f5ec:	2d00      	cmp	r5, #0
 800f5ee:	d0f7      	beq.n	800f5e0 <rmw_destroy_publisher+0x10>
 800f5f0:	6828      	ldr	r0, [r5, #0]
 800f5f2:	f000 fe3d 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d0f2      	beq.n	800f5e0 <rmw_destroy_publisher+0x10>
 800f5fa:	686c      	ldr	r4, [r5, #4]
 800f5fc:	2c00      	cmp	r4, #0
 800f5fe:	d0ef      	beq.n	800f5e0 <rmw_destroy_publisher+0x10>
 800f600:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f602:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800f606:	f007 feb3 	bl	8017370 <destroy_topic>
 800f60a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f60e:	6962      	ldr	r2, [r4, #20]
 800f610:	6918      	ldr	r0, [r3, #16]
 800f612:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f616:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f61a:	6819      	ldr	r1, [r3, #0]
 800f61c:	f001 fa6e 	bl	8010afc <uxr_buffer_delete_entity>
 800f620:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f624:	6922      	ldr	r2, [r4, #16]
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f62c:	4604      	mov	r4, r0
 800f62e:	6809      	ldr	r1, [r1, #0]
 800f630:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f634:	f001 fa62 	bl	8010afc <uxr_buffer_delete_entity>
 800f638:	693e      	ldr	r6, [r7, #16]
 800f63a:	4622      	mov	r2, r4
 800f63c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f640:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f644:	4604      	mov	r4, r0
 800f646:	4630      	mov	r0, r6
 800f648:	f000 fcf8 	bl	801003c <run_xrce_session>
 800f64c:	693e      	ldr	r6, [r7, #16]
 800f64e:	4622      	mov	r2, r4
 800f650:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f654:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f658:	4604      	mov	r4, r0
 800f65a:	4630      	mov	r0, r6
 800f65c:	f000 fcee 	bl	801003c <run_xrce_session>
 800f660:	b12c      	cbz	r4, 800f66e <rmw_destroy_publisher+0x9e>
 800f662:	b120      	cbz	r0, 800f66e <rmw_destroy_publisher+0x9e>
 800f664:	2400      	movs	r4, #0
 800f666:	4628      	mov	r0, r5
 800f668:	f000 fb90 	bl	800fd8c <rmw_uxrce_fini_publisher_memory>
 800f66c:	e7b9      	b.n	800f5e2 <rmw_destroy_publisher+0x12>
 800f66e:	2402      	movs	r4, #2
 800f670:	e7f9      	b.n	800f666 <rmw_destroy_publisher+0x96>
 800f672:	bf00      	nop

0800f674 <rmw_send_request>:
 800f674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f678:	4604      	mov	r4, r0
 800f67a:	6800      	ldr	r0, [r0, #0]
 800f67c:	b08b      	sub	sp, #44	@ 0x2c
 800f67e:	460e      	mov	r6, r1
 800f680:	4615      	mov	r5, r2
 800f682:	b128      	cbz	r0, 800f690 <rmw_send_request+0x1c>
 800f684:	4b21      	ldr	r3, [pc, #132]	@ (800f70c <rmw_send_request+0x98>)
 800f686:	6819      	ldr	r1, [r3, #0]
 800f688:	f7f0 fdca 	bl	8000220 <strcmp>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d139      	bne.n	800f704 <rmw_send_request+0x90>
 800f690:	6864      	ldr	r4, [r4, #4]
 800f692:	6963      	ldr	r3, [r4, #20]
 800f694:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800f698:	689b      	ldr	r3, [r3, #8]
 800f69a:	4798      	blx	r3
 800f69c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6a6:	4798      	blx	r3
 800f6a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f6ac:	9000      	str	r0, [sp, #0]
 800f6ae:	6922      	ldr	r2, [r4, #16]
 800f6b0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800f6b2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f6b6:	ab02      	add	r3, sp, #8
 800f6b8:	f003 fd34 	bl	8013124 <uxr_prepare_output_stream>
 800f6bc:	2700      	movs	r7, #0
 800f6be:	6028      	str	r0, [r5, #0]
 800f6c0:	606f      	str	r7, [r5, #4]
 800f6c2:	b198      	cbz	r0, 800f6ec <rmw_send_request+0x78>
 800f6c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f6c8:	a902      	add	r1, sp, #8
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	4798      	blx	r3
 800f6ce:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800f6d2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d00c      	beq.n	800f6f4 <rmw_send_request+0x80>
 800f6da:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800f6dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6e0:	f002 faa2 	bl	8011c28 <uxr_run_session_until_confirm_delivery>
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	b00b      	add	sp, #44	@ 0x2c
 800f6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ec:	2001      	movs	r0, #1
 800f6ee:	b00b      	add	sp, #44	@ 0x2c
 800f6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6f8:	f001 fed6 	bl	80114a8 <uxr_flash_output_streams>
 800f6fc:	4638      	mov	r0, r7
 800f6fe:	b00b      	add	sp, #44	@ 0x2c
 800f700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f704:	200c      	movs	r0, #12
 800f706:	b00b      	add	sp, #44	@ 0x2c
 800f708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f70c:	0801b2bc 	.word	0x0801b2bc

0800f710 <rmw_take_request>:
 800f710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f714:	4605      	mov	r5, r0
 800f716:	6800      	ldr	r0, [r0, #0]
 800f718:	b089      	sub	sp, #36	@ 0x24
 800f71a:	460c      	mov	r4, r1
 800f71c:	4690      	mov	r8, r2
 800f71e:	461e      	mov	r6, r3
 800f720:	b128      	cbz	r0, 800f72e <rmw_take_request+0x1e>
 800f722:	4b28      	ldr	r3, [pc, #160]	@ (800f7c4 <rmw_take_request+0xb4>)
 800f724:	6819      	ldr	r1, [r3, #0]
 800f726:	f7f0 fd7b 	bl	8000220 <strcmp>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d146      	bne.n	800f7bc <rmw_take_request+0xac>
 800f72e:	b10e      	cbz	r6, 800f734 <rmw_take_request+0x24>
 800f730:	2300      	movs	r3, #0
 800f732:	7033      	strb	r3, [r6, #0]
 800f734:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f738:	f000 fc02 	bl	800ff40 <rmw_uxrce_clean_expired_static_input_buffer>
 800f73c:	4648      	mov	r0, r9
 800f73e:	f000 fbd9 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f742:	4607      	mov	r7, r0
 800f744:	b3b0      	cbz	r0, 800f7b4 <rmw_take_request+0xa4>
 800f746:	6885      	ldr	r5, [r0, #8]
 800f748:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800f74c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800f750:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f754:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800f758:	7423      	strb	r3, [r4, #16]
 800f75a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800f75e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800f762:	74e2      	strb	r2, [r4, #19]
 800f764:	f8a4 3011 	strh.w	r3, [r4, #17]
 800f768:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800f76c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800f770:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800f774:	61e1      	str	r1, [r4, #28]
 800f776:	6162      	str	r2, [r4, #20]
 800f778:	61a3      	str	r3, [r4, #24]
 800f77a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	4798      	blx	r3
 800f782:	6844      	ldr	r4, [r0, #4]
 800f784:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800f788:	f105 0110 	add.w	r1, r5, #16
 800f78c:	4668      	mov	r0, sp
 800f78e:	f7fc fe5f 	bl	800c450 <ucdr_init_buffer>
 800f792:	68e3      	ldr	r3, [r4, #12]
 800f794:	4641      	mov	r1, r8
 800f796:	4668      	mov	r0, sp
 800f798:	4798      	blx	r3
 800f79a:	4639      	mov	r1, r7
 800f79c:	4604      	mov	r4, r0
 800f79e:	480a      	ldr	r0, [pc, #40]	@ (800f7c8 <rmw_take_request+0xb8>)
 800f7a0:	f007 fd5a 	bl	8017258 <put_memory>
 800f7a4:	b106      	cbz	r6, 800f7a8 <rmw_take_request+0x98>
 800f7a6:	7034      	strb	r4, [r6, #0]
 800f7a8:	f084 0001 	eor.w	r0, r4, #1
 800f7ac:	b2c0      	uxtb	r0, r0
 800f7ae:	b009      	add	sp, #36	@ 0x24
 800f7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b4:	2001      	movs	r0, #1
 800f7b6:	b009      	add	sp, #36	@ 0x24
 800f7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7bc:	200c      	movs	r0, #12
 800f7be:	b009      	add	sp, #36	@ 0x24
 800f7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c4:	0801b2bc 	.word	0x0801b2bc
 800f7c8:	2000b6ac 	.word	0x2000b6ac

0800f7cc <rmw_send_response>:
 800f7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	6800      	ldr	r0, [r0, #0]
 800f7d2:	b091      	sub	sp, #68	@ 0x44
 800f7d4:	460c      	mov	r4, r1
 800f7d6:	4616      	mov	r6, r2
 800f7d8:	b128      	cbz	r0, 800f7e6 <rmw_send_response+0x1a>
 800f7da:	4b29      	ldr	r3, [pc, #164]	@ (800f880 <rmw_send_response+0xb4>)
 800f7dc:	6819      	ldr	r1, [r3, #0]
 800f7de:	f7f0 fd1f 	bl	8000220 <strcmp>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d141      	bne.n	800f86a <rmw_send_response+0x9e>
 800f7e6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f7ea:	9306      	str	r3, [sp, #24]
 800f7ec:	4623      	mov	r3, r4
 800f7ee:	9207      	str	r2, [sp, #28]
 800f7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7f4:	686d      	ldr	r5, [r5, #4]
 800f7f6:	789b      	ldrb	r3, [r3, #2]
 800f7f8:	68a1      	ldr	r1, [r4, #8]
 800f7fa:	f88d 2017 	strb.w	r2, [sp, #23]
 800f7fe:	f88d 3016 	strb.w	r3, [sp, #22]
 800f802:	68e2      	ldr	r2, [r4, #12]
 800f804:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800f808:	6860      	ldr	r0, [r4, #4]
 800f80a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f80e:	ab02      	add	r3, sp, #8
 800f810:	c307      	stmia	r3!, {r0, r1, r2}
 800f812:	696b      	ldr	r3, [r5, #20]
 800f814:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	4798      	blx	r3
 800f81a:	6844      	ldr	r4, [r0, #4]
 800f81c:	4630      	mov	r0, r6
 800f81e:	6923      	ldr	r3, [r4, #16]
 800f820:	4798      	blx	r3
 800f822:	f100 0318 	add.w	r3, r0, #24
 800f826:	6938      	ldr	r0, [r7, #16]
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	692a      	ldr	r2, [r5, #16]
 800f82c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800f82e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f832:	ab08      	add	r3, sp, #32
 800f834:	f003 fc76 	bl	8013124 <uxr_prepare_output_stream>
 800f838:	b910      	cbnz	r0, 800f840 <rmw_send_response+0x74>
 800f83a:	2001      	movs	r0, #1
 800f83c:	b011      	add	sp, #68	@ 0x44
 800f83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f840:	a902      	add	r1, sp, #8
 800f842:	a808      	add	r0, sp, #32
 800f844:	f004 fcee 	bl	8014224 <uxr_serialize_SampleIdentity>
 800f848:	68a3      	ldr	r3, [r4, #8]
 800f84a:	a908      	add	r1, sp, #32
 800f84c:	4630      	mov	r0, r6
 800f84e:	4798      	blx	r3
 800f850:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800f854:	6938      	ldr	r0, [r7, #16]
 800f856:	2b01      	cmp	r3, #1
 800f858:	d00a      	beq.n	800f870 <rmw_send_response+0xa4>
 800f85a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800f85c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f860:	f002 f9e2 	bl	8011c28 <uxr_run_session_until_confirm_delivery>
 800f864:	2000      	movs	r0, #0
 800f866:	b011      	add	sp, #68	@ 0x44
 800f868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f86a:	200c      	movs	r0, #12
 800f86c:	b011      	add	sp, #68	@ 0x44
 800f86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f870:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f874:	f001 fe18 	bl	80114a8 <uxr_flash_output_streams>
 800f878:	2000      	movs	r0, #0
 800f87a:	b011      	add	sp, #68	@ 0x44
 800f87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f87e:	bf00      	nop
 800f880:	0801b2bc 	.word	0x0801b2bc

0800f884 <rmw_take_response>:
 800f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f888:	4604      	mov	r4, r0
 800f88a:	6800      	ldr	r0, [r0, #0]
 800f88c:	b088      	sub	sp, #32
 800f88e:	4688      	mov	r8, r1
 800f890:	4617      	mov	r7, r2
 800f892:	461d      	mov	r5, r3
 800f894:	b120      	cbz	r0, 800f8a0 <rmw_take_response+0x1c>
 800f896:	4b1e      	ldr	r3, [pc, #120]	@ (800f910 <rmw_take_response+0x8c>)
 800f898:	6819      	ldr	r1, [r3, #0]
 800f89a:	f7f0 fcc1 	bl	8000220 <strcmp>
 800f89e:	bb78      	cbnz	r0, 800f900 <rmw_take_response+0x7c>
 800f8a0:	b10d      	cbz	r5, 800f8a6 <rmw_take_response+0x22>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	702b      	strb	r3, [r5, #0]
 800f8a6:	6864      	ldr	r4, [r4, #4]
 800f8a8:	f000 fb4a 	bl	800ff40 <rmw_uxrce_clean_expired_static_input_buffer>
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f000 fb21 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 800f8b2:	4606      	mov	r6, r0
 800f8b4:	b340      	cbz	r0, 800f908 <rmw_take_response+0x84>
 800f8b6:	6963      	ldr	r3, [r4, #20]
 800f8b8:	6884      	ldr	r4, [r0, #8]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800f8c0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800f8c4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800f8c8:	4798      	blx	r3
 800f8ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f8ce:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800f8d2:	f104 0110 	add.w	r1, r4, #16
 800f8d6:	4668      	mov	r0, sp
 800f8d8:	f7fc fdba 	bl	800c450 <ucdr_init_buffer>
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8e2:	4668      	mov	r0, sp
 800f8e4:	4798      	blx	r3
 800f8e6:	4631      	mov	r1, r6
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	480a      	ldr	r0, [pc, #40]	@ (800f914 <rmw_take_response+0x90>)
 800f8ec:	f007 fcb4 	bl	8017258 <put_memory>
 800f8f0:	b105      	cbz	r5, 800f8f4 <rmw_take_response+0x70>
 800f8f2:	702c      	strb	r4, [r5, #0]
 800f8f4:	f084 0001 	eor.w	r0, r4, #1
 800f8f8:	b2c0      	uxtb	r0, r0
 800f8fa:	b008      	add	sp, #32
 800f8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f900:	200c      	movs	r0, #12
 800f902:	b008      	add	sp, #32
 800f904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f908:	2001      	movs	r0, #1
 800f90a:	b008      	add	sp, #32
 800f90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f910:	0801b2bc 	.word	0x0801b2bc
 800f914:	2000b6ac 	.word	0x2000b6ac

0800f918 <rmw_destroy_service>:
 800f918:	b570      	push	{r4, r5, r6, lr}
 800f91a:	b128      	cbz	r0, 800f928 <rmw_destroy_service+0x10>
 800f91c:	4604      	mov	r4, r0
 800f91e:	6800      	ldr	r0, [r0, #0]
 800f920:	460d      	mov	r5, r1
 800f922:	f000 fca5 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f926:	b910      	cbnz	r0, 800f92e <rmw_destroy_service+0x16>
 800f928:	2401      	movs	r4, #1
 800f92a:	4620      	mov	r0, r4
 800f92c:	bd70      	pop	{r4, r5, r6, pc}
 800f92e:	6863      	ldr	r3, [r4, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d0f9      	beq.n	800f928 <rmw_destroy_service+0x10>
 800f934:	2d00      	cmp	r5, #0
 800f936:	d0f7      	beq.n	800f928 <rmw_destroy_service+0x10>
 800f938:	6828      	ldr	r0, [r5, #0]
 800f93a:	f000 fc99 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f93e:	2800      	cmp	r0, #0
 800f940:	d0f2      	beq.n	800f928 <rmw_destroy_service+0x10>
 800f942:	686e      	ldr	r6, [r5, #4]
 800f944:	2e00      	cmp	r6, #0
 800f946:	d0ef      	beq.n	800f928 <rmw_destroy_service+0x10>
 800f948:	6864      	ldr	r4, [r4, #4]
 800f94a:	6932      	ldr	r2, [r6, #16]
 800f94c:	6920      	ldr	r0, [r4, #16]
 800f94e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f952:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f956:	6819      	ldr	r1, [r3, #0]
 800f958:	f001 fb90 	bl	801107c <uxr_buffer_cancel_data>
 800f95c:	4602      	mov	r2, r0
 800f95e:	6920      	ldr	r0, [r4, #16]
 800f960:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f964:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f968:	f000 fb68 	bl	801003c <run_xrce_session>
 800f96c:	6920      	ldr	r0, [r4, #16]
 800f96e:	6932      	ldr	r2, [r6, #16]
 800f970:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f974:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f978:	6819      	ldr	r1, [r3, #0]
 800f97a:	f001 f8bf 	bl	8010afc <uxr_buffer_delete_entity>
 800f97e:	4602      	mov	r2, r0
 800f980:	6920      	ldr	r0, [r4, #16]
 800f982:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f986:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f98a:	f000 fb57 	bl	801003c <run_xrce_session>
 800f98e:	2800      	cmp	r0, #0
 800f990:	4628      	mov	r0, r5
 800f992:	bf14      	ite	ne
 800f994:	2400      	movne	r4, #0
 800f996:	2402      	moveq	r4, #2
 800f998:	f000 fa24 	bl	800fde4 <rmw_uxrce_fini_service_memory>
 800f99c:	e7c5      	b.n	800f92a <rmw_destroy_service+0x12>
 800f99e:	bf00      	nop

0800f9a0 <rmw_destroy_subscription>:
 800f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a2:	b128      	cbz	r0, 800f9b0 <rmw_destroy_subscription+0x10>
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	6800      	ldr	r0, [r0, #0]
 800f9a8:	460d      	mov	r5, r1
 800f9aa:	f000 fc61 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f9ae:	b910      	cbnz	r0, 800f9b6 <rmw_destroy_subscription+0x16>
 800f9b0:	2401      	movs	r4, #1
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9b6:	6863      	ldr	r3, [r4, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d0f9      	beq.n	800f9b0 <rmw_destroy_subscription+0x10>
 800f9bc:	2d00      	cmp	r5, #0
 800f9be:	d0f7      	beq.n	800f9b0 <rmw_destroy_subscription+0x10>
 800f9c0:	6828      	ldr	r0, [r5, #0]
 800f9c2:	f000 fc55 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d0f2      	beq.n	800f9b0 <rmw_destroy_subscription+0x10>
 800f9ca:	686c      	ldr	r4, [r5, #4]
 800f9cc:	2c00      	cmp	r4, #0
 800f9ce:	d0ef      	beq.n	800f9b0 <rmw_destroy_subscription+0x10>
 800f9d0:	6a26      	ldr	r6, [r4, #32]
 800f9d2:	6962      	ldr	r2, [r4, #20]
 800f9d4:	6930      	ldr	r0, [r6, #16]
 800f9d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f9da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f9de:	6819      	ldr	r1, [r3, #0]
 800f9e0:	f001 fb4c 	bl	801107c <uxr_buffer_cancel_data>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	6930      	ldr	r0, [r6, #16]
 800f9e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f9ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f9f0:	f000 fb24 	bl	801003c <run_xrce_session>
 800f9f4:	69e0      	ldr	r0, [r4, #28]
 800f9f6:	f007 fcbb 	bl	8017370 <destroy_topic>
 800f9fa:	6a23      	ldr	r3, [r4, #32]
 800f9fc:	6962      	ldr	r2, [r4, #20]
 800f9fe:	6918      	ldr	r0, [r3, #16]
 800fa00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa08:	6819      	ldr	r1, [r3, #0]
 800fa0a:	f001 f877 	bl	8010afc <uxr_buffer_delete_entity>
 800fa0e:	6a23      	ldr	r3, [r4, #32]
 800fa10:	6922      	ldr	r2, [r4, #16]
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800fa18:	4604      	mov	r4, r0
 800fa1a:	6809      	ldr	r1, [r1, #0]
 800fa1c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fa20:	f001 f86c 	bl	8010afc <uxr_buffer_delete_entity>
 800fa24:	6937      	ldr	r7, [r6, #16]
 800fa26:	4622      	mov	r2, r4
 800fa28:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800fa2c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800fa30:	4604      	mov	r4, r0
 800fa32:	4638      	mov	r0, r7
 800fa34:	f000 fb02 	bl	801003c <run_xrce_session>
 800fa38:	6936      	ldr	r6, [r6, #16]
 800fa3a:	4622      	mov	r2, r4
 800fa3c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800fa40:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800fa44:	4604      	mov	r4, r0
 800fa46:	4630      	mov	r0, r6
 800fa48:	f000 faf8 	bl	801003c <run_xrce_session>
 800fa4c:	b12c      	cbz	r4, 800fa5a <rmw_destroy_subscription+0xba>
 800fa4e:	b120      	cbz	r0, 800fa5a <rmw_destroy_subscription+0xba>
 800fa50:	2400      	movs	r4, #0
 800fa52:	4628      	mov	r0, r5
 800fa54:	f000 f9b0 	bl	800fdb8 <rmw_uxrce_fini_subscription_memory>
 800fa58:	e7ab      	b.n	800f9b2 <rmw_destroy_subscription+0x12>
 800fa5a:	2402      	movs	r4, #2
 800fa5c:	e7f9      	b.n	800fa52 <rmw_destroy_subscription+0xb2>
 800fa5e:	bf00      	nop

0800fa60 <rmw_uxrce_transport_init>:
 800fa60:	b508      	push	{r3, lr}
 800fa62:	b108      	cbz	r0, 800fa68 <rmw_uxrce_transport_init+0x8>
 800fa64:	f100 0210 	add.w	r2, r0, #16
 800fa68:	b139      	cbz	r1, 800fa7a <rmw_uxrce_transport_init+0x1a>
 800fa6a:	6949      	ldr	r1, [r1, #20]
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	f001 fa63 	bl	8010f38 <uxr_init_custom_transport>
 800fa72:	f080 0001 	eor.w	r0, r0, #1
 800fa76:	b2c0      	uxtb	r0, r0
 800fa78:	bd08      	pop	{r3, pc}
 800fa7a:	4b04      	ldr	r3, [pc, #16]	@ (800fa8c <rmw_uxrce_transport_init+0x2c>)
 800fa7c:	4610      	mov	r0, r2
 800fa7e:	6859      	ldr	r1, [r3, #4]
 800fa80:	f001 fa5a 	bl	8010f38 <uxr_init_custom_transport>
 800fa84:	f080 0001 	eor.w	r0, r0, #1
 800fa88:	b2c0      	uxtb	r0, r0
 800fa8a:	bd08      	pop	{r3, pc}
 800fa8c:	200068e8 	.word	0x200068e8

0800fa90 <rmw_uxrce_init_service_memory>:
 800fa90:	b1e2      	cbz	r2, 800facc <rmw_uxrce_init_service_memory+0x3c>
 800fa92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa96:	7b05      	ldrb	r5, [r0, #12]
 800fa98:	4606      	mov	r6, r0
 800fa9a:	b9ad      	cbnz	r5, 800fac8 <rmw_uxrce_init_service_memory+0x38>
 800fa9c:	23c8      	movs	r3, #200	@ 0xc8
 800fa9e:	e9c0 5500 	strd	r5, r5, [r0]
 800faa2:	6083      	str	r3, [r0, #8]
 800faa4:	f240 1301 	movw	r3, #257	@ 0x101
 800faa8:	4617      	mov	r7, r2
 800faaa:	8183      	strh	r3, [r0, #12]
 800faac:	460c      	mov	r4, r1
 800faae:	46a8      	mov	r8, r5
 800fab0:	4621      	mov	r1, r4
 800fab2:	4630      	mov	r0, r6
 800fab4:	3501      	adds	r5, #1
 800fab6:	f007 fbcf 	bl	8017258 <put_memory>
 800faba:	42af      	cmp	r7, r5
 800fabc:	60a4      	str	r4, [r4, #8]
 800fabe:	f884 800c 	strb.w	r8, [r4, #12]
 800fac2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fac6:	d1f3      	bne.n	800fab0 <rmw_uxrce_init_service_memory+0x20>
 800fac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800facc:	4770      	bx	lr
 800face:	bf00      	nop

0800fad0 <rmw_uxrce_init_client_memory>:
 800fad0:	b1e2      	cbz	r2, 800fb0c <rmw_uxrce_init_client_memory+0x3c>
 800fad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad6:	7b05      	ldrb	r5, [r0, #12]
 800fad8:	4606      	mov	r6, r0
 800fada:	b9ad      	cbnz	r5, 800fb08 <rmw_uxrce_init_client_memory+0x38>
 800fadc:	23c8      	movs	r3, #200	@ 0xc8
 800fade:	e9c0 5500 	strd	r5, r5, [r0]
 800fae2:	6083      	str	r3, [r0, #8]
 800fae4:	f240 1301 	movw	r3, #257	@ 0x101
 800fae8:	4617      	mov	r7, r2
 800faea:	8183      	strh	r3, [r0, #12]
 800faec:	460c      	mov	r4, r1
 800faee:	46a8      	mov	r8, r5
 800faf0:	4621      	mov	r1, r4
 800faf2:	4630      	mov	r0, r6
 800faf4:	3501      	adds	r5, #1
 800faf6:	f007 fbaf 	bl	8017258 <put_memory>
 800fafa:	42af      	cmp	r7, r5
 800fafc:	60a4      	str	r4, [r4, #8]
 800fafe:	f884 800c 	strb.w	r8, [r4, #12]
 800fb02:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800fb06:	d1f3      	bne.n	800faf0 <rmw_uxrce_init_client_memory+0x20>
 800fb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop

0800fb10 <rmw_uxrce_init_publisher_memory>:
 800fb10:	b1e2      	cbz	r2, 800fb4c <rmw_uxrce_init_publisher_memory+0x3c>
 800fb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb16:	7b05      	ldrb	r5, [r0, #12]
 800fb18:	4606      	mov	r6, r0
 800fb1a:	b9ad      	cbnz	r5, 800fb48 <rmw_uxrce_init_publisher_memory+0x38>
 800fb1c:	23d8      	movs	r3, #216	@ 0xd8
 800fb1e:	e9c0 5500 	strd	r5, r5, [r0]
 800fb22:	6083      	str	r3, [r0, #8]
 800fb24:	f240 1301 	movw	r3, #257	@ 0x101
 800fb28:	4617      	mov	r7, r2
 800fb2a:	8183      	strh	r3, [r0, #12]
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	46a8      	mov	r8, r5
 800fb30:	4621      	mov	r1, r4
 800fb32:	4630      	mov	r0, r6
 800fb34:	3501      	adds	r5, #1
 800fb36:	f007 fb8f 	bl	8017258 <put_memory>
 800fb3a:	42af      	cmp	r7, r5
 800fb3c:	60a4      	str	r4, [r4, #8]
 800fb3e:	f884 800c 	strb.w	r8, [r4, #12]
 800fb42:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fb46:	d1f3      	bne.n	800fb30 <rmw_uxrce_init_publisher_memory+0x20>
 800fb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop

0800fb50 <rmw_uxrce_init_subscription_memory>:
 800fb50:	b1e2      	cbz	r2, 800fb8c <rmw_uxrce_init_subscription_memory+0x3c>
 800fb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb56:	7b05      	ldrb	r5, [r0, #12]
 800fb58:	4606      	mov	r6, r0
 800fb5a:	b9ad      	cbnz	r5, 800fb88 <rmw_uxrce_init_subscription_memory+0x38>
 800fb5c:	23d8      	movs	r3, #216	@ 0xd8
 800fb5e:	e9c0 5500 	strd	r5, r5, [r0]
 800fb62:	6083      	str	r3, [r0, #8]
 800fb64:	f240 1301 	movw	r3, #257	@ 0x101
 800fb68:	4617      	mov	r7, r2
 800fb6a:	8183      	strh	r3, [r0, #12]
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	46a8      	mov	r8, r5
 800fb70:	4621      	mov	r1, r4
 800fb72:	4630      	mov	r0, r6
 800fb74:	3501      	adds	r5, #1
 800fb76:	f007 fb6f 	bl	8017258 <put_memory>
 800fb7a:	42af      	cmp	r7, r5
 800fb7c:	60a4      	str	r4, [r4, #8]
 800fb7e:	f884 800c 	strb.w	r8, [r4, #12]
 800fb82:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800fb86:	d1f3      	bne.n	800fb70 <rmw_uxrce_init_subscription_memory+0x20>
 800fb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop

0800fb90 <rmw_uxrce_init_node_memory>:
 800fb90:	b1e2      	cbz	r2, 800fbcc <rmw_uxrce_init_node_memory+0x3c>
 800fb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb96:	7b05      	ldrb	r5, [r0, #12]
 800fb98:	4606      	mov	r6, r0
 800fb9a:	b9ad      	cbnz	r5, 800fbc8 <rmw_uxrce_init_node_memory+0x38>
 800fb9c:	23a4      	movs	r3, #164	@ 0xa4
 800fb9e:	e9c0 5500 	strd	r5, r5, [r0]
 800fba2:	6083      	str	r3, [r0, #8]
 800fba4:	f240 1301 	movw	r3, #257	@ 0x101
 800fba8:	4617      	mov	r7, r2
 800fbaa:	8183      	strh	r3, [r0, #12]
 800fbac:	460c      	mov	r4, r1
 800fbae:	46a8      	mov	r8, r5
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	3501      	adds	r5, #1
 800fbb6:	f007 fb4f 	bl	8017258 <put_memory>
 800fbba:	42af      	cmp	r7, r5
 800fbbc:	60a4      	str	r4, [r4, #8]
 800fbbe:	f884 800c 	strb.w	r8, [r4, #12]
 800fbc2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800fbc6:	d1f3      	bne.n	800fbb0 <rmw_uxrce_init_node_memory+0x20>
 800fbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop

0800fbd0 <rmw_uxrce_init_session_memory>:
 800fbd0:	b1ea      	cbz	r2, 800fc0e <rmw_uxrce_init_session_memory+0x3e>
 800fbd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbd6:	7b05      	ldrb	r5, [r0, #12]
 800fbd8:	4606      	mov	r6, r0
 800fbda:	b9b5      	cbnz	r5, 800fc0a <rmw_uxrce_init_session_memory+0x3a>
 800fbdc:	e9c0 5500 	strd	r5, r5, [r0]
 800fbe0:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fbe4:	f240 1301 	movw	r3, #257	@ 0x101
 800fbe8:	4617      	mov	r7, r2
 800fbea:	f8c0 8008 	str.w	r8, [r0, #8]
 800fbee:	460c      	mov	r4, r1
 800fbf0:	8183      	strh	r3, [r0, #12]
 800fbf2:	46a9      	mov	r9, r5
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	3501      	adds	r5, #1
 800fbfa:	f007 fb2d 	bl	8017258 <put_memory>
 800fbfe:	42af      	cmp	r7, r5
 800fc00:	60a4      	str	r4, [r4, #8]
 800fc02:	f884 900c 	strb.w	r9, [r4, #12]
 800fc06:	4444      	add	r4, r8
 800fc08:	d1f4      	bne.n	800fbf4 <rmw_uxrce_init_session_memory+0x24>
 800fc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc0e:	4770      	bx	lr

0800fc10 <rmw_uxrce_init_topic_memory>:
 800fc10:	b1e2      	cbz	r2, 800fc4c <rmw_uxrce_init_topic_memory+0x3c>
 800fc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc16:	7b05      	ldrb	r5, [r0, #12]
 800fc18:	4606      	mov	r6, r0
 800fc1a:	b9ad      	cbnz	r5, 800fc48 <rmw_uxrce_init_topic_memory+0x38>
 800fc1c:	231c      	movs	r3, #28
 800fc1e:	e9c0 5500 	strd	r5, r5, [r0]
 800fc22:	6083      	str	r3, [r0, #8]
 800fc24:	f240 1301 	movw	r3, #257	@ 0x101
 800fc28:	4617      	mov	r7, r2
 800fc2a:	8183      	strh	r3, [r0, #12]
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	46a8      	mov	r8, r5
 800fc30:	4621      	mov	r1, r4
 800fc32:	4630      	mov	r0, r6
 800fc34:	3501      	adds	r5, #1
 800fc36:	f007 fb0f 	bl	8017258 <put_memory>
 800fc3a:	42af      	cmp	r7, r5
 800fc3c:	60a4      	str	r4, [r4, #8]
 800fc3e:	f884 800c 	strb.w	r8, [r4, #12]
 800fc42:	f104 041c 	add.w	r4, r4, #28
 800fc46:	d1f3      	bne.n	800fc30 <rmw_uxrce_init_topic_memory+0x20>
 800fc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop

0800fc50 <rmw_uxrce_init_static_input_buffer_memory>:
 800fc50:	b1ea      	cbz	r2, 800fc8e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800fc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc56:	7b05      	ldrb	r5, [r0, #12]
 800fc58:	4606      	mov	r6, r0
 800fc5a:	b9b5      	cbnz	r5, 800fc8a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800fc5c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fc60:	e9c0 5500 	strd	r5, r5, [r0]
 800fc64:	6083      	str	r3, [r0, #8]
 800fc66:	f240 1301 	movw	r3, #257	@ 0x101
 800fc6a:	4617      	mov	r7, r2
 800fc6c:	8183      	strh	r3, [r0, #12]
 800fc6e:	460c      	mov	r4, r1
 800fc70:	46a8      	mov	r8, r5
 800fc72:	4621      	mov	r1, r4
 800fc74:	4630      	mov	r0, r6
 800fc76:	3501      	adds	r5, #1
 800fc78:	f007 faee 	bl	8017258 <put_memory>
 800fc7c:	42af      	cmp	r7, r5
 800fc7e:	60a4      	str	r4, [r4, #8]
 800fc80:	f884 800c 	strb.w	r8, [r4, #12]
 800fc84:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800fc88:	d1f3      	bne.n	800fc72 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc8e:	4770      	bx	lr

0800fc90 <rmw_uxrce_init_init_options_impl_memory>:
 800fc90:	b1e2      	cbz	r2, 800fccc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800fc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc96:	7b05      	ldrb	r5, [r0, #12]
 800fc98:	4606      	mov	r6, r0
 800fc9a:	b9ad      	cbnz	r5, 800fcc8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800fc9c:	232c      	movs	r3, #44	@ 0x2c
 800fc9e:	e9c0 5500 	strd	r5, r5, [r0]
 800fca2:	6083      	str	r3, [r0, #8]
 800fca4:	f240 1301 	movw	r3, #257	@ 0x101
 800fca8:	4617      	mov	r7, r2
 800fcaa:	8183      	strh	r3, [r0, #12]
 800fcac:	460c      	mov	r4, r1
 800fcae:	46a8      	mov	r8, r5
 800fcb0:	4621      	mov	r1, r4
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	3501      	adds	r5, #1
 800fcb6:	f007 facf 	bl	8017258 <put_memory>
 800fcba:	42af      	cmp	r7, r5
 800fcbc:	60a4      	str	r4, [r4, #8]
 800fcbe:	f884 800c 	strb.w	r8, [r4, #12]
 800fcc2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800fcc6:	d1f3      	bne.n	800fcb0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800fcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop

0800fcd0 <rmw_uxrce_init_wait_set_memory>:
 800fcd0:	b1e2      	cbz	r2, 800fd0c <rmw_uxrce_init_wait_set_memory+0x3c>
 800fcd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd6:	7b05      	ldrb	r5, [r0, #12]
 800fcd8:	4606      	mov	r6, r0
 800fcda:	b9ad      	cbnz	r5, 800fd08 <rmw_uxrce_init_wait_set_memory+0x38>
 800fcdc:	231c      	movs	r3, #28
 800fcde:	e9c0 5500 	strd	r5, r5, [r0]
 800fce2:	6083      	str	r3, [r0, #8]
 800fce4:	f240 1301 	movw	r3, #257	@ 0x101
 800fce8:	4617      	mov	r7, r2
 800fcea:	8183      	strh	r3, [r0, #12]
 800fcec:	460c      	mov	r4, r1
 800fcee:	46a8      	mov	r8, r5
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	f007 faaf 	bl	8017258 <put_memory>
 800fcfa:	42af      	cmp	r7, r5
 800fcfc:	60a4      	str	r4, [r4, #8]
 800fcfe:	f884 800c 	strb.w	r8, [r4, #12]
 800fd02:	f104 041c 	add.w	r4, r4, #28
 800fd06:	d1f3      	bne.n	800fcf0 <rmw_uxrce_init_wait_set_memory+0x20>
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop

0800fd10 <rmw_uxrce_init_guard_condition_memory>:
 800fd10:	b1e2      	cbz	r2, 800fd4c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd16:	7b05      	ldrb	r5, [r0, #12]
 800fd18:	4606      	mov	r6, r0
 800fd1a:	b9ad      	cbnz	r5, 800fd48 <rmw_uxrce_init_guard_condition_memory+0x38>
 800fd1c:	2320      	movs	r3, #32
 800fd1e:	e9c0 5500 	strd	r5, r5, [r0]
 800fd22:	6083      	str	r3, [r0, #8]
 800fd24:	f240 1301 	movw	r3, #257	@ 0x101
 800fd28:	4617      	mov	r7, r2
 800fd2a:	8183      	strh	r3, [r0, #12]
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	46a8      	mov	r8, r5
 800fd30:	4621      	mov	r1, r4
 800fd32:	4630      	mov	r0, r6
 800fd34:	3501      	adds	r5, #1
 800fd36:	f007 fa8f 	bl	8017258 <put_memory>
 800fd3a:	42af      	cmp	r7, r5
 800fd3c:	60a4      	str	r4, [r4, #8]
 800fd3e:	f884 800c 	strb.w	r8, [r4, #12]
 800fd42:	f104 0420 	add.w	r4, r4, #32
 800fd46:	d1f3      	bne.n	800fd30 <rmw_uxrce_init_guard_condition_memory+0x20>
 800fd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop

0800fd50 <rmw_uxrce_fini_session_memory>:
 800fd50:	4601      	mov	r1, r0
 800fd52:	4801      	ldr	r0, [pc, #4]	@ (800fd58 <rmw_uxrce_fini_session_memory+0x8>)
 800fd54:	f007 ba80 	b.w	8017258 <put_memory>
 800fd58:	2000b69c 	.word	0x2000b69c

0800fd5c <rmw_uxrce_fini_node_memory>:
 800fd5c:	b538      	push	{r3, r4, r5, lr}
 800fd5e:	4604      	mov	r4, r0
 800fd60:	6800      	ldr	r0, [r0, #0]
 800fd62:	b128      	cbz	r0, 800fd70 <rmw_uxrce_fini_node_memory+0x14>
 800fd64:	4b07      	ldr	r3, [pc, #28]	@ (800fd84 <rmw_uxrce_fini_node_memory+0x28>)
 800fd66:	6819      	ldr	r1, [r3, #0]
 800fd68:	f7f0 fa5a 	bl	8000220 <strcmp>
 800fd6c:	b940      	cbnz	r0, 800fd80 <rmw_uxrce_fini_node_memory+0x24>
 800fd6e:	6020      	str	r0, [r4, #0]
 800fd70:	6861      	ldr	r1, [r4, #4]
 800fd72:	b129      	cbz	r1, 800fd80 <rmw_uxrce_fini_node_memory+0x24>
 800fd74:	2500      	movs	r5, #0
 800fd76:	4804      	ldr	r0, [pc, #16]	@ (800fd88 <rmw_uxrce_fini_node_memory+0x2c>)
 800fd78:	610d      	str	r5, [r1, #16]
 800fd7a:	f007 fa6d 	bl	8017258 <put_memory>
 800fd7e:	6065      	str	r5, [r4, #4]
 800fd80:	bd38      	pop	{r3, r4, r5, pc}
 800fd82:	bf00      	nop
 800fd84:	0801b2bc 	.word	0x0801b2bc
 800fd88:	2000b66c 	.word	0x2000b66c

0800fd8c <rmw_uxrce_fini_publisher_memory>:
 800fd8c:	b510      	push	{r4, lr}
 800fd8e:	4604      	mov	r4, r0
 800fd90:	6800      	ldr	r0, [r0, #0]
 800fd92:	b128      	cbz	r0, 800fda0 <rmw_uxrce_fini_publisher_memory+0x14>
 800fd94:	4b06      	ldr	r3, [pc, #24]	@ (800fdb0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800fd96:	6819      	ldr	r1, [r3, #0]
 800fd98:	f7f0 fa42 	bl	8000220 <strcmp>
 800fd9c:	b938      	cbnz	r0, 800fdae <rmw_uxrce_fini_publisher_memory+0x22>
 800fd9e:	6020      	str	r0, [r4, #0]
 800fda0:	6861      	ldr	r1, [r4, #4]
 800fda2:	b121      	cbz	r1, 800fdae <rmw_uxrce_fini_publisher_memory+0x22>
 800fda4:	4803      	ldr	r0, [pc, #12]	@ (800fdb4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800fda6:	f007 fa57 	bl	8017258 <put_memory>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	6063      	str	r3, [r4, #4]
 800fdae:	bd10      	pop	{r4, pc}
 800fdb0:	0801b2bc 	.word	0x0801b2bc
 800fdb4:	2000b67c 	.word	0x2000b67c

0800fdb8 <rmw_uxrce_fini_subscription_memory>:
 800fdb8:	b510      	push	{r4, lr}
 800fdba:	4604      	mov	r4, r0
 800fdbc:	6800      	ldr	r0, [r0, #0]
 800fdbe:	b128      	cbz	r0, 800fdcc <rmw_uxrce_fini_subscription_memory+0x14>
 800fdc0:	4b06      	ldr	r3, [pc, #24]	@ (800fddc <rmw_uxrce_fini_subscription_memory+0x24>)
 800fdc2:	6819      	ldr	r1, [r3, #0]
 800fdc4:	f7f0 fa2c 	bl	8000220 <strcmp>
 800fdc8:	b938      	cbnz	r0, 800fdda <rmw_uxrce_fini_subscription_memory+0x22>
 800fdca:	6020      	str	r0, [r4, #0]
 800fdcc:	6861      	ldr	r1, [r4, #4]
 800fdce:	b121      	cbz	r1, 800fdda <rmw_uxrce_fini_subscription_memory+0x22>
 800fdd0:	4803      	ldr	r0, [pc, #12]	@ (800fde0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800fdd2:	f007 fa41 	bl	8017258 <put_memory>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	6063      	str	r3, [r4, #4]
 800fdda:	bd10      	pop	{r4, pc}
 800fddc:	0801b2bc 	.word	0x0801b2bc
 800fde0:	2000b6bc 	.word	0x2000b6bc

0800fde4 <rmw_uxrce_fini_service_memory>:
 800fde4:	b510      	push	{r4, lr}
 800fde6:	4604      	mov	r4, r0
 800fde8:	6800      	ldr	r0, [r0, #0]
 800fdea:	b128      	cbz	r0, 800fdf8 <rmw_uxrce_fini_service_memory+0x14>
 800fdec:	4b06      	ldr	r3, [pc, #24]	@ (800fe08 <rmw_uxrce_fini_service_memory+0x24>)
 800fdee:	6819      	ldr	r1, [r3, #0]
 800fdf0:	f7f0 fa16 	bl	8000220 <strcmp>
 800fdf4:	b938      	cbnz	r0, 800fe06 <rmw_uxrce_fini_service_memory+0x22>
 800fdf6:	6020      	str	r0, [r4, #0]
 800fdf8:	6861      	ldr	r1, [r4, #4]
 800fdfa:	b121      	cbz	r1, 800fe06 <rmw_uxrce_fini_service_memory+0x22>
 800fdfc:	4803      	ldr	r0, [pc, #12]	@ (800fe0c <rmw_uxrce_fini_service_memory+0x28>)
 800fdfe:	f007 fa2b 	bl	8017258 <put_memory>
 800fe02:	2300      	movs	r3, #0
 800fe04:	6063      	str	r3, [r4, #4]
 800fe06:	bd10      	pop	{r4, pc}
 800fe08:	0801b2bc 	.word	0x0801b2bc
 800fe0c:	2000b68c 	.word	0x2000b68c

0800fe10 <rmw_uxrce_fini_client_memory>:
 800fe10:	b510      	push	{r4, lr}
 800fe12:	4604      	mov	r4, r0
 800fe14:	6800      	ldr	r0, [r0, #0]
 800fe16:	b128      	cbz	r0, 800fe24 <rmw_uxrce_fini_client_memory+0x14>
 800fe18:	4b06      	ldr	r3, [pc, #24]	@ (800fe34 <rmw_uxrce_fini_client_memory+0x24>)
 800fe1a:	6819      	ldr	r1, [r3, #0]
 800fe1c:	f7f0 fa00 	bl	8000220 <strcmp>
 800fe20:	b938      	cbnz	r0, 800fe32 <rmw_uxrce_fini_client_memory+0x22>
 800fe22:	6020      	str	r0, [r4, #0]
 800fe24:	6861      	ldr	r1, [r4, #4]
 800fe26:	b121      	cbz	r1, 800fe32 <rmw_uxrce_fini_client_memory+0x22>
 800fe28:	4803      	ldr	r0, [pc, #12]	@ (800fe38 <rmw_uxrce_fini_client_memory+0x28>)
 800fe2a:	f007 fa15 	bl	8017258 <put_memory>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	6063      	str	r3, [r4, #4]
 800fe32:	bd10      	pop	{r4, pc}
 800fe34:	0801b2bc 	.word	0x0801b2bc
 800fe38:	20006a80 	.word	0x20006a80

0800fe3c <rmw_uxrce_fini_topic_memory>:
 800fe3c:	b510      	push	{r4, lr}
 800fe3e:	4604      	mov	r4, r0
 800fe40:	4621      	mov	r1, r4
 800fe42:	4803      	ldr	r0, [pc, #12]	@ (800fe50 <rmw_uxrce_fini_topic_memory+0x14>)
 800fe44:	f007 fa08 	bl	8017258 <put_memory>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	61a3      	str	r3, [r4, #24]
 800fe4c:	bd10      	pop	{r4, pc}
 800fe4e:	bf00      	nop
 800fe50:	2000b6cc 	.word	0x2000b6cc

0800fe54 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800fe54:	b082      	sub	sp, #8
 800fe56:	b530      	push	{r4, r5, lr}
 800fe58:	4925      	ldr	r1, [pc, #148]	@ (800fef0 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fe5a:	680d      	ldr	r5, [r1, #0]
 800fe5c:	ac03      	add	r4, sp, #12
 800fe5e:	e884 000c 	stmia.w	r4, {r2, r3}
 800fe62:	461c      	mov	r4, r3
 800fe64:	2d00      	cmp	r5, #0
 800fe66:	d041      	beq.n	800feec <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800fe68:	462b      	mov	r3, r5
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	689a      	ldr	r2, [r3, #8]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800fe74:	4290      	cmp	r0, r2
 800fe76:	bf08      	it	eq
 800fe78:	3101      	addeq	r1, #1
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1f6      	bne.n	800fe6c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fe7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	d029      	beq.n	800feda <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fe86:	d907      	bls.n	800fe98 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fe88:	2b03      	cmp	r3, #3
 800fe8a:	d005      	beq.n	800fe98 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe92:	4608      	mov	r0, r1
 800fe94:	b002      	add	sp, #8
 800fe96:	4770      	bx	lr
 800fe98:	b314      	cbz	r4, 800fee0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fe9a:	428c      	cmp	r4, r1
 800fe9c:	d820      	bhi.n	800fee0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fe9e:	2d00      	cmp	r5, #0
 800fea0:	d0f4      	beq.n	800fe8c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fea2:	2100      	movs	r1, #0
 800fea4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800fea8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800feac:	e002      	b.n	800feb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800feae:	686d      	ldr	r5, [r5, #4]
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	d0ec      	beq.n	800fe8e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800feb4:	68ab      	ldr	r3, [r5, #8]
 800feb6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800feba:	4290      	cmp	r0, r2
 800febc:	d1f7      	bne.n	800feae <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800febe:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800fec2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800fec6:	4562      	cmp	r2, ip
 800fec8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800fecc:	eb73 0e04 	sbcs.w	lr, r3, r4
 800fed0:	daed      	bge.n	800feae <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fed2:	4694      	mov	ip, r2
 800fed4:	461c      	mov	r4, r3
 800fed6:	4629      	mov	r1, r5
 800fed8:	e7e9      	b.n	800feae <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800feda:	b10c      	cbz	r4, 800fee0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fedc:	428c      	cmp	r4, r1
 800fede:	d9d5      	bls.n	800fe8c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fee4:	4802      	ldr	r0, [pc, #8]	@ (800fef0 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fee6:	b002      	add	sp, #8
 800fee8:	f007 b9a6 	b.w	8017238 <get_memory>
 800feec:	4629      	mov	r1, r5
 800feee:	e7c6      	b.n	800fe7e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800fef0:	2000b6ac 	.word	0x2000b6ac

0800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800fef4:	4b11      	ldr	r3, [pc, #68]	@ (800ff3c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	b530      	push	{r4, r5, lr}
 800fefa:	b1e3      	cbz	r3, 800ff36 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800fefc:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ff00:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ff04:	2400      	movs	r4, #0
 800ff06:	e001      	b.n	800ff0c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	b193      	cbz	r3, 800ff32 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ff0c:	689a      	ldr	r2, [r3, #8]
 800ff0e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ff12:	4288      	cmp	r0, r1
 800ff14:	d1f8      	bne.n	800ff08 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ff16:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ff1a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ff1e:	4571      	cmp	r1, lr
 800ff20:	eb72 050c 	sbcs.w	r5, r2, ip
 800ff24:	daf0      	bge.n	800ff08 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ff26:	461c      	mov	r4, r3
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	468e      	mov	lr, r1
 800ff2c:	4694      	mov	ip, r2
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d1ec      	bne.n	800ff0c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ff32:	4620      	mov	r0, r4
 800ff34:	bd30      	pop	{r4, r5, pc}
 800ff36:	461c      	mov	r4, r3
 800ff38:	4620      	mov	r0, r4
 800ff3a:	bd30      	pop	{r4, r5, pc}
 800ff3c:	2000b6ac 	.word	0x2000b6ac

0800ff40 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	4b3c      	ldr	r3, [pc, #240]	@ (8010038 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ff46:	ed2d 8b06 	vpush	{d8-d10}
 800ff4a:	681f      	ldr	r7, [r3, #0]
 800ff4c:	b08d      	sub	sp, #52	@ 0x34
 800ff4e:	f007 fc2b 	bl	80177a8 <rmw_uros_epoch_nanos>
 800ff52:	2f00      	cmp	r7, #0
 800ff54:	d05d      	beq.n	8010012 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ff56:	46b8      	mov	r8, r7
 800ff58:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8010020 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ff5c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ff60:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ff64:	2b04      	cmp	r3, #4
 800ff66:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8010028 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ff6a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8010030 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ff6e:	4681      	mov	r9, r0
 800ff70:	468a      	mov	sl, r1
 800ff72:	ac04      	add	r4, sp, #16
 800ff74:	d03f      	beq.n	800fff6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ff76:	2b05      	cmp	r3, #5
 800ff78:	d044      	beq.n	8010004 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d03b      	beq.n	800fff6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ff7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ff82:	ed8d ab06 	vstr	d10, [sp, #24]
 800ff86:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ff8a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ff8e:	ab08      	add	r3, sp, #32
 800ff90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ff9a:	f006 ffd9 	bl	8016f50 <rmw_time_equal>
 800ff9e:	b118      	cbz	r0, 800ffa8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ffa0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ffa4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ffa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ffac:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ffb0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ffb4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ffb8:	f007 f81e 	bl	8016ff8 <rmw_time_total_nsec>
 800ffbc:	1830      	adds	r0, r6, r0
 800ffbe:	eb47 0101 	adc.w	r1, r7, r1
 800ffc2:	4548      	cmp	r0, r9
 800ffc4:	eb71 030a 	sbcs.w	r3, r1, sl
 800ffc8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ffcc:	db05      	blt.n	800ffda <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800ffce:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ffd2:	4591      	cmp	r9, r2
 800ffd4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ffd8:	da03      	bge.n	800ffe2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800ffda:	4817      	ldr	r0, [pc, #92]	@ (8010038 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ffdc:	4641      	mov	r1, r8
 800ffde:	f007 f93b 	bl	8017258 <put_memory>
 800ffe2:	f1bb 0f00 	cmp.w	fp, #0
 800ffe6:	d014      	beq.n	8010012 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ffe8:	46d8      	mov	r8, fp
 800ffea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ffee:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800fff2:	2b04      	cmp	r3, #4
 800fff4:	d1bf      	bne.n	800ff76 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800fff6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fffa:	3340      	adds	r3, #64	@ 0x40
 800fffc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fffe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010002:	e7c0      	b.n	800ff86 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010004:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010008:	3348      	adds	r3, #72	@ 0x48
 801000a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801000c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010010:	e7b9      	b.n	800ff86 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010012:	b00d      	add	sp, #52	@ 0x34
 8010014:	ecbd 8b06 	vpop	{d8-d10}
 8010018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801001c:	f3af 8000 	nop.w
	...
 8010028:	00000001 	.word	0x00000001
 801002c:	00000000 	.word	0x00000000
 8010030:	0000001e 	.word	0x0000001e
 8010034:	00000000 	.word	0x00000000
 8010038:	2000b6ac 	.word	0x2000b6ac

0801003c <run_xrce_session>:
 801003c:	b510      	push	{r4, lr}
 801003e:	788c      	ldrb	r4, [r1, #2]
 8010040:	b086      	sub	sp, #24
 8010042:	2c01      	cmp	r4, #1
 8010044:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010048:	d00c      	beq.n	8010064 <run_xrce_session+0x28>
 801004a:	4619      	mov	r1, r3
 801004c:	2301      	movs	r3, #1
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	f10d 020e 	add.w	r2, sp, #14
 8010054:	f10d 0317 	add.w	r3, sp, #23
 8010058:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801005c:	f001 fe0a 	bl	8011c74 <uxr_run_session_until_all_status>
 8010060:	b006      	add	sp, #24
 8010062:	bd10      	pop	{r4, pc}
 8010064:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010068:	f001 fa1e 	bl	80114a8 <uxr_flash_output_streams>
 801006c:	4620      	mov	r0, r4
 801006e:	b006      	add	sp, #24
 8010070:	bd10      	pop	{r4, pc}
 8010072:	bf00      	nop

08010074 <convert_qos_profile>:
 8010074:	7a4a      	ldrb	r2, [r1, #9]
 8010076:	f891 c008 	ldrb.w	ip, [r1, #8]
 801007a:	2a02      	cmp	r2, #2
 801007c:	bf18      	it	ne
 801007e:	2200      	movne	r2, #0
 8010080:	7002      	strb	r2, [r0, #0]
 8010082:	780a      	ldrb	r2, [r1, #0]
 8010084:	8889      	ldrh	r1, [r1, #4]
 8010086:	8081      	strh	r1, [r0, #4]
 8010088:	f1ac 0c02 	sub.w	ip, ip, #2
 801008c:	f1a2 0202 	sub.w	r2, r2, #2
 8010090:	fabc fc8c 	clz	ip, ip
 8010094:	fab2 f282 	clz	r2, r2
 8010098:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801009c:	0952      	lsrs	r2, r2, #5
 801009e:	f880 c001 	strb.w	ip, [r0, #1]
 80100a2:	7082      	strb	r2, [r0, #2]
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop

080100a8 <generate_service_topics>:
 80100a8:	b570      	push	{r4, r5, r6, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	461c      	mov	r4, r3
 80100ae:	4b12      	ldr	r3, [pc, #72]	@ (80100f8 <generate_service_topics+0x50>)
 80100b0:	9301      	str	r3, [sp, #4]
 80100b2:	4605      	mov	r5, r0
 80100b4:	4b11      	ldr	r3, [pc, #68]	@ (80100fc <generate_service_topics+0x54>)
 80100b6:	9000      	str	r0, [sp, #0]
 80100b8:	4616      	mov	r6, r2
 80100ba:	4608      	mov	r0, r1
 80100bc:	4a10      	ldr	r2, [pc, #64]	@ (8010100 <generate_service_topics+0x58>)
 80100be:	4621      	mov	r1, r4
 80100c0:	f008 fe0a 	bl	8018cd8 <sniprintf>
 80100c4:	4b0f      	ldr	r3, [pc, #60]	@ (8010104 <generate_service_topics+0x5c>)
 80100c6:	9301      	str	r3, [sp, #4]
 80100c8:	4601      	mov	r1, r0
 80100ca:	9500      	str	r5, [sp, #0]
 80100cc:	4b0e      	ldr	r3, [pc, #56]	@ (8010108 <generate_service_topics+0x60>)
 80100ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010100 <generate_service_topics+0x58>)
 80100d0:	460d      	mov	r5, r1
 80100d2:	4630      	mov	r0, r6
 80100d4:	4621      	mov	r1, r4
 80100d6:	f008 fdff 	bl	8018cd8 <sniprintf>
 80100da:	2d00      	cmp	r5, #0
 80100dc:	db01      	blt.n	80100e2 <generate_service_topics+0x3a>
 80100de:	42ac      	cmp	r4, r5
 80100e0:	dc02      	bgt.n	80100e8 <generate_service_topics+0x40>
 80100e2:	2000      	movs	r0, #0
 80100e4:	b002      	add	sp, #8
 80100e6:	bd70      	pop	{r4, r5, r6, pc}
 80100e8:	2800      	cmp	r0, #0
 80100ea:	dbfa      	blt.n	80100e2 <generate_service_topics+0x3a>
 80100ec:	4284      	cmp	r4, r0
 80100ee:	bfd4      	ite	le
 80100f0:	2000      	movle	r0, #0
 80100f2:	2001      	movgt	r0, #1
 80100f4:	b002      	add	sp, #8
 80100f6:	bd70      	pop	{r4, r5, r6, pc}
 80100f8:	0801a648 	.word	0x0801a648
 80100fc:	0801a644 	.word	0x0801a644
 8010100:	0801a628 	.word	0x0801a628
 8010104:	0801a63c 	.word	0x0801a63c
 8010108:	0801a638 	.word	0x0801a638

0801010c <generate_service_types>:
 801010c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010110:	4605      	mov	r5, r0
 8010112:	b086      	sub	sp, #24
 8010114:	6880      	ldr	r0, [r0, #8]
 8010116:	460c      	mov	r4, r1
 8010118:	4617      	mov	r7, r2
 801011a:	461e      	mov	r6, r3
 801011c:	4780      	blx	r0
 801011e:	68eb      	ldr	r3, [r5, #12]
 8010120:	4680      	mov	r8, r0
 8010122:	4798      	blx	r3
 8010124:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010128:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801012c:	2300      	movs	r3, #0
 801012e:	7023      	strb	r3, [r4, #0]
 8010130:	6813      	ldr	r3, [r2, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d042      	beq.n	80101bc <generate_service_types+0xb0>
 8010136:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80101d0 <generate_service_types+0xc4>
 801013a:	4641      	mov	r1, r8
 801013c:	4620      	mov	r0, r4
 801013e:	4c22      	ldr	r4, [pc, #136]	@ (80101c8 <generate_service_types+0xbc>)
 8010140:	9405      	str	r4, [sp, #20]
 8010142:	6852      	ldr	r2, [r2, #4]
 8010144:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80101d8 <generate_service_types+0xcc>
 8010148:	9204      	str	r2, [sp, #16]
 801014a:	9100      	str	r1, [sp, #0]
 801014c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 8010150:	4a1e      	ldr	r2, [pc, #120]	@ (80101cc <generate_service_types+0xc0>)
 8010152:	f8cd a004 	str.w	sl, [sp, #4]
 8010156:	4631      	mov	r1, r6
 8010158:	f008 fdbe 	bl	8018cd8 <sniprintf>
 801015c:	2800      	cmp	r0, #0
 801015e:	db1f      	blt.n	80101a0 <generate_service_types+0x94>
 8010160:	2300      	movs	r3, #0
 8010162:	703b      	strb	r3, [r7, #0]
 8010164:	f8d9 3000 	ldr.w	r3, [r9]
 8010168:	42b0      	cmp	r0, r6
 801016a:	bfac      	ite	ge
 801016c:	2500      	movge	r5, #0
 801016e:	2501      	movlt	r5, #1
 8010170:	b1eb      	cbz	r3, 80101ae <generate_service_types+0xa2>
 8010172:	4a17      	ldr	r2, [pc, #92]	@ (80101d0 <generate_service_types+0xc4>)
 8010174:	9405      	str	r4, [sp, #20]
 8010176:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801017a:	9200      	str	r2, [sp, #0]
 801017c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 8010180:	e9cd a401 	strd	sl, r4, [sp, #4]
 8010184:	4a11      	ldr	r2, [pc, #68]	@ (80101cc <generate_service_types+0xc0>)
 8010186:	4638      	mov	r0, r7
 8010188:	4631      	mov	r1, r6
 801018a:	f008 fda5 	bl	8018cd8 <sniprintf>
 801018e:	2800      	cmp	r0, #0
 8010190:	db10      	blt.n	80101b4 <generate_service_types+0xa8>
 8010192:	42b0      	cmp	r0, r6
 8010194:	bfb4      	ite	lt
 8010196:	4628      	movlt	r0, r5
 8010198:	2000      	movge	r0, #0
 801019a:	b006      	add	sp, #24
 801019c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a0:	2300      	movs	r3, #0
 80101a2:	703b      	strb	r3, [r7, #0]
 80101a4:	f8d9 3000 	ldr.w	r3, [r9]
 80101a8:	2500      	movs	r5, #0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1e1      	bne.n	8010172 <generate_service_types+0x66>
 80101ae:	4b09      	ldr	r3, [pc, #36]	@ (80101d4 <generate_service_types+0xc8>)
 80101b0:	461a      	mov	r2, r3
 80101b2:	e7df      	b.n	8010174 <generate_service_types+0x68>
 80101b4:	2000      	movs	r0, #0
 80101b6:	b006      	add	sp, #24
 80101b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101bc:	4b05      	ldr	r3, [pc, #20]	@ (80101d4 <generate_service_types+0xc8>)
 80101be:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 80101d0 <generate_service_types+0xc4>
 80101c2:	4619      	mov	r1, r3
 80101c4:	e7ba      	b.n	801013c <generate_service_types+0x30>
 80101c6:	bf00      	nop
 80101c8:	0801a630 	.word	0x0801a630
 80101cc:	0801a620 	.word	0x0801a620
 80101d0:	0801a61c 	.word	0x0801a61c
 80101d4:	0801a6a0 	.word	0x0801a6a0
 80101d8:	0801a634 	.word	0x0801a634

080101dc <generate_type_name>:
 80101dc:	b530      	push	{r4, r5, lr}
 80101de:	2300      	movs	r3, #0
 80101e0:	700b      	strb	r3, [r1, #0]
 80101e2:	6803      	ldr	r3, [r0, #0]
 80101e4:	b087      	sub	sp, #28
 80101e6:	4614      	mov	r4, r2
 80101e8:	b1d3      	cbz	r3, 8010220 <generate_type_name+0x44>
 80101ea:	4a0f      	ldr	r2, [pc, #60]	@ (8010228 <generate_type_name+0x4c>)
 80101ec:	4615      	mov	r5, r2
 80101ee:	9203      	str	r2, [sp, #12]
 80101f0:	9500      	str	r5, [sp, #0]
 80101f2:	6842      	ldr	r2, [r0, #4]
 80101f4:	480d      	ldr	r0, [pc, #52]	@ (801022c <generate_type_name+0x50>)
 80101f6:	9001      	str	r0, [sp, #4]
 80101f8:	4608      	mov	r0, r1
 80101fa:	490d      	ldr	r1, [pc, #52]	@ (8010230 <generate_type_name+0x54>)
 80101fc:	9204      	str	r2, [sp, #16]
 80101fe:	9105      	str	r1, [sp, #20]
 8010200:	9102      	str	r1, [sp, #8]
 8010202:	4a0c      	ldr	r2, [pc, #48]	@ (8010234 <generate_type_name+0x58>)
 8010204:	4621      	mov	r1, r4
 8010206:	f008 fd67 	bl	8018cd8 <sniprintf>
 801020a:	2800      	cmp	r0, #0
 801020c:	db05      	blt.n	801021a <generate_type_name+0x3e>
 801020e:	4284      	cmp	r4, r0
 8010210:	bfd4      	ite	le
 8010212:	2000      	movle	r0, #0
 8010214:	2001      	movgt	r0, #1
 8010216:	b007      	add	sp, #28
 8010218:	bd30      	pop	{r4, r5, pc}
 801021a:	2000      	movs	r0, #0
 801021c:	b007      	add	sp, #28
 801021e:	bd30      	pop	{r4, r5, pc}
 8010220:	4b05      	ldr	r3, [pc, #20]	@ (8010238 <generate_type_name+0x5c>)
 8010222:	4a01      	ldr	r2, [pc, #4]	@ (8010228 <generate_type_name+0x4c>)
 8010224:	461d      	mov	r5, r3
 8010226:	e7e2      	b.n	80101ee <generate_type_name+0x12>
 8010228:	0801a61c 	.word	0x0801a61c
 801022c:	0801a634 	.word	0x0801a634
 8010230:	0801a630 	.word	0x0801a630
 8010234:	0801a620 	.word	0x0801a620
 8010238:	0801a6a0 	.word	0x0801a6a0

0801023c <generate_topic_name>:
 801023c:	b510      	push	{r4, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	4614      	mov	r4, r2
 8010242:	9000      	str	r0, [sp, #0]
 8010244:	4b08      	ldr	r3, [pc, #32]	@ (8010268 <generate_topic_name+0x2c>)
 8010246:	4a09      	ldr	r2, [pc, #36]	@ (801026c <generate_topic_name+0x30>)
 8010248:	4608      	mov	r0, r1
 801024a:	4621      	mov	r1, r4
 801024c:	f008 fd44 	bl	8018cd8 <sniprintf>
 8010250:	2800      	cmp	r0, #0
 8010252:	db05      	blt.n	8010260 <generate_topic_name+0x24>
 8010254:	4284      	cmp	r4, r0
 8010256:	bfd4      	ite	le
 8010258:	2000      	movle	r0, #0
 801025a:	2001      	movgt	r0, #1
 801025c:	b002      	add	sp, #8
 801025e:	bd10      	pop	{r4, pc}
 8010260:	2000      	movs	r0, #0
 8010262:	b002      	add	sp, #8
 8010264:	bd10      	pop	{r4, pc}
 8010266:	bf00      	nop
 8010268:	0801a650 	.word	0x0801a650
 801026c:	0801a124 	.word	0x0801a124

08010270 <is_uxrce_rmw_identifier_valid>:
 8010270:	b510      	push	{r4, lr}
 8010272:	4604      	mov	r4, r0
 8010274:	b140      	cbz	r0, 8010288 <is_uxrce_rmw_identifier_valid+0x18>
 8010276:	f7fe fcdf 	bl	800ec38 <rmw_get_implementation_identifier>
 801027a:	4601      	mov	r1, r0
 801027c:	4620      	mov	r0, r4
 801027e:	f7ef ffcf 	bl	8000220 <strcmp>
 8010282:	fab0 f080 	clz	r0, r0
 8010286:	0940      	lsrs	r0, r0, #5
 8010288:	bd10      	pop	{r4, pc}
 801028a:	bf00      	nop

0801028c <get_message_typesupport_handle>:
 801028c:	6883      	ldr	r3, [r0, #8]
 801028e:	4718      	bx	r3

08010290 <get_message_typesupport_handle_function>:
 8010290:	b510      	push	{r4, lr}
 8010292:	4604      	mov	r4, r0
 8010294:	6800      	ldr	r0, [r0, #0]
 8010296:	f7ef ffc3 	bl	8000220 <strcmp>
 801029a:	2800      	cmp	r0, #0
 801029c:	bf0c      	ite	eq
 801029e:	4620      	moveq	r0, r4
 80102a0:	2000      	movne	r0, #0
 80102a2:	bd10      	pop	{r4, pc}

080102a4 <get_service_typesupport_handle>:
 80102a4:	6883      	ldr	r3, [r0, #8]
 80102a6:	4718      	bx	r3

080102a8 <get_service_typesupport_handle_function>:
 80102a8:	b510      	push	{r4, lr}
 80102aa:	4604      	mov	r4, r0
 80102ac:	6800      	ldr	r0, [r0, #0]
 80102ae:	f7ef ffb7 	bl	8000220 <strcmp>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	bf0c      	ite	eq
 80102b6:	4620      	moveq	r0, r4
 80102b8:	2000      	movne	r0, #0
 80102ba:	bd10      	pop	{r4, pc}

080102bc <rosidl_runtime_c__String__init>:
 80102bc:	b510      	push	{r4, lr}
 80102be:	4604      	mov	r4, r0
 80102c0:	b086      	sub	sp, #24
 80102c2:	b170      	cbz	r0, 80102e2 <rosidl_runtime_c__String__init+0x26>
 80102c4:	a801      	add	r0, sp, #4
 80102c6:	f7fd fe33 	bl	800df30 <rcutils_get_default_allocator>
 80102ca:	9b01      	ldr	r3, [sp, #4]
 80102cc:	9905      	ldr	r1, [sp, #20]
 80102ce:	2001      	movs	r0, #1
 80102d0:	4798      	blx	r3
 80102d2:	6020      	str	r0, [r4, #0]
 80102d4:	b128      	cbz	r0, 80102e2 <rosidl_runtime_c__String__init+0x26>
 80102d6:	2100      	movs	r1, #0
 80102d8:	2201      	movs	r2, #1
 80102da:	7001      	strb	r1, [r0, #0]
 80102dc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80102e0:	4610      	mov	r0, r2
 80102e2:	b006      	add	sp, #24
 80102e4:	bd10      	pop	{r4, pc}
 80102e6:	bf00      	nop

080102e8 <rosidl_runtime_c__String__fini>:
 80102e8:	b320      	cbz	r0, 8010334 <rosidl_runtime_c__String__fini+0x4c>
 80102ea:	b510      	push	{r4, lr}
 80102ec:	6803      	ldr	r3, [r0, #0]
 80102ee:	b086      	sub	sp, #24
 80102f0:	4604      	mov	r4, r0
 80102f2:	b173      	cbz	r3, 8010312 <rosidl_runtime_c__String__fini+0x2a>
 80102f4:	6883      	ldr	r3, [r0, #8]
 80102f6:	b1f3      	cbz	r3, 8010336 <rosidl_runtime_c__String__fini+0x4e>
 80102f8:	a801      	add	r0, sp, #4
 80102fa:	f7fd fe19 	bl	800df30 <rcutils_get_default_allocator>
 80102fe:	9b02      	ldr	r3, [sp, #8]
 8010300:	9905      	ldr	r1, [sp, #20]
 8010302:	6820      	ldr	r0, [r4, #0]
 8010304:	4798      	blx	r3
 8010306:	2300      	movs	r3, #0
 8010308:	e9c4 3300 	strd	r3, r3, [r4]
 801030c:	60a3      	str	r3, [r4, #8]
 801030e:	b006      	add	sp, #24
 8010310:	bd10      	pop	{r4, pc}
 8010312:	6843      	ldr	r3, [r0, #4]
 8010314:	b9db      	cbnz	r3, 801034e <rosidl_runtime_c__String__fini+0x66>
 8010316:	6883      	ldr	r3, [r0, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d0f8      	beq.n	801030e <rosidl_runtime_c__String__fini+0x26>
 801031c:	4b12      	ldr	r3, [pc, #72]	@ (8010368 <rosidl_runtime_c__String__fini+0x80>)
 801031e:	4813      	ldr	r0, [pc, #76]	@ (801036c <rosidl_runtime_c__String__fini+0x84>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2251      	movs	r2, #81	@ 0x51
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	2101      	movs	r1, #1
 8010328:	f008 fcb6 	bl	8018c98 <fwrite>
 801032c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010330:	f008 f972 	bl	8018618 <exit>
 8010334:	4770      	bx	lr
 8010336:	4b0c      	ldr	r3, [pc, #48]	@ (8010368 <rosidl_runtime_c__String__fini+0x80>)
 8010338:	480d      	ldr	r0, [pc, #52]	@ (8010370 <rosidl_runtime_c__String__fini+0x88>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	224c      	movs	r2, #76	@ 0x4c
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	2101      	movs	r1, #1
 8010342:	f008 fca9 	bl	8018c98 <fwrite>
 8010346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801034a:	f008 f965 	bl	8018618 <exit>
 801034e:	4b06      	ldr	r3, [pc, #24]	@ (8010368 <rosidl_runtime_c__String__fini+0x80>)
 8010350:	4808      	ldr	r0, [pc, #32]	@ (8010374 <rosidl_runtime_c__String__fini+0x8c>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	224e      	movs	r2, #78	@ 0x4e
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	2101      	movs	r1, #1
 801035a:	f008 fc9d 	bl	8018c98 <fwrite>
 801035e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010362:	f008 f959 	bl	8018618 <exit>
 8010366:	bf00      	nop
 8010368:	20000540 	.word	0x20000540
 801036c:	0801a6f4 	.word	0x0801a6f4
 8010370:	0801a654 	.word	0x0801a654
 8010374:	0801a6a4 	.word	0x0801a6a4

08010378 <rosidl_runtime_c__String__assign>:
 8010378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037c:	460c      	mov	r4, r1
 801037e:	b086      	sub	sp, #24
 8010380:	b1f9      	cbz	r1, 80103c2 <rosidl_runtime_c__String__assign+0x4a>
 8010382:	4605      	mov	r5, r0
 8010384:	b1d0      	cbz	r0, 80103bc <rosidl_runtime_c__String__assign+0x44>
 8010386:	4608      	mov	r0, r1
 8010388:	f7ef ff54 	bl	8000234 <strlen>
 801038c:	4606      	mov	r6, r0
 801038e:	f106 0801 	add.w	r8, r6, #1
 8010392:	a801      	add	r0, sp, #4
 8010394:	f7fd fdcc 	bl	800df30 <rcutils_get_default_allocator>
 8010398:	9b03      	ldr	r3, [sp, #12]
 801039a:	9a05      	ldr	r2, [sp, #20]
 801039c:	6828      	ldr	r0, [r5, #0]
 801039e:	4641      	mov	r1, r8
 80103a0:	4798      	blx	r3
 80103a2:	4607      	mov	r7, r0
 80103a4:	b150      	cbz	r0, 80103bc <rosidl_runtime_c__String__assign+0x44>
 80103a6:	4621      	mov	r1, r4
 80103a8:	4632      	mov	r2, r6
 80103aa:	f008 fecc 	bl	8019146 <memcpy>
 80103ae:	2300      	movs	r3, #0
 80103b0:	55bb      	strb	r3, [r7, r6]
 80103b2:	e9c5 7600 	strd	r7, r6, [r5]
 80103b6:	2001      	movs	r0, #1
 80103b8:	f8c5 8008 	str.w	r8, [r5, #8]
 80103bc:	b006      	add	sp, #24
 80103be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c2:	4608      	mov	r0, r1
 80103c4:	b006      	add	sp, #24
 80103c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ca:	bf00      	nop

080103cc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80103cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d0:	6805      	ldr	r5, [r0, #0]
 80103d2:	4604      	mov	r4, r0
 80103d4:	4628      	mov	r0, r5
 80103d6:	460e      	mov	r6, r1
 80103d8:	f7ef ff22 	bl	8000220 <strcmp>
 80103dc:	b1c8      	cbz	r0, 8010412 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80103de:	4b11      	ldr	r3, [pc, #68]	@ (8010424 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	429d      	cmp	r5, r3
 80103e4:	d112      	bne.n	801040c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80103e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80103ea:	f8d8 4000 	ldr.w	r4, [r8]
 80103ee:	b16c      	cbz	r4, 801040c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80103f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80103f4:	2700      	movs	r7, #0
 80103f6:	3d04      	subs	r5, #4
 80103f8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80103fc:	4631      	mov	r1, r6
 80103fe:	f7ef ff0f 	bl	8000220 <strcmp>
 8010402:	00bb      	lsls	r3, r7, #2
 8010404:	b140      	cbz	r0, 8010418 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8010406:	3701      	adds	r7, #1
 8010408:	42bc      	cmp	r4, r7
 801040a:	d1f5      	bne.n	80103f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801040c:	2000      	movs	r0, #0
 801040e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010412:	4620      	mov	r0, r4
 8010414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010418:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801041c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010420:	58d3      	ldr	r3, [r2, r3]
 8010422:	4718      	bx	r3
 8010424:	200001d0 	.word	0x200001d0

08010428 <rrr_robot_interfaces__srv__RRRMode_Request__init>:
 8010428:	b570      	push	{r4, r5, r6, lr}
 801042a:	4605      	mov	r5, r0
 801042c:	b1a8      	cbz	r0, 801045a <rrr_robot_interfaces__srv__RRRMode_Request__init+0x32>
 801042e:	f7ff ff45 	bl	80102bc <rosidl_runtime_c__String__init>
 8010432:	4604      	mov	r4, r0
 8010434:	b140      	cbz	r0, 8010448 <rrr_robot_interfaces__srv__RRRMode_Request__init+0x20>
 8010436:	f105 060c 	add.w	r6, r5, #12
 801043a:	4630      	mov	r0, r6
 801043c:	f7ff ff3e 	bl	80102bc <rosidl_runtime_c__String__init>
 8010440:	4604      	mov	r4, r0
 8010442:	b168      	cbz	r0, 8010460 <rrr_robot_interfaces__srv__RRRMode_Request__init+0x38>
 8010444:	4620      	mov	r0, r4
 8010446:	bd70      	pop	{r4, r5, r6, pc}
 8010448:	4628      	mov	r0, r5
 801044a:	f7ff ff4d 	bl	80102e8 <rosidl_runtime_c__String__fini>
 801044e:	f105 000c 	add.w	r0, r5, #12
 8010452:	f7ff ff49 	bl	80102e8 <rosidl_runtime_c__String__fini>
 8010456:	4620      	mov	r0, r4
 8010458:	bd70      	pop	{r4, r5, r6, pc}
 801045a:	4604      	mov	r4, r0
 801045c:	4620      	mov	r0, r4
 801045e:	bd70      	pop	{r4, r5, r6, pc}
 8010460:	4628      	mov	r0, r5
 8010462:	f7ff ff41 	bl	80102e8 <rosidl_runtime_c__String__fini>
 8010466:	4630      	mov	r0, r6
 8010468:	f7ff ff3e 	bl	80102e8 <rosidl_runtime_c__String__fini>
 801046c:	e7ea      	b.n	8010444 <rrr_robot_interfaces__srv__RRRMode_Request__init+0x1c>
 801046e:	bf00      	nop

08010470 <rrr_robot_interfaces__srv__RRRMode_Request__fini>:
 8010470:	b148      	cbz	r0, 8010486 <rrr_robot_interfaces__srv__RRRMode_Request__fini+0x16>
 8010472:	b510      	push	{r4, lr}
 8010474:	4604      	mov	r4, r0
 8010476:	f7ff ff37 	bl	80102e8 <rosidl_runtime_c__String__fini>
 801047a:	f104 000c 	add.w	r0, r4, #12
 801047e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010482:	f7ff bf31 	b.w	80102e8 <rosidl_runtime_c__String__fini>
 8010486:	4770      	bx	lr

08010488 <rrr_robot_interfaces__srv__RRRMode_Response__init>:
 8010488:	3800      	subs	r0, #0
 801048a:	bf18      	it	ne
 801048c:	2001      	movne	r0, #1
 801048e:	4770      	bx	lr

08010490 <rrr_robot_interfaces__srv__RRRMode_Response__fini>:
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop

08010494 <rrr_robot_interfaces__srv__RRRTargetPath_Request__init>:
 8010494:	3800      	subs	r0, #0
 8010496:	bf18      	it	ne
 8010498:	2001      	movne	r0, #1
 801049a:	4770      	bx	lr

0801049c <rrr_robot_interfaces__srv__RRRTargetPath_Request__fini>:
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop

080104a0 <rrr_robot_interfaces__srv__RRRTargetPath_Response__init>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	4604      	mov	r4, r0
 80104a4:	b128      	cbz	r0, 80104b2 <rrr_robot_interfaces__srv__RRRTargetPath_Response__init+0x12>
 80104a6:	f7ff ff09 	bl	80102bc <rosidl_runtime_c__String__init>
 80104aa:	4605      	mov	r5, r0
 80104ac:	b120      	cbz	r0, 80104b8 <rrr_robot_interfaces__srv__RRRTargetPath_Response__init+0x18>
 80104ae:	4628      	mov	r0, r5
 80104b0:	bd38      	pop	{r3, r4, r5, pc}
 80104b2:	4605      	mov	r5, r0
 80104b4:	4628      	mov	r0, r5
 80104b6:	bd38      	pop	{r3, r4, r5, pc}
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7ff ff15 	bl	80102e8 <rosidl_runtime_c__String__fini>
 80104be:	4628      	mov	r0, r5
 80104c0:	bd38      	pop	{r3, r4, r5, pc}
 80104c2:	bf00      	nop

080104c4 <rrr_robot_interfaces__srv__RRRTargetPath_Response__fini>:
 80104c4:	b108      	cbz	r0, 80104ca <rrr_robot_interfaces__srv__RRRTargetPath_Response__fini+0x6>
 80104c6:	f7ff bf0f 	b.w	80102e8 <rosidl_runtime_c__String__fini>
 80104ca:	4770      	bx	lr

080104cc <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode>:
 80104cc:	4b04      	ldr	r3, [pc, #16]	@ (80104e0 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x14>)
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	b10a      	cbz	r2, 80104d6 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0xa>
 80104d2:	4803      	ldr	r0, [pc, #12]	@ (80104e0 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x14>)
 80104d4:	4770      	bx	lr
 80104d6:	4a03      	ldr	r2, [pc, #12]	@ (80104e4 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x18>)
 80104d8:	4801      	ldr	r0, [pc, #4]	@ (80104e0 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x14>)
 80104da:	6812      	ldr	r2, [r2, #0]
 80104dc:	601a      	str	r2, [r3, #0]
 80104de:	4770      	bx	lr
 80104e0:	200001e0 	.word	0x200001e0
 80104e4:	200001d0 	.word	0x200001d0

080104e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request>:
 80104e8:	4b04      	ldr	r3, [pc, #16]	@ (80104fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x14>)
 80104ea:	4805      	ldr	r0, [pc, #20]	@ (8010500 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x18>)
 80104ec:	4905      	ldr	r1, [pc, #20]	@ (8010504 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x1c>)
 80104ee:	4a06      	ldr	r2, [pc, #24]	@ (8010508 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x20>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	6003      	str	r3, [r0, #0]
 80104f4:	600b      	str	r3, [r1, #0]
 80104f6:	6013      	str	r3, [r2, #0]
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	200001d0 	.word	0x200001d0
 8010500:	200001fc 	.word	0x200001fc
 8010504:	20000208 	.word	0x20000208
 8010508:	200001e0 	.word	0x200001e0

0801050c <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>:
 801050c:	4b04      	ldr	r3, [pc, #16]	@ (8010520 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>)
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	b10a      	cbz	r2, 8010516 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0xa>
 8010512:	4803      	ldr	r0, [pc, #12]	@ (8010520 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>)
 8010514:	4770      	bx	lr
 8010516:	4a03      	ldr	r2, [pc, #12]	@ (8010524 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x18>)
 8010518:	4801      	ldr	r0, [pc, #4]	@ (8010520 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>)
 801051a:	6812      	ldr	r2, [r2, #0]
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	4770      	bx	lr
 8010520:	2000021c 	.word	0x2000021c
 8010524:	200001d0 	.word	0x200001d0

08010528 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 8010528:	4b04      	ldr	r3, [pc, #16]	@ (801053c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 801052a:	4805      	ldr	r0, [pc, #20]	@ (8010540 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x18>)
 801052c:	4905      	ldr	r1, [pc, #20]	@ (8010544 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x1c>)
 801052e:	4a06      	ldr	r2, [pc, #24]	@ (8010548 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x20>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	6003      	str	r3, [r0, #0]
 8010534:	600b      	str	r3, [r1, #0]
 8010536:	6013      	str	r3, [r2, #0]
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	200001d0 	.word	0x200001d0
 8010540:	20000238 	.word	0x20000238
 8010544:	20000244 	.word	0x20000244
 8010548:	2000021c 	.word	0x2000021c

0801054c <rrr_robot_interfaces__srv__RRRMode_Request__rosidl_typesupport_introspection_c__RRRMode_Request_init_function>:
 801054c:	f7ff bf6c 	b.w	8010428 <rrr_robot_interfaces__srv__RRRMode_Request__init>

08010550 <rrr_robot_interfaces__srv__RRRMode_Request__rosidl_typesupport_introspection_c__RRRMode_Request_fini_function>:
 8010550:	f7ff bf8e 	b.w	8010470 <rrr_robot_interfaces__srv__RRRMode_Request__fini>

08010554 <rrr_robot_interfaces__srv__RRRMode_Response__rosidl_typesupport_introspection_c__RRRMode_Response_init_function>:
 8010554:	f7ff bf98 	b.w	8010488 <rrr_robot_interfaces__srv__RRRMode_Response__init>

08010558 <rrr_robot_interfaces__srv__RRRMode_Response__rosidl_typesupport_introspection_c__RRRMode_Response_fini_function>:
 8010558:	f7ff bf9a 	b.w	8010490 <rrr_robot_interfaces__srv__RRRMode_Response__fini>

0801055c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request>:
 801055c:	4b04      	ldr	r3, [pc, #16]	@ (8010570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x14>)
 801055e:	681a      	ldr	r2, [r3, #0]
 8010560:	b10a      	cbz	r2, 8010566 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0xa>
 8010562:	4803      	ldr	r0, [pc, #12]	@ (8010570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x14>)
 8010564:	4770      	bx	lr
 8010566:	4a03      	ldr	r2, [pc, #12]	@ (8010574 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x18>)
 8010568:	4801      	ldr	r0, [pc, #4]	@ (8010570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x14>)
 801056a:	6812      	ldr	r2, [r2, #0]
 801056c:	601a      	str	r2, [r3, #0]
 801056e:	4770      	bx	lr
 8010570:	200002c8 	.word	0x200002c8
 8010574:	200001d4 	.word	0x200001d4

08010578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response>:
 8010578:	4b04      	ldr	r3, [pc, #16]	@ (801058c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response+0x14>)
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	b10a      	cbz	r2, 8010582 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response+0xa>
 801057e:	4803      	ldr	r0, [pc, #12]	@ (801058c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response+0x14>)
 8010580:	4770      	bx	lr
 8010582:	4a03      	ldr	r2, [pc, #12]	@ (8010590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response+0x18>)
 8010584:	4801      	ldr	r0, [pc, #4]	@ (801058c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response+0x14>)
 8010586:	6812      	ldr	r2, [r2, #0]
 8010588:	601a      	str	r2, [r3, #0]
 801058a:	4770      	bx	lr
 801058c:	20000310 	.word	0x20000310
 8010590:	200001d4 	.word	0x200001d4

08010594 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode>:
 8010594:	4b13      	ldr	r3, [pc, #76]	@ (80105e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x50>)
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	b132      	cbz	r2, 80105a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x14>
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	689a      	ldr	r2, [r3, #8]
 801059e:	b152      	cbz	r2, 80105b6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x22>
 80105a0:	68da      	ldr	r2, [r3, #12]
 80105a2:	b182      	cbz	r2, 80105c6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x32>
 80105a4:	480f      	ldr	r0, [pc, #60]	@ (80105e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x50>)
 80105a6:	4770      	bx	lr
 80105a8:	4a0f      	ldr	r2, [pc, #60]	@ (80105e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x54>)
 80105aa:	6812      	ldr	r2, [r2, #0]
 80105ac:	601a      	str	r2, [r3, #0]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	689a      	ldr	r2, [r3, #8]
 80105b2:	2a00      	cmp	r2, #0
 80105b4:	d1f4      	bne.n	80105a0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0xc>
 80105b6:	4a0d      	ldr	r2, [pc, #52]	@ (80105ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x58>)
 80105b8:	6811      	ldr	r1, [r2, #0]
 80105ba:	b179      	cbz	r1, 80105dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x48>
 80105bc:	6852      	ldr	r2, [r2, #4]
 80105be:	609a      	str	r2, [r3, #8]
 80105c0:	68da      	ldr	r2, [r3, #12]
 80105c2:	2a00      	cmp	r2, #0
 80105c4:	d1ee      	bne.n	80105a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x10>
 80105c6:	4a0a      	ldr	r2, [pc, #40]	@ (80105f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x5c>)
 80105c8:	6811      	ldr	r1, [r2, #0]
 80105ca:	b119      	cbz	r1, 80105d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x40>
 80105cc:	6852      	ldr	r2, [r2, #4]
 80105ce:	4805      	ldr	r0, [pc, #20]	@ (80105e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x50>)
 80105d0:	60da      	str	r2, [r3, #12]
 80105d2:	4770      	bx	lr
 80105d4:	4904      	ldr	r1, [pc, #16]	@ (80105e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x54>)
 80105d6:	6809      	ldr	r1, [r1, #0]
 80105d8:	6011      	str	r1, [r2, #0]
 80105da:	e7f7      	b.n	80105cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x38>
 80105dc:	4902      	ldr	r1, [pc, #8]	@ (80105e8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x54>)
 80105de:	6809      	ldr	r1, [r1, #0]
 80105e0:	6011      	str	r1, [r2, #0]
 80105e2:	e7eb      	b.n	80105bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x28>
 80105e4:	2000032c 	.word	0x2000032c
 80105e8:	200001d4 	.word	0x200001d4
 80105ec:	200002c8 	.word	0x200002c8
 80105f0:	20000310 	.word	0x20000310

080105f4 <rrr_robot_interfaces__srv__RRRTargetPath_Request__rosidl_typesupport_introspection_c__RRRTargetPath_Request_init_function>:
 80105f4:	f7ff bf4e 	b.w	8010494 <rrr_robot_interfaces__srv__RRRTargetPath_Request__init>

080105f8 <rrr_robot_interfaces__srv__RRRTargetPath_Request__rosidl_typesupport_introspection_c__RRRTargetPath_Request_fini_function>:
 80105f8:	f7ff bf50 	b.w	801049c <rrr_robot_interfaces__srv__RRRTargetPath_Request__fini>

080105fc <rrr_robot_interfaces__srv__RRRTargetPath_Response__rosidl_typesupport_introspection_c__RRRTargetPath_Response_init_function>:
 80105fc:	f7ff bf50 	b.w	80104a0 <rrr_robot_interfaces__srv__RRRTargetPath_Response__init>

08010600 <rrr_robot_interfaces__srv__RRRTargetPath_Response__rosidl_typesupport_introspection_c__RRRTargetPath_Response_fini_function>:
 8010600:	f7ff bf60 	b.w	80104c4 <rrr_robot_interfaces__srv__RRRTargetPath_Response__fini>

08010604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 8010604:	4b04      	ldr	r3, [pc, #16]	@ (8010618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	b10a      	cbz	r2, 801060e <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0xa>
 801060a:	4803      	ldr	r0, [pc, #12]	@ (8010618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 801060c:	4770      	bx	lr
 801060e:	4a03      	ldr	r2, [pc, #12]	@ (801061c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x18>)
 8010610:	4801      	ldr	r0, [pc, #4]	@ (8010618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 8010612:	6812      	ldr	r2, [r2, #0]
 8010614:	601a      	str	r2, [r3, #0]
 8010616:	4770      	bx	lr
 8010618:	200003b0 	.word	0x200003b0
 801061c:	200001d4 	.word	0x200001d4

08010620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response>:
 8010620:	4b04      	ldr	r3, [pc, #16]	@ (8010634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x14>)
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	b10a      	cbz	r2, 801062a <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0xa>
 8010626:	4803      	ldr	r0, [pc, #12]	@ (8010634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x14>)
 8010628:	4770      	bx	lr
 801062a:	4a03      	ldr	r2, [pc, #12]	@ (8010638 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x18>)
 801062c:	4801      	ldr	r0, [pc, #4]	@ (8010634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x14>)
 801062e:	6812      	ldr	r2, [r2, #0]
 8010630:	601a      	str	r2, [r3, #0]
 8010632:	4770      	bx	lr
 8010634:	20000434 	.word	0x20000434
 8010638:	200001d4 	.word	0x200001d4

0801063c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>:
 801063c:	4b13      	ldr	r3, [pc, #76]	@ (801068c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x50>)
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	b132      	cbz	r2, 8010650 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	689a      	ldr	r2, [r3, #8]
 8010646:	b152      	cbz	r2, 801065e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x22>
 8010648:	68da      	ldr	r2, [r3, #12]
 801064a:	b182      	cbz	r2, 801066e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x32>
 801064c:	480f      	ldr	r0, [pc, #60]	@ (801068c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x50>)
 801064e:	4770      	bx	lr
 8010650:	4a0f      	ldr	r2, [pc, #60]	@ (8010690 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x54>)
 8010652:	6812      	ldr	r2, [r2, #0]
 8010654:	601a      	str	r2, [r3, #0]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	689a      	ldr	r2, [r3, #8]
 801065a:	2a00      	cmp	r2, #0
 801065c:	d1f4      	bne.n	8010648 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0xc>
 801065e:	4a0d      	ldr	r2, [pc, #52]	@ (8010694 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x58>)
 8010660:	6811      	ldr	r1, [r2, #0]
 8010662:	b179      	cbz	r1, 8010684 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x48>
 8010664:	6852      	ldr	r2, [r2, #4]
 8010666:	609a      	str	r2, [r3, #8]
 8010668:	68da      	ldr	r2, [r3, #12]
 801066a:	2a00      	cmp	r2, #0
 801066c:	d1ee      	bne.n	801064c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x10>
 801066e:	4a0a      	ldr	r2, [pc, #40]	@ (8010698 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x5c>)
 8010670:	6811      	ldr	r1, [r2, #0]
 8010672:	b119      	cbz	r1, 801067c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x40>
 8010674:	6852      	ldr	r2, [r2, #4]
 8010676:	4805      	ldr	r0, [pc, #20]	@ (801068c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x50>)
 8010678:	60da      	str	r2, [r3, #12]
 801067a:	4770      	bx	lr
 801067c:	4904      	ldr	r1, [pc, #16]	@ (8010690 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x54>)
 801067e:	6809      	ldr	r1, [r1, #0]
 8010680:	6011      	str	r1, [r2, #0]
 8010682:	e7f7      	b.n	8010674 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x38>
 8010684:	4902      	ldr	r1, [pc, #8]	@ (8010690 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x54>)
 8010686:	6809      	ldr	r1, [r1, #0]
 8010688:	6011      	str	r1, [r2, #0]
 801068a:	e7eb      	b.n	8010664 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x28>
 801068c:	20000450 	.word	0x20000450
 8010690:	200001d4 	.word	0x200001d4
 8010694:	200003b0 	.word	0x200003b0
 8010698:	20000434 	.word	0x20000434

0801069c <_RRRMode_Request__max_serialized_size>:
 801069c:	2000      	movs	r0, #0
 801069e:	4770      	bx	lr

080106a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request>:
 80106a0:	4800      	ldr	r0, [pc, #0]	@ (80106a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Request+0x4>)
 80106a2:	4770      	bx	lr
 80106a4:	20000478 	.word	0x20000478

080106a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response>:
 80106a8:	4800      	ldr	r0, [pc, #0]	@ (80106ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRMode_Response+0x4>)
 80106aa:	4770      	bx	lr
 80106ac:	20000484 	.word	0x20000484

080106b0 <_RRRMode_Response__max_serialized_size>:
 80106b0:	b508      	push	{r3, lr}
 80106b2:	2101      	movs	r1, #1
 80106b4:	2000      	movs	r0, #0
 80106b6:	f7fb fecf 	bl	800c458 <ucdr_alignment>
 80106ba:	3001      	adds	r0, #1
 80106bc:	bd08      	pop	{r3, pc}
 80106be:	bf00      	nop

080106c0 <_RRRMode_Request__cdr_serialize>:
 80106c0:	b330      	cbz	r0, 8010710 <_RRRMode_Request__cdr_serialize+0x50>
 80106c2:	b570      	push	{r4, r5, r6, lr}
 80106c4:	6805      	ldr	r5, [r0, #0]
 80106c6:	460e      	mov	r6, r1
 80106c8:	4604      	mov	r4, r0
 80106ca:	b1ad      	cbz	r5, 80106f8 <_RRRMode_Request__cdr_serialize+0x38>
 80106cc:	4628      	mov	r0, r5
 80106ce:	f7ef fdb1 	bl	8000234 <strlen>
 80106d2:	1c42      	adds	r2, r0, #1
 80106d4:	6060      	str	r0, [r4, #4]
 80106d6:	4629      	mov	r1, r5
 80106d8:	4630      	mov	r0, r6
 80106da:	f000 f9b7 	bl	8010a4c <ucdr_serialize_sequence_char>
 80106de:	68e5      	ldr	r5, [r4, #12]
 80106e0:	b16d      	cbz	r5, 80106fe <_RRRMode_Request__cdr_serialize+0x3e>
 80106e2:	4628      	mov	r0, r5
 80106e4:	f7ef fda6 	bl	8000234 <strlen>
 80106e8:	4629      	mov	r1, r5
 80106ea:	6120      	str	r0, [r4, #16]
 80106ec:	1c42      	adds	r2, r0, #1
 80106ee:	4630      	mov	r0, r6
 80106f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106f4:	f000 b9aa 	b.w	8010a4c <ucdr_serialize_sequence_char>
 80106f8:	462a      	mov	r2, r5
 80106fa:	4628      	mov	r0, r5
 80106fc:	e7ea      	b.n	80106d4 <_RRRMode_Request__cdr_serialize+0x14>
 80106fe:	4628      	mov	r0, r5
 8010700:	6120      	str	r0, [r4, #16]
 8010702:	462a      	mov	r2, r5
 8010704:	4629      	mov	r1, r5
 8010706:	4630      	mov	r0, r6
 8010708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801070c:	f000 b99e 	b.w	8010a4c <ucdr_serialize_sequence_char>
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop

08010714 <_RRRMode_Response__cdr_deserialize>:
 8010714:	b109      	cbz	r1, 801071a <_RRRMode_Response__cdr_deserialize+0x6>
 8010716:	f7fa bd41 	b.w	800b19c <ucdr_deserialize_bool>
 801071a:	4608      	mov	r0, r1
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop

08010720 <get_serialized_size_rrr_robot_interfaces__srv__RRRMode_Request>:
 8010720:	b570      	push	{r4, r5, r6, lr}
 8010722:	4605      	mov	r5, r0
 8010724:	b190      	cbz	r0, 801074c <get_serialized_size_rrr_robot_interfaces__srv__RRRMode_Request+0x2c>
 8010726:	460c      	mov	r4, r1
 8010728:	4620      	mov	r0, r4
 801072a:	2104      	movs	r1, #4
 801072c:	f7fb fe94 	bl	800c458 <ucdr_alignment>
 8010730:	686e      	ldr	r6, [r5, #4]
 8010732:	1d63      	adds	r3, r4, #5
 8010734:	4433      	add	r3, r6
 8010736:	181e      	adds	r6, r3, r0
 8010738:	2104      	movs	r1, #4
 801073a:	4630      	mov	r0, r6
 801073c:	f7fb fe8c 	bl	800c458 <ucdr_alignment>
 8010740:	6929      	ldr	r1, [r5, #16]
 8010742:	f1c4 0405 	rsb	r4, r4, #5
 8010746:	440c      	add	r4, r1
 8010748:	4404      	add	r4, r0
 801074a:	19a0      	adds	r0, r4, r6
 801074c:	bd70      	pop	{r4, r5, r6, pc}
 801074e:	bf00      	nop

08010750 <get_serialized_size_rrr_robot_interfaces__srv__RRRMode_Response>:
 8010750:	b138      	cbz	r0, 8010762 <get_serialized_size_rrr_robot_interfaces__srv__RRRMode_Response+0x12>
 8010752:	b508      	push	{r3, lr}
 8010754:	460b      	mov	r3, r1
 8010756:	4618      	mov	r0, r3
 8010758:	2101      	movs	r1, #1
 801075a:	f7fb fe7d 	bl	800c458 <ucdr_alignment>
 801075e:	3001      	adds	r0, #1
 8010760:	bd08      	pop	{r3, pc}
 8010762:	4770      	bx	lr

08010764 <_RRRMode_Request__cdr_deserialize>:
 8010764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010766:	460c      	mov	r4, r1
 8010768:	b083      	sub	sp, #12
 801076a:	b369      	cbz	r1, 80107c8 <_RRRMode_Request__cdr_deserialize+0x64>
 801076c:	688d      	ldr	r5, [r1, #8]
 801076e:	6809      	ldr	r1, [r1, #0]
 8010770:	ab01      	add	r3, sp, #4
 8010772:	462a      	mov	r2, r5
 8010774:	4606      	mov	r6, r0
 8010776:	f000 f97b 	bl	8010a70 <ucdr_deserialize_sequence_char>
 801077a:	9b01      	ldr	r3, [sp, #4]
 801077c:	b980      	cbnz	r0, 80107a0 <_RRRMode_Request__cdr_deserialize+0x3c>
 801077e:	429d      	cmp	r5, r3
 8010780:	d328      	bcc.n	80107d4 <_RRRMode_Request__cdr_deserialize+0x70>
 8010782:	6967      	ldr	r7, [r4, #20]
 8010784:	68e1      	ldr	r1, [r4, #12]
 8010786:	ab01      	add	r3, sp, #4
 8010788:	463a      	mov	r2, r7
 801078a:	4630      	mov	r0, r6
 801078c:	f000 f970 	bl	8010a70 <ucdr_deserialize_sequence_char>
 8010790:	9b01      	ldr	r3, [sp, #4]
 8010792:	4605      	mov	r5, r0
 8010794:	b140      	cbz	r0, 80107a8 <_RRRMode_Request__cdr_deserialize+0x44>
 8010796:	b9db      	cbnz	r3, 80107d0 <_RRRMode_Request__cdr_deserialize+0x6c>
 8010798:	6123      	str	r3, [r4, #16]
 801079a:	4628      	mov	r0, r5
 801079c:	b003      	add	sp, #12
 801079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107a0:	b103      	cbz	r3, 80107a4 <_RRRMode_Request__cdr_deserialize+0x40>
 80107a2:	3b01      	subs	r3, #1
 80107a4:	6063      	str	r3, [r4, #4]
 80107a6:	e7ec      	b.n	8010782 <_RRRMode_Request__cdr_deserialize+0x1e>
 80107a8:	429f      	cmp	r7, r3
 80107aa:	d2f6      	bcs.n	801079a <_RRRMode_Request__cdr_deserialize+0x36>
 80107ac:	2101      	movs	r1, #1
 80107ae:	75b0      	strb	r0, [r6, #22]
 80107b0:	7571      	strb	r1, [r6, #21]
 80107b2:	4630      	mov	r0, r6
 80107b4:	6125      	str	r5, [r4, #16]
 80107b6:	f7fb fe65 	bl	800c484 <ucdr_align_to>
 80107ba:	4630      	mov	r0, r6
 80107bc:	9901      	ldr	r1, [sp, #4]
 80107be:	f7fb fe97 	bl	800c4f0 <ucdr_advance_buffer>
 80107c2:	4628      	mov	r0, r5
 80107c4:	b003      	add	sp, #12
 80107c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c8:	460d      	mov	r5, r1
 80107ca:	4628      	mov	r0, r5
 80107cc:	b003      	add	sp, #12
 80107ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107d0:	3b01      	subs	r3, #1
 80107d2:	e7e1      	b.n	8010798 <_RRRMode_Request__cdr_deserialize+0x34>
 80107d4:	2101      	movs	r1, #1
 80107d6:	75b0      	strb	r0, [r6, #22]
 80107d8:	7571      	strb	r1, [r6, #21]
 80107da:	6060      	str	r0, [r4, #4]
 80107dc:	4630      	mov	r0, r6
 80107de:	f7fb fe51 	bl	800c484 <ucdr_align_to>
 80107e2:	9901      	ldr	r1, [sp, #4]
 80107e4:	4630      	mov	r0, r6
 80107e6:	f7fb fe83 	bl	800c4f0 <ucdr_advance_buffer>
 80107ea:	e7ca      	b.n	8010782 <_RRRMode_Request__cdr_deserialize+0x1e>

080107ec <_RRRMode_Response__cdr_serialize>:
 80107ec:	460a      	mov	r2, r1
 80107ee:	b118      	cbz	r0, 80107f8 <_RRRMode_Response__cdr_serialize+0xc>
 80107f0:	7801      	ldrb	r1, [r0, #0]
 80107f2:	4610      	mov	r0, r2
 80107f4:	f7fa bcbc 	b.w	800b170 <ucdr_serialize_bool>
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop

080107fc <_RRRMode_Response__get_serialized_size>:
 80107fc:	b130      	cbz	r0, 801080c <_RRRMode_Response__get_serialized_size+0x10>
 80107fe:	b508      	push	{r3, lr}
 8010800:	2101      	movs	r1, #1
 8010802:	2000      	movs	r0, #0
 8010804:	f7fb fe28 	bl	800c458 <ucdr_alignment>
 8010808:	3001      	adds	r0, #1
 801080a:	bd08      	pop	{r3, pc}
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop

08010810 <_RRRMode_Request__get_serialized_size>:
 8010810:	b538      	push	{r3, r4, r5, lr}
 8010812:	4604      	mov	r4, r0
 8010814:	b170      	cbz	r0, 8010834 <_RRRMode_Request__get_serialized_size+0x24>
 8010816:	2104      	movs	r1, #4
 8010818:	2000      	movs	r0, #0
 801081a:	f7fb fe1d 	bl	800c458 <ucdr_alignment>
 801081e:	6863      	ldr	r3, [r4, #4]
 8010820:	3305      	adds	r3, #5
 8010822:	181d      	adds	r5, r3, r0
 8010824:	2104      	movs	r1, #4
 8010826:	4628      	mov	r0, r5
 8010828:	f7fb fe16 	bl	800c458 <ucdr_alignment>
 801082c:	6923      	ldr	r3, [r4, #16]
 801082e:	3305      	adds	r3, #5
 8010830:	4418      	add	r0, r3
 8010832:	4428      	add	r0, r5
 8010834:	bd38      	pop	{r3, r4, r5, pc}
 8010836:	bf00      	nop

08010838 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode>:
 8010838:	4800      	ldr	r0, [pc, #0]	@ (801083c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRMode+0x4>)
 801083a:	4770      	bx	lr
 801083c:	2000046c 	.word	0x2000046c

08010840 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 8010840:	4800      	ldr	r0, [pc, #0]	@ (8010844 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x4>)
 8010842:	4770      	bx	lr
 8010844:	200004e4 	.word	0x200004e4

08010848 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response>:
 8010848:	4800      	ldr	r0, [pc, #0]	@ (801084c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x4>)
 801084a:	4770      	bx	lr
 801084c:	200004f0 	.word	0x200004f0

08010850 <_RRRTargetPath_Response__max_serialized_size>:
 8010850:	b508      	push	{r3, lr}
 8010852:	2101      	movs	r1, #1
 8010854:	2000      	movs	r0, #0
 8010856:	f7fb fdff 	bl	800c458 <ucdr_alignment>
 801085a:	3001      	adds	r0, #1
 801085c:	bd08      	pop	{r3, pc}
 801085e:	bf00      	nop

08010860 <_RRRTargetPath_Response__cdr_serialize>:
 8010860:	b1b0      	cbz	r0, 8010890 <_RRRTargetPath_Response__cdr_serialize+0x30>
 8010862:	b570      	push	{r4, r5, r6, lr}
 8010864:	6806      	ldr	r6, [r0, #0]
 8010866:	460d      	mov	r5, r1
 8010868:	4604      	mov	r4, r0
 801086a:	b176      	cbz	r6, 801088a <_RRRTargetPath_Response__cdr_serialize+0x2a>
 801086c:	4630      	mov	r0, r6
 801086e:	f7ef fce1 	bl	8000234 <strlen>
 8010872:	1c42      	adds	r2, r0, #1
 8010874:	4631      	mov	r1, r6
 8010876:	6060      	str	r0, [r4, #4]
 8010878:	4628      	mov	r0, r5
 801087a:	f000 f8e7 	bl	8010a4c <ucdr_serialize_sequence_char>
 801087e:	7b21      	ldrb	r1, [r4, #12]
 8010880:	4628      	mov	r0, r5
 8010882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010886:	f7fa bc73 	b.w	800b170 <ucdr_serialize_bool>
 801088a:	4632      	mov	r2, r6
 801088c:	4630      	mov	r0, r6
 801088e:	e7f1      	b.n	8010874 <_RRRTargetPath_Response__cdr_serialize+0x14>
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop

08010894 <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 8010894:	b180      	cbz	r0, 80108b8 <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Request+0x24>
 8010896:	b538      	push	{r3, r4, r5, lr}
 8010898:	460d      	mov	r5, r1
 801089a:	4628      	mov	r0, r5
 801089c:	2101      	movs	r1, #1
 801089e:	f7fb fddb 	bl	800c458 <ucdr_alignment>
 80108a2:	1c6b      	adds	r3, r5, #1
 80108a4:	181c      	adds	r4, r3, r0
 80108a6:	2101      	movs	r1, #1
 80108a8:	4620      	mov	r0, r4
 80108aa:	f7fb fdd5 	bl	800c458 <ucdr_alignment>
 80108ae:	f1c5 0501 	rsb	r5, r5, #1
 80108b2:	4428      	add	r0, r5
 80108b4:	4420      	add	r0, r4
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop

080108bc <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Response>:
 80108bc:	b538      	push	{r3, r4, r5, lr}
 80108be:	4604      	mov	r4, r0
 80108c0:	b180      	cbz	r0, 80108e4 <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Response+0x28>
 80108c2:	460d      	mov	r5, r1
 80108c4:	4628      	mov	r0, r5
 80108c6:	2104      	movs	r1, #4
 80108c8:	f7fb fdc6 	bl	800c458 <ucdr_alignment>
 80108cc:	6864      	ldr	r4, [r4, #4]
 80108ce:	1d6b      	adds	r3, r5, #5
 80108d0:	4423      	add	r3, r4
 80108d2:	181c      	adds	r4, r3, r0
 80108d4:	2101      	movs	r1, #1
 80108d6:	4620      	mov	r0, r4
 80108d8:	f7fb fdbe 	bl	800c458 <ucdr_alignment>
 80108dc:	f1c5 0501 	rsb	r5, r5, #1
 80108e0:	4428      	add	r0, r5
 80108e2:	4420      	add	r0, r4
 80108e4:	bd38      	pop	{r3, r4, r5, pc}
 80108e6:	bf00      	nop

080108e8 <_RRRTargetPath_Request__cdr_deserialize>:
 80108e8:	b538      	push	{r3, r4, r5, lr}
 80108ea:	460c      	mov	r4, r1
 80108ec:	b141      	cbz	r1, 8010900 <_RRRTargetPath_Request__cdr_deserialize+0x18>
 80108ee:	4605      	mov	r5, r0
 80108f0:	f7fa fc54 	bl	800b19c <ucdr_deserialize_bool>
 80108f4:	1c61      	adds	r1, r4, #1
 80108f6:	4628      	mov	r0, r5
 80108f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108fc:	f7fa bc4e 	b.w	800b19c <ucdr_deserialize_bool>
 8010900:	4608      	mov	r0, r1
 8010902:	bd38      	pop	{r3, r4, r5, pc}

08010904 <_RRRTargetPath_Request__cdr_serialize>:
 8010904:	b160      	cbz	r0, 8010920 <_RRRTargetPath_Request__cdr_serialize+0x1c>
 8010906:	b538      	push	{r3, r4, r5, lr}
 8010908:	460d      	mov	r5, r1
 801090a:	4604      	mov	r4, r0
 801090c:	7801      	ldrb	r1, [r0, #0]
 801090e:	4628      	mov	r0, r5
 8010910:	f7fa fc2e 	bl	800b170 <ucdr_serialize_bool>
 8010914:	7861      	ldrb	r1, [r4, #1]
 8010916:	4628      	mov	r0, r5
 8010918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801091c:	f7fa bc28 	b.w	800b170 <ucdr_serialize_bool>
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop

08010924 <_RRRTargetPath_Response__cdr_deserialize>:
 8010924:	b570      	push	{r4, r5, r6, lr}
 8010926:	460c      	mov	r4, r1
 8010928:	b082      	sub	sp, #8
 801092a:	b1b1      	cbz	r1, 801095a <_RRRTargetPath_Response__cdr_deserialize+0x36>
 801092c:	688e      	ldr	r6, [r1, #8]
 801092e:	6809      	ldr	r1, [r1, #0]
 8010930:	ab01      	add	r3, sp, #4
 8010932:	4632      	mov	r2, r6
 8010934:	4605      	mov	r5, r0
 8010936:	f000 f89b 	bl	8010a70 <ucdr_deserialize_sequence_char>
 801093a:	9b01      	ldr	r3, [sp, #4]
 801093c:	b948      	cbnz	r0, 8010952 <_RRRTargetPath_Response__cdr_deserialize+0x2e>
 801093e:	429e      	cmp	r6, r3
 8010940:	d30e      	bcc.n	8010960 <_RRRTargetPath_Response__cdr_deserialize+0x3c>
 8010942:	f104 010c 	add.w	r1, r4, #12
 8010946:	4628      	mov	r0, r5
 8010948:	b002      	add	sp, #8
 801094a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801094e:	f7fa bc25 	b.w	800b19c <ucdr_deserialize_bool>
 8010952:	b103      	cbz	r3, 8010956 <_RRRTargetPath_Response__cdr_deserialize+0x32>
 8010954:	3b01      	subs	r3, #1
 8010956:	6063      	str	r3, [r4, #4]
 8010958:	e7f3      	b.n	8010942 <_RRRTargetPath_Response__cdr_deserialize+0x1e>
 801095a:	4608      	mov	r0, r1
 801095c:	b002      	add	sp, #8
 801095e:	bd70      	pop	{r4, r5, r6, pc}
 8010960:	2101      	movs	r1, #1
 8010962:	75a8      	strb	r0, [r5, #22]
 8010964:	7569      	strb	r1, [r5, #21]
 8010966:	6060      	str	r0, [r4, #4]
 8010968:	4628      	mov	r0, r5
 801096a:	f7fb fd8b 	bl	800c484 <ucdr_align_to>
 801096e:	9901      	ldr	r1, [sp, #4]
 8010970:	4628      	mov	r0, r5
 8010972:	f7fb fdbd 	bl	800c4f0 <ucdr_advance_buffer>
 8010976:	e7e4      	b.n	8010942 <_RRRTargetPath_Response__cdr_deserialize+0x1e>

08010978 <_RRRTargetPath_Request__get_serialized_size>:
 8010978:	b160      	cbz	r0, 8010994 <_RRRTargetPath_Request__get_serialized_size+0x1c>
 801097a:	b510      	push	{r4, lr}
 801097c:	2101      	movs	r1, #1
 801097e:	2000      	movs	r0, #0
 8010980:	f7fb fd6a 	bl	800c458 <ucdr_alignment>
 8010984:	1c44      	adds	r4, r0, #1
 8010986:	2101      	movs	r1, #1
 8010988:	4620      	mov	r0, r4
 801098a:	f7fb fd65 	bl	800c458 <ucdr_alignment>
 801098e:	3001      	adds	r0, #1
 8010990:	4420      	add	r0, r4
 8010992:	bd10      	pop	{r4, pc}
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop

08010998 <_RRRTargetPath_Response__get_serialized_size>:
 8010998:	b510      	push	{r4, lr}
 801099a:	4604      	mov	r4, r0
 801099c:	b160      	cbz	r0, 80109b8 <_RRRTargetPath_Response__get_serialized_size+0x20>
 801099e:	2104      	movs	r1, #4
 80109a0:	2000      	movs	r0, #0
 80109a2:	f7fb fd59 	bl	800c458 <ucdr_alignment>
 80109a6:	6863      	ldr	r3, [r4, #4]
 80109a8:	3305      	adds	r3, #5
 80109aa:	181c      	adds	r4, r3, r0
 80109ac:	2101      	movs	r1, #1
 80109ae:	4620      	mov	r0, r4
 80109b0:	f7fb fd52 	bl	800c458 <ucdr_alignment>
 80109b4:	3001      	adds	r0, #1
 80109b6:	4420      	add	r0, r4
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	bf00      	nop

080109bc <_RRRTargetPath_Request__max_serialized_size>:
 80109bc:	b510      	push	{r4, lr}
 80109be:	2101      	movs	r1, #1
 80109c0:	2000      	movs	r0, #0
 80109c2:	f7fb fd49 	bl	800c458 <ucdr_alignment>
 80109c6:	1c44      	adds	r4, r0, #1
 80109c8:	2101      	movs	r1, #1
 80109ca:	4620      	mov	r0, r4
 80109cc:	f7fb fd44 	bl	800c458 <ucdr_alignment>
 80109d0:	3001      	adds	r0, #1
 80109d2:	4420      	add	r0, r4
 80109d4:	bd10      	pop	{r4, pc}
 80109d6:	bf00      	nop

080109d8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>:
 80109d8:	4800      	ldr	r0, [pc, #0]	@ (80109dc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x4>)
 80109da:	4770      	bx	lr
 80109dc:	200004d8 	.word	0x200004d8

080109e0 <geometry_msgs__msg__Twist__init>:
 80109e0:	b570      	push	{r4, r5, r6, lr}
 80109e2:	4605      	mov	r5, r0
 80109e4:	b1a8      	cbz	r0, 8010a12 <geometry_msgs__msg__Twist__init+0x32>
 80109e6:	f000 f82b 	bl	8010a40 <geometry_msgs__msg__Vector3__init>
 80109ea:	4604      	mov	r4, r0
 80109ec:	b140      	cbz	r0, 8010a00 <geometry_msgs__msg__Twist__init+0x20>
 80109ee:	f105 0618 	add.w	r6, r5, #24
 80109f2:	4630      	mov	r0, r6
 80109f4:	f000 f824 	bl	8010a40 <geometry_msgs__msg__Vector3__init>
 80109f8:	4604      	mov	r4, r0
 80109fa:	b168      	cbz	r0, 8010a18 <geometry_msgs__msg__Twist__init+0x38>
 80109fc:	4620      	mov	r0, r4
 80109fe:	bd70      	pop	{r4, r5, r6, pc}
 8010a00:	4628      	mov	r0, r5
 8010a02:	f000 f821 	bl	8010a48 <geometry_msgs__msg__Vector3__fini>
 8010a06:	f105 0018 	add.w	r0, r5, #24
 8010a0a:	f000 f81d 	bl	8010a48 <geometry_msgs__msg__Vector3__fini>
 8010a0e:	4620      	mov	r0, r4
 8010a10:	bd70      	pop	{r4, r5, r6, pc}
 8010a12:	4604      	mov	r4, r0
 8010a14:	4620      	mov	r0, r4
 8010a16:	bd70      	pop	{r4, r5, r6, pc}
 8010a18:	4628      	mov	r0, r5
 8010a1a:	f000 f815 	bl	8010a48 <geometry_msgs__msg__Vector3__fini>
 8010a1e:	4630      	mov	r0, r6
 8010a20:	f000 f812 	bl	8010a48 <geometry_msgs__msg__Vector3__fini>
 8010a24:	e7ea      	b.n	80109fc <geometry_msgs__msg__Twist__init+0x1c>
 8010a26:	bf00      	nop

08010a28 <geometry_msgs__msg__Twist__fini>:
 8010a28:	b148      	cbz	r0, 8010a3e <geometry_msgs__msg__Twist__fini+0x16>
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	f000 f80b 	bl	8010a48 <geometry_msgs__msg__Vector3__fini>
 8010a32:	f104 0018 	add.w	r0, r4, #24
 8010a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a3a:	f000 b805 	b.w	8010a48 <geometry_msgs__msg__Vector3__fini>
 8010a3e:	4770      	bx	lr

08010a40 <geometry_msgs__msg__Vector3__init>:
 8010a40:	3800      	subs	r0, #0
 8010a42:	bf18      	it	ne
 8010a44:	2001      	movne	r0, #1
 8010a46:	4770      	bx	lr

08010a48 <geometry_msgs__msg__Vector3__fini>:
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop

08010a4c <ucdr_serialize_sequence_char>:
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	4615      	mov	r5, r2
 8010a50:	460e      	mov	r6, r1
 8010a52:	7d01      	ldrb	r1, [r0, #20]
 8010a54:	4604      	mov	r4, r0
 8010a56:	f7fa fe67 	bl	800b728 <ucdr_serialize_endian_uint32_t>
 8010a5a:	b90d      	cbnz	r5, 8010a60 <ucdr_serialize_sequence_char+0x14>
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	bd70      	pop	{r4, r5, r6, pc}
 8010a60:	7d21      	ldrb	r1, [r4, #20]
 8010a62:	462b      	mov	r3, r5
 8010a64:	4632      	mov	r2, r6
 8010a66:	4620      	mov	r0, r4
 8010a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a6c:	f006 bed8 	b.w	8017820 <ucdr_serialize_endian_array_char>

08010a70 <ucdr_deserialize_sequence_char>:
 8010a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a74:	461d      	mov	r5, r3
 8010a76:	4616      	mov	r6, r2
 8010a78:	460f      	mov	r7, r1
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	7d01      	ldrb	r1, [r0, #20]
 8010a7e:	4604      	mov	r4, r0
 8010a80:	f7fa ff7a 	bl	800b978 <ucdr_deserialize_endian_uint32_t>
 8010a84:	682b      	ldr	r3, [r5, #0]
 8010a86:	429e      	cmp	r6, r3
 8010a88:	bf3c      	itt	cc
 8010a8a:	2201      	movcc	r2, #1
 8010a8c:	75a2      	strbcc	r2, [r4, #22]
 8010a8e:	b913      	cbnz	r3, 8010a96 <ucdr_deserialize_sequence_char+0x26>
 8010a90:	2001      	movs	r0, #1
 8010a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a96:	7d21      	ldrb	r1, [r4, #20]
 8010a98:	463a      	mov	r2, r7
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa0:	f006 bef0 	b.w	8017884 <ucdr_deserialize_endian_array_char>

08010aa4 <ucdr_serialize_sequence_uint8_t>:
 8010aa4:	b570      	push	{r4, r5, r6, lr}
 8010aa6:	4615      	mov	r5, r2
 8010aa8:	460e      	mov	r6, r1
 8010aaa:	7d01      	ldrb	r1, [r0, #20]
 8010aac:	4604      	mov	r4, r0
 8010aae:	f7fa fe3b 	bl	800b728 <ucdr_serialize_endian_uint32_t>
 8010ab2:	b90d      	cbnz	r5, 8010ab8 <ucdr_serialize_sequence_uint8_t+0x14>
 8010ab4:	2001      	movs	r0, #1
 8010ab6:	bd70      	pop	{r4, r5, r6, pc}
 8010ab8:	7d21      	ldrb	r1, [r4, #20]
 8010aba:	462b      	mov	r3, r5
 8010abc:	4632      	mov	r2, r6
 8010abe:	4620      	mov	r0, r4
 8010ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ac4:	f006 bf42 	b.w	801794c <ucdr_serialize_endian_array_uint8_t>

08010ac8 <ucdr_deserialize_sequence_uint8_t>:
 8010ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010acc:	461d      	mov	r5, r3
 8010ace:	4616      	mov	r6, r2
 8010ad0:	460f      	mov	r7, r1
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	7d01      	ldrb	r1, [r0, #20]
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	f7fa ff4e 	bl	800b978 <ucdr_deserialize_endian_uint32_t>
 8010adc:	682b      	ldr	r3, [r5, #0]
 8010ade:	429e      	cmp	r6, r3
 8010ae0:	bf3c      	itt	cc
 8010ae2:	2201      	movcc	r2, #1
 8010ae4:	75a2      	strbcc	r2, [r4, #22]
 8010ae6:	b913      	cbnz	r3, 8010aee <ucdr_deserialize_sequence_uint8_t+0x26>
 8010ae8:	2001      	movs	r0, #1
 8010aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aee:	7d21      	ldrb	r1, [r4, #20]
 8010af0:	463a      	mov	r2, r7
 8010af2:	4620      	mov	r0, r4
 8010af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010af8:	f006 bf8c 	b.w	8017a14 <ucdr_deserialize_endian_array_uint8_t>

08010afc <uxr_buffer_delete_entity>:
 8010afc:	b510      	push	{r4, lr}
 8010afe:	2300      	movs	r3, #0
 8010b00:	b08e      	sub	sp, #56	@ 0x38
 8010b02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010b06:	2303      	movs	r3, #3
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	2204      	movs	r2, #4
 8010b0c:	ab06      	add	r3, sp, #24
 8010b0e:	4604      	mov	r4, r0
 8010b10:	9103      	str	r1, [sp, #12]
 8010b12:	f001 fad7 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8010b16:	b918      	cbnz	r0, 8010b20 <uxr_buffer_delete_entity+0x24>
 8010b18:	4604      	mov	r4, r0
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	b00e      	add	sp, #56	@ 0x38
 8010b1e:	bd10      	pop	{r4, pc}
 8010b20:	9902      	ldr	r1, [sp, #8]
 8010b22:	aa05      	add	r2, sp, #20
 8010b24:	4620      	mov	r0, r4
 8010b26:	f001 fc03 	bl	8012330 <uxr_init_base_object_request>
 8010b2a:	a905      	add	r1, sp, #20
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	a806      	add	r0, sp, #24
 8010b30:	f003 fa2e 	bl	8013f90 <uxr_serialize_DELETE_Payload>
 8010b34:	4620      	mov	r0, r4
 8010b36:	b00e      	add	sp, #56	@ 0x38
 8010b38:	bd10      	pop	{r4, pc}
 8010b3a:	bf00      	nop

08010b3c <uxr_common_create_entity>:
 8010b3c:	b510      	push	{r4, lr}
 8010b3e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010b42:	b08c      	sub	sp, #48	@ 0x30
 8010b44:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010b48:	f1bc 0f01 	cmp.w	ip, #1
 8010b4c:	bf0c      	ite	eq
 8010b4e:	f003 0201 	andeq.w	r2, r3, #1
 8010b52:	2200      	movne	r2, #0
 8010b54:	330e      	adds	r3, #14
 8010b56:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010b5a:	9101      	str	r1, [sp, #4]
 8010b5c:	441a      	add	r2, r3
 8010b5e:	2301      	movs	r3, #1
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	9903      	ldr	r1, [sp, #12]
 8010b64:	ab04      	add	r3, sp, #16
 8010b66:	b292      	uxth	r2, r2
 8010b68:	4604      	mov	r4, r0
 8010b6a:	f001 faab 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8010b6e:	b918      	cbnz	r0, 8010b78 <uxr_common_create_entity+0x3c>
 8010b70:	4604      	mov	r4, r0
 8010b72:	4620      	mov	r0, r4
 8010b74:	b00c      	add	sp, #48	@ 0x30
 8010b76:	bd10      	pop	{r4, pc}
 8010b78:	9902      	ldr	r1, [sp, #8]
 8010b7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f001 fbd7 	bl	8012330 <uxr_init_base_object_request>
 8010b82:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010b84:	4604      	mov	r4, r0
 8010b86:	a804      	add	r0, sp, #16
 8010b88:	f003 f95e 	bl	8013e48 <uxr_serialize_CREATE_Payload>
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	b00c      	add	sp, #48	@ 0x30
 8010b90:	bd10      	pop	{r4, pc}
 8010b92:	bf00      	nop

08010b94 <uxr_buffer_create_participant_bin>:
 8010b94:	b570      	push	{r4, r5, r6, lr}
 8010b96:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010b9a:	ac11      	add	r4, sp, #68	@ 0x44
 8010b9c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010ba0:	2303      	movs	r3, #3
 8010ba2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010ba6:	7223      	strb	r3, [r4, #8]
 8010ba8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010baa:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010bae:	2201      	movs	r2, #1
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	7122      	strb	r2, [r4, #4]
 8010bb6:	f88d 1014 	strb.w	r1, [sp, #20]
 8010bba:	b1cb      	cbz	r3, 8010bf0 <uxr_buffer_create_participant_bin+0x5c>
 8010bbc:	f88d 201c 	strb.w	r2, [sp, #28]
 8010bc0:	9308      	str	r3, [sp, #32]
 8010bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bc6:	a915      	add	r1, sp, #84	@ 0x54
 8010bc8:	a809      	add	r0, sp, #36	@ 0x24
 8010bca:	f7fb fc41 	bl	800c450 <ucdr_init_buffer>
 8010bce:	a905      	add	r1, sp, #20
 8010bd0:	a809      	add	r0, sp, #36	@ 0x24
 8010bd2:	f002 fdd3 	bl	801377c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010bd8:	9600      	str	r6, [sp, #0]
 8010bda:	9401      	str	r4, [sp, #4]
 8010bdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010be0:	60e3      	str	r3, [r4, #12]
 8010be2:	4628      	mov	r0, r5
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	f7ff ffa9 	bl	8010b3c <uxr_common_create_entity>
 8010bea:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010bee:	bd70      	pop	{r4, r5, r6, pc}
 8010bf0:	f88d 301c 	strb.w	r3, [sp, #28]
 8010bf4:	e7e5      	b.n	8010bc2 <uxr_buffer_create_participant_bin+0x2e>
 8010bf6:	bf00      	nop

08010bf8 <uxr_buffer_create_topic_bin>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010bfe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010c02:	9105      	str	r1, [sp, #20]
 8010c04:	4605      	mov	r5, r0
 8010c06:	a997      	add	r1, sp, #604	@ 0x25c
 8010c08:	4618      	mov	r0, r3
 8010c0a:	2302      	movs	r3, #2
 8010c0c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010c10:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010c14:	f000 f9ea 	bl	8010fec <uxr_object_id_to_raw>
 8010c18:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010c1a:	9306      	str	r3, [sp, #24]
 8010c1c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c20:	2303      	movs	r3, #3
 8010c22:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010c26:	2301      	movs	r3, #1
 8010c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c2c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010c30:	a917      	add	r1, sp, #92	@ 0x5c
 8010c32:	2300      	movs	r3, #0
 8010c34:	a80b      	add	r0, sp, #44	@ 0x2c
 8010c36:	f88d 301c 	strb.w	r3, [sp, #28]
 8010c3a:	f7fb fc09 	bl	800c450 <ucdr_init_buffer>
 8010c3e:	a906      	add	r1, sp, #24
 8010c40:	a80b      	add	r0, sp, #44	@ 0x2c
 8010c42:	f002 fdbd 	bl	80137c0 <uxr_serialize_OBJK_Topic_Binary>
 8010c46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c48:	9316      	str	r3, [sp, #88]	@ 0x58
 8010c4a:	ac13      	add	r4, sp, #76	@ 0x4c
 8010c4c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010c50:	9600      	str	r6, [sp, #0]
 8010c52:	9401      	str	r4, [sp, #4]
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	4628      	mov	r0, r5
 8010c58:	f7ff ff70 	bl	8010b3c <uxr_common_create_entity>
 8010c5c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010c60:	bd70      	pop	{r4, r5, r6, pc}
 8010c62:	bf00      	nop

08010c64 <uxr_buffer_create_publisher_bin>:
 8010c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c66:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	9105      	str	r1, [sp, #20]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	2603      	movs	r6, #3
 8010c72:	a992      	add	r1, sp, #584	@ 0x248
 8010c74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010c78:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010c7c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010c80:	f000 f9b4 	bl	8010fec <uxr_object_id_to_raw>
 8010c84:	2300      	movs	r3, #0
 8010c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c8a:	a912      	add	r1, sp, #72	@ 0x48
 8010c8c:	a806      	add	r0, sp, #24
 8010c8e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010c92:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010c96:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010c9a:	f7fb fbd9 	bl	800c450 <ucdr_init_buffer>
 8010c9e:	a993      	add	r1, sp, #588	@ 0x24c
 8010ca0:	a806      	add	r0, sp, #24
 8010ca2:	f002 fe41 	bl	8013928 <uxr_serialize_OBJK_Publisher_Binary>
 8010ca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ca8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010caa:	ac0e      	add	r4, sp, #56	@ 0x38
 8010cac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010cb0:	9700      	str	r7, [sp, #0]
 8010cb2:	9401      	str	r4, [sp, #4]
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	4628      	mov	r0, r5
 8010cb8:	f7ff ff40 	bl	8010b3c <uxr_common_create_entity>
 8010cbc:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cc2:	bf00      	nop

08010cc4 <uxr_buffer_create_datawriter_bin>:
 8010cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010ccc:	ac1d      	add	r4, sp, #116	@ 0x74
 8010cce:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010cd2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010cd6:	9105      	str	r1, [sp, #20]
 8010cd8:	4606      	mov	r6, r0
 8010cda:	a9a1      	add	r1, sp, #644	@ 0x284
 8010cdc:	4618      	mov	r0, r3
 8010cde:	2305      	movs	r3, #5
 8010ce0:	7123      	strb	r3, [r4, #4]
 8010ce2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010ce6:	2703      	movs	r7, #3
 8010ce8:	f000 f980 	bl	8010fec <uxr_object_id_to_raw>
 8010cec:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010cee:	7227      	strb	r7, [r4, #8]
 8010cf0:	a90e      	add	r1, sp, #56	@ 0x38
 8010cf2:	f000 f97b 	bl	8010fec <uxr_object_id_to_raw>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010cfc:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010d00:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010d04:	3d00      	subs	r5, #0
 8010d06:	bf18      	it	ne
 8010d08:	2501      	movne	r5, #1
 8010d0a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010d0e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010d12:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010d16:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010d20:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010d24:	bb8a      	cbnz	r2, 8010d8a <uxr_buffer_create_datawriter_bin+0xc6>
 8010d26:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d2a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010d2e:	f04f 0c13 	mov.w	ip, #19
 8010d32:	250b      	movs	r5, #11
 8010d34:	2221      	movs	r2, #33	@ 0x21
 8010d36:	2111      	movs	r1, #17
 8010d38:	2009      	movs	r0, #9
 8010d3a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010d3e:	b923      	cbnz	r3, 8010d4a <uxr_buffer_create_datawriter_bin+0x86>
 8010d40:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010d44:	4672      	mov	r2, lr
 8010d46:	4661      	mov	r1, ip
 8010d48:	4628      	mov	r0, r5
 8010d4a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d025      	beq.n	8010d9e <uxr_buffer_create_datawriter_bin+0xda>
 8010d52:	2b03      	cmp	r3, #3
 8010d54:	d029      	beq.n	8010daa <uxr_buffer_create_datawriter_bin+0xe6>
 8010d56:	b32b      	cbz	r3, 8010da4 <uxr_buffer_create_datawriter_bin+0xe0>
 8010d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d5c:	a921      	add	r1, sp, #132	@ 0x84
 8010d5e:	a806      	add	r0, sp, #24
 8010d60:	f7fb fb76 	bl	800c450 <ucdr_init_buffer>
 8010d64:	a90e      	add	r1, sp, #56	@ 0x38
 8010d66:	a806      	add	r0, sp, #24
 8010d68:	f002 fe54 	bl	8013a14 <uxr_serialize_OBJK_DataWriter_Binary>
 8010d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d6e:	f8cd 8000 	str.w	r8, [sp]
 8010d72:	9401      	str	r4, [sp, #4]
 8010d74:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010d78:	60e3      	str	r3, [r4, #12]
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	f7ff fedd 	bl	8010b3c <uxr_common_create_entity>
 8010d82:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010d8e:	f04f 0c12 	mov.w	ip, #18
 8010d92:	250a      	movs	r5, #10
 8010d94:	2220      	movs	r2, #32
 8010d96:	2110      	movs	r1, #16
 8010d98:	2008      	movs	r0, #8
 8010d9a:	2702      	movs	r7, #2
 8010d9c:	e7cd      	b.n	8010d3a <uxr_buffer_create_datawriter_bin+0x76>
 8010d9e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010da2:	e7d9      	b.n	8010d58 <uxr_buffer_create_datawriter_bin+0x94>
 8010da4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010da8:	e7d6      	b.n	8010d58 <uxr_buffer_create_datawriter_bin+0x94>
 8010daa:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010dae:	e7d3      	b.n	8010d58 <uxr_buffer_create_datawriter_bin+0x94>

08010db0 <uxr_buffer_create_requester_bin>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8010db6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010dba:	9105      	str	r1, [sp, #20]
 8010dbc:	4605      	mov	r5, r0
 8010dbe:	a999      	add	r1, sp, #612	@ 0x264
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	2307      	movs	r3, #7
 8010dc4:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8010dc8:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8010dcc:	f000 f90e 	bl	8010fec <uxr_object_id_to_raw>
 8010dd0:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8010dd2:	9306      	str	r3, [sp, #24]
 8010dd4:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8010dd6:	9307      	str	r3, [sp, #28]
 8010dd8:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8010dda:	9308      	str	r3, [sp, #32]
 8010ddc:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8010dde:	930c      	str	r3, [sp, #48]	@ 0x30
 8010de0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010de4:	2301      	movs	r3, #1
 8010de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010dea:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010dee:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010df2:	a919      	add	r1, sp, #100	@ 0x64
 8010df4:	2303      	movs	r3, #3
 8010df6:	a80d      	add	r0, sp, #52	@ 0x34
 8010df8:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8010dfc:	f7fb fb28 	bl	800c450 <ucdr_init_buffer>
 8010e00:	a906      	add	r1, sp, #24
 8010e02:	a80d      	add	r0, sp, #52	@ 0x34
 8010e04:	f002 fe32 	bl	8013a6c <uxr_serialize_OBJK_Requester_Binary>
 8010e08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010e0a:	9318      	str	r3, [sp, #96]	@ 0x60
 8010e0c:	ac15      	add	r4, sp, #84	@ 0x54
 8010e0e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010e12:	9600      	str	r6, [sp, #0]
 8010e14:	9401      	str	r4, [sp, #4]
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f7ff fe8f 	bl	8010b3c <uxr_common_create_entity>
 8010e1e:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8010e22:	bd70      	pop	{r4, r5, r6, pc}

08010e24 <get_custom_error>:
 8010e24:	4b01      	ldr	r3, [pc, #4]	@ (8010e2c <get_custom_error+0x8>)
 8010e26:	7818      	ldrb	r0, [r3, #0]
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	2000b6ec 	.word	0x2000b6ec

08010e30 <recv_custom_msg>:
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	4693      	mov	fp, r2
 8010e36:	b089      	sub	sp, #36	@ 0x24
 8010e38:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010e3c:	9305      	str	r3, [sp, #20]
 8010e3e:	468a      	mov	sl, r1
 8010e40:	2100      	movs	r1, #0
 8010e42:	4604      	mov	r4, r0
 8010e44:	f88d 101e 	strb.w	r1, [sp, #30]
 8010e48:	b322      	cbz	r2, 8010e94 <recv_custom_msg+0x64>
 8010e4a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010e4e:	f10d 081f 	add.w	r8, sp, #31
 8010e52:	af05      	add	r7, sp, #20
 8010e54:	f10d 061e 	add.w	r6, sp, #30
 8010e58:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010e5c:	e002      	b.n	8010e64 <recv_custom_msg+0x34>
 8010e5e:	9b05      	ldr	r3, [sp, #20]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	dd0f      	ble.n	8010e84 <recv_custom_msg+0x54>
 8010e64:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010e68:	4623      	mov	r3, r4
 8010e6a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010e6e:	e9cd 5600 	strd	r5, r6, [sp]
 8010e72:	4622      	mov	r2, r4
 8010e74:	4648      	mov	r0, r9
 8010e76:	f001 fc89 	bl	801278c <uxr_read_framed_msg>
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	d0ef      	beq.n	8010e5e <recv_custom_msg+0x2e>
 8010e7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010e82:	b1b3      	cbz	r3, 8010eb2 <recv_custom_msg+0x82>
 8010e84:	4b0f      	ldr	r3, [pc, #60]	@ (8010ec4 <recv_custom_msg+0x94>)
 8010e86:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010e8a:	701a      	strb	r2, [r3, #0]
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	b009      	add	sp, #36	@ 0x24
 8010e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e94:	f10d 021f 	add.w	r2, sp, #31
 8010e98:	9200      	str	r2, [sp, #0]
 8010e9a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	47a8      	blx	r5
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d0ec      	beq.n	8010e84 <recv_custom_msg+0x54>
 8010eaa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1e8      	bne.n	8010e84 <recv_custom_msg+0x54>
 8010eb2:	f8cb 0000 	str.w	r0, [fp]
 8010eb6:	2001      	movs	r0, #1
 8010eb8:	f8ca 4000 	str.w	r4, [sl]
 8010ebc:	b009      	add	sp, #36	@ 0x24
 8010ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec2:	bf00      	nop
 8010ec4:	2000b6ec 	.word	0x2000b6ec

08010ec8 <send_custom_msg>:
 8010ec8:	b530      	push	{r4, r5, lr}
 8010eca:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8010ece:	b087      	sub	sp, #28
 8010ed0:	4615      	mov	r5, r2
 8010ed2:	b974      	cbnz	r4, 8010ef2 <send_custom_msg+0x2a>
 8010ed4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010ed8:	f10d 0317 	add.w	r3, sp, #23
 8010edc:	47a0      	blx	r4
 8010ede:	b108      	cbz	r0, 8010ee4 <send_custom_msg+0x1c>
 8010ee0:	42a8      	cmp	r0, r5
 8010ee2:	d015      	beq.n	8010f10 <send_custom_msg+0x48>
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8010f18 <send_custom_msg+0x50>)
 8010ee6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010eea:	701a      	strb	r2, [r3, #0]
 8010eec:	2000      	movs	r0, #0
 8010eee:	b007      	add	sp, #28
 8010ef0:	bd30      	pop	{r4, r5, pc}
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f10d 0117 	add.w	r1, sp, #23
 8010efa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010efe:	4602      	mov	r2, r0
 8010f00:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010f04:	9500      	str	r5, [sp, #0]
 8010f06:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010f0a:	f001 fa47 	bl	801239c <uxr_write_framed_msg>
 8010f0e:	e7e6      	b.n	8010ede <send_custom_msg+0x16>
 8010f10:	2001      	movs	r0, #1
 8010f12:	b007      	add	sp, #28
 8010f14:	bd30      	pop	{r4, r5, pc}
 8010f16:	bf00      	nop
 8010f18:	2000b6ec 	.word	0x2000b6ec

08010f1c <uxr_set_custom_transport_callbacks>:
 8010f1c:	b410      	push	{r4}
 8010f1e:	9c01      	ldr	r4, [sp, #4]
 8010f20:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010f24:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010f28:	9b02      	ldr	r3, [sp, #8]
 8010f2a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f32:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010f36:	4770      	bx	lr

08010f38 <uxr_init_custom_transport>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010f3e:	b303      	cbz	r3, 8010f82 <uxr_init_custom_transport+0x4a>
 8010f40:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010f44:	4604      	mov	r4, r0
 8010f46:	b1e2      	cbz	r2, 8010f82 <uxr_init_custom_transport+0x4a>
 8010f48:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010f4c:	b1ca      	cbz	r2, 8010f82 <uxr_init_custom_transport+0x4a>
 8010f4e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010f52:	b1b2      	cbz	r2, 8010f82 <uxr_init_custom_transport+0x4a>
 8010f54:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010f58:	4798      	blx	r3
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	b188      	cbz	r0, 8010f82 <uxr_init_custom_transport+0x4a>
 8010f5e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010f62:	b98b      	cbnz	r3, 8010f88 <uxr_init_custom_transport+0x50>
 8010f64:	490b      	ldr	r1, [pc, #44]	@ (8010f94 <uxr_init_custom_transport+0x5c>)
 8010f66:	4b0c      	ldr	r3, [pc, #48]	@ (8010f98 <uxr_init_custom_transport+0x60>)
 8010f68:	4a0c      	ldr	r2, [pc, #48]	@ (8010f9c <uxr_init_custom_transport+0x64>)
 8010f6a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010f6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010f72:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010f76:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010f7a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010f7e:	4628      	mov	r0, r5
 8010f80:	bd38      	pop	{r3, r4, r5, pc}
 8010f82:	2500      	movs	r5, #0
 8010f84:	4628      	mov	r0, r5
 8010f86:	bd38      	pop	{r3, r4, r5, pc}
 8010f88:	2100      	movs	r1, #0
 8010f8a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010f8e:	f001 f9ff 	bl	8012390 <uxr_init_framing_io>
 8010f92:	e7e7      	b.n	8010f64 <uxr_init_custom_transport+0x2c>
 8010f94:	08010ec9 	.word	0x08010ec9
 8010f98:	08010e31 	.word	0x08010e31
 8010f9c:	08010e25 	.word	0x08010e25

08010fa0 <uxr_close_custom_transport>:
 8010fa0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010fa4:	4718      	bx	r3
 8010fa6:	bf00      	nop

08010fa8 <uxr_object_id>:
 8010fa8:	b082      	sub	sp, #8
 8010faa:	2300      	movs	r3, #0
 8010fac:	f88d 1006 	strb.w	r1, [sp, #6]
 8010fb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010fb4:	f360 030f 	bfi	r3, r0, #0, #16
 8010fb8:	f362 431f 	bfi	r3, r2, #16, #16
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	b002      	add	sp, #8
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop

08010fc4 <uxr_object_id_from_raw>:
 8010fc4:	7843      	ldrb	r3, [r0, #1]
 8010fc6:	7801      	ldrb	r1, [r0, #0]
 8010fc8:	b082      	sub	sp, #8
 8010fca:	f003 020f 	and.w	r2, r3, #15
 8010fce:	f88d 2006 	strb.w	r2, [sp, #6]
 8010fd2:	091b      	lsrs	r3, r3, #4
 8010fd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010fd8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010fdc:	2000      	movs	r0, #0
 8010fde:	f363 000f 	bfi	r0, r3, #0, #16
 8010fe2:	f362 401f 	bfi	r0, r2, #16, #16
 8010fe6:	b002      	add	sp, #8
 8010fe8:	4770      	bx	lr
 8010fea:	bf00      	nop

08010fec <uxr_object_id_to_raw>:
 8010fec:	4602      	mov	r2, r0
 8010fee:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010ff8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010ffc:	f881 c000 	strb.w	ip, [r1]
 8011000:	7048      	strb	r0, [r1, #1]
 8011002:	b002      	add	sp, #8
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop

08011008 <uxr_buffer_request_data>:
 8011008:	b530      	push	{r4, r5, lr}
 801100a:	b095      	sub	sp, #84	@ 0x54
 801100c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011010:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8011012:	9303      	str	r3, [sp, #12]
 8011014:	2200      	movs	r2, #0
 8011016:	2d00      	cmp	r5, #0
 8011018:	bf14      	ite	ne
 801101a:	2101      	movne	r1, #1
 801101c:	4611      	moveq	r1, r2
 801101e:	4604      	mov	r4, r0
 8011020:	f88d 301c 	strb.w	r3, [sp, #28]
 8011024:	f88d 201d 	strb.w	r2, [sp, #29]
 8011028:	f88d 201e 	strb.w	r2, [sp, #30]
 801102c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8011030:	d021      	beq.n	8011076 <uxr_buffer_request_data+0x6e>
 8011032:	682a      	ldr	r2, [r5, #0]
 8011034:	686b      	ldr	r3, [r5, #4]
 8011036:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801103a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801103e:	2210      	movs	r2, #16
 8011040:	2308      	movs	r3, #8
 8011042:	2100      	movs	r1, #0
 8011044:	e9cd 3100 	strd	r3, r1, [sp]
 8011048:	4620      	mov	r0, r4
 801104a:	9905      	ldr	r1, [sp, #20]
 801104c:	ab0c      	add	r3, sp, #48	@ 0x30
 801104e:	f001 f839 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8011052:	b918      	cbnz	r0, 801105c <uxr_buffer_request_data+0x54>
 8011054:	4604      	mov	r4, r0
 8011056:	4620      	mov	r0, r4
 8011058:	b015      	add	sp, #84	@ 0x54
 801105a:	bd30      	pop	{r4, r5, pc}
 801105c:	9904      	ldr	r1, [sp, #16]
 801105e:	aa06      	add	r2, sp, #24
 8011060:	4620      	mov	r0, r4
 8011062:	f001 f965 	bl	8012330 <uxr_init_base_object_request>
 8011066:	a906      	add	r1, sp, #24
 8011068:	4604      	mov	r4, r0
 801106a:	a80c      	add	r0, sp, #48	@ 0x30
 801106c:	f003 f83a 	bl	80140e4 <uxr_serialize_READ_DATA_Payload>
 8011070:	4620      	mov	r0, r4
 8011072:	b015      	add	sp, #84	@ 0x54
 8011074:	bd30      	pop	{r4, r5, pc}
 8011076:	2208      	movs	r2, #8
 8011078:	e7e2      	b.n	8011040 <uxr_buffer_request_data+0x38>
 801107a:	bf00      	nop

0801107c <uxr_buffer_cancel_data>:
 801107c:	b510      	push	{r4, lr}
 801107e:	b094      	sub	sp, #80	@ 0x50
 8011080:	2300      	movs	r3, #0
 8011082:	9202      	str	r2, [sp, #8]
 8011084:	9205      	str	r2, [sp, #20]
 8011086:	9301      	str	r3, [sp, #4]
 8011088:	2201      	movs	r2, #1
 801108a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801108e:	f88d 301e 	strb.w	r3, [sp, #30]
 8011092:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8011096:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801109a:	2308      	movs	r3, #8
 801109c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80110a0:	9300      	str	r3, [sp, #0]
 80110a2:	2210      	movs	r2, #16
 80110a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80110a6:	4604      	mov	r4, r0
 80110a8:	9103      	str	r1, [sp, #12]
 80110aa:	f001 f80b 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 80110ae:	b918      	cbnz	r0, 80110b8 <uxr_buffer_cancel_data+0x3c>
 80110b0:	4604      	mov	r4, r0
 80110b2:	4620      	mov	r0, r4
 80110b4:	b014      	add	sp, #80	@ 0x50
 80110b6:	bd10      	pop	{r4, pc}
 80110b8:	9905      	ldr	r1, [sp, #20]
 80110ba:	aa06      	add	r2, sp, #24
 80110bc:	4620      	mov	r0, r4
 80110be:	f001 f937 	bl	8012330 <uxr_init_base_object_request>
 80110c2:	a906      	add	r1, sp, #24
 80110c4:	4604      	mov	r4, r0
 80110c6:	a80c      	add	r0, sp, #48	@ 0x30
 80110c8:	f003 f80c 	bl	80140e4 <uxr_serialize_READ_DATA_Payload>
 80110cc:	4620      	mov	r0, r4
 80110ce:	b014      	add	sp, #80	@ 0x50
 80110d0:	bd10      	pop	{r4, pc}
 80110d2:	bf00      	nop

080110d4 <read_submessage_format>:
 80110d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110d8:	b095      	sub	sp, #84	@ 0x54
 80110da:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80110de:	b113      	cbz	r3, 80110e6 <read_submessage_format+0x12>
 80110e0:	b015      	add	sp, #84	@ 0x54
 80110e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110e6:	460c      	mov	r4, r1
 80110e8:	4615      	mov	r5, r2
 80110ea:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80110ee:	4607      	mov	r7, r0
 80110f0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80110f2:	9004      	str	r0, [sp, #16]
 80110f4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80110f6:	9005      	str	r0, [sp, #20]
 80110f8:	1a52      	subs	r2, r2, r1
 80110fa:	a80c      	add	r0, sp, #48	@ 0x30
 80110fc:	4699      	mov	r9, r3
 80110fe:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011102:	f7fb f9a5 	bl	800c450 <ucdr_init_buffer>
 8011106:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801110a:	a80c      	add	r0, sp, #48	@ 0x30
 801110c:	f7fb f974 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 8011110:	69e2      	ldr	r2, [r4, #28]
 8011112:	b19a      	cbz	r2, 801113c <read_submessage_format+0x68>
 8011114:	f1b8 0f07 	cmp.w	r8, #7
 8011118:	f882 9014 	strb.w	r9, [r2, #20]
 801111c:	d040      	beq.n	80111a0 <read_submessage_format+0xcc>
 801111e:	f1b8 0f08 	cmp.w	r8, #8
 8011122:	d02e      	beq.n	8011182 <read_submessage_format+0xae>
 8011124:	f1b8 0f06 	cmp.w	r8, #6
 8011128:	d011      	beq.n	801114e <read_submessage_format+0x7a>
 801112a:	2301      	movs	r3, #1
 801112c:	7513      	strb	r3, [r2, #20]
 801112e:	4629      	mov	r1, r5
 8011130:	4620      	mov	r0, r4
 8011132:	f7fb f9dd 	bl	800c4f0 <ucdr_advance_buffer>
 8011136:	b015      	add	sp, #84	@ 0x54
 8011138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801113c:	f1b8 0f07 	cmp.w	r8, #7
 8011140:	d02e      	beq.n	80111a0 <read_submessage_format+0xcc>
 8011142:	f1b8 0f08 	cmp.w	r8, #8
 8011146:	d01c      	beq.n	8011182 <read_submessage_format+0xae>
 8011148:	f1b8 0f06 	cmp.w	r8, #6
 801114c:	d1ef      	bne.n	801112e <read_submessage_format+0x5a>
 801114e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011152:	f1b8 0f00 	cmp.w	r8, #0
 8011156:	d011      	beq.n	801117c <read_submessage_format+0xa8>
 8011158:	ab0c      	add	r3, sp, #48	@ 0x30
 801115a:	e9cd 3500 	strd	r3, r5, [sp]
 801115e:	2306      	movs	r3, #6
 8011160:	f88d 3016 	strb.w	r3, [sp, #22]
 8011164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011168:	9302      	str	r3, [sp, #8]
 801116a:	4632      	mov	r2, r6
 801116c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011170:	4638      	mov	r0, r7
 8011172:	47c0      	blx	r8
 8011174:	2301      	movs	r3, #1
 8011176:	69e2      	ldr	r2, [r4, #28]
 8011178:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801117c:	2a00      	cmp	r2, #0
 801117e:	d1d4      	bne.n	801112a <read_submessage_format+0x56>
 8011180:	e7d5      	b.n	801112e <read_submessage_format+0x5a>
 8011182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011186:	2b00      	cmp	r3, #0
 8011188:	d0f8      	beq.n	801117c <read_submessage_format+0xa8>
 801118a:	a906      	add	r1, sp, #24
 801118c:	a80c      	add	r0, sp, #48	@ 0x30
 801118e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011192:	f003 f86d 	bl	8014270 <uxr_deserialize_SampleIdentity>
 8011196:	b9a0      	cbnz	r0, 80111c2 <read_submessage_format+0xee>
 8011198:	69e2      	ldr	r2, [r4, #28]
 801119a:	2a00      	cmp	r2, #0
 801119c:	d1c5      	bne.n	801112a <read_submessage_format+0x56>
 801119e:	e7c6      	b.n	801112e <read_submessage_format+0x5a>
 80111a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111a4:	b13b      	cbz	r3, 80111b6 <read_submessage_format+0xe2>
 80111a6:	a906      	add	r1, sp, #24
 80111a8:	a80c      	add	r0, sp, #48	@ 0x30
 80111aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80111ae:	f002 fd33 	bl	8013c18 <uxr_deserialize_BaseObjectRequest>
 80111b2:	bb60      	cbnz	r0, 801120e <read_submessage_format+0x13a>
 80111b4:	69e2      	ldr	r2, [r4, #28]
 80111b6:	68a3      	ldr	r3, [r4, #8]
 80111b8:	442b      	add	r3, r5
 80111ba:	60a3      	str	r3, [r4, #8]
 80111bc:	2a00      	cmp	r2, #0
 80111be:	d1b4      	bne.n	801112a <read_submessage_format+0x56>
 80111c0:	e7b5      	b.n	801112e <read_submessage_format+0x5a>
 80111c2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80111c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80111c8:	1a52      	subs	r2, r2, r1
 80111ca:	eba8 0803 	sub.w	r8, r8, r3
 80111ce:	a80c      	add	r0, sp, #48	@ 0x30
 80111d0:	f7fb f93e 	bl	800c450 <ucdr_init_buffer>
 80111d4:	44a8      	add	r8, r5
 80111d6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80111da:	a80c      	add	r0, sp, #48	@ 0x30
 80111dc:	f7fb f90c 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 80111e0:	fa1f f888 	uxth.w	r8, r8
 80111e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	f8cd 8004 	str.w	r8, [sp, #4]
 80111ec:	2108      	movs	r1, #8
 80111ee:	f88d 1016 	strb.w	r1, [sp, #22]
 80111f2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80111f6:	9102      	str	r1, [sp, #8]
 80111f8:	ab06      	add	r3, sp, #24
 80111fa:	4632      	mov	r2, r6
 80111fc:	9905      	ldr	r1, [sp, #20]
 80111fe:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011202:	4638      	mov	r0, r7
 8011204:	47b0      	blx	r6
 8011206:	2301      	movs	r3, #1
 8011208:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801120c:	e7c4      	b.n	8011198 <read_submessage_format+0xc4>
 801120e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011212:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011214:	1a52      	subs	r2, r2, r1
 8011216:	a80c      	add	r0, sp, #48	@ 0x30
 8011218:	eba8 0803 	sub.w	r8, r8, r3
 801121c:	f7fb f918 	bl	800c450 <ucdr_init_buffer>
 8011220:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011224:	a80c      	add	r0, sp, #48	@ 0x30
 8011226:	f7fb f8e7 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 801122a:	ab0c      	add	r3, sp, #48	@ 0x30
 801122c:	9300      	str	r3, [sp, #0]
 801122e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011232:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011236:	44a8      	add	r8, r5
 8011238:	fa1f f888 	uxth.w	r8, r8
 801123c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011240:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011244:	2107      	movs	r1, #7
 8011246:	f88d 1016 	strb.w	r1, [sp, #22]
 801124a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801124e:	9102      	str	r1, [sp, #8]
 8011250:	4632      	mov	r2, r6
 8011252:	b29b      	uxth	r3, r3
 8011254:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8011258:	9905      	ldr	r1, [sp, #20]
 801125a:	4638      	mov	r0, r7
 801125c:	47b0      	blx	r6
 801125e:	2301      	movs	r3, #1
 8011260:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011264:	e7a6      	b.n	80111b4 <read_submessage_format+0xe0>
 8011266:	bf00      	nop

08011268 <on_get_fragmentation_info>:
 8011268:	b500      	push	{lr}
 801126a:	b08b      	sub	sp, #44	@ 0x2c
 801126c:	4601      	mov	r1, r0
 801126e:	2204      	movs	r2, #4
 8011270:	a802      	add	r0, sp, #8
 8011272:	f7fb f8ed 	bl	800c450 <ucdr_init_buffer>
 8011276:	f10d 0305 	add.w	r3, sp, #5
 801127a:	f10d 0206 	add.w	r2, sp, #6
 801127e:	a901      	add	r1, sp, #4
 8011280:	a802      	add	r0, sp, #8
 8011282:	f001 fe69 	bl	8012f58 <uxr_read_submessage_header>
 8011286:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801128a:	2b0d      	cmp	r3, #13
 801128c:	d003      	beq.n	8011296 <on_get_fragmentation_info+0x2e>
 801128e:	2000      	movs	r0, #0
 8011290:	b00b      	add	sp, #44	@ 0x2c
 8011292:	f85d fb04 	ldr.w	pc, [sp], #4
 8011296:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801129a:	f013 0f02 	tst.w	r3, #2
 801129e:	bf14      	ite	ne
 80112a0:	2002      	movne	r0, #2
 80112a2:	2001      	moveq	r0, #1
 80112a4:	b00b      	add	sp, #44	@ 0x2c
 80112a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80112aa:	bf00      	nop

080112ac <read_submessage_get_info>:
 80112ac:	b570      	push	{r4, r5, r6, lr}
 80112ae:	2500      	movs	r5, #0
 80112b0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80112b4:	4604      	mov	r4, r0
 80112b6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80112ba:	460e      	mov	r6, r1
 80112bc:	a810      	add	r0, sp, #64	@ 0x40
 80112be:	4629      	mov	r1, r5
 80112c0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80112c4:	f007 fe76 	bl	8018fb4 <memset>
 80112c8:	a903      	add	r1, sp, #12
 80112ca:	4630      	mov	r0, r6
 80112cc:	f002 fe4c 	bl	8013f68 <uxr_deserialize_GET_INFO_Payload>
 80112d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80112d4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80112d8:	4620      	mov	r0, r4
 80112da:	f001 f821 	bl	8012320 <uxr_session_header_offset>
 80112de:	462b      	mov	r3, r5
 80112e0:	9000      	str	r0, [sp, #0]
 80112e2:	220c      	movs	r2, #12
 80112e4:	a905      	add	r1, sp, #20
 80112e6:	a808      	add	r0, sp, #32
 80112e8:	f7fb f8a0 	bl	800c42c <ucdr_init_buffer_origin_offset>
 80112ec:	a910      	add	r1, sp, #64	@ 0x40
 80112ee:	a808      	add	r0, sp, #32
 80112f0:	f002 feac 	bl	801404c <uxr_serialize_INFO_Payload>
 80112f4:	9b08      	ldr	r3, [sp, #32]
 80112f6:	462a      	mov	r2, r5
 80112f8:	4629      	mov	r1, r5
 80112fa:	4620      	mov	r0, r4
 80112fc:	f000 ffba 	bl	8012274 <uxr_stamp_session_header>
 8011300:	a808      	add	r0, sp, #32
 8011302:	f7fb f8d1 	bl	800c4a8 <ucdr_buffer_length>
 8011306:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011308:	4602      	mov	r2, r0
 801130a:	a905      	add	r1, sp, #20
 801130c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011310:	47a0      	blx	r4
 8011312:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8011316:	bd70      	pop	{r4, r5, r6, pc}

08011318 <write_submessage_acknack.isra.0>:
 8011318:	b570      	push	{r4, r5, r6, lr}
 801131a:	b092      	sub	sp, #72	@ 0x48
 801131c:	4605      	mov	r5, r0
 801131e:	460e      	mov	r6, r1
 8011320:	4614      	mov	r4, r2
 8011322:	f000 fffd 	bl	8012320 <uxr_session_header_offset>
 8011326:	a905      	add	r1, sp, #20
 8011328:	9000      	str	r0, [sp, #0]
 801132a:	2300      	movs	r3, #0
 801132c:	a80a      	add	r0, sp, #40	@ 0x28
 801132e:	2211      	movs	r2, #17
 8011330:	f7fb f87c 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8011334:	2218      	movs	r2, #24
 8011336:	fb02 5404 	mla	r4, r2, r4, r5
 801133a:	2300      	movs	r3, #0
 801133c:	2205      	movs	r2, #5
 801133e:	3450      	adds	r4, #80	@ 0x50
 8011340:	210a      	movs	r1, #10
 8011342:	a80a      	add	r0, sp, #40	@ 0x28
 8011344:	f001 fdee 	bl	8012f24 <uxr_buffer_submessage_header>
 8011348:	a903      	add	r1, sp, #12
 801134a:	4620      	mov	r0, r4
 801134c:	f006 fd4e 	bl	8017dec <uxr_compute_acknack>
 8011350:	ba40      	rev16	r0, r0
 8011352:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011356:	a903      	add	r1, sp, #12
 8011358:	a80a      	add	r0, sp, #40	@ 0x28
 801135a:	f88d 6010 	strb.w	r6, [sp, #16]
 801135e:	f002 fee5 	bl	801412c <uxr_serialize_ACKNACK_Payload>
 8011362:	2200      	movs	r2, #0
 8011364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011366:	4611      	mov	r1, r2
 8011368:	4628      	mov	r0, r5
 801136a:	f000 ff83 	bl	8012274 <uxr_stamp_session_header>
 801136e:	a80a      	add	r0, sp, #40	@ 0x28
 8011370:	f7fb f89a 	bl	800c4a8 <ucdr_buffer_length>
 8011374:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8011376:	4602      	mov	r2, r0
 8011378:	a905      	add	r1, sp, #20
 801137a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801137e:	47a0      	blx	r4
 8011380:	b012      	add	sp, #72	@ 0x48
 8011382:	bd70      	pop	{r4, r5, r6, pc}
 8011384:	0000      	movs	r0, r0
	...

08011388 <uxr_init_session>:
 8011388:	b510      	push	{r4, lr}
 801138a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80113c0 <uxr_init_session+0x38>
 801138e:	2300      	movs	r3, #0
 8011390:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8011394:	4604      	mov	r4, r0
 8011396:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801139a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801139e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80113a2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80113a6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80113aa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80113ae:	2181      	movs	r1, #129	@ 0x81
 80113b0:	f000 fecc 	bl	801214c <uxr_init_session_info>
 80113b4:	f104 0008 	add.w	r0, r4, #8
 80113b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113bc:	f001 bcce 	b.w	8012d5c <uxr_init_stream_storage>
	...

080113c8 <uxr_set_status_callback>:
 80113c8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80113cc:	4770      	bx	lr
 80113ce:	bf00      	nop

080113d0 <uxr_set_topic_callback>:
 80113d0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop

080113d8 <uxr_set_request_callback>:
 80113d8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop

080113e0 <uxr_set_reply_callback>:
 80113e0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80113e4:	4770      	bx	lr
 80113e6:	bf00      	nop

080113e8 <uxr_create_output_best_effort_stream>:
 80113e8:	b510      	push	{r4, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	e9cd 2100 	strd	r2, r1, [sp]
 80113f0:	4604      	mov	r4, r0
 80113f2:	f000 ff95 	bl	8012320 <uxr_session_header_offset>
 80113f6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80113fa:	4603      	mov	r3, r0
 80113fc:	f104 0008 	add.w	r0, r4, #8
 8011400:	b004      	add	sp, #16
 8011402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011406:	f001 bcf3 	b.w	8012df0 <uxr_add_output_best_effort_buffer>
 801140a:	bf00      	nop

0801140c <uxr_create_output_reliable_stream>:
 801140c:	b510      	push	{r4, lr}
 801140e:	b088      	sub	sp, #32
 8011410:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011414:	4604      	mov	r4, r0
 8011416:	9303      	str	r3, [sp, #12]
 8011418:	f000 ff82 	bl	8012320 <uxr_session_header_offset>
 801141c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011420:	9000      	str	r0, [sp, #0]
 8011422:	9905      	ldr	r1, [sp, #20]
 8011424:	f104 0008 	add.w	r0, r4, #8
 8011428:	f001 fcf6 	bl	8012e18 <uxr_add_output_reliable_buffer>
 801142c:	2200      	movs	r2, #0
 801142e:	b2c3      	uxtb	r3, r0
 8011430:	f363 0207 	bfi	r2, r3, #0, #8
 8011434:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011438:	f363 220f 	bfi	r2, r3, #8, #8
 801143c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011440:	f363 4217 	bfi	r2, r3, #16, #8
 8011444:	0e03      	lsrs	r3, r0, #24
 8011446:	f363 621f 	bfi	r2, r3, #24, #8
 801144a:	4610      	mov	r0, r2
 801144c:	b008      	add	sp, #32
 801144e:	bd10      	pop	{r4, pc}

08011450 <uxr_create_input_best_effort_stream>:
 8011450:	b082      	sub	sp, #8
 8011452:	3008      	adds	r0, #8
 8011454:	b002      	add	sp, #8
 8011456:	f001 bcf9 	b.w	8012e4c <uxr_add_input_best_effort_buffer>
 801145a:	bf00      	nop

0801145c <uxr_create_input_reliable_stream>:
 801145c:	b510      	push	{r4, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	4c0b      	ldr	r4, [pc, #44]	@ (8011490 <uxr_create_input_reliable_stream+0x34>)
 8011462:	9400      	str	r4, [sp, #0]
 8011464:	3008      	adds	r0, #8
 8011466:	f001 fd07 	bl	8012e78 <uxr_add_input_reliable_buffer>
 801146a:	2200      	movs	r2, #0
 801146c:	b2c3      	uxtb	r3, r0
 801146e:	f363 0207 	bfi	r2, r3, #0, #8
 8011472:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011476:	f363 220f 	bfi	r2, r3, #8, #8
 801147a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801147e:	f363 4217 	bfi	r2, r3, #16, #8
 8011482:	0e03      	lsrs	r3, r0, #24
 8011484:	f363 621f 	bfi	r2, r3, #24, #8
 8011488:	4610      	mov	r0, r2
 801148a:	b004      	add	sp, #16
 801148c:	bd10      	pop	{r4, pc}
 801148e:	bf00      	nop
 8011490:	08011269 	.word	0x08011269

08011494 <uxr_epoch_nanos>:
 8011494:	b510      	push	{r4, lr}
 8011496:	4604      	mov	r4, r0
 8011498:	f001 fda4 	bl	8012fe4 <uxr_nanos>
 801149c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80114a0:	1ac0      	subs	r0, r0, r3
 80114a2:	eb61 0102 	sbc.w	r1, r1, r2
 80114a6:	bd10      	pop	{r4, pc}

080114a8 <uxr_flash_output_streams>:
 80114a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114ac:	7e03      	ldrb	r3, [r0, #24]
 80114ae:	b084      	sub	sp, #16
 80114b0:	4604      	mov	r4, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d035      	beq.n	8011522 <uxr_flash_output_streams+0x7a>
 80114b6:	f04f 0900 	mov.w	r9, #0
 80114ba:	4648      	mov	r0, r9
 80114bc:	f10d 0802 	add.w	r8, sp, #2
 80114c0:	af03      	add	r7, sp, #12
 80114c2:	ae02      	add	r6, sp, #8
 80114c4:	e006      	b.n	80114d4 <uxr_flash_output_streams+0x2c>
 80114c6:	7e23      	ldrb	r3, [r4, #24]
 80114c8:	f109 0901 	add.w	r9, r9, #1
 80114cc:	fa5f f089 	uxtb.w	r0, r9
 80114d0:	4283      	cmp	r3, r0
 80114d2:	d926      	bls.n	8011522 <uxr_flash_output_streams+0x7a>
 80114d4:	2201      	movs	r2, #1
 80114d6:	4611      	mov	r1, r2
 80114d8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80114dc:	f001 fbea 	bl	8012cb4 <uxr_stream_id>
 80114e0:	3508      	adds	r5, #8
 80114e2:	4684      	mov	ip, r0
 80114e4:	4643      	mov	r3, r8
 80114e6:	463a      	mov	r2, r7
 80114e8:	4631      	mov	r1, r6
 80114ea:	4628      	mov	r0, r5
 80114ec:	f8cd c004 	str.w	ip, [sp, #4]
 80114f0:	f006 fd02 	bl	8017ef8 <uxr_prepare_best_effort_buffer_to_send>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d0e6      	beq.n	80114c6 <uxr_flash_output_streams+0x1e>
 80114f8:	9b02      	ldr	r3, [sp, #8]
 80114fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80114fe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011502:	4620      	mov	r0, r4
 8011504:	f000 feb6 	bl	8012274 <uxr_stamp_session_header>
 8011508:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801150a:	9a03      	ldr	r2, [sp, #12]
 801150c:	685d      	ldr	r5, [r3, #4]
 801150e:	6818      	ldr	r0, [r3, #0]
 8011510:	9902      	ldr	r1, [sp, #8]
 8011512:	47a8      	blx	r5
 8011514:	f109 0901 	add.w	r9, r9, #1
 8011518:	7e23      	ldrb	r3, [r4, #24]
 801151a:	fa5f f089 	uxtb.w	r0, r9
 801151e:	4283      	cmp	r3, r0
 8011520:	d8d8      	bhi.n	80114d4 <uxr_flash_output_streams+0x2c>
 8011522:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011526:	b38b      	cbz	r3, 801158c <uxr_flash_output_streams+0xe4>
 8011528:	f04f 0900 	mov.w	r9, #0
 801152c:	f10d 0802 	add.w	r8, sp, #2
 8011530:	af03      	add	r7, sp, #12
 8011532:	ae02      	add	r6, sp, #8
 8011534:	4648      	mov	r0, r9
 8011536:	2201      	movs	r2, #1
 8011538:	2102      	movs	r1, #2
 801153a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801153e:	f001 fbb9 	bl	8012cb4 <uxr_stream_id>
 8011542:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011546:	3520      	adds	r5, #32
 8011548:	9001      	str	r0, [sp, #4]
 801154a:	e00d      	b.n	8011568 <uxr_flash_output_streams+0xc0>
 801154c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011550:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011554:	9b02      	ldr	r3, [sp, #8]
 8011556:	f000 fe8d 	bl	8012274 <uxr_stamp_session_header>
 801155a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801155c:	9a03      	ldr	r2, [sp, #12]
 801155e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011562:	9902      	ldr	r1, [sp, #8]
 8011564:	6818      	ldr	r0, [r3, #0]
 8011566:	47d0      	blx	sl
 8011568:	4643      	mov	r3, r8
 801156a:	463a      	mov	r2, r7
 801156c:	4631      	mov	r1, r6
 801156e:	4628      	mov	r0, r5
 8011570:	f006 fee0 	bl	8018334 <uxr_prepare_next_reliable_buffer_to_send>
 8011574:	4603      	mov	r3, r0
 8011576:	4620      	mov	r0, r4
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1e7      	bne.n	801154c <uxr_flash_output_streams+0xa4>
 801157c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011580:	f109 0901 	add.w	r9, r9, #1
 8011584:	fa5f f089 	uxtb.w	r0, r9
 8011588:	4283      	cmp	r3, r0
 801158a:	d8d4      	bhi.n	8011536 <uxr_flash_output_streams+0x8e>
 801158c:	b004      	add	sp, #16
 801158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011592:	bf00      	nop

08011594 <read_submessage_info>:
 8011594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011598:	460d      	mov	r5, r1
 801159a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801159e:	4669      	mov	r1, sp
 80115a0:	4607      	mov	r7, r0
 80115a2:	4628      	mov	r0, r5
 80115a4:	f002 fbee 	bl	8013d84 <uxr_deserialize_BaseObjectReply>
 80115a8:	a902      	add	r1, sp, #8
 80115aa:	4604      	mov	r4, r0
 80115ac:	4628      	mov	r0, r5
 80115ae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80115b2:	f7f9 fdf3 	bl	800b19c <ucdr_deserialize_bool>
 80115b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80115ba:	4004      	ands	r4, r0
 80115bc:	b2e4      	uxtb	r4, r4
 80115be:	b95b      	cbnz	r3, 80115d8 <read_submessage_info+0x44>
 80115c0:	a987      	add	r1, sp, #540	@ 0x21c
 80115c2:	4628      	mov	r0, r5
 80115c4:	f7f9 fdea 	bl	800b19c <ucdr_deserialize_bool>
 80115c8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80115cc:	4606      	mov	r6, r0
 80115ce:	b94b      	cbnz	r3, 80115e4 <read_submessage_info+0x50>
 80115d0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80115d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d8:	a903      	add	r1, sp, #12
 80115da:	4628      	mov	r0, r5
 80115dc:	f002 fa7a 	bl	8013ad4 <uxr_deserialize_ObjectVariant>
 80115e0:	4004      	ands	r4, r0
 80115e2:	e7ed      	b.n	80115c0 <read_submessage_info+0x2c>
 80115e4:	a988      	add	r1, sp, #544	@ 0x220
 80115e6:	4628      	mov	r0, r5
 80115e8:	f7f9 fe06 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 80115ec:	4234      	tst	r4, r6
 80115ee:	d0ef      	beq.n	80115d0 <read_submessage_info+0x3c>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d0ed      	beq.n	80115d0 <read_submessage_info+0x3c>
 80115f4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80115f8:	2b0d      	cmp	r3, #13
 80115fa:	d1e9      	bne.n	80115d0 <read_submessage_info+0x3c>
 80115fc:	a98a      	add	r1, sp, #552	@ 0x228
 80115fe:	4628      	mov	r0, r5
 8011600:	f7fa fba0 	bl	800bd44 <ucdr_deserialize_int16_t>
 8011604:	b140      	cbz	r0, 8011618 <read_submessage_info+0x84>
 8011606:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801160a:	2b00      	cmp	r3, #0
 801160c:	dd07      	ble.n	801161e <read_submessage_info+0x8a>
 801160e:	f1b8 0f00 	cmp.w	r8, #0
 8011612:	bf14      	ite	ne
 8011614:	2001      	movne	r0, #1
 8011616:	2002      	moveq	r0, #2
 8011618:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801161c:	e7d8      	b.n	80115d0 <read_submessage_info+0x3c>
 801161e:	2000      	movs	r0, #0
 8011620:	e7fa      	b.n	8011618 <read_submessage_info+0x84>
 8011622:	bf00      	nop

08011624 <read_submessage_list>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b097      	sub	sp, #92	@ 0x5c
 801162a:	4ec1      	ldr	r6, [pc, #772]	@ (8011930 <read_submessage_list+0x30c>)
 801162c:	9209      	str	r2, [sp, #36]	@ 0x24
 801162e:	4604      	mov	r4, r0
 8011630:	460d      	mov	r5, r1
 8011632:	f04f 0801 	mov.w	r8, #1
 8011636:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801163a:	aa0c      	add	r2, sp, #48	@ 0x30
 801163c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011640:	4628      	mov	r0, r5
 8011642:	f001 fc89 	bl	8012f58 <uxr_read_submessage_header>
 8011646:	2800      	cmp	r0, #0
 8011648:	f000 813e 	beq.w	80118c8 <read_submessage_list+0x2a4>
 801164c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011650:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011654:	3b02      	subs	r3, #2
 8011656:	2b0d      	cmp	r3, #13
 8011658:	d8ed      	bhi.n	8011636 <read_submessage_list+0x12>
 801165a:	a101      	add	r1, pc, #4	@ (adr r1, 8011660 <read_submessage_list+0x3c>)
 801165c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011660:	080118bf 	.word	0x080118bf
 8011664:	08011637 	.word	0x08011637
 8011668:	080118af 	.word	0x080118af
 801166c:	0801184d 	.word	0x0801184d
 8011670:	08011843 	.word	0x08011843
 8011674:	08011637 	.word	0x08011637
 8011678:	08011637 	.word	0x08011637
 801167c:	080117a3 	.word	0x080117a3
 8011680:	08011733 	.word	0x08011733
 8011684:	080116f3 	.word	0x080116f3
 8011688:	08011637 	.word	0x08011637
 801168c:	08011637 	.word	0x08011637
 8011690:	08011637 	.word	0x08011637
 8011694:	08011699 	.word	0x08011699
 8011698:	a910      	add	r1, sp, #64	@ 0x40
 801169a:	4628      	mov	r0, r5
 801169c:	f002 fd96 	bl	80141cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80116a0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80116a4:	f1b9 0f00 	cmp.w	r9, #0
 80116a8:	f000 8116 	beq.w	80118d8 <read_submessage_list+0x2b4>
 80116ac:	f001 fc9a 	bl	8012fe4 <uxr_nanos>
 80116b0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80116b2:	4602      	mov	r2, r0
 80116b4:	460b      	mov	r3, r1
 80116b6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80116b8:	2100      	movs	r1, #0
 80116ba:	468c      	mov	ip, r1
 80116bc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80116c0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80116c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80116c6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80116c8:	468c      	mov	ip, r1
 80116ca:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80116ce:	46e2      	mov	sl, ip
 80116d0:	46bc      	mov	ip, r7
 80116d2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80116d6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80116da:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80116de:	e9cd 7100 	strd	r7, r1, [sp]
 80116e2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80116e6:	9106      	str	r1, [sp, #24]
 80116e8:	4620      	mov	r0, r4
 80116ea:	47c8      	blx	r9
 80116ec:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80116f0:	e7a1      	b.n	8011636 <read_submessage_list+0x12>
 80116f2:	a910      	add	r1, sp, #64	@ 0x40
 80116f4:	4628      	mov	r0, r5
 80116f6:	f002 fd57 	bl	80141a8 <uxr_deserialize_HEARTBEAT_Payload>
 80116fa:	2100      	movs	r1, #0
 80116fc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011700:	f001 fb02 	bl	8012d08 <uxr_stream_id_from_raw>
 8011704:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011708:	900f      	str	r0, [sp, #60]	@ 0x3c
 801170a:	4639      	mov	r1, r7
 801170c:	f104 0008 	add.w	r0, r4, #8
 8011710:	f001 fbe8 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8011714:	2800      	cmp	r0, #0
 8011716:	d08e      	beq.n	8011636 <read_submessage_list+0x12>
 8011718:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801171c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011720:	f006 fb58 	bl	8017dd4 <uxr_process_heartbeat>
 8011724:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011728:	463a      	mov	r2, r7
 801172a:	4620      	mov	r0, r4
 801172c:	f7ff fdf4 	bl	8011318 <write_submessage_acknack.isra.0>
 8011730:	e781      	b.n	8011636 <read_submessage_list+0x12>
 8011732:	a910      	add	r1, sp, #64	@ 0x40
 8011734:	4628      	mov	r0, r5
 8011736:	f002 fd0f 	bl	8014158 <uxr_deserialize_ACKNACK_Payload>
 801173a:	2100      	movs	r1, #0
 801173c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011740:	f001 fae2 	bl	8012d08 <uxr_stream_id_from_raw>
 8011744:	900d      	str	r0, [sp, #52]	@ 0x34
 8011746:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801174a:	f104 0008 	add.w	r0, r4, #8
 801174e:	f001 fbb5 	bl	8012ebc <uxr_get_output_reliable_stream>
 8011752:	4607      	mov	r7, r0
 8011754:	2800      	cmp	r0, #0
 8011756:	f43f af6e 	beq.w	8011636 <read_submessage_list+0x12>
 801175a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801175e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011762:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011766:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801176a:	b289      	uxth	r1, r1
 801176c:	f006 fe8c 	bl	8018488 <uxr_process_acknack>
 8011770:	4638      	mov	r0, r7
 8011772:	f006 fe49 	bl	8018408 <uxr_begin_output_nack_buffer_it>
 8011776:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801177a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801177e:	e006      	b.n	801178e <read_submessage_list+0x16a>
 8011780:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011782:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011784:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011788:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801178a:	6818      	ldr	r0, [r3, #0]
 801178c:	47c8      	blx	r9
 801178e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011792:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011794:	4651      	mov	r1, sl
 8011796:	4638      	mov	r0, r7
 8011798:	f006 fe38 	bl	801840c <uxr_next_reliable_nack_buffer_to_send>
 801179c:	2800      	cmp	r0, #0
 801179e:	d1ef      	bne.n	8011780 <read_submessage_list+0x15c>
 80117a0:	e749      	b.n	8011636 <read_submessage_list+0x12>
 80117a2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80117a6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80117aa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80117ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80117b2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80117b6:	4651      	mov	r1, sl
 80117b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80117bc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80117c0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80117c4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80117c8:	4628      	mov	r0, r5
 80117ca:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80117ce:	f002 fa23 	bl	8013c18 <uxr_deserialize_BaseObjectRequest>
 80117d2:	4650      	mov	r0, sl
 80117d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80117d6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80117da:	f000 fdc7 	bl	801236c <uxr_parse_base_object_request>
 80117de:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80117e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80117e4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80117e8:	9110      	str	r1, [sp, #64]	@ 0x40
 80117ea:	3f04      	subs	r7, #4
 80117ec:	f009 090e 	and.w	r9, r9, #14
 80117f0:	b2bf      	uxth	r7, r7
 80117f2:	f1bb 0f00 	cmp.w	fp, #0
 80117f6:	d006      	beq.n	8011806 <read_submessage_list+0x1e2>
 80117f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	4652      	mov	r2, sl
 8011800:	2300      	movs	r3, #0
 8011802:	4620      	mov	r0, r4
 8011804:	47d8      	blx	fp
 8011806:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011808:	b16a      	cbz	r2, 8011826 <read_submessage_list+0x202>
 801180a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801180c:	2100      	movs	r1, #0
 801180e:	3802      	subs	r0, #2
 8011810:	e002      	b.n	8011818 <read_submessage_list+0x1f4>
 8011812:	3101      	adds	r1, #1
 8011814:	4291      	cmp	r1, r2
 8011816:	d006      	beq.n	8011826 <read_submessage_list+0x202>
 8011818:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801181c:	4553      	cmp	r3, sl
 801181e:	d1f8      	bne.n	8011812 <read_submessage_list+0x1ee>
 8011820:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011822:	2200      	movs	r2, #0
 8011824:	545a      	strb	r2, [r3, r1]
 8011826:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801182a:	9102      	str	r1, [sp, #8]
 801182c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801182e:	9101      	str	r1, [sp, #4]
 8011830:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011832:	9100      	str	r1, [sp, #0]
 8011834:	464b      	mov	r3, r9
 8011836:	463a      	mov	r2, r7
 8011838:	4629      	mov	r1, r5
 801183a:	4620      	mov	r0, r4
 801183c:	f7ff fc4a 	bl	80110d4 <read_submessage_format>
 8011840:	e6f9      	b.n	8011636 <read_submessage_list+0x12>
 8011842:	4629      	mov	r1, r5
 8011844:	4620      	mov	r0, r4
 8011846:	f7ff fea5 	bl	8011594 <read_submessage_info>
 801184a:	e6f4      	b.n	8011636 <read_submessage_list+0x12>
 801184c:	2a00      	cmp	r2, #0
 801184e:	d03e      	beq.n	80118ce <read_submessage_list+0x2aa>
 8011850:	a910      	add	r1, sp, #64	@ 0x40
 8011852:	4628      	mov	r0, r5
 8011854:	f002 fbdc 	bl	8014010 <uxr_deserialize_STATUS_Payload>
 8011858:	a90e      	add	r1, sp, #56	@ 0x38
 801185a:	aa0d      	add	r2, sp, #52	@ 0x34
 801185c:	a810      	add	r0, sp, #64	@ 0x40
 801185e:	f000 fd85 	bl	801236c <uxr_parse_base_object_request>
 8011862:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011866:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011868:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801186c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011870:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011872:	f1ba 0f00 	cmp.w	sl, #0
 8011876:	d006      	beq.n	8011886 <read_submessage_list+0x262>
 8011878:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	463a      	mov	r2, r7
 8011880:	464b      	mov	r3, r9
 8011882:	4620      	mov	r0, r4
 8011884:	47d0      	blx	sl
 8011886:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011888:	2a00      	cmp	r2, #0
 801188a:	f43f aed4 	beq.w	8011636 <read_submessage_list+0x12>
 801188e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011890:	2100      	movs	r1, #0
 8011892:	3802      	subs	r0, #2
 8011894:	e003      	b.n	801189e <read_submessage_list+0x27a>
 8011896:	3101      	adds	r1, #1
 8011898:	4291      	cmp	r1, r2
 801189a:	f43f aecc 	beq.w	8011636 <read_submessage_list+0x12>
 801189e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80118a2:	42bb      	cmp	r3, r7
 80118a4:	d1f7      	bne.n	8011896 <read_submessage_list+0x272>
 80118a6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80118a8:	f803 9001 	strb.w	r9, [r3, r1]
 80118ac:	e6c3      	b.n	8011636 <read_submessage_list+0x12>
 80118ae:	2a00      	cmp	r2, #0
 80118b0:	f47f aec1 	bne.w	8011636 <read_submessage_list+0x12>
 80118b4:	4629      	mov	r1, r5
 80118b6:	4620      	mov	r0, r4
 80118b8:	f000 fc9e 	bl	80121f8 <uxr_read_create_session_status>
 80118bc:	e6bb      	b.n	8011636 <read_submessage_list+0x12>
 80118be:	4629      	mov	r1, r5
 80118c0:	4620      	mov	r0, r4
 80118c2:	f7ff fcf3 	bl	80112ac <read_submessage_get_info>
 80118c6:	e6b6      	b.n	8011636 <read_submessage_list+0x12>
 80118c8:	b017      	add	sp, #92	@ 0x5c
 80118ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ce:	4629      	mov	r1, r5
 80118d0:	4620      	mov	r0, r4
 80118d2:	f000 fc9d 	bl	8012210 <uxr_read_delete_session_status>
 80118d6:	e6ae      	b.n	8011636 <read_submessage_list+0x12>
 80118d8:	f001 fb84 	bl	8012fe4 <uxr_nanos>
 80118dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80118de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80118e0:	464f      	mov	r7, r9
 80118e2:	fbc3 2706 	smlal	r2, r7, r3, r6
 80118e6:	1812      	adds	r2, r2, r0
 80118e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80118ea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80118ec:	eb47 0101 	adc.w	r1, r7, r1
 80118f0:	464f      	mov	r7, r9
 80118f2:	fbc3 0706 	smlal	r0, r7, r3, r6
 80118f6:	463b      	mov	r3, r7
 80118f8:	4684      	mov	ip, r0
 80118fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80118fe:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011902:	eb1c 0c00 	adds.w	ip, ip, r0
 8011906:	464f      	mov	r7, r9
 8011908:	eb43 0307 	adc.w	r3, r3, r7
 801190c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011910:	eb61 0303 	sbc.w	r3, r1, r3
 8011914:	0fda      	lsrs	r2, r3, #31
 8011916:	eb12 020c 	adds.w	r2, r2, ip
 801191a:	f143 0300 	adc.w	r3, r3, #0
 801191e:	0852      	lsrs	r2, r2, #1
 8011920:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011924:	105b      	asrs	r3, r3, #1
 8011926:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801192a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801192e:	e6dd      	b.n	80116ec <read_submessage_list+0xc8>
 8011930:	3b9aca00 	.word	0x3b9aca00

08011934 <listen_message_reliably>:
 8011934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011938:	1e0b      	subs	r3, r1, #0
 801193a:	b09d      	sub	sp, #116	@ 0x74
 801193c:	bfb8      	it	lt
 801193e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011942:	4680      	mov	r8, r0
 8011944:	9305      	str	r3, [sp, #20]
 8011946:	f001 fb33 	bl	8012fb0 <uxr_millis>
 801194a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801194e:	4681      	mov	r9, r0
 8011950:	2a00      	cmp	r2, #0
 8011952:	f000 80a1 	beq.w	8011a98 <listen_message_reliably+0x164>
 8011956:	2600      	movs	r6, #0
 8011958:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801195c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011960:	9303      	str	r3, [sp, #12]
 8011962:	4630      	mov	r0, r6
 8011964:	460f      	mov	r7, r1
 8011966:	e00f      	b.n	8011988 <listen_message_reliably+0x54>
 8011968:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801196c:	9903      	ldr	r1, [sp, #12]
 801196e:	455a      	cmp	r2, fp
 8011970:	f106 0601 	add.w	r6, r6, #1
 8011974:	eb73 0101 	sbcs.w	r1, r3, r1
 8011978:	b2f0      	uxtb	r0, r6
 801197a:	da01      	bge.n	8011980 <listen_message_reliably+0x4c>
 801197c:	4693      	mov	fp, r2
 801197e:	9303      	str	r3, [sp, #12]
 8011980:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011984:	4283      	cmp	r3, r0
 8011986:	d960      	bls.n	8011a4a <listen_message_reliably+0x116>
 8011988:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801198c:	2102      	movs	r1, #2
 801198e:	2201      	movs	r2, #1
 8011990:	f001 f990 	bl	8012cb4 <uxr_stream_id>
 8011994:	00e4      	lsls	r4, r4, #3
 8011996:	f104 0520 	add.w	r5, r4, #32
 801199a:	4445      	add	r5, r8
 801199c:	4601      	mov	r1, r0
 801199e:	463b      	mov	r3, r7
 80119a0:	464a      	mov	r2, r9
 80119a2:	4628      	mov	r0, r5
 80119a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80119a6:	f006 fd05 	bl	80183b4 <uxr_update_output_stream_heartbeat_timestamp>
 80119aa:	eb08 0304 	add.w	r3, r8, r4
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d0da      	beq.n	8011968 <listen_message_reliably+0x34>
 80119b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80119b6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80119ba:	9304      	str	r3, [sp, #16]
 80119bc:	4640      	mov	r0, r8
 80119be:	f000 fcaf 	bl	8012320 <uxr_session_header_offset>
 80119c2:	3501      	adds	r5, #1
 80119c4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80119c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80119cc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80119d0:	2300      	movs	r3, #0
 80119d2:	2211      	movs	r2, #17
 80119d4:	9000      	str	r0, [sp, #0]
 80119d6:	a90c      	add	r1, sp, #48	@ 0x30
 80119d8:	4650      	mov	r0, sl
 80119da:	f7fa fd27 	bl	800c42c <ucdr_init_buffer_origin_offset>
 80119de:	2300      	movs	r3, #0
 80119e0:	2205      	movs	r2, #5
 80119e2:	210b      	movs	r1, #11
 80119e4:	4650      	mov	r0, sl
 80119e6:	f001 fa9d 	bl	8012f24 <uxr_buffer_submessage_header>
 80119ea:	8968      	ldrh	r0, [r5, #10]
 80119ec:	2101      	movs	r1, #1
 80119ee:	f006 fda3 	bl	8018538 <uxr_seq_num_add>
 80119f2:	892b      	ldrh	r3, [r5, #8]
 80119f4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80119f8:	4602      	mov	r2, r0
 80119fa:	9b04      	ldr	r3, [sp, #16]
 80119fc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011a00:	a90a      	add	r1, sp, #40	@ 0x28
 8011a02:	4650      	mov	r0, sl
 8011a04:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011a08:	f002 fbba 	bl	8014180 <uxr_serialize_HEARTBEAT_Payload>
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	4611      	mov	r1, r2
 8011a10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011a12:	4640      	mov	r0, r8
 8011a14:	f000 fc2e 	bl	8012274 <uxr_stamp_session_header>
 8011a18:	4650      	mov	r0, sl
 8011a1a:	f7fa fd45 	bl	800c4a8 <ucdr_buffer_length>
 8011a1e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011a22:	4602      	mov	r2, r0
 8011a24:	a90c      	add	r1, sp, #48	@ 0x30
 8011a26:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011a2a:	4444      	add	r4, r8
 8011a2c:	47a8      	blx	r5
 8011a2e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011a32:	9903      	ldr	r1, [sp, #12]
 8011a34:	455a      	cmp	r2, fp
 8011a36:	f106 0601 	add.w	r6, r6, #1
 8011a3a:	eb73 0101 	sbcs.w	r1, r3, r1
 8011a3e:	b2f0      	uxtb	r0, r6
 8011a40:	db9c      	blt.n	801197c <listen_message_reliably+0x48>
 8011a42:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011a46:	4283      	cmp	r3, r0
 8011a48:	d89e      	bhi.n	8011988 <listen_message_reliably+0x54>
 8011a4a:	9a03      	ldr	r2, [sp, #12]
 8011a4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011a50:	429a      	cmp	r2, r3
 8011a52:	bf08      	it	eq
 8011a54:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011a58:	d01e      	beq.n	8011a98 <listen_message_reliably+0x164>
 8011a5a:	ebab 0309 	sub.w	r3, fp, r9
 8011a5e:	9905      	ldr	r1, [sp, #20]
 8011a60:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	bf08      	it	eq
 8011a68:	2301      	moveq	r3, #1
 8011a6a:	4299      	cmp	r1, r3
 8011a6c:	bfa8      	it	ge
 8011a6e:	4619      	movge	r1, r3
 8011a70:	6894      	ldr	r4, [r2, #8]
 8011a72:	6810      	ldr	r0, [r2, #0]
 8011a74:	4689      	mov	r9, r1
 8011a76:	460b      	mov	r3, r1
 8011a78:	aa08      	add	r2, sp, #32
 8011a7a:	a907      	add	r1, sp, #28
 8011a7c:	47a0      	blx	r4
 8011a7e:	b968      	cbnz	r0, 8011a9c <listen_message_reliably+0x168>
 8011a80:	9b05      	ldr	r3, [sp, #20]
 8011a82:	eba3 0309 	sub.w	r3, r3, r9
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	9305      	str	r3, [sp, #20]
 8011a8a:	f73f af5c 	bgt.w	8011946 <listen_message_reliably+0x12>
 8011a8e:	4604      	mov	r4, r0
 8011a90:	4620      	mov	r0, r4
 8011a92:	b01d      	add	sp, #116	@ 0x74
 8011a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a98:	9b05      	ldr	r3, [sp, #20]
 8011a9a:	e7e0      	b.n	8011a5e <listen_message_reliably+0x12a>
 8011a9c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	a80c      	add	r0, sp, #48	@ 0x30
 8011aa4:	f7fa fcd4 	bl	800c450 <ucdr_init_buffer>
 8011aa8:	2500      	movs	r5, #0
 8011aaa:	f10d 031a 	add.w	r3, sp, #26
 8011aae:	aa06      	add	r2, sp, #24
 8011ab0:	a90c      	add	r1, sp, #48	@ 0x30
 8011ab2:	4640      	mov	r0, r8
 8011ab4:	f88d 5018 	strb.w	r5, [sp, #24]
 8011ab8:	f000 fbf0 	bl	801229c <uxr_read_session_header>
 8011abc:	b918      	cbnz	r0, 8011ac6 <listen_message_reliably+0x192>
 8011abe:	4620      	mov	r0, r4
 8011ac0:	b01d      	add	sp, #116	@ 0x74
 8011ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011acc:	f001 f91c 	bl	8012d08 <uxr_stream_id_from_raw>
 8011ad0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011ad4:	2d01      	cmp	r5, #1
 8011ad6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011ada:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011ade:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011ae2:	d04b      	beq.n	8011b7c <listen_message_reliably+0x248>
 8011ae4:	2d02      	cmp	r5, #2
 8011ae6:	d00f      	beq.n	8011b08 <listen_message_reliably+0x1d4>
 8011ae8:	2d00      	cmp	r5, #0
 8011aea:	d1e8      	bne.n	8011abe <listen_message_reliably+0x18a>
 8011aec:	4629      	mov	r1, r5
 8011aee:	4628      	mov	r0, r5
 8011af0:	f001 f90a 	bl	8012d08 <uxr_stream_id_from_raw>
 8011af4:	a90c      	add	r1, sp, #48	@ 0x30
 8011af6:	4602      	mov	r2, r0
 8011af8:	4640      	mov	r0, r8
 8011afa:	920a      	str	r2, [sp, #40]	@ 0x28
 8011afc:	f7ff fd92 	bl	8011624 <read_submessage_list>
 8011b00:	4620      	mov	r0, r4
 8011b02:	b01d      	add	sp, #116	@ 0x74
 8011b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b08:	4631      	mov	r1, r6
 8011b0a:	f108 0008 	add.w	r0, r8, #8
 8011b0e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011b12:	f001 f9e7 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8011b16:	4607      	mov	r7, r0
 8011b18:	b338      	cbz	r0, 8011b6a <listen_message_reliably+0x236>
 8011b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b1c:	9203      	str	r2, [sp, #12]
 8011b1e:	a80c      	add	r0, sp, #48	@ 0x30
 8011b20:	f7fa fcc6 	bl	800c4b0 <ucdr_buffer_remaining>
 8011b24:	4603      	mov	r3, r0
 8011b26:	f10d 0019 	add.w	r0, sp, #25
 8011b2a:	9000      	str	r0, [sp, #0]
 8011b2c:	9a03      	ldr	r2, [sp, #12]
 8011b2e:	4651      	mov	r1, sl
 8011b30:	4638      	mov	r0, r7
 8011b32:	f006 f855 	bl	8017be0 <uxr_receive_reliable_message>
 8011b36:	b1c0      	cbz	r0, 8011b6a <listen_message_reliably+0x236>
 8011b38:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011b3c:	b393      	cbz	r3, 8011ba4 <listen_message_reliably+0x270>
 8011b3e:	ad14      	add	r5, sp, #80	@ 0x50
 8011b40:	f04f 0a02 	mov.w	sl, #2
 8011b44:	e00a      	b.n	8011b5c <listen_message_reliably+0x228>
 8011b46:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011b4a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011b4e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011b52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b54:	4629      	mov	r1, r5
 8011b56:	4640      	mov	r0, r8
 8011b58:	f7ff fd64 	bl	8011624 <read_submessage_list>
 8011b5c:	2204      	movs	r2, #4
 8011b5e:	4629      	mov	r1, r5
 8011b60:	4638      	mov	r0, r7
 8011b62:	f006 f8bd 	bl	8017ce0 <uxr_next_input_reliable_buffer_available>
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d1ed      	bne.n	8011b46 <listen_message_reliably+0x212>
 8011b6a:	4640      	mov	r0, r8
 8011b6c:	4632      	mov	r2, r6
 8011b6e:	4649      	mov	r1, r9
 8011b70:	f7ff fbd2 	bl	8011318 <write_submessage_acknack.isra.0>
 8011b74:	4620      	mov	r0, r4
 8011b76:	b01d      	add	sp, #116	@ 0x74
 8011b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	f108 0008 	add.w	r0, r8, #8
 8011b82:	f001 f9a5 	bl	8012ed0 <uxr_get_input_best_effort_stream>
 8011b86:	2800      	cmp	r0, #0
 8011b88:	d099      	beq.n	8011abe <listen_message_reliably+0x18a>
 8011b8a:	4651      	mov	r1, sl
 8011b8c:	f005 ff94 	bl	8017ab8 <uxr_receive_best_effort_message>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d094      	beq.n	8011abe <listen_message_reliably+0x18a>
 8011b94:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011b98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b9a:	a90c      	add	r1, sp, #48	@ 0x30
 8011b9c:	4640      	mov	r0, r8
 8011b9e:	f7ff fd41 	bl	8011624 <read_submessage_list>
 8011ba2:	e78c      	b.n	8011abe <listen_message_reliably+0x18a>
 8011ba4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011ba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011baa:	a90c      	add	r1, sp, #48	@ 0x30
 8011bac:	4640      	mov	r0, r8
 8011bae:	f7ff fd39 	bl	8011624 <read_submessage_list>
 8011bb2:	e7c4      	b.n	8011b3e <listen_message_reliably+0x20a>

08011bb4 <uxr_run_session_timeout>:
 8011bb4:	b570      	push	{r4, r5, r6, lr}
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	460d      	mov	r5, r1
 8011bba:	f001 f9f9 	bl	8012fb0 <uxr_millis>
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f7ff fc71 	bl	80114a8 <uxr_flash_output_streams>
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f7ff feb3 	bl	8011934 <listen_message_reliably>
 8011bce:	f001 f9ef 	bl	8012fb0 <uxr_millis>
 8011bd2:	1b83      	subs	r3, r0, r6
 8011bd4:	1ae9      	subs	r1, r5, r3
 8011bd6:	2900      	cmp	r1, #0
 8011bd8:	dcf6      	bgt.n	8011bc8 <uxr_run_session_timeout+0x14>
 8011bda:	f104 0008 	add.w	r0, r4, #8
 8011bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011be2:	f001 b989 	b.w	8012ef8 <uxr_output_streams_confirmed>
 8011be6:	bf00      	nop

08011be8 <uxr_run_session_until_data>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	4604      	mov	r4, r0
 8011bec:	460d      	mov	r5, r1
 8011bee:	f001 f9df 	bl	8012fb0 <uxr_millis>
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f7ff fc57 	bl	80114a8 <uxr_flash_output_streams>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011c00:	4629      	mov	r1, r5
 8011c02:	e005      	b.n	8011c10 <uxr_run_session_until_data+0x28>
 8011c04:	f001 f9d4 	bl	8012fb0 <uxr_millis>
 8011c08:	1b83      	subs	r3, r0, r6
 8011c0a:	1ae9      	subs	r1, r5, r3
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	dd07      	ble.n	8011c20 <uxr_run_session_until_data+0x38>
 8011c10:	4620      	mov	r0, r4
 8011c12:	f7ff fe8f 	bl	8011934 <listen_message_reliably>
 8011c16:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	d0f2      	beq.n	8011c04 <uxr_run_session_until_data+0x1c>
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011c24:	bd70      	pop	{r4, r5, r6, pc}
 8011c26:	bf00      	nop

08011c28 <uxr_run_session_until_confirm_delivery>:
 8011c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	460d      	mov	r5, r1
 8011c30:	f001 f9be 	bl	8012fb0 <uxr_millis>
 8011c34:	4607      	mov	r7, r0
 8011c36:	4630      	mov	r0, r6
 8011c38:	f7ff fc36 	bl	80114a8 <uxr_flash_output_streams>
 8011c3c:	2d00      	cmp	r5, #0
 8011c3e:	f106 0808 	add.w	r8, r6, #8
 8011c42:	bfa8      	it	ge
 8011c44:	462c      	movge	r4, r5
 8011c46:	da07      	bge.n	8011c58 <uxr_run_session_until_confirm_delivery+0x30>
 8011c48:	e00e      	b.n	8011c68 <uxr_run_session_until_confirm_delivery+0x40>
 8011c4a:	f7ff fe73 	bl	8011934 <listen_message_reliably>
 8011c4e:	f001 f9af 	bl	8012fb0 <uxr_millis>
 8011c52:	1bc3      	subs	r3, r0, r7
 8011c54:	1aec      	subs	r4, r5, r3
 8011c56:	d407      	bmi.n	8011c68 <uxr_run_session_until_confirm_delivery+0x40>
 8011c58:	4640      	mov	r0, r8
 8011c5a:	f001 f94d 	bl	8012ef8 <uxr_output_streams_confirmed>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	4621      	mov	r1, r4
 8011c62:	4630      	mov	r0, r6
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d0f0      	beq.n	8011c4a <uxr_run_session_until_confirm_delivery+0x22>
 8011c68:	4640      	mov	r0, r8
 8011c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6e:	f001 b943 	b.w	8012ef8 <uxr_output_streams_confirmed>
 8011c72:	bf00      	nop

08011c74 <uxr_run_session_until_all_status>:
 8011c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c78:	9c08      	ldr	r4, [sp, #32]
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	460f      	mov	r7, r1
 8011c7e:	4691      	mov	r9, r2
 8011c80:	461d      	mov	r5, r3
 8011c82:	f7ff fc11 	bl	80114a8 <uxr_flash_output_streams>
 8011c86:	b124      	cbz	r4, 8011c92 <uxr_run_session_until_all_status+0x1e>
 8011c88:	4622      	mov	r2, r4
 8011c8a:	21ff      	movs	r1, #255	@ 0xff
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f007 f991 	bl	8018fb4 <memset>
 8011c92:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011c96:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011c98:	f001 f98a 	bl	8012fb0 <uxr_millis>
 8011c9c:	3d01      	subs	r5, #1
 8011c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8011ca2:	4680      	mov	r8, r0
 8011ca4:	4639      	mov	r1, r7
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f7ff fe44 	bl	8011934 <listen_message_reliably>
 8011cac:	f001 f980 	bl	8012fb0 <uxr_millis>
 8011cb0:	eba0 0008 	sub.w	r0, r0, r8
 8011cb4:	1a39      	subs	r1, r7, r0
 8011cb6:	b344      	cbz	r4, 8011d0a <uxr_run_session_until_all_status+0x96>
 8011cb8:	4628      	mov	r0, r5
 8011cba:	46ac      	mov	ip, r5
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	e002      	b.n	8011cc6 <uxr_run_session_until_all_status+0x52>
 8011cc0:	42a3      	cmp	r3, r4
 8011cc2:	d20d      	bcs.n	8011ce0 <uxr_run_session_until_all_status+0x6c>
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011cca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8011cce:	d1f7      	bne.n	8011cc0 <uxr_run_session_until_all_status+0x4c>
 8011cd0:	42a3      	cmp	r3, r4
 8011cd2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011cd6:	d213      	bcs.n	8011d00 <uxr_run_session_until_all_status+0x8c>
 8011cd8:	2a00      	cmp	r2, #0
 8011cda:	d0f3      	beq.n	8011cc4 <uxr_run_session_until_all_status+0x50>
 8011cdc:	2900      	cmp	r1, #0
 8011cde:	dce2      	bgt.n	8011ca6 <uxr_run_session_until_all_status+0x32>
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011ce4:	442c      	add	r4, r5
 8011ce6:	e001      	b.n	8011cec <uxr_run_session_until_all_status+0x78>
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d812      	bhi.n	8011d12 <uxr_run_session_until_all_status+0x9e>
 8011cec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011cf0:	4284      	cmp	r4, r0
 8011cf2:	d1f9      	bne.n	8011ce8 <uxr_run_session_until_all_status+0x74>
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	bf8c      	ite	hi
 8011cf8:	2000      	movhi	r0, #0
 8011cfa:	2001      	movls	r0, #1
 8011cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d00:	2900      	cmp	r1, #0
 8011d02:	dded      	ble.n	8011ce0 <uxr_run_session_until_all_status+0x6c>
 8011d04:	2a00      	cmp	r2, #0
 8011d06:	d1ce      	bne.n	8011ca6 <uxr_run_session_until_all_status+0x32>
 8011d08:	e7ea      	b.n	8011ce0 <uxr_run_session_until_all_status+0x6c>
 8011d0a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d12:	2000      	movs	r0, #0
 8011d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011d18 <wait_session_status>:
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	b09d      	sub	sp, #116	@ 0x74
 8011d20:	20ff      	movs	r0, #255	@ 0xff
 8011d22:	7160      	strb	r0, [r4, #5]
 8011d24:	9303      	str	r3, [sp, #12]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 80b6 	beq.w	8011e98 <wait_session_status+0x180>
 8011d2c:	468a      	mov	sl, r1
 8011d2e:	4691      	mov	r9, r2
 8011d30:	f04f 0b00 	mov.w	fp, #0
 8011d34:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011d36:	464a      	mov	r2, r9
 8011d38:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011d3c:	4651      	mov	r1, sl
 8011d3e:	47a8      	blx	r5
 8011d40:	f001 f936 	bl	8012fb0 <uxr_millis>
 8011d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011d48:	4605      	mov	r5, r0
 8011d4a:	e009      	b.n	8011d60 <wait_session_status+0x48>
 8011d4c:	f001 f930 	bl	8012fb0 <uxr_millis>
 8011d50:	1b40      	subs	r0, r0, r5
 8011d52:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	dd40      	ble.n	8011ddc <wait_session_status+0xc4>
 8011d5a:	7960      	ldrb	r0, [r4, #5]
 8011d5c:	28ff      	cmp	r0, #255	@ 0xff
 8011d5e:	d145      	bne.n	8011dec <wait_session_status+0xd4>
 8011d60:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011d62:	a908      	add	r1, sp, #32
 8011d64:	6896      	ldr	r6, [r2, #8]
 8011d66:	6810      	ldr	r0, [r2, #0]
 8011d68:	aa09      	add	r2, sp, #36	@ 0x24
 8011d6a:	47b0      	blx	r6
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d0ed      	beq.n	8011d4c <wait_session_status+0x34>
 8011d70:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011d74:	a80c      	add	r0, sp, #48	@ 0x30
 8011d76:	f7fa fb6b 	bl	800c450 <ucdr_init_buffer>
 8011d7a:	2600      	movs	r6, #0
 8011d7c:	f10d 031e 	add.w	r3, sp, #30
 8011d80:	aa07      	add	r2, sp, #28
 8011d82:	a90c      	add	r1, sp, #48	@ 0x30
 8011d84:	4620      	mov	r0, r4
 8011d86:	f88d 601c 	strb.w	r6, [sp, #28]
 8011d8a:	f000 fa87 	bl	801229c <uxr_read_session_header>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d0dc      	beq.n	8011d4c <wait_session_status+0x34>
 8011d92:	4631      	mov	r1, r6
 8011d94:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011d98:	f000 ffb6 	bl	8012d08 <uxr_stream_id_from_raw>
 8011d9c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011da0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011da4:	9302      	str	r3, [sp, #8]
 8011da6:	2f01      	cmp	r7, #1
 8011da8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011dac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011db0:	d05c      	beq.n	8011e6c <wait_session_status+0x154>
 8011db2:	2f02      	cmp	r7, #2
 8011db4:	d020      	beq.n	8011df8 <wait_session_status+0xe0>
 8011db6:	2f00      	cmp	r7, #0
 8011db8:	d1c8      	bne.n	8011d4c <wait_session_status+0x34>
 8011dba:	4639      	mov	r1, r7
 8011dbc:	4638      	mov	r0, r7
 8011dbe:	f000 ffa3 	bl	8012d08 <uxr_stream_id_from_raw>
 8011dc2:	a90c      	add	r1, sp, #48	@ 0x30
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f7ff fc2b 	bl	8011624 <read_submessage_list>
 8011dce:	f001 f8ef 	bl	8012fb0 <uxr_millis>
 8011dd2:	1b40      	subs	r0, r0, r5
 8011dd4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	dcbe      	bgt.n	8011d5a <wait_session_status+0x42>
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	7960      	ldrb	r0, [r4, #5]
 8011de0:	f10b 0b01 	add.w	fp, fp, #1
 8011de4:	455b      	cmp	r3, fp
 8011de6:	d001      	beq.n	8011dec <wait_session_status+0xd4>
 8011de8:	28ff      	cmp	r0, #255	@ 0xff
 8011dea:	d0a3      	beq.n	8011d34 <wait_session_status+0x1c>
 8011dec:	38ff      	subs	r0, #255	@ 0xff
 8011dee:	bf18      	it	ne
 8011df0:	2001      	movne	r0, #1
 8011df2:	b01d      	add	sp, #116	@ 0x74
 8011df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011dfc:	9304      	str	r3, [sp, #16]
 8011dfe:	4631      	mov	r1, r6
 8011e00:	f104 0008 	add.w	r0, r4, #8
 8011e04:	f001 f86e 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8011e08:	4680      	mov	r8, r0
 8011e0a:	b348      	cbz	r0, 8011e60 <wait_session_status+0x148>
 8011e0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e0e:	9205      	str	r2, [sp, #20]
 8011e10:	a80c      	add	r0, sp, #48	@ 0x30
 8011e12:	f7fa fb4d 	bl	800c4b0 <ucdr_buffer_remaining>
 8011e16:	4603      	mov	r3, r0
 8011e18:	f10d 001d 	add.w	r0, sp, #29
 8011e1c:	9000      	str	r0, [sp, #0]
 8011e1e:	9a05      	ldr	r2, [sp, #20]
 8011e20:	9902      	ldr	r1, [sp, #8]
 8011e22:	4640      	mov	r0, r8
 8011e24:	f005 fedc 	bl	8017be0 <uxr_receive_reliable_message>
 8011e28:	b1d0      	cbz	r0, 8011e60 <wait_session_status+0x148>
 8011e2a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d03a      	beq.n	8011ea8 <wait_session_status+0x190>
 8011e32:	9f04      	ldr	r7, [sp, #16]
 8011e34:	e00a      	b.n	8011e4c <wait_session_status+0x134>
 8011e36:	f04f 0302 	mov.w	r3, #2
 8011e3a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011e3e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011e42:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011e46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e48:	f7ff fbec 	bl	8011624 <read_submessage_list>
 8011e4c:	a914      	add	r1, sp, #80	@ 0x50
 8011e4e:	2204      	movs	r2, #4
 8011e50:	4640      	mov	r0, r8
 8011e52:	f005 ff45 	bl	8017ce0 <uxr_next_input_reliable_buffer_available>
 8011e56:	4603      	mov	r3, r0
 8011e58:	a914      	add	r1, sp, #80	@ 0x50
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d1ea      	bne.n	8011e36 <wait_session_status+0x11e>
 8011e60:	9904      	ldr	r1, [sp, #16]
 8011e62:	4632      	mov	r2, r6
 8011e64:	4620      	mov	r0, r4
 8011e66:	f7ff fa57 	bl	8011318 <write_submessage_acknack.isra.0>
 8011e6a:	e76f      	b.n	8011d4c <wait_session_status+0x34>
 8011e6c:	4631      	mov	r1, r6
 8011e6e:	f104 0008 	add.w	r0, r4, #8
 8011e72:	f001 f82d 	bl	8012ed0 <uxr_get_input_best_effort_stream>
 8011e76:	2800      	cmp	r0, #0
 8011e78:	f43f af68 	beq.w	8011d4c <wait_session_status+0x34>
 8011e7c:	9902      	ldr	r1, [sp, #8]
 8011e7e:	f005 fe1b 	bl	8017ab8 <uxr_receive_best_effort_message>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	f43f af62 	beq.w	8011d4c <wait_session_status+0x34>
 8011e88:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011e8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e8e:	a90c      	add	r1, sp, #48	@ 0x30
 8011e90:	4620      	mov	r0, r4
 8011e92:	f7ff fbc7 	bl	8011624 <read_submessage_list>
 8011e96:	e759      	b.n	8011d4c <wait_session_status+0x34>
 8011e98:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011e9a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011e9e:	47a0      	blx	r4
 8011ea0:	2001      	movs	r0, #1
 8011ea2:	b01d      	add	sp, #116	@ 0x74
 8011ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011eac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011eae:	a90c      	add	r1, sp, #48	@ 0x30
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f7ff fbb7 	bl	8011624 <read_submessage_list>
 8011eb6:	e7bc      	b.n	8011e32 <wait_session_status+0x11a>

08011eb8 <uxr_delete_session_retries>:
 8011eb8:	b530      	push	{r4, r5, lr}
 8011eba:	b08f      	sub	sp, #60	@ 0x3c
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	f000 fa2e 	bl	8012320 <uxr_session_header_offset>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	2210      	movs	r2, #16
 8011ec8:	9000      	str	r0, [sp, #0]
 8011eca:	a902      	add	r1, sp, #8
 8011ecc:	a806      	add	r0, sp, #24
 8011ece:	f7fa faad 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8011ed2:	a906      	add	r1, sp, #24
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	f000 f973 	bl	80121c0 <uxr_buffer_delete_session>
 8011eda:	2200      	movs	r2, #0
 8011edc:	4611      	mov	r1, r2
 8011ede:	9b06      	ldr	r3, [sp, #24]
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f000 f9c7 	bl	8012274 <uxr_stamp_session_header>
 8011ee6:	a806      	add	r0, sp, #24
 8011ee8:	f7fa fade 	bl	800c4a8 <ucdr_buffer_length>
 8011eec:	462b      	mov	r3, r5
 8011eee:	4602      	mov	r2, r0
 8011ef0:	a902      	add	r1, sp, #8
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f7ff ff10 	bl	8011d18 <wait_session_status>
 8011ef8:	b118      	cbz	r0, 8011f02 <uxr_delete_session_retries+0x4a>
 8011efa:	7960      	ldrb	r0, [r4, #5]
 8011efc:	fab0 f080 	clz	r0, r0
 8011f00:	0940      	lsrs	r0, r0, #5
 8011f02:	b00f      	add	sp, #60	@ 0x3c
 8011f04:	bd30      	pop	{r4, r5, pc}
 8011f06:	bf00      	nop

08011f08 <uxr_create_session>:
 8011f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0c:	f100 0b08 	add.w	fp, r0, #8
 8011f10:	b0ab      	sub	sp, #172	@ 0xac
 8011f12:	4604      	mov	r4, r0
 8011f14:	4658      	mov	r0, fp
 8011f16:	f000 ff2b 	bl	8012d70 <uxr_reset_stream_storage>
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f000 fa00 	bl	8012320 <uxr_session_header_offset>
 8011f20:	2300      	movs	r3, #0
 8011f22:	9000      	str	r0, [sp, #0]
 8011f24:	221c      	movs	r2, #28
 8011f26:	a90b      	add	r1, sp, #44	@ 0x2c
 8011f28:	a812      	add	r0, sp, #72	@ 0x48
 8011f2a:	f7fa fa7f 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8011f2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f30:	8a1a      	ldrh	r2, [r3, #16]
 8011f32:	3a04      	subs	r2, #4
 8011f34:	b292      	uxth	r2, r2
 8011f36:	a912      	add	r1, sp, #72	@ 0x48
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 f917 	bl	801216c <uxr_buffer_create_session>
 8011f3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011f40:	4620      	mov	r0, r4
 8011f42:	f000 f983 	bl	801224c <uxr_stamp_create_session_header>
 8011f46:	a812      	add	r0, sp, #72	@ 0x48
 8011f48:	f7fa faae 	bl	800c4a8 <ucdr_buffer_length>
 8011f4c:	23ff      	movs	r3, #255	@ 0xff
 8011f4e:	7163      	strb	r3, [r4, #5]
 8011f50:	230a      	movs	r3, #10
 8011f52:	46da      	mov	sl, fp
 8011f54:	9303      	str	r3, [sp, #12]
 8011f56:	4683      	mov	fp, r0
 8011f58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f5a:	465a      	mov	r2, fp
 8011f5c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011f60:	a90b      	add	r1, sp, #44	@ 0x2c
 8011f62:	47a8      	blx	r5
 8011f64:	f001 f824 	bl	8012fb0 <uxr_millis>
 8011f68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	e009      	b.n	8011f84 <uxr_create_session+0x7c>
 8011f70:	f001 f81e 	bl	8012fb0 <uxr_millis>
 8011f74:	1b40      	subs	r0, r0, r5
 8011f76:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	7962      	ldrb	r2, [r4, #5]
 8011f7e:	dd38      	ble.n	8011ff2 <uxr_create_session+0xea>
 8011f80:	2aff      	cmp	r2, #255	@ 0xff
 8011f82:	d13c      	bne.n	8011ffe <uxr_create_session+0xf6>
 8011f84:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011f86:	a907      	add	r1, sp, #28
 8011f88:	6896      	ldr	r6, [r2, #8]
 8011f8a:	6810      	ldr	r0, [r2, #0]
 8011f8c:	aa08      	add	r2, sp, #32
 8011f8e:	47b0      	blx	r6
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d0ed      	beq.n	8011f70 <uxr_create_session+0x68>
 8011f94:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011f98:	a81a      	add	r0, sp, #104	@ 0x68
 8011f9a:	f7fa fa59 	bl	800c450 <ucdr_init_buffer>
 8011f9e:	2600      	movs	r6, #0
 8011fa0:	f10d 031a 	add.w	r3, sp, #26
 8011fa4:	aa06      	add	r2, sp, #24
 8011fa6:	a91a      	add	r1, sp, #104	@ 0x68
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f88d 6018 	strb.w	r6, [sp, #24]
 8011fae:	f000 f975 	bl	801229c <uxr_read_session_header>
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	d0dc      	beq.n	8011f70 <uxr_create_session+0x68>
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011fbc:	f000 fea4 	bl	8012d08 <uxr_stream_id_from_raw>
 8011fc0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011fc4:	2e01      	cmp	r6, #1
 8011fc6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011fca:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011fce:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011fd2:	d053      	beq.n	801207c <uxr_create_session+0x174>
 8011fd4:	2e02      	cmp	r6, #2
 8011fd6:	d018      	beq.n	801200a <uxr_create_session+0x102>
 8011fd8:	2e00      	cmp	r6, #0
 8011fda:	d1c9      	bne.n	8011f70 <uxr_create_session+0x68>
 8011fdc:	4631      	mov	r1, r6
 8011fde:	4630      	mov	r0, r6
 8011fe0:	f000 fe92 	bl	8012d08 <uxr_stream_id_from_raw>
 8011fe4:	a91a      	add	r1, sp, #104	@ 0x68
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fea:	4620      	mov	r0, r4
 8011fec:	f7ff fb1a 	bl	8011624 <read_submessage_list>
 8011ff0:	e7be      	b.n	8011f70 <uxr_create_session+0x68>
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	3b01      	subs	r3, #1
 8011ff6:	9303      	str	r3, [sp, #12]
 8011ff8:	d001      	beq.n	8011ffe <uxr_create_session+0xf6>
 8011ffa:	2aff      	cmp	r2, #255	@ 0xff
 8011ffc:	d0ac      	beq.n	8011f58 <uxr_create_session+0x50>
 8011ffe:	2a00      	cmp	r2, #0
 8012000:	d051      	beq.n	80120a6 <uxr_create_session+0x19e>
 8012002:	2000      	movs	r0, #0
 8012004:	b02b      	add	sp, #172	@ 0xac
 8012006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801200e:	9304      	str	r3, [sp, #16]
 8012010:	4639      	mov	r1, r7
 8012012:	4650      	mov	r0, sl
 8012014:	f000 ff66 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8012018:	4680      	mov	r8, r0
 801201a:	b348      	cbz	r0, 8012070 <uxr_create_session+0x168>
 801201c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801201e:	9205      	str	r2, [sp, #20]
 8012020:	a81a      	add	r0, sp, #104	@ 0x68
 8012022:	f7fa fa45 	bl	800c4b0 <ucdr_buffer_remaining>
 8012026:	4603      	mov	r3, r0
 8012028:	f10d 0019 	add.w	r0, sp, #25
 801202c:	9000      	str	r0, [sp, #0]
 801202e:	9a05      	ldr	r2, [sp, #20]
 8012030:	4649      	mov	r1, r9
 8012032:	4640      	mov	r0, r8
 8012034:	f005 fdd4 	bl	8017be0 <uxr_receive_reliable_message>
 8012038:	b1d0      	cbz	r0, 8012070 <uxr_create_session+0x168>
 801203a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d038      	beq.n	80120b4 <uxr_create_session+0x1ac>
 8012042:	9e04      	ldr	r6, [sp, #16]
 8012044:	e00a      	b.n	801205c <uxr_create_session+0x154>
 8012046:	f04f 0302 	mov.w	r3, #2
 801204a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801204e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012052:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012058:	f7ff fae4 	bl	8011624 <read_submessage_list>
 801205c:	a922      	add	r1, sp, #136	@ 0x88
 801205e:	2204      	movs	r2, #4
 8012060:	4640      	mov	r0, r8
 8012062:	f005 fe3d 	bl	8017ce0 <uxr_next_input_reliable_buffer_available>
 8012066:	4603      	mov	r3, r0
 8012068:	a922      	add	r1, sp, #136	@ 0x88
 801206a:	4620      	mov	r0, r4
 801206c:	2b00      	cmp	r3, #0
 801206e:	d1ea      	bne.n	8012046 <uxr_create_session+0x13e>
 8012070:	9904      	ldr	r1, [sp, #16]
 8012072:	463a      	mov	r2, r7
 8012074:	4620      	mov	r0, r4
 8012076:	f7ff f94f 	bl	8011318 <write_submessage_acknack.isra.0>
 801207a:	e779      	b.n	8011f70 <uxr_create_session+0x68>
 801207c:	4639      	mov	r1, r7
 801207e:	4650      	mov	r0, sl
 8012080:	f000 ff26 	bl	8012ed0 <uxr_get_input_best_effort_stream>
 8012084:	2800      	cmp	r0, #0
 8012086:	f43f af73 	beq.w	8011f70 <uxr_create_session+0x68>
 801208a:	4649      	mov	r1, r9
 801208c:	f005 fd14 	bl	8017ab8 <uxr_receive_best_effort_message>
 8012090:	2800      	cmp	r0, #0
 8012092:	f43f af6d 	beq.w	8011f70 <uxr_create_session+0x68>
 8012096:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801209a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801209c:	a91a      	add	r1, sp, #104	@ 0x68
 801209e:	4620      	mov	r0, r4
 80120a0:	f7ff fac0 	bl	8011624 <read_submessage_list>
 80120a4:	e764      	b.n	8011f70 <uxr_create_session+0x68>
 80120a6:	4650      	mov	r0, sl
 80120a8:	f000 fe62 	bl	8012d70 <uxr_reset_stream_storage>
 80120ac:	2001      	movs	r0, #1
 80120ae:	b02b      	add	sp, #172	@ 0xac
 80120b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80120b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120ba:	a91a      	add	r1, sp, #104	@ 0x68
 80120bc:	4620      	mov	r0, r4
 80120be:	f7ff fab1 	bl	8011624 <read_submessage_list>
 80120c2:	e7be      	b.n	8012042 <uxr_create_session+0x13a>

080120c4 <uxr_prepare_stream_to_write_submessage>:
 80120c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c8:	b082      	sub	sp, #8
 80120ca:	4682      	mov	sl, r0
 80120cc:	4610      	mov	r0, r2
 80120ce:	4615      	mov	r5, r2
 80120d0:	461e      	mov	r6, r3
 80120d2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80120d6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80120da:	9101      	str	r1, [sp, #4]
 80120dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80120e0:	f000 ff60 	bl	8012fa4 <uxr_submessage_padding>
 80120e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80120e8:	f105 0904 	add.w	r9, r5, #4
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	4481      	add	r9, r0
 80120f0:	d01d      	beq.n	801212e <uxr_prepare_stream_to_write_submessage+0x6a>
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	d116      	bne.n	8012124 <uxr_prepare_stream_to_write_submessage+0x60>
 80120f6:	4621      	mov	r1, r4
 80120f8:	f10a 0008 	add.w	r0, sl, #8
 80120fc:	f000 fede 	bl	8012ebc <uxr_get_output_reliable_stream>
 8012100:	4604      	mov	r4, r0
 8012102:	b158      	cbz	r0, 801211c <uxr_prepare_stream_to_write_submessage+0x58>
 8012104:	4649      	mov	r1, r9
 8012106:	4632      	mov	r2, r6
 8012108:	f005 ffa6 	bl	8018058 <uxr_prepare_reliable_buffer_to_write>
 801210c:	4604      	mov	r4, r0
 801210e:	b12c      	cbz	r4, 801211c <uxr_prepare_stream_to_write_submessage+0x58>
 8012110:	4643      	mov	r3, r8
 8012112:	b2aa      	uxth	r2, r5
 8012114:	4639      	mov	r1, r7
 8012116:	4630      	mov	r0, r6
 8012118:	f000 ff04 	bl	8012f24 <uxr_buffer_submessage_header>
 801211c:	4620      	mov	r0, r4
 801211e:	b002      	add	sp, #8
 8012120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012124:	2400      	movs	r4, #0
 8012126:	4620      	mov	r0, r4
 8012128:	b002      	add	sp, #8
 801212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801212e:	4621      	mov	r1, r4
 8012130:	f10a 0008 	add.w	r0, sl, #8
 8012134:	f000 feba 	bl	8012eac <uxr_get_output_best_effort_stream>
 8012138:	4604      	mov	r4, r0
 801213a:	2800      	cmp	r0, #0
 801213c:	d0ee      	beq.n	801211c <uxr_prepare_stream_to_write_submessage+0x58>
 801213e:	4649      	mov	r1, r9
 8012140:	4632      	mov	r2, r6
 8012142:	f005 feb9 	bl	8017eb8 <uxr_prepare_best_effort_buffer_to_write>
 8012146:	4604      	mov	r4, r0
 8012148:	e7e1      	b.n	801210e <uxr_prepare_stream_to_write_submessage+0x4a>
 801214a:	bf00      	nop

0801214c <uxr_init_session_info>:
 801214c:	0e13      	lsrs	r3, r2, #24
 801214e:	7043      	strb	r3, [r0, #1]
 8012150:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012154:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012158:	7001      	strb	r1, [r0, #0]
 801215a:	70c3      	strb	r3, [r0, #3]
 801215c:	2109      	movs	r1, #9
 801215e:	23ff      	movs	r3, #255	@ 0xff
 8012160:	f880 c002 	strb.w	ip, [r0, #2]
 8012164:	7102      	strb	r2, [r0, #4]
 8012166:	80c1      	strh	r1, [r0, #6]
 8012168:	7143      	strb	r3, [r0, #5]
 801216a:	4770      	bx	lr

0801216c <uxr_buffer_create_session>:
 801216c:	b530      	push	{r4, r5, lr}
 801216e:	b089      	sub	sp, #36	@ 0x24
 8012170:	2300      	movs	r3, #0
 8012172:	4d12      	ldr	r5, [pc, #72]	@ (80121bc <uxr_buffer_create_session+0x50>)
 8012174:	9307      	str	r3, [sp, #28]
 8012176:	f8ad 201c 	strh.w	r2, [sp, #28]
 801217a:	2201      	movs	r2, #1
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	80c2      	strh	r2, [r0, #6]
 8012180:	f88d 2004 	strb.w	r2, [sp, #4]
 8012184:	682a      	ldr	r2, [r5, #0]
 8012186:	9200      	str	r2, [sp, #0]
 8012188:	88aa      	ldrh	r2, [r5, #4]
 801218a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801218e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012192:	9202      	str	r2, [sp, #8]
 8012194:	460c      	mov	r4, r1
 8012196:	7802      	ldrb	r2, [r0, #0]
 8012198:	9303      	str	r3, [sp, #12]
 801219a:	4619      	mov	r1, r3
 801219c:	f88d 200c 	strb.w	r2, [sp, #12]
 80121a0:	4620      	mov	r0, r4
 80121a2:	2210      	movs	r2, #16
 80121a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80121a8:	9306      	str	r3, [sp, #24]
 80121aa:	f000 febb 	bl	8012f24 <uxr_buffer_submessage_header>
 80121ae:	4669      	mov	r1, sp
 80121b0:	4620      	mov	r0, r4
 80121b2:	f001 fe47 	bl	8013e44 <uxr_serialize_CREATE_CLIENT_Payload>
 80121b6:	b009      	add	sp, #36	@ 0x24
 80121b8:	bd30      	pop	{r4, r5, pc}
 80121ba:	bf00      	nop
 80121bc:	08019e84 	.word	0x08019e84

080121c0 <uxr_buffer_delete_session>:
 80121c0:	b510      	push	{r4, lr}
 80121c2:	4b0c      	ldr	r3, [pc, #48]	@ (80121f4 <uxr_buffer_delete_session+0x34>)
 80121c4:	b082      	sub	sp, #8
 80121c6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80121ca:	f8ad c006 	strh.w	ip, [sp, #6]
 80121ce:	460c      	mov	r4, r1
 80121d0:	2202      	movs	r2, #2
 80121d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80121d6:	80c2      	strh	r2, [r0, #6]
 80121d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80121dc:	2204      	movs	r2, #4
 80121de:	2300      	movs	r3, #0
 80121e0:	2103      	movs	r1, #3
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 fe9e 	bl	8012f24 <uxr_buffer_submessage_header>
 80121e8:	a901      	add	r1, sp, #4
 80121ea:	4620      	mov	r0, r4
 80121ec:	f001 fed0 	bl	8013f90 <uxr_serialize_DELETE_Payload>
 80121f0:	b002      	add	sp, #8
 80121f2:	bd10      	pop	{r4, pc}
 80121f4:	08019e84 	.word	0x08019e84

080121f8 <uxr_read_create_session_status>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	b088      	sub	sp, #32
 80121fc:	4604      	mov	r4, r0
 80121fe:	4608      	mov	r0, r1
 8012200:	a901      	add	r1, sp, #4
 8012202:	f001 fed5 	bl	8013fb0 <uxr_deserialize_STATUS_AGENT_Payload>
 8012206:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801220a:	7163      	strb	r3, [r4, #5]
 801220c:	b008      	add	sp, #32
 801220e:	bd10      	pop	{r4, pc}

08012210 <uxr_read_delete_session_status>:
 8012210:	b510      	push	{r4, lr}
 8012212:	4604      	mov	r4, r0
 8012214:	b084      	sub	sp, #16
 8012216:	4608      	mov	r0, r1
 8012218:	a902      	add	r1, sp, #8
 801221a:	f001 fef9 	bl	8014010 <uxr_deserialize_STATUS_Payload>
 801221e:	88e3      	ldrh	r3, [r4, #6]
 8012220:	2b02      	cmp	r3, #2
 8012222:	d001      	beq.n	8012228 <uxr_read_delete_session_status+0x18>
 8012224:	b004      	add	sp, #16
 8012226:	bd10      	pop	{r4, pc}
 8012228:	f10d 000a 	add.w	r0, sp, #10
 801222c:	f7fe feca 	bl	8010fc4 <uxr_object_id_from_raw>
 8012230:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012234:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012238:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801223c:	b29b      	uxth	r3, r3
 801223e:	2b02      	cmp	r3, #2
 8012240:	bf04      	itt	eq
 8012242:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012246:	7163      	strbeq	r3, [r4, #5]
 8012248:	b004      	add	sp, #16
 801224a:	bd10      	pop	{r4, pc}

0801224c <uxr_stamp_create_session_header>:
 801224c:	b510      	push	{r4, lr}
 801224e:	2208      	movs	r2, #8
 8012250:	b08a      	sub	sp, #40	@ 0x28
 8012252:	4604      	mov	r4, r0
 8012254:	eb0d 0002 	add.w	r0, sp, r2
 8012258:	f7fa f8fa 	bl	800c450 <ucdr_init_buffer>
 801225c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012260:	9400      	str	r4, [sp, #0]
 8012262:	2300      	movs	r3, #0
 8012264:	461a      	mov	r2, r3
 8012266:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801226a:	a802      	add	r0, sp, #8
 801226c:	f001 f854 	bl	8013318 <uxr_serialize_message_header>
 8012270:	b00a      	add	sp, #40	@ 0x28
 8012272:	bd10      	pop	{r4, pc}

08012274 <uxr_stamp_session_header>:
 8012274:	b530      	push	{r4, r5, lr}
 8012276:	b08d      	sub	sp, #52	@ 0x34
 8012278:	4604      	mov	r4, r0
 801227a:	460d      	mov	r5, r1
 801227c:	9203      	str	r2, [sp, #12]
 801227e:	4619      	mov	r1, r3
 8012280:	a804      	add	r0, sp, #16
 8012282:	2208      	movs	r2, #8
 8012284:	f7fa f8e4 	bl	800c450 <ucdr_init_buffer>
 8012288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801228c:	9b03      	ldr	r3, [sp, #12]
 801228e:	9400      	str	r4, [sp, #0]
 8012290:	462a      	mov	r2, r5
 8012292:	a804      	add	r0, sp, #16
 8012294:	f001 f840 	bl	8013318 <uxr_serialize_message_header>
 8012298:	b00d      	add	sp, #52	@ 0x34
 801229a:	bd30      	pop	{r4, r5, pc}

0801229c <uxr_read_session_header>:
 801229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a0:	4607      	mov	r7, r0
 80122a2:	b084      	sub	sp, #16
 80122a4:	4608      	mov	r0, r1
 80122a6:	460c      	mov	r4, r1
 80122a8:	4615      	mov	r5, r2
 80122aa:	461e      	mov	r6, r3
 80122ac:	f7fa f900 	bl	800c4b0 <ucdr_buffer_remaining>
 80122b0:	2808      	cmp	r0, #8
 80122b2:	d803      	bhi.n	80122bc <uxr_read_session_header+0x20>
 80122b4:	2000      	movs	r0, #0
 80122b6:	b004      	add	sp, #16
 80122b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122bc:	f10d 080c 	add.w	r8, sp, #12
 80122c0:	4633      	mov	r3, r6
 80122c2:	462a      	mov	r2, r5
 80122c4:	f8cd 8000 	str.w	r8, [sp]
 80122c8:	4620      	mov	r0, r4
 80122ca:	f10d 010b 	add.w	r1, sp, #11
 80122ce:	f001 f841 	bl	8013354 <uxr_deserialize_message_header>
 80122d2:	783a      	ldrb	r2, [r7, #0]
 80122d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80122d8:	4293      	cmp	r3, r2
 80122da:	d1eb      	bne.n	80122b4 <uxr_read_session_header+0x18>
 80122dc:	061b      	lsls	r3, r3, #24
 80122de:	d41c      	bmi.n	801231a <uxr_read_session_header+0x7e>
 80122e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80122e4:	787b      	ldrb	r3, [r7, #1]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d003      	beq.n	80122f2 <uxr_read_session_header+0x56>
 80122ea:	2001      	movs	r0, #1
 80122ec:	f080 0001 	eor.w	r0, r0, #1
 80122f0:	e7e1      	b.n	80122b6 <uxr_read_session_header+0x1a>
 80122f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80122f6:	78bb      	ldrb	r3, [r7, #2]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	f107 0102 	add.w	r1, r7, #2
 80122fe:	d1f4      	bne.n	80122ea <uxr_read_session_header+0x4e>
 8012300:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012304:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012308:	429a      	cmp	r2, r3
 801230a:	d1ee      	bne.n	80122ea <uxr_read_session_header+0x4e>
 801230c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012310:	784b      	ldrb	r3, [r1, #1]
 8012312:	429a      	cmp	r2, r3
 8012314:	d1e9      	bne.n	80122ea <uxr_read_session_header+0x4e>
 8012316:	2000      	movs	r0, #0
 8012318:	e7e8      	b.n	80122ec <uxr_read_session_header+0x50>
 801231a:	2001      	movs	r0, #1
 801231c:	e7cb      	b.n	80122b6 <uxr_read_session_header+0x1a>
 801231e:	bf00      	nop

08012320 <uxr_session_header_offset>:
 8012320:	f990 3000 	ldrsb.w	r3, [r0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	bfac      	ite	ge
 8012328:	2008      	movge	r0, #8
 801232a:	2004      	movlt	r0, #4
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop

08012330 <uxr_init_base_object_request>:
 8012330:	b510      	push	{r4, lr}
 8012332:	88c3      	ldrh	r3, [r0, #6]
 8012334:	b082      	sub	sp, #8
 8012336:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801233a:	9101      	str	r1, [sp, #4]
 801233c:	f1a3 010a 	sub.w	r1, r3, #10
 8012340:	b289      	uxth	r1, r1
 8012342:	42a1      	cmp	r1, r4
 8012344:	d80e      	bhi.n	8012364 <uxr_init_base_object_request+0x34>
 8012346:	3301      	adds	r3, #1
 8012348:	b29c      	uxth	r4, r3
 801234a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801234e:	b2db      	uxtb	r3, r3
 8012350:	80c4      	strh	r4, [r0, #6]
 8012352:	9801      	ldr	r0, [sp, #4]
 8012354:	7011      	strb	r1, [r2, #0]
 8012356:	7053      	strb	r3, [r2, #1]
 8012358:	1c91      	adds	r1, r2, #2
 801235a:	f7fe fe47 	bl	8010fec <uxr_object_id_to_raw>
 801235e:	4620      	mov	r0, r4
 8012360:	b002      	add	sp, #8
 8012362:	bd10      	pop	{r4, pc}
 8012364:	230a      	movs	r3, #10
 8012366:	2100      	movs	r1, #0
 8012368:	461c      	mov	r4, r3
 801236a:	e7f1      	b.n	8012350 <uxr_init_base_object_request+0x20>

0801236c <uxr_parse_base_object_request>:
 801236c:	b570      	push	{r4, r5, r6, lr}
 801236e:	4604      	mov	r4, r0
 8012370:	3002      	adds	r0, #2
 8012372:	460d      	mov	r5, r1
 8012374:	4616      	mov	r6, r2
 8012376:	f7fe fe25 	bl	8010fc4 <uxr_object_id_from_raw>
 801237a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801237e:	8028      	strh	r0, [r5, #0]
 8012380:	806b      	strh	r3, [r5, #2]
 8012382:	7822      	ldrb	r2, [r4, #0]
 8012384:	7863      	ldrb	r3, [r4, #1]
 8012386:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801238a:	8033      	strh	r3, [r6, #0]
 801238c:	bd70      	pop	{r4, r5, r6, pc}
 801238e:	bf00      	nop

08012390 <uxr_init_framing_io>:
 8012390:	2300      	movs	r3, #0
 8012392:	7041      	strb	r1, [r0, #1]
 8012394:	7003      	strb	r3, [r0, #0]
 8012396:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop

0801239c <uxr_write_framed_msg>:
 801239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a0:	4617      	mov	r7, r2
 80123a2:	7842      	ldrb	r2, [r0, #1]
 80123a4:	b083      	sub	sp, #12
 80123a6:	460e      	mov	r6, r1
 80123a8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80123ac:	469a      	mov	sl, r3
 80123ae:	2901      	cmp	r1, #1
 80123b0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80123b4:	4604      	mov	r4, r0
 80123b6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80123ba:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80123be:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80123c2:	f240 8137 	bls.w	8012634 <uxr_write_framed_msg+0x298>
 80123c6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80123ca:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80123ce:	2901      	cmp	r1, #1
 80123d0:	f04f 0202 	mov.w	r2, #2
 80123d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123d8:	f240 808f 	bls.w	80124fa <uxr_write_framed_msg+0x15e>
 80123dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123de:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80123e2:	b2dd      	uxtb	r5, r3
 80123e4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80123e8:	2203      	movs	r2, #3
 80123ea:	2901      	cmp	r1, #1
 80123ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123f0:	f240 809a 	bls.w	8012528 <uxr_write_framed_msg+0x18c>
 80123f4:	18a1      	adds	r1, r4, r2
 80123f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123f8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80123fc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012400:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012404:	3201      	adds	r2, #1
 8012406:	2801      	cmp	r0, #1
 8012408:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801240c:	f240 80a0 	bls.w	8012550 <uxr_write_framed_msg+0x1b4>
 8012410:	18a0      	adds	r0, r4, r2
 8012412:	3201      	adds	r2, #1
 8012414:	b2d2      	uxtb	r2, r2
 8012416:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801241a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801241e:	2b00      	cmp	r3, #0
 8012420:	f000 80a9 	beq.w	8012576 <uxr_write_framed_msg+0x1da>
 8012424:	f04f 0900 	mov.w	r9, #0
 8012428:	46c8      	mov	r8, r9
 801242a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801242e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012432:	2901      	cmp	r1, #1
 8012434:	f240 80c3 	bls.w	80125be <uxr_write_framed_msg+0x222>
 8012438:	2a29      	cmp	r2, #41	@ 0x29
 801243a:	f200 809f 	bhi.w	801257c <uxr_write_framed_msg+0x1e0>
 801243e:	18a1      	adds	r1, r4, r2
 8012440:	3201      	adds	r2, #1
 8012442:	b2d2      	uxtb	r2, r2
 8012444:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012448:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801244c:	ea89 0303 	eor.w	r3, r9, r3
 8012450:	498c      	ldr	r1, [pc, #560]	@ (8012684 <uxr_write_framed_msg+0x2e8>)
 8012452:	b2db      	uxtb	r3, r3
 8012454:	f108 0801 	add.w	r8, r8, #1
 8012458:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801245c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012462:	4543      	cmp	r3, r8
 8012464:	d8e1      	bhi.n	801242a <uxr_write_framed_msg+0x8e>
 8012466:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801246a:	fa5f f889 	uxtb.w	r8, r9
 801246e:	9301      	str	r3, [sp, #4]
 8012470:	f04f 0900 	mov.w	r9, #0
 8012474:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8012478:	fa5f f18a 	uxtb.w	r1, sl
 801247c:	2901      	cmp	r1, #1
 801247e:	d921      	bls.n	80124c4 <uxr_write_framed_msg+0x128>
 8012480:	2a29      	cmp	r2, #41	@ 0x29
 8012482:	f240 80af 	bls.w	80125e4 <uxr_write_framed_msg+0x248>
 8012486:	2500      	movs	r5, #0
 8012488:	e000      	b.n	801248c <uxr_write_framed_msg+0xf0>
 801248a:	b160      	cbz	r0, 80124a6 <uxr_write_framed_msg+0x10a>
 801248c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012490:	1b52      	subs	r2, r2, r5
 8012492:	465b      	mov	r3, fp
 8012494:	4421      	add	r1, r4
 8012496:	4638      	mov	r0, r7
 8012498:	47b0      	blx	r6
 801249a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801249e:	4405      	add	r5, r0
 80124a0:	4295      	cmp	r5, r2
 80124a2:	d3f2      	bcc.n	801248a <uxr_write_framed_msg+0xee>
 80124a4:	d003      	beq.n	80124ae <uxr_write_framed_msg+0x112>
 80124a6:	2000      	movs	r0, #0
 80124a8:	b003      	add	sp, #12
 80124aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ae:	fa5f f18a 	uxtb.w	r1, sl
 80124b2:	f04f 0300 	mov.w	r3, #0
 80124b6:	2901      	cmp	r1, #1
 80124b8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80124bc:	f04f 0200 	mov.w	r2, #0
 80124c0:	f200 8090 	bhi.w	80125e4 <uxr_write_framed_msg+0x248>
 80124c4:	1c51      	adds	r1, r2, #1
 80124c6:	b2c9      	uxtb	r1, r1
 80124c8:	2929      	cmp	r1, #41	@ 0x29
 80124ca:	d8dc      	bhi.n	8012486 <uxr_write_framed_msg+0xea>
 80124cc:	18a5      	adds	r5, r4, r2
 80124ce:	4421      	add	r1, r4
 80124d0:	3202      	adds	r2, #2
 80124d2:	f088 0820 	eor.w	r8, r8, #32
 80124d6:	4648      	mov	r0, r9
 80124d8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80124dc:	b2d2      	uxtb	r2, r2
 80124de:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80124e2:	f04f 0901 	mov.w	r9, #1
 80124e6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80124ea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80124ee:	2800      	cmp	r0, #0
 80124f0:	f040 8085 	bne.w	80125fe <uxr_write_framed_msg+0x262>
 80124f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80124f8:	e7bc      	b.n	8012474 <uxr_write_framed_msg+0xd8>
 80124fa:	4611      	mov	r1, r2
 80124fc:	f04f 0c03 	mov.w	ip, #3
 8012500:	2204      	movs	r2, #4
 8012502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012504:	4421      	add	r1, r4
 8012506:	b2dd      	uxtb	r5, r3
 8012508:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801250c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012510:	44a4      	add	ip, r4
 8012512:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012516:	f080 0020 	eor.w	r0, r0, #32
 801251a:	2901      	cmp	r1, #1
 801251c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012520:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012524:	f63f af66 	bhi.w	80123f4 <uxr_write_framed_msg+0x58>
 8012528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801252a:	18a0      	adds	r0, r4, r2
 801252c:	f085 0520 	eor.w	r5, r5, #32
 8012530:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012534:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012538:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801253c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012540:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012544:	3202      	adds	r2, #2
 8012546:	2801      	cmp	r0, #1
 8012548:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801254c:	f63f af60 	bhi.w	8012410 <uxr_write_framed_msg+0x74>
 8012550:	1c50      	adds	r0, r2, #1
 8012552:	18a5      	adds	r5, r4, r2
 8012554:	fa54 f080 	uxtab	r0, r4, r0
 8012558:	3202      	adds	r2, #2
 801255a:	f081 0120 	eor.w	r1, r1, #32
 801255e:	b2d2      	uxtb	r2, r2
 8012560:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012564:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012568:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801256c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012570:	2b00      	cmp	r3, #0
 8012572:	f47f af57 	bne.w	8012424 <uxr_write_framed_msg+0x88>
 8012576:	9301      	str	r3, [sp, #4]
 8012578:	4698      	mov	r8, r3
 801257a:	e779      	b.n	8012470 <uxr_write_framed_msg+0xd4>
 801257c:	2500      	movs	r5, #0
 801257e:	e001      	b.n	8012584 <uxr_write_framed_msg+0x1e8>
 8012580:	2800      	cmp	r0, #0
 8012582:	d090      	beq.n	80124a6 <uxr_write_framed_msg+0x10a>
 8012584:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012588:	1b52      	subs	r2, r2, r5
 801258a:	465b      	mov	r3, fp
 801258c:	4421      	add	r1, r4
 801258e:	4638      	mov	r0, r7
 8012590:	47b0      	blx	r6
 8012592:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012596:	4405      	add	r5, r0
 8012598:	4295      	cmp	r5, r2
 801259a:	d3f1      	bcc.n	8012580 <uxr_write_framed_msg+0x1e4>
 801259c:	d183      	bne.n	80124a6 <uxr_write_framed_msg+0x10a>
 801259e:	f04f 0300 	mov.w	r3, #0
 80125a2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80125a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125a8:	4543      	cmp	r3, r8
 80125aa:	d964      	bls.n	8012676 <uxr_write_framed_msg+0x2da>
 80125ac:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80125b0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80125b4:	2901      	cmp	r1, #1
 80125b6:	f04f 0200 	mov.w	r2, #0
 80125ba:	f63f af3d 	bhi.w	8012438 <uxr_write_framed_msg+0x9c>
 80125be:	1c51      	adds	r1, r2, #1
 80125c0:	b2c9      	uxtb	r1, r1
 80125c2:	2929      	cmp	r1, #41	@ 0x29
 80125c4:	d8da      	bhi.n	801257c <uxr_write_framed_msg+0x1e0>
 80125c6:	18a0      	adds	r0, r4, r2
 80125c8:	4421      	add	r1, r4
 80125ca:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80125ce:	3202      	adds	r2, #2
 80125d0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80125d4:	b2d2      	uxtb	r2, r2
 80125d6:	f083 0020 	eor.w	r0, r3, #32
 80125da:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80125de:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80125e2:	e733      	b.n	801244c <uxr_write_framed_msg+0xb0>
 80125e4:	18a1      	adds	r1, r4, r2
 80125e6:	3201      	adds	r2, #1
 80125e8:	4648      	mov	r0, r9
 80125ea:	b2d2      	uxtb	r2, r2
 80125ec:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80125f0:	f04f 0901 	mov.w	r9, #1
 80125f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80125f8:	2800      	cmp	r0, #0
 80125fa:	f43f af7b 	beq.w	80124f4 <uxr_write_framed_msg+0x158>
 80125fe:	2500      	movs	r5, #0
 8012600:	e002      	b.n	8012608 <uxr_write_framed_msg+0x26c>
 8012602:	2800      	cmp	r0, #0
 8012604:	f43f af4f 	beq.w	80124a6 <uxr_write_framed_msg+0x10a>
 8012608:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801260c:	1b52      	subs	r2, r2, r5
 801260e:	465b      	mov	r3, fp
 8012610:	4421      	add	r1, r4
 8012612:	4638      	mov	r0, r7
 8012614:	47b0      	blx	r6
 8012616:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801261a:	4405      	add	r5, r0
 801261c:	4295      	cmp	r5, r2
 801261e:	d3f0      	bcc.n	8012602 <uxr_write_framed_msg+0x266>
 8012620:	f47f af41 	bne.w	80124a6 <uxr_write_framed_msg+0x10a>
 8012624:	2300      	movs	r3, #0
 8012626:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801262a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801262c:	b298      	uxth	r0, r3
 801262e:	b003      	add	sp, #12
 8012630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012634:	217d      	movs	r1, #125	@ 0x7d
 8012636:	f082 0220 	eor.w	r2, r2, #32
 801263a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801263e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012642:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012646:	2901      	cmp	r1, #1
 8012648:	f04f 0203 	mov.w	r2, #3
 801264c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012650:	d804      	bhi.n	801265c <uxr_write_framed_msg+0x2c0>
 8012652:	4611      	mov	r1, r2
 8012654:	f04f 0c04 	mov.w	ip, #4
 8012658:	2205      	movs	r2, #5
 801265a:	e752      	b.n	8012502 <uxr_write_framed_msg+0x166>
 801265c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801265e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012662:	b2dd      	uxtb	r5, r3
 8012664:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012668:	2204      	movs	r2, #4
 801266a:	2901      	cmp	r1, #1
 801266c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012670:	f63f aec0 	bhi.w	80123f4 <uxr_write_framed_msg+0x58>
 8012674:	e758      	b.n	8012528 <uxr_write_framed_msg+0x18c>
 8012676:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801267a:	fa5f f889 	uxtb.w	r8, r9
 801267e:	9301      	str	r3, [sp, #4]
 8012680:	2200      	movs	r2, #0
 8012682:	e6f5      	b.n	8012470 <uxr_write_framed_msg+0xd4>
 8012684:	0801ae94 	.word	0x0801ae94

08012688 <uxr_framing_read_transport>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	4604      	mov	r4, r0
 801268e:	b083      	sub	sp, #12
 8012690:	461f      	mov	r7, r3
 8012692:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8012696:	4689      	mov	r9, r1
 8012698:	4692      	mov	sl, r2
 801269a:	f000 fc89 	bl	8012fb0 <uxr_millis>
 801269e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80126a2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80126a6:	42b3      	cmp	r3, r6
 80126a8:	4680      	mov	r8, r0
 80126aa:	d061      	beq.n	8012770 <uxr_framing_read_transport+0xe8>
 80126ac:	d81c      	bhi.n	80126e8 <uxr_framing_read_transport+0x60>
 80126ae:	1e75      	subs	r5, r6, #1
 80126b0:	1aed      	subs	r5, r5, r3
 80126b2:	b2ed      	uxtb	r5, r5
 80126b4:	2600      	movs	r6, #0
 80126b6:	455d      	cmp	r5, fp
 80126b8:	d81f      	bhi.n	80126fa <uxr_framing_read_transport+0x72>
 80126ba:	19ab      	adds	r3, r5, r6
 80126bc:	455b      	cmp	r3, fp
 80126be:	bf84      	itt	hi
 80126c0:	ebab 0605 	subhi.w	r6, fp, r5
 80126c4:	b2f6      	uxtbhi	r6, r6
 80126c6:	b9ed      	cbnz	r5, 8012704 <uxr_framing_read_transport+0x7c>
 80126c8:	f04f 0b00 	mov.w	fp, #0
 80126cc:	f000 fc70 	bl	8012fb0 <uxr_millis>
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	eba0 0808 	sub.w	r8, r0, r8
 80126d6:	eba3 0308 	sub.w	r3, r3, r8
 80126da:	4658      	mov	r0, fp
 80126dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80126e0:	603b      	str	r3, [r7, #0]
 80126e2:	b003      	add	sp, #12
 80126e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e8:	2e00      	cmp	r6, #0
 80126ea:	d049      	beq.n	8012780 <uxr_framing_read_transport+0xf8>
 80126ec:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80126f0:	b2ed      	uxtb	r5, r5
 80126f2:	3e01      	subs	r6, #1
 80126f4:	455d      	cmp	r5, fp
 80126f6:	b2f6      	uxtb	r6, r6
 80126f8:	d9df      	bls.n	80126ba <uxr_framing_read_transport+0x32>
 80126fa:	fa5f f58b 	uxtb.w	r5, fp
 80126fe:	2600      	movs	r6, #0
 8012700:	2d00      	cmp	r5, #0
 8012702:	d0e1      	beq.n	80126c8 <uxr_framing_read_transport+0x40>
 8012704:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012708:	3102      	adds	r1, #2
 801270a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	4421      	add	r1, r4
 8012712:	462a      	mov	r2, r5
 8012714:	4650      	mov	r0, sl
 8012716:	47c8      	blx	r9
 8012718:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801271c:	4a1a      	ldr	r2, [pc, #104]	@ (8012788 <uxr_framing_read_transport+0x100>)
 801271e:	4403      	add	r3, r0
 8012720:	0859      	lsrs	r1, r3, #1
 8012722:	fba2 2101 	umull	r2, r1, r2, r1
 8012726:	0889      	lsrs	r1, r1, #2
 8012728:	222a      	movs	r2, #42	@ 0x2a
 801272a:	fb02 3111 	mls	r1, r2, r1, r3
 801272e:	4683      	mov	fp, r0
 8012730:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012734:	2800      	cmp	r0, #0
 8012736:	d0c7      	beq.n	80126c8 <uxr_framing_read_transport+0x40>
 8012738:	42a8      	cmp	r0, r5
 801273a:	d1c7      	bne.n	80126cc <uxr_framing_read_transport+0x44>
 801273c:	2e00      	cmp	r6, #0
 801273e:	d0c5      	beq.n	80126cc <uxr_framing_read_transport+0x44>
 8012740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	3102      	adds	r1, #2
 8012746:	4632      	mov	r2, r6
 8012748:	4421      	add	r1, r4
 801274a:	2300      	movs	r3, #0
 801274c:	4650      	mov	r0, sl
 801274e:	47c8      	blx	r9
 8012750:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012754:	4a0c      	ldr	r2, [pc, #48]	@ (8012788 <uxr_framing_read_transport+0x100>)
 8012756:	180b      	adds	r3, r1, r0
 8012758:	0859      	lsrs	r1, r3, #1
 801275a:	fba2 1201 	umull	r1, r2, r2, r1
 801275e:	0892      	lsrs	r2, r2, #2
 8012760:	212a      	movs	r1, #42	@ 0x2a
 8012762:	fb01 3312 	mls	r3, r1, r2, r3
 8012766:	eb00 0b05 	add.w	fp, r0, r5
 801276a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801276e:	e7ad      	b.n	80126cc <uxr_framing_read_transport+0x44>
 8012770:	2600      	movs	r6, #0
 8012772:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012776:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012778:	d9bf      	bls.n	80126fa <uxr_framing_read_transport+0x72>
 801277a:	2102      	movs	r1, #2
 801277c:	2529      	movs	r5, #41	@ 0x29
 801277e:	e7c4      	b.n	801270a <uxr_framing_read_transport+0x82>
 8012780:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012784:	b2ed      	uxtb	r5, r5
 8012786:	e796      	b.n	80126b6 <uxr_framing_read_transport+0x2e>
 8012788:	30c30c31 	.word	0x30c30c31

0801278c <uxr_read_framed_msg>:
 801278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012790:	461e      	mov	r6, r3
 8012792:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012796:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801279a:	429d      	cmp	r5, r3
 801279c:	b083      	sub	sp, #12
 801279e:	4604      	mov	r4, r0
 80127a0:	4688      	mov	r8, r1
 80127a2:	4691      	mov	r9, r2
 80127a4:	f000 8188 	beq.w	8012ab8 <uxr_read_framed_msg+0x32c>
 80127a8:	7823      	ldrb	r3, [r4, #0]
 80127aa:	4dc1      	ldr	r5, [pc, #772]	@ (8012ab0 <uxr_read_framed_msg+0x324>)
 80127ac:	4fc1      	ldr	r7, [pc, #772]	@ (8012ab4 <uxr_read_framed_msg+0x328>)
 80127ae:	2b07      	cmp	r3, #7
 80127b0:	d8fd      	bhi.n	80127ae <uxr_read_framed_msg+0x22>
 80127b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80127b6:	0115      	.short	0x0115
 80127b8:	00d600f6 	.word	0x00d600f6
 80127bc:	009000b9 	.word	0x009000b9
 80127c0:	0030004d 	.word	0x0030004d
 80127c4:	0008      	.short	0x0008
 80127c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80127ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80127ce:	4299      	cmp	r1, r3
 80127d0:	f000 814a 	beq.w	8012a68 <uxr_read_framed_msg+0x2dc>
 80127d4:	18e2      	adds	r2, r4, r3
 80127d6:	7892      	ldrb	r2, [r2, #2]
 80127d8:	2a7d      	cmp	r2, #125	@ 0x7d
 80127da:	f000 8199 	beq.w	8012b10 <uxr_read_framed_msg+0x384>
 80127de:	3301      	adds	r3, #1
 80127e0:	0858      	lsrs	r0, r3, #1
 80127e2:	fba5 1000 	umull	r1, r0, r5, r0
 80127e6:	0880      	lsrs	r0, r0, #2
 80127e8:	212a      	movs	r1, #42	@ 0x2a
 80127ea:	fb01 3310 	mls	r3, r1, r0, r3
 80127ee:	2a7e      	cmp	r2, #126	@ 0x7e
 80127f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80127f4:	f000 8252 	beq.w	8012c9c <uxr_read_framed_msg+0x510>
 80127f8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80127fa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80127fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012800:	b29b      	uxth	r3, r3
 8012802:	2200      	movs	r2, #0
 8012804:	4299      	cmp	r1, r3
 8012806:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012808:	7022      	strb	r2, [r4, #0]
 801280a:	f000 8179 	beq.w	8012b00 <uxr_read_framed_msg+0x374>
 801280e:	2000      	movs	r0, #0
 8012810:	b003      	add	sp, #12
 8012812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012816:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801281a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801281e:	4299      	cmp	r1, r3
 8012820:	f000 8131 	beq.w	8012a86 <uxr_read_framed_msg+0x2fa>
 8012824:	18e2      	adds	r2, r4, r3
 8012826:	7890      	ldrb	r0, [r2, #2]
 8012828:	287d      	cmp	r0, #125	@ 0x7d
 801282a:	f000 8190 	beq.w	8012b4e <uxr_read_framed_msg+0x3c2>
 801282e:	3301      	adds	r3, #1
 8012830:	085a      	lsrs	r2, r3, #1
 8012832:	fba5 1202 	umull	r1, r2, r5, r2
 8012836:	0892      	lsrs	r2, r2, #2
 8012838:	212a      	movs	r1, #42	@ 0x2a
 801283a:	fb01 3312 	mls	r3, r1, r2, r3
 801283e:	287e      	cmp	r0, #126	@ 0x7e
 8012840:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012844:	f000 821a 	beq.w	8012c7c <uxr_read_framed_msg+0x4f0>
 8012848:	2307      	movs	r3, #7
 801284a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801284c:	7023      	strb	r3, [r4, #0]
 801284e:	e7ae      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012850:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012852:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012856:	459e      	cmp	lr, r3
 8012858:	d938      	bls.n	80128cc <uxr_read_framed_msg+0x140>
 801285a:	ee07 8a90 	vmov	s15, r8
 801285e:	212a      	movs	r1, #42	@ 0x2a
 8012860:	e020      	b.n	80128a4 <uxr_read_framed_msg+0x118>
 8012862:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012866:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801286a:	f000 80d4 	beq.w	8012a16 <uxr_read_framed_msg+0x28a>
 801286e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012872:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012876:	f000 8219 	beq.w	8012cac <uxr_read_framed_msg+0x520>
 801287a:	f806 c003 	strb.w	ip, [r6, r3]
 801287e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012882:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012884:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012888:	ea8a 000c 	eor.w	r0, sl, ip
 801288c:	b2c0      	uxtb	r0, r0
 801288e:	3301      	adds	r3, #1
 8012890:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012894:	b29b      	uxth	r3, r3
 8012896:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801289a:	4573      	cmp	r3, lr
 801289c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801289e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80128a0:	f080 8120 	bcs.w	8012ae4 <uxr_read_framed_msg+0x358>
 80128a4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80128a8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80128ac:	f100 0c01 	add.w	ip, r0, #1
 80128b0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80128b4:	fba5 8202 	umull	r8, r2, r5, r2
 80128b8:	0892      	lsrs	r2, r2, #2
 80128ba:	4582      	cmp	sl, r0
 80128bc:	eb04 0b00 	add.w	fp, r4, r0
 80128c0:	fb01 c212 	mls	r2, r1, r2, ip
 80128c4:	d1cd      	bne.n	8012862 <uxr_read_framed_msg+0xd6>
 80128c6:	ee17 8a90 	vmov	r8, s15
 80128ca:	459e      	cmp	lr, r3
 80128cc:	f040 8111 	bne.w	8012af2 <uxr_read_framed_msg+0x366>
 80128d0:	2306      	movs	r3, #6
 80128d2:	7023      	strb	r3, [r4, #0]
 80128d4:	e76b      	b.n	80127ae <uxr_read_framed_msg+0x22>
 80128d6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80128da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80128de:	4298      	cmp	r0, r3
 80128e0:	f000 80c2 	beq.w	8012a68 <uxr_read_framed_msg+0x2dc>
 80128e4:	18e2      	adds	r2, r4, r3
 80128e6:	7891      	ldrb	r1, [r2, #2]
 80128e8:	297d      	cmp	r1, #125	@ 0x7d
 80128ea:	f000 814c 	beq.w	8012b86 <uxr_read_framed_msg+0x3fa>
 80128ee:	3301      	adds	r3, #1
 80128f0:	085a      	lsrs	r2, r3, #1
 80128f2:	fba5 0202 	umull	r0, r2, r5, r2
 80128f6:	0892      	lsrs	r2, r2, #2
 80128f8:	202a      	movs	r0, #42	@ 0x2a
 80128fa:	fb00 3312 	mls	r3, r0, r2, r3
 80128fe:	297e      	cmp	r1, #126	@ 0x7e
 8012900:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012904:	f000 81ca 	beq.w	8012c9c <uxr_read_framed_msg+0x510>
 8012908:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801290a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801290e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012910:	b29b      	uxth	r3, r3
 8012912:	2000      	movs	r0, #0
 8012914:	428b      	cmp	r3, r1
 8012916:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012918:	8660      	strh	r0, [r4, #50]	@ 0x32
 801291a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801291c:	f240 80df 	bls.w	8012ade <uxr_read_framed_msg+0x352>
 8012920:	7020      	strb	r0, [r4, #0]
 8012922:	b003      	add	sp, #12
 8012924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012928:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801292c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012930:	4299      	cmp	r1, r3
 8012932:	f000 80a8 	beq.w	8012a86 <uxr_read_framed_msg+0x2fa>
 8012936:	18e2      	adds	r2, r4, r3
 8012938:	7890      	ldrb	r0, [r2, #2]
 801293a:	287d      	cmp	r0, #125	@ 0x7d
 801293c:	f000 8164 	beq.w	8012c08 <uxr_read_framed_msg+0x47c>
 8012940:	3301      	adds	r3, #1
 8012942:	085a      	lsrs	r2, r3, #1
 8012944:	fba5 1202 	umull	r1, r2, r5, r2
 8012948:	0892      	lsrs	r2, r2, #2
 801294a:	212a      	movs	r1, #42	@ 0x2a
 801294c:	fb01 3312 	mls	r3, r1, r2, r3
 8012950:	287e      	cmp	r0, #126	@ 0x7e
 8012952:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012956:	f000 8191 	beq.w	8012c7c <uxr_read_framed_msg+0x4f0>
 801295a:	2304      	movs	r3, #4
 801295c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801295e:	7023      	strb	r3, [r4, #0]
 8012960:	e725      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012962:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012966:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801296a:	4290      	cmp	r0, r2
 801296c:	f000 80b3 	beq.w	8012ad6 <uxr_read_framed_msg+0x34a>
 8012970:	18a3      	adds	r3, r4, r2
 8012972:	7899      	ldrb	r1, [r3, #2]
 8012974:	297d      	cmp	r1, #125	@ 0x7d
 8012976:	f000 8164 	beq.w	8012c42 <uxr_read_framed_msg+0x4b6>
 801297a:	3201      	adds	r2, #1
 801297c:	0850      	lsrs	r0, r2, #1
 801297e:	fba5 3000 	umull	r3, r0, r5, r0
 8012982:	0880      	lsrs	r0, r0, #2
 8012984:	232a      	movs	r3, #42	@ 0x2a
 8012986:	fb03 2210 	mls	r2, r3, r0, r2
 801298a:	297e      	cmp	r1, #126	@ 0x7e
 801298c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012990:	f000 8188 	beq.w	8012ca4 <uxr_read_framed_msg+0x518>
 8012994:	7863      	ldrb	r3, [r4, #1]
 8012996:	428b      	cmp	r3, r1
 8012998:	bf0c      	ite	eq
 801299a:	2303      	moveq	r3, #3
 801299c:	2300      	movne	r3, #0
 801299e:	7023      	strb	r3, [r4, #0]
 80129a0:	e705      	b.n	80127ae <uxr_read_framed_msg+0x22>
 80129a2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80129a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80129aa:	2200      	movs	r2, #0
 80129ac:	4299      	cmp	r1, r3
 80129ae:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80129b2:	d06c      	beq.n	8012a8e <uxr_read_framed_msg+0x302>
 80129b4:	18e2      	adds	r2, r4, r3
 80129b6:	7890      	ldrb	r0, [r2, #2]
 80129b8:	287d      	cmp	r0, #125	@ 0x7d
 80129ba:	f000 8101 	beq.w	8012bc0 <uxr_read_framed_msg+0x434>
 80129be:	3301      	adds	r3, #1
 80129c0:	085a      	lsrs	r2, r3, #1
 80129c2:	fba5 1202 	umull	r1, r2, r5, r2
 80129c6:	0892      	lsrs	r2, r2, #2
 80129c8:	212a      	movs	r1, #42	@ 0x2a
 80129ca:	fb01 3312 	mls	r3, r1, r2, r3
 80129ce:	287e      	cmp	r0, #126	@ 0x7e
 80129d0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80129d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80129d8:	d059      	beq.n	8012a8e <uxr_read_framed_msg+0x302>
 80129da:	2302      	movs	r3, #2
 80129dc:	7023      	strb	r3, [r4, #0]
 80129de:	e6e6      	b.n	80127ae <uxr_read_framed_msg+0x22>
 80129e0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80129e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80129e8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80129ec:	1c51      	adds	r1, r2, #1
 80129ee:	084b      	lsrs	r3, r1, #1
 80129f0:	fba5 c303 	umull	ip, r3, r5, r3
 80129f4:	089b      	lsrs	r3, r3, #2
 80129f6:	fb0e 1313 	mls	r3, lr, r3, r1
 80129fa:	4592      	cmp	sl, r2
 80129fc:	eb04 0002 	add.w	r0, r4, r2
 8012a00:	b2da      	uxtb	r2, r3
 8012a02:	f43f af04 	beq.w	801280e <uxr_read_framed_msg+0x82>
 8012a06:	7883      	ldrb	r3, [r0, #2]
 8012a08:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012a0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a0e:	d1ed      	bne.n	80129ec <uxr_read_framed_msg+0x260>
 8012a10:	2301      	movs	r3, #1
 8012a12:	7023      	strb	r3, [r4, #0]
 8012a14:	e6cb      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012a16:	f100 0c01 	add.w	ip, r0, #1
 8012a1a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012a1e:	fba5 8202 	umull	r8, r2, r5, r2
 8012a22:	0892      	lsrs	r2, r2, #2
 8012a24:	fb01 c212 	mls	r2, r1, r2, ip
 8012a28:	eb04 0c02 	add.w	ip, r4, r2
 8012a2c:	b2d2      	uxtb	r2, r2
 8012a2e:	4592      	cmp	sl, r2
 8012a30:	f100 0002 	add.w	r0, r0, #2
 8012a34:	f43f af47 	beq.w	80128c6 <uxr_read_framed_msg+0x13a>
 8012a38:	0842      	lsrs	r2, r0, #1
 8012a3a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012a3e:	fba5 8202 	umull	r8, r2, r5, r2
 8012a42:	0892      	lsrs	r2, r2, #2
 8012a44:	fb01 0012 	mls	r0, r1, r2, r0
 8012a48:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012a4c:	f08a 0c20 	eor.w	ip, sl, #32
 8012a50:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012a54:	f47f af11 	bne.w	801287a <uxr_read_framed_msg+0xee>
 8012a58:	459e      	cmp	lr, r3
 8012a5a:	ee17 8a90 	vmov	r8, s15
 8012a5e:	f43f af37 	beq.w	80128d0 <uxr_read_framed_msg+0x144>
 8012a62:	2301      	movs	r3, #1
 8012a64:	7023      	strb	r3, [r4, #0]
 8012a66:	e6a2      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a6a:	9300      	str	r3, [sp, #0]
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	9301      	str	r3, [sp, #4]
 8012a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a72:	464a      	mov	r2, r9
 8012a74:	4641      	mov	r1, r8
 8012a76:	4620      	mov	r0, r4
 8012a78:	f7ff fe06 	bl	8012688 <uxr_framing_read_transport>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	f43f aec6 	beq.w	801280e <uxr_read_framed_msg+0x82>
 8012a82:	7823      	ldrb	r3, [r4, #0]
 8012a84:	e693      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012a86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	e7ef      	b.n	8012a6e <uxr_read_framed_msg+0x2e2>
 8012a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	2304      	movs	r3, #4
 8012a94:	9301      	str	r3, [sp, #4]
 8012a96:	464a      	mov	r2, r9
 8012a98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a9a:	4641      	mov	r1, r8
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f7ff fdf3 	bl	8012688 <uxr_framing_read_transport>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d1ed      	bne.n	8012a82 <uxr_read_framed_msg+0x2f6>
 8012aa6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012aaa:	2b7e      	cmp	r3, #126	@ 0x7e
 8012aac:	d0e9      	beq.n	8012a82 <uxr_read_framed_msg+0x2f6>
 8012aae:	e6ae      	b.n	801280e <uxr_read_framed_msg+0x82>
 8012ab0:	30c30c31 	.word	0x30c30c31
 8012ab4:	0801ae94 	.word	0x0801ae94
 8012ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012aba:	9300      	str	r3, [sp, #0]
 8012abc:	2305      	movs	r3, #5
 8012abe:	9301      	str	r3, [sp, #4]
 8012ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ac2:	f7ff fde1 	bl	8012688 <uxr_framing_read_transport>
 8012ac6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012aca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	f43f ae9d 	beq.w	801280e <uxr_read_framed_msg+0x82>
 8012ad4:	e668      	b.n	80127a8 <uxr_read_framed_msg+0x1c>
 8012ad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ad8:	9300      	str	r3, [sp, #0]
 8012ada:	2303      	movs	r3, #3
 8012adc:	e7c7      	b.n	8012a6e <uxr_read_framed_msg+0x2e2>
 8012ade:	2305      	movs	r3, #5
 8012ae0:	7023      	strb	r3, [r4, #0]
 8012ae2:	e664      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012ae4:	ee17 8a90 	vmov	r8, s15
 8012ae8:	f43f aef2 	beq.w	80128d0 <uxr_read_framed_msg+0x144>
 8012aec:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012af0:	d08e      	beq.n	8012a10 <uxr_read_framed_msg+0x284>
 8012af2:	ebae 0303 	sub.w	r3, lr, r3
 8012af6:	3302      	adds	r3, #2
 8012af8:	9301      	str	r3, [sp, #4]
 8012afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	e7b7      	b.n	8012a70 <uxr_read_framed_msg+0x2e4>
 8012b00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b02:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012b06:	7013      	strb	r3, [r2, #0]
 8012b08:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012b0a:	b003      	add	sp, #12
 8012b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b10:	f103 0c01 	add.w	ip, r3, #1
 8012b14:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012b18:	fba5 0202 	umull	r0, r2, r5, r2
 8012b1c:	0892      	lsrs	r2, r2, #2
 8012b1e:	202a      	movs	r0, #42	@ 0x2a
 8012b20:	fb00 c212 	mls	r2, r0, r2, ip
 8012b24:	fa5f fc82 	uxtb.w	ip, r2
 8012b28:	4561      	cmp	r1, ip
 8012b2a:	d09d      	beq.n	8012a68 <uxr_read_framed_msg+0x2dc>
 8012b2c:	3302      	adds	r3, #2
 8012b2e:	4422      	add	r2, r4
 8012b30:	0859      	lsrs	r1, r3, #1
 8012b32:	7892      	ldrb	r2, [r2, #2]
 8012b34:	fba5 c101 	umull	ip, r1, r5, r1
 8012b38:	0889      	lsrs	r1, r1, #2
 8012b3a:	fb00 3311 	mls	r3, r0, r1, r3
 8012b3e:	2a7e      	cmp	r2, #126	@ 0x7e
 8012b40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b44:	f000 80aa 	beq.w	8012c9c <uxr_read_framed_msg+0x510>
 8012b48:	f082 0220 	eor.w	r2, r2, #32
 8012b4c:	e654      	b.n	80127f8 <uxr_read_framed_msg+0x6c>
 8012b4e:	1c58      	adds	r0, r3, #1
 8012b50:	0842      	lsrs	r2, r0, #1
 8012b52:	fba5 c202 	umull	ip, r2, r5, r2
 8012b56:	0892      	lsrs	r2, r2, #2
 8012b58:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012b5c:	fb0c 0212 	mls	r2, ip, r2, r0
 8012b60:	b2d0      	uxtb	r0, r2
 8012b62:	4281      	cmp	r1, r0
 8012b64:	d08f      	beq.n	8012a86 <uxr_read_framed_msg+0x2fa>
 8012b66:	4422      	add	r2, r4
 8012b68:	3302      	adds	r3, #2
 8012b6a:	7890      	ldrb	r0, [r2, #2]
 8012b6c:	085a      	lsrs	r2, r3, #1
 8012b6e:	fba5 1202 	umull	r1, r2, r5, r2
 8012b72:	0892      	lsrs	r2, r2, #2
 8012b74:	fb0c 3312 	mls	r3, ip, r2, r3
 8012b78:	287e      	cmp	r0, #126	@ 0x7e
 8012b7a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b7e:	d07d      	beq.n	8012c7c <uxr_read_framed_msg+0x4f0>
 8012b80:	f080 0020 	eor.w	r0, r0, #32
 8012b84:	e660      	b.n	8012848 <uxr_read_framed_msg+0xbc>
 8012b86:	1c59      	adds	r1, r3, #1
 8012b88:	084a      	lsrs	r2, r1, #1
 8012b8a:	fba5 c202 	umull	ip, r2, r5, r2
 8012b8e:	0892      	lsrs	r2, r2, #2
 8012b90:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012b94:	fb0c 1212 	mls	r2, ip, r2, r1
 8012b98:	b2d1      	uxtb	r1, r2
 8012b9a:	4288      	cmp	r0, r1
 8012b9c:	f43f af64 	beq.w	8012a68 <uxr_read_framed_msg+0x2dc>
 8012ba0:	4422      	add	r2, r4
 8012ba2:	3302      	adds	r3, #2
 8012ba4:	7891      	ldrb	r1, [r2, #2]
 8012ba6:	085a      	lsrs	r2, r3, #1
 8012ba8:	fba5 0202 	umull	r0, r2, r5, r2
 8012bac:	0892      	lsrs	r2, r2, #2
 8012bae:	fb0c 3312 	mls	r3, ip, r2, r3
 8012bb2:	297e      	cmp	r1, #126	@ 0x7e
 8012bb4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012bb8:	d070      	beq.n	8012c9c <uxr_read_framed_msg+0x510>
 8012bba:	f081 0120 	eor.w	r1, r1, #32
 8012bbe:	e6a3      	b.n	8012908 <uxr_read_framed_msg+0x17c>
 8012bc0:	f103 0c01 	add.w	ip, r3, #1
 8012bc4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012bc8:	fba5 0202 	umull	r0, r2, r5, r2
 8012bcc:	0892      	lsrs	r2, r2, #2
 8012bce:	202a      	movs	r0, #42	@ 0x2a
 8012bd0:	fb00 c212 	mls	r2, r0, r2, ip
 8012bd4:	fa5f fc82 	uxtb.w	ip, r2
 8012bd8:	4561      	cmp	r1, ip
 8012bda:	f43f af58 	beq.w	8012a8e <uxr_read_framed_msg+0x302>
 8012bde:	4422      	add	r2, r4
 8012be0:	3302      	adds	r3, #2
 8012be2:	7891      	ldrb	r1, [r2, #2]
 8012be4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012be8:	085a      	lsrs	r2, r3, #1
 8012bea:	fba5 c202 	umull	ip, r2, r5, r2
 8012bee:	0892      	lsrs	r2, r2, #2
 8012bf0:	fb00 3312 	mls	r3, r0, r2, r3
 8012bf4:	297e      	cmp	r1, #126	@ 0x7e
 8012bf6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012bfa:	f43f af48 	beq.w	8012a8e <uxr_read_framed_msg+0x302>
 8012bfe:	f081 0120 	eor.w	r1, r1, #32
 8012c02:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012c06:	e6e8      	b.n	80129da <uxr_read_framed_msg+0x24e>
 8012c08:	1c58      	adds	r0, r3, #1
 8012c0a:	0842      	lsrs	r2, r0, #1
 8012c0c:	fba5 c202 	umull	ip, r2, r5, r2
 8012c10:	0892      	lsrs	r2, r2, #2
 8012c12:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012c16:	fb0c 0212 	mls	r2, ip, r2, r0
 8012c1a:	b2d0      	uxtb	r0, r2
 8012c1c:	4281      	cmp	r1, r0
 8012c1e:	f43f af32 	beq.w	8012a86 <uxr_read_framed_msg+0x2fa>
 8012c22:	4422      	add	r2, r4
 8012c24:	3302      	adds	r3, #2
 8012c26:	7890      	ldrb	r0, [r2, #2]
 8012c28:	085a      	lsrs	r2, r3, #1
 8012c2a:	fba5 1202 	umull	r1, r2, r5, r2
 8012c2e:	0892      	lsrs	r2, r2, #2
 8012c30:	fb0c 3312 	mls	r3, ip, r2, r3
 8012c34:	287e      	cmp	r0, #126	@ 0x7e
 8012c36:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c3a:	d01f      	beq.n	8012c7c <uxr_read_framed_msg+0x4f0>
 8012c3c:	f080 0020 	eor.w	r0, r0, #32
 8012c40:	e68b      	b.n	801295a <uxr_read_framed_msg+0x1ce>
 8012c42:	1c51      	adds	r1, r2, #1
 8012c44:	084b      	lsrs	r3, r1, #1
 8012c46:	fba5 c303 	umull	ip, r3, r5, r3
 8012c4a:	089b      	lsrs	r3, r3, #2
 8012c4c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012c50:	fb0c 1313 	mls	r3, ip, r3, r1
 8012c54:	b2d9      	uxtb	r1, r3
 8012c56:	4288      	cmp	r0, r1
 8012c58:	f43f af3d 	beq.w	8012ad6 <uxr_read_framed_msg+0x34a>
 8012c5c:	3202      	adds	r2, #2
 8012c5e:	4423      	add	r3, r4
 8012c60:	0850      	lsrs	r0, r2, #1
 8012c62:	789b      	ldrb	r3, [r3, #2]
 8012c64:	fba5 1000 	umull	r1, r0, r5, r0
 8012c68:	0880      	lsrs	r0, r0, #2
 8012c6a:	fb0c 2210 	mls	r2, ip, r0, r2
 8012c6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012c70:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012c74:	d016      	beq.n	8012ca4 <uxr_read_framed_msg+0x518>
 8012c76:	f083 0120 	eor.w	r1, r3, #32
 8012c7a:	e68b      	b.n	8012994 <uxr_read_framed_msg+0x208>
 8012c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	2302      	movs	r3, #2
 8012c82:	9301      	str	r3, [sp, #4]
 8012c84:	464a      	mov	r2, r9
 8012c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c88:	4641      	mov	r1, r8
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f7ff fcfc 	bl	8012688 <uxr_framing_read_transport>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f47f aef6 	bne.w	8012a82 <uxr_read_framed_msg+0x2f6>
 8012c96:	2301      	movs	r3, #1
 8012c98:	7023      	strb	r3, [r4, #0]
 8012c9a:	e588      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e7ee      	b.n	8012c82 <uxr_read_framed_msg+0x4f6>
 8012ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	2303      	movs	r3, #3
 8012caa:	e7ea      	b.n	8012c82 <uxr_read_framed_msg+0x4f6>
 8012cac:	ee17 8a90 	vmov	r8, s15
 8012cb0:	e6ae      	b.n	8012a10 <uxr_read_framed_msg+0x284>
 8012cb2:	bf00      	nop

08012cb4 <uxr_stream_id>:
 8012cb4:	2901      	cmp	r1, #1
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	d01d      	beq.n	8012cf6 <uxr_stream_id+0x42>
 8012cba:	2902      	cmp	r1, #2
 8012cbc:	f04f 0c00 	mov.w	ip, #0
 8012cc0:	d01e      	beq.n	8012d00 <uxr_stream_id+0x4c>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	f36c 0307 	bfi	r3, ip, #0, #8
 8012cc8:	f360 230f 	bfi	r3, r0, #8, #8
 8012ccc:	f361 4317 	bfi	r3, r1, #16, #8
 8012cd0:	f362 631f 	bfi	r3, r2, #24, #8
 8012cd4:	b2da      	uxtb	r2, r3
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	f362 0007 	bfi	r0, r2, #0, #8
 8012cdc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012ce0:	f362 200f 	bfi	r0, r2, #8, #8
 8012ce4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012ce8:	f362 4017 	bfi	r0, r2, #16, #8
 8012cec:	0e1b      	lsrs	r3, r3, #24
 8012cee:	f363 601f 	bfi	r0, r3, #24, #8
 8012cf2:	b002      	add	sp, #8
 8012cf4:	4770      	bx	lr
 8012cf6:	f100 0c01 	add.w	ip, r0, #1
 8012cfa:	fa5f fc8c 	uxtb.w	ip, ip
 8012cfe:	e7e0      	b.n	8012cc2 <uxr_stream_id+0xe>
 8012d00:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012d04:	e7dd      	b.n	8012cc2 <uxr_stream_id+0xe>
 8012d06:	bf00      	nop

08012d08 <uxr_stream_id_from_raw>:
 8012d08:	b082      	sub	sp, #8
 8012d0a:	b130      	cbz	r0, 8012d1a <uxr_stream_id_from_raw+0x12>
 8012d0c:	0603      	lsls	r3, r0, #24
 8012d0e:	d420      	bmi.n	8012d52 <uxr_stream_id_from_raw+0x4a>
 8012d10:	1e42      	subs	r2, r0, #1
 8012d12:	b2d2      	uxtb	r2, r2
 8012d14:	f04f 0c01 	mov.w	ip, #1
 8012d18:	e001      	b.n	8012d1e <uxr_stream_id_from_raw+0x16>
 8012d1a:	4684      	mov	ip, r0
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	2300      	movs	r3, #0
 8012d20:	f360 0307 	bfi	r3, r0, #0, #8
 8012d24:	f362 230f 	bfi	r3, r2, #8, #8
 8012d28:	f36c 4317 	bfi	r3, ip, #16, #8
 8012d2c:	f361 631f 	bfi	r3, r1, #24, #8
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	2000      	movs	r0, #0
 8012d34:	f362 0007 	bfi	r0, r2, #0, #8
 8012d38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012d3c:	f362 200f 	bfi	r0, r2, #8, #8
 8012d40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012d44:	f362 4017 	bfi	r0, r2, #16, #8
 8012d48:	0e1b      	lsrs	r3, r3, #24
 8012d4a:	f363 601f 	bfi	r0, r3, #24, #8
 8012d4e:	b002      	add	sp, #8
 8012d50:	4770      	bx	lr
 8012d52:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012d56:	f04f 0c02 	mov.w	ip, #2
 8012d5a:	e7e0      	b.n	8012d1e <uxr_stream_id_from_raw+0x16>

08012d5c <uxr_init_stream_storage>:
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	7403      	strb	r3, [r0, #16]
 8012d60:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012d64:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012d68:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop

08012d70 <uxr_reset_stream_storage>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	7c03      	ldrb	r3, [r0, #16]
 8012d74:	4604      	mov	r4, r0
 8012d76:	b153      	cbz	r3, 8012d8e <uxr_reset_stream_storage+0x1e>
 8012d78:	4606      	mov	r6, r0
 8012d7a:	2500      	movs	r5, #0
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f005 f895 	bl	8017eac <uxr_reset_output_best_effort_stream>
 8012d82:	7c23      	ldrb	r3, [r4, #16]
 8012d84:	3501      	adds	r5, #1
 8012d86:	42ab      	cmp	r3, r5
 8012d88:	f106 0610 	add.w	r6, r6, #16
 8012d8c:	d8f6      	bhi.n	8012d7c <uxr_reset_stream_storage+0xc>
 8012d8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012d92:	b163      	cbz	r3, 8012dae <uxr_reset_stream_storage+0x3e>
 8012d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d98:	2500      	movs	r5, #0
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f004 fe88 	bl	8017ab0 <uxr_reset_input_best_effort_stream>
 8012da0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012da4:	3501      	adds	r5, #1
 8012da6:	42ab      	cmp	r3, r5
 8012da8:	f106 0602 	add.w	r6, r6, #2
 8012dac:	d8f5      	bhi.n	8012d9a <uxr_reset_stream_storage+0x2a>
 8012dae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012db2:	b163      	cbz	r3, 8012dce <uxr_reset_stream_storage+0x5e>
 8012db4:	f104 0618 	add.w	r6, r4, #24
 8012db8:	2500      	movs	r5, #0
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f005 f922 	bl	8018004 <uxr_reset_output_reliable_stream>
 8012dc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012dc4:	3501      	adds	r5, #1
 8012dc6:	42ab      	cmp	r3, r5
 8012dc8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012dcc:	d8f5      	bhi.n	8012dba <uxr_reset_stream_storage+0x4a>
 8012dce:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012dd2:	b163      	cbz	r3, 8012dee <uxr_reset_stream_storage+0x7e>
 8012dd4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012dd8:	2500      	movs	r5, #0
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f004 fedc 	bl	8017b98 <uxr_reset_input_reliable_stream>
 8012de0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012de4:	3501      	adds	r5, #1
 8012de6:	42ab      	cmp	r3, r5
 8012de8:	f106 0618 	add.w	r6, r6, #24
 8012dec:	d8f5      	bhi.n	8012dda <uxr_reset_stream_storage+0x6a>
 8012dee:	bd70      	pop	{r4, r5, r6, pc}

08012df0 <uxr_add_output_best_effort_buffer>:
 8012df0:	b510      	push	{r4, lr}
 8012df2:	7c04      	ldrb	r4, [r0, #16]
 8012df4:	f104 0c01 	add.w	ip, r4, #1
 8012df8:	b082      	sub	sp, #8
 8012dfa:	f880 c010 	strb.w	ip, [r0, #16]
 8012dfe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012e02:	f005 f849 	bl	8017e98 <uxr_init_output_best_effort_stream>
 8012e06:	2201      	movs	r2, #1
 8012e08:	4611      	mov	r1, r2
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	b002      	add	sp, #8
 8012e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e12:	f7ff bf4f 	b.w	8012cb4 <uxr_stream_id>
 8012e16:	bf00      	nop

08012e18 <uxr_add_output_reliable_buffer>:
 8012e18:	b510      	push	{r4, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	4684      	mov	ip, r0
 8012e1e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012e22:	9000      	str	r0, [sp, #0]
 8012e24:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012e28:	2028      	movs	r0, #40	@ 0x28
 8012e2a:	fb00 c004 	mla	r0, r0, r4, ip
 8012e2e:	f104 0e01 	add.w	lr, r4, #1
 8012e32:	3018      	adds	r0, #24
 8012e34:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012e38:	f005 f8ac 	bl	8017f94 <uxr_init_output_reliable_stream>
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	2102      	movs	r1, #2
 8012e40:	4620      	mov	r0, r4
 8012e42:	b004      	add	sp, #16
 8012e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e48:	f7ff bf34 	b.w	8012cb4 <uxr_stream_id>

08012e4c <uxr_add_input_best_effort_buffer>:
 8012e4c:	b510      	push	{r4, lr}
 8012e4e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012e52:	4603      	mov	r3, r0
 8012e54:	1c62      	adds	r2, r4, #1
 8012e56:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e64:	f004 fe20 	bl	8017aa8 <uxr_init_input_best_effort_stream>
 8012e68:	2200      	movs	r2, #0
 8012e6a:	2101      	movs	r1, #1
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	b002      	add	sp, #8
 8012e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e74:	f7ff bf1e 	b.w	8012cb4 <uxr_stream_id>

08012e78 <uxr_add_input_reliable_buffer>:
 8012e78:	b510      	push	{r4, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	4684      	mov	ip, r0
 8012e7e:	9806      	ldr	r0, [sp, #24]
 8012e80:	9000      	str	r0, [sp, #0]
 8012e82:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012e86:	2018      	movs	r0, #24
 8012e88:	fb00 c004 	mla	r0, r0, r4, ip
 8012e8c:	f104 0e01 	add.w	lr, r4, #1
 8012e90:	3048      	adds	r0, #72	@ 0x48
 8012e92:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8012e96:	f004 fe53 	bl	8017b40 <uxr_init_input_reliable_stream>
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	2102      	movs	r1, #2
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	b004      	add	sp, #16
 8012ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ea6:	f7ff bf05 	b.w	8012cb4 <uxr_stream_id>
 8012eaa:	bf00      	nop

08012eac <uxr_get_output_best_effort_stream>:
 8012eac:	7c03      	ldrb	r3, [r0, #16]
 8012eae:	428b      	cmp	r3, r1
 8012eb0:	bf8c      	ite	hi
 8012eb2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012eb6:	2000      	movls	r0, #0
 8012eb8:	4770      	bx	lr
 8012eba:	bf00      	nop

08012ebc <uxr_get_output_reliable_stream>:
 8012ebc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012ec0:	428b      	cmp	r3, r1
 8012ec2:	bf83      	ittte	hi
 8012ec4:	2328      	movhi	r3, #40	@ 0x28
 8012ec6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012eca:	3018      	addhi	r0, #24
 8012ecc:	2000      	movls	r0, #0
 8012ece:	4770      	bx	lr

08012ed0 <uxr_get_input_best_effort_stream>:
 8012ed0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012ed4:	428b      	cmp	r3, r1
 8012ed6:	bf86      	itte	hi
 8012ed8:	3121      	addhi	r1, #33	@ 0x21
 8012eda:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012ede:	2000      	movls	r0, #0
 8012ee0:	4770      	bx	lr
 8012ee2:	bf00      	nop

08012ee4 <uxr_get_input_reliable_stream>:
 8012ee4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012ee8:	428b      	cmp	r3, r1
 8012eea:	bf83      	ittte	hi
 8012eec:	2318      	movhi	r3, #24
 8012eee:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012ef2:	3048      	addhi	r0, #72	@ 0x48
 8012ef4:	2000      	movls	r0, #0
 8012ef6:	4770      	bx	lr

08012ef8 <uxr_output_streams_confirmed>:
 8012ef8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012efc:	b183      	cbz	r3, 8012f20 <uxr_output_streams_confirmed+0x28>
 8012efe:	b570      	push	{r4, r5, r6, lr}
 8012f00:	4606      	mov	r6, r0
 8012f02:	f100 0518 	add.w	r5, r0, #24
 8012f06:	2400      	movs	r4, #0
 8012f08:	e001      	b.n	8012f0e <uxr_output_streams_confirmed+0x16>
 8012f0a:	3528      	adds	r5, #40	@ 0x28
 8012f0c:	b138      	cbz	r0, 8012f1e <uxr_output_streams_confirmed+0x26>
 8012f0e:	4628      	mov	r0, r5
 8012f10:	f005 fae8 	bl	80184e4 <uxr_is_output_up_to_date>
 8012f14:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012f18:	3401      	adds	r4, #1
 8012f1a:	42a3      	cmp	r3, r4
 8012f1c:	d8f5      	bhi.n	8012f0a <uxr_output_streams_confirmed+0x12>
 8012f1e:	bd70      	pop	{r4, r5, r6, pc}
 8012f20:	2001      	movs	r0, #1
 8012f22:	4770      	bx	lr

08012f24 <uxr_buffer_submessage_header>:
 8012f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f26:	4604      	mov	r4, r0
 8012f28:	460e      	mov	r6, r1
 8012f2a:	2104      	movs	r1, #4
 8012f2c:	4615      	mov	r5, r2
 8012f2e:	461f      	mov	r7, r3
 8012f30:	f7f9 faa8 	bl	800c484 <ucdr_align_to>
 8012f34:	2301      	movs	r3, #1
 8012f36:	ea47 0203 	orr.w	r2, r7, r3
 8012f3a:	4631      	mov	r1, r6
 8012f3c:	7523      	strb	r3, [r4, #20]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	462b      	mov	r3, r5
 8012f42:	f000 fa27 	bl	8013394 <uxr_serialize_submessage_header>
 8012f46:	4620      	mov	r0, r4
 8012f48:	f7f9 fab2 	bl	800c4b0 <ucdr_buffer_remaining>
 8012f4c:	42a8      	cmp	r0, r5
 8012f4e:	bf34      	ite	cc
 8012f50:	2000      	movcc	r0, #0
 8012f52:	2001      	movcs	r0, #1
 8012f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f56:	bf00      	nop

08012f58 <uxr_read_submessage_header>:
 8012f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	460d      	mov	r5, r1
 8012f60:	2104      	movs	r1, #4
 8012f62:	4616      	mov	r6, r2
 8012f64:	4698      	mov	r8, r3
 8012f66:	f7f9 fa8d 	bl	800c484 <ucdr_align_to>
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f7f9 faa0 	bl	800c4b0 <ucdr_buffer_remaining>
 8012f70:	2803      	cmp	r0, #3
 8012f72:	bf8c      	ite	hi
 8012f74:	2701      	movhi	r7, #1
 8012f76:	2700      	movls	r7, #0
 8012f78:	d802      	bhi.n	8012f80 <uxr_read_submessage_header+0x28>
 8012f7a:	4638      	mov	r0, r7
 8012f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f80:	4633      	mov	r3, r6
 8012f82:	4642      	mov	r2, r8
 8012f84:	4620      	mov	r0, r4
 8012f86:	4629      	mov	r1, r5
 8012f88:	f000 fa18 	bl	80133bc <uxr_deserialize_submessage_header>
 8012f8c:	f898 3000 	ldrb.w	r3, [r8]
 8012f90:	f003 0201 	and.w	r2, r3, #1
 8012f94:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012f98:	f888 3000 	strb.w	r3, [r8]
 8012f9c:	7522      	strb	r2, [r4, #20]
 8012f9e:	4638      	mov	r0, r7
 8012fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fa4 <uxr_submessage_padding>:
 8012fa4:	f010 0003 	ands.w	r0, r0, #3
 8012fa8:	bf18      	it	ne
 8012faa:	f1c0 0004 	rsbne	r0, r0, #4
 8012fae:	4770      	bx	lr

08012fb0 <uxr_millis>:
 8012fb0:	b510      	push	{r4, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	4669      	mov	r1, sp
 8012fb6:	2001      	movs	r0, #1
 8012fb8:	f7ee ff22 	bl	8001e00 <clock_gettime>
 8012fbc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012fc0:	4906      	ldr	r1, [pc, #24]	@ (8012fdc <uxr_millis+0x2c>)
 8012fc2:	fba0 0301 	umull	r0, r3, r0, r1
 8012fc6:	1900      	adds	r0, r0, r4
 8012fc8:	fb01 3102 	mla	r1, r1, r2, r3
 8012fcc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012fd0:	4a03      	ldr	r2, [pc, #12]	@ (8012fe0 <uxr_millis+0x30>)
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	f7ed fb98 	bl	8000708 <__aeabi_ldivmod>
 8012fd8:	b004      	add	sp, #16
 8012fda:	bd10      	pop	{r4, pc}
 8012fdc:	3b9aca00 	.word	0x3b9aca00
 8012fe0:	000f4240 	.word	0x000f4240

08012fe4 <uxr_nanos>:
 8012fe4:	b510      	push	{r4, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	4669      	mov	r1, sp
 8012fea:	2001      	movs	r0, #1
 8012fec:	f7ee ff08 	bl	8001e00 <clock_gettime>
 8012ff0:	4a06      	ldr	r2, [pc, #24]	@ (801300c <uxr_nanos+0x28>)
 8012ff2:	9800      	ldr	r0, [sp, #0]
 8012ff4:	9902      	ldr	r1, [sp, #8]
 8012ff6:	9c01      	ldr	r4, [sp, #4]
 8012ff8:	fba0 0302 	umull	r0, r3, r0, r2
 8012ffc:	1840      	adds	r0, r0, r1
 8012ffe:	fb02 3304 	mla	r3, r2, r4, r3
 8013002:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013006:	b004      	add	sp, #16
 8013008:	bd10      	pop	{r4, pc}
 801300a:	bf00      	nop
 801300c:	3b9aca00 	.word	0x3b9aca00

08013010 <on_full_output_buffer_fragmented>:
 8013010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013014:	460c      	mov	r4, r1
 8013016:	b08a      	sub	sp, #40	@ 0x28
 8013018:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801301c:	4606      	mov	r6, r0
 801301e:	f104 0008 	add.w	r0, r4, #8
 8013022:	f7ff ff4b 	bl	8012ebc <uxr_get_output_reliable_stream>
 8013026:	4605      	mov	r5, r0
 8013028:	f005 fa66 	bl	80184f8 <get_available_free_slots>
 801302c:	b968      	cbnz	r0, 801304a <on_full_output_buffer_fragmented+0x3a>
 801302e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013032:	4620      	mov	r0, r4
 8013034:	4798      	blx	r3
 8013036:	b918      	cbnz	r0, 8013040 <on_full_output_buffer_fragmented+0x30>
 8013038:	2001      	movs	r0, #1
 801303a:	b00a      	add	sp, #40	@ 0x28
 801303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013040:	4628      	mov	r0, r5
 8013042:	f005 fa59 	bl	80184f8 <get_available_free_slots>
 8013046:	2800      	cmp	r0, #0
 8013048:	d0f6      	beq.n	8013038 <on_full_output_buffer_fragmented+0x28>
 801304a:	8929      	ldrh	r1, [r5, #8]
 801304c:	89eb      	ldrh	r3, [r5, #14]
 801304e:	7b28      	ldrb	r0, [r5, #12]
 8013050:	686a      	ldr	r2, [r5, #4]
 8013052:	fbb2 f8f1 	udiv	r8, r2, r1
 8013056:	fbb3 f2f1 	udiv	r2, r3, r1
 801305a:	fb01 3112 	mls	r1, r1, r2, r3
 801305e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013062:	b289      	uxth	r1, r1
 8013064:	fb08 f101 	mul.w	r1, r8, r1
 8013068:	30fc      	adds	r0, #252	@ 0xfc
 801306a:	f1a8 0804 	sub.w	r8, r8, #4
 801306e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013072:	4440      	add	r0, r8
 8013074:	b287      	uxth	r7, r0
 8013076:	1bdb      	subs	r3, r3, r7
 8013078:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	3104      	adds	r1, #4
 8013080:	4419      	add	r1, r3
 8013082:	4642      	mov	r2, r8
 8013084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	a802      	add	r0, sp, #8
 801308c:	2300      	movs	r3, #0
 801308e:	f7f9 f9cd 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8013092:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013096:	f102 0308 	add.w	r3, r2, #8
 801309a:	4543      	cmp	r3, r8
 801309c:	d928      	bls.n	80130f0 <on_full_output_buffer_fragmented+0xe0>
 801309e:	463a      	mov	r2, r7
 80130a0:	2300      	movs	r3, #0
 80130a2:	210d      	movs	r1, #13
 80130a4:	a802      	add	r0, sp, #8
 80130a6:	f7ff ff3d 	bl	8012f24 <uxr_buffer_submessage_header>
 80130aa:	8929      	ldrh	r1, [r5, #8]
 80130ac:	89eb      	ldrh	r3, [r5, #14]
 80130ae:	fbb3 f2f1 	udiv	r2, r3, r1
 80130b2:	fb01 3312 	mls	r3, r1, r2, r3
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	686a      	ldr	r2, [r5, #4]
 80130ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80130be:	fb02 f303 	mul.w	r3, r2, r3
 80130c2:	682a      	ldr	r2, [r5, #0]
 80130c4:	f842 8003 	str.w	r8, [r2, r3]
 80130c8:	89e8      	ldrh	r0, [r5, #14]
 80130ca:	2101      	movs	r1, #1
 80130cc:	f005 fa34 	bl	8018538 <uxr_seq_num_add>
 80130d0:	9904      	ldr	r1, [sp, #16]
 80130d2:	9a03      	ldr	r2, [sp, #12]
 80130d4:	81e8      	strh	r0, [r5, #14]
 80130d6:	1a52      	subs	r2, r2, r1
 80130d8:	4630      	mov	r0, r6
 80130da:	f7f9 f9b9 	bl	800c450 <ucdr_init_buffer>
 80130de:	4630      	mov	r0, r6
 80130e0:	490f      	ldr	r1, [pc, #60]	@ (8013120 <on_full_output_buffer_fragmented+0x110>)
 80130e2:	4622      	mov	r2, r4
 80130e4:	f7f9 f988 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 80130e8:	2000      	movs	r0, #0
 80130ea:	b00a      	add	sp, #40	@ 0x28
 80130ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f0:	b292      	uxth	r2, r2
 80130f2:	2302      	movs	r3, #2
 80130f4:	210d      	movs	r1, #13
 80130f6:	a802      	add	r0, sp, #8
 80130f8:	f7ff ff14 	bl	8012f24 <uxr_buffer_submessage_header>
 80130fc:	8928      	ldrh	r0, [r5, #8]
 80130fe:	89eb      	ldrh	r3, [r5, #14]
 8013100:	fbb3 f1f0 	udiv	r1, r3, r0
 8013104:	fb00 3311 	mls	r3, r0, r1, r3
 8013108:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801310c:	6869      	ldr	r1, [r5, #4]
 801310e:	fbb1 f1f0 	udiv	r1, r1, r0
 8013112:	b29b      	uxth	r3, r3
 8013114:	fb01 f303 	mul.w	r3, r1, r3
 8013118:	6829      	ldr	r1, [r5, #0]
 801311a:	3208      	adds	r2, #8
 801311c:	50ca      	str	r2, [r1, r3]
 801311e:	e7d3      	b.n	80130c8 <on_full_output_buffer_fragmented+0xb8>
 8013120:	08013011 	.word	0x08013011

08013124 <uxr_prepare_output_stream>:
 8013124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013126:	b087      	sub	sp, #28
 8013128:	2707      	movs	r7, #7
 801312a:	9202      	str	r2, [sp, #8]
 801312c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801312e:	9103      	str	r1, [sp, #12]
 8013130:	2500      	movs	r5, #0
 8013132:	3204      	adds	r2, #4
 8013134:	e9cd 7500 	strd	r7, r5, [sp]
 8013138:	461c      	mov	r4, r3
 801313a:	4606      	mov	r6, r0
 801313c:	f7fe ffc2 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8013140:	f080 0201 	eor.w	r2, r0, #1
 8013144:	b2d2      	uxtb	r2, r2
 8013146:	75a2      	strb	r2, [r4, #22]
 8013148:	b112      	cbz	r2, 8013150 <uxr_prepare_output_stream+0x2c>
 801314a:	4628      	mov	r0, r5
 801314c:	b007      	add	sp, #28
 801314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013150:	aa05      	add	r2, sp, #20
 8013152:	9902      	ldr	r1, [sp, #8]
 8013154:	4630      	mov	r0, r6
 8013156:	f7ff f8eb 	bl	8012330 <uxr_init_base_object_request>
 801315a:	a905      	add	r1, sp, #20
 801315c:	4605      	mov	r5, r0
 801315e:	4620      	mov	r0, r4
 8013160:	f000 ffd4 	bl	801410c <uxr_serialize_WRITE_DATA_Payload_Data>
 8013164:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013168:	69a6      	ldr	r6, [r4, #24]
 801316a:	69e7      	ldr	r7, [r4, #28]
 801316c:	1a52      	subs	r2, r2, r1
 801316e:	4620      	mov	r0, r4
 8013170:	f7f9 f96e 	bl	800c450 <ucdr_init_buffer>
 8013174:	4620      	mov	r0, r4
 8013176:	463a      	mov	r2, r7
 8013178:	4631      	mov	r1, r6
 801317a:	f7f9 f93d 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 801317e:	4628      	mov	r0, r5
 8013180:	b007      	add	sp, #28
 8013182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013184 <uxr_prepare_output_stream_fragmented>:
 8013184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013188:	b091      	sub	sp, #68	@ 0x44
 801318a:	4605      	mov	r5, r0
 801318c:	9105      	str	r1, [sp, #20]
 801318e:	3008      	adds	r0, #8
 8013190:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013194:	461e      	mov	r6, r3
 8013196:	9204      	str	r2, [sp, #16]
 8013198:	f7ff fe90 	bl	8012ebc <uxr_get_output_reliable_stream>
 801319c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	f000 8091 	beq.w	80132c8 <uxr_prepare_output_stream_fragmented+0x144>
 80131a6:	4604      	mov	r4, r0
 80131a8:	2800      	cmp	r0, #0
 80131aa:	f000 808d 	beq.w	80132c8 <uxr_prepare_output_stream_fragmented+0x144>
 80131ae:	f005 f9a3 	bl	80184f8 <get_available_free_slots>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	f000 8083 	beq.w	80132be <uxr_prepare_output_stream_fragmented+0x13a>
 80131b8:	8922      	ldrh	r2, [r4, #8]
 80131ba:	89e7      	ldrh	r7, [r4, #14]
 80131bc:	fbb7 f9f2 	udiv	r9, r7, r2
 80131c0:	fb02 7919 	mls	r9, r2, r9, r7
 80131c4:	fa1f f989 	uxth.w	r9, r9
 80131c8:	6863      	ldr	r3, [r4, #4]
 80131ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	9203      	str	r2, [sp, #12]
 80131d2:	fb02 f909 	mul.w	r9, r2, r9
 80131d6:	f109 0904 	add.w	r9, r9, #4
 80131da:	4499      	add	r9, r3
 80131dc:	7b23      	ldrb	r3, [r4, #12]
 80131de:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80131e2:	4543      	cmp	r3, r8
 80131e4:	f1a2 0b04 	sub.w	fp, r2, #4
 80131e8:	d37a      	bcc.n	80132e0 <uxr_prepare_output_stream_fragmented+0x15c>
 80131ea:	f1ab 0a04 	sub.w	sl, fp, #4
 80131ee:	ebaa 0a03 	sub.w	sl, sl, r3
 80131f2:	465a      	mov	r2, fp
 80131f4:	2300      	movs	r3, #0
 80131f6:	4649      	mov	r1, r9
 80131f8:	a808      	add	r0, sp, #32
 80131fa:	f8cd 8000 	str.w	r8, [sp]
 80131fe:	f7f9 f915 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8013202:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013204:	fa1f fa8a 	uxth.w	sl, sl
 8013208:	4652      	mov	r2, sl
 801320a:	f103 0a08 	add.w	sl, r3, #8
 801320e:	45da      	cmp	sl, fp
 8013210:	bf34      	ite	cc
 8013212:	2302      	movcc	r3, #2
 8013214:	2300      	movcs	r3, #0
 8013216:	210d      	movs	r1, #13
 8013218:	a808      	add	r0, sp, #32
 801321a:	f7ff fe83 	bl	8012f24 <uxr_buffer_submessage_header>
 801321e:	8921      	ldrh	r1, [r4, #8]
 8013220:	fbb7 f2f1 	udiv	r2, r7, r1
 8013224:	fb01 7212 	mls	r2, r1, r2, r7
 8013228:	b292      	uxth	r2, r2
 801322a:	6863      	ldr	r3, [r4, #4]
 801322c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013230:	fb02 f303 	mul.w	r3, r2, r3
 8013234:	6822      	ldr	r2, [r4, #0]
 8013236:	4638      	mov	r0, r7
 8013238:	f842 b003 	str.w	fp, [r2, r3]
 801323c:	2101      	movs	r1, #1
 801323e:	f005 f97b 	bl	8018538 <uxr_seq_num_add>
 8013242:	9b03      	ldr	r3, [sp, #12]
 8013244:	f108 0104 	add.w	r1, r8, #4
 8013248:	f1a3 0208 	sub.w	r2, r3, #8
 801324c:	eba2 0208 	sub.w	r2, r2, r8
 8013250:	4449      	add	r1, r9
 8013252:	4607      	mov	r7, r0
 8013254:	4630      	mov	r0, r6
 8013256:	f7f9 f8fb 	bl	800c450 <ucdr_init_buffer>
 801325a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801325c:	81e7      	strh	r7, [r4, #14]
 801325e:	1d1a      	adds	r2, r3, #4
 8013260:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013264:	bf28      	it	cs
 8013266:	2200      	movcs	r2, #0
 8013268:	2300      	movs	r3, #0
 801326a:	b292      	uxth	r2, r2
 801326c:	2107      	movs	r1, #7
 801326e:	4630      	mov	r0, r6
 8013270:	f7ff fe58 	bl	8012f24 <uxr_buffer_submessage_header>
 8013274:	9904      	ldr	r1, [sp, #16]
 8013276:	aa07      	add	r2, sp, #28
 8013278:	4628      	mov	r0, r5
 801327a:	f7ff f859 	bl	8012330 <uxr_init_base_object_request>
 801327e:	4604      	mov	r4, r0
 8013280:	b318      	cbz	r0, 80132ca <uxr_prepare_output_stream_fragmented+0x146>
 8013282:	a907      	add	r1, sp, #28
 8013284:	4630      	mov	r0, r6
 8013286:	f000 ff41 	bl	801410c <uxr_serialize_WRITE_DATA_Payload_Data>
 801328a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801328e:	4630      	mov	r0, r6
 8013290:	1a52      	subs	r2, r2, r1
 8013292:	f7f9 f8dd 	bl	800c450 <ucdr_init_buffer>
 8013296:	9b05      	ldr	r3, [sp, #20]
 8013298:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801329c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801329e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80132a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80132a4:	491b      	ldr	r1, [pc, #108]	@ (8013314 <uxr_prepare_output_stream_fragmented+0x190>)
 80132a6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80132aa:	4630      	mov	r0, r6
 80132ac:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80132b0:	462a      	mov	r2, r5
 80132b2:	f7f9 f8a1 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 80132b6:	4620      	mov	r0, r4
 80132b8:	b011      	add	sp, #68	@ 0x44
 80132ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132be:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80132c0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80132c2:	4628      	mov	r0, r5
 80132c4:	4798      	blx	r3
 80132c6:	b920      	cbnz	r0, 80132d2 <uxr_prepare_output_stream_fragmented+0x14e>
 80132c8:	2400      	movs	r4, #0
 80132ca:	4620      	mov	r0, r4
 80132cc:	b011      	add	sp, #68	@ 0x44
 80132ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132d2:	4620      	mov	r0, r4
 80132d4:	f005 f910 	bl	80184f8 <get_available_free_slots>
 80132d8:	2800      	cmp	r0, #0
 80132da:	f47f af6d 	bne.w	80131b8 <uxr_prepare_output_stream_fragmented+0x34>
 80132de:	e7f3      	b.n	80132c8 <uxr_prepare_output_stream_fragmented+0x144>
 80132e0:	4638      	mov	r0, r7
 80132e2:	2101      	movs	r1, #1
 80132e4:	f005 f928 	bl	8018538 <uxr_seq_num_add>
 80132e8:	8921      	ldrh	r1, [r4, #8]
 80132ea:	fbb0 f2f1 	udiv	r2, r0, r1
 80132ee:	fb01 0912 	mls	r9, r1, r2, r0
 80132f2:	fa1f f289 	uxth.w	r2, r9
 80132f6:	6863      	ldr	r3, [r4, #4]
 80132f8:	fbb3 f9f1 	udiv	r9, r3, r1
 80132fc:	6823      	ldr	r3, [r4, #0]
 80132fe:	fb02 f909 	mul.w	r9, r2, r9
 8013302:	f109 0904 	add.w	r9, r9, #4
 8013306:	4499      	add	r9, r3
 8013308:	4607      	mov	r7, r0
 801330a:	7b23      	ldrb	r3, [r4, #12]
 801330c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013310:	e76b      	b.n	80131ea <uxr_prepare_output_stream_fragmented+0x66>
 8013312:	bf00      	nop
 8013314:	08013011 	.word	0x08013011

08013318 <uxr_serialize_message_header>:
 8013318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801331a:	b083      	sub	sp, #12
 801331c:	4616      	mov	r6, r2
 801331e:	4604      	mov	r4, r0
 8013320:	9301      	str	r3, [sp, #4]
 8013322:	460d      	mov	r5, r1
 8013324:	9f08      	ldr	r7, [sp, #32]
 8013326:	f7f7 ff51 	bl	800b1cc <ucdr_serialize_uint8_t>
 801332a:	4631      	mov	r1, r6
 801332c:	4620      	mov	r0, r4
 801332e:	f7f7 ff4d 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013332:	9a01      	ldr	r2, [sp, #4]
 8013334:	2101      	movs	r1, #1
 8013336:	4620      	mov	r0, r4
 8013338:	f7f7 fff4 	bl	800b324 <ucdr_serialize_endian_uint16_t>
 801333c:	062b      	lsls	r3, r5, #24
 801333e:	d501      	bpl.n	8013344 <uxr_serialize_message_header+0x2c>
 8013340:	b003      	add	sp, #12
 8013342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013344:	2204      	movs	r2, #4
 8013346:	4639      	mov	r1, r7
 8013348:	4620      	mov	r0, r4
 801334a:	b003      	add	sp, #12
 801334c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013350:	f004 baca 	b.w	80178e8 <ucdr_serialize_array_uint8_t>

08013354 <uxr_deserialize_message_header>:
 8013354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013356:	b083      	sub	sp, #12
 8013358:	4616      	mov	r6, r2
 801335a:	4604      	mov	r4, r0
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	460d      	mov	r5, r1
 8013360:	9f08      	ldr	r7, [sp, #32]
 8013362:	f7f7 ff49 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013366:	4631      	mov	r1, r6
 8013368:	4620      	mov	r0, r4
 801336a:	f7f7 ff45 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 801336e:	9a01      	ldr	r2, [sp, #4]
 8013370:	2101      	movs	r1, #1
 8013372:	4620      	mov	r0, r4
 8013374:	f7f8 f8ca 	bl	800b50c <ucdr_deserialize_endian_uint16_t>
 8013378:	f995 3000 	ldrsb.w	r3, [r5]
 801337c:	2b00      	cmp	r3, #0
 801337e:	da01      	bge.n	8013384 <uxr_deserialize_message_header+0x30>
 8013380:	b003      	add	sp, #12
 8013382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013384:	2204      	movs	r2, #4
 8013386:	4639      	mov	r1, r7
 8013388:	4620      	mov	r0, r4
 801338a:	b003      	add	sp, #12
 801338c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013390:	f004 bb0e 	b.w	80179b0 <ucdr_deserialize_array_uint8_t>

08013394 <uxr_serialize_submessage_header>:
 8013394:	b530      	push	{r4, r5, lr}
 8013396:	b083      	sub	sp, #12
 8013398:	4615      	mov	r5, r2
 801339a:	4604      	mov	r4, r0
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	f7f7 ff15 	bl	800b1cc <ucdr_serialize_uint8_t>
 80133a2:	4629      	mov	r1, r5
 80133a4:	4620      	mov	r0, r4
 80133a6:	f7f7 ff11 	bl	800b1cc <ucdr_serialize_uint8_t>
 80133aa:	9a01      	ldr	r2, [sp, #4]
 80133ac:	2101      	movs	r1, #1
 80133ae:	4620      	mov	r0, r4
 80133b0:	b003      	add	sp, #12
 80133b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133b6:	f7f7 bfb5 	b.w	800b324 <ucdr_serialize_endian_uint16_t>
 80133ba:	bf00      	nop

080133bc <uxr_deserialize_submessage_header>:
 80133bc:	b530      	push	{r4, r5, lr}
 80133be:	b083      	sub	sp, #12
 80133c0:	4615      	mov	r5, r2
 80133c2:	4604      	mov	r4, r0
 80133c4:	9301      	str	r3, [sp, #4]
 80133c6:	f7f7 ff17 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 80133ca:	4629      	mov	r1, r5
 80133cc:	4620      	mov	r0, r4
 80133ce:	f7f7 ff13 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 80133d2:	9a01      	ldr	r2, [sp, #4]
 80133d4:	2101      	movs	r1, #1
 80133d6:	4620      	mov	r0, r4
 80133d8:	b003      	add	sp, #12
 80133da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133de:	f7f8 b895 	b.w	800b50c <ucdr_deserialize_endian_uint16_t>
 80133e2:	bf00      	nop

080133e4 <uxr_serialize_CLIENT_Representation>:
 80133e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133e8:	2204      	movs	r2, #4
 80133ea:	460e      	mov	r6, r1
 80133ec:	4605      	mov	r5, r0
 80133ee:	f004 fa7b 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 80133f2:	2202      	movs	r2, #2
 80133f4:	4607      	mov	r7, r0
 80133f6:	1d31      	adds	r1, r6, #4
 80133f8:	4628      	mov	r0, r5
 80133fa:	f004 fa75 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 80133fe:	4038      	ands	r0, r7
 8013400:	2202      	movs	r2, #2
 8013402:	1db1      	adds	r1, r6, #6
 8013404:	b2c7      	uxtb	r7, r0
 8013406:	4628      	mov	r0, r5
 8013408:	f004 fa6e 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801340c:	2204      	movs	r2, #4
 801340e:	4007      	ands	r7, r0
 8013410:	f106 0108 	add.w	r1, r6, #8
 8013414:	4628      	mov	r0, r5
 8013416:	f004 fa67 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801341a:	7b31      	ldrb	r1, [r6, #12]
 801341c:	4007      	ands	r7, r0
 801341e:	4628      	mov	r0, r5
 8013420:	f7f7 fed4 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013424:	7b71      	ldrb	r1, [r6, #13]
 8013426:	4007      	ands	r7, r0
 8013428:	4628      	mov	r0, r5
 801342a:	f7f7 fea1 	bl	800b170 <ucdr_serialize_bool>
 801342e:	7b73      	ldrb	r3, [r6, #13]
 8013430:	ea07 0800 	and.w	r8, r7, r0
 8013434:	b93b      	cbnz	r3, 8013446 <uxr_serialize_CLIENT_Representation+0x62>
 8013436:	8bb1      	ldrh	r1, [r6, #28]
 8013438:	4628      	mov	r0, r5
 801343a:	f7f7 fef3 	bl	800b224 <ucdr_serialize_uint16_t>
 801343e:	ea08 0000 	and.w	r0, r8, r0
 8013442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013446:	6931      	ldr	r1, [r6, #16]
 8013448:	4628      	mov	r0, r5
 801344a:	f7f8 f8d5 	bl	800b5f8 <ucdr_serialize_uint32_t>
 801344e:	6933      	ldr	r3, [r6, #16]
 8013450:	b1e3      	cbz	r3, 801348c <uxr_serialize_CLIENT_Representation+0xa8>
 8013452:	b1c0      	cbz	r0, 8013486 <uxr_serialize_CLIENT_Representation+0xa2>
 8013454:	4637      	mov	r7, r6
 8013456:	f04f 0900 	mov.w	r9, #0
 801345a:	e001      	b.n	8013460 <uxr_serialize_CLIENT_Representation+0x7c>
 801345c:	3708      	adds	r7, #8
 801345e:	b194      	cbz	r4, 8013486 <uxr_serialize_CLIENT_Representation+0xa2>
 8013460:	6979      	ldr	r1, [r7, #20]
 8013462:	4628      	mov	r0, r5
 8013464:	f004 fb08 	bl	8017a78 <ucdr_serialize_string>
 8013468:	69b9      	ldr	r1, [r7, #24]
 801346a:	4604      	mov	r4, r0
 801346c:	4628      	mov	r0, r5
 801346e:	f004 fb03 	bl	8017a78 <ucdr_serialize_string>
 8013472:	6933      	ldr	r3, [r6, #16]
 8013474:	f109 0901 	add.w	r9, r9, #1
 8013478:	4004      	ands	r4, r0
 801347a:	4599      	cmp	r9, r3
 801347c:	b2e4      	uxtb	r4, r4
 801347e:	d3ed      	bcc.n	801345c <uxr_serialize_CLIENT_Representation+0x78>
 8013480:	ea08 0804 	and.w	r8, r8, r4
 8013484:	e7d7      	b.n	8013436 <uxr_serialize_CLIENT_Representation+0x52>
 8013486:	f04f 0800 	mov.w	r8, #0
 801348a:	e7d4      	b.n	8013436 <uxr_serialize_CLIENT_Representation+0x52>
 801348c:	ea08 0800 	and.w	r8, r8, r0
 8013490:	e7d1      	b.n	8013436 <uxr_serialize_CLIENT_Representation+0x52>
 8013492:	bf00      	nop

08013494 <uxr_deserialize_CLIENT_Representation>:
 8013494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013498:	2204      	movs	r2, #4
 801349a:	460c      	mov	r4, r1
 801349c:	4605      	mov	r5, r0
 801349e:	f004 fa87 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 80134a2:	2202      	movs	r2, #2
 80134a4:	4607      	mov	r7, r0
 80134a6:	1d21      	adds	r1, r4, #4
 80134a8:	4628      	mov	r0, r5
 80134aa:	f004 fa81 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 80134ae:	4038      	ands	r0, r7
 80134b0:	2202      	movs	r2, #2
 80134b2:	1da1      	adds	r1, r4, #6
 80134b4:	b2c6      	uxtb	r6, r0
 80134b6:	4628      	mov	r0, r5
 80134b8:	f004 fa7a 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 80134bc:	2204      	movs	r2, #4
 80134be:	4006      	ands	r6, r0
 80134c0:	f104 0108 	add.w	r1, r4, #8
 80134c4:	4628      	mov	r0, r5
 80134c6:	f004 fa73 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 80134ca:	f104 010c 	add.w	r1, r4, #12
 80134ce:	4006      	ands	r6, r0
 80134d0:	4628      	mov	r0, r5
 80134d2:	f7f7 fe91 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 80134d6:	f104 010d 	add.w	r1, r4, #13
 80134da:	ea06 0700 	and.w	r7, r6, r0
 80134de:	4628      	mov	r0, r5
 80134e0:	f7f7 fe5c 	bl	800b19c <ucdr_deserialize_bool>
 80134e4:	7b63      	ldrb	r3, [r4, #13]
 80134e6:	4007      	ands	r7, r0
 80134e8:	b93b      	cbnz	r3, 80134fa <uxr_deserialize_CLIENT_Representation+0x66>
 80134ea:	f104 011c 	add.w	r1, r4, #28
 80134ee:	4628      	mov	r0, r5
 80134f0:	f7f7 ff98 	bl	800b424 <ucdr_deserialize_uint16_t>
 80134f4:	4038      	ands	r0, r7
 80134f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fa:	f104 0110 	add.w	r1, r4, #16
 80134fe:	4628      	mov	r0, r5
 8013500:	f7f8 f9aa 	bl	800b858 <ucdr_deserialize_uint32_t>
 8013504:	6923      	ldr	r3, [r4, #16]
 8013506:	2b01      	cmp	r3, #1
 8013508:	d903      	bls.n	8013512 <uxr_deserialize_CLIENT_Representation+0x7e>
 801350a:	2301      	movs	r3, #1
 801350c:	75ab      	strb	r3, [r5, #22]
 801350e:	2700      	movs	r7, #0
 8013510:	e7eb      	b.n	80134ea <uxr_deserialize_CLIENT_Representation+0x56>
 8013512:	b30b      	cbz	r3, 8013558 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013514:	2800      	cmp	r0, #0
 8013516:	d0fa      	beq.n	801350e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013518:	46a0      	mov	r8, r4
 801351a:	f04f 0900 	mov.w	r9, #0
 801351e:	e001      	b.n	8013524 <uxr_deserialize_CLIENT_Representation+0x90>
 8013520:	2e00      	cmp	r6, #0
 8013522:	d0f4      	beq.n	801350e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013524:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801352c:	4628      	mov	r0, r5
 801352e:	f004 fab3 	bl	8017a98 <ucdr_deserialize_string>
 8013532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013536:	4606      	mov	r6, r0
 8013538:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801353c:	4628      	mov	r0, r5
 801353e:	f004 faab 	bl	8017a98 <ucdr_deserialize_string>
 8013542:	6923      	ldr	r3, [r4, #16]
 8013544:	f109 0901 	add.w	r9, r9, #1
 8013548:	4006      	ands	r6, r0
 801354a:	4599      	cmp	r9, r3
 801354c:	f108 0808 	add.w	r8, r8, #8
 8013550:	b2f6      	uxtb	r6, r6
 8013552:	d3e5      	bcc.n	8013520 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013554:	4037      	ands	r7, r6
 8013556:	e7c8      	b.n	80134ea <uxr_deserialize_CLIENT_Representation+0x56>
 8013558:	4007      	ands	r7, r0
 801355a:	e7c6      	b.n	80134ea <uxr_deserialize_CLIENT_Representation+0x56>

0801355c <uxr_serialize_AGENT_Representation>:
 801355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013560:	2204      	movs	r2, #4
 8013562:	460f      	mov	r7, r1
 8013564:	4605      	mov	r5, r0
 8013566:	f004 f9bf 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801356a:	2202      	movs	r2, #2
 801356c:	4604      	mov	r4, r0
 801356e:	1d39      	adds	r1, r7, #4
 8013570:	4628      	mov	r0, r5
 8013572:	f004 f9b9 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013576:	4020      	ands	r0, r4
 8013578:	2202      	movs	r2, #2
 801357a:	1db9      	adds	r1, r7, #6
 801357c:	b2c4      	uxtb	r4, r0
 801357e:	4628      	mov	r0, r5
 8013580:	f004 f9b2 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013584:	7a39      	ldrb	r1, [r7, #8]
 8013586:	4004      	ands	r4, r0
 8013588:	4628      	mov	r0, r5
 801358a:	f7f7 fdf1 	bl	800b170 <ucdr_serialize_bool>
 801358e:	7a3b      	ldrb	r3, [r7, #8]
 8013590:	ea00 0804 	and.w	r8, r0, r4
 8013594:	b913      	cbnz	r3, 801359c <uxr_serialize_AGENT_Representation+0x40>
 8013596:	4640      	mov	r0, r8
 8013598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801359c:	68f9      	ldr	r1, [r7, #12]
 801359e:	4628      	mov	r0, r5
 80135a0:	f7f8 f82a 	bl	800b5f8 <ucdr_serialize_uint32_t>
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	b303      	cbz	r3, 80135ea <uxr_serialize_AGENT_Representation+0x8e>
 80135a8:	b1d0      	cbz	r0, 80135e0 <uxr_serialize_AGENT_Representation+0x84>
 80135aa:	463e      	mov	r6, r7
 80135ac:	f04f 0900 	mov.w	r9, #0
 80135b0:	e001      	b.n	80135b6 <uxr_serialize_AGENT_Representation+0x5a>
 80135b2:	3608      	adds	r6, #8
 80135b4:	b1a4      	cbz	r4, 80135e0 <uxr_serialize_AGENT_Representation+0x84>
 80135b6:	6931      	ldr	r1, [r6, #16]
 80135b8:	4628      	mov	r0, r5
 80135ba:	f004 fa5d 	bl	8017a78 <ucdr_serialize_string>
 80135be:	6971      	ldr	r1, [r6, #20]
 80135c0:	4604      	mov	r4, r0
 80135c2:	4628      	mov	r0, r5
 80135c4:	f004 fa58 	bl	8017a78 <ucdr_serialize_string>
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f109 0901 	add.w	r9, r9, #1
 80135ce:	4004      	ands	r4, r0
 80135d0:	4599      	cmp	r9, r3
 80135d2:	b2e4      	uxtb	r4, r4
 80135d4:	d3ed      	bcc.n	80135b2 <uxr_serialize_AGENT_Representation+0x56>
 80135d6:	ea08 0804 	and.w	r8, r8, r4
 80135da:	4640      	mov	r0, r8
 80135dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135e0:	f04f 0800 	mov.w	r8, #0
 80135e4:	4640      	mov	r0, r8
 80135e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ea:	ea08 0800 	and.w	r8, r8, r0
 80135ee:	e7d2      	b.n	8013596 <uxr_serialize_AGENT_Representation+0x3a>

080135f0 <uxr_serialize_DATAWRITER_Representation>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	460d      	mov	r5, r1
 80135f4:	7809      	ldrb	r1, [r1, #0]
 80135f6:	4606      	mov	r6, r0
 80135f8:	f7f7 fde8 	bl	800b1cc <ucdr_serialize_uint8_t>
 80135fc:	4604      	mov	r4, r0
 80135fe:	b130      	cbz	r0, 801360e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013600:	782b      	ldrb	r3, [r5, #0]
 8013602:	2b02      	cmp	r3, #2
 8013604:	d00c      	beq.n	8013620 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013606:	2b03      	cmp	r3, #3
 8013608:	d010      	beq.n	801362c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801360a:	2b01      	cmp	r3, #1
 801360c:	d008      	beq.n	8013620 <uxr_serialize_DATAWRITER_Representation+0x30>
 801360e:	2202      	movs	r2, #2
 8013610:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013614:	4630      	mov	r0, r6
 8013616:	f004 f967 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801361a:	4020      	ands	r0, r4
 801361c:	b2c0      	uxtb	r0, r0
 801361e:	bd70      	pop	{r4, r5, r6, pc}
 8013620:	6869      	ldr	r1, [r5, #4]
 8013622:	4630      	mov	r0, r6
 8013624:	f004 fa28 	bl	8017a78 <ucdr_serialize_string>
 8013628:	4604      	mov	r4, r0
 801362a:	e7f0      	b.n	801360e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801362c:	4629      	mov	r1, r5
 801362e:	4630      	mov	r0, r6
 8013630:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013634:	3104      	adds	r1, #4
 8013636:	f7fd fa35 	bl	8010aa4 <ucdr_serialize_sequence_uint8_t>
 801363a:	4604      	mov	r4, r0
 801363c:	e7e7      	b.n	801360e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801363e:	bf00      	nop

08013640 <uxr_serialize_ObjectVariant.part.0>:
 8013640:	b570      	push	{r4, r5, r6, lr}
 8013642:	780b      	ldrb	r3, [r1, #0]
 8013644:	3b01      	subs	r3, #1
 8013646:	460c      	mov	r4, r1
 8013648:	4605      	mov	r5, r0
 801364a:	2b0d      	cmp	r3, #13
 801364c:	d854      	bhi.n	80136f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801364e:	e8df f003 	tbb	[pc, r3]
 8013652:	0730      	.short	0x0730
 8013654:	07071b1b 	.word	0x07071b1b
 8013658:	0c530707 	.word	0x0c530707
 801365c:	494e0c0c 	.word	0x494e0c0c
 8013660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013664:	3104      	adds	r1, #4
 8013666:	f7ff bfc3 	b.w	80135f0 <uxr_serialize_DATAWRITER_Representation>
 801366a:	7909      	ldrb	r1, [r1, #4]
 801366c:	f7f7 fdae 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013670:	b1e8      	cbz	r0, 80136ae <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013672:	7923      	ldrb	r3, [r4, #4]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d001      	beq.n	801367c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013678:	2b02      	cmp	r3, #2
 801367a:	d13d      	bne.n	80136f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801367c:	68a1      	ldr	r1, [r4, #8]
 801367e:	4628      	mov	r0, r5
 8013680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013684:	f004 b9f8 	b.w	8017a78 <ucdr_serialize_string>
 8013688:	7909      	ldrb	r1, [r1, #4]
 801368a:	f7f7 fd9f 	bl	800b1cc <ucdr_serialize_uint8_t>
 801368e:	4606      	mov	r6, r0
 8013690:	b120      	cbz	r0, 801369c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013692:	7923      	ldrb	r3, [r4, #4]
 8013694:	2b02      	cmp	r3, #2
 8013696:	d039      	beq.n	801370c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013698:	2b03      	cmp	r3, #3
 801369a:	d02f      	beq.n	80136fc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801369c:	2202      	movs	r2, #2
 801369e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80136a2:	4628      	mov	r0, r5
 80136a4:	f004 f920 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 80136a8:	4030      	ands	r0, r6
 80136aa:	b2c0      	uxtb	r0, r0
 80136ac:	bd70      	pop	{r4, r5, r6, pc}
 80136ae:	2000      	movs	r0, #0
 80136b0:	bd70      	pop	{r4, r5, r6, pc}
 80136b2:	7909      	ldrb	r1, [r1, #4]
 80136b4:	f7f7 fd8a 	bl	800b1cc <ucdr_serialize_uint8_t>
 80136b8:	4606      	mov	r6, r0
 80136ba:	b158      	cbz	r0, 80136d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80136bc:	7923      	ldrb	r3, [r4, #4]
 80136be:	2b02      	cmp	r3, #2
 80136c0:	d003      	beq.n	80136ca <uxr_serialize_ObjectVariant.part.0+0x8a>
 80136c2:	2b03      	cmp	r3, #3
 80136c4:	d028      	beq.n	8013718 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80136c6:	2b01      	cmp	r3, #1
 80136c8:	d104      	bne.n	80136d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80136ca:	68a1      	ldr	r1, [r4, #8]
 80136cc:	4628      	mov	r0, r5
 80136ce:	f004 f9d3 	bl	8017a78 <ucdr_serialize_string>
 80136d2:	4606      	mov	r6, r0
 80136d4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80136d8:	4628      	mov	r0, r5
 80136da:	f7f8 fab3 	bl	800bc44 <ucdr_serialize_int16_t>
 80136de:	4030      	ands	r0, r6
 80136e0:	b2c0      	uxtb	r0, r0
 80136e2:	bd70      	pop	{r4, r5, r6, pc}
 80136e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136e8:	3104      	adds	r1, #4
 80136ea:	f7ff be7b 	b.w	80133e4 <uxr_serialize_CLIENT_Representation>
 80136ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136f2:	3104      	adds	r1, #4
 80136f4:	f7ff bf32 	b.w	801355c <uxr_serialize_AGENT_Representation>
 80136f8:	2001      	movs	r0, #1
 80136fa:	bd70      	pop	{r4, r5, r6, pc}
 80136fc:	68a2      	ldr	r2, [r4, #8]
 80136fe:	f104 010c 	add.w	r1, r4, #12
 8013702:	4628      	mov	r0, r5
 8013704:	f7fd f9ce 	bl	8010aa4 <ucdr_serialize_sequence_uint8_t>
 8013708:	4606      	mov	r6, r0
 801370a:	e7c7      	b.n	801369c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801370c:	68a1      	ldr	r1, [r4, #8]
 801370e:	4628      	mov	r0, r5
 8013710:	f004 f9b2 	bl	8017a78 <ucdr_serialize_string>
 8013714:	4606      	mov	r6, r0
 8013716:	e7c1      	b.n	801369c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013718:	68a2      	ldr	r2, [r4, #8]
 801371a:	f104 010c 	add.w	r1, r4, #12
 801371e:	4628      	mov	r0, r5
 8013720:	f7fd f9c0 	bl	8010aa4 <ucdr_serialize_sequence_uint8_t>
 8013724:	4606      	mov	r6, r0
 8013726:	e7d5      	b.n	80136d4 <uxr_serialize_ObjectVariant.part.0+0x94>

08013728 <uxr_deserialize_DATAWRITER_Representation>:
 8013728:	b570      	push	{r4, r5, r6, lr}
 801372a:	4606      	mov	r6, r0
 801372c:	460d      	mov	r5, r1
 801372e:	f7f7 fd63 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013732:	4604      	mov	r4, r0
 8013734:	b130      	cbz	r0, 8013744 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013736:	782b      	ldrb	r3, [r5, #0]
 8013738:	2b02      	cmp	r3, #2
 801373a:	d00c      	beq.n	8013756 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801373c:	2b03      	cmp	r3, #3
 801373e:	d012      	beq.n	8013766 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013740:	2b01      	cmp	r3, #1
 8013742:	d008      	beq.n	8013756 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013744:	2202      	movs	r2, #2
 8013746:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801374a:	4630      	mov	r0, r6
 801374c:	f004 f930 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013750:	4020      	ands	r0, r4
 8013752:	b2c0      	uxtb	r0, r0
 8013754:	bd70      	pop	{r4, r5, r6, pc}
 8013756:	6869      	ldr	r1, [r5, #4]
 8013758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801375c:	4630      	mov	r0, r6
 801375e:	f004 f99b 	bl	8017a98 <ucdr_deserialize_string>
 8013762:	4604      	mov	r4, r0
 8013764:	e7ee      	b.n	8013744 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013766:	1d2b      	adds	r3, r5, #4
 8013768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801376c:	f105 0108 	add.w	r1, r5, #8
 8013770:	4630      	mov	r0, r6
 8013772:	f7fd f9a9 	bl	8010ac8 <ucdr_deserialize_sequence_uint8_t>
 8013776:	4604      	mov	r4, r0
 8013778:	e7e4      	b.n	8013744 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801377a:	bf00      	nop

0801377c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	460d      	mov	r5, r1
 8013780:	7809      	ldrb	r1, [r1, #0]
 8013782:	4606      	mov	r6, r0
 8013784:	f7f7 fcf4 	bl	800b170 <ucdr_serialize_bool>
 8013788:	782b      	ldrb	r3, [r5, #0]
 801378a:	4604      	mov	r4, r0
 801378c:	b94b      	cbnz	r3, 80137a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801378e:	7a29      	ldrb	r1, [r5, #8]
 8013790:	4630      	mov	r0, r6
 8013792:	f7f7 fced 	bl	800b170 <ucdr_serialize_bool>
 8013796:	7a2b      	ldrb	r3, [r5, #8]
 8013798:	4004      	ands	r4, r0
 801379a:	b2e4      	uxtb	r4, r4
 801379c:	b943      	cbnz	r3, 80137b0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801379e:	4620      	mov	r0, r4
 80137a0:	bd70      	pop	{r4, r5, r6, pc}
 80137a2:	6869      	ldr	r1, [r5, #4]
 80137a4:	4630      	mov	r0, r6
 80137a6:	f004 f967 	bl	8017a78 <ucdr_serialize_string>
 80137aa:	4004      	ands	r4, r0
 80137ac:	b2e4      	uxtb	r4, r4
 80137ae:	e7ee      	b.n	801378e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80137b0:	68e9      	ldr	r1, [r5, #12]
 80137b2:	4630      	mov	r0, r6
 80137b4:	f004 f960 	bl	8017a78 <ucdr_serialize_string>
 80137b8:	4004      	ands	r4, r0
 80137ba:	4620      	mov	r0, r4
 80137bc:	bd70      	pop	{r4, r5, r6, pc}
 80137be:	bf00      	nop

080137c0 <uxr_serialize_OBJK_Topic_Binary>:
 80137c0:	b570      	push	{r4, r5, r6, lr}
 80137c2:	460d      	mov	r5, r1
 80137c4:	6809      	ldr	r1, [r1, #0]
 80137c6:	4606      	mov	r6, r0
 80137c8:	f004 f956 	bl	8017a78 <ucdr_serialize_string>
 80137cc:	7929      	ldrb	r1, [r5, #4]
 80137ce:	4604      	mov	r4, r0
 80137d0:	4630      	mov	r0, r6
 80137d2:	f7f7 fccd 	bl	800b170 <ucdr_serialize_bool>
 80137d6:	792b      	ldrb	r3, [r5, #4]
 80137d8:	4004      	ands	r4, r0
 80137da:	b2e4      	uxtb	r4, r4
 80137dc:	b943      	cbnz	r3, 80137f0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80137de:	7b29      	ldrb	r1, [r5, #12]
 80137e0:	4630      	mov	r0, r6
 80137e2:	f7f7 fcc5 	bl	800b170 <ucdr_serialize_bool>
 80137e6:	7b2b      	ldrb	r3, [r5, #12]
 80137e8:	4004      	ands	r4, r0
 80137ea:	b93b      	cbnz	r3, 80137fc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80137ec:	4620      	mov	r0, r4
 80137ee:	bd70      	pop	{r4, r5, r6, pc}
 80137f0:	68a9      	ldr	r1, [r5, #8]
 80137f2:	4630      	mov	r0, r6
 80137f4:	f004 f940 	bl	8017a78 <ucdr_serialize_string>
 80137f8:	4004      	ands	r4, r0
 80137fa:	e7f0      	b.n	80137de <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80137fc:	6929      	ldr	r1, [r5, #16]
 80137fe:	4630      	mov	r0, r6
 8013800:	f004 f93a 	bl	8017a78 <ucdr_serialize_string>
 8013804:	4004      	ands	r4, r0
 8013806:	b2e4      	uxtb	r4, r4
 8013808:	4620      	mov	r0, r4
 801380a:	bd70      	pop	{r4, r5, r6, pc}

0801380c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013810:	460c      	mov	r4, r1
 8013812:	7809      	ldrb	r1, [r1, #0]
 8013814:	4606      	mov	r6, r0
 8013816:	f7f7 fcab 	bl	800b170 <ucdr_serialize_bool>
 801381a:	7823      	ldrb	r3, [r4, #0]
 801381c:	4605      	mov	r5, r0
 801381e:	b96b      	cbnz	r3, 801383c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013820:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013824:	4630      	mov	r0, r6
 8013826:	f7f7 fca3 	bl	800b170 <ucdr_serialize_bool>
 801382a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801382e:	4005      	ands	r5, r0
 8013830:	b2ed      	uxtb	r5, r5
 8013832:	2b00      	cmp	r3, #0
 8013834:	d169      	bne.n	801390a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013836:	4628      	mov	r0, r5
 8013838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801383c:	6861      	ldr	r1, [r4, #4]
 801383e:	4630      	mov	r0, r6
 8013840:	f7f7 feda 	bl	800b5f8 <ucdr_serialize_uint32_t>
 8013844:	6863      	ldr	r3, [r4, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d06b      	beq.n	8013922 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801384a:	2800      	cmp	r0, #0
 801384c:	d067      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801384e:	68a1      	ldr	r1, [r4, #8]
 8013850:	4630      	mov	r0, r6
 8013852:	f004 f911 	bl	8017a78 <ucdr_serialize_string>
 8013856:	6863      	ldr	r3, [r4, #4]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d953      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801385c:	2800      	cmp	r0, #0
 801385e:	d05e      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013860:	68e1      	ldr	r1, [r4, #12]
 8013862:	4630      	mov	r0, r6
 8013864:	f004 f908 	bl	8017a78 <ucdr_serialize_string>
 8013868:	6863      	ldr	r3, [r4, #4]
 801386a:	2b02      	cmp	r3, #2
 801386c:	d94a      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801386e:	2800      	cmp	r0, #0
 8013870:	d055      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013872:	6921      	ldr	r1, [r4, #16]
 8013874:	4630      	mov	r0, r6
 8013876:	f004 f8ff 	bl	8017a78 <ucdr_serialize_string>
 801387a:	6863      	ldr	r3, [r4, #4]
 801387c:	2b03      	cmp	r3, #3
 801387e:	d941      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013880:	2800      	cmp	r0, #0
 8013882:	d04c      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013884:	6961      	ldr	r1, [r4, #20]
 8013886:	4630      	mov	r0, r6
 8013888:	f004 f8f6 	bl	8017a78 <ucdr_serialize_string>
 801388c:	6863      	ldr	r3, [r4, #4]
 801388e:	2b04      	cmp	r3, #4
 8013890:	d938      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013892:	2800      	cmp	r0, #0
 8013894:	d043      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013896:	69a1      	ldr	r1, [r4, #24]
 8013898:	4630      	mov	r0, r6
 801389a:	f004 f8ed 	bl	8017a78 <ucdr_serialize_string>
 801389e:	6863      	ldr	r3, [r4, #4]
 80138a0:	2b05      	cmp	r3, #5
 80138a2:	d92f      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138a4:	2800      	cmp	r0, #0
 80138a6:	d03a      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138a8:	69e1      	ldr	r1, [r4, #28]
 80138aa:	4630      	mov	r0, r6
 80138ac:	f004 f8e4 	bl	8017a78 <ucdr_serialize_string>
 80138b0:	6863      	ldr	r3, [r4, #4]
 80138b2:	2b06      	cmp	r3, #6
 80138b4:	d926      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138b6:	b390      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138b8:	6a21      	ldr	r1, [r4, #32]
 80138ba:	4630      	mov	r0, r6
 80138bc:	f004 f8dc 	bl	8017a78 <ucdr_serialize_string>
 80138c0:	6863      	ldr	r3, [r4, #4]
 80138c2:	2b07      	cmp	r3, #7
 80138c4:	d91e      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138c6:	b350      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80138ca:	4630      	mov	r0, r6
 80138cc:	f004 f8d4 	bl	8017a78 <ucdr_serialize_string>
 80138d0:	6863      	ldr	r3, [r4, #4]
 80138d2:	2b08      	cmp	r3, #8
 80138d4:	d916      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138d6:	b310      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80138da:	4630      	mov	r0, r6
 80138dc:	f004 f8cc 	bl	8017a78 <ucdr_serialize_string>
 80138e0:	6863      	ldr	r3, [r4, #4]
 80138e2:	2b09      	cmp	r3, #9
 80138e4:	d90e      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138e6:	b1d0      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138e8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80138ec:	2709      	movs	r7, #9
 80138ee:	e000      	b.n	80138f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80138f0:	b1a8      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80138f6:	4630      	mov	r0, r6
 80138f8:	f004 f8be 	bl	8017a78 <ucdr_serialize_string>
 80138fc:	6862      	ldr	r2, [r4, #4]
 80138fe:	3701      	adds	r7, #1
 8013900:	4297      	cmp	r7, r2
 8013902:	d3f5      	bcc.n	80138f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013904:	4005      	ands	r5, r0
 8013906:	b2ed      	uxtb	r5, r5
 8013908:	e78a      	b.n	8013820 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801390a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801390c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013910:	4630      	mov	r0, r6
 8013912:	f7fd f8c7 	bl	8010aa4 <ucdr_serialize_sequence_uint8_t>
 8013916:	4005      	ands	r5, r0
 8013918:	4628      	mov	r0, r5
 801391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801391e:	2500      	movs	r5, #0
 8013920:	e77e      	b.n	8013820 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013922:	4028      	ands	r0, r5
 8013924:	b2c5      	uxtb	r5, r0
 8013926:	e77b      	b.n	8013820 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013928 <uxr_serialize_OBJK_Publisher_Binary>:
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	460d      	mov	r5, r1
 801392c:	7809      	ldrb	r1, [r1, #0]
 801392e:	4606      	mov	r6, r0
 8013930:	f7f7 fc1e 	bl	800b170 <ucdr_serialize_bool>
 8013934:	782b      	ldrb	r3, [r5, #0]
 8013936:	4604      	mov	r4, r0
 8013938:	b94b      	cbnz	r3, 801394e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801393a:	7a29      	ldrb	r1, [r5, #8]
 801393c:	4630      	mov	r0, r6
 801393e:	f7f7 fc17 	bl	800b170 <ucdr_serialize_bool>
 8013942:	7a2b      	ldrb	r3, [r5, #8]
 8013944:	4004      	ands	r4, r0
 8013946:	b2e4      	uxtb	r4, r4
 8013948:	b943      	cbnz	r3, 801395c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801394a:	4620      	mov	r0, r4
 801394c:	bd70      	pop	{r4, r5, r6, pc}
 801394e:	6869      	ldr	r1, [r5, #4]
 8013950:	4630      	mov	r0, r6
 8013952:	f004 f891 	bl	8017a78 <ucdr_serialize_string>
 8013956:	4004      	ands	r4, r0
 8013958:	b2e4      	uxtb	r4, r4
 801395a:	e7ee      	b.n	801393a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801395c:	f105 010c 	add.w	r1, r5, #12
 8013960:	4630      	mov	r0, r6
 8013962:	f7ff ff53 	bl	801380c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013966:	4004      	ands	r4, r0
 8013968:	4620      	mov	r0, r4
 801396a:	bd70      	pop	{r4, r5, r6, pc}

0801396c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801396c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013970:	4688      	mov	r8, r1
 8013972:	8809      	ldrh	r1, [r1, #0]
 8013974:	4681      	mov	r9, r0
 8013976:	f7f7 fc55 	bl	800b224 <ucdr_serialize_uint16_t>
 801397a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801397e:	4606      	mov	r6, r0
 8013980:	4648      	mov	r0, r9
 8013982:	f7f7 fbf5 	bl	800b170 <ucdr_serialize_bool>
 8013986:	f898 3002 	ldrb.w	r3, [r8, #2]
 801398a:	4006      	ands	r6, r0
 801398c:	b2f5      	uxtb	r5, r6
 801398e:	b9eb      	cbnz	r3, 80139cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013990:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013994:	4648      	mov	r0, r9
 8013996:	f7f7 fbeb 	bl	800b170 <ucdr_serialize_bool>
 801399a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801399e:	4005      	ands	r5, r0
 80139a0:	bb7b      	cbnz	r3, 8013a02 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80139a2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80139a6:	4648      	mov	r0, r9
 80139a8:	f7f7 fbe2 	bl	800b170 <ucdr_serialize_bool>
 80139ac:	f898 300c 	ldrb.w	r3, [r8, #12]
 80139b0:	4005      	ands	r5, r0
 80139b2:	b9f3      	cbnz	r3, 80139f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80139b4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80139b8:	4648      	mov	r0, r9
 80139ba:	f7f7 fbd9 	bl	800b170 <ucdr_serialize_bool>
 80139be:	f898 3014 	ldrb.w	r3, [r8, #20]
 80139c2:	4005      	ands	r5, r0
 80139c4:	b94b      	cbnz	r3, 80139da <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80139c6:	4628      	mov	r0, r5
 80139c8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80139cc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80139d0:	4648      	mov	r0, r9
 80139d2:	f7f7 fc27 	bl	800b224 <ucdr_serialize_uint16_t>
 80139d6:	4005      	ands	r5, r0
 80139d8:	e7da      	b.n	8013990 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80139da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80139de:	f108 011c 	add.w	r1, r8, #28
 80139e2:	4648      	mov	r0, r9
 80139e4:	f7fd f85e 	bl	8010aa4 <ucdr_serialize_sequence_uint8_t>
 80139e8:	4028      	ands	r0, r5
 80139ea:	b2c5      	uxtb	r5, r0
 80139ec:	4628      	mov	r0, r5
 80139ee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80139f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139f6:	4648      	mov	r0, r9
 80139f8:	f7f7 fdfe 	bl	800b5f8 <ucdr_serialize_uint32_t>
 80139fc:	4028      	ands	r0, r5
 80139fe:	b2c5      	uxtb	r5, r0
 8013a00:	e7d8      	b.n	80139b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013a02:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013a06:	4648      	mov	r0, r9
 8013a08:	f7f7 fdf6 	bl	800b5f8 <ucdr_serialize_uint32_t>
 8013a0c:	4028      	ands	r0, r5
 8013a0e:	b2c5      	uxtb	r5, r0
 8013a10:	e7c7      	b.n	80139a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013a12:	bf00      	nop

08013a14 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a16:	2202      	movs	r2, #2
 8013a18:	460d      	mov	r5, r1
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	f003 ff64 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013a20:	78a9      	ldrb	r1, [r5, #2]
 8013a22:	4604      	mov	r4, r0
 8013a24:	4630      	mov	r0, r6
 8013a26:	f7f7 fba3 	bl	800b170 <ucdr_serialize_bool>
 8013a2a:	78ab      	ldrb	r3, [r5, #2]
 8013a2c:	4004      	ands	r4, r0
 8013a2e:	b2e4      	uxtb	r4, r4
 8013a30:	b90b      	cbnz	r3, 8013a36 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013a32:	4620      	mov	r0, r4
 8013a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a36:	f105 0108 	add.w	r1, r5, #8
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f7ff ff96 	bl	801396c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013a40:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013a44:	4607      	mov	r7, r0
 8013a46:	4630      	mov	r0, r6
 8013a48:	f7f7 fb92 	bl	800b170 <ucdr_serialize_bool>
 8013a4c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013a50:	4038      	ands	r0, r7
 8013a52:	b2c7      	uxtb	r7, r0
 8013a54:	b913      	cbnz	r3, 8013a5c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013a56:	403c      	ands	r4, r7
 8013a58:	4620      	mov	r0, r4
 8013a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a5c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013a60:	4630      	mov	r0, r6
 8013a62:	f7f8 f81f 	bl	800baa4 <ucdr_serialize_uint64_t>
 8013a66:	4007      	ands	r7, r0
 8013a68:	e7f5      	b.n	8013a56 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013a6a:	bf00      	nop

08013a6c <uxr_serialize_OBJK_Requester_Binary>:
 8013a6c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013a70:	460f      	mov	r7, r1
 8013a72:	6809      	ldr	r1, [r1, #0]
 8013a74:	4680      	mov	r8, r0
 8013a76:	f003 ffff 	bl	8017a78 <ucdr_serialize_string>
 8013a7a:	6879      	ldr	r1, [r7, #4]
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	4640      	mov	r0, r8
 8013a80:	f003 fffa 	bl	8017a78 <ucdr_serialize_string>
 8013a84:	68b9      	ldr	r1, [r7, #8]
 8013a86:	4005      	ands	r5, r0
 8013a88:	4640      	mov	r0, r8
 8013a8a:	f003 fff5 	bl	8017a78 <ucdr_serialize_string>
 8013a8e:	b2ec      	uxtb	r4, r5
 8013a90:	4004      	ands	r4, r0
 8013a92:	7b39      	ldrb	r1, [r7, #12]
 8013a94:	4640      	mov	r0, r8
 8013a96:	f7f7 fb6b 	bl	800b170 <ucdr_serialize_bool>
 8013a9a:	7b3b      	ldrb	r3, [r7, #12]
 8013a9c:	4004      	ands	r4, r0
 8013a9e:	b94b      	cbnz	r3, 8013ab4 <uxr_serialize_OBJK_Requester_Binary+0x48>
 8013aa0:	7d39      	ldrb	r1, [r7, #20]
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	f7f7 fb64 	bl	800b170 <ucdr_serialize_bool>
 8013aa8:	7d3b      	ldrb	r3, [r7, #20]
 8013aaa:	4004      	ands	r4, r0
 8013aac:	b943      	cbnz	r3, 8013ac0 <uxr_serialize_OBJK_Requester_Binary+0x54>
 8013aae:	4620      	mov	r0, r4
 8013ab0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013ab4:	6939      	ldr	r1, [r7, #16]
 8013ab6:	4640      	mov	r0, r8
 8013ab8:	f003 ffde 	bl	8017a78 <ucdr_serialize_string>
 8013abc:	4004      	ands	r4, r0
 8013abe:	e7ef      	b.n	8013aa0 <uxr_serialize_OBJK_Requester_Binary+0x34>
 8013ac0:	69b9      	ldr	r1, [r7, #24]
 8013ac2:	4640      	mov	r0, r8
 8013ac4:	f003 ffd8 	bl	8017a78 <ucdr_serialize_string>
 8013ac8:	4004      	ands	r4, r0
 8013aca:	b2e4      	uxtb	r4, r4
 8013acc:	4620      	mov	r0, r4
 8013ace:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013ad2:	bf00      	nop

08013ad4 <uxr_deserialize_ObjectVariant>:
 8013ad4:	b570      	push	{r4, r5, r6, lr}
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	460e      	mov	r6, r1
 8013ada:	f7f7 fb8d 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013ade:	b168      	cbz	r0, 8013afc <uxr_deserialize_ObjectVariant+0x28>
 8013ae0:	7833      	ldrb	r3, [r6, #0]
 8013ae2:	3b01      	subs	r3, #1
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	2b0d      	cmp	r3, #13
 8013ae8:	d809      	bhi.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013aea:	e8df f003 	tbb	[pc, r3]
 8013aee:	0a41      	.short	0x0a41
 8013af0:	0a0a2323 	.word	0x0a0a2323
 8013af4:	10080a0a 	.word	0x10080a0a
 8013af8:	565c1010 	.word	0x565c1010
 8013afc:	2400      	movs	r4, #0
 8013afe:	4620      	mov	r0, r4
 8013b00:	bd70      	pop	{r4, r5, r6, pc}
 8013b02:	1d31      	adds	r1, r6, #4
 8013b04:	4628      	mov	r0, r5
 8013b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b0a:	f7ff be0d 	b.w	8013728 <uxr_deserialize_DATAWRITER_Representation>
 8013b0e:	1d31      	adds	r1, r6, #4
 8013b10:	4628      	mov	r0, r5
 8013b12:	f7f7 fb71 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	d0f0      	beq.n	8013afc <uxr_deserialize_ObjectVariant+0x28>
 8013b1a:	7933      	ldrb	r3, [r6, #4]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d001      	beq.n	8013b24 <uxr_deserialize_ObjectVariant+0x50>
 8013b20:	2b02      	cmp	r3, #2
 8013b22:	d1ec      	bne.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013b24:	68b1      	ldr	r1, [r6, #8]
 8013b26:	4628      	mov	r0, r5
 8013b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b30:	f003 bfb2 	b.w	8017a98 <ucdr_deserialize_string>
 8013b34:	1d31      	adds	r1, r6, #4
 8013b36:	4628      	mov	r0, r5
 8013b38:	f7f7 fb5e 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	b170      	cbz	r0, 8013b5e <uxr_deserialize_ObjectVariant+0x8a>
 8013b40:	7933      	ldrb	r3, [r6, #4]
 8013b42:	2b02      	cmp	r3, #2
 8013b44:	d04c      	beq.n	8013be0 <uxr_deserialize_ObjectVariant+0x10c>
 8013b46:	2b03      	cmp	r3, #3
 8013b48:	d109      	bne.n	8013b5e <uxr_deserialize_ObjectVariant+0x8a>
 8013b4a:	f106 0308 	add.w	r3, r6, #8
 8013b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b52:	f106 010c 	add.w	r1, r6, #12
 8013b56:	4628      	mov	r0, r5
 8013b58:	f7fc ffb6 	bl	8010ac8 <ucdr_deserialize_sequence_uint8_t>
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	2202      	movs	r2, #2
 8013b60:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013b64:	4628      	mov	r0, r5
 8013b66:	f003 ff23 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013b6a:	4020      	ands	r0, r4
 8013b6c:	b2c4      	uxtb	r4, r0
 8013b6e:	e7c6      	b.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013b70:	1d31      	adds	r1, r6, #4
 8013b72:	4628      	mov	r0, r5
 8013b74:	f7f7 fb40 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013b78:	4604      	mov	r4, r0
 8013b7a:	b130      	cbz	r0, 8013b8a <uxr_deserialize_ObjectVariant+0xb6>
 8013b7c:	7933      	ldrb	r3, [r6, #4]
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d036      	beq.n	8013bf0 <uxr_deserialize_ObjectVariant+0x11c>
 8013b82:	2b03      	cmp	r3, #3
 8013b84:	d03c      	beq.n	8013c00 <uxr_deserialize_ObjectVariant+0x12c>
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d032      	beq.n	8013bf0 <uxr_deserialize_ObjectVariant+0x11c>
 8013b8a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f7f8 f8d8 	bl	800bd44 <ucdr_deserialize_int16_t>
 8013b94:	4020      	ands	r0, r4
 8013b96:	b2c4      	uxtb	r4, r0
 8013b98:	e7b1      	b.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013b9a:	1d31      	adds	r1, r6, #4
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ba2:	f7ff bc77 	b.w	8013494 <uxr_deserialize_CLIENT_Representation>
 8013ba6:	2204      	movs	r2, #4
 8013ba8:	18b1      	adds	r1, r6, r2
 8013baa:	4628      	mov	r0, r5
 8013bac:	f003 ff00 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013bb0:	2202      	movs	r2, #2
 8013bb2:	f106 0108 	add.w	r1, r6, #8
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f003 fef9 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013bbe:	2202      	movs	r2, #2
 8013bc0:	4004      	ands	r4, r0
 8013bc2:	f106 010a 	add.w	r1, r6, #10
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	f003 fef2 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013bcc:	b2e4      	uxtb	r4, r4
 8013bce:	4603      	mov	r3, r0
 8013bd0:	f106 010c 	add.w	r1, r6, #12
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	401c      	ands	r4, r3
 8013bd8:	f7f7 fae0 	bl	800b19c <ucdr_deserialize_bool>
 8013bdc:	4004      	ands	r4, r0
 8013bde:	e78e      	b.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013be0:	68b1      	ldr	r1, [r6, #8]
 8013be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013be6:	4628      	mov	r0, r5
 8013be8:	f003 ff56 	bl	8017a98 <ucdr_deserialize_string>
 8013bec:	4604      	mov	r4, r0
 8013bee:	e7b6      	b.n	8013b5e <uxr_deserialize_ObjectVariant+0x8a>
 8013bf0:	68b1      	ldr	r1, [r6, #8]
 8013bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f003 ff4e 	bl	8017a98 <ucdr_deserialize_string>
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	e7c4      	b.n	8013b8a <uxr_deserialize_ObjectVariant+0xb6>
 8013c00:	f106 0308 	add.w	r3, r6, #8
 8013c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c08:	f106 010c 	add.w	r1, r6, #12
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f7fc ff5b 	bl	8010ac8 <ucdr_deserialize_sequence_uint8_t>
 8013c12:	4604      	mov	r4, r0
 8013c14:	e7b9      	b.n	8013b8a <uxr_deserialize_ObjectVariant+0xb6>
 8013c16:	bf00      	nop

08013c18 <uxr_deserialize_BaseObjectRequest>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	2202      	movs	r2, #2
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	460e      	mov	r6, r1
 8013c20:	f003 fec6 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013c24:	2202      	movs	r2, #2
 8013c26:	4604      	mov	r4, r0
 8013c28:	18b1      	adds	r1, r6, r2
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	f003 fec0 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013c30:	4020      	ands	r0, r4
 8013c32:	b2c0      	uxtb	r0, r0
 8013c34:	bd70      	pop	{r4, r5, r6, pc}
 8013c36:	bf00      	nop

08013c38 <uxr_serialize_ActivityInfoVariant>:
 8013c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c3c:	460d      	mov	r5, r1
 8013c3e:	7809      	ldrb	r1, [r1, #0]
 8013c40:	4607      	mov	r7, r0
 8013c42:	f7f7 fac3 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013c46:	4681      	mov	r9, r0
 8013c48:	b138      	cbz	r0, 8013c5a <uxr_serialize_ActivityInfoVariant+0x22>
 8013c4a:	782b      	ldrb	r3, [r5, #0]
 8013c4c:	2b06      	cmp	r3, #6
 8013c4e:	f000 8082 	beq.w	8013d56 <uxr_serialize_ActivityInfoVariant+0x11e>
 8013c52:	2b0d      	cmp	r3, #13
 8013c54:	d016      	beq.n	8013c84 <uxr_serialize_ActivityInfoVariant+0x4c>
 8013c56:	2b05      	cmp	r3, #5
 8013c58:	d002      	beq.n	8013c60 <uxr_serialize_ActivityInfoVariant+0x28>
 8013c5a:	4648      	mov	r0, r9
 8013c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c60:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013c64:	4638      	mov	r0, r7
 8013c66:	f7f7 ffed 	bl	800bc44 <ucdr_serialize_int16_t>
 8013c6a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013c6e:	4681      	mov	r9, r0
 8013c70:	4638      	mov	r0, r7
 8013c72:	f7f7 ff17 	bl	800baa4 <ucdr_serialize_uint64_t>
 8013c76:	ea09 0000 	and.w	r0, r9, r0
 8013c7a:	fa5f f980 	uxtb.w	r9, r0
 8013c7e:	4648      	mov	r0, r9
 8013c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c84:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013c88:	4638      	mov	r0, r7
 8013c8a:	f7f7 ffdb 	bl	800bc44 <ucdr_serialize_int16_t>
 8013c8e:	68e9      	ldr	r1, [r5, #12]
 8013c90:	4681      	mov	r9, r0
 8013c92:	4638      	mov	r0, r7
 8013c94:	f7f7 fcb0 	bl	800b5f8 <ucdr_serialize_uint32_t>
 8013c98:	68eb      	ldr	r3, [r5, #12]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d0eb      	beq.n	8013c76 <uxr_serialize_ActivityInfoVariant+0x3e>
 8013c9e:	b320      	cbz	r0, 8013cea <uxr_serialize_ActivityInfoVariant+0xb2>
 8013ca0:	f105 080c 	add.w	r8, r5, #12
 8013ca4:	2600      	movs	r6, #0
 8013ca6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013caa:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013cae:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8013cb2:	4638      	mov	r0, r7
 8013cb4:	f7f7 fa8a 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d053      	beq.n	8013d64 <uxr_serialize_ActivityInfoVariant+0x12c>
 8013cbc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013cc0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013cc4:	0074      	lsls	r4, r6, #1
 8013cc6:	00c9      	lsls	r1, r1, #3
 8013cc8:	2b03      	cmp	r3, #3
 8013cca:	d854      	bhi.n	8013d76 <uxr_serialize_ActivityInfoVariant+0x13e>
 8013ccc:	e8df f003 	tbb	[pc, r3]
 8013cd0:	02102132 	.word	0x02102132
 8013cd4:	4441      	add	r1, r8
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	6889      	ldr	r1, [r1, #8]
 8013cda:	f003 fecd 	bl	8017a78 <ucdr_serialize_string>
 8013cde:	68ea      	ldr	r2, [r5, #12]
 8013ce0:	3601      	adds	r6, #1
 8013ce2:	4296      	cmp	r6, r2
 8013ce4:	d242      	bcs.n	8013d6c <uxr_serialize_ActivityInfoVariant+0x134>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d1dd      	bne.n	8013ca6 <uxr_serialize_ActivityInfoVariant+0x6e>
 8013cea:	f04f 0900 	mov.w	r9, #0
 8013cee:	e7b4      	b.n	8013c5a <uxr_serialize_ActivityInfoVariant+0x22>
 8013cf0:	3108      	adds	r1, #8
 8013cf2:	4441      	add	r1, r8
 8013cf4:	2210      	movs	r2, #16
 8013cf6:	4638      	mov	r0, r7
 8013cf8:	f003 fdf6 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013cfc:	4434      	add	r4, r6
 8013cfe:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013d02:	4604      	mov	r4, r0
 8013d04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013d06:	4638      	mov	r0, r7
 8013d08:	f7f7 fc76 	bl	800b5f8 <ucdr_serialize_uint32_t>
 8013d0c:	4020      	ands	r0, r4
 8013d0e:	b2c0      	uxtb	r0, r0
 8013d10:	e7e5      	b.n	8013cde <uxr_serialize_ActivityInfoVariant+0xa6>
 8013d12:	3108      	adds	r1, #8
 8013d14:	4441      	add	r1, r8
 8013d16:	2204      	movs	r2, #4
 8013d18:	4638      	mov	r0, r7
 8013d1a:	f003 fde5 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013d1e:	4434      	add	r4, r6
 8013d20:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013d24:	4604      	mov	r4, r0
 8013d26:	8b19      	ldrh	r1, [r3, #24]
 8013d28:	4638      	mov	r0, r7
 8013d2a:	f7f7 fa7b 	bl	800b224 <ucdr_serialize_uint16_t>
 8013d2e:	4020      	ands	r0, r4
 8013d30:	b2c0      	uxtb	r0, r0
 8013d32:	e7d4      	b.n	8013cde <uxr_serialize_ActivityInfoVariant+0xa6>
 8013d34:	3108      	adds	r1, #8
 8013d36:	4441      	add	r1, r8
 8013d38:	2202      	movs	r2, #2
 8013d3a:	4638      	mov	r0, r7
 8013d3c:	f003 fdd4 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013d40:	4434      	add	r4, r6
 8013d42:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013d46:	4604      	mov	r4, r0
 8013d48:	7d99      	ldrb	r1, [r3, #22]
 8013d4a:	4638      	mov	r0, r7
 8013d4c:	f7f7 fa3e 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013d50:	4020      	ands	r0, r4
 8013d52:	b2c0      	uxtb	r0, r0
 8013d54:	e7c3      	b.n	8013cde <uxr_serialize_ActivityInfoVariant+0xa6>
 8013d56:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d60:	f7f7 bf70 	b.w	800bc44 <ucdr_serialize_int16_t>
 8013d64:	68ea      	ldr	r2, [r5, #12]
 8013d66:	3601      	adds	r6, #1
 8013d68:	42b2      	cmp	r2, r6
 8013d6a:	d8be      	bhi.n	8013cea <uxr_serialize_ActivityInfoVariant+0xb2>
 8013d6c:	ea09 0900 	and.w	r9, r9, r0
 8013d70:	fa5f f989 	uxtb.w	r9, r9
 8013d74:	e771      	b.n	8013c5a <uxr_serialize_ActivityInfoVariant+0x22>
 8013d76:	68eb      	ldr	r3, [r5, #12]
 8013d78:	3601      	adds	r6, #1
 8013d7a:	429e      	cmp	r6, r3
 8013d7c:	f10a 0a18 	add.w	sl, sl, #24
 8013d80:	d395      	bcc.n	8013cae <uxr_serialize_ActivityInfoVariant+0x76>
 8013d82:	e76a      	b.n	8013c5a <uxr_serialize_ActivityInfoVariant+0x22>

08013d84 <uxr_deserialize_BaseObjectReply>:
 8013d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d88:	2202      	movs	r2, #2
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	460f      	mov	r7, r1
 8013d8e:	f003 fe0f 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013d92:	2202      	movs	r2, #2
 8013d94:	18b9      	adds	r1, r7, r2
 8013d96:	4605      	mov	r5, r0
 8013d98:	4630      	mov	r0, r6
 8013d9a:	f003 fe09 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013d9e:	1d39      	adds	r1, r7, #4
 8013da0:	4680      	mov	r8, r0
 8013da2:	4630      	mov	r0, r6
 8013da4:	f7f7 fa28 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013da8:	1d79      	adds	r1, r7, #5
 8013daa:	4604      	mov	r4, r0
 8013dac:	4630      	mov	r0, r6
 8013dae:	f7f7 fa23 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013db2:	ea05 0508 	and.w	r5, r5, r8
 8013db6:	402c      	ands	r4, r5
 8013db8:	4020      	ands	r0, r4
 8013dba:	b2c0      	uxtb	r0, r0
 8013dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013dc0 <uxr_serialize_ReadSpecification>:
 8013dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc4:	460e      	mov	r6, r1
 8013dc6:	7809      	ldrb	r1, [r1, #0]
 8013dc8:	4607      	mov	r7, r0
 8013dca:	f7f7 f9ff 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013dce:	7871      	ldrb	r1, [r6, #1]
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	4638      	mov	r0, r7
 8013dd4:	f7f7 f9fa 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013dd8:	78b1      	ldrb	r1, [r6, #2]
 8013dda:	4004      	ands	r4, r0
 8013ddc:	4638      	mov	r0, r7
 8013dde:	f7f7 f9c7 	bl	800b170 <ucdr_serialize_bool>
 8013de2:	78b3      	ldrb	r3, [r6, #2]
 8013de4:	b2e4      	uxtb	r4, r4
 8013de6:	4004      	ands	r4, r0
 8013de8:	b94b      	cbnz	r3, 8013dfe <uxr_serialize_ReadSpecification+0x3e>
 8013dea:	7a31      	ldrb	r1, [r6, #8]
 8013dec:	4638      	mov	r0, r7
 8013dee:	f7f7 f9bf 	bl	800b170 <ucdr_serialize_bool>
 8013df2:	7a33      	ldrb	r3, [r6, #8]
 8013df4:	4004      	ands	r4, r0
 8013df6:	b943      	cbnz	r3, 8013e0a <uxr_serialize_ReadSpecification+0x4a>
 8013df8:	4620      	mov	r0, r4
 8013dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dfe:	6871      	ldr	r1, [r6, #4]
 8013e00:	4638      	mov	r0, r7
 8013e02:	f003 fe39 	bl	8017a78 <ucdr_serialize_string>
 8013e06:	4004      	ands	r4, r0
 8013e08:	e7ef      	b.n	8013dea <uxr_serialize_ReadSpecification+0x2a>
 8013e0a:	8971      	ldrh	r1, [r6, #10]
 8013e0c:	4638      	mov	r0, r7
 8013e0e:	f7f7 fa09 	bl	800b224 <ucdr_serialize_uint16_t>
 8013e12:	89b1      	ldrh	r1, [r6, #12]
 8013e14:	4605      	mov	r5, r0
 8013e16:	4638      	mov	r0, r7
 8013e18:	f7f7 fa04 	bl	800b224 <ucdr_serialize_uint16_t>
 8013e1c:	89f1      	ldrh	r1, [r6, #14]
 8013e1e:	4005      	ands	r5, r0
 8013e20:	4638      	mov	r0, r7
 8013e22:	f7f7 f9ff 	bl	800b224 <ucdr_serialize_uint16_t>
 8013e26:	8a31      	ldrh	r1, [r6, #16]
 8013e28:	4680      	mov	r8, r0
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	f7f7 f9fa 	bl	800b224 <ucdr_serialize_uint16_t>
 8013e30:	b2ed      	uxtb	r5, r5
 8013e32:	4025      	ands	r5, r4
 8013e34:	ea08 0505 	and.w	r5, r8, r5
 8013e38:	ea00 0405 	and.w	r4, r0, r5
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e42:	bf00      	nop

08013e44 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013e44:	f7ff bace 	b.w	80133e4 <uxr_serialize_CLIENT_Representation>

08013e48 <uxr_serialize_CREATE_Payload>:
 8013e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e4a:	2202      	movs	r2, #2
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	460e      	mov	r6, r1
 8013e50:	f003 fd4a 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013e54:	2202      	movs	r2, #2
 8013e56:	18b1      	adds	r1, r6, r2
 8013e58:	4605      	mov	r5, r0
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	f003 fd44 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013e60:	7931      	ldrb	r1, [r6, #4]
 8013e62:	4604      	mov	r4, r0
 8013e64:	4638      	mov	r0, r7
 8013e66:	f7f7 f9b1 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013e6a:	b170      	cbz	r0, 8013e8a <uxr_serialize_CREATE_Payload+0x42>
 8013e6c:	7933      	ldrb	r3, [r6, #4]
 8013e6e:	402c      	ands	r4, r5
 8013e70:	3b01      	subs	r3, #1
 8013e72:	b2e4      	uxtb	r4, r4
 8013e74:	2b0d      	cmp	r3, #13
 8013e76:	d809      	bhi.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013e78:	e8df f003 	tbb	[pc, r3]
 8013e7c:	23230a4c 	.word	0x23230a4c
 8013e80:	0a0a0a0a 	.word	0x0a0a0a0a
 8013e84:	12121208 	.word	0x12121208
 8013e88:	3e45      	.short	0x3e45
 8013e8a:	2400      	movs	r4, #0
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e90:	f106 0108 	add.w	r1, r6, #8
 8013e94:	4638      	mov	r0, r7
 8013e96:	f7ff fbab 	bl	80135f0 <uxr_serialize_DATAWRITER_Representation>
 8013e9a:	4004      	ands	r4, r0
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea0:	7a31      	ldrb	r1, [r6, #8]
 8013ea2:	4638      	mov	r0, r7
 8013ea4:	f7f7 f992 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d0ee      	beq.n	8013e8a <uxr_serialize_CREATE_Payload+0x42>
 8013eac:	7a33      	ldrb	r3, [r6, #8]
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d001      	beq.n	8013eb6 <uxr_serialize_CREATE_Payload+0x6e>
 8013eb2:	2b02      	cmp	r3, #2
 8013eb4:	d1ea      	bne.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013eb6:	68f1      	ldr	r1, [r6, #12]
 8013eb8:	4638      	mov	r0, r7
 8013eba:	f003 fddd 	bl	8017a78 <ucdr_serialize_string>
 8013ebe:	4004      	ands	r4, r0
 8013ec0:	e7e4      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013ec2:	7a31      	ldrb	r1, [r6, #8]
 8013ec4:	4638      	mov	r0, r7
 8013ec6:	f7f7 f981 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013eca:	4605      	mov	r5, r0
 8013ecc:	b158      	cbz	r0, 8013ee6 <uxr_serialize_CREATE_Payload+0x9e>
 8013ece:	7a33      	ldrb	r3, [r6, #8]
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d034      	beq.n	8013f3e <uxr_serialize_CREATE_Payload+0xf6>
 8013ed4:	2b03      	cmp	r3, #3
 8013ed6:	d106      	bne.n	8013ee6 <uxr_serialize_CREATE_Payload+0x9e>
 8013ed8:	68f2      	ldr	r2, [r6, #12]
 8013eda:	f106 0110 	add.w	r1, r6, #16
 8013ede:	4638      	mov	r0, r7
 8013ee0:	f7fc fde0 	bl	8010aa4 <ucdr_serialize_sequence_uint8_t>
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	2202      	movs	r2, #2
 8013ee8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013eec:	4638      	mov	r0, r7
 8013eee:	f003 fcfb 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013ef2:	4028      	ands	r0, r5
 8013ef4:	4004      	ands	r4, r0
 8013ef6:	e7c9      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013ef8:	f106 0108 	add.w	r1, r6, #8
 8013efc:	4638      	mov	r0, r7
 8013efe:	f7ff fa71 	bl	80133e4 <uxr_serialize_CLIENT_Representation>
 8013f02:	4004      	ands	r4, r0
 8013f04:	e7c2      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013f06:	f106 0108 	add.w	r1, r6, #8
 8013f0a:	4638      	mov	r0, r7
 8013f0c:	f7ff fb26 	bl	801355c <uxr_serialize_AGENT_Representation>
 8013f10:	4004      	ands	r4, r0
 8013f12:	e7bb      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013f14:	7a31      	ldrb	r1, [r6, #8]
 8013f16:	4638      	mov	r0, r7
 8013f18:	f7f7 f958 	bl	800b1cc <ucdr_serialize_uint8_t>
 8013f1c:	4605      	mov	r5, r0
 8013f1e:	b130      	cbz	r0, 8013f2e <uxr_serialize_CREATE_Payload+0xe6>
 8013f20:	7a33      	ldrb	r3, [r6, #8]
 8013f22:	2b02      	cmp	r3, #2
 8013f24:	d011      	beq.n	8013f4a <uxr_serialize_CREATE_Payload+0x102>
 8013f26:	2b03      	cmp	r3, #3
 8013f28:	d015      	beq.n	8013f56 <uxr_serialize_CREATE_Payload+0x10e>
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d00d      	beq.n	8013f4a <uxr_serialize_CREATE_Payload+0x102>
 8013f2e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013f32:	4638      	mov	r0, r7
 8013f34:	f7f7 fe86 	bl	800bc44 <ucdr_serialize_int16_t>
 8013f38:	4028      	ands	r0, r5
 8013f3a:	4004      	ands	r4, r0
 8013f3c:	e7a6      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013f3e:	68f1      	ldr	r1, [r6, #12]
 8013f40:	4638      	mov	r0, r7
 8013f42:	f003 fd99 	bl	8017a78 <ucdr_serialize_string>
 8013f46:	4605      	mov	r5, r0
 8013f48:	e7cd      	b.n	8013ee6 <uxr_serialize_CREATE_Payload+0x9e>
 8013f4a:	68f1      	ldr	r1, [r6, #12]
 8013f4c:	4638      	mov	r0, r7
 8013f4e:	f003 fd93 	bl	8017a78 <ucdr_serialize_string>
 8013f52:	4605      	mov	r5, r0
 8013f54:	e7eb      	b.n	8013f2e <uxr_serialize_CREATE_Payload+0xe6>
 8013f56:	68f2      	ldr	r2, [r6, #12]
 8013f58:	f106 0110 	add.w	r1, r6, #16
 8013f5c:	4638      	mov	r0, r7
 8013f5e:	f7fc fda1 	bl	8010aa4 <ucdr_serialize_sequence_uint8_t>
 8013f62:	4605      	mov	r5, r0
 8013f64:	e7e3      	b.n	8013f2e <uxr_serialize_CREATE_Payload+0xe6>
 8013f66:	bf00      	nop

08013f68 <uxr_deserialize_GET_INFO_Payload>:
 8013f68:	b570      	push	{r4, r5, r6, lr}
 8013f6a:	2202      	movs	r2, #2
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	460e      	mov	r6, r1
 8013f70:	f003 fd1e 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013f74:	2202      	movs	r2, #2
 8013f76:	18b1      	adds	r1, r6, r2
 8013f78:	4604      	mov	r4, r0
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	f003 fd18 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013f80:	1d31      	adds	r1, r6, #4
 8013f82:	4004      	ands	r4, r0
 8013f84:	4628      	mov	r0, r5
 8013f86:	f7f7 fc67 	bl	800b858 <ucdr_deserialize_uint32_t>
 8013f8a:	b2e4      	uxtb	r4, r4
 8013f8c:	4020      	ands	r0, r4
 8013f8e:	bd70      	pop	{r4, r5, r6, pc}

08013f90 <uxr_serialize_DELETE_Payload>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	2202      	movs	r2, #2
 8013f94:	4605      	mov	r5, r0
 8013f96:	460e      	mov	r6, r1
 8013f98:	f003 fca6 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013f9c:	2202      	movs	r2, #2
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	18b1      	adds	r1, r6, r2
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	f003 fca0 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8013fa8:	4020      	ands	r0, r4
 8013faa:	b2c0      	uxtb	r0, r0
 8013fac:	bd70      	pop	{r4, r5, r6, pc}
 8013fae:	bf00      	nop

08013fb0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb4:	4605      	mov	r5, r0
 8013fb6:	460e      	mov	r6, r1
 8013fb8:	f7f7 f91e 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013fbc:	1c71      	adds	r1, r6, #1
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f7f7 f919 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8013fc6:	2204      	movs	r2, #4
 8013fc8:	18b1      	adds	r1, r6, r2
 8013fca:	4680      	mov	r8, r0
 8013fcc:	4628      	mov	r0, r5
 8013fce:	f003 fcef 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013fd2:	f106 0108 	add.w	r1, r6, #8
 8013fd6:	4607      	mov	r7, r0
 8013fd8:	2202      	movs	r2, #2
 8013fda:	4628      	mov	r0, r5
 8013fdc:	f003 fce8 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013fe0:	ea04 0308 	and.w	r3, r4, r8
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	ea03 0407 	and.w	r4, r3, r7
 8013fea:	2202      	movs	r2, #2
 8013fec:	4607      	mov	r7, r0
 8013fee:	f106 010a 	add.w	r1, r6, #10
 8013ff2:	4628      	mov	r0, r5
 8013ff4:	f003 fcdc 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 8013ff8:	f106 010c 	add.w	r1, r6, #12
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	4628      	mov	r0, r5
 8014000:	461d      	mov	r5, r3
 8014002:	f7f7 f8cb 	bl	800b19c <ucdr_deserialize_bool>
 8014006:	403c      	ands	r4, r7
 8014008:	4025      	ands	r5, r4
 801400a:	4028      	ands	r0, r5
 801400c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014010 <uxr_deserialize_STATUS_Payload>:
 8014010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014014:	2202      	movs	r2, #2
 8014016:	4606      	mov	r6, r0
 8014018:	460f      	mov	r7, r1
 801401a:	f003 fcc9 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801401e:	2202      	movs	r2, #2
 8014020:	18b9      	adds	r1, r7, r2
 8014022:	4605      	mov	r5, r0
 8014024:	4630      	mov	r0, r6
 8014026:	f003 fcc3 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801402a:	1d39      	adds	r1, r7, #4
 801402c:	4680      	mov	r8, r0
 801402e:	4630      	mov	r0, r6
 8014030:	f7f7 f8e2 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8014034:	1d79      	adds	r1, r7, #5
 8014036:	4604      	mov	r4, r0
 8014038:	4630      	mov	r0, r6
 801403a:	f7f7 f8dd 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 801403e:	ea05 0508 	and.w	r5, r5, r8
 8014042:	402c      	ands	r4, r5
 8014044:	4020      	ands	r0, r4
 8014046:	b2c0      	uxtb	r0, r0
 8014048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801404c <uxr_serialize_INFO_Payload>:
 801404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014050:	2202      	movs	r2, #2
 8014052:	460c      	mov	r4, r1
 8014054:	4605      	mov	r5, r0
 8014056:	f003 fc47 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801405a:	2202      	movs	r2, #2
 801405c:	18a1      	adds	r1, r4, r2
 801405e:	4680      	mov	r8, r0
 8014060:	4628      	mov	r0, r5
 8014062:	f003 fc41 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8014066:	7921      	ldrb	r1, [r4, #4]
 8014068:	4607      	mov	r7, r0
 801406a:	4628      	mov	r0, r5
 801406c:	f7f7 f8ae 	bl	800b1cc <ucdr_serialize_uint8_t>
 8014070:	7961      	ldrb	r1, [r4, #5]
 8014072:	4606      	mov	r6, r0
 8014074:	4628      	mov	r0, r5
 8014076:	f7f7 f8a9 	bl	800b1cc <ucdr_serialize_uint8_t>
 801407a:	ea08 0807 	and.w	r8, r8, r7
 801407e:	ea06 0608 	and.w	r6, r6, r8
 8014082:	4006      	ands	r6, r0
 8014084:	7a21      	ldrb	r1, [r4, #8]
 8014086:	4628      	mov	r0, r5
 8014088:	f7f7 f872 	bl	800b170 <ucdr_serialize_bool>
 801408c:	7a23      	ldrb	r3, [r4, #8]
 801408e:	b2f7      	uxtb	r7, r6
 8014090:	4606      	mov	r6, r0
 8014092:	b96b      	cbnz	r3, 80140b0 <uxr_serialize_INFO_Payload+0x64>
 8014094:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014098:	4628      	mov	r0, r5
 801409a:	f7f7 f869 	bl	800b170 <ucdr_serialize_bool>
 801409e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80140a2:	4030      	ands	r0, r6
 80140a4:	b2c6      	uxtb	r6, r0
 80140a6:	b983      	cbnz	r3, 80140ca <uxr_serialize_INFO_Payload+0x7e>
 80140a8:	ea06 0007 	and.w	r0, r6, r7
 80140ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b0:	7b21      	ldrb	r1, [r4, #12]
 80140b2:	4628      	mov	r0, r5
 80140b4:	f7f7 f88a 	bl	800b1cc <ucdr_serialize_uint8_t>
 80140b8:	b188      	cbz	r0, 80140de <uxr_serialize_INFO_Payload+0x92>
 80140ba:	f104 010c 	add.w	r1, r4, #12
 80140be:	4628      	mov	r0, r5
 80140c0:	f7ff fabe 	bl	8013640 <uxr_serialize_ObjectVariant.part.0>
 80140c4:	4030      	ands	r0, r6
 80140c6:	b2c6      	uxtb	r6, r0
 80140c8:	e7e4      	b.n	8014094 <uxr_serialize_INFO_Payload+0x48>
 80140ca:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80140ce:	4628      	mov	r0, r5
 80140d0:	f7ff fdb2 	bl	8013c38 <uxr_serialize_ActivityInfoVariant>
 80140d4:	4006      	ands	r6, r0
 80140d6:	ea06 0007 	and.w	r0, r6, r7
 80140da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140de:	4606      	mov	r6, r0
 80140e0:	e7d8      	b.n	8014094 <uxr_serialize_INFO_Payload+0x48>
 80140e2:	bf00      	nop

080140e4 <uxr_serialize_READ_DATA_Payload>:
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	2202      	movs	r2, #2
 80140e8:	4605      	mov	r5, r0
 80140ea:	460e      	mov	r6, r1
 80140ec:	f003 fbfc 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 80140f0:	2202      	movs	r2, #2
 80140f2:	18b1      	adds	r1, r6, r2
 80140f4:	4604      	mov	r4, r0
 80140f6:	4628      	mov	r0, r5
 80140f8:	f003 fbf6 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 80140fc:	1d31      	adds	r1, r6, #4
 80140fe:	4004      	ands	r4, r0
 8014100:	4628      	mov	r0, r5
 8014102:	f7ff fe5d 	bl	8013dc0 <uxr_serialize_ReadSpecification>
 8014106:	b2e4      	uxtb	r4, r4
 8014108:	4020      	ands	r0, r4
 801410a:	bd70      	pop	{r4, r5, r6, pc}

0801410c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801410c:	b570      	push	{r4, r5, r6, lr}
 801410e:	2202      	movs	r2, #2
 8014110:	4605      	mov	r5, r0
 8014112:	460e      	mov	r6, r1
 8014114:	f003 fbe8 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8014118:	2202      	movs	r2, #2
 801411a:	4604      	mov	r4, r0
 801411c:	18b1      	adds	r1, r6, r2
 801411e:	4628      	mov	r0, r5
 8014120:	f003 fbe2 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8014124:	4020      	ands	r0, r4
 8014126:	b2c0      	uxtb	r0, r0
 8014128:	bd70      	pop	{r4, r5, r6, pc}
 801412a:	bf00      	nop

0801412c <uxr_serialize_ACKNACK_Payload>:
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	460c      	mov	r4, r1
 8014130:	460e      	mov	r6, r1
 8014132:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014136:	4605      	mov	r5, r0
 8014138:	f7f7 f874 	bl	800b224 <ucdr_serialize_uint16_t>
 801413c:	2202      	movs	r2, #2
 801413e:	4621      	mov	r1, r4
 8014140:	4604      	mov	r4, r0
 8014142:	4628      	mov	r0, r5
 8014144:	f003 fbd0 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8014148:	7931      	ldrb	r1, [r6, #4]
 801414a:	4004      	ands	r4, r0
 801414c:	4628      	mov	r0, r5
 801414e:	f7f7 f83d 	bl	800b1cc <ucdr_serialize_uint8_t>
 8014152:	b2e4      	uxtb	r4, r4
 8014154:	4020      	ands	r0, r4
 8014156:	bd70      	pop	{r4, r5, r6, pc}

08014158 <uxr_deserialize_ACKNACK_Payload>:
 8014158:	b570      	push	{r4, r5, r6, lr}
 801415a:	4605      	mov	r5, r0
 801415c:	460e      	mov	r6, r1
 801415e:	f7f7 f961 	bl	800b424 <ucdr_deserialize_uint16_t>
 8014162:	2202      	movs	r2, #2
 8014164:	18b1      	adds	r1, r6, r2
 8014166:	4604      	mov	r4, r0
 8014168:	4628      	mov	r0, r5
 801416a:	f003 fc21 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801416e:	1d31      	adds	r1, r6, #4
 8014170:	4004      	ands	r4, r0
 8014172:	4628      	mov	r0, r5
 8014174:	f7f7 f840 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8014178:	b2e4      	uxtb	r4, r4
 801417a:	4020      	ands	r0, r4
 801417c:	bd70      	pop	{r4, r5, r6, pc}
 801417e:	bf00      	nop

08014180 <uxr_serialize_HEARTBEAT_Payload>:
 8014180:	b570      	push	{r4, r5, r6, lr}
 8014182:	460d      	mov	r5, r1
 8014184:	8809      	ldrh	r1, [r1, #0]
 8014186:	4606      	mov	r6, r0
 8014188:	f7f7 f84c 	bl	800b224 <ucdr_serialize_uint16_t>
 801418c:	8869      	ldrh	r1, [r5, #2]
 801418e:	4604      	mov	r4, r0
 8014190:	4630      	mov	r0, r6
 8014192:	f7f7 f847 	bl	800b224 <ucdr_serialize_uint16_t>
 8014196:	7929      	ldrb	r1, [r5, #4]
 8014198:	4004      	ands	r4, r0
 801419a:	4630      	mov	r0, r6
 801419c:	f7f7 f816 	bl	800b1cc <ucdr_serialize_uint8_t>
 80141a0:	b2e4      	uxtb	r4, r4
 80141a2:	4020      	ands	r0, r4
 80141a4:	bd70      	pop	{r4, r5, r6, pc}
 80141a6:	bf00      	nop

080141a8 <uxr_deserialize_HEARTBEAT_Payload>:
 80141a8:	b570      	push	{r4, r5, r6, lr}
 80141aa:	4605      	mov	r5, r0
 80141ac:	460e      	mov	r6, r1
 80141ae:	f7f7 f939 	bl	800b424 <ucdr_deserialize_uint16_t>
 80141b2:	1cb1      	adds	r1, r6, #2
 80141b4:	4604      	mov	r4, r0
 80141b6:	4628      	mov	r0, r5
 80141b8:	f7f7 f934 	bl	800b424 <ucdr_deserialize_uint16_t>
 80141bc:	1d31      	adds	r1, r6, #4
 80141be:	4004      	ands	r4, r0
 80141c0:	4628      	mov	r0, r5
 80141c2:	f7f7 f819 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 80141c6:	b2e4      	uxtb	r4, r4
 80141c8:	4020      	ands	r0, r4
 80141ca:	bd70      	pop	{r4, r5, r6, pc}

080141cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80141cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d0:	4605      	mov	r5, r0
 80141d2:	460e      	mov	r6, r1
 80141d4:	f7f7 fec2 	bl	800bf5c <ucdr_deserialize_int32_t>
 80141d8:	1d31      	adds	r1, r6, #4
 80141da:	4607      	mov	r7, r0
 80141dc:	4628      	mov	r0, r5
 80141de:	f7f7 fb3b 	bl	800b858 <ucdr_deserialize_uint32_t>
 80141e2:	f106 0108 	add.w	r1, r6, #8
 80141e6:	4680      	mov	r8, r0
 80141e8:	4628      	mov	r0, r5
 80141ea:	f7f7 feb7 	bl	800bf5c <ucdr_deserialize_int32_t>
 80141ee:	f106 010c 	add.w	r1, r6, #12
 80141f2:	4604      	mov	r4, r0
 80141f4:	4628      	mov	r0, r5
 80141f6:	f7f7 fb2f 	bl	800b858 <ucdr_deserialize_uint32_t>
 80141fa:	ea07 0708 	and.w	r7, r7, r8
 80141fe:	403c      	ands	r4, r7
 8014200:	f106 0110 	add.w	r1, r6, #16
 8014204:	4004      	ands	r4, r0
 8014206:	4628      	mov	r0, r5
 8014208:	f7f7 fea8 	bl	800bf5c <ucdr_deserialize_int32_t>
 801420c:	f106 0114 	add.w	r1, r6, #20
 8014210:	4607      	mov	r7, r0
 8014212:	4628      	mov	r0, r5
 8014214:	f7f7 fb20 	bl	800b858 <ucdr_deserialize_uint32_t>
 8014218:	b2e4      	uxtb	r4, r4
 801421a:	403c      	ands	r4, r7
 801421c:	4020      	ands	r0, r4
 801421e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014222:	bf00      	nop

08014224 <uxr_serialize_SampleIdentity>:
 8014224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014228:	220c      	movs	r2, #12
 801422a:	4604      	mov	r4, r0
 801422c:	460d      	mov	r5, r1
 801422e:	f003 fb5b 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8014232:	2203      	movs	r2, #3
 8014234:	f105 010c 	add.w	r1, r5, #12
 8014238:	4607      	mov	r7, r0
 801423a:	4620      	mov	r0, r4
 801423c:	f003 fb54 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 8014240:	7be9      	ldrb	r1, [r5, #15]
 8014242:	4680      	mov	r8, r0
 8014244:	4620      	mov	r0, r4
 8014246:	f7f6 ffc1 	bl	800b1cc <ucdr_serialize_uint8_t>
 801424a:	6929      	ldr	r1, [r5, #16]
 801424c:	4606      	mov	r6, r0
 801424e:	4620      	mov	r0, r4
 8014250:	f7f7 fdec 	bl	800be2c <ucdr_serialize_int32_t>
 8014254:	6969      	ldr	r1, [r5, #20]
 8014256:	4603      	mov	r3, r0
 8014258:	4620      	mov	r0, r4
 801425a:	ea07 0708 	and.w	r7, r7, r8
 801425e:	461c      	mov	r4, r3
 8014260:	f7f7 f9ca 	bl	800b5f8 <ucdr_serialize_uint32_t>
 8014264:	403e      	ands	r6, r7
 8014266:	4034      	ands	r4, r6
 8014268:	4020      	ands	r0, r4
 801426a:	b2c0      	uxtb	r0, r0
 801426c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014270 <uxr_deserialize_SampleIdentity>:
 8014270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014274:	220c      	movs	r2, #12
 8014276:	4604      	mov	r4, r0
 8014278:	460d      	mov	r5, r1
 801427a:	f003 fb99 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801427e:	2203      	movs	r2, #3
 8014280:	f105 010c 	add.w	r1, r5, #12
 8014284:	4607      	mov	r7, r0
 8014286:	4620      	mov	r0, r4
 8014288:	f003 fb92 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801428c:	f105 010f 	add.w	r1, r5, #15
 8014290:	4680      	mov	r8, r0
 8014292:	4620      	mov	r0, r4
 8014294:	f7f6 ffb0 	bl	800b1f8 <ucdr_deserialize_uint8_t>
 8014298:	f105 0110 	add.w	r1, r5, #16
 801429c:	4606      	mov	r6, r0
 801429e:	4620      	mov	r0, r4
 80142a0:	f7f7 fe5c 	bl	800bf5c <ucdr_deserialize_int32_t>
 80142a4:	f105 0114 	add.w	r1, r5, #20
 80142a8:	4603      	mov	r3, r0
 80142aa:	4620      	mov	r0, r4
 80142ac:	ea07 0708 	and.w	r7, r7, r8
 80142b0:	461c      	mov	r4, r3
 80142b2:	f7f7 fad1 	bl	800b858 <ucdr_deserialize_uint32_t>
 80142b6:	403e      	ands	r6, r7
 80142b8:	4034      	ands	r4, r6
 80142ba:	4020      	ands	r0, r4
 80142bc:	b2c0      	uxtb	r0, r0
 80142be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c2:	bf00      	nop

080142c4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80142c4:	280b      	cmp	r0, #11
 80142c6:	dc0d      	bgt.n	80142e4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80142c8:	2800      	cmp	r0, #0
 80142ca:	db09      	blt.n	80142e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80142cc:	280b      	cmp	r0, #11
 80142ce:	d807      	bhi.n	80142e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80142d0:	e8df f000 	tbb	[pc, r0]
 80142d4:	07060607 	.word	0x07060607
 80142d8:	06060606 	.word	0x06060606
 80142dc:	07070606 	.word	0x07070606
 80142e0:	2001      	movs	r0, #1
 80142e2:	4770      	bx	lr
 80142e4:	28cb      	cmp	r0, #203	@ 0xcb
 80142e6:	bf18      	it	ne
 80142e8:	2001      	movne	r0, #1
 80142ea:	4770      	bx	lr

080142ec <rcl_get_zero_initialized_context>:
 80142ec:	4a03      	ldr	r2, [pc, #12]	@ (80142fc <rcl_get_zero_initialized_context+0x10>)
 80142ee:	4603      	mov	r3, r0
 80142f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80142f8:	4618      	mov	r0, r3
 80142fa:	4770      	bx	lr
 80142fc:	0801b094 	.word	0x0801b094

08014300 <rcl_context_is_valid>:
 8014300:	b118      	cbz	r0, 801430a <rcl_context_is_valid+0xa>
 8014302:	6840      	ldr	r0, [r0, #4]
 8014304:	3800      	subs	r0, #0
 8014306:	bf18      	it	ne
 8014308:	2001      	movne	r0, #1
 801430a:	4770      	bx	lr

0801430c <__cleanup_context>:
 801430c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014310:	4606      	mov	r6, r0
 8014312:	6800      	ldr	r0, [r0, #0]
 8014314:	2300      	movs	r3, #0
 8014316:	6073      	str	r3, [r6, #4]
 8014318:	2800      	cmp	r0, #0
 801431a:	d049      	beq.n	80143b0 <__cleanup_context+0xa4>
 801431c:	6947      	ldr	r7, [r0, #20]
 801431e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014322:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8014326:	b137      	cbz	r7, 8014336 <__cleanup_context+0x2a>
 8014328:	3014      	adds	r0, #20
 801432a:	f7f8 faaf 	bl	800c88c <rcl_init_options_fini>
 801432e:	4607      	mov	r7, r0
 8014330:	2800      	cmp	r0, #0
 8014332:	d144      	bne.n	80143be <__cleanup_context+0xb2>
 8014334:	6830      	ldr	r0, [r6, #0]
 8014336:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014338:	b143      	cbz	r3, 801434c <__cleanup_context+0x40>
 801433a:	3028      	adds	r0, #40	@ 0x28
 801433c:	f7fa feb0 	bl	800f0a0 <rmw_context_fini>
 8014340:	b118      	cbz	r0, 801434a <__cleanup_context+0x3e>
 8014342:	2f00      	cmp	r7, #0
 8014344:	d03e      	beq.n	80143c4 <__cleanup_context+0xb8>
 8014346:	f7f9 fee3 	bl	800e110 <rcutils_reset_error>
 801434a:	6830      	ldr	r0, [r6, #0]
 801434c:	6a03      	ldr	r3, [r0, #32]
 801434e:	b1db      	cbz	r3, 8014388 <__cleanup_context+0x7c>
 8014350:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8014354:	2a01      	cmp	r2, #1
 8014356:	f17c 0100 	sbcs.w	r1, ip, #0
 801435a:	db11      	blt.n	8014380 <__cleanup_context+0x74>
 801435c:	2400      	movs	r4, #0
 801435e:	4625      	mov	r5, r4
 8014360:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014364:	4649      	mov	r1, r9
 8014366:	b1b8      	cbz	r0, 8014398 <__cleanup_context+0x8c>
 8014368:	47c0      	blx	r8
 801436a:	6833      	ldr	r3, [r6, #0]
 801436c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8014370:	3401      	adds	r4, #1
 8014372:	f145 0500 	adc.w	r5, r5, #0
 8014376:	4294      	cmp	r4, r2
 8014378:	eb75 010c 	sbcs.w	r1, r5, ip
 801437c:	6a1b      	ldr	r3, [r3, #32]
 801437e:	dbef      	blt.n	8014360 <__cleanup_context+0x54>
 8014380:	4618      	mov	r0, r3
 8014382:	4649      	mov	r1, r9
 8014384:	47c0      	blx	r8
 8014386:	6830      	ldr	r0, [r6, #0]
 8014388:	4649      	mov	r1, r9
 801438a:	47c0      	blx	r8
 801438c:	2300      	movs	r3, #0
 801438e:	e9c6 3300 	strd	r3, r3, [r6]
 8014392:	4638      	mov	r0, r7
 8014394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014398:	3401      	adds	r4, #1
 801439a:	f145 0500 	adc.w	r5, r5, #0
 801439e:	4294      	cmp	r4, r2
 80143a0:	eb75 010c 	sbcs.w	r1, r5, ip
 80143a4:	dbdc      	blt.n	8014360 <__cleanup_context+0x54>
 80143a6:	4618      	mov	r0, r3
 80143a8:	4649      	mov	r1, r9
 80143aa:	47c0      	blx	r8
 80143ac:	6830      	ldr	r0, [r6, #0]
 80143ae:	e7eb      	b.n	8014388 <__cleanup_context+0x7c>
 80143b0:	4607      	mov	r7, r0
 80143b2:	2300      	movs	r3, #0
 80143b4:	e9c6 3300 	strd	r3, r3, [r6]
 80143b8:	4638      	mov	r0, r7
 80143ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143be:	f7f9 fea7 	bl	800e110 <rcutils_reset_error>
 80143c2:	e7b7      	b.n	8014334 <__cleanup_context+0x28>
 80143c4:	f7ff ff7e 	bl	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80143c8:	4607      	mov	r7, r0
 80143ca:	e7bc      	b.n	8014346 <__cleanup_context+0x3a>

080143cc <rcl_expand_topic_name>:
 80143cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d0:	b08b      	sub	sp, #44	@ 0x2c
 80143d2:	9306      	str	r3, [sp, #24]
 80143d4:	2800      	cmp	r0, #0
 80143d6:	f000 80ad 	beq.w	8014534 <rcl_expand_topic_name+0x168>
 80143da:	460e      	mov	r6, r1
 80143dc:	2900      	cmp	r1, #0
 80143de:	f000 80a9 	beq.w	8014534 <rcl_expand_topic_name+0x168>
 80143e2:	4617      	mov	r7, r2
 80143e4:	2a00      	cmp	r2, #0
 80143e6:	f000 80a5 	beq.w	8014534 <rcl_expand_topic_name+0x168>
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f000 80a2 	beq.w	8014534 <rcl_expand_topic_name+0x168>
 80143f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	f000 809e 	beq.w	8014534 <rcl_expand_topic_name+0x168>
 80143f8:	2200      	movs	r2, #0
 80143fa:	a909      	add	r1, sp, #36	@ 0x24
 80143fc:	4680      	mov	r8, r0
 80143fe:	f001 f963 	bl	80156c8 <rcl_validate_topic_name>
 8014402:	4604      	mov	r4, r0
 8014404:	2800      	cmp	r0, #0
 8014406:	f040 8096 	bne.w	8014536 <rcl_expand_topic_name+0x16a>
 801440a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801440c:	2b00      	cmp	r3, #0
 801440e:	f040 809a 	bne.w	8014546 <rcl_expand_topic_name+0x17a>
 8014412:	4602      	mov	r2, r0
 8014414:	a909      	add	r1, sp, #36	@ 0x24
 8014416:	4630      	mov	r0, r6
 8014418:	f7fa fa64 	bl	800e8e4 <rmw_validate_node_name>
 801441c:	2800      	cmp	r0, #0
 801441e:	f040 808e 	bne.w	801453e <rcl_expand_topic_name+0x172>
 8014422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014424:	2a00      	cmp	r2, #0
 8014426:	f040 8093 	bne.w	8014550 <rcl_expand_topic_name+0x184>
 801442a:	a909      	add	r1, sp, #36	@ 0x24
 801442c:	4638      	mov	r0, r7
 801442e:	f7fa fa3b 	bl	800e8a8 <rmw_validate_namespace>
 8014432:	2800      	cmp	r0, #0
 8014434:	f040 8083 	bne.w	801453e <rcl_expand_topic_name+0x172>
 8014438:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801443a:	2c00      	cmp	r4, #0
 801443c:	f040 80ed 	bne.w	801461a <rcl_expand_topic_name+0x24e>
 8014440:	217b      	movs	r1, #123	@ 0x7b
 8014442:	4640      	mov	r0, r8
 8014444:	f004 fdbe 	bl	8018fc4 <strchr>
 8014448:	f898 3000 	ldrb.w	r3, [r8]
 801444c:	2b2f      	cmp	r3, #47	@ 0x2f
 801444e:	4605      	mov	r5, r0
 8014450:	f000 809e 	beq.w	8014590 <rcl_expand_topic_name+0x1c4>
 8014454:	2b7e      	cmp	r3, #126	@ 0x7e
 8014456:	f040 80a2 	bne.w	801459e <rcl_expand_topic_name+0x1d2>
 801445a:	4638      	mov	r0, r7
 801445c:	f7eb feea 	bl	8000234 <strlen>
 8014460:	4a82      	ldr	r2, [pc, #520]	@ (801466c <rcl_expand_topic_name+0x2a0>)
 8014462:	4b83      	ldr	r3, [pc, #524]	@ (8014670 <rcl_expand_topic_name+0x2a4>)
 8014464:	2801      	cmp	r0, #1
 8014466:	bf18      	it	ne
 8014468:	4613      	movne	r3, r2
 801446a:	9302      	str	r3, [sp, #8]
 801446c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801446e:	9300      	str	r3, [sp, #0]
 8014470:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014474:	f108 0301 	add.w	r3, r8, #1
 8014478:	9305      	str	r3, [sp, #20]
 801447a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801447e:	9301      	str	r3, [sp, #4]
 8014480:	ab14      	add	r3, sp, #80	@ 0x50
 8014482:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014484:	f7f9 fe60 	bl	800e148 <rcutils_format_string_limit>
 8014488:	4682      	mov	sl, r0
 801448a:	2800      	cmp	r0, #0
 801448c:	f000 80c7 	beq.w	801461e <rcl_expand_topic_name+0x252>
 8014490:	2d00      	cmp	r5, #0
 8014492:	f000 80a2 	beq.w	80145da <rcl_expand_topic_name+0x20e>
 8014496:	217b      	movs	r1, #123	@ 0x7b
 8014498:	f004 fd94 	bl	8018fc4 <strchr>
 801449c:	46d1      	mov	r9, sl
 801449e:	4605      	mov	r5, r0
 80144a0:	9407      	str	r4, [sp, #28]
 80144a2:	46d3      	mov	fp, sl
 80144a4:	464c      	mov	r4, r9
 80144a6:	2d00      	cmp	r5, #0
 80144a8:	f000 80be 	beq.w	8014628 <rcl_expand_topic_name+0x25c>
 80144ac:	217d      	movs	r1, #125	@ 0x7d
 80144ae:	4620      	mov	r0, r4
 80144b0:	f004 fd88 	bl	8018fc4 <strchr>
 80144b4:	eba0 0905 	sub.w	r9, r0, r5
 80144b8:	f109 0a01 	add.w	sl, r9, #1
 80144bc:	486d      	ldr	r0, [pc, #436]	@ (8014674 <rcl_expand_topic_name+0x2a8>)
 80144be:	4652      	mov	r2, sl
 80144c0:	4629      	mov	r1, r5
 80144c2:	f004 fd8c 	bl	8018fde <strncmp>
 80144c6:	2800      	cmp	r0, #0
 80144c8:	d067      	beq.n	801459a <rcl_expand_topic_name+0x1ce>
 80144ca:	486b      	ldr	r0, [pc, #428]	@ (8014678 <rcl_expand_topic_name+0x2ac>)
 80144cc:	4652      	mov	r2, sl
 80144ce:	4629      	mov	r1, r5
 80144d0:	f004 fd85 	bl	8018fde <strncmp>
 80144d4:	b130      	cbz	r0, 80144e4 <rcl_expand_topic_name+0x118>
 80144d6:	4869      	ldr	r0, [pc, #420]	@ (801467c <rcl_expand_topic_name+0x2b0>)
 80144d8:	4652      	mov	r2, sl
 80144da:	4629      	mov	r1, r5
 80144dc:	f004 fd7f 	bl	8018fde <strncmp>
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d137      	bne.n	8014554 <rcl_expand_topic_name+0x188>
 80144e4:	46b9      	mov	r9, r7
 80144e6:	ab16      	add	r3, sp, #88	@ 0x58
 80144e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80144ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80144f0:	ab14      	add	r3, sp, #80	@ 0x50
 80144f2:	4628      	mov	r0, r5
 80144f4:	cb0c      	ldmia	r3, {r2, r3}
 80144f6:	4651      	mov	r1, sl
 80144f8:	f7f9 ff62 	bl	800e3c0 <rcutils_strndup>
 80144fc:	4605      	mov	r5, r0
 80144fe:	2800      	cmp	r0, #0
 8014500:	f000 809c 	beq.w	801463c <rcl_expand_topic_name+0x270>
 8014504:	464a      	mov	r2, r9
 8014506:	4620      	mov	r0, r4
 8014508:	ab14      	add	r3, sp, #80	@ 0x50
 801450a:	4629      	mov	r1, r5
 801450c:	f7f9 fe56 	bl	800e1bc <rcutils_repl_str>
 8014510:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014512:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014514:	4604      	mov	r4, r0
 8014516:	4628      	mov	r0, r5
 8014518:	4798      	blx	r3
 801451a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801451c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801451e:	4658      	mov	r0, fp
 8014520:	4798      	blx	r3
 8014522:	2c00      	cmp	r4, #0
 8014524:	d07b      	beq.n	801461e <rcl_expand_topic_name+0x252>
 8014526:	217b      	movs	r1, #123	@ 0x7b
 8014528:	4620      	mov	r0, r4
 801452a:	f004 fd4b 	bl	8018fc4 <strchr>
 801452e:	46a3      	mov	fp, r4
 8014530:	4605      	mov	r5, r0
 8014532:	e7b8      	b.n	80144a6 <rcl_expand_topic_name+0xda>
 8014534:	240b      	movs	r4, #11
 8014536:	4620      	mov	r0, r4
 8014538:	b00b      	add	sp, #44	@ 0x2c
 801453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801453e:	f7ff fec1 	bl	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014542:	4604      	mov	r4, r0
 8014544:	e7f7      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 8014546:	2467      	movs	r4, #103	@ 0x67
 8014548:	4620      	mov	r0, r4
 801454a:	b00b      	add	sp, #44	@ 0x2c
 801454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014550:	24c9      	movs	r4, #201	@ 0xc9
 8014552:	e7f0      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 8014554:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8014558:	9806      	ldr	r0, [sp, #24]
 801455a:	1c69      	adds	r1, r5, #1
 801455c:	f7fa f84a 	bl	800e5f4 <rcutils_string_map_getn>
 8014560:	4681      	mov	r9, r0
 8014562:	2800      	cmp	r0, #0
 8014564:	d1bf      	bne.n	80144e6 <rcl_expand_topic_name+0x11a>
 8014566:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014568:	aa16      	add	r2, sp, #88	@ 0x58
 801456a:	6018      	str	r0, [r3, #0]
 801456c:	ca07      	ldmia	r2, {r0, r1, r2}
 801456e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014572:	ab14      	add	r3, sp, #80	@ 0x50
 8014574:	cb0c      	ldmia	r3, {r2, r3}
 8014576:	4651      	mov	r1, sl
 8014578:	4628      	mov	r0, r5
 801457a:	f7f9 ff21 	bl	800e3c0 <rcutils_strndup>
 801457e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014580:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014582:	4798      	blx	r3
 8014584:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014586:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014588:	4658      	mov	r0, fp
 801458a:	2469      	movs	r4, #105	@ 0x69
 801458c:	4798      	blx	r3
 801458e:	e7d2      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 8014590:	2800      	cmp	r0, #0
 8014592:	d05b      	beq.n	801464c <rcl_expand_topic_name+0x280>
 8014594:	46c1      	mov	r9, r8
 8014596:	46a2      	mov	sl, r4
 8014598:	e782      	b.n	80144a0 <rcl_expand_topic_name+0xd4>
 801459a:	46b1      	mov	r9, r6
 801459c:	e7a3      	b.n	80144e6 <rcl_expand_topic_name+0x11a>
 801459e:	2800      	cmp	r0, #0
 80145a0:	d1f8      	bne.n	8014594 <rcl_expand_topic_name+0x1c8>
 80145a2:	4638      	mov	r0, r7
 80145a4:	f7eb fe46 	bl	8000234 <strlen>
 80145a8:	4a35      	ldr	r2, [pc, #212]	@ (8014680 <rcl_expand_topic_name+0x2b4>)
 80145aa:	4b36      	ldr	r3, [pc, #216]	@ (8014684 <rcl_expand_topic_name+0x2b8>)
 80145ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80145b0:	2801      	cmp	r0, #1
 80145b2:	bf18      	it	ne
 80145b4:	4613      	movne	r3, r2
 80145b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80145ba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80145be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80145c0:	9703      	str	r7, [sp, #12]
 80145c2:	9200      	str	r2, [sp, #0]
 80145c4:	ab14      	add	r3, sp, #80	@ 0x50
 80145c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80145c8:	f7f9 fdbe 	bl	800e148 <rcutils_format_string_limit>
 80145cc:	4682      	mov	sl, r0
 80145ce:	4653      	mov	r3, sl
 80145d0:	b32b      	cbz	r3, 801461e <rcl_expand_topic_name+0x252>
 80145d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80145d4:	f8c3 a000 	str.w	sl, [r3]
 80145d8:	e7ad      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 80145da:	f89a 3000 	ldrb.w	r3, [sl]
 80145de:	2b2f      	cmp	r3, #47	@ 0x2f
 80145e0:	d0f7      	beq.n	80145d2 <rcl_expand_topic_name+0x206>
 80145e2:	4638      	mov	r0, r7
 80145e4:	f7eb fe26 	bl	8000234 <strlen>
 80145e8:	4a25      	ldr	r2, [pc, #148]	@ (8014680 <rcl_expand_topic_name+0x2b4>)
 80145ea:	4b26      	ldr	r3, [pc, #152]	@ (8014684 <rcl_expand_topic_name+0x2b8>)
 80145ec:	f8cd a010 	str.w	sl, [sp, #16]
 80145f0:	2801      	cmp	r0, #1
 80145f2:	bf18      	it	ne
 80145f4:	4613      	movne	r3, r2
 80145f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80145fa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80145fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014600:	9703      	str	r7, [sp, #12]
 8014602:	9200      	str	r2, [sp, #0]
 8014604:	ab14      	add	r3, sp, #80	@ 0x50
 8014606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014608:	f7f9 fd9e 	bl	800e148 <rcutils_format_string_limit>
 801460c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801460e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014610:	4605      	mov	r5, r0
 8014612:	4650      	mov	r0, sl
 8014614:	4798      	blx	r3
 8014616:	46aa      	mov	sl, r5
 8014618:	e7d9      	b.n	80145ce <rcl_expand_topic_name+0x202>
 801461a:	24ca      	movs	r4, #202	@ 0xca
 801461c:	e78b      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 801461e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014620:	2300      	movs	r3, #0
 8014622:	6013      	str	r3, [r2, #0]
 8014624:	240a      	movs	r4, #10
 8014626:	e786      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 8014628:	465b      	mov	r3, fp
 801462a:	9c07      	ldr	r4, [sp, #28]
 801462c:	46da      	mov	sl, fp
 801462e:	2b00      	cmp	r3, #0
 8014630:	d1d3      	bne.n	80145da <rcl_expand_topic_name+0x20e>
 8014632:	f898 3000 	ldrb.w	r3, [r8]
 8014636:	2b2f      	cmp	r3, #47	@ 0x2f
 8014638:	d0cb      	beq.n	80145d2 <rcl_expand_topic_name+0x206>
 801463a:	e7b2      	b.n	80145a2 <rcl_expand_topic_name+0x1d6>
 801463c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014640:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014642:	6015      	str	r5, [r2, #0]
 8014644:	4658      	mov	r0, fp
 8014646:	4798      	blx	r3
 8014648:	240a      	movs	r4, #10
 801464a:	e774      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 801464c:	ab17      	add	r3, sp, #92	@ 0x5c
 801464e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014652:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014656:	ab14      	add	r3, sp, #80	@ 0x50
 8014658:	cb0e      	ldmia	r3, {r1, r2, r3}
 801465a:	4640      	mov	r0, r8
 801465c:	f7f9 fe8e 	bl	800e37c <rcutils_strdup>
 8014660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014662:	2800      	cmp	r0, #0
 8014664:	6018      	str	r0, [r3, #0]
 8014666:	bf08      	it	eq
 8014668:	240a      	moveq	r4, #10
 801466a:	e764      	b.n	8014536 <rcl_expand_topic_name+0x16a>
 801466c:	0801b09c 	.word	0x0801b09c
 8014670:	0801a628 	.word	0x0801a628
 8014674:	0801b0a4 	.word	0x0801b0a4
 8014678:	0801b0ac 	.word	0x0801b0ac
 801467c:	0801b0b4 	.word	0x0801b0b4
 8014680:	0801a12c 	.word	0x0801a12c
 8014684:	0801a124 	.word	0x0801a124

08014688 <rcl_get_default_topic_name_substitutions>:
 8014688:	2800      	cmp	r0, #0
 801468a:	bf0c      	ite	eq
 801468c:	200b      	moveq	r0, #11
 801468e:	2000      	movne	r0, #0
 8014690:	4770      	bx	lr
 8014692:	bf00      	nop

08014694 <rcl_get_zero_initialized_guard_condition>:
 8014694:	4a03      	ldr	r2, [pc, #12]	@ (80146a4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8014696:	4603      	mov	r3, r0
 8014698:	e892 0003 	ldmia.w	r2, {r0, r1}
 801469c:	e883 0003 	stmia.w	r3, {r0, r1}
 80146a0:	4618      	mov	r0, r3
 80146a2:	4770      	bx	lr
 80146a4:	0801b0c0 	.word	0x0801b0c0

080146a8 <rcl_guard_condition_init>:
 80146a8:	b082      	sub	sp, #8
 80146aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ac:	b087      	sub	sp, #28
 80146ae:	ac0c      	add	r4, sp, #48	@ 0x30
 80146b0:	e884 000c 	stmia.w	r4, {r2, r3}
 80146b4:	46a6      	mov	lr, r4
 80146b6:	460d      	mov	r5, r1
 80146b8:	4604      	mov	r4, r0
 80146ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80146be:	f10d 0c04 	add.w	ip, sp, #4
 80146c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146c6:	f8de 3000 	ldr.w	r3, [lr]
 80146ca:	f8cc 3000 	str.w	r3, [ip]
 80146ce:	a801      	add	r0, sp, #4
 80146d0:	f7f9 fc3c 	bl	800df4c <rcutils_allocator_is_valid>
 80146d4:	b338      	cbz	r0, 8014726 <rcl_guard_condition_init+0x7e>
 80146d6:	b334      	cbz	r4, 8014726 <rcl_guard_condition_init+0x7e>
 80146d8:	6866      	ldr	r6, [r4, #4]
 80146da:	b9ee      	cbnz	r6, 8014718 <rcl_guard_condition_init+0x70>
 80146dc:	b31d      	cbz	r5, 8014726 <rcl_guard_condition_init+0x7e>
 80146de:	4628      	mov	r0, r5
 80146e0:	f7ff fe0e 	bl	8014300 <rcl_context_is_valid>
 80146e4:	b308      	cbz	r0, 801472a <rcl_guard_condition_init+0x82>
 80146e6:	9b01      	ldr	r3, [sp, #4]
 80146e8:	9905      	ldr	r1, [sp, #20]
 80146ea:	201c      	movs	r0, #28
 80146ec:	4798      	blx	r3
 80146ee:	4607      	mov	r7, r0
 80146f0:	6060      	str	r0, [r4, #4]
 80146f2:	b310      	cbz	r0, 801473a <rcl_guard_condition_init+0x92>
 80146f4:	6828      	ldr	r0, [r5, #0]
 80146f6:	3028      	adds	r0, #40	@ 0x28
 80146f8:	f002 fdc2 	bl	8017280 <rmw_create_guard_condition>
 80146fc:	6038      	str	r0, [r7, #0]
 80146fe:	6860      	ldr	r0, [r4, #4]
 8014700:	6805      	ldr	r5, [r0, #0]
 8014702:	b1a5      	cbz	r5, 801472e <rcl_guard_condition_init+0x86>
 8014704:	2301      	movs	r3, #1
 8014706:	ac01      	add	r4, sp, #4
 8014708:	7103      	strb	r3, [r0, #4]
 801470a:	f100 0708 	add.w	r7, r0, #8
 801470e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014710:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014712:	6823      	ldr	r3, [r4, #0]
 8014714:	603b      	str	r3, [r7, #0]
 8014716:	e000      	b.n	801471a <rcl_guard_condition_init+0x72>
 8014718:	2664      	movs	r6, #100	@ 0x64
 801471a:	4630      	mov	r0, r6
 801471c:	b007      	add	sp, #28
 801471e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014722:	b002      	add	sp, #8
 8014724:	4770      	bx	lr
 8014726:	260b      	movs	r6, #11
 8014728:	e7f7      	b.n	801471a <rcl_guard_condition_init+0x72>
 801472a:	2665      	movs	r6, #101	@ 0x65
 801472c:	e7f5      	b.n	801471a <rcl_guard_condition_init+0x72>
 801472e:	9b02      	ldr	r3, [sp, #8]
 8014730:	9905      	ldr	r1, [sp, #20]
 8014732:	4798      	blx	r3
 8014734:	2601      	movs	r6, #1
 8014736:	6065      	str	r5, [r4, #4]
 8014738:	e7ef      	b.n	801471a <rcl_guard_condition_init+0x72>
 801473a:	260a      	movs	r6, #10
 801473c:	e7ed      	b.n	801471a <rcl_guard_condition_init+0x72>
 801473e:	bf00      	nop

08014740 <rcl_guard_condition_init_from_rmw>:
 8014740:	b082      	sub	sp, #8
 8014742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014746:	b086      	sub	sp, #24
 8014748:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801474c:	4604      	mov	r4, r0
 801474e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014752:	460e      	mov	r6, r1
 8014754:	4617      	mov	r7, r2
 8014756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801475a:	f10d 0e04 	add.w	lr, sp, #4
 801475e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014762:	f8dc 3000 	ldr.w	r3, [ip]
 8014766:	f8ce 3000 	str.w	r3, [lr]
 801476a:	a801      	add	r0, sp, #4
 801476c:	f7f9 fbee 	bl	800df4c <rcutils_allocator_is_valid>
 8014770:	b350      	cbz	r0, 80147c8 <rcl_guard_condition_init_from_rmw+0x88>
 8014772:	b34c      	cbz	r4, 80147c8 <rcl_guard_condition_init_from_rmw+0x88>
 8014774:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014778:	f1b8 0f00 	cmp.w	r8, #0
 801477c:	d11e      	bne.n	80147bc <rcl_guard_condition_init_from_rmw+0x7c>
 801477e:	b31f      	cbz	r7, 80147c8 <rcl_guard_condition_init_from_rmw+0x88>
 8014780:	4638      	mov	r0, r7
 8014782:	f7ff fdbd 	bl	8014300 <rcl_context_is_valid>
 8014786:	b328      	cbz	r0, 80147d4 <rcl_guard_condition_init_from_rmw+0x94>
 8014788:	9b01      	ldr	r3, [sp, #4]
 801478a:	9905      	ldr	r1, [sp, #20]
 801478c:	201c      	movs	r0, #28
 801478e:	4798      	blx	r3
 8014790:	4605      	mov	r5, r0
 8014792:	6060      	str	r0, [r4, #4]
 8014794:	b358      	cbz	r0, 80147ee <rcl_guard_condition_init_from_rmw+0xae>
 8014796:	b1fe      	cbz	r6, 80147d8 <rcl_guard_condition_init_from_rmw+0x98>
 8014798:	6006      	str	r6, [r0, #0]
 801479a:	f880 8004 	strb.w	r8, [r0, #4]
 801479e:	ac01      	add	r4, sp, #4
 80147a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147a2:	f105 0c08 	add.w	ip, r5, #8
 80147a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147aa:	6823      	ldr	r3, [r4, #0]
 80147ac:	f8cc 3000 	str.w	r3, [ip]
 80147b0:	2000      	movs	r0, #0
 80147b2:	b006      	add	sp, #24
 80147b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147b8:	b002      	add	sp, #8
 80147ba:	4770      	bx	lr
 80147bc:	2064      	movs	r0, #100	@ 0x64
 80147be:	b006      	add	sp, #24
 80147c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147c4:	b002      	add	sp, #8
 80147c6:	4770      	bx	lr
 80147c8:	200b      	movs	r0, #11
 80147ca:	b006      	add	sp, #24
 80147cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147d0:	b002      	add	sp, #8
 80147d2:	4770      	bx	lr
 80147d4:	2065      	movs	r0, #101	@ 0x65
 80147d6:	e7f2      	b.n	80147be <rcl_guard_condition_init_from_rmw+0x7e>
 80147d8:	6838      	ldr	r0, [r7, #0]
 80147da:	3028      	adds	r0, #40	@ 0x28
 80147dc:	f002 fd50 	bl	8017280 <rmw_create_guard_condition>
 80147e0:	6028      	str	r0, [r5, #0]
 80147e2:	6865      	ldr	r5, [r4, #4]
 80147e4:	682e      	ldr	r6, [r5, #0]
 80147e6:	b126      	cbz	r6, 80147f2 <rcl_guard_condition_init_from_rmw+0xb2>
 80147e8:	2301      	movs	r3, #1
 80147ea:	712b      	strb	r3, [r5, #4]
 80147ec:	e7d7      	b.n	801479e <rcl_guard_condition_init_from_rmw+0x5e>
 80147ee:	200a      	movs	r0, #10
 80147f0:	e7e5      	b.n	80147be <rcl_guard_condition_init_from_rmw+0x7e>
 80147f2:	4628      	mov	r0, r5
 80147f4:	9b02      	ldr	r3, [sp, #8]
 80147f6:	9905      	ldr	r1, [sp, #20]
 80147f8:	4798      	blx	r3
 80147fa:	6066      	str	r6, [r4, #4]
 80147fc:	2001      	movs	r0, #1
 80147fe:	e7de      	b.n	80147be <rcl_guard_condition_init_from_rmw+0x7e>

08014800 <rcl_guard_condition_fini>:
 8014800:	b570      	push	{r4, r5, r6, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	b1f0      	cbz	r0, 8014844 <rcl_guard_condition_fini+0x44>
 8014806:	6843      	ldr	r3, [r0, #4]
 8014808:	4604      	mov	r4, r0
 801480a:	b163      	cbz	r3, 8014826 <rcl_guard_condition_fini+0x26>
 801480c:	6818      	ldr	r0, [r3, #0]
 801480e:	68de      	ldr	r6, [r3, #12]
 8014810:	6999      	ldr	r1, [r3, #24]
 8014812:	b160      	cbz	r0, 801482e <rcl_guard_condition_fini+0x2e>
 8014814:	791d      	ldrb	r5, [r3, #4]
 8014816:	b965      	cbnz	r5, 8014832 <rcl_guard_condition_fini+0x32>
 8014818:	4618      	mov	r0, r3
 801481a:	47b0      	blx	r6
 801481c:	2300      	movs	r3, #0
 801481e:	4628      	mov	r0, r5
 8014820:	6063      	str	r3, [r4, #4]
 8014822:	b002      	add	sp, #8
 8014824:	bd70      	pop	{r4, r5, r6, pc}
 8014826:	461d      	mov	r5, r3
 8014828:	4628      	mov	r0, r5
 801482a:	b002      	add	sp, #8
 801482c:	bd70      	pop	{r4, r5, r6, pc}
 801482e:	4605      	mov	r5, r0
 8014830:	e7f2      	b.n	8014818 <rcl_guard_condition_fini+0x18>
 8014832:	9101      	str	r1, [sp, #4]
 8014834:	f002 fd38 	bl	80172a8 <rmw_destroy_guard_condition>
 8014838:	1e05      	subs	r5, r0, #0
 801483a:	6863      	ldr	r3, [r4, #4]
 801483c:	9901      	ldr	r1, [sp, #4]
 801483e:	bf18      	it	ne
 8014840:	2501      	movne	r5, #1
 8014842:	e7e9      	b.n	8014818 <rcl_guard_condition_fini+0x18>
 8014844:	250b      	movs	r5, #11
 8014846:	4628      	mov	r0, r5
 8014848:	b002      	add	sp, #8
 801484a:	bd70      	pop	{r4, r5, r6, pc}

0801484c <rcl_guard_condition_get_default_options>:
 801484c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801484e:	b087      	sub	sp, #28
 8014850:	4606      	mov	r6, r0
 8014852:	4668      	mov	r0, sp
 8014854:	f7f9 fb6c 	bl	800df30 <rcutils_get_default_allocator>
 8014858:	4b09      	ldr	r3, [pc, #36]	@ (8014880 <rcl_guard_condition_get_default_options+0x34>)
 801485a:	46ee      	mov	lr, sp
 801485c:	469c      	mov	ip, r3
 801485e:	461d      	mov	r5, r3
 8014860:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014864:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801486a:	4634      	mov	r4, r6
 801486c:	f8de 7000 	ldr.w	r7, [lr]
 8014870:	f8cc 7000 	str.w	r7, [ip]
 8014874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014876:	4630      	mov	r0, r6
 8014878:	6027      	str	r7, [r4, #0]
 801487a:	b007      	add	sp, #28
 801487c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801487e:	bf00      	nop
 8014880:	2000b6f0 	.word	0x2000b6f0

08014884 <rcl_trigger_guard_condition>:
 8014884:	b148      	cbz	r0, 801489a <rcl_trigger_guard_condition+0x16>
 8014886:	b508      	push	{r3, lr}
 8014888:	6843      	ldr	r3, [r0, #4]
 801488a:	b143      	cbz	r3, 801489e <rcl_trigger_guard_condition+0x1a>
 801488c:	6818      	ldr	r0, [r3, #0]
 801488e:	f002 fde5 	bl	801745c <rmw_trigger_guard_condition>
 8014892:	3800      	subs	r0, #0
 8014894:	bf18      	it	ne
 8014896:	2001      	movne	r0, #1
 8014898:	bd08      	pop	{r3, pc}
 801489a:	200b      	movs	r0, #11
 801489c:	4770      	bx	lr
 801489e:	200b      	movs	r0, #11
 80148a0:	bd08      	pop	{r3, pc}
 80148a2:	bf00      	nop

080148a4 <rcl_guard_condition_get_rmw_handle>:
 80148a4:	b110      	cbz	r0, 80148ac <rcl_guard_condition_get_rmw_handle+0x8>
 80148a6:	6840      	ldr	r0, [r0, #4]
 80148a8:	b100      	cbz	r0, 80148ac <rcl_guard_condition_get_rmw_handle+0x8>
 80148aa:	6800      	ldr	r0, [r0, #0]
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop

080148b0 <rcl_init>:
 80148b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148b4:	1e05      	subs	r5, r0, #0
 80148b6:	b09e      	sub	sp, #120	@ 0x78
 80148b8:	460e      	mov	r6, r1
 80148ba:	4690      	mov	r8, r2
 80148bc:	461f      	mov	r7, r3
 80148be:	f340 809c 	ble.w	80149fa <rcl_init+0x14a>
 80148c2:	2900      	cmp	r1, #0
 80148c4:	f000 809c 	beq.w	8014a00 <rcl_init+0x150>
 80148c8:	f1a1 0e04 	sub.w	lr, r1, #4
 80148cc:	f04f 0c00 	mov.w	ip, #0
 80148d0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80148d4:	f10c 0c01 	add.w	ip, ip, #1
 80148d8:	2c00      	cmp	r4, #0
 80148da:	f000 8091 	beq.w	8014a00 <rcl_init+0x150>
 80148de:	4565      	cmp	r5, ip
 80148e0:	d1f6      	bne.n	80148d0 <rcl_init+0x20>
 80148e2:	f1b8 0f00 	cmp.w	r8, #0
 80148e6:	f000 808b 	beq.w	8014a00 <rcl_init+0x150>
 80148ea:	f8d8 4000 	ldr.w	r4, [r8]
 80148ee:	2c00      	cmp	r4, #0
 80148f0:	f000 8086 	beq.w	8014a00 <rcl_init+0x150>
 80148f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80148f6:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80148fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148fe:	6823      	ldr	r3, [r4, #0]
 8014900:	f8cc 3000 	str.w	r3, [ip]
 8014904:	a819      	add	r0, sp, #100	@ 0x64
 8014906:	f7f9 fb21 	bl	800df4c <rcutils_allocator_is_valid>
 801490a:	2800      	cmp	r0, #0
 801490c:	d078      	beq.n	8014a00 <rcl_init+0x150>
 801490e:	2f00      	cmp	r7, #0
 8014910:	d076      	beq.n	8014a00 <rcl_init+0x150>
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d178      	bne.n	8014a0a <rcl_init+0x15a>
 8014918:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801491c:	2178      	movs	r1, #120	@ 0x78
 801491e:	2001      	movs	r0, #1
 8014920:	4798      	blx	r3
 8014922:	4604      	mov	r4, r0
 8014924:	6038      	str	r0, [r7, #0]
 8014926:	2800      	cmp	r0, #0
 8014928:	f000 80b6 	beq.w	8014a98 <rcl_init+0x1e8>
 801492c:	a802      	add	r0, sp, #8
 801492e:	f002 faff 	bl	8016f30 <rmw_get_zero_initialized_context>
 8014932:	a902      	add	r1, sp, #8
 8014934:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014938:	2250      	movs	r2, #80	@ 0x50
 801493a:	ac19      	add	r4, sp, #100	@ 0x64
 801493c:	f004 fc03 	bl	8019146 <memcpy>
 8014940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014942:	f8d7 e000 	ldr.w	lr, [r7]
 8014946:	46f4      	mov	ip, lr
 8014948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801494c:	6823      	ldr	r3, [r4, #0]
 801494e:	f8cc 3000 	str.w	r3, [ip]
 8014952:	f10e 0114 	add.w	r1, lr, #20
 8014956:	4640      	mov	r0, r8
 8014958:	f7f7 ffc2 	bl	800c8e0 <rcl_init_options_copy>
 801495c:	4604      	mov	r4, r0
 801495e:	2800      	cmp	r0, #0
 8014960:	d144      	bne.n	80149ec <rcl_init+0x13c>
 8014962:	f8d7 9000 	ldr.w	r9, [r7]
 8014966:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801496a:	f8c9 0020 	str.w	r0, [r9, #32]
 801496e:	f8c9 5018 	str.w	r5, [r9, #24]
 8014972:	f8c9 801c 	str.w	r8, [r9, #28]
 8014976:	2d00      	cmp	r5, #0
 8014978:	d04e      	beq.n	8014a18 <rcl_init+0x168>
 801497a:	2e00      	cmp	r6, #0
 801497c:	d04c      	beq.n	8014a18 <rcl_init+0x168>
 801497e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8014982:	2104      	movs	r1, #4
 8014984:	4628      	mov	r0, r5
 8014986:	4798      	blx	r3
 8014988:	f8c9 0020 	str.w	r0, [r9, #32]
 801498c:	f8d7 9000 	ldr.w	r9, [r7]
 8014990:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014994:	46ca      	mov	sl, r9
 8014996:	b343      	cbz	r3, 80149ea <rcl_init+0x13a>
 8014998:	2d01      	cmp	r5, #1
 801499a:	f178 0300 	sbcs.w	r3, r8, #0
 801499e:	db3b      	blt.n	8014a18 <rcl_init+0x168>
 80149a0:	2400      	movs	r4, #0
 80149a2:	3e04      	subs	r6, #4
 80149a4:	46a1      	mov	r9, r4
 80149a6:	e00b      	b.n	80149c0 <rcl_init+0x110>
 80149a8:	6831      	ldr	r1, [r6, #0]
 80149aa:	f004 fbcc 	bl	8019146 <memcpy>
 80149ae:	3401      	adds	r4, #1
 80149b0:	f149 0900 	adc.w	r9, r9, #0
 80149b4:	45c8      	cmp	r8, r9
 80149b6:	bf08      	it	eq
 80149b8:	42a5      	cmpeq	r5, r4
 80149ba:	d02b      	beq.n	8014a14 <rcl_init+0x164>
 80149bc:	f8d7 a000 	ldr.w	sl, [r7]
 80149c0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80149c4:	f7eb fc36 	bl	8000234 <strlen>
 80149c8:	1c42      	adds	r2, r0, #1
 80149ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80149cc:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80149ce:	f8da a020 	ldr.w	sl, [sl, #32]
 80149d2:	9201      	str	r2, [sp, #4]
 80149d4:	4610      	mov	r0, r2
 80149d6:	4798      	blx	r3
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80149de:	6a1b      	ldr	r3, [r3, #32]
 80149e0:	9a01      	ldr	r2, [sp, #4]
 80149e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80149e6:	2800      	cmp	r0, #0
 80149e8:	d1de      	bne.n	80149a8 <rcl_init+0xf8>
 80149ea:	240a      	movs	r4, #10
 80149ec:	4638      	mov	r0, r7
 80149ee:	f7ff fc8d 	bl	801430c <__cleanup_context>
 80149f2:	4620      	mov	r0, r4
 80149f4:	b01e      	add	sp, #120	@ 0x78
 80149f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149fa:	2900      	cmp	r1, #0
 80149fc:	f43f af71 	beq.w	80148e2 <rcl_init+0x32>
 8014a00:	240b      	movs	r4, #11
 8014a02:	4620      	mov	r0, r4
 8014a04:	b01e      	add	sp, #120	@ 0x78
 8014a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a0a:	2464      	movs	r4, #100	@ 0x64
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	b01e      	add	sp, #120	@ 0x78
 8014a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a14:	f8d7 9000 	ldr.w	r9, [r7]
 8014a18:	4926      	ldr	r1, [pc, #152]	@ (8014ab4 <rcl_init+0x204>)
 8014a1a:	680b      	ldr	r3, [r1, #0]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	d036      	beq.n	8014a8e <rcl_init+0x1de>
 8014a20:	600b      	str	r3, [r1, #0]
 8014a22:	461a      	mov	r2, r3
 8014a24:	2400      	movs	r4, #0
 8014a26:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014a2a:	607b      	str	r3, [r7, #4]
 8014a2c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014a2e:	3301      	adds	r3, #1
 8014a30:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014a34:	d034      	beq.n	8014aa0 <rcl_init+0x1f0>
 8014a36:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014a3a:	b93b      	cbnz	r3, 8014a4c <rcl_init+0x19c>
 8014a3c:	3030      	adds	r0, #48	@ 0x30
 8014a3e:	f000 f83b 	bl	8014ab8 <rcl_get_localhost_only>
 8014a42:	4604      	mov	r4, r0
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d1d1      	bne.n	80149ec <rcl_init+0x13c>
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	6958      	ldr	r0, [r3, #20]
 8014a4c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8014a4e:	aa18      	add	r2, sp, #96	@ 0x60
 8014a50:	a917      	add	r1, sp, #92	@ 0x5c
 8014a52:	f000 fe27 	bl	80156a4 <rcl_validate_enclave_name>
 8014a56:	4604      	mov	r4, r0
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d1c7      	bne.n	80149ec <rcl_init+0x13c>
 8014a5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014a5e:	b9eb      	cbnz	r3, 8014a9c <rcl_init+0x1ec>
 8014a60:	6839      	ldr	r1, [r7, #0]
 8014a62:	694b      	ldr	r3, [r1, #20]
 8014a64:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014a66:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8014a6a:	f000 f8f3 	bl	8014c54 <rcl_get_security_options_from_environment>
 8014a6e:	4604      	mov	r4, r0
 8014a70:	2800      	cmp	r0, #0
 8014a72:	d1bb      	bne.n	80149ec <rcl_init+0x13c>
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6948      	ldr	r0, [r1, #20]
 8014a78:	3128      	adds	r1, #40	@ 0x28
 8014a7a:	3018      	adds	r0, #24
 8014a7c:	f7fa f9da 	bl	800ee34 <rmw_init>
 8014a80:	4604      	mov	r4, r0
 8014a82:	2800      	cmp	r0, #0
 8014a84:	d0bd      	beq.n	8014a02 <rcl_init+0x152>
 8014a86:	f7ff fc1d 	bl	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a8a:	4604      	mov	r4, r0
 8014a8c:	e7ae      	b.n	80149ec <rcl_init+0x13c>
 8014a8e:	2201      	movs	r2, #1
 8014a90:	461c      	mov	r4, r3
 8014a92:	600a      	str	r2, [r1, #0]
 8014a94:	4613      	mov	r3, r2
 8014a96:	e7c6      	b.n	8014a26 <rcl_init+0x176>
 8014a98:	240a      	movs	r4, #10
 8014a9a:	e7b2      	b.n	8014a02 <rcl_init+0x152>
 8014a9c:	2401      	movs	r4, #1
 8014a9e:	e7a5      	b.n	80149ec <rcl_init+0x13c>
 8014aa0:	3024      	adds	r0, #36	@ 0x24
 8014aa2:	f003 fd69 	bl	8018578 <rcl_get_default_domain_id>
 8014aa6:	4604      	mov	r4, r0
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d19f      	bne.n	80149ec <rcl_init+0x13c>
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	6958      	ldr	r0, [r3, #20]
 8014ab0:	e7c1      	b.n	8014a36 <rcl_init+0x186>
 8014ab2:	bf00      	nop
 8014ab4:	2000b704 	.word	0x2000b704

08014ab8 <rcl_get_localhost_only>:
 8014ab8:	b510      	push	{r4, lr}
 8014aba:	b082      	sub	sp, #8
 8014abc:	2300      	movs	r3, #0
 8014abe:	9301      	str	r3, [sp, #4]
 8014ac0:	b1b8      	cbz	r0, 8014af2 <rcl_get_localhost_only+0x3a>
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	a901      	add	r1, sp, #4
 8014ac6:	480c      	ldr	r0, [pc, #48]	@ (8014af8 <rcl_get_localhost_only+0x40>)
 8014ac8:	f7f9 faf2 	bl	800e0b0 <rcutils_get_env>
 8014acc:	b110      	cbz	r0, 8014ad4 <rcl_get_localhost_only+0x1c>
 8014ace:	2001      	movs	r0, #1
 8014ad0:	b002      	add	sp, #8
 8014ad2:	bd10      	pop	{r4, pc}
 8014ad4:	9b01      	ldr	r3, [sp, #4]
 8014ad6:	b113      	cbz	r3, 8014ade <rcl_get_localhost_only+0x26>
 8014ad8:	781a      	ldrb	r2, [r3, #0]
 8014ada:	2a31      	cmp	r2, #49	@ 0x31
 8014adc:	d004      	beq.n	8014ae8 <rcl_get_localhost_only+0x30>
 8014ade:	2302      	movs	r3, #2
 8014ae0:	2000      	movs	r0, #0
 8014ae2:	7023      	strb	r3, [r4, #0]
 8014ae4:	b002      	add	sp, #8
 8014ae6:	bd10      	pop	{r4, pc}
 8014ae8:	785b      	ldrb	r3, [r3, #1]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d1f7      	bne.n	8014ade <rcl_get_localhost_only+0x26>
 8014aee:	2301      	movs	r3, #1
 8014af0:	e7f6      	b.n	8014ae0 <rcl_get_localhost_only+0x28>
 8014af2:	200b      	movs	r0, #11
 8014af4:	b002      	add	sp, #8
 8014af6:	bd10      	pop	{r4, pc}
 8014af8:	0801b0c8 	.word	0x0801b0c8

08014afc <exact_match_lookup>:
 8014afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014afe:	f102 0708 	add.w	r7, r2, #8
 8014b02:	460b      	mov	r3, r1
 8014b04:	4614      	mov	r4, r2
 8014b06:	4606      	mov	r6, r0
 8014b08:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014b0c:	b085      	sub	sp, #20
 8014b0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b12:	4618      	mov	r0, r3
 8014b14:	4919      	ldr	r1, [pc, #100]	@ (8014b7c <exact_match_lookup+0x80>)
 8014b16:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014b1a:	f002 f9fb 	bl	8016f14 <rcutils_join_path>
 8014b1e:	7833      	ldrb	r3, [r6, #0]
 8014b20:	2b2f      	cmp	r3, #47	@ 0x2f
 8014b22:	4605      	mov	r5, r0
 8014b24:	d023      	beq.n	8014b6e <exact_match_lookup+0x72>
 8014b26:	f104 030c 	add.w	r3, r4, #12
 8014b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014b32:	1c70      	adds	r0, r6, #1
 8014b34:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014b38:	f002 f9f2 	bl	8016f20 <rcutils_to_native_path>
 8014b3c:	4606      	mov	r6, r0
 8014b3e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014b42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b46:	4631      	mov	r1, r6
 8014b48:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	f002 f9e1 	bl	8016f14 <rcutils_join_path>
 8014b52:	6862      	ldr	r2, [r4, #4]
 8014b54:	6921      	ldr	r1, [r4, #16]
 8014b56:	4603      	mov	r3, r0
 8014b58:	4630      	mov	r0, r6
 8014b5a:	461e      	mov	r6, r3
 8014b5c:	4790      	blx	r2
 8014b5e:	4628      	mov	r0, r5
 8014b60:	6863      	ldr	r3, [r4, #4]
 8014b62:	6921      	ldr	r1, [r4, #16]
 8014b64:	4798      	blx	r3
 8014b66:	4635      	mov	r5, r6
 8014b68:	4628      	mov	r0, r5
 8014b6a:	b005      	add	sp, #20
 8014b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b6e:	7873      	ldrb	r3, [r6, #1]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d1d8      	bne.n	8014b26 <exact_match_lookup+0x2a>
 8014b74:	4628      	mov	r0, r5
 8014b76:	b005      	add	sp, #20
 8014b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	0801b118 	.word	0x0801b118

08014b80 <rcl_get_secure_root>:
 8014b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b84:	b085      	sub	sp, #20
 8014b86:	b168      	cbz	r0, 8014ba4 <rcl_get_secure_root+0x24>
 8014b88:	4607      	mov	r7, r0
 8014b8a:	4608      	mov	r0, r1
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	f7f9 f9dd 	bl	800df4c <rcutils_allocator_is_valid>
 8014b92:	b138      	cbz	r0, 8014ba4 <rcl_get_secure_root+0x24>
 8014b94:	2300      	movs	r3, #0
 8014b96:	482d      	ldr	r0, [pc, #180]	@ (8014c4c <rcl_get_secure_root+0xcc>)
 8014b98:	9303      	str	r3, [sp, #12]
 8014b9a:	a903      	add	r1, sp, #12
 8014b9c:	f7f9 fa88 	bl	800e0b0 <rcutils_get_env>
 8014ba0:	4605      	mov	r5, r0
 8014ba2:	b120      	cbz	r0, 8014bae <rcl_get_secure_root+0x2e>
 8014ba4:	2500      	movs	r5, #0
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	b005      	add	sp, #20
 8014baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bae:	9b03      	ldr	r3, [sp, #12]
 8014bb0:	781a      	ldrb	r2, [r3, #0]
 8014bb2:	2a00      	cmp	r2, #0
 8014bb4:	d0f6      	beq.n	8014ba4 <rcl_get_secure_root+0x24>
 8014bb6:	f104 090c 	add.w	r9, r4, #12
 8014bba:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014bbe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014bc8:	f7f9 fbd8 	bl	800e37c <rcutils_strdup>
 8014bcc:	4680      	mov	r8, r0
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d0e8      	beq.n	8014ba4 <rcl_get_secure_root+0x24>
 8014bd2:	481f      	ldr	r0, [pc, #124]	@ (8014c50 <rcl_get_secure_root+0xd0>)
 8014bd4:	9503      	str	r5, [sp, #12]
 8014bd6:	a903      	add	r1, sp, #12
 8014bd8:	f7f9 fa6a 	bl	800e0b0 <rcutils_get_env>
 8014bdc:	b160      	cbz	r0, 8014bf8 <rcl_get_secure_root+0x78>
 8014bde:	2600      	movs	r6, #0
 8014be0:	6863      	ldr	r3, [r4, #4]
 8014be2:	6921      	ldr	r1, [r4, #16]
 8014be4:	4630      	mov	r0, r6
 8014be6:	4798      	blx	r3
 8014be8:	4640      	mov	r0, r8
 8014bea:	6863      	ldr	r3, [r4, #4]
 8014bec:	6921      	ldr	r1, [r4, #16]
 8014bee:	4798      	blx	r3
 8014bf0:	4628      	mov	r0, r5
 8014bf2:	b005      	add	sp, #20
 8014bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bf8:	9b03      	ldr	r3, [sp, #12]
 8014bfa:	781e      	ldrb	r6, [r3, #0]
 8014bfc:	b1f6      	cbz	r6, 8014c3c <rcl_get_secure_root+0xbc>
 8014bfe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014c02:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014c06:	4618      	mov	r0, r3
 8014c08:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014c0c:	f7f9 fbb6 	bl	800e37c <rcutils_strdup>
 8014c10:	4606      	mov	r6, r0
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d0e3      	beq.n	8014bde <rcl_get_secure_root+0x5e>
 8014c16:	4622      	mov	r2, r4
 8014c18:	4641      	mov	r1, r8
 8014c1a:	f7ff ff6f 	bl	8014afc <exact_match_lookup>
 8014c1e:	4605      	mov	r5, r0
 8014c20:	2d00      	cmp	r5, #0
 8014c22:	d0dd      	beq.n	8014be0 <rcl_get_secure_root+0x60>
 8014c24:	4628      	mov	r0, r5
 8014c26:	f002 f973 	bl	8016f10 <rcutils_is_directory>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	d1d7      	bne.n	8014be0 <rcl_get_secure_root+0x60>
 8014c30:	4628      	mov	r0, r5
 8014c32:	6921      	ldr	r1, [r4, #16]
 8014c34:	461d      	mov	r5, r3
 8014c36:	6863      	ldr	r3, [r4, #4]
 8014c38:	4798      	blx	r3
 8014c3a:	e7d1      	b.n	8014be0 <rcl_get_secure_root+0x60>
 8014c3c:	4622      	mov	r2, r4
 8014c3e:	4638      	mov	r0, r7
 8014c40:	4641      	mov	r1, r8
 8014c42:	f7ff ff5b 	bl	8014afc <exact_match_lookup>
 8014c46:	4605      	mov	r5, r0
 8014c48:	e7ea      	b.n	8014c20 <rcl_get_secure_root+0xa0>
 8014c4a:	bf00      	nop
 8014c4c:	0801b124 	.word	0x0801b124
 8014c50:	0801b13c 	.word	0x0801b13c

08014c54 <rcl_get_security_options_from_environment>:
 8014c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c58:	b082      	sub	sp, #8
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	4606      	mov	r6, r0
 8014c5e:	460f      	mov	r7, r1
 8014c60:	4820      	ldr	r0, [pc, #128]	@ (8014ce4 <rcl_get_security_options_from_environment+0x90>)
 8014c62:	9301      	str	r3, [sp, #4]
 8014c64:	a901      	add	r1, sp, #4
 8014c66:	4690      	mov	r8, r2
 8014c68:	f7f9 fa22 	bl	800e0b0 <rcutils_get_env>
 8014c6c:	b120      	cbz	r0, 8014c78 <rcl_get_security_options_from_environment+0x24>
 8014c6e:	2501      	movs	r5, #1
 8014c70:	4628      	mov	r0, r5
 8014c72:	b002      	add	sp, #8
 8014c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c78:	491b      	ldr	r1, [pc, #108]	@ (8014ce8 <rcl_get_security_options_from_environment+0x94>)
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	9801      	ldr	r0, [sp, #4]
 8014c7e:	f7eb facf 	bl	8000220 <strcmp>
 8014c82:	4605      	mov	r5, r0
 8014c84:	b9e8      	cbnz	r0, 8014cc2 <rcl_get_security_options_from_environment+0x6e>
 8014c86:	9001      	str	r0, [sp, #4]
 8014c88:	f1b8 0f00 	cmp.w	r8, #0
 8014c8c:	d020      	beq.n	8014cd0 <rcl_get_security_options_from_environment+0x7c>
 8014c8e:	4817      	ldr	r0, [pc, #92]	@ (8014cec <rcl_get_security_options_from_environment+0x98>)
 8014c90:	a901      	add	r1, sp, #4
 8014c92:	f7f9 fa0d 	bl	800e0b0 <rcutils_get_env>
 8014c96:	2800      	cmp	r0, #0
 8014c98:	d1e9      	bne.n	8014c6e <rcl_get_security_options_from_environment+0x1a>
 8014c9a:	4915      	ldr	r1, [pc, #84]	@ (8014cf0 <rcl_get_security_options_from_environment+0x9c>)
 8014c9c:	9801      	ldr	r0, [sp, #4]
 8014c9e:	f7eb fabf 	bl	8000220 <strcmp>
 8014ca2:	fab0 f080 	clz	r0, r0
 8014ca6:	0940      	lsrs	r0, r0, #5
 8014ca8:	f888 0000 	strb.w	r0, [r8]
 8014cac:	4639      	mov	r1, r7
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f7ff ff66 	bl	8014b80 <rcl_get_secure_root>
 8014cb4:	b170      	cbz	r0, 8014cd4 <rcl_get_security_options_from_environment+0x80>
 8014cb6:	f8c8 0004 	str.w	r0, [r8, #4]
 8014cba:	4628      	mov	r0, r5
 8014cbc:	b002      	add	sp, #8
 8014cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cc2:	4625      	mov	r5, r4
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f888 4000 	strb.w	r4, [r8]
 8014cca:	b002      	add	sp, #8
 8014ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd0:	250b      	movs	r5, #11
 8014cd2:	e7cd      	b.n	8014c70 <rcl_get_security_options_from_environment+0x1c>
 8014cd4:	f898 5000 	ldrb.w	r5, [r8]
 8014cd8:	f1a5 0501 	sub.w	r5, r5, #1
 8014cdc:	fab5 f585 	clz	r5, r5
 8014ce0:	096d      	lsrs	r5, r5, #5
 8014ce2:	e7c5      	b.n	8014c70 <rcl_get_security_options_from_environment+0x1c>
 8014ce4:	0801b0dc 	.word	0x0801b0dc
 8014ce8:	0801b0f0 	.word	0x0801b0f0
 8014cec:	0801b0f8 	.word	0x0801b0f8
 8014cf0:	0801b110 	.word	0x0801b110

08014cf4 <rcl_service_get_rmw_handle>:
 8014cf4:	b118      	cbz	r0, 8014cfe <rcl_service_get_rmw_handle+0xa>
 8014cf6:	6800      	ldr	r0, [r0, #0]
 8014cf8:	b108      	cbz	r0, 8014cfe <rcl_service_get_rmw_handle+0xa>
 8014cfa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014cfe:	4770      	bx	lr

08014d00 <rcl_take_request>:
 8014d00:	b570      	push	{r4, r5, r6, lr}
 8014d02:	468e      	mov	lr, r1
 8014d04:	460c      	mov	r4, r1
 8014d06:	4616      	mov	r6, r2
 8014d08:	4605      	mov	r5, r0
 8014d0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d0e:	b08c      	sub	sp, #48	@ 0x30
 8014d10:	f10d 0c18 	add.w	ip, sp, #24
 8014d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014d1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014d20:	b30d      	cbz	r5, 8014d66 <rcl_take_request+0x66>
 8014d22:	682b      	ldr	r3, [r5, #0]
 8014d24:	b1fb      	cbz	r3, 8014d66 <rcl_take_request+0x66>
 8014d26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014d2a:	b1e0      	cbz	r0, 8014d66 <rcl_take_request+0x66>
 8014d2c:	b336      	cbz	r6, 8014d7c <rcl_take_request+0x7c>
 8014d2e:	2300      	movs	r3, #0
 8014d30:	f88d 3007 	strb.w	r3, [sp, #7]
 8014d34:	4632      	mov	r2, r6
 8014d36:	f10d 0307 	add.w	r3, sp, #7
 8014d3a:	a902      	add	r1, sp, #8
 8014d3c:	f7fa fce8 	bl	800f710 <rmw_take_request>
 8014d40:	4605      	mov	r5, r0
 8014d42:	b198      	cbz	r0, 8014d6c <rcl_take_request+0x6c>
 8014d44:	280a      	cmp	r0, #10
 8014d46:	bf18      	it	ne
 8014d48:	2501      	movne	r5, #1
 8014d4a:	f10d 0e18 	add.w	lr, sp, #24
 8014d4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d52:	46a4      	mov	ip, r4
 8014d54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014d5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014d60:	4628      	mov	r0, r5
 8014d62:	b00c      	add	sp, #48	@ 0x30
 8014d64:	bd70      	pop	{r4, r5, r6, pc}
 8014d66:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014d6a:	e7ee      	b.n	8014d4a <rcl_take_request+0x4a>
 8014d6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014d70:	f240 2359 	movw	r3, #601	@ 0x259
 8014d74:	2a00      	cmp	r2, #0
 8014d76:	bf08      	it	eq
 8014d78:	461d      	moveq	r5, r3
 8014d7a:	e7e6      	b.n	8014d4a <rcl_take_request+0x4a>
 8014d7c:	250b      	movs	r5, #11
 8014d7e:	e7e4      	b.n	8014d4a <rcl_take_request+0x4a>

08014d80 <rcl_send_response>:
 8014d80:	b170      	cbz	r0, 8014da0 <rcl_send_response+0x20>
 8014d82:	6800      	ldr	r0, [r0, #0]
 8014d84:	b160      	cbz	r0, 8014da0 <rcl_send_response+0x20>
 8014d86:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014d8a:	b148      	cbz	r0, 8014da0 <rcl_send_response+0x20>
 8014d8c:	b159      	cbz	r1, 8014da6 <rcl_send_response+0x26>
 8014d8e:	b510      	push	{r4, lr}
 8014d90:	b15a      	cbz	r2, 8014daa <rcl_send_response+0x2a>
 8014d92:	f7fa fd1b 	bl	800f7cc <rmw_send_response>
 8014d96:	b110      	cbz	r0, 8014d9e <rcl_send_response+0x1e>
 8014d98:	2802      	cmp	r0, #2
 8014d9a:	bf18      	it	ne
 8014d9c:	2001      	movne	r0, #1
 8014d9e:	bd10      	pop	{r4, pc}
 8014da0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014da4:	4770      	bx	lr
 8014da6:	200b      	movs	r0, #11
 8014da8:	4770      	bx	lr
 8014daa:	200b      	movs	r0, #11
 8014dac:	bd10      	pop	{r4, pc}
 8014dae:	bf00      	nop

08014db0 <rcl_service_is_valid>:
 8014db0:	b130      	cbz	r0, 8014dc0 <rcl_service_is_valid+0x10>
 8014db2:	6800      	ldr	r0, [r0, #0]
 8014db4:	b120      	cbz	r0, 8014dc0 <rcl_service_is_valid+0x10>
 8014db6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014dba:	3800      	subs	r0, #0
 8014dbc:	bf18      	it	ne
 8014dbe:	2001      	movne	r0, #1
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop

08014dc4 <rcl_take>:
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	d04a      	beq.n	8014e5e <rcl_take+0x9a>
 8014dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dcc:	4604      	mov	r4, r0
 8014dce:	6800      	ldr	r0, [r0, #0]
 8014dd0:	b0a4      	sub	sp, #144	@ 0x90
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d03b      	beq.n	8014e4e <rcl_take+0x8a>
 8014dd6:	461f      	mov	r7, r3
 8014dd8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d036      	beq.n	8014e4e <rcl_take+0x8a>
 8014de0:	460e      	mov	r6, r1
 8014de2:	2900      	cmp	r1, #0
 8014de4:	d039      	beq.n	8014e5a <rcl_take+0x96>
 8014de6:	4615      	mov	r5, r2
 8014de8:	2a00      	cmp	r2, #0
 8014dea:	d03c      	beq.n	8014e66 <rcl_take+0xa2>
 8014dec:	a802      	add	r0, sp, #8
 8014dee:	f002 f933 	bl	8017058 <rmw_get_zero_initialized_message_info>
 8014df2:	f10d 0c08 	add.w	ip, sp, #8
 8014df6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014dfa:	46ae      	mov	lr, r5
 8014dfc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e10:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014e14:	f04f 0800 	mov.w	r8, #0
 8014e18:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014e1c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014e20:	6822      	ldr	r2, [r4, #0]
 8014e22:	462b      	mov	r3, r5
 8014e24:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014e28:	9700      	str	r7, [sp, #0]
 8014e2a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8014e2e:	4631      	mov	r1, r6
 8014e30:	f002 fac0 	bl	80173b4 <rmw_take_with_info>
 8014e34:	4603      	mov	r3, r0
 8014e36:	b9c0      	cbnz	r0, 8014e6a <rcl_take+0xa6>
 8014e38:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014e3c:	f240 1291 	movw	r2, #401	@ 0x191
 8014e40:	2900      	cmp	r1, #0
 8014e42:	bf08      	it	eq
 8014e44:	4613      	moveq	r3, r2
 8014e46:	4618      	mov	r0, r3
 8014e48:	b024      	add	sp, #144	@ 0x90
 8014e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e4e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014e52:	4618      	mov	r0, r3
 8014e54:	b024      	add	sp, #144	@ 0x90
 8014e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e5a:	230b      	movs	r3, #11
 8014e5c:	e7f3      	b.n	8014e46 <rcl_take+0x82>
 8014e5e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014e62:	4618      	mov	r0, r3
 8014e64:	4770      	bx	lr
 8014e66:	ad14      	add	r5, sp, #80	@ 0x50
 8014e68:	e7c0      	b.n	8014dec <rcl_take+0x28>
 8014e6a:	f7ff fa2b 	bl	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	e7e9      	b.n	8014e46 <rcl_take+0x82>
 8014e72:	bf00      	nop

08014e74 <rcl_subscription_get_rmw_handle>:
 8014e74:	b118      	cbz	r0, 8014e7e <rcl_subscription_get_rmw_handle+0xa>
 8014e76:	6800      	ldr	r0, [r0, #0]
 8014e78:	b108      	cbz	r0, 8014e7e <rcl_subscription_get_rmw_handle+0xa>
 8014e7a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014e7e:	4770      	bx	lr

08014e80 <rcl_subscription_is_valid>:
 8014e80:	b130      	cbz	r0, 8014e90 <rcl_subscription_is_valid+0x10>
 8014e82:	6800      	ldr	r0, [r0, #0]
 8014e84:	b120      	cbz	r0, 8014e90 <rcl_subscription_is_valid+0x10>
 8014e86:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014e8a:	3800      	subs	r0, #0
 8014e8c:	bf18      	it	ne
 8014e8e:	2001      	movne	r0, #1
 8014e90:	4770      	bx	lr
 8014e92:	bf00      	nop

08014e94 <rcl_get_system_time>:
 8014e94:	4608      	mov	r0, r1
 8014e96:	f7f9 bbdb 	b.w	800e650 <rcutils_system_time_now>
 8014e9a:	bf00      	nop

08014e9c <rcl_get_steady_time>:
 8014e9c:	4608      	mov	r0, r1
 8014e9e:	f7f9 bbff 	b.w	800e6a0 <rcutils_steady_time_now>
 8014ea2:	bf00      	nop

08014ea4 <rcl_get_ros_time>:
 8014ea4:	7a03      	ldrb	r3, [r0, #8]
 8014ea6:	b510      	push	{r4, lr}
 8014ea8:	460c      	mov	r4, r1
 8014eaa:	b133      	cbz	r3, 8014eba <rcl_get_ros_time+0x16>
 8014eac:	2105      	movs	r1, #5
 8014eae:	f7f9 f85b 	bl	800df68 <__atomic_load_8>
 8014eb2:	e9c4 0100 	strd	r0, r1, [r4]
 8014eb6:	2000      	movs	r0, #0
 8014eb8:	bd10      	pop	{r4, pc}
 8014eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ebe:	4608      	mov	r0, r1
 8014ec0:	f7f9 bbc6 	b.w	800e650 <rcutils_system_time_now>

08014ec4 <rcl_clock_init>:
 8014ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	4610      	mov	r0, r2
 8014eca:	4614      	mov	r4, r2
 8014ecc:	460e      	mov	r6, r1
 8014ece:	f7f9 f83d 	bl	800df4c <rcutils_allocator_is_valid>
 8014ed2:	b128      	cbz	r0, 8014ee0 <rcl_clock_init+0x1c>
 8014ed4:	2d03      	cmp	r5, #3
 8014ed6:	d803      	bhi.n	8014ee0 <rcl_clock_init+0x1c>
 8014ed8:	e8df f005 	tbb	[pc, r5]
 8014edc:	06532e1d 	.word	0x06532e1d
 8014ee0:	f04f 0c0b 	mov.w	ip, #11
 8014ee4:	4660      	mov	r0, ip
 8014ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ee8:	2e00      	cmp	r6, #0
 8014eea:	d0f9      	beq.n	8014ee0 <rcl_clock_init+0x1c>
 8014eec:	2c00      	cmp	r4, #0
 8014eee:	d0f7      	beq.n	8014ee0 <rcl_clock_init+0x1c>
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014ef6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8014fac <rcl_clock_init+0xe8>
 8014efa:	6133      	str	r3, [r6, #16]
 8014efc:	f106 0514 	add.w	r5, r6, #20
 8014f00:	469c      	mov	ip, r3
 8014f02:	2703      	movs	r7, #3
 8014f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f08:	6823      	ldr	r3, [r4, #0]
 8014f0a:	602b      	str	r3, [r5, #0]
 8014f0c:	7037      	strb	r7, [r6, #0]
 8014f0e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014f12:	4660      	mov	r0, ip
 8014f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f16:	2e00      	cmp	r6, #0
 8014f18:	d0e2      	beq.n	8014ee0 <rcl_clock_init+0x1c>
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	7033      	strb	r3, [r6, #0]
 8014f1e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014f22:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014f26:	469c      	mov	ip, r3
 8014f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f2a:	f106 0514 	add.w	r5, r6, #20
 8014f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	602b      	str	r3, [r5, #0]
 8014f34:	4660      	mov	r0, ip
 8014f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f38:	2e00      	cmp	r6, #0
 8014f3a:	d0d1      	beq.n	8014ee0 <rcl_clock_init+0x1c>
 8014f3c:	2c00      	cmp	r4, #0
 8014f3e:	d0cf      	beq.n	8014ee0 <rcl_clock_init+0x1c>
 8014f40:	2700      	movs	r7, #0
 8014f42:	7037      	strb	r7, [r6, #0]
 8014f44:	46a4      	mov	ip, r4
 8014f46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f4a:	f106 0514 	add.w	r5, r6, #20
 8014f4e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014f52:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f58:	f8dc 3000 	ldr.w	r3, [ip]
 8014f5c:	602b      	str	r3, [r5, #0]
 8014f5e:	6921      	ldr	r1, [r4, #16]
 8014f60:	6823      	ldr	r3, [r4, #0]
 8014f62:	2010      	movs	r0, #16
 8014f64:	4798      	blx	r3
 8014f66:	6130      	str	r0, [r6, #16]
 8014f68:	b1d0      	cbz	r0, 8014fa0 <rcl_clock_init+0xdc>
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	e9c0 2300 	strd	r2, r3, [r0]
 8014f72:	2301      	movs	r3, #1
 8014f74:	7207      	strb	r7, [r0, #8]
 8014f76:	4a0c      	ldr	r2, [pc, #48]	@ (8014fa8 <rcl_clock_init+0xe4>)
 8014f78:	7033      	strb	r3, [r6, #0]
 8014f7a:	46bc      	mov	ip, r7
 8014f7c:	60f2      	str	r2, [r6, #12]
 8014f7e:	4660      	mov	r0, ip
 8014f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f82:	2e00      	cmp	r6, #0
 8014f84:	d0ac      	beq.n	8014ee0 <rcl_clock_init+0x1c>
 8014f86:	2c00      	cmp	r4, #0
 8014f88:	d0aa      	beq.n	8014ee0 <rcl_clock_init+0x1c>
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014f90:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014fb0 <rcl_clock_init+0xec>
 8014f94:	6133      	str	r3, [r6, #16]
 8014f96:	f106 0514 	add.w	r5, r6, #20
 8014f9a:	469c      	mov	ip, r3
 8014f9c:	2702      	movs	r7, #2
 8014f9e:	e7b1      	b.n	8014f04 <rcl_clock_init+0x40>
 8014fa0:	f04f 0c0a 	mov.w	ip, #10
 8014fa4:	e79e      	b.n	8014ee4 <rcl_clock_init+0x20>
 8014fa6:	bf00      	nop
 8014fa8:	08014ea5 	.word	0x08014ea5
 8014fac:	08014e9d 	.word	0x08014e9d
 8014fb0:	08014e95 	.word	0x08014e95

08014fb4 <rcl_clock_get_now>:
 8014fb4:	b140      	cbz	r0, 8014fc8 <rcl_clock_get_now+0x14>
 8014fb6:	b139      	cbz	r1, 8014fc8 <rcl_clock_get_now+0x14>
 8014fb8:	7803      	ldrb	r3, [r0, #0]
 8014fba:	b11b      	cbz	r3, 8014fc4 <rcl_clock_get_now+0x10>
 8014fbc:	68c3      	ldr	r3, [r0, #12]
 8014fbe:	b10b      	cbz	r3, 8014fc4 <rcl_clock_get_now+0x10>
 8014fc0:	6900      	ldr	r0, [r0, #16]
 8014fc2:	4718      	bx	r3
 8014fc4:	2001      	movs	r0, #1
 8014fc6:	4770      	bx	lr
 8014fc8:	200b      	movs	r0, #11
 8014fca:	4770      	bx	lr

08014fcc <rcl_clock_add_jump_callback>:
 8014fcc:	b082      	sub	sp, #8
 8014fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd2:	a906      	add	r1, sp, #24
 8014fd4:	e881 000c 	stmia.w	r1, {r2, r3}
 8014fd8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014fdc:	b320      	cbz	r0, 8015028 <rcl_clock_add_jump_callback+0x5c>
 8014fde:	4604      	mov	r4, r0
 8014fe0:	3014      	adds	r0, #20
 8014fe2:	f7f8 ffb3 	bl	800df4c <rcutils_allocator_is_valid>
 8014fe6:	b1f8      	cbz	r0, 8015028 <rcl_clock_add_jump_callback+0x5c>
 8014fe8:	b1f6      	cbz	r6, 8015028 <rcl_clock_add_jump_callback+0x5c>
 8014fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	db1b      	blt.n	8015028 <rcl_clock_add_jump_callback+0x5c>
 8014ff0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014ff4:	2a01      	cmp	r2, #1
 8014ff6:	f173 0300 	sbcs.w	r3, r3, #0
 8014ffa:	da15      	bge.n	8015028 <rcl_clock_add_jump_callback+0x5c>
 8014ffc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015000:	2f00      	cmp	r7, #0
 8015002:	d042      	beq.n	801508a <rcl_clock_add_jump_callback+0xbe>
 8015004:	2300      	movs	r3, #0
 8015006:	4602      	mov	r2, r0
 8015008:	e003      	b.n	8015012 <rcl_clock_add_jump_callback+0x46>
 801500a:	42bb      	cmp	r3, r7
 801500c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015010:	d011      	beq.n	8015036 <rcl_clock_add_jump_callback+0x6a>
 8015012:	6811      	ldr	r1, [r2, #0]
 8015014:	42b1      	cmp	r1, r6
 8015016:	f103 0301 	add.w	r3, r3, #1
 801501a:	d1f6      	bne.n	801500a <rcl_clock_add_jump_callback+0x3e>
 801501c:	6a11      	ldr	r1, [r2, #32]
 801501e:	42a9      	cmp	r1, r5
 8015020:	d1f3      	bne.n	801500a <rcl_clock_add_jump_callback+0x3e>
 8015022:	f04f 0e01 	mov.w	lr, #1
 8015026:	e001      	b.n	801502c <rcl_clock_add_jump_callback+0x60>
 8015028:	f04f 0e0b 	mov.w	lr, #11
 801502c:	4670      	mov	r0, lr
 801502e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015032:	b002      	add	sp, #8
 8015034:	4770      	bx	lr
 8015036:	3301      	adds	r3, #1
 8015038:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801503c:	00d9      	lsls	r1, r3, #3
 801503e:	69e3      	ldr	r3, [r4, #28]
 8015040:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015042:	4798      	blx	r3
 8015044:	b1f0      	cbz	r0, 8015084 <rcl_clock_add_jump_callback+0xb8>
 8015046:	68a3      	ldr	r3, [r4, #8]
 8015048:	6060      	str	r0, [r4, #4]
 801504a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801504e:	f10d 0c18 	add.w	ip, sp, #24
 8015052:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8015056:	f103 0801 	add.w	r8, r3, #1
 801505a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801505e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015062:	f106 0708 	add.w	r7, r6, #8
 8015066:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015068:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801506c:	f04f 0e00 	mov.w	lr, #0
 8015070:	e887 0003 	stmia.w	r7, {r0, r1}
 8015074:	6235      	str	r5, [r6, #32]
 8015076:	4670      	mov	r0, lr
 8015078:	f8c4 8008 	str.w	r8, [r4, #8]
 801507c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015080:	b002      	add	sp, #8
 8015082:	4770      	bx	lr
 8015084:	f04f 0e0a 	mov.w	lr, #10
 8015088:	e7d0      	b.n	801502c <rcl_clock_add_jump_callback+0x60>
 801508a:	2128      	movs	r1, #40	@ 0x28
 801508c:	e7d7      	b.n	801503e <rcl_clock_add_jump_callback+0x72>
 801508e:	bf00      	nop

08015090 <rcl_clock_remove_jump_callback>:
 8015090:	2800      	cmp	r0, #0
 8015092:	d057      	beq.n	8015144 <rcl_clock_remove_jump_callback+0xb4>
 8015094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015098:	4605      	mov	r5, r0
 801509a:	3014      	adds	r0, #20
 801509c:	4688      	mov	r8, r1
 801509e:	4692      	mov	sl, r2
 80150a0:	f7f8 ff54 	bl	800df4c <rcutils_allocator_is_valid>
 80150a4:	2800      	cmp	r0, #0
 80150a6:	d03b      	beq.n	8015120 <rcl_clock_remove_jump_callback+0x90>
 80150a8:	f1b8 0f00 	cmp.w	r8, #0
 80150ac:	d038      	beq.n	8015120 <rcl_clock_remove_jump_callback+0x90>
 80150ae:	68ae      	ldr	r6, [r5, #8]
 80150b0:	b166      	cbz	r6, 80150cc <rcl_clock_remove_jump_callback+0x3c>
 80150b2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80150b6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80150ba:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80150be:	464c      	mov	r4, r9
 80150c0:	6823      	ldr	r3, [r4, #0]
 80150c2:	4543      	cmp	r3, r8
 80150c4:	d005      	beq.n	80150d2 <rcl_clock_remove_jump_callback+0x42>
 80150c6:	3428      	adds	r4, #40	@ 0x28
 80150c8:	42a7      	cmp	r7, r4
 80150ca:	d1f9      	bne.n	80150c0 <rcl_clock_remove_jump_callback+0x30>
 80150cc:	2001      	movs	r0, #1
 80150ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150d2:	6a23      	ldr	r3, [r4, #32]
 80150d4:	3428      	adds	r4, #40	@ 0x28
 80150d6:	42bc      	cmp	r4, r7
 80150d8:	d02d      	beq.n	8015136 <rcl_clock_remove_jump_callback+0xa6>
 80150da:	4553      	cmp	r3, sl
 80150dc:	d1f0      	bne.n	80150c0 <rcl_clock_remove_jump_callback+0x30>
 80150de:	46a6      	mov	lr, r4
 80150e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80150e4:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80150e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80150ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80150f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80150f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80150f8:	3428      	adds	r4, #40	@ 0x28
 80150fa:	42a7      	cmp	r7, r4
 80150fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015100:	d1ed      	bne.n	80150de <rcl_clock_remove_jump_callback+0x4e>
 8015102:	3e01      	subs	r6, #1
 8015104:	60ae      	str	r6, [r5, #8]
 8015106:	b176      	cbz	r6, 8015126 <rcl_clock_remove_jump_callback+0x96>
 8015108:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801510c:	69eb      	ldr	r3, [r5, #28]
 801510e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015110:	00f1      	lsls	r1, r6, #3
 8015112:	4648      	mov	r0, r9
 8015114:	4798      	blx	r3
 8015116:	b1b8      	cbz	r0, 8015148 <rcl_clock_remove_jump_callback+0xb8>
 8015118:	6068      	str	r0, [r5, #4]
 801511a:	2000      	movs	r0, #0
 801511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015120:	200b      	movs	r0, #11
 8015122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015126:	4648      	mov	r0, r9
 8015128:	69ab      	ldr	r3, [r5, #24]
 801512a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801512c:	4798      	blx	r3
 801512e:	606e      	str	r6, [r5, #4]
 8015130:	4630      	mov	r0, r6
 8015132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015136:	4553      	cmp	r3, sl
 8015138:	d1c8      	bne.n	80150cc <rcl_clock_remove_jump_callback+0x3c>
 801513a:	3e01      	subs	r6, #1
 801513c:	60ae      	str	r6, [r5, #8]
 801513e:	2e00      	cmp	r6, #0
 8015140:	d1e2      	bne.n	8015108 <rcl_clock_remove_jump_callback+0x78>
 8015142:	e7f0      	b.n	8015126 <rcl_clock_remove_jump_callback+0x96>
 8015144:	200b      	movs	r0, #11
 8015146:	4770      	bx	lr
 8015148:	200a      	movs	r0, #10
 801514a:	e7ea      	b.n	8015122 <rcl_clock_remove_jump_callback+0x92>

0801514c <_rcl_timer_time_jump>:
 801514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015150:	4605      	mov	r5, r0
 8015152:	b084      	sub	sp, #16
 8015154:	4614      	mov	r4, r2
 8015156:	b131      	cbz	r1, 8015166 <_rcl_timer_time_jump+0x1a>
 8015158:	7803      	ldrb	r3, [r0, #0]
 801515a:	3b02      	subs	r3, #2
 801515c:	2b01      	cmp	r3, #1
 801515e:	d93f      	bls.n	80151e0 <_rcl_timer_time_jump+0x94>
 8015160:	b004      	add	sp, #16
 8015162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015166:	6813      	ldr	r3, [r2, #0]
 8015168:	a902      	add	r1, sp, #8
 801516a:	6818      	ldr	r0, [r3, #0]
 801516c:	f7ff ff22 	bl	8014fb4 <rcl_clock_get_now>
 8015170:	2800      	cmp	r0, #0
 8015172:	d1f5      	bne.n	8015160 <_rcl_timer_time_jump+0x14>
 8015174:	6820      	ldr	r0, [r4, #0]
 8015176:	2105      	movs	r1, #5
 8015178:	3020      	adds	r0, #32
 801517a:	f7f8 fef5 	bl	800df68 <__atomic_load_8>
 801517e:	6823      	ldr	r3, [r4, #0]
 8015180:	4681      	mov	r9, r0
 8015182:	4688      	mov	r8, r1
 8015184:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8015188:	2105      	movs	r1, #5
 801518a:	f7f8 feed 	bl	800df68 <__atomic_load_8>
 801518e:	4607      	mov	r7, r0
 8015190:	6820      	ldr	r0, [r4, #0]
 8015192:	460e      	mov	r6, r1
 8015194:	3018      	adds	r0, #24
 8015196:	2105      	movs	r1, #5
 8015198:	f7f8 fee6 	bl	800df68 <__atomic_load_8>
 801519c:	782b      	ldrb	r3, [r5, #0]
 801519e:	9a02      	ldr	r2, [sp, #8]
 80151a0:	3b02      	subs	r3, #2
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	460d      	mov	r5, r1
 80151a6:	9b03      	ldr	r3, [sp, #12]
 80151a8:	4682      	mov	sl, r0
 80151aa:	d937      	bls.n	801521c <_rcl_timer_time_jump+0xd0>
 80151ac:	42ba      	cmp	r2, r7
 80151ae:	eb73 0106 	sbcs.w	r1, r3, r6
 80151b2:	da5f      	bge.n	8015274 <_rcl_timer_time_jump+0x128>
 80151b4:	454a      	cmp	r2, r9
 80151b6:	eb73 0108 	sbcs.w	r1, r3, r8
 80151ba:	dad1      	bge.n	8015160 <_rcl_timer_time_jump+0x14>
 80151bc:	6820      	ldr	r0, [r4, #0]
 80151be:	eb1a 0202 	adds.w	r2, sl, r2
 80151c2:	eb43 0305 	adc.w	r3, r3, r5
 80151c6:	2505      	movs	r5, #5
 80151c8:	3028      	adds	r0, #40	@ 0x28
 80151ca:	9500      	str	r5, [sp, #0]
 80151cc:	f7f8 ff02 	bl	800dfd4 <__atomic_store_8>
 80151d0:	6820      	ldr	r0, [r4, #0]
 80151d2:	9500      	str	r5, [sp, #0]
 80151d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151d8:	3020      	adds	r0, #32
 80151da:	f7f8 fefb 	bl	800dfd4 <__atomic_store_8>
 80151de:	e7bf      	b.n	8015160 <_rcl_timer_time_jump+0x14>
 80151e0:	6813      	ldr	r3, [r2, #0]
 80151e2:	a902      	add	r1, sp, #8
 80151e4:	6818      	ldr	r0, [r3, #0]
 80151e6:	f7ff fee5 	bl	8014fb4 <rcl_clock_get_now>
 80151ea:	2800      	cmp	r0, #0
 80151ec:	d1b8      	bne.n	8015160 <_rcl_timer_time_jump+0x14>
 80151ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151f2:	4313      	orrs	r3, r2
 80151f4:	d0b4      	beq.n	8015160 <_rcl_timer_time_jump+0x14>
 80151f6:	6820      	ldr	r0, [r4, #0]
 80151f8:	2105      	movs	r1, #5
 80151fa:	3028      	adds	r0, #40	@ 0x28
 80151fc:	f7f8 feb4 	bl	800df68 <__atomic_load_8>
 8015200:	9d02      	ldr	r5, [sp, #8]
 8015202:	9b03      	ldr	r3, [sp, #12]
 8015204:	4602      	mov	r2, r0
 8015206:	6820      	ldr	r0, [r4, #0]
 8015208:	1b52      	subs	r2, r2, r5
 801520a:	f04f 0405 	mov.w	r4, #5
 801520e:	9400      	str	r4, [sp, #0]
 8015210:	eb61 0303 	sbc.w	r3, r1, r3
 8015214:	3030      	adds	r0, #48	@ 0x30
 8015216:	f7f8 fedd 	bl	800dfd4 <__atomic_store_8>
 801521a:	e7a1      	b.n	8015160 <_rcl_timer_time_jump+0x14>
 801521c:	4313      	orrs	r3, r2
 801521e:	d09f      	beq.n	8015160 <_rcl_timer_time_jump+0x14>
 8015220:	6820      	ldr	r0, [r4, #0]
 8015222:	f04f 0805 	mov.w	r8, #5
 8015226:	2300      	movs	r3, #0
 8015228:	f8cd 8000 	str.w	r8, [sp]
 801522c:	3030      	adds	r0, #48	@ 0x30
 801522e:	2200      	movs	r2, #0
 8015230:	f7f8 ff06 	bl	800e040 <__atomic_exchange_8>
 8015234:	ea51 0300 	orrs.w	r3, r1, r0
 8015238:	4606      	mov	r6, r0
 801523a:	460f      	mov	r7, r1
 801523c:	d090      	beq.n	8015160 <_rcl_timer_time_jump+0x14>
 801523e:	9a02      	ldr	r2, [sp, #8]
 8015240:	9b03      	ldr	r3, [sp, #12]
 8015242:	f8cd 8000 	str.w	r8, [sp]
 8015246:	1a12      	subs	r2, r2, r0
 8015248:	6820      	ldr	r0, [r4, #0]
 801524a:	eb63 0301 	sbc.w	r3, r3, r1
 801524e:	eb12 020a 	adds.w	r2, r2, sl
 8015252:	eb43 0305 	adc.w	r3, r3, r5
 8015256:	3028      	adds	r0, #40	@ 0x28
 8015258:	f7f8 febc 	bl	800dfd4 <__atomic_store_8>
 801525c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015260:	f8cd 8000 	str.w	r8, [sp]
 8015264:	6820      	ldr	r0, [r4, #0]
 8015266:	1b92      	subs	r2, r2, r6
 8015268:	eb63 0307 	sbc.w	r3, r3, r7
 801526c:	3020      	adds	r0, #32
 801526e:	f7f8 feb1 	bl	800dfd4 <__atomic_store_8>
 8015272:	e775      	b.n	8015160 <_rcl_timer_time_jump+0x14>
 8015274:	6820      	ldr	r0, [r4, #0]
 8015276:	3008      	adds	r0, #8
 8015278:	f7ff fb04 	bl	8014884 <rcl_trigger_guard_condition>
 801527c:	e770      	b.n	8015160 <_rcl_timer_time_jump+0x14>
 801527e:	bf00      	nop

08015280 <rcl_get_zero_initialized_timer>:
 8015280:	4b01      	ldr	r3, [pc, #4]	@ (8015288 <rcl_get_zero_initialized_timer+0x8>)
 8015282:	6818      	ldr	r0, [r3, #0]
 8015284:	4770      	bx	lr
 8015286:	bf00      	nop
 8015288:	0801b15c 	.word	0x0801b15c
 801528c:	00000000 	.word	0x00000000

08015290 <rcl_timer_init>:
 8015290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015294:	b0aa      	sub	sp, #168	@ 0xa8
 8015296:	4604      	mov	r4, r0
 8015298:	a835      	add	r0, sp, #212	@ 0xd4
 801529a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801529e:	460d      	mov	r5, r1
 80152a0:	4692      	mov	sl, r2
 80152a2:	f7f8 fe53 	bl	800df4c <rcutils_allocator_is_valid>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d064      	beq.n	8015374 <rcl_timer_init+0xe4>
 80152aa:	2c00      	cmp	r4, #0
 80152ac:	d062      	beq.n	8015374 <rcl_timer_init+0xe4>
 80152ae:	2d00      	cmp	r5, #0
 80152b0:	d060      	beq.n	8015374 <rcl_timer_init+0xe4>
 80152b2:	2f00      	cmp	r7, #0
 80152b4:	db5e      	blt.n	8015374 <rcl_timer_init+0xe4>
 80152b6:	6823      	ldr	r3, [r4, #0]
 80152b8:	b123      	cbz	r3, 80152c4 <rcl_timer_init+0x34>
 80152ba:	2664      	movs	r6, #100	@ 0x64
 80152bc:	4630      	mov	r0, r6
 80152be:	b02a      	add	sp, #168	@ 0xa8
 80152c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152c4:	a908      	add	r1, sp, #32
 80152c6:	4628      	mov	r0, r5
 80152c8:	f7ff fe74 	bl	8014fb4 <rcl_clock_get_now>
 80152cc:	4606      	mov	r6, r0
 80152ce:	2800      	cmp	r0, #0
 80152d0:	d1f4      	bne.n	80152bc <rcl_timer_init+0x2c>
 80152d2:	ae06      	add	r6, sp, #24
 80152d4:	4630      	mov	r0, r6
 80152d6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80152da:	f7ff f9db 	bl	8014694 <rcl_get_zero_initialized_guard_condition>
 80152de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80152e2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80152e6:	ae0b      	add	r6, sp, #44	@ 0x2c
 80152e8:	e889 0003 	stmia.w	r9, {r0, r1}
 80152ec:	4630      	mov	r0, r6
 80152ee:	f7ff faad 	bl	801484c <rcl_guard_condition_get_default_options>
 80152f2:	ab0d      	add	r3, sp, #52	@ 0x34
 80152f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80152fc:	4651      	mov	r1, sl
 80152fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015302:	4648      	mov	r0, r9
 8015304:	f7ff f9d0 	bl	80146a8 <rcl_guard_condition_init>
 8015308:	4606      	mov	r6, r0
 801530a:	2800      	cmp	r0, #0
 801530c:	d1d6      	bne.n	80152bc <rcl_timer_init+0x2c>
 801530e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	2b01      	cmp	r3, #1
 8015314:	d033      	beq.n	801537e <rcl_timer_init+0xee>
 8015316:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8015318:	911a      	str	r1, [sp, #104]	@ 0x68
 801531a:	4642      	mov	r2, r8
 801531c:	463b      	mov	r3, r7
 801531e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8015322:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015326:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80153d8 <rcl_timer_init+0x148>
 801532a:	eb12 0008 	adds.w	r0, r2, r8
 801532e:	eb47 0103 	adc.w	r1, r7, r3
 8015332:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8015336:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801533a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801533e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8015342:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015346:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801534a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801534e:	f8de 3000 	ldr.w	r3, [lr]
 8015352:	f8cc 3000 	str.w	r3, [ip]
 8015356:	f04f 0a00 	mov.w	sl, #0
 801535a:	4619      	mov	r1, r3
 801535c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8015360:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8015362:	2050      	movs	r0, #80	@ 0x50
 8015364:	4798      	blx	r3
 8015366:	6020      	str	r0, [r4, #0]
 8015368:	b358      	cbz	r0, 80153c2 <rcl_timer_init+0x132>
 801536a:	2250      	movs	r2, #80	@ 0x50
 801536c:	a916      	add	r1, sp, #88	@ 0x58
 801536e:	f003 feea 	bl	8019146 <memcpy>
 8015372:	e7a3      	b.n	80152bc <rcl_timer_init+0x2c>
 8015374:	260b      	movs	r6, #11
 8015376:	4630      	mov	r0, r6
 8015378:	b02a      	add	sp, #168	@ 0xa8
 801537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801537e:	2001      	movs	r0, #1
 8015380:	2100      	movs	r1, #0
 8015382:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8015386:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801538a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801538e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8015392:	4a13      	ldr	r2, [pc, #76]	@ (80153e0 <rcl_timer_init+0x150>)
 8015394:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8015398:	9405      	str	r4, [sp, #20]
 801539a:	9204      	str	r2, [sp, #16]
 801539c:	ab12      	add	r3, sp, #72	@ 0x48
 801539e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80153a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80153a4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80153a8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80153ac:	4628      	mov	r0, r5
 80153ae:	f7ff fe0d 	bl	8014fcc <rcl_clock_add_jump_callback>
 80153b2:	4682      	mov	sl, r0
 80153b4:	2800      	cmp	r0, #0
 80153b6:	d0ae      	beq.n	8015316 <rcl_timer_init+0x86>
 80153b8:	4648      	mov	r0, r9
 80153ba:	f7ff fa21 	bl	8014800 <rcl_guard_condition_fini>
 80153be:	4656      	mov	r6, sl
 80153c0:	e77c      	b.n	80152bc <rcl_timer_init+0x2c>
 80153c2:	4648      	mov	r0, r9
 80153c4:	f7ff fa1c 	bl	8014800 <rcl_guard_condition_fini>
 80153c8:	4905      	ldr	r1, [pc, #20]	@ (80153e0 <rcl_timer_init+0x150>)
 80153ca:	4622      	mov	r2, r4
 80153cc:	4628      	mov	r0, r5
 80153ce:	f7ff fe5f 	bl	8015090 <rcl_clock_remove_jump_callback>
 80153d2:	260a      	movs	r6, #10
 80153d4:	e772      	b.n	80152bc <rcl_timer_init+0x2c>
 80153d6:	bf00      	nop
	...
 80153e0:	0801514d 	.word	0x0801514d

080153e4 <rcl_timer_call>:
 80153e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e8:	b087      	sub	sp, #28
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d06d      	beq.n	80154ca <rcl_timer_call+0xe6>
 80153ee:	6803      	ldr	r3, [r0, #0]
 80153f0:	4604      	mov	r4, r0
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d063      	beq.n	80154be <rcl_timer_call+0xda>
 80153f6:	f3bf 8f5b 	dmb	ish
 80153fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80153fe:	f3bf 8f5b 	dmb	ish
 8015402:	2b00      	cmp	r3, #0
 8015404:	d150      	bne.n	80154a8 <rcl_timer_call+0xc4>
 8015406:	6803      	ldr	r3, [r0, #0]
 8015408:	a904      	add	r1, sp, #16
 801540a:	6818      	ldr	r0, [r3, #0]
 801540c:	f7ff fdd2 	bl	8014fb4 <rcl_clock_get_now>
 8015410:	4605      	mov	r5, r0
 8015412:	2800      	cmp	r0, #0
 8015414:	d14a      	bne.n	80154ac <rcl_timer_call+0xc8>
 8015416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801541a:	2b00      	cmp	r3, #0
 801541c:	db4a      	blt.n	80154b4 <rcl_timer_call+0xd0>
 801541e:	6820      	ldr	r0, [r4, #0]
 8015420:	f04f 0a05 	mov.w	sl, #5
 8015424:	f8cd a000 	str.w	sl, [sp]
 8015428:	3020      	adds	r0, #32
 801542a:	f7f8 fe09 	bl	800e040 <__atomic_exchange_8>
 801542e:	6823      	ldr	r3, [r4, #0]
 8015430:	f3bf 8f5b 	dmb	ish
 8015434:	4680      	mov	r8, r0
 8015436:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801543a:	f3bf 8f5b 	dmb	ish
 801543e:	6820      	ldr	r0, [r4, #0]
 8015440:	4689      	mov	r9, r1
 8015442:	3028      	adds	r0, #40	@ 0x28
 8015444:	4651      	mov	r1, sl
 8015446:	f7f8 fd8f 	bl	800df68 <__atomic_load_8>
 801544a:	4606      	mov	r6, r0
 801544c:	6820      	ldr	r0, [r4, #0]
 801544e:	460f      	mov	r7, r1
 8015450:	3018      	adds	r0, #24
 8015452:	4651      	mov	r1, sl
 8015454:	f7f8 fd88 	bl	800df68 <__atomic_load_8>
 8015458:	1836      	adds	r6, r6, r0
 801545a:	4602      	mov	r2, r0
 801545c:	4682      	mov	sl, r0
 801545e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8015462:	eb47 0701 	adc.w	r7, r7, r1
 8015466:	4286      	cmp	r6, r0
 8015468:	460b      	mov	r3, r1
 801546a:	eb77 010c 	sbcs.w	r1, r7, ip
 801546e:	da04      	bge.n	801547a <rcl_timer_call+0x96>
 8015470:	ea53 0102 	orrs.w	r1, r3, r2
 8015474:	d12e      	bne.n	80154d4 <rcl_timer_call+0xf0>
 8015476:	4606      	mov	r6, r0
 8015478:	4667      	mov	r7, ip
 801547a:	6820      	ldr	r0, [r4, #0]
 801547c:	2105      	movs	r1, #5
 801547e:	4632      	mov	r2, r6
 8015480:	463b      	mov	r3, r7
 8015482:	3028      	adds	r0, #40	@ 0x28
 8015484:	9100      	str	r1, [sp, #0]
 8015486:	f7f8 fda5 	bl	800dfd4 <__atomic_store_8>
 801548a:	f1bb 0f00 	cmp.w	fp, #0
 801548e:	d00d      	beq.n	80154ac <rcl_timer_call+0xc8>
 8015490:	9a04      	ldr	r2, [sp, #16]
 8015492:	9b05      	ldr	r3, [sp, #20]
 8015494:	ebb2 0208 	subs.w	r2, r2, r8
 8015498:	4620      	mov	r0, r4
 801549a:	eb63 0309 	sbc.w	r3, r3, r9
 801549e:	47d8      	blx	fp
 80154a0:	4628      	mov	r0, r5
 80154a2:	b007      	add	sp, #28
 80154a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154a8:	f240 3521 	movw	r5, #801	@ 0x321
 80154ac:	4628      	mov	r0, r5
 80154ae:	b007      	add	sp, #28
 80154b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b4:	2501      	movs	r5, #1
 80154b6:	4628      	mov	r0, r5
 80154b8:	b007      	add	sp, #28
 80154ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154be:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80154c2:	4628      	mov	r0, r5
 80154c4:	b007      	add	sp, #28
 80154c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ca:	250b      	movs	r5, #11
 80154cc:	4628      	mov	r0, r5
 80154ce:	b007      	add	sp, #28
 80154d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d4:	1b80      	subs	r0, r0, r6
 80154d6:	eb6c 0107 	sbc.w	r1, ip, r7
 80154da:	3801      	subs	r0, #1
 80154dc:	f161 0100 	sbc.w	r1, r1, #0
 80154e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80154e4:	f7eb f910 	bl	8000708 <__aeabi_ldivmod>
 80154e8:	9b02      	ldr	r3, [sp, #8]
 80154ea:	3001      	adds	r0, #1
 80154ec:	f141 0100 	adc.w	r1, r1, #0
 80154f0:	fb00 f303 	mul.w	r3, r0, r3
 80154f4:	fb01 330a 	mla	r3, r1, sl, r3
 80154f8:	fba0 0a0a 	umull	r0, sl, r0, sl
 80154fc:	1986      	adds	r6, r0, r6
 80154fe:	4453      	add	r3, sl
 8015500:	eb43 0707 	adc.w	r7, r3, r7
 8015504:	e7b9      	b.n	801547a <rcl_timer_call+0x96>
 8015506:	bf00      	nop

08015508 <rcl_timer_is_ready>:
 8015508:	b570      	push	{r4, r5, r6, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	b378      	cbz	r0, 801556e <rcl_timer_is_ready+0x66>
 801550e:	6803      	ldr	r3, [r0, #0]
 8015510:	4604      	mov	r4, r0
 8015512:	b383      	cbz	r3, 8015576 <rcl_timer_is_ready+0x6e>
 8015514:	460d      	mov	r5, r1
 8015516:	b351      	cbz	r1, 801556e <rcl_timer_is_ready+0x66>
 8015518:	f3bf 8f5b 	dmb	ish
 801551c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015520:	f3bf 8f5b 	dmb	ish
 8015524:	b953      	cbnz	r3, 801553c <rcl_timer_is_ready+0x34>
 8015526:	6803      	ldr	r3, [r0, #0]
 8015528:	4669      	mov	r1, sp
 801552a:	6818      	ldr	r0, [r3, #0]
 801552c:	f7ff fd42 	bl	8014fb4 <rcl_clock_get_now>
 8015530:	4606      	mov	r6, r0
 8015532:	b140      	cbz	r0, 8015546 <rcl_timer_is_ready+0x3e>
 8015534:	f240 3321 	movw	r3, #801	@ 0x321
 8015538:	4298      	cmp	r0, r3
 801553a:	d101      	bne.n	8015540 <rcl_timer_is_ready+0x38>
 801553c:	2600      	movs	r6, #0
 801553e:	702e      	strb	r6, [r5, #0]
 8015540:	4630      	mov	r0, r6
 8015542:	b002      	add	sp, #8
 8015544:	bd70      	pop	{r4, r5, r6, pc}
 8015546:	6820      	ldr	r0, [r4, #0]
 8015548:	2105      	movs	r1, #5
 801554a:	3028      	adds	r0, #40	@ 0x28
 801554c:	f7f8 fd0c 	bl	800df68 <__atomic_load_8>
 8015550:	9b00      	ldr	r3, [sp, #0]
 8015552:	1ac0      	subs	r0, r0, r3
 8015554:	9b01      	ldr	r3, [sp, #4]
 8015556:	eb61 0103 	sbc.w	r1, r1, r3
 801555a:	2801      	cmp	r0, #1
 801555c:	f171 0300 	sbcs.w	r3, r1, #0
 8015560:	bfb4      	ite	lt
 8015562:	2301      	movlt	r3, #1
 8015564:	2300      	movge	r3, #0
 8015566:	4630      	mov	r0, r6
 8015568:	702b      	strb	r3, [r5, #0]
 801556a:	b002      	add	sp, #8
 801556c:	bd70      	pop	{r4, r5, r6, pc}
 801556e:	260b      	movs	r6, #11
 8015570:	4630      	mov	r0, r6
 8015572:	b002      	add	sp, #8
 8015574:	bd70      	pop	{r4, r5, r6, pc}
 8015576:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801557a:	e7e1      	b.n	8015540 <rcl_timer_is_ready+0x38>

0801557c <rcl_timer_get_time_until_next_call>:
 801557c:	b570      	push	{r4, r5, r6, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	b330      	cbz	r0, 80155d0 <rcl_timer_get_time_until_next_call+0x54>
 8015582:	6803      	ldr	r3, [r0, #0]
 8015584:	4604      	mov	r4, r0
 8015586:	b33b      	cbz	r3, 80155d8 <rcl_timer_get_time_until_next_call+0x5c>
 8015588:	460d      	mov	r5, r1
 801558a:	b309      	cbz	r1, 80155d0 <rcl_timer_get_time_until_next_call+0x54>
 801558c:	f3bf 8f5b 	dmb	ish
 8015590:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015594:	f3bf 8f5b 	dmb	ish
 8015598:	b9ab      	cbnz	r3, 80155c6 <rcl_timer_get_time_until_next_call+0x4a>
 801559a:	6803      	ldr	r3, [r0, #0]
 801559c:	4669      	mov	r1, sp
 801559e:	6818      	ldr	r0, [r3, #0]
 80155a0:	f7ff fd08 	bl	8014fb4 <rcl_clock_get_now>
 80155a4:	4606      	mov	r6, r0
 80155a6:	b958      	cbnz	r0, 80155c0 <rcl_timer_get_time_until_next_call+0x44>
 80155a8:	6820      	ldr	r0, [r4, #0]
 80155aa:	2105      	movs	r1, #5
 80155ac:	3028      	adds	r0, #40	@ 0x28
 80155ae:	f7f8 fcdb 	bl	800df68 <__atomic_load_8>
 80155b2:	9b00      	ldr	r3, [sp, #0]
 80155b4:	1ac0      	subs	r0, r0, r3
 80155b6:	9b01      	ldr	r3, [sp, #4]
 80155b8:	6028      	str	r0, [r5, #0]
 80155ba:	eb61 0103 	sbc.w	r1, r1, r3
 80155be:	6069      	str	r1, [r5, #4]
 80155c0:	4630      	mov	r0, r6
 80155c2:	b002      	add	sp, #8
 80155c4:	bd70      	pop	{r4, r5, r6, pc}
 80155c6:	f240 3621 	movw	r6, #801	@ 0x321
 80155ca:	4630      	mov	r0, r6
 80155cc:	b002      	add	sp, #8
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	260b      	movs	r6, #11
 80155d2:	4630      	mov	r0, r6
 80155d4:	b002      	add	sp, #8
 80155d6:	bd70      	pop	{r4, r5, r6, pc}
 80155d8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80155dc:	e7f0      	b.n	80155c0 <rcl_timer_get_time_until_next_call+0x44>
 80155de:	bf00      	nop

080155e0 <rcl_timer_get_guard_condition>:
 80155e0:	b130      	cbz	r0, 80155f0 <rcl_timer_get_guard_condition+0x10>
 80155e2:	6800      	ldr	r0, [r0, #0]
 80155e4:	b120      	cbz	r0, 80155f0 <rcl_timer_get_guard_condition+0x10>
 80155e6:	68c3      	ldr	r3, [r0, #12]
 80155e8:	b10b      	cbz	r3, 80155ee <rcl_timer_get_guard_condition+0xe>
 80155ea:	3008      	adds	r0, #8
 80155ec:	4770      	bx	lr
 80155ee:	4618      	mov	r0, r3
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop

080155f4 <rcl_validate_enclave_name_with_size>:
 80155f4:	b378      	cbz	r0, 8015656 <rcl_validate_enclave_name_with_size+0x62>
 80155f6:	b570      	push	{r4, r5, r6, lr}
 80155f8:	4615      	mov	r5, r2
 80155fa:	b0c2      	sub	sp, #264	@ 0x108
 80155fc:	b302      	cbz	r2, 8015640 <rcl_validate_enclave_name_with_size+0x4c>
 80155fe:	461e      	mov	r6, r3
 8015600:	466a      	mov	r2, sp
 8015602:	ab01      	add	r3, sp, #4
 8015604:	460c      	mov	r4, r1
 8015606:	f7f9 f901 	bl	800e80c <rmw_validate_namespace_with_size>
 801560a:	4684      	mov	ip, r0
 801560c:	b9e8      	cbnz	r0, 801564a <rcl_validate_enclave_name_with_size+0x56>
 801560e:	9b00      	ldr	r3, [sp, #0]
 8015610:	b923      	cbnz	r3, 801561c <rcl_validate_enclave_name_with_size+0x28>
 8015612:	2300      	movs	r3, #0
 8015614:	602b      	str	r3, [r5, #0]
 8015616:	4660      	mov	r0, ip
 8015618:	b042      	add	sp, #264	@ 0x108
 801561a:	bd70      	pop	{r4, r5, r6, pc}
 801561c:	2b07      	cmp	r3, #7
 801561e:	d007      	beq.n	8015630 <rcl_validate_enclave_name_with_size+0x3c>
 8015620:	1e5a      	subs	r2, r3, #1
 8015622:	2a05      	cmp	r2, #5
 8015624:	d833      	bhi.n	801568e <rcl_validate_enclave_name_with_size+0x9a>
 8015626:	e8df f002 	tbb	[pc, r2]
 801562a:	2c2f      	.short	0x2c2f
 801562c:	1a232629 	.word	0x1a232629
 8015630:	2cff      	cmp	r4, #255	@ 0xff
 8015632:	d9ee      	bls.n	8015612 <rcl_validate_enclave_name_with_size+0x1e>
 8015634:	602b      	str	r3, [r5, #0]
 8015636:	2e00      	cmp	r6, #0
 8015638:	d0ed      	beq.n	8015616 <rcl_validate_enclave_name_with_size+0x22>
 801563a:	23fe      	movs	r3, #254	@ 0xfe
 801563c:	6033      	str	r3, [r6, #0]
 801563e:	e7ea      	b.n	8015616 <rcl_validate_enclave_name_with_size+0x22>
 8015640:	f04f 0c0b 	mov.w	ip, #11
 8015644:	4660      	mov	r0, ip
 8015646:	b042      	add	sp, #264	@ 0x108
 8015648:	bd70      	pop	{r4, r5, r6, pc}
 801564a:	f7fe fe3b 	bl	80142c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801564e:	4684      	mov	ip, r0
 8015650:	4660      	mov	r0, ip
 8015652:	b042      	add	sp, #264	@ 0x108
 8015654:	bd70      	pop	{r4, r5, r6, pc}
 8015656:	f04f 0c0b 	mov.w	ip, #11
 801565a:	4660      	mov	r0, ip
 801565c:	4770      	bx	lr
 801565e:	2306      	movs	r3, #6
 8015660:	602b      	str	r3, [r5, #0]
 8015662:	2e00      	cmp	r6, #0
 8015664:	d0d7      	beq.n	8015616 <rcl_validate_enclave_name_with_size+0x22>
 8015666:	9b01      	ldr	r3, [sp, #4]
 8015668:	6033      	str	r3, [r6, #0]
 801566a:	4660      	mov	r0, ip
 801566c:	b042      	add	sp, #264	@ 0x108
 801566e:	bd70      	pop	{r4, r5, r6, pc}
 8015670:	2305      	movs	r3, #5
 8015672:	602b      	str	r3, [r5, #0]
 8015674:	e7f5      	b.n	8015662 <rcl_validate_enclave_name_with_size+0x6e>
 8015676:	2304      	movs	r3, #4
 8015678:	602b      	str	r3, [r5, #0]
 801567a:	e7f2      	b.n	8015662 <rcl_validate_enclave_name_with_size+0x6e>
 801567c:	2303      	movs	r3, #3
 801567e:	602b      	str	r3, [r5, #0]
 8015680:	e7ef      	b.n	8015662 <rcl_validate_enclave_name_with_size+0x6e>
 8015682:	2302      	movs	r3, #2
 8015684:	602b      	str	r3, [r5, #0]
 8015686:	e7ec      	b.n	8015662 <rcl_validate_enclave_name_with_size+0x6e>
 8015688:	2301      	movs	r3, #1
 801568a:	602b      	str	r3, [r5, #0]
 801568c:	e7e9      	b.n	8015662 <rcl_validate_enclave_name_with_size+0x6e>
 801568e:	4a04      	ldr	r2, [pc, #16]	@ (80156a0 <rcl_validate_enclave_name_with_size+0xac>)
 8015690:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015694:	a802      	add	r0, sp, #8
 8015696:	f7f8 fe45 	bl	800e324 <rcutils_snprintf>
 801569a:	f04f 0c01 	mov.w	ip, #1
 801569e:	e7ba      	b.n	8015616 <rcl_validate_enclave_name_with_size+0x22>
 80156a0:	0801b160 	.word	0x0801b160

080156a4 <rcl_validate_enclave_name>:
 80156a4:	b168      	cbz	r0, 80156c2 <rcl_validate_enclave_name+0x1e>
 80156a6:	b570      	push	{r4, r5, r6, lr}
 80156a8:	460d      	mov	r5, r1
 80156aa:	4616      	mov	r6, r2
 80156ac:	4604      	mov	r4, r0
 80156ae:	f7ea fdc1 	bl	8000234 <strlen>
 80156b2:	4633      	mov	r3, r6
 80156b4:	4601      	mov	r1, r0
 80156b6:	462a      	mov	r2, r5
 80156b8:	4620      	mov	r0, r4
 80156ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156be:	f7ff bf99 	b.w	80155f4 <rcl_validate_enclave_name_with_size>
 80156c2:	200b      	movs	r0, #11
 80156c4:	4770      	bx	lr
 80156c6:	bf00      	nop

080156c8 <rcl_validate_topic_name>:
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d07a      	beq.n	80157c2 <rcl_validate_topic_name+0xfa>
 80156cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156d0:	460e      	mov	r6, r1
 80156d2:	2900      	cmp	r1, #0
 80156d4:	d07c      	beq.n	80157d0 <rcl_validate_topic_name+0x108>
 80156d6:	4617      	mov	r7, r2
 80156d8:	4605      	mov	r5, r0
 80156da:	f7ea fdab 	bl	8000234 <strlen>
 80156de:	b1b0      	cbz	r0, 801570e <rcl_validate_topic_name+0x46>
 80156e0:	f895 9000 	ldrb.w	r9, [r5]
 80156e4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015868 <rcl_validate_topic_name+0x1a0>
 80156e8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80156ec:	f013 0304 	ands.w	r3, r3, #4
 80156f0:	d169      	bne.n	80157c6 <rcl_validate_topic_name+0xfe>
 80156f2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80156f6:	f815 2008 	ldrb.w	r2, [r5, r8]
 80156fa:	2a2f      	cmp	r2, #47	@ 0x2f
 80156fc:	d10e      	bne.n	801571c <rcl_validate_topic_name+0x54>
 80156fe:	2202      	movs	r2, #2
 8015700:	6032      	str	r2, [r6, #0]
 8015702:	b36f      	cbz	r7, 8015760 <rcl_validate_topic_name+0x98>
 8015704:	f8c7 8000 	str.w	r8, [r7]
 8015708:	4618      	mov	r0, r3
 801570a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801570e:	2301      	movs	r3, #1
 8015710:	6033      	str	r3, [r6, #0]
 8015712:	b32f      	cbz	r7, 8015760 <rcl_validate_topic_name+0x98>
 8015714:	2000      	movs	r0, #0
 8015716:	6038      	str	r0, [r7, #0]
 8015718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801571c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015720:	461c      	mov	r4, r3
 8015722:	4619      	mov	r1, r3
 8015724:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015728:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801572c:	f1be 0f09 	cmp.w	lr, #9
 8015730:	d919      	bls.n	8015766 <rcl_validate_topic_name+0x9e>
 8015732:	f022 0e20 	bic.w	lr, r2, #32
 8015736:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801573a:	f1be 0f19 	cmp.w	lr, #25
 801573e:	d912      	bls.n	8015766 <rcl_validate_topic_name+0x9e>
 8015740:	2a5f      	cmp	r2, #95	@ 0x5f
 8015742:	d019      	beq.n	8015778 <rcl_validate_topic_name+0xb0>
 8015744:	2a2f      	cmp	r2, #47	@ 0x2f
 8015746:	d051      	beq.n	80157ec <rcl_validate_topic_name+0x124>
 8015748:	2a7e      	cmp	r2, #126	@ 0x7e
 801574a:	d048      	beq.n	80157de <rcl_validate_topic_name+0x116>
 801574c:	2a7b      	cmp	r2, #123	@ 0x7b
 801574e:	d054      	beq.n	80157fa <rcl_validate_topic_name+0x132>
 8015750:	2a7d      	cmp	r2, #125	@ 0x7d
 8015752:	d161      	bne.n	8015818 <rcl_validate_topic_name+0x150>
 8015754:	2c00      	cmp	r4, #0
 8015756:	d155      	bne.n	8015804 <rcl_validate_topic_name+0x13c>
 8015758:	2305      	movs	r3, #5
 801575a:	6033      	str	r3, [r6, #0]
 801575c:	b107      	cbz	r7, 8015760 <rcl_validate_topic_name+0x98>
 801575e:	6039      	str	r1, [r7, #0]
 8015760:	2000      	movs	r0, #0
 8015762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015766:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801576a:	0752      	lsls	r2, r2, #29
 801576c:	d504      	bpl.n	8015778 <rcl_validate_topic_name+0xb0>
 801576e:	b11c      	cbz	r4, 8015778 <rcl_validate_topic_name+0xb0>
 8015770:	b111      	cbz	r1, 8015778 <rcl_validate_topic_name+0xb0>
 8015772:	1e4a      	subs	r2, r1, #1
 8015774:	429a      	cmp	r2, r3
 8015776:	d02d      	beq.n	80157d4 <rcl_validate_topic_name+0x10c>
 8015778:	3101      	adds	r1, #1
 801577a:	4288      	cmp	r0, r1
 801577c:	d1d2      	bne.n	8015724 <rcl_validate_topic_name+0x5c>
 801577e:	2c00      	cmp	r4, #0
 8015780:	d145      	bne.n	801580e <rcl_validate_topic_name+0x146>
 8015782:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015786:	d04f      	beq.n	8015828 <rcl_validate_topic_name+0x160>
 8015788:	4620      	mov	r0, r4
 801578a:	2301      	movs	r3, #1
 801578c:	e006      	b.n	801579c <rcl_validate_topic_name+0xd4>
 801578e:	428b      	cmp	r3, r1
 8015790:	f105 0501 	add.w	r5, r5, #1
 8015794:	f103 0201 	add.w	r2, r3, #1
 8015798:	d236      	bcs.n	8015808 <rcl_validate_topic_name+0x140>
 801579a:	4613      	mov	r3, r2
 801579c:	4580      	cmp	r8, r0
 801579e:	f100 0001 	add.w	r0, r0, #1
 80157a2:	d0f4      	beq.n	801578e <rcl_validate_topic_name+0xc6>
 80157a4:	782a      	ldrb	r2, [r5, #0]
 80157a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80157a8:	d1f1      	bne.n	801578e <rcl_validate_topic_name+0xc6>
 80157aa:	786a      	ldrb	r2, [r5, #1]
 80157ac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80157b0:	0754      	lsls	r4, r2, #29
 80157b2:	d5ec      	bpl.n	801578e <rcl_validate_topic_name+0xc6>
 80157b4:	2204      	movs	r2, #4
 80157b6:	6032      	str	r2, [r6, #0]
 80157b8:	2f00      	cmp	r7, #0
 80157ba:	d0d1      	beq.n	8015760 <rcl_validate_topic_name+0x98>
 80157bc:	603b      	str	r3, [r7, #0]
 80157be:	2000      	movs	r0, #0
 80157c0:	e7aa      	b.n	8015718 <rcl_validate_topic_name+0x50>
 80157c2:	200b      	movs	r0, #11
 80157c4:	4770      	bx	lr
 80157c6:	2304      	movs	r3, #4
 80157c8:	6033      	str	r3, [r6, #0]
 80157ca:	2f00      	cmp	r7, #0
 80157cc:	d1a2      	bne.n	8015714 <rcl_validate_topic_name+0x4c>
 80157ce:	e7c7      	b.n	8015760 <rcl_validate_topic_name+0x98>
 80157d0:	200b      	movs	r0, #11
 80157d2:	e7a1      	b.n	8015718 <rcl_validate_topic_name+0x50>
 80157d4:	2309      	movs	r3, #9
 80157d6:	6033      	str	r3, [r6, #0]
 80157d8:	2f00      	cmp	r7, #0
 80157da:	d1c0      	bne.n	801575e <rcl_validate_topic_name+0x96>
 80157dc:	e7c0      	b.n	8015760 <rcl_validate_topic_name+0x98>
 80157de:	2900      	cmp	r1, #0
 80157e0:	d0ca      	beq.n	8015778 <rcl_validate_topic_name+0xb0>
 80157e2:	2306      	movs	r3, #6
 80157e4:	6033      	str	r3, [r6, #0]
 80157e6:	2f00      	cmp	r7, #0
 80157e8:	d1b9      	bne.n	801575e <rcl_validate_topic_name+0x96>
 80157ea:	e7b9      	b.n	8015760 <rcl_validate_topic_name+0x98>
 80157ec:	2c00      	cmp	r4, #0
 80157ee:	d0c3      	beq.n	8015778 <rcl_validate_topic_name+0xb0>
 80157f0:	2308      	movs	r3, #8
 80157f2:	6033      	str	r3, [r6, #0]
 80157f4:	2f00      	cmp	r7, #0
 80157f6:	d1b2      	bne.n	801575e <rcl_validate_topic_name+0x96>
 80157f8:	e7b2      	b.n	8015760 <rcl_validate_topic_name+0x98>
 80157fa:	2c00      	cmp	r4, #0
 80157fc:	d1f8      	bne.n	80157f0 <rcl_validate_topic_name+0x128>
 80157fe:	460b      	mov	r3, r1
 8015800:	2401      	movs	r4, #1
 8015802:	e7b9      	b.n	8015778 <rcl_validate_topic_name+0xb0>
 8015804:	2400      	movs	r4, #0
 8015806:	e7b7      	b.n	8015778 <rcl_validate_topic_name+0xb0>
 8015808:	2000      	movs	r0, #0
 801580a:	6030      	str	r0, [r6, #0]
 801580c:	e784      	b.n	8015718 <rcl_validate_topic_name+0x50>
 801580e:	2205      	movs	r2, #5
 8015810:	6032      	str	r2, [r6, #0]
 8015812:	2f00      	cmp	r7, #0
 8015814:	d1d2      	bne.n	80157bc <rcl_validate_topic_name+0xf4>
 8015816:	e7a3      	b.n	8015760 <rcl_validate_topic_name+0x98>
 8015818:	2c00      	cmp	r4, #0
 801581a:	bf14      	ite	ne
 801581c:	2308      	movne	r3, #8
 801581e:	2303      	moveq	r3, #3
 8015820:	6033      	str	r3, [r6, #0]
 8015822:	2f00      	cmp	r7, #0
 8015824:	d19b      	bne.n	801575e <rcl_validate_topic_name+0x96>
 8015826:	e79b      	b.n	8015760 <rcl_validate_topic_name+0x98>
 8015828:	2301      	movs	r3, #1
 801582a:	e00a      	b.n	8015842 <rcl_validate_topic_name+0x17a>
 801582c:	2c01      	cmp	r4, #1
 801582e:	d013      	beq.n	8015858 <rcl_validate_topic_name+0x190>
 8015830:	4299      	cmp	r1, r3
 8015832:	f104 0401 	add.w	r4, r4, #1
 8015836:	f105 0501 	add.w	r5, r5, #1
 801583a:	f103 0201 	add.w	r2, r3, #1
 801583e:	d9e3      	bls.n	8015808 <rcl_validate_topic_name+0x140>
 8015840:	4613      	mov	r3, r2
 8015842:	45a0      	cmp	r8, r4
 8015844:	d0f4      	beq.n	8015830 <rcl_validate_topic_name+0x168>
 8015846:	782a      	ldrb	r2, [r5, #0]
 8015848:	2a2f      	cmp	r2, #47	@ 0x2f
 801584a:	d1ef      	bne.n	801582c <rcl_validate_topic_name+0x164>
 801584c:	786a      	ldrb	r2, [r5, #1]
 801584e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015852:	0752      	lsls	r2, r2, #29
 8015854:	d5ec      	bpl.n	8015830 <rcl_validate_topic_name+0x168>
 8015856:	e7ad      	b.n	80157b4 <rcl_validate_topic_name+0xec>
 8015858:	2307      	movs	r3, #7
 801585a:	6033      	str	r3, [r6, #0]
 801585c:	2f00      	cmp	r7, #0
 801585e:	f43f af7f 	beq.w	8015760 <rcl_validate_topic_name+0x98>
 8015862:	603c      	str	r4, [r7, #0]
 8015864:	2000      	movs	r0, #0
 8015866:	e757      	b.n	8015718 <rcl_validate_topic_name+0x50>
 8015868:	0801b33e 	.word	0x0801b33e

0801586c <rcl_get_zero_initialized_wait_set>:
 801586c:	b510      	push	{r4, lr}
 801586e:	4c08      	ldr	r4, [pc, #32]	@ (8015890 <rcl_get_zero_initialized_wait_set+0x24>)
 8015870:	4686      	mov	lr, r0
 8015872:	4684      	mov	ip, r0
 8015874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015876:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801587a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801587c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015886:	6823      	ldr	r3, [r4, #0]
 8015888:	f8cc 3000 	str.w	r3, [ip]
 801588c:	4670      	mov	r0, lr
 801588e:	bd10      	pop	{r4, pc}
 8015890:	0801b1c0 	.word	0x0801b1c0

08015894 <rcl_wait_set_is_valid>:
 8015894:	b118      	cbz	r0, 801589e <rcl_wait_set_is_valid+0xa>
 8015896:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015898:	3800      	subs	r0, #0
 801589a:	bf18      	it	ne
 801589c:	2001      	movne	r0, #1
 801589e:	4770      	bx	lr

080158a0 <rcl_wait_set_fini>:
 80158a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158a4:	b082      	sub	sp, #8
 80158a6:	2800      	cmp	r0, #0
 80158a8:	f000 8095 	beq.w	80159d6 <rcl_wait_set_fini+0x136>
 80158ac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80158ae:	4604      	mov	r4, r0
 80158b0:	2e00      	cmp	r6, #0
 80158b2:	f000 808c 	beq.w	80159ce <rcl_wait_set_fini+0x12e>
 80158b6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80158b8:	f001 ff62 	bl	8017780 <rmw_destroy_wait_set>
 80158bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80158be:	1e06      	subs	r6, r0, #0
 80158c0:	bf18      	it	ne
 80158c2:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80158c6:	2d00      	cmp	r5, #0
 80158c8:	f000 8081 	beq.w	80159ce <rcl_wait_set_fini+0x12e>
 80158cc:	6820      	ldr	r0, [r4, #0]
 80158ce:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80158d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80158d4:	2700      	movs	r7, #0
 80158d6:	6067      	str	r7, [r4, #4]
 80158d8:	602f      	str	r7, [r5, #0]
 80158da:	b120      	cbz	r0, 80158e6 <rcl_wait_set_fini+0x46>
 80158dc:	9101      	str	r1, [sp, #4]
 80158de:	47c0      	blx	r8
 80158e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80158e2:	9901      	ldr	r1, [sp, #4]
 80158e4:	6027      	str	r7, [r4, #0]
 80158e6:	68a8      	ldr	r0, [r5, #8]
 80158e8:	b120      	cbz	r0, 80158f4 <rcl_wait_set_fini+0x54>
 80158ea:	47c0      	blx	r8
 80158ec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80158ee:	2300      	movs	r3, #0
 80158f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80158f4:	68a0      	ldr	r0, [r4, #8]
 80158f6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80158f8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80158fa:	f04f 0800 	mov.w	r8, #0
 80158fe:	f8c4 800c 	str.w	r8, [r4, #12]
 8015902:	f8c5 800c 	str.w	r8, [r5, #12]
 8015906:	b128      	cbz	r0, 8015914 <rcl_wait_set_fini+0x74>
 8015908:	47b8      	blx	r7
 801590a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801590c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015910:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015912:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015914:	6968      	ldr	r0, [r5, #20]
 8015916:	f04f 0800 	mov.w	r8, #0
 801591a:	f8c5 8010 	str.w	r8, [r5, #16]
 801591e:	b128      	cbz	r0, 801592c <rcl_wait_set_fini+0x8c>
 8015920:	47b8      	blx	r7
 8015922:	f8c5 8014 	str.w	r8, [r5, #20]
 8015926:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015928:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801592a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801592c:	6920      	ldr	r0, [r4, #16]
 801592e:	f04f 0800 	mov.w	r8, #0
 8015932:	f8c4 8014 	str.w	r8, [r4, #20]
 8015936:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801593a:	b128      	cbz	r0, 8015948 <rcl_wait_set_fini+0xa8>
 801593c:	47b8      	blx	r7
 801593e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015940:	f8c4 8010 	str.w	r8, [r4, #16]
 8015944:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015946:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015948:	69a0      	ldr	r0, [r4, #24]
 801594a:	f04f 0800 	mov.w	r8, #0
 801594e:	f8c4 801c 	str.w	r8, [r4, #28]
 8015952:	f8c5 8018 	str.w	r8, [r5, #24]
 8015956:	b128      	cbz	r0, 8015964 <rcl_wait_set_fini+0xc4>
 8015958:	9101      	str	r1, [sp, #4]
 801595a:	47b8      	blx	r7
 801595c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801595e:	9901      	ldr	r1, [sp, #4]
 8015960:	f8c4 8018 	str.w	r8, [r4, #24]
 8015964:	6a28      	ldr	r0, [r5, #32]
 8015966:	b120      	cbz	r0, 8015972 <rcl_wait_set_fini+0xd2>
 8015968:	47b8      	blx	r7
 801596a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801596c:	2300      	movs	r3, #0
 801596e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015972:	6a20      	ldr	r0, [r4, #32]
 8015974:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015978:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801597a:	2700      	movs	r7, #0
 801597c:	6267      	str	r7, [r4, #36]	@ 0x24
 801597e:	626f      	str	r7, [r5, #36]	@ 0x24
 8015980:	b120      	cbz	r0, 801598c <rcl_wait_set_fini+0xec>
 8015982:	9101      	str	r1, [sp, #4]
 8015984:	47c0      	blx	r8
 8015986:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015988:	9901      	ldr	r1, [sp, #4]
 801598a:	6227      	str	r7, [r4, #32]
 801598c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801598e:	b120      	cbz	r0, 801599a <rcl_wait_set_fini+0xfa>
 8015990:	47c0      	blx	r8
 8015992:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015994:	2300      	movs	r3, #0
 8015996:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801599a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801599c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80159a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80159a2:	2700      	movs	r7, #0
 80159a4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80159a6:	632f      	str	r7, [r5, #48]	@ 0x30
 80159a8:	b120      	cbz	r0, 80159b4 <rcl_wait_set_fini+0x114>
 80159aa:	9101      	str	r1, [sp, #4]
 80159ac:	47c0      	blx	r8
 80159ae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80159b0:	9901      	ldr	r1, [sp, #4]
 80159b2:	62a7      	str	r7, [r4, #40]	@ 0x28
 80159b4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80159b6:	b120      	cbz	r0, 80159c2 <rcl_wait_set_fini+0x122>
 80159b8:	47c0      	blx	r8
 80159ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80159bc:	2300      	movs	r3, #0
 80159be:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80159c2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80159c4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80159c6:	4628      	mov	r0, r5
 80159c8:	4798      	blx	r3
 80159ca:	2300      	movs	r3, #0
 80159cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80159ce:	4630      	mov	r0, r6
 80159d0:	b002      	add	sp, #8
 80159d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159d6:	260b      	movs	r6, #11
 80159d8:	4630      	mov	r0, r6
 80159da:	b002      	add	sp, #8
 80159dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159e0 <rcl_wait_set_add_subscription>:
 80159e0:	b318      	cbz	r0, 8015a2a <rcl_wait_set_add_subscription+0x4a>
 80159e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80159e4:	b570      	push	{r4, r5, r6, lr}
 80159e6:	4604      	mov	r4, r0
 80159e8:	b30b      	cbz	r3, 8015a2e <rcl_wait_set_add_subscription+0x4e>
 80159ea:	b319      	cbz	r1, 8015a34 <rcl_wait_set_add_subscription+0x54>
 80159ec:	681d      	ldr	r5, [r3, #0]
 80159ee:	6840      	ldr	r0, [r0, #4]
 80159f0:	4285      	cmp	r5, r0
 80159f2:	d217      	bcs.n	8015a24 <rcl_wait_set_add_subscription+0x44>
 80159f4:	6820      	ldr	r0, [r4, #0]
 80159f6:	1c6e      	adds	r6, r5, #1
 80159f8:	601e      	str	r6, [r3, #0]
 80159fa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80159fe:	b102      	cbz	r2, 8015a02 <rcl_wait_set_add_subscription+0x22>
 8015a00:	6015      	str	r5, [r2, #0]
 8015a02:	4608      	mov	r0, r1
 8015a04:	f7ff fa36 	bl	8014e74 <rcl_subscription_get_rmw_handle>
 8015a08:	b150      	cbz	r0, 8015a20 <rcl_wait_set_add_subscription+0x40>
 8015a0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a0c:	6842      	ldr	r2, [r0, #4]
 8015a0e:	689b      	ldr	r3, [r3, #8]
 8015a10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a14:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015a16:	6853      	ldr	r3, [r2, #4]
 8015a18:	3301      	adds	r3, #1
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	6053      	str	r3, [r2, #4]
 8015a1e:	bd70      	pop	{r4, r5, r6, pc}
 8015a20:	2001      	movs	r0, #1
 8015a22:	bd70      	pop	{r4, r5, r6, pc}
 8015a24:	f240 3086 	movw	r0, #902	@ 0x386
 8015a28:	bd70      	pop	{r4, r5, r6, pc}
 8015a2a:	200b      	movs	r0, #11
 8015a2c:	4770      	bx	lr
 8015a2e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a32:	bd70      	pop	{r4, r5, r6, pc}
 8015a34:	200b      	movs	r0, #11
 8015a36:	bd70      	pop	{r4, r5, r6, pc}

08015a38 <rcl_wait_set_clear>:
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d073      	beq.n	8015b24 <rcl_wait_set_clear+0xec>
 8015a3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a3e:	b510      	push	{r4, lr}
 8015a40:	4604      	mov	r4, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d070      	beq.n	8015b28 <rcl_wait_set_clear+0xf0>
 8015a46:	6800      	ldr	r0, [r0, #0]
 8015a48:	b138      	cbz	r0, 8015a5a <rcl_wait_set_clear+0x22>
 8015a4a:	6862      	ldr	r2, [r4, #4]
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	0092      	lsls	r2, r2, #2
 8015a50:	f003 fab0 	bl	8018fb4 <memset>
 8015a54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a56:	2200      	movs	r2, #0
 8015a58:	601a      	str	r2, [r3, #0]
 8015a5a:	68a0      	ldr	r0, [r4, #8]
 8015a5c:	b138      	cbz	r0, 8015a6e <rcl_wait_set_clear+0x36>
 8015a5e:	68e2      	ldr	r2, [r4, #12]
 8015a60:	2100      	movs	r1, #0
 8015a62:	0092      	lsls	r2, r2, #2
 8015a64:	f003 faa6 	bl	8018fb4 <memset>
 8015a68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	60da      	str	r2, [r3, #12]
 8015a6e:	69a0      	ldr	r0, [r4, #24]
 8015a70:	b138      	cbz	r0, 8015a82 <rcl_wait_set_clear+0x4a>
 8015a72:	69e2      	ldr	r2, [r4, #28]
 8015a74:	2100      	movs	r1, #0
 8015a76:	0092      	lsls	r2, r2, #2
 8015a78:	f003 fa9c 	bl	8018fb4 <memset>
 8015a7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a7e:	2200      	movs	r2, #0
 8015a80:	619a      	str	r2, [r3, #24]
 8015a82:	6a20      	ldr	r0, [r4, #32]
 8015a84:	b138      	cbz	r0, 8015a96 <rcl_wait_set_clear+0x5e>
 8015a86:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015a88:	2100      	movs	r1, #0
 8015a8a:	0092      	lsls	r2, r2, #2
 8015a8c:	f003 fa92 	bl	8018fb4 <memset>
 8015a90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a92:	2200      	movs	r2, #0
 8015a94:	625a      	str	r2, [r3, #36]	@ 0x24
 8015a96:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015a98:	b138      	cbz	r0, 8015aaa <rcl_wait_set_clear+0x72>
 8015a9a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015a9c:	2100      	movs	r1, #0
 8015a9e:	0092      	lsls	r2, r2, #2
 8015aa0:	f003 fa88 	bl	8018fb4 <memset>
 8015aa4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8015aaa:	6920      	ldr	r0, [r4, #16]
 8015aac:	b138      	cbz	r0, 8015abe <rcl_wait_set_clear+0x86>
 8015aae:	6962      	ldr	r2, [r4, #20]
 8015ab0:	2100      	movs	r1, #0
 8015ab2:	0092      	lsls	r2, r2, #2
 8015ab4:	f003 fa7e 	bl	8018fb4 <memset>
 8015ab8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015aba:	2200      	movs	r2, #0
 8015abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8015abe:	6898      	ldr	r0, [r3, #8]
 8015ac0:	b138      	cbz	r0, 8015ad2 <rcl_wait_set_clear+0x9a>
 8015ac2:	685a      	ldr	r2, [r3, #4]
 8015ac4:	2100      	movs	r1, #0
 8015ac6:	0092      	lsls	r2, r2, #2
 8015ac8:	f003 fa74 	bl	8018fb4 <memset>
 8015acc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ace:	2200      	movs	r2, #0
 8015ad0:	605a      	str	r2, [r3, #4]
 8015ad2:	6958      	ldr	r0, [r3, #20]
 8015ad4:	b138      	cbz	r0, 8015ae6 <rcl_wait_set_clear+0xae>
 8015ad6:	691a      	ldr	r2, [r3, #16]
 8015ad8:	2100      	movs	r1, #0
 8015ada:	0092      	lsls	r2, r2, #2
 8015adc:	f003 fa6a 	bl	8018fb4 <memset>
 8015ae0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	611a      	str	r2, [r3, #16]
 8015ae6:	6a18      	ldr	r0, [r3, #32]
 8015ae8:	b138      	cbz	r0, 8015afa <rcl_wait_set_clear+0xc2>
 8015aea:	69da      	ldr	r2, [r3, #28]
 8015aec:	2100      	movs	r1, #0
 8015aee:	0092      	lsls	r2, r2, #2
 8015af0:	f003 fa60 	bl	8018fb4 <memset>
 8015af4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015af6:	2200      	movs	r2, #0
 8015af8:	61da      	str	r2, [r3, #28]
 8015afa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015afc:	b138      	cbz	r0, 8015b0e <rcl_wait_set_clear+0xd6>
 8015afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015b00:	2100      	movs	r1, #0
 8015b02:	0092      	lsls	r2, r2, #2
 8015b04:	f003 fa56 	bl	8018fb4 <memset>
 8015b08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8015b0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015b10:	b138      	cbz	r0, 8015b22 <rcl_wait_set_clear+0xea>
 8015b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015b14:	2100      	movs	r1, #0
 8015b16:	0092      	lsls	r2, r2, #2
 8015b18:	f003 fa4c 	bl	8018fb4 <memset>
 8015b1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b1e:	2000      	movs	r0, #0
 8015b20:	6358      	str	r0, [r3, #52]	@ 0x34
 8015b22:	bd10      	pop	{r4, pc}
 8015b24:	200b      	movs	r0, #11
 8015b26:	4770      	bx	lr
 8015b28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b2c:	bd10      	pop	{r4, pc}
 8015b2e:	bf00      	nop

08015b30 <rcl_wait_set_resize>:
 8015b30:	2800      	cmp	r0, #0
 8015b32:	f000 8185 	beq.w	8015e40 <rcl_wait_set_resize+0x310>
 8015b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015b3c:	b083      	sub	sp, #12
 8015b3e:	4605      	mov	r5, r0
 8015b40:	2c00      	cmp	r4, #0
 8015b42:	f000 817f 	beq.w	8015e44 <rcl_wait_set_resize+0x314>
 8015b46:	f04f 0900 	mov.w	r9, #0
 8015b4a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015b4e:	461f      	mov	r7, r3
 8015b50:	4688      	mov	r8, r1
 8015b52:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015b56:	4616      	mov	r6, r2
 8015b58:	f8c0 9004 	str.w	r9, [r0, #4]
 8015b5c:	f8c4 9000 	str.w	r9, [r4]
 8015b60:	2900      	cmp	r1, #0
 8015b62:	f000 80bd 	beq.w	8015ce0 <rcl_wait_set_resize+0x1b0>
 8015b66:	008c      	lsls	r4, r1, #2
 8015b68:	6800      	ldr	r0, [r0, #0]
 8015b6a:	9301      	str	r3, [sp, #4]
 8015b6c:	4652      	mov	r2, sl
 8015b6e:	4621      	mov	r1, r4
 8015b70:	4798      	blx	r3
 8015b72:	9b01      	ldr	r3, [sp, #4]
 8015b74:	6028      	str	r0, [r5, #0]
 8015b76:	2800      	cmp	r0, #0
 8015b78:	f000 80cb 	beq.w	8015d12 <rcl_wait_set_resize+0x1e2>
 8015b7c:	4622      	mov	r2, r4
 8015b7e:	4649      	mov	r1, r9
 8015b80:	9301      	str	r3, [sp, #4]
 8015b82:	f003 fa17 	bl	8018fb4 <memset>
 8015b86:	f8c5 8004 	str.w	r8, [r5, #4]
 8015b8a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015b8e:	9b01      	ldr	r3, [sp, #4]
 8015b90:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015b94:	f8c8 9004 	str.w	r9, [r8, #4]
 8015b98:	4652      	mov	r2, sl
 8015b9a:	4621      	mov	r1, r4
 8015b9c:	4798      	blx	r3
 8015b9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ba0:	f8c8 0008 	str.w	r0, [r8, #8]
 8015ba4:	689b      	ldr	r3, [r3, #8]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	f000 80ac 	beq.w	8015d04 <rcl_wait_set_resize+0x1d4>
 8015bac:	4622      	mov	r2, r4
 8015bae:	4649      	mov	r1, r9
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f003 f9ff 	bl	8018fb4 <memset>
 8015bb6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bb8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015bbc:	f04f 0800 	mov.w	r8, #0
 8015bc0:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015bc4:	f8c5 800c 	str.w	r8, [r5, #12]
 8015bc8:	f8c4 800c 	str.w	r8, [r4, #12]
 8015bcc:	2e00      	cmp	r6, #0
 8015bce:	f040 80a4 	bne.w	8015d1a <rcl_wait_set_resize+0x1ea>
 8015bd2:	68a8      	ldr	r0, [r5, #8]
 8015bd4:	b128      	cbz	r0, 8015be2 <rcl_wait_set_resize+0xb2>
 8015bd6:	4649      	mov	r1, r9
 8015bd8:	4790      	blx	r2
 8015bda:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bdc:	60ae      	str	r6, [r5, #8]
 8015bde:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015be2:	f04f 0800 	mov.w	r8, #0
 8015be6:	19f6      	adds	r6, r6, r7
 8015be8:	f8c4 8010 	str.w	r8, [r4, #16]
 8015bec:	f040 80ac 	bne.w	8015d48 <rcl_wait_set_resize+0x218>
 8015bf0:	6960      	ldr	r0, [r4, #20]
 8015bf2:	b130      	cbz	r0, 8015c02 <rcl_wait_set_resize+0xd2>
 8015bf4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015bf6:	4649      	mov	r1, r9
 8015bf8:	4798      	blx	r3
 8015bfa:	6166      	str	r6, [r4, #20]
 8015bfc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bfe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015c02:	2600      	movs	r6, #0
 8015c04:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015c08:	616e      	str	r6, [r5, #20]
 8015c0a:	6426      	str	r6, [r4, #64]	@ 0x40
 8015c0c:	2f00      	cmp	r7, #0
 8015c0e:	f040 80ad 	bne.w	8015d6c <rcl_wait_set_resize+0x23c>
 8015c12:	6928      	ldr	r0, [r5, #16]
 8015c14:	b138      	cbz	r0, 8015c26 <rcl_wait_set_resize+0xf6>
 8015c16:	4649      	mov	r1, r9
 8015c18:	47d0      	blx	sl
 8015c1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c1c:	612f      	str	r7, [r5, #16]
 8015c1e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015c22:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015c26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c28:	2600      	movs	r6, #0
 8015c2a:	61ee      	str	r6, [r5, #28]
 8015c2c:	61a6      	str	r6, [r4, #24]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	f040 80af 	bne.w	8015d92 <rcl_wait_set_resize+0x262>
 8015c34:	69a8      	ldr	r0, [r5, #24]
 8015c36:	b120      	cbz	r0, 8015c42 <rcl_wait_set_resize+0x112>
 8015c38:	4649      	mov	r1, r9
 8015c3a:	47d0      	blx	sl
 8015c3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c3e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c40:	61ab      	str	r3, [r5, #24]
 8015c42:	6a20      	ldr	r0, [r4, #32]
 8015c44:	b128      	cbz	r0, 8015c52 <rcl_wait_set_resize+0x122>
 8015c46:	4649      	mov	r1, r9
 8015c48:	47d0      	blx	sl
 8015c4a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c54:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015c56:	2600      	movs	r6, #0
 8015c58:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015c5c:	626e      	str	r6, [r5, #36]	@ 0x24
 8015c5e:	6266      	str	r6, [r4, #36]	@ 0x24
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	f000 80b6 	beq.w	8015dd2 <rcl_wait_set_resize+0x2a2>
 8015c66:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015c6a:	6a28      	ldr	r0, [r5, #32]
 8015c6c:	463a      	mov	r2, r7
 8015c6e:	4651      	mov	r1, sl
 8015c70:	47c8      	blx	r9
 8015c72:	6228      	str	r0, [r5, #32]
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d04c      	beq.n	8015d12 <rcl_wait_set_resize+0x1e2>
 8015c78:	4652      	mov	r2, sl
 8015c7a:	4631      	mov	r1, r6
 8015c7c:	f003 f99a 	bl	8018fb4 <memset>
 8015c80:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c84:	626b      	str	r3, [r5, #36]	@ 0x24
 8015c86:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015c88:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015c8a:	463a      	mov	r2, r7
 8015c8c:	4651      	mov	r1, sl
 8015c8e:	47c8      	blx	r9
 8015c90:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c92:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8015c94:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8015c96:	2c00      	cmp	r4, #0
 8015c98:	f000 80f0 	beq.w	8015e7c <rcl_wait_set_resize+0x34c>
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	4652      	mov	r2, sl
 8015ca0:	4631      	mov	r1, r6
 8015ca2:	f003 f987 	bl	8018fb4 <memset>
 8015ca6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015ca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015caa:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015cac:	2600      	movs	r6, #0
 8015cae:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015cb2:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015cb4:	6326      	str	r6, [r4, #48]	@ 0x30
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	f040 809d 	bne.w	8015df6 <rcl_wait_set_resize+0x2c6>
 8015cbc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015cbe:	b120      	cbz	r0, 8015cca <rcl_wait_set_resize+0x19a>
 8015cc0:	4639      	mov	r1, r7
 8015cc2:	47c0      	blx	r8
 8015cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015cc6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cc8:	62ab      	str	r3, [r5, #40]	@ 0x28
 8015cca:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015ccc:	b310      	cbz	r0, 8015d14 <rcl_wait_set_resize+0x1e4>
 8015cce:	4639      	mov	r1, r7
 8015cd0:	47c0      	blx	r8
 8015cd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015cd4:	2000      	movs	r0, #0
 8015cd6:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015cda:	b003      	add	sp, #12
 8015cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ce0:	6800      	ldr	r0, [r0, #0]
 8015ce2:	b120      	cbz	r0, 8015cee <rcl_wait_set_resize+0x1be>
 8015ce4:	4651      	mov	r1, sl
 8015ce6:	47d8      	blx	fp
 8015ce8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cea:	f8c5 8000 	str.w	r8, [r5]
 8015cee:	68a0      	ldr	r0, [r4, #8]
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	f43f af61 	beq.w	8015bb8 <rcl_wait_set_resize+0x88>
 8015cf6:	4651      	mov	r1, sl
 8015cf8:	47d8      	blx	fp
 8015cfa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015d02:	e759      	b.n	8015bb8 <rcl_wait_set_resize+0x88>
 8015d04:	6828      	ldr	r0, [r5, #0]
 8015d06:	9301      	str	r3, [sp, #4]
 8015d08:	4651      	mov	r1, sl
 8015d0a:	47d8      	blx	fp
 8015d0c:	9b01      	ldr	r3, [sp, #4]
 8015d0e:	e9c5 3300 	strd	r3, r3, [r5]
 8015d12:	200a      	movs	r0, #10
 8015d14:	b003      	add	sp, #12
 8015d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d1a:	00b4      	lsls	r4, r6, #2
 8015d1c:	68a8      	ldr	r0, [r5, #8]
 8015d1e:	464a      	mov	r2, r9
 8015d20:	4621      	mov	r1, r4
 8015d22:	4798      	blx	r3
 8015d24:	60a8      	str	r0, [r5, #8]
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d0f3      	beq.n	8015d12 <rcl_wait_set_resize+0x1e2>
 8015d2a:	4622      	mov	r2, r4
 8015d2c:	4641      	mov	r1, r8
 8015d2e:	f003 f941 	bl	8018fb4 <memset>
 8015d32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d34:	60ee      	str	r6, [r5, #12]
 8015d36:	f04f 0800 	mov.w	r8, #0
 8015d3a:	19f6      	adds	r6, r6, r7
 8015d3c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015d40:	f8c4 8010 	str.w	r8, [r4, #16]
 8015d44:	f43f af54 	beq.w	8015bf0 <rcl_wait_set_resize+0xc0>
 8015d48:	00b6      	lsls	r6, r6, #2
 8015d4a:	464a      	mov	r2, r9
 8015d4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015d4e:	6960      	ldr	r0, [r4, #20]
 8015d50:	4631      	mov	r1, r6
 8015d52:	4798      	blx	r3
 8015d54:	4681      	mov	r9, r0
 8015d56:	6160      	str	r0, [r4, #20]
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d076      	beq.n	8015e4a <rcl_wait_set_resize+0x31a>
 8015d5c:	4632      	mov	r2, r6
 8015d5e:	4641      	mov	r1, r8
 8015d60:	f003 f928 	bl	8018fb4 <memset>
 8015d64:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d66:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015d6a:	e74a      	b.n	8015c02 <rcl_wait_set_resize+0xd2>
 8015d6c:	00bc      	lsls	r4, r7, #2
 8015d6e:	6928      	ldr	r0, [r5, #16]
 8015d70:	464a      	mov	r2, r9
 8015d72:	4621      	mov	r1, r4
 8015d74:	47c0      	blx	r8
 8015d76:	6128      	str	r0, [r5, #16]
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	d0ca      	beq.n	8015d12 <rcl_wait_set_resize+0x1e2>
 8015d7c:	4622      	mov	r2, r4
 8015d7e:	4631      	mov	r1, r6
 8015d80:	f003 f918 	bl	8018fb4 <memset>
 8015d84:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d86:	616f      	str	r7, [r5, #20]
 8015d88:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015d8c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015d90:	e749      	b.n	8015c26 <rcl_wait_set_resize+0xf6>
 8015d92:	009c      	lsls	r4, r3, #2
 8015d94:	69a8      	ldr	r0, [r5, #24]
 8015d96:	464a      	mov	r2, r9
 8015d98:	4621      	mov	r1, r4
 8015d9a:	47c0      	blx	r8
 8015d9c:	61a8      	str	r0, [r5, #24]
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d0b7      	beq.n	8015d12 <rcl_wait_set_resize+0x1e2>
 8015da2:	4622      	mov	r2, r4
 8015da4:	4631      	mov	r1, r6
 8015da6:	f003 f905 	bl	8018fb4 <memset>
 8015daa:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015dac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dae:	61eb      	str	r3, [r5, #28]
 8015db0:	6a38      	ldr	r0, [r7, #32]
 8015db2:	61fe      	str	r6, [r7, #28]
 8015db4:	464a      	mov	r2, r9
 8015db6:	4621      	mov	r1, r4
 8015db8:	47c0      	blx	r8
 8015dba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015dbc:	6238      	str	r0, [r7, #32]
 8015dbe:	6a1f      	ldr	r7, [r3, #32]
 8015dc0:	2f00      	cmp	r7, #0
 8015dc2:	d054      	beq.n	8015e6e <rcl_wait_set_resize+0x33e>
 8015dc4:	4622      	mov	r2, r4
 8015dc6:	4631      	mov	r1, r6
 8015dc8:	4638      	mov	r0, r7
 8015dca:	f003 f8f3 	bl	8018fb4 <memset>
 8015dce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015dd0:	e73f      	b.n	8015c52 <rcl_wait_set_resize+0x122>
 8015dd2:	6a28      	ldr	r0, [r5, #32]
 8015dd4:	b120      	cbz	r0, 8015de0 <rcl_wait_set_resize+0x2b0>
 8015dd6:	4639      	mov	r1, r7
 8015dd8:	47c0      	blx	r8
 8015dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ddc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015dde:	622b      	str	r3, [r5, #32]
 8015de0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015de2:	2800      	cmp	r0, #0
 8015de4:	f43f af60 	beq.w	8015ca8 <rcl_wait_set_resize+0x178>
 8015de8:	4639      	mov	r1, r7
 8015dea:	47c0      	blx	r8
 8015dec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015dee:	2300      	movs	r3, #0
 8015df0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015df4:	e758      	b.n	8015ca8 <rcl_wait_set_resize+0x178>
 8015df6:	009c      	lsls	r4, r3, #2
 8015df8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015dfa:	463a      	mov	r2, r7
 8015dfc:	4621      	mov	r1, r4
 8015dfe:	47c8      	blx	r9
 8015e00:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015e02:	2800      	cmp	r0, #0
 8015e04:	d085      	beq.n	8015d12 <rcl_wait_set_resize+0x1e2>
 8015e06:	4622      	mov	r2, r4
 8015e08:	4631      	mov	r1, r6
 8015e0a:	f003 f8d3 	bl	8018fb4 <memset>
 8015e0e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e14:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015e16:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015e1a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015e1e:	463a      	mov	r2, r7
 8015e20:	4621      	mov	r1, r4
 8015e22:	47c8      	blx	r9
 8015e24:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015e26:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e2c:	b36b      	cbz	r3, 8015e8a <rcl_wait_set_resize+0x35a>
 8015e2e:	4622      	mov	r2, r4
 8015e30:	4631      	mov	r1, r6
 8015e32:	4618      	mov	r0, r3
 8015e34:	f003 f8be 	bl	8018fb4 <memset>
 8015e38:	4630      	mov	r0, r6
 8015e3a:	b003      	add	sp, #12
 8015e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e40:	200b      	movs	r0, #11
 8015e42:	4770      	bx	lr
 8015e44:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e48:	e764      	b.n	8015d14 <rcl_wait_set_resize+0x1e4>
 8015e4a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015e4c:	68a8      	ldr	r0, [r5, #8]
 8015e4e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e52:	4798      	blx	r3
 8015e54:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015e56:	6928      	ldr	r0, [r5, #16]
 8015e58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015e5a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015e5c:	f8c5 900c 	str.w	r9, [r5, #12]
 8015e60:	f8c5 9008 	str.w	r9, [r5, #8]
 8015e64:	4790      	blx	r2
 8015e66:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8015e6a:	200a      	movs	r0, #10
 8015e6c:	e752      	b.n	8015d14 <rcl_wait_set_resize+0x1e4>
 8015e6e:	69a8      	ldr	r0, [r5, #24]
 8015e70:	4649      	mov	r1, r9
 8015e72:	47d0      	blx	sl
 8015e74:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015e78:	200a      	movs	r0, #10
 8015e7a:	e74b      	b.n	8015d14 <rcl_wait_set_resize+0x1e4>
 8015e7c:	6a28      	ldr	r0, [r5, #32]
 8015e7e:	4639      	mov	r1, r7
 8015e80:	47c0      	blx	r8
 8015e82:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8015e86:	200a      	movs	r0, #10
 8015e88:	e744      	b.n	8015d14 <rcl_wait_set_resize+0x1e4>
 8015e8a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015e8c:	9301      	str	r3, [sp, #4]
 8015e8e:	4639      	mov	r1, r7
 8015e90:	47c0      	blx	r8
 8015e92:	9b01      	ldr	r3, [sp, #4]
 8015e94:	200a      	movs	r0, #10
 8015e96:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015e9a:	e73b      	b.n	8015d14 <rcl_wait_set_resize+0x1e4>

08015e9c <rcl_wait_set_init>:
 8015e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ea0:	b084      	sub	sp, #16
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	a810      	add	r0, sp, #64	@ 0x40
 8015ea6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015eaa:	460f      	mov	r7, r1
 8015eac:	4690      	mov	r8, r2
 8015eae:	4699      	mov	r9, r3
 8015eb0:	f7f8 f84c 	bl	800df4c <rcutils_allocator_is_valid>
 8015eb4:	2800      	cmp	r0, #0
 8015eb6:	d06b      	beq.n	8015f90 <rcl_wait_set_init+0xf4>
 8015eb8:	2c00      	cmp	r4, #0
 8015eba:	d069      	beq.n	8015f90 <rcl_wait_set_init+0xf4>
 8015ebc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015ebe:	b125      	cbz	r5, 8015eca <rcl_wait_set_init+0x2e>
 8015ec0:	2564      	movs	r5, #100	@ 0x64
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	b004      	add	sp, #16
 8015ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eca:	f1ba 0f00 	cmp.w	sl, #0
 8015ece:	d05f      	beq.n	8015f90 <rcl_wait_set_init+0xf4>
 8015ed0:	4650      	mov	r0, sl
 8015ed2:	f7fe fa15 	bl	8014300 <rcl_context_is_valid>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	d067      	beq.n	8015faa <rcl_wait_set_init+0x10e>
 8015eda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015edc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015ede:	205c      	movs	r0, #92	@ 0x5c
 8015ee0:	4798      	blx	r3
 8015ee2:	6320      	str	r0, [r4, #48]	@ 0x30
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d062      	beq.n	8015fae <rcl_wait_set_init+0x112>
 8015ee8:	4629      	mov	r1, r5
 8015eea:	225c      	movs	r2, #92	@ 0x5c
 8015eec:	f003 f862 	bl	8018fb4 <memset>
 8015ef0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015ef4:	eb03 0e02 	add.w	lr, r3, r2
 8015ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015efa:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015efc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015f00:	449e      	add	lr, r3
 8015f02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f06:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015f0a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015f0e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015f12:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015f16:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015f1a:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015f1e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015f22:	f8da a000 	ldr.w	sl, [sl]
 8015f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f28:	44c6      	add	lr, r8
 8015f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8015f2e:	602b      	str	r3, [r5, #0]
 8015f30:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015f34:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015f38:	f001 fc18 	bl	801776c <rmw_create_wait_set>
 8015f3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f3e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015f40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015f42:	b350      	cbz	r0, 8015f9a <rcl_wait_set_init+0xfe>
 8015f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f46:	9302      	str	r3, [sp, #8]
 8015f48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f4a:	9301      	str	r3, [sp, #4]
 8015f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f4e:	9300      	str	r3, [sp, #0]
 8015f50:	4642      	mov	r2, r8
 8015f52:	464b      	mov	r3, r9
 8015f54:	4639      	mov	r1, r7
 8015f56:	4620      	mov	r0, r4
 8015f58:	f7ff fdea 	bl	8015b30 <rcl_wait_set_resize>
 8015f5c:	4605      	mov	r5, r0
 8015f5e:	2800      	cmp	r0, #0
 8015f60:	d0af      	beq.n	8015ec2 <rcl_wait_set_init+0x26>
 8015f62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f64:	bb2b      	cbnz	r3, 8015fb2 <rcl_wait_set_init+0x116>
 8015f66:	2600      	movs	r6, #0
 8015f68:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015f6c:	9600      	str	r6, [sp, #0]
 8015f6e:	4633      	mov	r3, r6
 8015f70:	4632      	mov	r2, r6
 8015f72:	4631      	mov	r1, r6
 8015f74:	4620      	mov	r0, r4
 8015f76:	f7ff fddb 	bl	8015b30 <rcl_wait_set_resize>
 8015f7a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015f7c:	2800      	cmp	r0, #0
 8015f7e:	d0a0      	beq.n	8015ec2 <rcl_wait_set_init+0x26>
 8015f80:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015f82:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015f84:	4798      	blx	r3
 8015f86:	4628      	mov	r0, r5
 8015f88:	6326      	str	r6, [r4, #48]	@ 0x30
 8015f8a:	b004      	add	sp, #16
 8015f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f90:	250b      	movs	r5, #11
 8015f92:	4628      	mov	r0, r5
 8015f94:	b004      	add	sp, #16
 8015f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f9a:	2501      	movs	r5, #1
 8015f9c:	f001 fbf0 	bl	8017780 <rmw_destroy_wait_set>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	bf18      	it	ne
 8015fa4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015fa8:	e7dd      	b.n	8015f66 <rcl_wait_set_init+0xca>
 8015faa:	2565      	movs	r5, #101	@ 0x65
 8015fac:	e789      	b.n	8015ec2 <rcl_wait_set_init+0x26>
 8015fae:	250a      	movs	r5, #10
 8015fb0:	e787      	b.n	8015ec2 <rcl_wait_set_init+0x26>
 8015fb2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015fb4:	e7f2      	b.n	8015f9c <rcl_wait_set_init+0x100>
 8015fb6:	bf00      	nop

08015fb8 <rcl_wait_set_add_guard_condition>:
 8015fb8:	b318      	cbz	r0, 8016002 <rcl_wait_set_add_guard_condition+0x4a>
 8015fba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015fbc:	b570      	push	{r4, r5, r6, lr}
 8015fbe:	4604      	mov	r4, r0
 8015fc0:	b30b      	cbz	r3, 8016006 <rcl_wait_set_add_guard_condition+0x4e>
 8015fc2:	b319      	cbz	r1, 801600c <rcl_wait_set_add_guard_condition+0x54>
 8015fc4:	68dd      	ldr	r5, [r3, #12]
 8015fc6:	68c0      	ldr	r0, [r0, #12]
 8015fc8:	4285      	cmp	r5, r0
 8015fca:	d217      	bcs.n	8015ffc <rcl_wait_set_add_guard_condition+0x44>
 8015fcc:	68a0      	ldr	r0, [r4, #8]
 8015fce:	1c6e      	adds	r6, r5, #1
 8015fd0:	60de      	str	r6, [r3, #12]
 8015fd2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015fd6:	b102      	cbz	r2, 8015fda <rcl_wait_set_add_guard_condition+0x22>
 8015fd8:	6015      	str	r5, [r2, #0]
 8015fda:	4608      	mov	r0, r1
 8015fdc:	f7fe fc62 	bl	80148a4 <rcl_guard_condition_get_rmw_handle>
 8015fe0:	b150      	cbz	r0, 8015ff8 <rcl_wait_set_add_guard_condition+0x40>
 8015fe2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015fe4:	6842      	ldr	r2, [r0, #4]
 8015fe6:	695b      	ldr	r3, [r3, #20]
 8015fe8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015fec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015fee:	6913      	ldr	r3, [r2, #16]
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	2000      	movs	r0, #0
 8015ff4:	6113      	str	r3, [r2, #16]
 8015ff6:	bd70      	pop	{r4, r5, r6, pc}
 8015ff8:	2001      	movs	r0, #1
 8015ffa:	bd70      	pop	{r4, r5, r6, pc}
 8015ffc:	f240 3086 	movw	r0, #902	@ 0x386
 8016000:	bd70      	pop	{r4, r5, r6, pc}
 8016002:	200b      	movs	r0, #11
 8016004:	4770      	bx	lr
 8016006:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801600a:	bd70      	pop	{r4, r5, r6, pc}
 801600c:	200b      	movs	r0, #11
 801600e:	bd70      	pop	{r4, r5, r6, pc}

08016010 <rcl_wait_set_add_timer>:
 8016010:	b328      	cbz	r0, 801605e <rcl_wait_set_add_timer+0x4e>
 8016012:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016014:	b570      	push	{r4, r5, r6, lr}
 8016016:	4604      	mov	r4, r0
 8016018:	b31b      	cbz	r3, 8016062 <rcl_wait_set_add_timer+0x52>
 801601a:	b329      	cbz	r1, 8016068 <rcl_wait_set_add_timer+0x58>
 801601c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801601e:	6965      	ldr	r5, [r4, #20]
 8016020:	42a8      	cmp	r0, r5
 8016022:	d219      	bcs.n	8016058 <rcl_wait_set_add_timer+0x48>
 8016024:	6925      	ldr	r5, [r4, #16]
 8016026:	1c46      	adds	r6, r0, #1
 8016028:	641e      	str	r6, [r3, #64]	@ 0x40
 801602a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801602e:	b102      	cbz	r2, 8016032 <rcl_wait_set_add_timer+0x22>
 8016030:	6010      	str	r0, [r2, #0]
 8016032:	4608      	mov	r0, r1
 8016034:	f7ff fad4 	bl	80155e0 <rcl_timer_get_guard_condition>
 8016038:	b168      	cbz	r0, 8016056 <rcl_wait_set_add_timer+0x46>
 801603a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801603c:	68e3      	ldr	r3, [r4, #12]
 801603e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016040:	3b01      	subs	r3, #1
 8016042:	441d      	add	r5, r3
 8016044:	f7fe fc2e 	bl	80148a4 <rcl_guard_condition_get_rmw_handle>
 8016048:	b180      	cbz	r0, 801606c <rcl_wait_set_add_timer+0x5c>
 801604a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801604c:	6842      	ldr	r2, [r0, #4]
 801604e:	695b      	ldr	r3, [r3, #20]
 8016050:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016054:	2000      	movs	r0, #0
 8016056:	bd70      	pop	{r4, r5, r6, pc}
 8016058:	f240 3086 	movw	r0, #902	@ 0x386
 801605c:	bd70      	pop	{r4, r5, r6, pc}
 801605e:	200b      	movs	r0, #11
 8016060:	4770      	bx	lr
 8016062:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016066:	bd70      	pop	{r4, r5, r6, pc}
 8016068:	200b      	movs	r0, #11
 801606a:	bd70      	pop	{r4, r5, r6, pc}
 801606c:	2001      	movs	r0, #1
 801606e:	bd70      	pop	{r4, r5, r6, pc}

08016070 <rcl_wait_set_add_client>:
 8016070:	b318      	cbz	r0, 80160ba <rcl_wait_set_add_client+0x4a>
 8016072:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016074:	b570      	push	{r4, r5, r6, lr}
 8016076:	4604      	mov	r4, r0
 8016078:	b30b      	cbz	r3, 80160be <rcl_wait_set_add_client+0x4e>
 801607a:	b319      	cbz	r1, 80160c4 <rcl_wait_set_add_client+0x54>
 801607c:	699d      	ldr	r5, [r3, #24]
 801607e:	69c0      	ldr	r0, [r0, #28]
 8016080:	4285      	cmp	r5, r0
 8016082:	d217      	bcs.n	80160b4 <rcl_wait_set_add_client+0x44>
 8016084:	69a0      	ldr	r0, [r4, #24]
 8016086:	1c6e      	adds	r6, r5, #1
 8016088:	619e      	str	r6, [r3, #24]
 801608a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801608e:	b102      	cbz	r2, 8016092 <rcl_wait_set_add_client+0x22>
 8016090:	6015      	str	r5, [r2, #0]
 8016092:	4608      	mov	r0, r1
 8016094:	f7f6 fb04 	bl	800c6a0 <rcl_client_get_rmw_handle>
 8016098:	b150      	cbz	r0, 80160b0 <rcl_wait_set_add_client+0x40>
 801609a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801609c:	6842      	ldr	r2, [r0, #4]
 801609e:	6a1b      	ldr	r3, [r3, #32]
 80160a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80160a6:	69d3      	ldr	r3, [r2, #28]
 80160a8:	3301      	adds	r3, #1
 80160aa:	2000      	movs	r0, #0
 80160ac:	61d3      	str	r3, [r2, #28]
 80160ae:	bd70      	pop	{r4, r5, r6, pc}
 80160b0:	2001      	movs	r0, #1
 80160b2:	bd70      	pop	{r4, r5, r6, pc}
 80160b4:	f240 3086 	movw	r0, #902	@ 0x386
 80160b8:	bd70      	pop	{r4, r5, r6, pc}
 80160ba:	200b      	movs	r0, #11
 80160bc:	4770      	bx	lr
 80160be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80160c2:	bd70      	pop	{r4, r5, r6, pc}
 80160c4:	200b      	movs	r0, #11
 80160c6:	bd70      	pop	{r4, r5, r6, pc}

080160c8 <rcl_wait_set_add_service>:
 80160c8:	b318      	cbz	r0, 8016112 <rcl_wait_set_add_service+0x4a>
 80160ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80160cc:	b570      	push	{r4, r5, r6, lr}
 80160ce:	4604      	mov	r4, r0
 80160d0:	b30b      	cbz	r3, 8016116 <rcl_wait_set_add_service+0x4e>
 80160d2:	b319      	cbz	r1, 801611c <rcl_wait_set_add_service+0x54>
 80160d4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80160d6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80160d8:	4285      	cmp	r5, r0
 80160da:	d217      	bcs.n	801610c <rcl_wait_set_add_service+0x44>
 80160dc:	6a20      	ldr	r0, [r4, #32]
 80160de:	1c6e      	adds	r6, r5, #1
 80160e0:	625e      	str	r6, [r3, #36]	@ 0x24
 80160e2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80160e6:	b102      	cbz	r2, 80160ea <rcl_wait_set_add_service+0x22>
 80160e8:	6015      	str	r5, [r2, #0]
 80160ea:	4608      	mov	r0, r1
 80160ec:	f7fe fe02 	bl	8014cf4 <rcl_service_get_rmw_handle>
 80160f0:	b150      	cbz	r0, 8016108 <rcl_wait_set_add_service+0x40>
 80160f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160f4:	6842      	ldr	r2, [r0, #4]
 80160f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160fc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80160fe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016100:	3301      	adds	r3, #1
 8016102:	2000      	movs	r0, #0
 8016104:	6293      	str	r3, [r2, #40]	@ 0x28
 8016106:	bd70      	pop	{r4, r5, r6, pc}
 8016108:	2001      	movs	r0, #1
 801610a:	bd70      	pop	{r4, r5, r6, pc}
 801610c:	f240 3086 	movw	r0, #902	@ 0x386
 8016110:	bd70      	pop	{r4, r5, r6, pc}
 8016112:	200b      	movs	r0, #11
 8016114:	4770      	bx	lr
 8016116:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801611a:	bd70      	pop	{r4, r5, r6, pc}
 801611c:	200b      	movs	r0, #11
 801611e:	bd70      	pop	{r4, r5, r6, pc}

08016120 <rcl_wait>:
 8016120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016124:	ed2d 8b02 	vpush	{d8}
 8016128:	b08d      	sub	sp, #52	@ 0x34
 801612a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801612e:	2800      	cmp	r0, #0
 8016130:	f000 8143 	beq.w	80163ba <rcl_wait+0x29a>
 8016134:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016136:	4605      	mov	r5, r0
 8016138:	2e00      	cmp	r6, #0
 801613a:	f000 8112 	beq.w	8016362 <rcl_wait+0x242>
 801613e:	6843      	ldr	r3, [r0, #4]
 8016140:	b983      	cbnz	r3, 8016164 <rcl_wait+0x44>
 8016142:	68eb      	ldr	r3, [r5, #12]
 8016144:	b973      	cbnz	r3, 8016164 <rcl_wait+0x44>
 8016146:	696b      	ldr	r3, [r5, #20]
 8016148:	b963      	cbnz	r3, 8016164 <rcl_wait+0x44>
 801614a:	69eb      	ldr	r3, [r5, #28]
 801614c:	b953      	cbnz	r3, 8016164 <rcl_wait+0x44>
 801614e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016150:	b943      	cbnz	r3, 8016164 <rcl_wait+0x44>
 8016152:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8016154:	b933      	cbnz	r3, 8016164 <rcl_wait+0x44>
 8016156:	f240 3085 	movw	r0, #901	@ 0x385
 801615a:	b00d      	add	sp, #52	@ 0x34
 801615c:	ecbd 8b02 	vpop	{d8}
 8016160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016164:	9b04      	ldr	r3, [sp, #16]
 8016166:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016168:	2b01      	cmp	r3, #1
 801616a:	9b05      	ldr	r3, [sp, #20]
 801616c:	f173 0300 	sbcs.w	r3, r3, #0
 8016170:	f2c0 80f0 	blt.w	8016354 <rcl_wait+0x234>
 8016174:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016178:	4643      	mov	r3, r8
 801617a:	2a00      	cmp	r2, #0
 801617c:	f000 8133 	beq.w	80163e6 <rcl_wait+0x2c6>
 8016180:	2400      	movs	r4, #0
 8016182:	4613      	mov	r3, r2
 8016184:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80163f8 <rcl_wait+0x2d8>
 8016188:	46a2      	mov	sl, r4
 801618a:	46a3      	mov	fp, r4
 801618c:	f240 3921 	movw	r9, #801	@ 0x321
 8016190:	4632      	mov	r2, r6
 8016192:	e014      	b.n	80161be <rcl_wait+0x9e>
 8016194:	2800      	cmp	r0, #0
 8016196:	d1e0      	bne.n	801615a <rcl_wait+0x3a>
 8016198:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801619c:	4542      	cmp	r2, r8
 801619e:	eb73 0107 	sbcs.w	r1, r3, r7
 80161a2:	da03      	bge.n	80161ac <rcl_wait+0x8c>
 80161a4:	4690      	mov	r8, r2
 80161a6:	461f      	mov	r7, r3
 80161a8:	f04f 0b01 	mov.w	fp, #1
 80161ac:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80161ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80161b0:	3401      	adds	r4, #1
 80161b2:	f14a 0a00 	adc.w	sl, sl, #0
 80161b6:	429c      	cmp	r4, r3
 80161b8:	f17a 0100 	sbcs.w	r1, sl, #0
 80161bc:	d228      	bcs.n	8016210 <rcl_wait+0xf0>
 80161be:	6928      	ldr	r0, [r5, #16]
 80161c0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80161c4:	a908      	add	r1, sp, #32
 80161c6:	00a6      	lsls	r6, r4, #2
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d0f1      	beq.n	80161b0 <rcl_wait+0x90>
 80161cc:	68eb      	ldr	r3, [r5, #12]
 80161ce:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80161d2:	4423      	add	r3, r4
 80161d4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80161d8:	f1be 0f00 	cmp.w	lr, #0
 80161dc:	d006      	beq.n	80161ec <rcl_wait+0xcc>
 80161de:	6913      	ldr	r3, [r2, #16]
 80161e0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80161e4:	3301      	adds	r3, #1
 80161e6:	6113      	str	r3, [r2, #16]
 80161e8:	692b      	ldr	r3, [r5, #16]
 80161ea:	5998      	ldr	r0, [r3, r6]
 80161ec:	ed8d 8b08 	vstr	d8, [sp, #32]
 80161f0:	f7ff f9c4 	bl	801557c <rcl_timer_get_time_until_next_call>
 80161f4:	4548      	cmp	r0, r9
 80161f6:	d1cd      	bne.n	8016194 <rcl_wait+0x74>
 80161f8:	692b      	ldr	r3, [r5, #16]
 80161fa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80161fc:	2100      	movs	r1, #0
 80161fe:	5199      	str	r1, [r3, r6]
 8016200:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016202:	3401      	adds	r4, #1
 8016204:	f14a 0a00 	adc.w	sl, sl, #0
 8016208:	429c      	cmp	r4, r3
 801620a:	f17a 0100 	sbcs.w	r1, sl, #0
 801620e:	d3d6      	bcc.n	80161be <rcl_wait+0x9e>
 8016210:	4616      	mov	r6, r2
 8016212:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016216:	4313      	orrs	r3, r2
 8016218:	46d9      	mov	r9, fp
 801621a:	f040 80a9 	bne.w	8016370 <rcl_wait+0x250>
 801621e:	2300      	movs	r3, #0
 8016220:	2200      	movs	r2, #0
 8016222:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016226:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801622a:	ab08      	add	r3, sp, #32
 801622c:	9302      	str	r3, [sp, #8]
 801622e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016230:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8016234:	e9cd 3200 	strd	r3, r2, [sp]
 8016238:	f106 0110 	add.w	r1, r6, #16
 801623c:	f106 031c 	add.w	r3, r6, #28
 8016240:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8016244:	1d30      	adds	r0, r6, #4
 8016246:	f001 f919 	bl	801747c <rmw_wait>
 801624a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801624c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801624e:	4680      	mov	r8, r0
 8016250:	b1ca      	cbz	r2, 8016286 <rcl_wait+0x166>
 8016252:	2400      	movs	r4, #0
 8016254:	4627      	mov	r7, r4
 8016256:	692a      	ldr	r2, [r5, #16]
 8016258:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801625c:	f10d 011f 	add.w	r1, sp, #31
 8016260:	00a6      	lsls	r6, r4, #2
 8016262:	b160      	cbz	r0, 801627e <rcl_wait+0x15e>
 8016264:	f88d 701f 	strb.w	r7, [sp, #31]
 8016268:	f7ff f94e 	bl	8015508 <rcl_timer_is_ready>
 801626c:	2800      	cmp	r0, #0
 801626e:	f47f af74 	bne.w	801615a <rcl_wait+0x3a>
 8016272:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016276:	b90b      	cbnz	r3, 801627c <rcl_wait+0x15c>
 8016278:	692a      	ldr	r2, [r5, #16]
 801627a:	5193      	str	r3, [r2, r6]
 801627c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801627e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016280:	3401      	adds	r4, #1
 8016282:	42a2      	cmp	r2, r4
 8016284:	d8e7      	bhi.n	8016256 <rcl_wait+0x136>
 8016286:	f038 0002 	bics.w	r0, r8, #2
 801628a:	f040 8090 	bne.w	80163ae <rcl_wait+0x28e>
 801628e:	686e      	ldr	r6, [r5, #4]
 8016290:	4602      	mov	r2, r0
 8016292:	b91e      	cbnz	r6, 801629c <rcl_wait+0x17c>
 8016294:	e00d      	b.n	80162b2 <rcl_wait+0x192>
 8016296:	3201      	adds	r2, #1
 8016298:	42b2      	cmp	r2, r6
 801629a:	d00a      	beq.n	80162b2 <rcl_wait+0x192>
 801629c:	6899      	ldr	r1, [r3, #8]
 801629e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80162a2:	2900      	cmp	r1, #0
 80162a4:	d1f7      	bne.n	8016296 <rcl_wait+0x176>
 80162a6:	682c      	ldr	r4, [r5, #0]
 80162a8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80162ac:	3201      	adds	r2, #1
 80162ae:	42b2      	cmp	r2, r6
 80162b0:	d1f4      	bne.n	801629c <rcl_wait+0x17c>
 80162b2:	68ee      	ldr	r6, [r5, #12]
 80162b4:	2200      	movs	r2, #0
 80162b6:	b91e      	cbnz	r6, 80162c0 <rcl_wait+0x1a0>
 80162b8:	e00d      	b.n	80162d6 <rcl_wait+0x1b6>
 80162ba:	3201      	adds	r2, #1
 80162bc:	42b2      	cmp	r2, r6
 80162be:	d00a      	beq.n	80162d6 <rcl_wait+0x1b6>
 80162c0:	6959      	ldr	r1, [r3, #20]
 80162c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80162c6:	2900      	cmp	r1, #0
 80162c8:	d1f7      	bne.n	80162ba <rcl_wait+0x19a>
 80162ca:	68ac      	ldr	r4, [r5, #8]
 80162cc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80162d0:	3201      	adds	r2, #1
 80162d2:	42b2      	cmp	r2, r6
 80162d4:	d1f4      	bne.n	80162c0 <rcl_wait+0x1a0>
 80162d6:	69ee      	ldr	r6, [r5, #28]
 80162d8:	2200      	movs	r2, #0
 80162da:	b91e      	cbnz	r6, 80162e4 <rcl_wait+0x1c4>
 80162dc:	e00d      	b.n	80162fa <rcl_wait+0x1da>
 80162de:	3201      	adds	r2, #1
 80162e0:	42b2      	cmp	r2, r6
 80162e2:	d00a      	beq.n	80162fa <rcl_wait+0x1da>
 80162e4:	6a19      	ldr	r1, [r3, #32]
 80162e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80162ea:	2900      	cmp	r1, #0
 80162ec:	d1f7      	bne.n	80162de <rcl_wait+0x1be>
 80162ee:	69ac      	ldr	r4, [r5, #24]
 80162f0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80162f4:	3201      	adds	r2, #1
 80162f6:	42b2      	cmp	r2, r6
 80162f8:	d1f4      	bne.n	80162e4 <rcl_wait+0x1c4>
 80162fa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80162fc:	2200      	movs	r2, #0
 80162fe:	b91e      	cbnz	r6, 8016308 <rcl_wait+0x1e8>
 8016300:	e00d      	b.n	801631e <rcl_wait+0x1fe>
 8016302:	3201      	adds	r2, #1
 8016304:	4296      	cmp	r6, r2
 8016306:	d00a      	beq.n	801631e <rcl_wait+0x1fe>
 8016308:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801630a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801630e:	2900      	cmp	r1, #0
 8016310:	d1f7      	bne.n	8016302 <rcl_wait+0x1e2>
 8016312:	6a2c      	ldr	r4, [r5, #32]
 8016314:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016318:	3201      	adds	r2, #1
 801631a:	4296      	cmp	r6, r2
 801631c:	d1f4      	bne.n	8016308 <rcl_wait+0x1e8>
 801631e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016320:	2200      	movs	r2, #0
 8016322:	b91e      	cbnz	r6, 801632c <rcl_wait+0x20c>
 8016324:	e00d      	b.n	8016342 <rcl_wait+0x222>
 8016326:	3201      	adds	r2, #1
 8016328:	42b2      	cmp	r2, r6
 801632a:	d00a      	beq.n	8016342 <rcl_wait+0x222>
 801632c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801632e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016332:	2900      	cmp	r1, #0
 8016334:	d1f7      	bne.n	8016326 <rcl_wait+0x206>
 8016336:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016338:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801633c:	3201      	adds	r2, #1
 801633e:	42b2      	cmp	r2, r6
 8016340:	d1f4      	bne.n	801632c <rcl_wait+0x20c>
 8016342:	f1b8 0f02 	cmp.w	r8, #2
 8016346:	f47f af08 	bne.w	801615a <rcl_wait+0x3a>
 801634a:	464b      	mov	r3, r9
 801634c:	2b00      	cmp	r3, #0
 801634e:	bf08      	it	eq
 8016350:	2002      	moveq	r0, #2
 8016352:	e702      	b.n	801615a <rcl_wait+0x3a>
 8016354:	2a00      	cmp	r2, #0
 8016356:	d03a      	beq.n	80163ce <rcl_wait+0x2ae>
 8016358:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801635c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016360:	e70e      	b.n	8016180 <rcl_wait+0x60>
 8016362:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016366:	b00d      	add	sp, #52	@ 0x34
 8016368:	ecbd 8b02 	vpop	{d8}
 801636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016370:	9b04      	ldr	r3, [sp, #16]
 8016372:	2b01      	cmp	r3, #1
 8016374:	9b05      	ldr	r3, [sp, #20]
 8016376:	f173 0300 	sbcs.w	r3, r3, #0
 801637a:	db24      	blt.n	80163c6 <rcl_wait+0x2a6>
 801637c:	2f00      	cmp	r7, #0
 801637e:	bfbc      	itt	lt
 8016380:	f04f 0800 	movlt.w	r8, #0
 8016384:	4647      	movlt	r7, r8
 8016386:	a31e      	add	r3, pc, #120	@ (adr r3, 8016400 <rcl_wait+0x2e0>)
 8016388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638c:	4640      	mov	r0, r8
 801638e:	4639      	mov	r1, r7
 8016390:	f7ea f9ba 	bl	8000708 <__aeabi_ldivmod>
 8016394:	a31a      	add	r3, pc, #104	@ (adr r3, 8016400 <rcl_wait+0x2e0>)
 8016396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801639a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801639e:	4640      	mov	r0, r8
 80163a0:	4639      	mov	r1, r7
 80163a2:	f7ea f9b1 	bl	8000708 <__aeabi_ldivmod>
 80163a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80163aa:	ab08      	add	r3, sp, #32
 80163ac:	e73e      	b.n	801622c <rcl_wait+0x10c>
 80163ae:	2001      	movs	r0, #1
 80163b0:	b00d      	add	sp, #52	@ 0x34
 80163b2:	ecbd 8b02 	vpop	{d8}
 80163b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ba:	200b      	movs	r0, #11
 80163bc:	b00d      	add	sp, #52	@ 0x34
 80163be:	ecbd 8b02 	vpop	{d8}
 80163c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163c6:	465b      	mov	r3, fp
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1d7      	bne.n	801637c <rcl_wait+0x25c>
 80163cc:	e72e      	b.n	801622c <rcl_wait+0x10c>
 80163ce:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80163d2:	430b      	orrs	r3, r1
 80163d4:	bf08      	it	eq
 80163d6:	4691      	moveq	r9, r2
 80163d8:	f43f af21 	beq.w	801621e <rcl_wait+0xfe>
 80163dc:	9b04      	ldr	r3, [sp, #16]
 80163de:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80163e2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	9b05      	ldr	r3, [sp, #20]
 80163ea:	f173 0300 	sbcs.w	r3, r3, #0
 80163ee:	f04f 0300 	mov.w	r3, #0
 80163f2:	4699      	mov	r9, r3
 80163f4:	dac2      	bge.n	801637c <rcl_wait+0x25c>
 80163f6:	e719      	b.n	801622c <rcl_wait+0x10c>
 80163f8:	ffffffff 	.word	0xffffffff
 80163fc:	7fffffff 	.word	0x7fffffff
 8016400:	3b9aca00 	.word	0x3b9aca00
 8016404:	00000000 	.word	0x00000000

08016408 <rcl_action_take_goal_response>:
 8016408:	2800      	cmp	r0, #0
 801640a:	d039      	beq.n	8016480 <rcl_action_take_goal_response+0x78>
 801640c:	b570      	push	{r4, r5, r6, lr}
 801640e:	4604      	mov	r4, r0
 8016410:	6800      	ldr	r0, [r0, #0]
 8016412:	b380      	cbz	r0, 8016476 <rcl_action_take_goal_response+0x6e>
 8016414:	460d      	mov	r5, r1
 8016416:	4616      	mov	r6, r2
 8016418:	f7f6 f9c6 	bl	800c7a8 <rcl_client_is_valid>
 801641c:	b330      	cbz	r0, 801646c <rcl_action_take_goal_response+0x64>
 801641e:	6820      	ldr	r0, [r4, #0]
 8016420:	3004      	adds	r0, #4
 8016422:	f7f6 f9c1 	bl	800c7a8 <rcl_client_is_valid>
 8016426:	b308      	cbz	r0, 801646c <rcl_action_take_goal_response+0x64>
 8016428:	6820      	ldr	r0, [r4, #0]
 801642a:	3008      	adds	r0, #8
 801642c:	f7f6 f9bc 	bl	800c7a8 <rcl_client_is_valid>
 8016430:	b1e0      	cbz	r0, 801646c <rcl_action_take_goal_response+0x64>
 8016432:	6820      	ldr	r0, [r4, #0]
 8016434:	300c      	adds	r0, #12
 8016436:	f7fe fd23 	bl	8014e80 <rcl_subscription_is_valid>
 801643a:	b1b8      	cbz	r0, 801646c <rcl_action_take_goal_response+0x64>
 801643c:	6820      	ldr	r0, [r4, #0]
 801643e:	3010      	adds	r0, #16
 8016440:	f7fe fd1e 	bl	8014e80 <rcl_subscription_is_valid>
 8016444:	b190      	cbz	r0, 801646c <rcl_action_take_goal_response+0x64>
 8016446:	b1cd      	cbz	r5, 801647c <rcl_action_take_goal_response+0x74>
 8016448:	b1c6      	cbz	r6, 801647c <rcl_action_take_goal_response+0x74>
 801644a:	6820      	ldr	r0, [r4, #0]
 801644c:	4632      	mov	r2, r6
 801644e:	4629      	mov	r1, r5
 8016450:	f7f6 f962 	bl	800c718 <rcl_take_response>
 8016454:	b148      	cbz	r0, 801646a <rcl_action_take_goal_response+0x62>
 8016456:	280a      	cmp	r0, #10
 8016458:	d007      	beq.n	801646a <rcl_action_take_goal_response+0x62>
 801645a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801645e:	f640 0337 	movw	r3, #2103	@ 0x837
 8016462:	4290      	cmp	r0, r2
 8016464:	bf0c      	ite	eq
 8016466:	4618      	moveq	r0, r3
 8016468:	2001      	movne	r0, #1
 801646a:	bd70      	pop	{r4, r5, r6, pc}
 801646c:	f7f7 fe50 	bl	800e110 <rcutils_reset_error>
 8016470:	f640 0036 	movw	r0, #2102	@ 0x836
 8016474:	bd70      	pop	{r4, r5, r6, pc}
 8016476:	f640 0036 	movw	r0, #2102	@ 0x836
 801647a:	bd70      	pop	{r4, r5, r6, pc}
 801647c:	200b      	movs	r0, #11
 801647e:	bd70      	pop	{r4, r5, r6, pc}
 8016480:	f640 0036 	movw	r0, #2102	@ 0x836
 8016484:	4770      	bx	lr
 8016486:	bf00      	nop

08016488 <rcl_action_send_result_request>:
 8016488:	b390      	cbz	r0, 80164f0 <rcl_action_send_result_request+0x68>
 801648a:	b570      	push	{r4, r5, r6, lr}
 801648c:	4604      	mov	r4, r0
 801648e:	6800      	ldr	r0, [r0, #0]
 8016490:	b348      	cbz	r0, 80164e6 <rcl_action_send_result_request+0x5e>
 8016492:	460d      	mov	r5, r1
 8016494:	4616      	mov	r6, r2
 8016496:	f7f6 f987 	bl	800c7a8 <rcl_client_is_valid>
 801649a:	b1f8      	cbz	r0, 80164dc <rcl_action_send_result_request+0x54>
 801649c:	6820      	ldr	r0, [r4, #0]
 801649e:	3004      	adds	r0, #4
 80164a0:	f7f6 f982 	bl	800c7a8 <rcl_client_is_valid>
 80164a4:	b1d0      	cbz	r0, 80164dc <rcl_action_send_result_request+0x54>
 80164a6:	6820      	ldr	r0, [r4, #0]
 80164a8:	3008      	adds	r0, #8
 80164aa:	f7f6 f97d 	bl	800c7a8 <rcl_client_is_valid>
 80164ae:	b1a8      	cbz	r0, 80164dc <rcl_action_send_result_request+0x54>
 80164b0:	6820      	ldr	r0, [r4, #0]
 80164b2:	300c      	adds	r0, #12
 80164b4:	f7fe fce4 	bl	8014e80 <rcl_subscription_is_valid>
 80164b8:	b180      	cbz	r0, 80164dc <rcl_action_send_result_request+0x54>
 80164ba:	6820      	ldr	r0, [r4, #0]
 80164bc:	3010      	adds	r0, #16
 80164be:	f7fe fcdf 	bl	8014e80 <rcl_subscription_is_valid>
 80164c2:	b158      	cbz	r0, 80164dc <rcl_action_send_result_request+0x54>
 80164c4:	b195      	cbz	r5, 80164ec <rcl_action_send_result_request+0x64>
 80164c6:	b18e      	cbz	r6, 80164ec <rcl_action_send_result_request+0x64>
 80164c8:	6820      	ldr	r0, [r4, #0]
 80164ca:	4632      	mov	r2, r6
 80164cc:	4629      	mov	r1, r5
 80164ce:	3008      	adds	r0, #8
 80164d0:	f7f6 f8ec 	bl	800c6ac <rcl_send_request>
 80164d4:	3800      	subs	r0, #0
 80164d6:	bf18      	it	ne
 80164d8:	2001      	movne	r0, #1
 80164da:	bd70      	pop	{r4, r5, r6, pc}
 80164dc:	f7f7 fe18 	bl	800e110 <rcutils_reset_error>
 80164e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80164e4:	bd70      	pop	{r4, r5, r6, pc}
 80164e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80164ea:	bd70      	pop	{r4, r5, r6, pc}
 80164ec:	200b      	movs	r0, #11
 80164ee:	bd70      	pop	{r4, r5, r6, pc}
 80164f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80164f4:	4770      	bx	lr
 80164f6:	bf00      	nop

080164f8 <rcl_action_take_result_response>:
 80164f8:	2800      	cmp	r0, #0
 80164fa:	d03a      	beq.n	8016572 <rcl_action_take_result_response+0x7a>
 80164fc:	b570      	push	{r4, r5, r6, lr}
 80164fe:	4604      	mov	r4, r0
 8016500:	6800      	ldr	r0, [r0, #0]
 8016502:	b388      	cbz	r0, 8016568 <rcl_action_take_result_response+0x70>
 8016504:	460d      	mov	r5, r1
 8016506:	4616      	mov	r6, r2
 8016508:	f7f6 f94e 	bl	800c7a8 <rcl_client_is_valid>
 801650c:	b338      	cbz	r0, 801655e <rcl_action_take_result_response+0x66>
 801650e:	6820      	ldr	r0, [r4, #0]
 8016510:	3004      	adds	r0, #4
 8016512:	f7f6 f949 	bl	800c7a8 <rcl_client_is_valid>
 8016516:	b310      	cbz	r0, 801655e <rcl_action_take_result_response+0x66>
 8016518:	6820      	ldr	r0, [r4, #0]
 801651a:	3008      	adds	r0, #8
 801651c:	f7f6 f944 	bl	800c7a8 <rcl_client_is_valid>
 8016520:	b1e8      	cbz	r0, 801655e <rcl_action_take_result_response+0x66>
 8016522:	6820      	ldr	r0, [r4, #0]
 8016524:	300c      	adds	r0, #12
 8016526:	f7fe fcab 	bl	8014e80 <rcl_subscription_is_valid>
 801652a:	b1c0      	cbz	r0, 801655e <rcl_action_take_result_response+0x66>
 801652c:	6820      	ldr	r0, [r4, #0]
 801652e:	3010      	adds	r0, #16
 8016530:	f7fe fca6 	bl	8014e80 <rcl_subscription_is_valid>
 8016534:	b198      	cbz	r0, 801655e <rcl_action_take_result_response+0x66>
 8016536:	b1d5      	cbz	r5, 801656e <rcl_action_take_result_response+0x76>
 8016538:	b1ce      	cbz	r6, 801656e <rcl_action_take_result_response+0x76>
 801653a:	6820      	ldr	r0, [r4, #0]
 801653c:	4632      	mov	r2, r6
 801653e:	4629      	mov	r1, r5
 8016540:	3008      	adds	r0, #8
 8016542:	f7f6 f8e9 	bl	800c718 <rcl_take_response>
 8016546:	b148      	cbz	r0, 801655c <rcl_action_take_result_response+0x64>
 8016548:	280a      	cmp	r0, #10
 801654a:	d007      	beq.n	801655c <rcl_action_take_result_response+0x64>
 801654c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016550:	f640 0337 	movw	r3, #2103	@ 0x837
 8016554:	4290      	cmp	r0, r2
 8016556:	bf0c      	ite	eq
 8016558:	4618      	moveq	r0, r3
 801655a:	2001      	movne	r0, #1
 801655c:	bd70      	pop	{r4, r5, r6, pc}
 801655e:	f7f7 fdd7 	bl	800e110 <rcutils_reset_error>
 8016562:	f640 0036 	movw	r0, #2102	@ 0x836
 8016566:	bd70      	pop	{r4, r5, r6, pc}
 8016568:	f640 0036 	movw	r0, #2102	@ 0x836
 801656c:	bd70      	pop	{r4, r5, r6, pc}
 801656e:	200b      	movs	r0, #11
 8016570:	bd70      	pop	{r4, r5, r6, pc}
 8016572:	f640 0036 	movw	r0, #2102	@ 0x836
 8016576:	4770      	bx	lr

08016578 <rcl_action_take_cancel_response>:
 8016578:	2800      	cmp	r0, #0
 801657a:	d03a      	beq.n	80165f2 <rcl_action_take_cancel_response+0x7a>
 801657c:	b570      	push	{r4, r5, r6, lr}
 801657e:	4604      	mov	r4, r0
 8016580:	6800      	ldr	r0, [r0, #0]
 8016582:	b388      	cbz	r0, 80165e8 <rcl_action_take_cancel_response+0x70>
 8016584:	460d      	mov	r5, r1
 8016586:	4616      	mov	r6, r2
 8016588:	f7f6 f90e 	bl	800c7a8 <rcl_client_is_valid>
 801658c:	b338      	cbz	r0, 80165de <rcl_action_take_cancel_response+0x66>
 801658e:	6820      	ldr	r0, [r4, #0]
 8016590:	3004      	adds	r0, #4
 8016592:	f7f6 f909 	bl	800c7a8 <rcl_client_is_valid>
 8016596:	b310      	cbz	r0, 80165de <rcl_action_take_cancel_response+0x66>
 8016598:	6820      	ldr	r0, [r4, #0]
 801659a:	3008      	adds	r0, #8
 801659c:	f7f6 f904 	bl	800c7a8 <rcl_client_is_valid>
 80165a0:	b1e8      	cbz	r0, 80165de <rcl_action_take_cancel_response+0x66>
 80165a2:	6820      	ldr	r0, [r4, #0]
 80165a4:	300c      	adds	r0, #12
 80165a6:	f7fe fc6b 	bl	8014e80 <rcl_subscription_is_valid>
 80165aa:	b1c0      	cbz	r0, 80165de <rcl_action_take_cancel_response+0x66>
 80165ac:	6820      	ldr	r0, [r4, #0]
 80165ae:	3010      	adds	r0, #16
 80165b0:	f7fe fc66 	bl	8014e80 <rcl_subscription_is_valid>
 80165b4:	b198      	cbz	r0, 80165de <rcl_action_take_cancel_response+0x66>
 80165b6:	b1d5      	cbz	r5, 80165ee <rcl_action_take_cancel_response+0x76>
 80165b8:	b1ce      	cbz	r6, 80165ee <rcl_action_take_cancel_response+0x76>
 80165ba:	6820      	ldr	r0, [r4, #0]
 80165bc:	4632      	mov	r2, r6
 80165be:	4629      	mov	r1, r5
 80165c0:	3004      	adds	r0, #4
 80165c2:	f7f6 f8a9 	bl	800c718 <rcl_take_response>
 80165c6:	b148      	cbz	r0, 80165dc <rcl_action_take_cancel_response+0x64>
 80165c8:	280a      	cmp	r0, #10
 80165ca:	d007      	beq.n	80165dc <rcl_action_take_cancel_response+0x64>
 80165cc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80165d0:	f640 0337 	movw	r3, #2103	@ 0x837
 80165d4:	4290      	cmp	r0, r2
 80165d6:	bf0c      	ite	eq
 80165d8:	4618      	moveq	r0, r3
 80165da:	2001      	movne	r0, #1
 80165dc:	bd70      	pop	{r4, r5, r6, pc}
 80165de:	f7f7 fd97 	bl	800e110 <rcutils_reset_error>
 80165e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80165e6:	bd70      	pop	{r4, r5, r6, pc}
 80165e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80165ec:	bd70      	pop	{r4, r5, r6, pc}
 80165ee:	200b      	movs	r0, #11
 80165f0:	bd70      	pop	{r4, r5, r6, pc}
 80165f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80165f6:	4770      	bx	lr

080165f8 <rcl_action_take_feedback>:
 80165f8:	2800      	cmp	r0, #0
 80165fa:	d038      	beq.n	801666e <rcl_action_take_feedback+0x76>
 80165fc:	b530      	push	{r4, r5, lr}
 80165fe:	4604      	mov	r4, r0
 8016600:	6800      	ldr	r0, [r0, #0]
 8016602:	b091      	sub	sp, #68	@ 0x44
 8016604:	b378      	cbz	r0, 8016666 <rcl_action_take_feedback+0x6e>
 8016606:	460d      	mov	r5, r1
 8016608:	f7f6 f8ce 	bl	800c7a8 <rcl_client_is_valid>
 801660c:	b328      	cbz	r0, 801665a <rcl_action_take_feedback+0x62>
 801660e:	6820      	ldr	r0, [r4, #0]
 8016610:	3004      	adds	r0, #4
 8016612:	f7f6 f8c9 	bl	800c7a8 <rcl_client_is_valid>
 8016616:	b300      	cbz	r0, 801665a <rcl_action_take_feedback+0x62>
 8016618:	6820      	ldr	r0, [r4, #0]
 801661a:	3008      	adds	r0, #8
 801661c:	f7f6 f8c4 	bl	800c7a8 <rcl_client_is_valid>
 8016620:	b1d8      	cbz	r0, 801665a <rcl_action_take_feedback+0x62>
 8016622:	6820      	ldr	r0, [r4, #0]
 8016624:	300c      	adds	r0, #12
 8016626:	f7fe fc2b 	bl	8014e80 <rcl_subscription_is_valid>
 801662a:	b1b0      	cbz	r0, 801665a <rcl_action_take_feedback+0x62>
 801662c:	6820      	ldr	r0, [r4, #0]
 801662e:	3010      	adds	r0, #16
 8016630:	f7fe fc26 	bl	8014e80 <rcl_subscription_is_valid>
 8016634:	b188      	cbz	r0, 801665a <rcl_action_take_feedback+0x62>
 8016636:	b1ed      	cbz	r5, 8016674 <rcl_action_take_feedback+0x7c>
 8016638:	6820      	ldr	r0, [r4, #0]
 801663a:	2300      	movs	r3, #0
 801663c:	466a      	mov	r2, sp
 801663e:	4629      	mov	r1, r5
 8016640:	300c      	adds	r0, #12
 8016642:	f7fe fbbf 	bl	8014dc4 <rcl_take>
 8016646:	b160      	cbz	r0, 8016662 <rcl_action_take_feedback+0x6a>
 8016648:	f240 1391 	movw	r3, #401	@ 0x191
 801664c:	4298      	cmp	r0, r3
 801664e:	d014      	beq.n	801667a <rcl_action_take_feedback+0x82>
 8016650:	280a      	cmp	r0, #10
 8016652:	bf18      	it	ne
 8016654:	2001      	movne	r0, #1
 8016656:	b011      	add	sp, #68	@ 0x44
 8016658:	bd30      	pop	{r4, r5, pc}
 801665a:	f7f7 fd59 	bl	800e110 <rcutils_reset_error>
 801665e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016662:	b011      	add	sp, #68	@ 0x44
 8016664:	bd30      	pop	{r4, r5, pc}
 8016666:	f640 0036 	movw	r0, #2102	@ 0x836
 801666a:	b011      	add	sp, #68	@ 0x44
 801666c:	bd30      	pop	{r4, r5, pc}
 801666e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016672:	4770      	bx	lr
 8016674:	200b      	movs	r0, #11
 8016676:	b011      	add	sp, #68	@ 0x44
 8016678:	bd30      	pop	{r4, r5, pc}
 801667a:	f640 0037 	movw	r0, #2103	@ 0x837
 801667e:	e7f0      	b.n	8016662 <rcl_action_take_feedback+0x6a>

08016680 <rcl_action_wait_set_add_action_client>:
 8016680:	2800      	cmp	r0, #0
 8016682:	d048      	beq.n	8016716 <rcl_action_wait_set_add_action_client+0x96>
 8016684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016686:	460c      	mov	r4, r1
 8016688:	2900      	cmp	r1, #0
 801668a:	d03c      	beq.n	8016706 <rcl_action_wait_set_add_action_client+0x86>
 801668c:	4605      	mov	r5, r0
 801668e:	6808      	ldr	r0, [r1, #0]
 8016690:	2800      	cmp	r0, #0
 8016692:	d038      	beq.n	8016706 <rcl_action_wait_set_add_action_client+0x86>
 8016694:	4617      	mov	r7, r2
 8016696:	461e      	mov	r6, r3
 8016698:	f7f6 f886 	bl	800c7a8 <rcl_client_is_valid>
 801669c:	b3b0      	cbz	r0, 801670c <rcl_action_wait_set_add_action_client+0x8c>
 801669e:	6820      	ldr	r0, [r4, #0]
 80166a0:	3004      	adds	r0, #4
 80166a2:	f7f6 f881 	bl	800c7a8 <rcl_client_is_valid>
 80166a6:	b388      	cbz	r0, 801670c <rcl_action_wait_set_add_action_client+0x8c>
 80166a8:	6820      	ldr	r0, [r4, #0]
 80166aa:	3008      	adds	r0, #8
 80166ac:	f7f6 f87c 	bl	800c7a8 <rcl_client_is_valid>
 80166b0:	b360      	cbz	r0, 801670c <rcl_action_wait_set_add_action_client+0x8c>
 80166b2:	6820      	ldr	r0, [r4, #0]
 80166b4:	300c      	adds	r0, #12
 80166b6:	f7fe fbe3 	bl	8014e80 <rcl_subscription_is_valid>
 80166ba:	b338      	cbz	r0, 801670c <rcl_action_wait_set_add_action_client+0x8c>
 80166bc:	6820      	ldr	r0, [r4, #0]
 80166be:	3010      	adds	r0, #16
 80166c0:	f7fe fbde 	bl	8014e80 <rcl_subscription_is_valid>
 80166c4:	b310      	cbz	r0, 801670c <rcl_action_wait_set_add_action_client+0x8c>
 80166c6:	6821      	ldr	r1, [r4, #0]
 80166c8:	4628      	mov	r0, r5
 80166ca:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80166ce:	f7ff fccf 	bl	8016070 <rcl_wait_set_add_client>
 80166d2:	b9b8      	cbnz	r0, 8016704 <rcl_action_wait_set_add_action_client+0x84>
 80166d4:	6821      	ldr	r1, [r4, #0]
 80166d6:	4628      	mov	r0, r5
 80166d8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80166dc:	3104      	adds	r1, #4
 80166de:	f7ff fcc7 	bl	8016070 <rcl_wait_set_add_client>
 80166e2:	b978      	cbnz	r0, 8016704 <rcl_action_wait_set_add_action_client+0x84>
 80166e4:	6821      	ldr	r1, [r4, #0]
 80166e6:	4628      	mov	r0, r5
 80166e8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80166ec:	3108      	adds	r1, #8
 80166ee:	f7ff fcbf 	bl	8016070 <rcl_wait_set_add_client>
 80166f2:	b938      	cbnz	r0, 8016704 <rcl_action_wait_set_add_action_client+0x84>
 80166f4:	6821      	ldr	r1, [r4, #0]
 80166f6:	4628      	mov	r0, r5
 80166f8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80166fc:	310c      	adds	r1, #12
 80166fe:	f7ff f96f 	bl	80159e0 <rcl_wait_set_add_subscription>
 8016702:	b158      	cbz	r0, 801671c <rcl_action_wait_set_add_action_client+0x9c>
 8016704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016706:	f640 0036 	movw	r0, #2102	@ 0x836
 801670a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801670c:	f7f7 fd00 	bl	800e110 <rcutils_reset_error>
 8016710:	f640 0036 	movw	r0, #2102	@ 0x836
 8016714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016716:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801671a:	4770      	bx	lr
 801671c:	6821      	ldr	r1, [r4, #0]
 801671e:	4628      	mov	r0, r5
 8016720:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016724:	3110      	adds	r1, #16
 8016726:	f7ff f95b 	bl	80159e0 <rcl_wait_set_add_subscription>
 801672a:	2800      	cmp	r0, #0
 801672c:	d1ea      	bne.n	8016704 <rcl_action_wait_set_add_action_client+0x84>
 801672e:	b11f      	cbz	r7, 8016738 <rcl_action_wait_set_add_action_client+0xb8>
 8016730:	6823      	ldr	r3, [r4, #0]
 8016732:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016736:	603b      	str	r3, [r7, #0]
 8016738:	2e00      	cmp	r6, #0
 801673a:	d0e3      	beq.n	8016704 <rcl_action_wait_set_add_action_client+0x84>
 801673c:	6823      	ldr	r3, [r4, #0]
 801673e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016742:	6033      	str	r3, [r6, #0]
 8016744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016746:	bf00      	nop

08016748 <rcl_action_client_wait_set_get_entities_ready>:
 8016748:	2800      	cmp	r0, #0
 801674a:	f000 808d 	beq.w	8016868 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801674e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016752:	460c      	mov	r4, r1
 8016754:	2900      	cmp	r1, #0
 8016756:	d077      	beq.n	8016848 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016758:	4605      	mov	r5, r0
 801675a:	6808      	ldr	r0, [r1, #0]
 801675c:	2800      	cmp	r0, #0
 801675e:	d073      	beq.n	8016848 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016760:	4616      	mov	r6, r2
 8016762:	461f      	mov	r7, r3
 8016764:	f7f6 f820 	bl	800c7a8 <rcl_client_is_valid>
 8016768:	2800      	cmp	r0, #0
 801676a:	d071      	beq.n	8016850 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801676c:	6820      	ldr	r0, [r4, #0]
 801676e:	3004      	adds	r0, #4
 8016770:	f7f6 f81a 	bl	800c7a8 <rcl_client_is_valid>
 8016774:	2800      	cmp	r0, #0
 8016776:	d06b      	beq.n	8016850 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016778:	6820      	ldr	r0, [r4, #0]
 801677a:	3008      	adds	r0, #8
 801677c:	f7f6 f814 	bl	800c7a8 <rcl_client_is_valid>
 8016780:	2800      	cmp	r0, #0
 8016782:	d065      	beq.n	8016850 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016784:	6820      	ldr	r0, [r4, #0]
 8016786:	300c      	adds	r0, #12
 8016788:	f7fe fb7a 	bl	8014e80 <rcl_subscription_is_valid>
 801678c:	2800      	cmp	r0, #0
 801678e:	d05f      	beq.n	8016850 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016790:	6820      	ldr	r0, [r4, #0]
 8016792:	3010      	adds	r0, #16
 8016794:	f7fe fb74 	bl	8014e80 <rcl_subscription_is_valid>
 8016798:	2800      	cmp	r0, #0
 801679a:	d059      	beq.n	8016850 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801679c:	2e00      	cmp	r6, #0
 801679e:	d060      	beq.n	8016862 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80167a0:	2f00      	cmp	r7, #0
 80167a2:	d05e      	beq.n	8016862 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80167a4:	9b06      	ldr	r3, [sp, #24]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d05b      	beq.n	8016862 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80167aa:	9b07      	ldr	r3, [sp, #28]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d058      	beq.n	8016862 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80167b0:	9b08      	ldr	r3, [sp, #32]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d055      	beq.n	8016862 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	686a      	ldr	r2, [r5, #4]
 80167ba:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80167be:	428a      	cmp	r2, r1
 80167c0:	d94c      	bls.n	801685c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80167c2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80167c6:	4282      	cmp	r2, r0
 80167c8:	d948      	bls.n	801685c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80167ca:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80167ce:	69ea      	ldr	r2, [r5, #28]
 80167d0:	42a2      	cmp	r2, r4
 80167d2:	d943      	bls.n	801685c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80167d4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80167d8:	4562      	cmp	r2, ip
 80167da:	d93f      	bls.n	801685c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80167dc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80167e0:	4572      	cmp	r2, lr
 80167e2:	d93b      	bls.n	801685c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80167e4:	69aa      	ldr	r2, [r5, #24]
 80167e6:	682d      	ldr	r5, [r5, #0]
 80167e8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80167ec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80167f0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80167f4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80167f8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80167fc:	f103 0c0c 	add.w	ip, r3, #12
 8016800:	eba5 050c 	sub.w	r5, r5, ip
 8016804:	fab5 f585 	clz	r5, r5
 8016808:	096d      	lsrs	r5, r5, #5
 801680a:	7035      	strb	r5, [r6, #0]
 801680c:	f103 0510 	add.w	r5, r3, #16
 8016810:	1b64      	subs	r4, r4, r5
 8016812:	fab4 f484 	clz	r4, r4
 8016816:	0964      	lsrs	r4, r4, #5
 8016818:	703c      	strb	r4, [r7, #0]
 801681a:	eba3 0008 	sub.w	r0, r3, r8
 801681e:	1d1c      	adds	r4, r3, #4
 8016820:	3308      	adds	r3, #8
 8016822:	1ad3      	subs	r3, r2, r3
 8016824:	fab0 f080 	clz	r0, r0
 8016828:	9a06      	ldr	r2, [sp, #24]
 801682a:	0940      	lsrs	r0, r0, #5
 801682c:	1b09      	subs	r1, r1, r4
 801682e:	7010      	strb	r0, [r2, #0]
 8016830:	fab1 f181 	clz	r1, r1
 8016834:	9a07      	ldr	r2, [sp, #28]
 8016836:	0949      	lsrs	r1, r1, #5
 8016838:	7011      	strb	r1, [r2, #0]
 801683a:	fab3 f383 	clz	r3, r3
 801683e:	9a08      	ldr	r2, [sp, #32]
 8016840:	095b      	lsrs	r3, r3, #5
 8016842:	2000      	movs	r0, #0
 8016844:	7013      	strb	r3, [r2, #0]
 8016846:	e001      	b.n	801684c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016848:	f640 0036 	movw	r0, #2102	@ 0x836
 801684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016850:	f7f7 fc5e 	bl	800e110 <rcutils_reset_error>
 8016854:	f640 0036 	movw	r0, #2102	@ 0x836
 8016858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801685c:	2001      	movs	r0, #1
 801685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016862:	200b      	movs	r0, #11
 8016864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016868:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801686c:	4770      	bx	lr
 801686e:	bf00      	nop

08016870 <rcl_action_take_goal_request>:
 8016870:	2800      	cmp	r0, #0
 8016872:	d039      	beq.n	80168e8 <rcl_action_take_goal_request+0x78>
 8016874:	b570      	push	{r4, r5, r6, lr}
 8016876:	4604      	mov	r4, r0
 8016878:	6800      	ldr	r0, [r0, #0]
 801687a:	b380      	cbz	r0, 80168de <rcl_action_take_goal_request+0x6e>
 801687c:	460d      	mov	r5, r1
 801687e:	4616      	mov	r6, r2
 8016880:	f7fe fa96 	bl	8014db0 <rcl_service_is_valid>
 8016884:	b330      	cbz	r0, 80168d4 <rcl_action_take_goal_request+0x64>
 8016886:	6820      	ldr	r0, [r4, #0]
 8016888:	3004      	adds	r0, #4
 801688a:	f7fe fa91 	bl	8014db0 <rcl_service_is_valid>
 801688e:	b308      	cbz	r0, 80168d4 <rcl_action_take_goal_request+0x64>
 8016890:	6820      	ldr	r0, [r4, #0]
 8016892:	3008      	adds	r0, #8
 8016894:	f7fe fa8c 	bl	8014db0 <rcl_service_is_valid>
 8016898:	b1e0      	cbz	r0, 80168d4 <rcl_action_take_goal_request+0x64>
 801689a:	6820      	ldr	r0, [r4, #0]
 801689c:	300c      	adds	r0, #12
 801689e:	f7f6 fbcd 	bl	800d03c <rcl_publisher_is_valid>
 80168a2:	b1b8      	cbz	r0, 80168d4 <rcl_action_take_goal_request+0x64>
 80168a4:	6820      	ldr	r0, [r4, #0]
 80168a6:	3010      	adds	r0, #16
 80168a8:	f7f6 fbc8 	bl	800d03c <rcl_publisher_is_valid>
 80168ac:	b190      	cbz	r0, 80168d4 <rcl_action_take_goal_request+0x64>
 80168ae:	b1cd      	cbz	r5, 80168e4 <rcl_action_take_goal_request+0x74>
 80168b0:	b1c6      	cbz	r6, 80168e4 <rcl_action_take_goal_request+0x74>
 80168b2:	6820      	ldr	r0, [r4, #0]
 80168b4:	4632      	mov	r2, r6
 80168b6:	4629      	mov	r1, r5
 80168b8:	f7fe fa22 	bl	8014d00 <rcl_take_request>
 80168bc:	b148      	cbz	r0, 80168d2 <rcl_action_take_goal_request+0x62>
 80168be:	280a      	cmp	r0, #10
 80168c0:	d007      	beq.n	80168d2 <rcl_action_take_goal_request+0x62>
 80168c2:	f240 2259 	movw	r2, #601	@ 0x259
 80168c6:	f640 0399 	movw	r3, #2201	@ 0x899
 80168ca:	4290      	cmp	r0, r2
 80168cc:	bf0c      	ite	eq
 80168ce:	4618      	moveq	r0, r3
 80168d0:	2001      	movne	r0, #1
 80168d2:	bd70      	pop	{r4, r5, r6, pc}
 80168d4:	f7f7 fc1c 	bl	800e110 <rcutils_reset_error>
 80168d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80168dc:	bd70      	pop	{r4, r5, r6, pc}
 80168de:	f640 0098 	movw	r0, #2200	@ 0x898
 80168e2:	bd70      	pop	{r4, r5, r6, pc}
 80168e4:	200b      	movs	r0, #11
 80168e6:	bd70      	pop	{r4, r5, r6, pc}
 80168e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop

080168f0 <rcl_action_send_goal_response>:
 80168f0:	b390      	cbz	r0, 8016958 <rcl_action_send_goal_response+0x68>
 80168f2:	b570      	push	{r4, r5, r6, lr}
 80168f4:	4604      	mov	r4, r0
 80168f6:	6800      	ldr	r0, [r0, #0]
 80168f8:	b348      	cbz	r0, 801694e <rcl_action_send_goal_response+0x5e>
 80168fa:	460d      	mov	r5, r1
 80168fc:	4616      	mov	r6, r2
 80168fe:	f7fe fa57 	bl	8014db0 <rcl_service_is_valid>
 8016902:	b1f8      	cbz	r0, 8016944 <rcl_action_send_goal_response+0x54>
 8016904:	6820      	ldr	r0, [r4, #0]
 8016906:	3004      	adds	r0, #4
 8016908:	f7fe fa52 	bl	8014db0 <rcl_service_is_valid>
 801690c:	b1d0      	cbz	r0, 8016944 <rcl_action_send_goal_response+0x54>
 801690e:	6820      	ldr	r0, [r4, #0]
 8016910:	3008      	adds	r0, #8
 8016912:	f7fe fa4d 	bl	8014db0 <rcl_service_is_valid>
 8016916:	b1a8      	cbz	r0, 8016944 <rcl_action_send_goal_response+0x54>
 8016918:	6820      	ldr	r0, [r4, #0]
 801691a:	300c      	adds	r0, #12
 801691c:	f7f6 fb8e 	bl	800d03c <rcl_publisher_is_valid>
 8016920:	b180      	cbz	r0, 8016944 <rcl_action_send_goal_response+0x54>
 8016922:	6820      	ldr	r0, [r4, #0]
 8016924:	3010      	adds	r0, #16
 8016926:	f7f6 fb89 	bl	800d03c <rcl_publisher_is_valid>
 801692a:	b158      	cbz	r0, 8016944 <rcl_action_send_goal_response+0x54>
 801692c:	b195      	cbz	r5, 8016954 <rcl_action_send_goal_response+0x64>
 801692e:	b18e      	cbz	r6, 8016954 <rcl_action_send_goal_response+0x64>
 8016930:	6820      	ldr	r0, [r4, #0]
 8016932:	4632      	mov	r2, r6
 8016934:	4629      	mov	r1, r5
 8016936:	f7fe fa23 	bl	8014d80 <rcl_send_response>
 801693a:	b110      	cbz	r0, 8016942 <rcl_action_send_goal_response+0x52>
 801693c:	2802      	cmp	r0, #2
 801693e:	bf18      	it	ne
 8016940:	2001      	movne	r0, #1
 8016942:	bd70      	pop	{r4, r5, r6, pc}
 8016944:	f7f7 fbe4 	bl	800e110 <rcutils_reset_error>
 8016948:	f640 0098 	movw	r0, #2200	@ 0x898
 801694c:	bd70      	pop	{r4, r5, r6, pc}
 801694e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016952:	bd70      	pop	{r4, r5, r6, pc}
 8016954:	200b      	movs	r0, #11
 8016956:	bd70      	pop	{r4, r5, r6, pc}
 8016958:	f640 0098 	movw	r0, #2200	@ 0x898
 801695c:	4770      	bx	lr
 801695e:	bf00      	nop

08016960 <rcl_action_take_result_request>:
 8016960:	2800      	cmp	r0, #0
 8016962:	d03a      	beq.n	80169da <rcl_action_take_result_request+0x7a>
 8016964:	b570      	push	{r4, r5, r6, lr}
 8016966:	4604      	mov	r4, r0
 8016968:	6800      	ldr	r0, [r0, #0]
 801696a:	b388      	cbz	r0, 80169d0 <rcl_action_take_result_request+0x70>
 801696c:	460d      	mov	r5, r1
 801696e:	4616      	mov	r6, r2
 8016970:	f7fe fa1e 	bl	8014db0 <rcl_service_is_valid>
 8016974:	b338      	cbz	r0, 80169c6 <rcl_action_take_result_request+0x66>
 8016976:	6820      	ldr	r0, [r4, #0]
 8016978:	3004      	adds	r0, #4
 801697a:	f7fe fa19 	bl	8014db0 <rcl_service_is_valid>
 801697e:	b310      	cbz	r0, 80169c6 <rcl_action_take_result_request+0x66>
 8016980:	6820      	ldr	r0, [r4, #0]
 8016982:	3008      	adds	r0, #8
 8016984:	f7fe fa14 	bl	8014db0 <rcl_service_is_valid>
 8016988:	b1e8      	cbz	r0, 80169c6 <rcl_action_take_result_request+0x66>
 801698a:	6820      	ldr	r0, [r4, #0]
 801698c:	300c      	adds	r0, #12
 801698e:	f7f6 fb55 	bl	800d03c <rcl_publisher_is_valid>
 8016992:	b1c0      	cbz	r0, 80169c6 <rcl_action_take_result_request+0x66>
 8016994:	6820      	ldr	r0, [r4, #0]
 8016996:	3010      	adds	r0, #16
 8016998:	f7f6 fb50 	bl	800d03c <rcl_publisher_is_valid>
 801699c:	b198      	cbz	r0, 80169c6 <rcl_action_take_result_request+0x66>
 801699e:	b1d5      	cbz	r5, 80169d6 <rcl_action_take_result_request+0x76>
 80169a0:	b1ce      	cbz	r6, 80169d6 <rcl_action_take_result_request+0x76>
 80169a2:	6820      	ldr	r0, [r4, #0]
 80169a4:	4632      	mov	r2, r6
 80169a6:	4629      	mov	r1, r5
 80169a8:	3008      	adds	r0, #8
 80169aa:	f7fe f9a9 	bl	8014d00 <rcl_take_request>
 80169ae:	b148      	cbz	r0, 80169c4 <rcl_action_take_result_request+0x64>
 80169b0:	280a      	cmp	r0, #10
 80169b2:	d007      	beq.n	80169c4 <rcl_action_take_result_request+0x64>
 80169b4:	f240 2259 	movw	r2, #601	@ 0x259
 80169b8:	f640 0399 	movw	r3, #2201	@ 0x899
 80169bc:	4290      	cmp	r0, r2
 80169be:	bf0c      	ite	eq
 80169c0:	4618      	moveq	r0, r3
 80169c2:	2001      	movne	r0, #1
 80169c4:	bd70      	pop	{r4, r5, r6, pc}
 80169c6:	f7f7 fba3 	bl	800e110 <rcutils_reset_error>
 80169ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80169ce:	bd70      	pop	{r4, r5, r6, pc}
 80169d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80169d4:	bd70      	pop	{r4, r5, r6, pc}
 80169d6:	200b      	movs	r0, #11
 80169d8:	bd70      	pop	{r4, r5, r6, pc}
 80169da:	f640 0098 	movw	r0, #2200	@ 0x898
 80169de:	4770      	bx	lr

080169e0 <rcl_action_take_cancel_request>:
 80169e0:	2800      	cmp	r0, #0
 80169e2:	d03a      	beq.n	8016a5a <rcl_action_take_cancel_request+0x7a>
 80169e4:	b570      	push	{r4, r5, r6, lr}
 80169e6:	4604      	mov	r4, r0
 80169e8:	6800      	ldr	r0, [r0, #0]
 80169ea:	b388      	cbz	r0, 8016a50 <rcl_action_take_cancel_request+0x70>
 80169ec:	460d      	mov	r5, r1
 80169ee:	4616      	mov	r6, r2
 80169f0:	f7fe f9de 	bl	8014db0 <rcl_service_is_valid>
 80169f4:	b338      	cbz	r0, 8016a46 <rcl_action_take_cancel_request+0x66>
 80169f6:	6820      	ldr	r0, [r4, #0]
 80169f8:	3004      	adds	r0, #4
 80169fa:	f7fe f9d9 	bl	8014db0 <rcl_service_is_valid>
 80169fe:	b310      	cbz	r0, 8016a46 <rcl_action_take_cancel_request+0x66>
 8016a00:	6820      	ldr	r0, [r4, #0]
 8016a02:	3008      	adds	r0, #8
 8016a04:	f7fe f9d4 	bl	8014db0 <rcl_service_is_valid>
 8016a08:	b1e8      	cbz	r0, 8016a46 <rcl_action_take_cancel_request+0x66>
 8016a0a:	6820      	ldr	r0, [r4, #0]
 8016a0c:	300c      	adds	r0, #12
 8016a0e:	f7f6 fb15 	bl	800d03c <rcl_publisher_is_valid>
 8016a12:	b1c0      	cbz	r0, 8016a46 <rcl_action_take_cancel_request+0x66>
 8016a14:	6820      	ldr	r0, [r4, #0]
 8016a16:	3010      	adds	r0, #16
 8016a18:	f7f6 fb10 	bl	800d03c <rcl_publisher_is_valid>
 8016a1c:	b198      	cbz	r0, 8016a46 <rcl_action_take_cancel_request+0x66>
 8016a1e:	b1d5      	cbz	r5, 8016a56 <rcl_action_take_cancel_request+0x76>
 8016a20:	b1ce      	cbz	r6, 8016a56 <rcl_action_take_cancel_request+0x76>
 8016a22:	6820      	ldr	r0, [r4, #0]
 8016a24:	4632      	mov	r2, r6
 8016a26:	4629      	mov	r1, r5
 8016a28:	3004      	adds	r0, #4
 8016a2a:	f7fe f969 	bl	8014d00 <rcl_take_request>
 8016a2e:	b148      	cbz	r0, 8016a44 <rcl_action_take_cancel_request+0x64>
 8016a30:	280a      	cmp	r0, #10
 8016a32:	d007      	beq.n	8016a44 <rcl_action_take_cancel_request+0x64>
 8016a34:	f240 2259 	movw	r2, #601	@ 0x259
 8016a38:	f640 0399 	movw	r3, #2201	@ 0x899
 8016a3c:	4290      	cmp	r0, r2
 8016a3e:	bf0c      	ite	eq
 8016a40:	4618      	moveq	r0, r3
 8016a42:	2001      	movne	r0, #1
 8016a44:	bd70      	pop	{r4, r5, r6, pc}
 8016a46:	f7f7 fb63 	bl	800e110 <rcutils_reset_error>
 8016a4a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a4e:	bd70      	pop	{r4, r5, r6, pc}
 8016a50:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a54:	bd70      	pop	{r4, r5, r6, pc}
 8016a56:	200b      	movs	r0, #11
 8016a58:	bd70      	pop	{r4, r5, r6, pc}
 8016a5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a5e:	4770      	bx	lr

08016a60 <rcl_action_send_cancel_response>:
 8016a60:	b398      	cbz	r0, 8016aca <rcl_action_send_cancel_response+0x6a>
 8016a62:	b570      	push	{r4, r5, r6, lr}
 8016a64:	4604      	mov	r4, r0
 8016a66:	6800      	ldr	r0, [r0, #0]
 8016a68:	b350      	cbz	r0, 8016ac0 <rcl_action_send_cancel_response+0x60>
 8016a6a:	460d      	mov	r5, r1
 8016a6c:	4616      	mov	r6, r2
 8016a6e:	f7fe f99f 	bl	8014db0 <rcl_service_is_valid>
 8016a72:	b300      	cbz	r0, 8016ab6 <rcl_action_send_cancel_response+0x56>
 8016a74:	6820      	ldr	r0, [r4, #0]
 8016a76:	3004      	adds	r0, #4
 8016a78:	f7fe f99a 	bl	8014db0 <rcl_service_is_valid>
 8016a7c:	b1d8      	cbz	r0, 8016ab6 <rcl_action_send_cancel_response+0x56>
 8016a7e:	6820      	ldr	r0, [r4, #0]
 8016a80:	3008      	adds	r0, #8
 8016a82:	f7fe f995 	bl	8014db0 <rcl_service_is_valid>
 8016a86:	b1b0      	cbz	r0, 8016ab6 <rcl_action_send_cancel_response+0x56>
 8016a88:	6820      	ldr	r0, [r4, #0]
 8016a8a:	300c      	adds	r0, #12
 8016a8c:	f7f6 fad6 	bl	800d03c <rcl_publisher_is_valid>
 8016a90:	b188      	cbz	r0, 8016ab6 <rcl_action_send_cancel_response+0x56>
 8016a92:	6820      	ldr	r0, [r4, #0]
 8016a94:	3010      	adds	r0, #16
 8016a96:	f7f6 fad1 	bl	800d03c <rcl_publisher_is_valid>
 8016a9a:	b160      	cbz	r0, 8016ab6 <rcl_action_send_cancel_response+0x56>
 8016a9c:	b19d      	cbz	r5, 8016ac6 <rcl_action_send_cancel_response+0x66>
 8016a9e:	b196      	cbz	r6, 8016ac6 <rcl_action_send_cancel_response+0x66>
 8016aa0:	6820      	ldr	r0, [r4, #0]
 8016aa2:	4632      	mov	r2, r6
 8016aa4:	4629      	mov	r1, r5
 8016aa6:	3004      	adds	r0, #4
 8016aa8:	f7fe f96a 	bl	8014d80 <rcl_send_response>
 8016aac:	b110      	cbz	r0, 8016ab4 <rcl_action_send_cancel_response+0x54>
 8016aae:	2802      	cmp	r0, #2
 8016ab0:	bf18      	it	ne
 8016ab2:	2001      	movne	r0, #1
 8016ab4:	bd70      	pop	{r4, r5, r6, pc}
 8016ab6:	f7f7 fb2b 	bl	800e110 <rcutils_reset_error>
 8016aba:	f640 0098 	movw	r0, #2200	@ 0x898
 8016abe:	bd70      	pop	{r4, r5, r6, pc}
 8016ac0:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ac4:	bd70      	pop	{r4, r5, r6, pc}
 8016ac6:	200b      	movs	r0, #11
 8016ac8:	bd70      	pop	{r4, r5, r6, pc}
 8016aca:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ace:	4770      	bx	lr

08016ad0 <rcl_action_wait_set_add_action_server>:
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d04d      	beq.n	8016b70 <rcl_action_wait_set_add_action_server+0xa0>
 8016ad4:	b570      	push	{r4, r5, r6, lr}
 8016ad6:	460c      	mov	r4, r1
 8016ad8:	b159      	cbz	r1, 8016af2 <rcl_action_wait_set_add_action_server+0x22>
 8016ada:	4605      	mov	r5, r0
 8016adc:	6808      	ldr	r0, [r1, #0]
 8016ade:	b140      	cbz	r0, 8016af2 <rcl_action_wait_set_add_action_server+0x22>
 8016ae0:	4616      	mov	r6, r2
 8016ae2:	f7fe f965 	bl	8014db0 <rcl_service_is_valid>
 8016ae6:	b120      	cbz	r0, 8016af2 <rcl_action_wait_set_add_action_server+0x22>
 8016ae8:	6820      	ldr	r0, [r4, #0]
 8016aea:	3004      	adds	r0, #4
 8016aec:	f7fe f960 	bl	8014db0 <rcl_service_is_valid>
 8016af0:	b910      	cbnz	r0, 8016af8 <rcl_action_wait_set_add_action_server+0x28>
 8016af2:	f640 0098 	movw	r0, #2200	@ 0x898
 8016af6:	bd70      	pop	{r4, r5, r6, pc}
 8016af8:	6820      	ldr	r0, [r4, #0]
 8016afa:	3008      	adds	r0, #8
 8016afc:	f7fe f958 	bl	8014db0 <rcl_service_is_valid>
 8016b00:	2800      	cmp	r0, #0
 8016b02:	d0f6      	beq.n	8016af2 <rcl_action_wait_set_add_action_server+0x22>
 8016b04:	6820      	ldr	r0, [r4, #0]
 8016b06:	300c      	adds	r0, #12
 8016b08:	f7f6 fab0 	bl	800d06c <rcl_publisher_is_valid_except_context>
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d0f0      	beq.n	8016af2 <rcl_action_wait_set_add_action_server+0x22>
 8016b10:	6820      	ldr	r0, [r4, #0]
 8016b12:	3010      	adds	r0, #16
 8016b14:	f7f6 faaa 	bl	800d06c <rcl_publisher_is_valid_except_context>
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	d0ea      	beq.n	8016af2 <rcl_action_wait_set_add_action_server+0x22>
 8016b1c:	6821      	ldr	r1, [r4, #0]
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016b24:	f7ff fad0 	bl	80160c8 <rcl_wait_set_add_service>
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	d1e4      	bne.n	8016af6 <rcl_action_wait_set_add_action_server+0x26>
 8016b2c:	6821      	ldr	r1, [r4, #0]
 8016b2e:	4628      	mov	r0, r5
 8016b30:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016b34:	3104      	adds	r1, #4
 8016b36:	f7ff fac7 	bl	80160c8 <rcl_wait_set_add_service>
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	d1db      	bne.n	8016af6 <rcl_action_wait_set_add_action_server+0x26>
 8016b3e:	6821      	ldr	r1, [r4, #0]
 8016b40:	4628      	mov	r0, r5
 8016b42:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016b46:	3108      	adds	r1, #8
 8016b48:	f7ff fabe 	bl	80160c8 <rcl_wait_set_add_service>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	d1d2      	bne.n	8016af6 <rcl_action_wait_set_add_action_server+0x26>
 8016b50:	6821      	ldr	r1, [r4, #0]
 8016b52:	4628      	mov	r0, r5
 8016b54:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016b58:	3114      	adds	r1, #20
 8016b5a:	f7ff fa59 	bl	8016010 <rcl_wait_set_add_timer>
 8016b5e:	2800      	cmp	r0, #0
 8016b60:	d1c9      	bne.n	8016af6 <rcl_action_wait_set_add_action_server+0x26>
 8016b62:	2e00      	cmp	r6, #0
 8016b64:	d0c7      	beq.n	8016af6 <rcl_action_wait_set_add_action_server+0x26>
 8016b66:	6823      	ldr	r3, [r4, #0]
 8016b68:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016b6c:	6033      	str	r3, [r6, #0]
 8016b6e:	bd70      	pop	{r4, r5, r6, pc}
 8016b70:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016b74:	4770      	bx	lr
 8016b76:	bf00      	nop

08016b78 <rcl_action_server_wait_set_get_entities_ready>:
 8016b78:	2800      	cmp	r0, #0
 8016b7a:	d05a      	beq.n	8016c32 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b7e:	460c      	mov	r4, r1
 8016b80:	b161      	cbz	r1, 8016b9c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016b82:	4605      	mov	r5, r0
 8016b84:	6808      	ldr	r0, [r1, #0]
 8016b86:	b148      	cbz	r0, 8016b9c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016b88:	4616      	mov	r6, r2
 8016b8a:	461f      	mov	r7, r3
 8016b8c:	f7fe f910 	bl	8014db0 <rcl_service_is_valid>
 8016b90:	b120      	cbz	r0, 8016b9c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016b92:	6820      	ldr	r0, [r4, #0]
 8016b94:	3004      	adds	r0, #4
 8016b96:	f7fe f90b 	bl	8014db0 <rcl_service_is_valid>
 8016b9a:	b910      	cbnz	r0, 8016ba2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016b9c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ba2:	6820      	ldr	r0, [r4, #0]
 8016ba4:	3008      	adds	r0, #8
 8016ba6:	f7fe f903 	bl	8014db0 <rcl_service_is_valid>
 8016baa:	2800      	cmp	r0, #0
 8016bac:	d0f6      	beq.n	8016b9c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016bae:	6820      	ldr	r0, [r4, #0]
 8016bb0:	300c      	adds	r0, #12
 8016bb2:	f7f6 fa5b 	bl	800d06c <rcl_publisher_is_valid_except_context>
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	d0f0      	beq.n	8016b9c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016bba:	6820      	ldr	r0, [r4, #0]
 8016bbc:	3010      	adds	r0, #16
 8016bbe:	f7f6 fa55 	bl	800d06c <rcl_publisher_is_valid_except_context>
 8016bc2:	2800      	cmp	r0, #0
 8016bc4:	d0ea      	beq.n	8016b9c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016bc6:	b3be      	cbz	r6, 8016c38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016bc8:	b3b7      	cbz	r7, 8016c38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016bca:	9b06      	ldr	r3, [sp, #24]
 8016bcc:	b3a3      	cbz	r3, 8016c38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016bce:	9b07      	ldr	r3, [sp, #28]
 8016bd0:	b393      	cbz	r3, 8016c38 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016bd2:	6821      	ldr	r1, [r4, #0]
 8016bd4:	692a      	ldr	r2, [r5, #16]
 8016bd6:	6a2c      	ldr	r4, [r5, #32]
 8016bd8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016bdc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016be0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016be4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016be8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016bec:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016bf0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016bf4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016bf8:	1a64      	subs	r4, r4, r1
 8016bfa:	fab4 f484 	clz	r4, r4
 8016bfe:	0964      	lsrs	r4, r4, #5
 8016c00:	7034      	strb	r4, [r6, #0]
 8016c02:	1d0c      	adds	r4, r1, #4
 8016c04:	1b1b      	subs	r3, r3, r4
 8016c06:	fab3 f383 	clz	r3, r3
 8016c0a:	095b      	lsrs	r3, r3, #5
 8016c0c:	f101 0408 	add.w	r4, r1, #8
 8016c10:	703b      	strb	r3, [r7, #0]
 8016c12:	f101 0314 	add.w	r3, r1, #20
 8016c16:	1b01      	subs	r1, r0, r4
 8016c18:	1ad3      	subs	r3, r2, r3
 8016c1a:	fab1 f181 	clz	r1, r1
 8016c1e:	9a06      	ldr	r2, [sp, #24]
 8016c20:	0949      	lsrs	r1, r1, #5
 8016c22:	7011      	strb	r1, [r2, #0]
 8016c24:	fab3 f383 	clz	r3, r3
 8016c28:	9a07      	ldr	r2, [sp, #28]
 8016c2a:	095b      	lsrs	r3, r3, #5
 8016c2c:	2000      	movs	r0, #0
 8016c2e:	7013      	strb	r3, [r2, #0]
 8016c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c36:	4770      	bx	lr
 8016c38:	200b      	movs	r0, #11
 8016c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c3c <_execute_event_handler>:
 8016c3c:	2002      	movs	r0, #2
 8016c3e:	4770      	bx	lr

08016c40 <_cancel_goal_event_handler>:
 8016c40:	2003      	movs	r0, #3
 8016c42:	4770      	bx	lr

08016c44 <_succeed_event_handler>:
 8016c44:	2004      	movs	r0, #4
 8016c46:	4770      	bx	lr

08016c48 <_abort_event_handler>:
 8016c48:	2006      	movs	r0, #6
 8016c4a:	4770      	bx	lr

08016c4c <_canceled_event_handler>:
 8016c4c:	2005      	movs	r0, #5
 8016c4e:	4770      	bx	lr

08016c50 <rcl_action_transition_goal_state>:
 8016c50:	b2c2      	uxtb	r2, r0
 8016c52:	2a06      	cmp	r2, #6
 8016c54:	d80c      	bhi.n	8016c70 <rcl_action_transition_goal_state+0x20>
 8016c56:	2904      	cmp	r1, #4
 8016c58:	d80a      	bhi.n	8016c70 <rcl_action_transition_goal_state+0x20>
 8016c5a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016c5e:	b410      	push	{r4}
 8016c60:	1853      	adds	r3, r2, r1
 8016c62:	4c06      	ldr	r4, [pc, #24]	@ (8016c7c <rcl_action_transition_goal_state+0x2c>)
 8016c64:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016c68:	b123      	cbz	r3, 8016c74 <rcl_action_transition_goal_state+0x24>
 8016c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c6e:	4718      	bx	r3
 8016c70:	2000      	movs	r0, #0
 8016c72:	4770      	bx	lr
 8016c74:	2000      	movs	r0, #0
 8016c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c7a:	4770      	bx	lr
 8016c7c:	0801b1f4 	.word	0x0801b1f4

08016c80 <rcl_action_get_zero_initialized_cancel_response>:
 8016c80:	b510      	push	{r4, lr}
 8016c82:	4c07      	ldr	r4, [pc, #28]	@ (8016ca0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016c84:	4686      	mov	lr, r0
 8016c86:	4684      	mov	ip, r0
 8016c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	f8cc 3000 	str.w	r3, [ip]
 8016c9a:	4670      	mov	r0, lr
 8016c9c:	bd10      	pop	{r4, pc}
 8016c9e:	bf00      	nop
 8016ca0:	0801b280 	.word	0x0801b280

08016ca4 <rclc_action_send_result_request>:
 8016ca4:	b1d0      	cbz	r0, 8016cdc <rclc_action_send_result_request+0x38>
 8016ca6:	b500      	push	{lr}
 8016ca8:	4684      	mov	ip, r0
 8016caa:	b087      	sub	sp, #28
 8016cac:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016cb0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8016cb4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016cb8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016cbc:	f10d 0e08 	add.w	lr, sp, #8
 8016cc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016cc4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016cc8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016ccc:	a902      	add	r1, sp, #8
 8016cce:	3010      	adds	r0, #16
 8016cd0:	f7ff fbda 	bl	8016488 <rcl_action_send_result_request>
 8016cd4:	b920      	cbnz	r0, 8016ce0 <rclc_action_send_result_request+0x3c>
 8016cd6:	b007      	add	sp, #28
 8016cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cdc:	200b      	movs	r0, #11
 8016cde:	4770      	bx	lr
 8016ce0:	9001      	str	r0, [sp, #4]
 8016ce2:	f7f7 fa15 	bl	800e110 <rcutils_reset_error>
 8016ce6:	9801      	ldr	r0, [sp, #4]
 8016ce8:	b007      	add	sp, #28
 8016cea:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cee:	bf00      	nop

08016cf0 <rclc_action_take_goal_handle>:
 8016cf0:	b160      	cbz	r0, 8016d0c <rclc_action_take_goal_handle+0x1c>
 8016cf2:	6883      	ldr	r3, [r0, #8]
 8016cf4:	b143      	cbz	r3, 8016d08 <rclc_action_take_goal_handle+0x18>
 8016cf6:	6819      	ldr	r1, [r3, #0]
 8016cf8:	6081      	str	r1, [r0, #8]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	721a      	strb	r2, [r3, #8]
 8016cfe:	68c1      	ldr	r1, [r0, #12]
 8016d00:	6019      	str	r1, [r3, #0]
 8016d02:	621a      	str	r2, [r3, #32]
 8016d04:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016d06:	60c3      	str	r3, [r0, #12]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	4770      	bx	lr
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	e7fb      	b.n	8016d08 <rclc_action_take_goal_handle+0x18>

08016d10 <rclc_action_remove_used_goal_handle>:
 8016d10:	b180      	cbz	r0, 8016d34 <rclc_action_remove_used_goal_handle+0x24>
 8016d12:	b179      	cbz	r1, 8016d34 <rclc_action_remove_used_goal_handle+0x24>
 8016d14:	68c3      	ldr	r3, [r0, #12]
 8016d16:	4299      	cmp	r1, r3
 8016d18:	d00d      	beq.n	8016d36 <rclc_action_remove_used_goal_handle+0x26>
 8016d1a:	b12b      	cbz	r3, 8016d28 <rclc_action_remove_used_goal_handle+0x18>
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	4291      	cmp	r1, r2
 8016d20:	d003      	beq.n	8016d2a <rclc_action_remove_used_goal_handle+0x1a>
 8016d22:	4613      	mov	r3, r2
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d1f9      	bne.n	8016d1c <rclc_action_remove_used_goal_handle+0xc>
 8016d28:	4770      	bx	lr
 8016d2a:	680a      	ldr	r2, [r1, #0]
 8016d2c:	601a      	str	r2, [r3, #0]
 8016d2e:	6883      	ldr	r3, [r0, #8]
 8016d30:	600b      	str	r3, [r1, #0]
 8016d32:	6081      	str	r1, [r0, #8]
 8016d34:	4770      	bx	lr
 8016d36:	680b      	ldr	r3, [r1, #0]
 8016d38:	60c3      	str	r3, [r0, #12]
 8016d3a:	e7f8      	b.n	8016d2e <rclc_action_remove_used_goal_handle+0x1e>

08016d3c <rclc_action_find_goal_handle_by_uuid>:
 8016d3c:	b538      	push	{r3, r4, r5, lr}
 8016d3e:	b180      	cbz	r0, 8016d62 <rclc_action_find_goal_handle_by_uuid+0x26>
 8016d40:	460d      	mov	r5, r1
 8016d42:	b181      	cbz	r1, 8016d66 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016d44:	68c4      	ldr	r4, [r0, #12]
 8016d46:	b914      	cbnz	r4, 8016d4e <rclc_action_find_goal_handle_by_uuid+0x12>
 8016d48:	e009      	b.n	8016d5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016d4a:	6824      	ldr	r4, [r4, #0]
 8016d4c:	b13c      	cbz	r4, 8016d5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016d4e:	f104 0009 	add.w	r0, r4, #9
 8016d52:	2210      	movs	r2, #16
 8016d54:	4629      	mov	r1, r5
 8016d56:	f002 f903 	bl	8018f60 <memcmp>
 8016d5a:	2800      	cmp	r0, #0
 8016d5c:	d1f5      	bne.n	8016d4a <rclc_action_find_goal_handle_by_uuid+0xe>
 8016d5e:	4620      	mov	r0, r4
 8016d60:	bd38      	pop	{r3, r4, r5, pc}
 8016d62:	4604      	mov	r4, r0
 8016d64:	e7fb      	b.n	8016d5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016d66:	460c      	mov	r4, r1
 8016d68:	e7f9      	b.n	8016d5e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016d6a:	bf00      	nop

08016d6c <rclc_action_find_first_handle_by_status>:
 8016d6c:	b140      	cbz	r0, 8016d80 <rclc_action_find_first_handle_by_status+0x14>
 8016d6e:	68c0      	ldr	r0, [r0, #12]
 8016d70:	b910      	cbnz	r0, 8016d78 <rclc_action_find_first_handle_by_status+0xc>
 8016d72:	e005      	b.n	8016d80 <rclc_action_find_first_handle_by_status+0x14>
 8016d74:	6800      	ldr	r0, [r0, #0]
 8016d76:	b118      	cbz	r0, 8016d80 <rclc_action_find_first_handle_by_status+0x14>
 8016d78:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016d7c:	428b      	cmp	r3, r1
 8016d7e:	d1f9      	bne.n	8016d74 <rclc_action_find_first_handle_by_status+0x8>
 8016d80:	4770      	bx	lr
 8016d82:	bf00      	nop

08016d84 <rclc_action_find_first_terminated_handle>:
 8016d84:	b140      	cbz	r0, 8016d98 <rclc_action_find_first_terminated_handle+0x14>
 8016d86:	68c0      	ldr	r0, [r0, #12]
 8016d88:	b910      	cbnz	r0, 8016d90 <rclc_action_find_first_terminated_handle+0xc>
 8016d8a:	e005      	b.n	8016d98 <rclc_action_find_first_terminated_handle+0x14>
 8016d8c:	6800      	ldr	r0, [r0, #0]
 8016d8e:	b118      	cbz	r0, 8016d98 <rclc_action_find_first_terminated_handle+0x14>
 8016d90:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016d94:	2b03      	cmp	r3, #3
 8016d96:	ddf9      	ble.n	8016d8c <rclc_action_find_first_terminated_handle+0x8>
 8016d98:	4770      	bx	lr
 8016d9a:	bf00      	nop

08016d9c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016d9c:	b170      	cbz	r0, 8016dbc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016d9e:	68c0      	ldr	r0, [r0, #12]
 8016da0:	b160      	cbz	r0, 8016dbc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016da2:	b410      	push	{r4}
 8016da4:	e001      	b.n	8016daa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016da6:	6800      	ldr	r0, [r0, #0]
 8016da8:	b128      	cbz	r0, 8016db6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016daa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016dae:	4299      	cmp	r1, r3
 8016db0:	bf08      	it	eq
 8016db2:	4294      	cmpeq	r4, r2
 8016db4:	d1f7      	bne.n	8016da6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dba:	4770      	bx	lr
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop

08016dc0 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016dc0:	b170      	cbz	r0, 8016de0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016dc2:	68c0      	ldr	r0, [r0, #12]
 8016dc4:	b160      	cbz	r0, 8016de0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016dc6:	b410      	push	{r4}
 8016dc8:	e001      	b.n	8016dce <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016dca:	6800      	ldr	r0, [r0, #0]
 8016dcc:	b128      	cbz	r0, 8016dda <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016dce:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8016dd2:	4299      	cmp	r1, r3
 8016dd4:	bf08      	it	eq
 8016dd6:	4294      	cmpeq	r4, r2
 8016dd8:	d1f7      	bne.n	8016dca <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dde:	4770      	bx	lr
 8016de0:	4770      	bx	lr
 8016de2:	bf00      	nop

08016de4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016de4:	b170      	cbz	r0, 8016e04 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016de6:	68c0      	ldr	r0, [r0, #12]
 8016de8:	b160      	cbz	r0, 8016e04 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016dea:	b410      	push	{r4}
 8016dec:	e001      	b.n	8016df2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016dee:	6800      	ldr	r0, [r0, #0]
 8016df0:	b128      	cbz	r0, 8016dfe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016df2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016df6:	4299      	cmp	r1, r3
 8016df8:	bf08      	it	eq
 8016dfa:	4294      	cmpeq	r4, r2
 8016dfc:	d1f7      	bne.n	8016dee <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e02:	4770      	bx	lr
 8016e04:	4770      	bx	lr
 8016e06:	bf00      	nop

08016e08 <rclc_action_find_first_handle_with_goal_response>:
 8016e08:	b140      	cbz	r0, 8016e1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016e0a:	68c0      	ldr	r0, [r0, #12]
 8016e0c:	b910      	cbnz	r0, 8016e14 <rclc_action_find_first_handle_with_goal_response+0xc>
 8016e0e:	e005      	b.n	8016e1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016e10:	6800      	ldr	r0, [r0, #0]
 8016e12:	b118      	cbz	r0, 8016e1c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016e14:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d0f9      	beq.n	8016e10 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016e1c:	4770      	bx	lr
 8016e1e:	bf00      	nop

08016e20 <rclc_action_find_first_handle_with_result_response>:
 8016e20:	b140      	cbz	r0, 8016e34 <rclc_action_find_first_handle_with_result_response+0x14>
 8016e22:	68c0      	ldr	r0, [r0, #12]
 8016e24:	b910      	cbnz	r0, 8016e2c <rclc_action_find_first_handle_with_result_response+0xc>
 8016e26:	e005      	b.n	8016e34 <rclc_action_find_first_handle_with_result_response+0x14>
 8016e28:	6800      	ldr	r0, [r0, #0]
 8016e2a:	b118      	cbz	r0, 8016e34 <rclc_action_find_first_handle_with_result_response+0x14>
 8016e2c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d0f9      	beq.n	8016e28 <rclc_action_find_first_handle_with_result_response+0x8>
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop

08016e38 <rclc_action_server_response_goal_request>:
 8016e38:	b198      	cbz	r0, 8016e62 <rclc_action_server_response_goal_request+0x2a>
 8016e3a:	b510      	push	{r4, lr}
 8016e3c:	6844      	ldr	r4, [r0, #4]
 8016e3e:	b086      	sub	sp, #24
 8016e40:	2200      	movs	r2, #0
 8016e42:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016e46:	460b      	mov	r3, r1
 8016e48:	9205      	str	r2, [sp, #20]
 8016e4a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8016e4e:	aa03      	add	r2, sp, #12
 8016e50:	f104 0010 	add.w	r0, r4, #16
 8016e54:	f88d 300c 	strb.w	r3, [sp, #12]
 8016e58:	f7ff fd4a 	bl	80168f0 <rcl_action_send_goal_response>
 8016e5c:	b918      	cbnz	r0, 8016e66 <rclc_action_server_response_goal_request+0x2e>
 8016e5e:	b006      	add	sp, #24
 8016e60:	bd10      	pop	{r4, pc}
 8016e62:	200b      	movs	r0, #11
 8016e64:	4770      	bx	lr
 8016e66:	9001      	str	r0, [sp, #4]
 8016e68:	f7f7 f952 	bl	800e110 <rcutils_reset_error>
 8016e6c:	9801      	ldr	r0, [sp, #4]
 8016e6e:	b006      	add	sp, #24
 8016e70:	bd10      	pop	{r4, pc}
 8016e72:	bf00      	nop
 8016e74:	0000      	movs	r0, r0
	...

08016e78 <rclc_action_server_goal_cancel_accept>:
 8016e78:	b310      	cbz	r0, 8016ec0 <rclc_action_server_goal_cancel_accept+0x48>
 8016e7a:	b510      	push	{r4, lr}
 8016e7c:	b090      	sub	sp, #64	@ 0x40
 8016e7e:	4604      	mov	r4, r0
 8016e80:	a806      	add	r0, sp, #24
 8016e82:	f7ff fefd 	bl	8016c80 <rcl_action_get_zero_initialized_cancel_response>
 8016e86:	2300      	movs	r3, #0
 8016e88:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016e8c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016e90:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8016e94:	f88d 3018 	strb.w	r3, [sp, #24]
 8016e98:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016e9c:	f8cd d01c 	str.w	sp, [sp, #28]
 8016ea0:	46ec      	mov	ip, sp
 8016ea2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ea6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016ec8 <rclc_action_server_goal_cancel_accept+0x50>
 8016eaa:	6860      	ldr	r0, [r4, #4]
 8016eac:	aa06      	add	r2, sp, #24
 8016eae:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8016eb2:	3010      	adds	r0, #16
 8016eb4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016eb8:	f7ff fdd2 	bl	8016a60 <rcl_action_send_cancel_response>
 8016ebc:	b010      	add	sp, #64	@ 0x40
 8016ebe:	bd10      	pop	{r4, pc}
 8016ec0:	200b      	movs	r0, #11
 8016ec2:	4770      	bx	lr
 8016ec4:	f3af 8000 	nop.w
 8016ec8:	00000001 	.word	0x00000001
 8016ecc:	00000001 	.word	0x00000001

08016ed0 <rclc_action_server_goal_cancel_reject>:
 8016ed0:	b082      	sub	sp, #8
 8016ed2:	b530      	push	{r4, r5, lr}
 8016ed4:	b08b      	sub	sp, #44	@ 0x2c
 8016ed6:	ac0e      	add	r4, sp, #56	@ 0x38
 8016ed8:	e884 000c 	stmia.w	r4, {r2, r3}
 8016edc:	b188      	cbz	r0, 8016f02 <rclc_action_server_goal_cancel_reject+0x32>
 8016ede:	4604      	mov	r4, r0
 8016ee0:	a801      	add	r0, sp, #4
 8016ee2:	460d      	mov	r5, r1
 8016ee4:	f7ff fecc 	bl	8016c80 <rcl_action_get_zero_initialized_cancel_response>
 8016ee8:	aa01      	add	r2, sp, #4
 8016eea:	a90e      	add	r1, sp, #56	@ 0x38
 8016eec:	f104 0010 	add.w	r0, r4, #16
 8016ef0:	f88d 5004 	strb.w	r5, [sp, #4]
 8016ef4:	f7ff fdb4 	bl	8016a60 <rcl_action_send_cancel_response>
 8016ef8:	b00b      	add	sp, #44	@ 0x2c
 8016efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016efe:	b002      	add	sp, #8
 8016f00:	4770      	bx	lr
 8016f02:	200b      	movs	r0, #11
 8016f04:	b00b      	add	sp, #44	@ 0x2c
 8016f06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f0a:	b002      	add	sp, #8
 8016f0c:	4770      	bx	lr
 8016f0e:	bf00      	nop

08016f10 <rcutils_is_directory>:
 8016f10:	2000      	movs	r0, #0
 8016f12:	4770      	bx	lr

08016f14 <rcutils_join_path>:
 8016f14:	b082      	sub	sp, #8
 8016f16:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016f1a:	2000      	movs	r0, #0
 8016f1c:	b002      	add	sp, #8
 8016f1e:	4770      	bx	lr

08016f20 <rcutils_to_native_path>:
 8016f20:	b084      	sub	sp, #16
 8016f22:	a801      	add	r0, sp, #4
 8016f24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016f28:	b004      	add	sp, #16
 8016f2a:	2000      	movs	r0, #0
 8016f2c:	4770      	bx	lr
 8016f2e:	bf00      	nop

08016f30 <rmw_get_zero_initialized_context>:
 8016f30:	b510      	push	{r4, lr}
 8016f32:	4604      	mov	r4, r0
 8016f34:	3010      	adds	r0, #16
 8016f36:	f7f7 fbdb 	bl	800e6f0 <rmw_get_zero_initialized_init_options>
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	2000      	movs	r0, #0
 8016f3e:	2100      	movs	r1, #0
 8016f40:	e9c4 0100 	strd	r0, r1, [r4]
 8016f44:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016f48:	60a3      	str	r3, [r4, #8]
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	bd10      	pop	{r4, pc}
 8016f4e:	bf00      	nop

08016f50 <rmw_time_equal>:
 8016f50:	b4f0      	push	{r4, r5, r6, r7}
 8016f52:	b084      	sub	sp, #16
 8016f54:	ac04      	add	r4, sp, #16
 8016f56:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	4924      	ldr	r1, [pc, #144]	@ (8016ff0 <rmw_time_equal+0xa0>)
 8016f5e:	9e03      	ldr	r6, [sp, #12]
 8016f60:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016f64:	2202      	movs	r2, #2
 8016f66:	4299      	cmp	r1, r3
 8016f68:	41aa      	sbcs	r2, r5
 8016f6a:	d330      	bcc.n	8016fce <rmw_time_equal+0x7e>
 8016f6c:	4c21      	ldr	r4, [pc, #132]	@ (8016ff4 <rmw_time_equal+0xa4>)
 8016f6e:	fba3 3204 	umull	r3, r2, r3, r4
 8016f72:	fb04 2205 	mla	r2, r4, r5, r2
 8016f76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f7a:	43dd      	mvns	r5, r3
 8016f7c:	1a8c      	subs	r4, r1, r2
 8016f7e:	4285      	cmp	r5, r0
 8016f80:	41b4      	sbcs	r4, r6
 8016f82:	d332      	bcc.n	8016fea <rmw_time_equal+0x9a>
 8016f84:	eb10 0c03 	adds.w	ip, r0, r3
 8016f88:	eb42 0106 	adc.w	r1, r2, r6
 8016f8c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016f90:	4817      	ldr	r0, [pc, #92]	@ (8016ff0 <rmw_time_equal+0xa0>)
 8016f92:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016f94:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016f96:	2202      	movs	r2, #2
 8016f98:	4298      	cmp	r0, r3
 8016f9a:	41b2      	sbcs	r2, r6
 8016f9c:	d31c      	bcc.n	8016fd8 <rmw_time_equal+0x88>
 8016f9e:	4c15      	ldr	r4, [pc, #84]	@ (8016ff4 <rmw_time_equal+0xa4>)
 8016fa0:	fba3 3204 	umull	r3, r2, r3, r4
 8016fa4:	fb04 2206 	mla	r2, r4, r6, r2
 8016fa8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016fac:	43de      	mvns	r6, r3
 8016fae:	1a84      	subs	r4, r0, r2
 8016fb0:	42ae      	cmp	r6, r5
 8016fb2:	41bc      	sbcs	r4, r7
 8016fb4:	d315      	bcc.n	8016fe2 <rmw_time_equal+0x92>
 8016fb6:	195b      	adds	r3, r3, r5
 8016fb8:	eb42 0207 	adc.w	r2, r2, r7
 8016fbc:	428a      	cmp	r2, r1
 8016fbe:	bf08      	it	eq
 8016fc0:	4563      	cmpeq	r3, ip
 8016fc2:	bf0c      	ite	eq
 8016fc4:	2001      	moveq	r0, #1
 8016fc6:	2000      	movne	r0, #0
 8016fc8:	b004      	add	sp, #16
 8016fca:	bcf0      	pop	{r4, r5, r6, r7}
 8016fcc:	4770      	bx	lr
 8016fce:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016fd2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016fd6:	e7d9      	b.n	8016f8c <rmw_time_equal+0x3c>
 8016fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016fdc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016fe0:	e7ec      	b.n	8016fbc <rmw_time_equal+0x6c>
 8016fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016fe6:	4602      	mov	r2, r0
 8016fe8:	e7e8      	b.n	8016fbc <rmw_time_equal+0x6c>
 8016fea:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016fee:	e7cd      	b.n	8016f8c <rmw_time_equal+0x3c>
 8016ff0:	25c17d04 	.word	0x25c17d04
 8016ff4:	3b9aca00 	.word	0x3b9aca00

08016ff8 <rmw_time_total_nsec>:
 8016ff8:	b470      	push	{r4, r5, r6}
 8016ffa:	b085      	sub	sp, #20
 8016ffc:	ac04      	add	r4, sp, #16
 8016ffe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017002:	4603      	mov	r3, r0
 8017004:	4912      	ldr	r1, [pc, #72]	@ (8017050 <rmw_time_total_nsec+0x58>)
 8017006:	9e03      	ldr	r6, [sp, #12]
 8017008:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801700c:	2202      	movs	r2, #2
 801700e:	4299      	cmp	r1, r3
 8017010:	41aa      	sbcs	r2, r5
 8017012:	d311      	bcc.n	8017038 <rmw_time_total_nsec+0x40>
 8017014:	4c0f      	ldr	r4, [pc, #60]	@ (8017054 <rmw_time_total_nsec+0x5c>)
 8017016:	fba3 3204 	umull	r3, r2, r3, r4
 801701a:	fb04 2205 	mla	r2, r4, r5, r2
 801701e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017022:	43dd      	mvns	r5, r3
 8017024:	1a8c      	subs	r4, r1, r2
 8017026:	4285      	cmp	r5, r0
 8017028:	41b4      	sbcs	r4, r6
 801702a:	d30c      	bcc.n	8017046 <rmw_time_total_nsec+0x4e>
 801702c:	1818      	adds	r0, r3, r0
 801702e:	eb42 0106 	adc.w	r1, r2, r6
 8017032:	b005      	add	sp, #20
 8017034:	bc70      	pop	{r4, r5, r6}
 8017036:	4770      	bx	lr
 8017038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801703c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017040:	b005      	add	sp, #20
 8017042:	bc70      	pop	{r4, r5, r6}
 8017044:	4770      	bx	lr
 8017046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801704a:	b005      	add	sp, #20
 801704c:	bc70      	pop	{r4, r5, r6}
 801704e:	4770      	bx	lr
 8017050:	25c17d04 	.word	0x25c17d04
 8017054:	3b9aca00 	.word	0x3b9aca00

08017058 <rmw_get_zero_initialized_message_info>:
 8017058:	b510      	push	{r4, lr}
 801705a:	2240      	movs	r2, #64	@ 0x40
 801705c:	4604      	mov	r4, r0
 801705e:	2100      	movs	r1, #0
 8017060:	f001 ffa8 	bl	8018fb4 <memset>
 8017064:	4620      	mov	r0, r4
 8017066:	bd10      	pop	{r4, pc}

08017068 <on_status>:
 8017068:	b082      	sub	sp, #8
 801706a:	b002      	add	sp, #8
 801706c:	4770      	bx	lr
 801706e:	bf00      	nop

08017070 <on_topic>:
 8017070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017074:	4a22      	ldr	r2, [pc, #136]	@ (8017100 <on_topic+0x90>)
 8017076:	b094      	sub	sp, #80	@ 0x50
 8017078:	6812      	ldr	r2, [r2, #0]
 801707a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801707c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017080:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017084:	b3c2      	cbz	r2, 80170f8 <on_topic+0x88>
 8017086:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801708a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801708e:	e001      	b.n	8017094 <on_topic+0x24>
 8017090:	6852      	ldr	r2, [r2, #4]
 8017092:	b38a      	cbz	r2, 80170f8 <on_topic+0x88>
 8017094:	6894      	ldr	r4, [r2, #8]
 8017096:	8aa3      	ldrh	r3, [r4, #20]
 8017098:	428b      	cmp	r3, r1
 801709a:	d1f9      	bne.n	8017090 <on_topic+0x20>
 801709c:	7da3      	ldrb	r3, [r4, #22]
 801709e:	4283      	cmp	r3, r0
 80170a0:	d1f6      	bne.n	8017090 <on_topic+0x20>
 80170a2:	2248      	movs	r2, #72	@ 0x48
 80170a4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80170a8:	4668      	mov	r0, sp
 80170aa:	f002 f84c 	bl	8019146 <memcpy>
 80170ae:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80170b2:	cb0c      	ldmia	r3, {r2, r3}
 80170b4:	4620      	mov	r0, r4
 80170b6:	f7f8 fecd 	bl	800fe54 <rmw_uxrce_get_static_input_buffer_for_entity>
 80170ba:	4607      	mov	r7, r0
 80170bc:	b1e0      	cbz	r0, 80170f8 <on_topic+0x88>
 80170be:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80170c2:	4632      	mov	r2, r6
 80170c4:	4628      	mov	r0, r5
 80170c6:	f108 0110 	add.w	r1, r8, #16
 80170ca:	f000 fc71 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 80170ce:	b930      	cbnz	r0, 80170de <on_topic+0x6e>
 80170d0:	480c      	ldr	r0, [pc, #48]	@ (8017104 <on_topic+0x94>)
 80170d2:	4639      	mov	r1, r7
 80170d4:	b014      	add	sp, #80	@ 0x50
 80170d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170da:	f000 b8bd 	b.w	8017258 <put_memory>
 80170de:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80170e2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80170e6:	f000 fb5f 	bl	80177a8 <rmw_uros_epoch_nanos>
 80170ea:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80170ee:	2305      	movs	r3, #5
 80170f0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80170f4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80170f8:	b014      	add	sp, #80	@ 0x50
 80170fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170fe:	bf00      	nop
 8017100:	2000b6bc 	.word	0x2000b6bc
 8017104:	2000b6ac 	.word	0x2000b6ac

08017108 <on_request>:
 8017108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801710c:	4823      	ldr	r0, [pc, #140]	@ (801719c <on_request+0x94>)
 801710e:	b094      	sub	sp, #80	@ 0x50
 8017110:	6800      	ldr	r0, [r0, #0]
 8017112:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017114:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017118:	9113      	str	r1, [sp, #76]	@ 0x4c
 801711a:	2800      	cmp	r0, #0
 801711c:	d03b      	beq.n	8017196 <on_request+0x8e>
 801711e:	461d      	mov	r5, r3
 8017120:	e001      	b.n	8017126 <on_request+0x1e>
 8017122:	6840      	ldr	r0, [r0, #4]
 8017124:	b3b8      	cbz	r0, 8017196 <on_request+0x8e>
 8017126:	6884      	ldr	r4, [r0, #8]
 8017128:	8b21      	ldrh	r1, [r4, #24]
 801712a:	4291      	cmp	r1, r2
 801712c:	d1f9      	bne.n	8017122 <on_request+0x1a>
 801712e:	2248      	movs	r2, #72	@ 0x48
 8017130:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017134:	4668      	mov	r0, sp
 8017136:	f002 f806 	bl	8019146 <memcpy>
 801713a:	f104 0320 	add.w	r3, r4, #32
 801713e:	cb0c      	ldmia	r3, {r2, r3}
 8017140:	4620      	mov	r0, r4
 8017142:	f7f8 fe87 	bl	800fe54 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017146:	4680      	mov	r8, r0
 8017148:	b328      	cbz	r0, 8017196 <on_request+0x8e>
 801714a:	4638      	mov	r0, r7
 801714c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017150:	4632      	mov	r2, r6
 8017152:	f107 0110 	add.w	r1, r7, #16
 8017156:	f000 fc2b 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801715a:	b930      	cbnz	r0, 801716a <on_request+0x62>
 801715c:	4810      	ldr	r0, [pc, #64]	@ (80171a0 <on_request+0x98>)
 801715e:	4641      	mov	r1, r8
 8017160:	b014      	add	sp, #80	@ 0x50
 8017162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017166:	f000 b877 	b.w	8017258 <put_memory>
 801716a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801716c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017170:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017174:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017178:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801717c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017180:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017184:	f000 fb10 	bl	80177a8 <rmw_uros_epoch_nanos>
 8017188:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801718c:	2303      	movs	r3, #3
 801718e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017192:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017196:	b014      	add	sp, #80	@ 0x50
 8017198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801719c:	2000b68c 	.word	0x2000b68c
 80171a0:	2000b6ac 	.word	0x2000b6ac

080171a4 <on_reply>:
 80171a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171a8:	4821      	ldr	r0, [pc, #132]	@ (8017230 <on_reply+0x8c>)
 80171aa:	b094      	sub	sp, #80	@ 0x50
 80171ac:	6800      	ldr	r0, [r0, #0]
 80171ae:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80171b0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80171b4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80171b6:	b3b8      	cbz	r0, 8017228 <on_reply+0x84>
 80171b8:	461d      	mov	r5, r3
 80171ba:	e001      	b.n	80171c0 <on_reply+0x1c>
 80171bc:	6840      	ldr	r0, [r0, #4]
 80171be:	b398      	cbz	r0, 8017228 <on_reply+0x84>
 80171c0:	6884      	ldr	r4, [r0, #8]
 80171c2:	8b21      	ldrh	r1, [r4, #24]
 80171c4:	4291      	cmp	r1, r2
 80171c6:	d1f9      	bne.n	80171bc <on_reply+0x18>
 80171c8:	2248      	movs	r2, #72	@ 0x48
 80171ca:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80171ce:	4668      	mov	r0, sp
 80171d0:	f001 ffb9 	bl	8019146 <memcpy>
 80171d4:	f104 0320 	add.w	r3, r4, #32
 80171d8:	cb0c      	ldmia	r3, {r2, r3}
 80171da:	4620      	mov	r0, r4
 80171dc:	f7f8 fe3a 	bl	800fe54 <rmw_uxrce_get_static_input_buffer_for_entity>
 80171e0:	4680      	mov	r8, r0
 80171e2:	b308      	cbz	r0, 8017228 <on_reply+0x84>
 80171e4:	4638      	mov	r0, r7
 80171e6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80171ea:	4632      	mov	r2, r6
 80171ec:	f107 0110 	add.w	r1, r7, #16
 80171f0:	f000 fbde 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 80171f4:	b930      	cbnz	r0, 8017204 <on_reply+0x60>
 80171f6:	480f      	ldr	r0, [pc, #60]	@ (8017234 <on_reply+0x90>)
 80171f8:	4641      	mov	r1, r8
 80171fa:	b014      	add	sp, #80	@ 0x50
 80171fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017200:	f000 b82a 	b.w	8017258 <put_memory>
 8017204:	2200      	movs	r2, #0
 8017206:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801720a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801720e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017212:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017216:	f000 fac7 	bl	80177a8 <rmw_uros_epoch_nanos>
 801721a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801721e:	2304      	movs	r3, #4
 8017220:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017224:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017228:	b014      	add	sp, #80	@ 0x50
 801722a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801722e:	bf00      	nop
 8017230:	20006a80 	.word	0x20006a80
 8017234:	2000b6ac 	.word	0x2000b6ac

08017238 <get_memory>:
 8017238:	4603      	mov	r3, r0
 801723a:	6840      	ldr	r0, [r0, #4]
 801723c:	b158      	cbz	r0, 8017256 <get_memory+0x1e>
 801723e:	6842      	ldr	r2, [r0, #4]
 8017240:	605a      	str	r2, [r3, #4]
 8017242:	b10a      	cbz	r2, 8017248 <get_memory+0x10>
 8017244:	2100      	movs	r1, #0
 8017246:	6011      	str	r1, [r2, #0]
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	6042      	str	r2, [r0, #4]
 801724c:	b102      	cbz	r2, 8017250 <get_memory+0x18>
 801724e:	6010      	str	r0, [r2, #0]
 8017250:	2200      	movs	r2, #0
 8017252:	6002      	str	r2, [r0, #0]
 8017254:	6018      	str	r0, [r3, #0]
 8017256:	4770      	bx	lr

08017258 <put_memory>:
 8017258:	680b      	ldr	r3, [r1, #0]
 801725a:	b10b      	cbz	r3, 8017260 <put_memory+0x8>
 801725c:	684a      	ldr	r2, [r1, #4]
 801725e:	605a      	str	r2, [r3, #4]
 8017260:	684a      	ldr	r2, [r1, #4]
 8017262:	b102      	cbz	r2, 8017266 <put_memory+0xe>
 8017264:	6013      	str	r3, [r2, #0]
 8017266:	6803      	ldr	r3, [r0, #0]
 8017268:	428b      	cmp	r3, r1
 801726a:	6843      	ldr	r3, [r0, #4]
 801726c:	bf08      	it	eq
 801726e:	6002      	streq	r2, [r0, #0]
 8017270:	604b      	str	r3, [r1, #4]
 8017272:	b103      	cbz	r3, 8017276 <put_memory+0x1e>
 8017274:	6019      	str	r1, [r3, #0]
 8017276:	2300      	movs	r3, #0
 8017278:	600b      	str	r3, [r1, #0]
 801727a:	6041      	str	r1, [r0, #4]
 801727c:	4770      	bx	lr
 801727e:	bf00      	nop

08017280 <rmw_create_guard_condition>:
 8017280:	b538      	push	{r3, r4, r5, lr}
 8017282:	4605      	mov	r5, r0
 8017284:	4807      	ldr	r0, [pc, #28]	@ (80172a4 <rmw_create_guard_condition+0x24>)
 8017286:	f7ff ffd7 	bl	8017238 <get_memory>
 801728a:	b148      	cbz	r0, 80172a0 <rmw_create_guard_condition+0x20>
 801728c:	6884      	ldr	r4, [r0, #8]
 801728e:	2300      	movs	r3, #0
 8017290:	7423      	strb	r3, [r4, #16]
 8017292:	61e5      	str	r5, [r4, #28]
 8017294:	f7f7 fcd0 	bl	800ec38 <rmw_get_implementation_identifier>
 8017298:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801729c:	f104 0014 	add.w	r0, r4, #20
 80172a0:	bd38      	pop	{r3, r4, r5, pc}
 80172a2:	bf00      	nop
 80172a4:	2000b64c 	.word	0x2000b64c

080172a8 <rmw_destroy_guard_condition>:
 80172a8:	b508      	push	{r3, lr}
 80172aa:	4b08      	ldr	r3, [pc, #32]	@ (80172cc <rmw_destroy_guard_condition+0x24>)
 80172ac:	6819      	ldr	r1, [r3, #0]
 80172ae:	b911      	cbnz	r1, 80172b6 <rmw_destroy_guard_condition+0xe>
 80172b0:	e00a      	b.n	80172c8 <rmw_destroy_guard_condition+0x20>
 80172b2:	6849      	ldr	r1, [r1, #4]
 80172b4:	b141      	cbz	r1, 80172c8 <rmw_destroy_guard_condition+0x20>
 80172b6:	688b      	ldr	r3, [r1, #8]
 80172b8:	3314      	adds	r3, #20
 80172ba:	4298      	cmp	r0, r3
 80172bc:	d1f9      	bne.n	80172b2 <rmw_destroy_guard_condition+0xa>
 80172be:	4803      	ldr	r0, [pc, #12]	@ (80172cc <rmw_destroy_guard_condition+0x24>)
 80172c0:	f7ff ffca 	bl	8017258 <put_memory>
 80172c4:	2000      	movs	r0, #0
 80172c6:	bd08      	pop	{r3, pc}
 80172c8:	2001      	movs	r0, #1
 80172ca:	bd08      	pop	{r3, pc}
 80172cc:	2000b64c 	.word	0x2000b64c

080172d0 <create_topic>:
 80172d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d4:	4605      	mov	r5, r0
 80172d6:	b084      	sub	sp, #16
 80172d8:	4822      	ldr	r0, [pc, #136]	@ (8017364 <create_topic+0x94>)
 80172da:	460f      	mov	r7, r1
 80172dc:	4616      	mov	r6, r2
 80172de:	f7ff ffab 	bl	8017238 <get_memory>
 80172e2:	4604      	mov	r4, r0
 80172e4:	2800      	cmp	r0, #0
 80172e6:	d039      	beq.n	801735c <create_topic+0x8c>
 80172e8:	692b      	ldr	r3, [r5, #16]
 80172ea:	6884      	ldr	r4, [r0, #8]
 80172ec:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801736c <create_topic+0x9c>
 80172f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80172f4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80172f8:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80172fc:	1c42      	adds	r2, r0, #1
 80172fe:	2102      	movs	r1, #2
 8017300:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017304:	f7f9 fe50 	bl	8010fa8 <uxr_object_id>
 8017308:	223c      	movs	r2, #60	@ 0x3c
 801730a:	6120      	str	r0, [r4, #16]
 801730c:	4641      	mov	r1, r8
 801730e:	4638      	mov	r0, r7
 8017310:	f7f8 ff94 	bl	801023c <generate_topic_name>
 8017314:	b1f0      	cbz	r0, 8017354 <create_topic+0x84>
 8017316:	4f14      	ldr	r7, [pc, #80]	@ (8017368 <create_topic+0x98>)
 8017318:	4630      	mov	r0, r6
 801731a:	2264      	movs	r2, #100	@ 0x64
 801731c:	4639      	mov	r1, r7
 801731e:	f7f8 ff5d 	bl	80101dc <generate_type_name>
 8017322:	b1b8      	cbz	r0, 8017354 <create_topic+0x84>
 8017324:	6928      	ldr	r0, [r5, #16]
 8017326:	2306      	movs	r3, #6
 8017328:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801732c:	f8cd 8000 	str.w	r8, [sp]
 8017330:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017334:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017338:	6811      	ldr	r1, [r2, #0]
 801733a:	696b      	ldr	r3, [r5, #20]
 801733c:	6922      	ldr	r2, [r4, #16]
 801733e:	f7f9 fc5b 	bl	8010bf8 <uxr_buffer_create_topic_bin>
 8017342:	4602      	mov	r2, r0
 8017344:	6928      	ldr	r0, [r5, #16]
 8017346:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801734a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801734e:	f7f8 fe75 	bl	801003c <run_xrce_session>
 8017352:	b918      	cbnz	r0, 801735c <create_topic+0x8c>
 8017354:	4620      	mov	r0, r4
 8017356:	f7f8 fd71 	bl	800fe3c <rmw_uxrce_fini_topic_memory>
 801735a:	2400      	movs	r4, #0
 801735c:	4620      	mov	r0, r4
 801735e:	b004      	add	sp, #16
 8017360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017364:	2000b6cc 	.word	0x2000b6cc
 8017368:	2000b744 	.word	0x2000b744
 801736c:	2000b708 	.word	0x2000b708

08017370 <destroy_topic>:
 8017370:	b538      	push	{r3, r4, r5, lr}
 8017372:	6985      	ldr	r5, [r0, #24]
 8017374:	b1d5      	cbz	r5, 80173ac <destroy_topic+0x3c>
 8017376:	4604      	mov	r4, r0
 8017378:	6928      	ldr	r0, [r5, #16]
 801737a:	6922      	ldr	r2, [r4, #16]
 801737c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017380:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017384:	6819      	ldr	r1, [r3, #0]
 8017386:	f7f9 fbb9 	bl	8010afc <uxr_buffer_delete_entity>
 801738a:	4602      	mov	r2, r0
 801738c:	6928      	ldr	r0, [r5, #16]
 801738e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017392:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017396:	f7f8 fe51 	bl	801003c <run_xrce_session>
 801739a:	2800      	cmp	r0, #0
 801739c:	4620      	mov	r0, r4
 801739e:	bf14      	ite	ne
 80173a0:	2400      	movne	r4, #0
 80173a2:	2402      	moveq	r4, #2
 80173a4:	f7f8 fd4a 	bl	800fe3c <rmw_uxrce_fini_topic_memory>
 80173a8:	4620      	mov	r0, r4
 80173aa:	bd38      	pop	{r3, r4, r5, pc}
 80173ac:	2401      	movs	r4, #1
 80173ae:	4620      	mov	r0, r4
 80173b0:	bd38      	pop	{r3, r4, r5, pc}
 80173b2:	bf00      	nop

080173b4 <rmw_take_with_info>:
 80173b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173b6:	4604      	mov	r4, r0
 80173b8:	6800      	ldr	r0, [r0, #0]
 80173ba:	b089      	sub	sp, #36	@ 0x24
 80173bc:	460f      	mov	r7, r1
 80173be:	4615      	mov	r5, r2
 80173c0:	b128      	cbz	r0, 80173ce <rmw_take_with_info+0x1a>
 80173c2:	4b24      	ldr	r3, [pc, #144]	@ (8017454 <rmw_take_with_info+0xa0>)
 80173c4:	6819      	ldr	r1, [r3, #0]
 80173c6:	f7e8 ff2b 	bl	8000220 <strcmp>
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d13e      	bne.n	801744c <rmw_take_with_info+0x98>
 80173ce:	b305      	cbz	r5, 8017412 <rmw_take_with_info+0x5e>
 80173d0:	6864      	ldr	r4, [r4, #4]
 80173d2:	2300      	movs	r3, #0
 80173d4:	702b      	strb	r3, [r5, #0]
 80173d6:	f7f8 fdb3 	bl	800ff40 <rmw_uxrce_clean_expired_static_input_buffer>
 80173da:	4620      	mov	r0, r4
 80173dc:	f7f8 fd8a 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80173e0:	4606      	mov	r6, r0
 80173e2:	b1f0      	cbz	r0, 8017422 <rmw_take_with_info+0x6e>
 80173e4:	6881      	ldr	r1, [r0, #8]
 80173e6:	4668      	mov	r0, sp
 80173e8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80173ec:	3110      	adds	r1, #16
 80173ee:	f7f5 f82f 	bl	800c450 <ucdr_init_buffer>
 80173f2:	69a3      	ldr	r3, [r4, #24]
 80173f4:	4639      	mov	r1, r7
 80173f6:	68db      	ldr	r3, [r3, #12]
 80173f8:	4668      	mov	r0, sp
 80173fa:	4798      	blx	r3
 80173fc:	4631      	mov	r1, r6
 80173fe:	4604      	mov	r4, r0
 8017400:	4815      	ldr	r0, [pc, #84]	@ (8017458 <rmw_take_with_info+0xa4>)
 8017402:	f7ff ff29 	bl	8017258 <put_memory>
 8017406:	702c      	strb	r4, [r5, #0]
 8017408:	f084 0001 	eor.w	r0, r4, #1
 801740c:	b2c0      	uxtb	r0, r0
 801740e:	b009      	add	sp, #36	@ 0x24
 8017410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017412:	6864      	ldr	r4, [r4, #4]
 8017414:	f7f8 fd94 	bl	800ff40 <rmw_uxrce_clean_expired_static_input_buffer>
 8017418:	4620      	mov	r0, r4
 801741a:	f7f8 fd6b 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801741e:	4605      	mov	r5, r0
 8017420:	b910      	cbnz	r0, 8017428 <rmw_take_with_info+0x74>
 8017422:	2001      	movs	r0, #1
 8017424:	b009      	add	sp, #36	@ 0x24
 8017426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017428:	68a9      	ldr	r1, [r5, #8]
 801742a:	4668      	mov	r0, sp
 801742c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017430:	3110      	adds	r1, #16
 8017432:	f7f5 f80d 	bl	800c450 <ucdr_init_buffer>
 8017436:	69a3      	ldr	r3, [r4, #24]
 8017438:	4639      	mov	r1, r7
 801743a:	68db      	ldr	r3, [r3, #12]
 801743c:	4668      	mov	r0, sp
 801743e:	4798      	blx	r3
 8017440:	4629      	mov	r1, r5
 8017442:	4604      	mov	r4, r0
 8017444:	4804      	ldr	r0, [pc, #16]	@ (8017458 <rmw_take_with_info+0xa4>)
 8017446:	f7ff ff07 	bl	8017258 <put_memory>
 801744a:	e7dd      	b.n	8017408 <rmw_take_with_info+0x54>
 801744c:	200c      	movs	r0, #12
 801744e:	b009      	add	sp, #36	@ 0x24
 8017450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017452:	bf00      	nop
 8017454:	0801b2bc 	.word	0x0801b2bc
 8017458:	2000b6ac 	.word	0x2000b6ac

0801745c <rmw_trigger_guard_condition>:
 801745c:	b160      	cbz	r0, 8017478 <rmw_trigger_guard_condition+0x1c>
 801745e:	b510      	push	{r4, lr}
 8017460:	4604      	mov	r4, r0
 8017462:	6800      	ldr	r0, [r0, #0]
 8017464:	f7f8 ff04 	bl	8010270 <is_uxrce_rmw_identifier_valid>
 8017468:	b908      	cbnz	r0, 801746e <rmw_trigger_guard_condition+0x12>
 801746a:	2001      	movs	r0, #1
 801746c:	bd10      	pop	{r4, pc}
 801746e:	6863      	ldr	r3, [r4, #4]
 8017470:	2201      	movs	r2, #1
 8017472:	741a      	strb	r2, [r3, #16]
 8017474:	2000      	movs	r0, #0
 8017476:	bd10      	pop	{r4, pc}
 8017478:	2001      	movs	r0, #1
 801747a:	4770      	bx	lr

0801747c <rmw_wait>:
 801747c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017480:	b089      	sub	sp, #36	@ 0x24
 8017482:	4605      	mov	r5, r0
 8017484:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017486:	460e      	mov	r6, r1
 8017488:	4698      	mov	r8, r3
 801748a:	4691      	mov	r9, r2
 801748c:	2a00      	cmp	r2, #0
 801748e:	f000 810a 	beq.w	80176a6 <rmw_wait+0x22a>
 8017492:	b16c      	cbz	r4, 80174b0 <rmw_wait+0x34>
 8017494:	4bae      	ldr	r3, [pc, #696]	@ (8017750 <rmw_wait+0x2d4>)
 8017496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017498:	af04      	add	r7, sp, #16
 801749a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801749e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80174a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80174a6:	f7ff fd53 	bl	8016f50 <rmw_time_equal>
 80174aa:	2800      	cmp	r0, #0
 80174ac:	f000 8127 	beq.w	80176fe <rmw_wait+0x282>
 80174b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80174b4:	f7f8 fd44 	bl	800ff40 <rmw_uxrce_clean_expired_static_input_buffer>
 80174b8:	4ba6      	ldr	r3, [pc, #664]	@ (8017754 <rmw_wait+0x2d8>)
 80174ba:	681c      	ldr	r4, [r3, #0]
 80174bc:	b14c      	cbz	r4, 80174d2 <rmw_wait+0x56>
 80174be:	4623      	mov	r3, r4
 80174c0:	2100      	movs	r1, #0
 80174c2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80174c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80174ca:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d1f7      	bne.n	80174c2 <rmw_wait+0x46>
 80174d2:	f1b9 0f00 	cmp.w	r9, #0
 80174d6:	d011      	beq.n	80174fc <rmw_wait+0x80>
 80174d8:	f8d9 1000 	ldr.w	r1, [r9]
 80174dc:	b171      	cbz	r1, 80174fc <rmw_wait+0x80>
 80174de:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80174e2:	2300      	movs	r3, #0
 80174e4:	2001      	movs	r0, #1
 80174e6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80174ea:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80174ec:	6912      	ldr	r2, [r2, #16]
 80174ee:	3301      	adds	r3, #1
 80174f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80174f4:	4299      	cmp	r1, r3
 80174f6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80174fa:	d1f4      	bne.n	80174e6 <rmw_wait+0x6a>
 80174fc:	f1b8 0f00 	cmp.w	r8, #0
 8017500:	d011      	beq.n	8017526 <rmw_wait+0xaa>
 8017502:	f8d8 1000 	ldr.w	r1, [r8]
 8017506:	b171      	cbz	r1, 8017526 <rmw_wait+0xaa>
 8017508:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801750c:	2300      	movs	r3, #0
 801750e:	2001      	movs	r0, #1
 8017510:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017514:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017516:	6912      	ldr	r2, [r2, #16]
 8017518:	3301      	adds	r3, #1
 801751a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801751e:	4299      	cmp	r1, r3
 8017520:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017524:	d1f4      	bne.n	8017510 <rmw_wait+0x94>
 8017526:	b185      	cbz	r5, 801754a <rmw_wait+0xce>
 8017528:	6829      	ldr	r1, [r5, #0]
 801752a:	b171      	cbz	r1, 801754a <rmw_wait+0xce>
 801752c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017530:	2300      	movs	r3, #0
 8017532:	2001      	movs	r0, #1
 8017534:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017538:	6a12      	ldr	r2, [r2, #32]
 801753a:	6912      	ldr	r2, [r2, #16]
 801753c:	3301      	adds	r3, #1
 801753e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017542:	4299      	cmp	r1, r3
 8017544:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017548:	d1f4      	bne.n	8017534 <rmw_wait+0xb8>
 801754a:	b34c      	cbz	r4, 80175a0 <rmw_wait+0x124>
 801754c:	4622      	mov	r2, r4
 801754e:	2300      	movs	r3, #0
 8017550:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017554:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017558:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801755c:	440b      	add	r3, r1
 801755e:	b2db      	uxtb	r3, r3
 8017560:	2a00      	cmp	r2, #0
 8017562:	d1f5      	bne.n	8017550 <rmw_wait+0xd4>
 8017564:	2b00      	cmp	r3, #0
 8017566:	f000 8084 	beq.w	8017672 <rmw_wait+0x1f6>
 801756a:	1c7a      	adds	r2, r7, #1
 801756c:	d00d      	beq.n	801758a <rmw_wait+0x10e>
 801756e:	ee07 7a90 	vmov	s15, r7
 8017572:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017576:	ee07 3a90 	vmov	s15, r3
 801757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017582:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017586:	ee17 7a90 	vmov	r7, s15
 801758a:	68a0      	ldr	r0, [r4, #8]
 801758c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017590:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017594:	2b00      	cmp	r3, #0
 8017596:	f040 8090 	bne.w	80176ba <rmw_wait+0x23e>
 801759a:	6864      	ldr	r4, [r4, #4]
 801759c:	2c00      	cmp	r4, #0
 801759e:	d1f4      	bne.n	801758a <rmw_wait+0x10e>
 80175a0:	f1b9 0f00 	cmp.w	r9, #0
 80175a4:	f000 80bc 	beq.w	8017720 <rmw_wait+0x2a4>
 80175a8:	f8d9 7000 	ldr.w	r7, [r9]
 80175ac:	2f00      	cmp	r7, #0
 80175ae:	f000 808e 	beq.w	80176ce <rmw_wait+0x252>
 80175b2:	2400      	movs	r4, #0
 80175b4:	4627      	mov	r7, r4
 80175b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80175ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80175be:	f7f8 fc99 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175c2:	2800      	cmp	r0, #0
 80175c4:	d05f      	beq.n	8017686 <rmw_wait+0x20a>
 80175c6:	f8d9 3000 	ldr.w	r3, [r9]
 80175ca:	3401      	adds	r4, #1
 80175cc:	42a3      	cmp	r3, r4
 80175ce:	f04f 0701 	mov.w	r7, #1
 80175d2:	d8f0      	bhi.n	80175b6 <rmw_wait+0x13a>
 80175d4:	f1b8 0f00 	cmp.w	r8, #0
 80175d8:	d012      	beq.n	8017600 <rmw_wait+0x184>
 80175da:	f8d8 3000 	ldr.w	r3, [r8]
 80175de:	b17b      	cbz	r3, 8017600 <rmw_wait+0x184>
 80175e0:	2400      	movs	r4, #0
 80175e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80175e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80175ea:	f7f8 fc83 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d051      	beq.n	8017696 <rmw_wait+0x21a>
 80175f2:	f8d8 3000 	ldr.w	r3, [r8]
 80175f6:	3401      	adds	r4, #1
 80175f8:	42a3      	cmp	r3, r4
 80175fa:	f04f 0701 	mov.w	r7, #1
 80175fe:	d8f0      	bhi.n	80175e2 <rmw_wait+0x166>
 8017600:	b1dd      	cbz	r5, 801763a <rmw_wait+0x1be>
 8017602:	682b      	ldr	r3, [r5, #0]
 8017604:	b1cb      	cbz	r3, 801763a <rmw_wait+0x1be>
 8017606:	2400      	movs	r4, #0
 8017608:	686b      	ldr	r3, [r5, #4]
 801760a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801760e:	f7f8 fc71 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017612:	b158      	cbz	r0, 801762c <rmw_wait+0x1b0>
 8017614:	682b      	ldr	r3, [r5, #0]
 8017616:	3401      	adds	r4, #1
 8017618:	42a3      	cmp	r3, r4
 801761a:	d969      	bls.n	80176f0 <rmw_wait+0x274>
 801761c:	686b      	ldr	r3, [r5, #4]
 801761e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017622:	2701      	movs	r7, #1
 8017624:	f7f8 fc66 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017628:	2800      	cmp	r0, #0
 801762a:	d1f3      	bne.n	8017614 <rmw_wait+0x198>
 801762c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017630:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017634:	3401      	adds	r4, #1
 8017636:	42a3      	cmp	r3, r4
 8017638:	d8e6      	bhi.n	8017608 <rmw_wait+0x18c>
 801763a:	b1a6      	cbz	r6, 8017666 <rmw_wait+0x1ea>
 801763c:	6834      	ldr	r4, [r6, #0]
 801763e:	b194      	cbz	r4, 8017666 <rmw_wait+0x1ea>
 8017640:	2300      	movs	r3, #0
 8017642:	461d      	mov	r5, r3
 8017644:	e004      	b.n	8017650 <rmw_wait+0x1d4>
 8017646:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801764a:	3301      	adds	r3, #1
 801764c:	42a3      	cmp	r3, r4
 801764e:	d00a      	beq.n	8017666 <rmw_wait+0x1ea>
 8017650:	6870      	ldr	r0, [r6, #4]
 8017652:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017656:	7c0a      	ldrb	r2, [r1, #16]
 8017658:	2a00      	cmp	r2, #0
 801765a:	d0f4      	beq.n	8017646 <rmw_wait+0x1ca>
 801765c:	3301      	adds	r3, #1
 801765e:	42a3      	cmp	r3, r4
 8017660:	740d      	strb	r5, [r1, #16]
 8017662:	4617      	mov	r7, r2
 8017664:	d1f4      	bne.n	8017650 <rmw_wait+0x1d4>
 8017666:	2f00      	cmp	r7, #0
 8017668:	d03e      	beq.n	80176e8 <rmw_wait+0x26c>
 801766a:	2000      	movs	r0, #0
 801766c:	b009      	add	sp, #36	@ 0x24
 801766e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017672:	68a0      	ldr	r0, [r4, #8]
 8017674:	2100      	movs	r1, #0
 8017676:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801767a:	f7fa fa9b 	bl	8011bb4 <uxr_run_session_timeout>
 801767e:	6864      	ldr	r4, [r4, #4]
 8017680:	2c00      	cmp	r4, #0
 8017682:	d1f6      	bne.n	8017672 <rmw_wait+0x1f6>
 8017684:	e78c      	b.n	80175a0 <rmw_wait+0x124>
 8017686:	e9d9 3200 	ldrd	r3, r2, [r9]
 801768a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801768e:	3401      	adds	r4, #1
 8017690:	42a3      	cmp	r3, r4
 8017692:	d890      	bhi.n	80175b6 <rmw_wait+0x13a>
 8017694:	e79e      	b.n	80175d4 <rmw_wait+0x158>
 8017696:	e9d8 3200 	ldrd	r3, r2, [r8]
 801769a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801769e:	3401      	adds	r4, #1
 80176a0:	429c      	cmp	r4, r3
 80176a2:	d39e      	bcc.n	80175e2 <rmw_wait+0x166>
 80176a4:	e7ac      	b.n	8017600 <rmw_wait+0x184>
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	f47f aef3 	bne.w	8017492 <rmw_wait+0x16>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	f47f aef0 	bne.w	8017492 <rmw_wait+0x16>
 80176b2:	2900      	cmp	r1, #0
 80176b4:	f47f aeed 	bne.w	8017492 <rmw_wait+0x16>
 80176b8:	e7d7      	b.n	801766a <rmw_wait+0x1ee>
 80176ba:	4639      	mov	r1, r7
 80176bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176c0:	f7fa fa92 	bl	8011be8 <uxr_run_session_until_data>
 80176c4:	6864      	ldr	r4, [r4, #4]
 80176c6:	2c00      	cmp	r4, #0
 80176c8:	f47f af5f 	bne.w	801758a <rmw_wait+0x10e>
 80176cc:	e768      	b.n	80175a0 <rmw_wait+0x124>
 80176ce:	f1b8 0f00 	cmp.w	r8, #0
 80176d2:	d032      	beq.n	801773a <rmw_wait+0x2be>
 80176d4:	f8d8 3000 	ldr.w	r3, [r8]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d181      	bne.n	80175e0 <rmw_wait+0x164>
 80176dc:	461f      	mov	r7, r3
 80176de:	2d00      	cmp	r5, #0
 80176e0:	d18f      	bne.n	8017602 <rmw_wait+0x186>
 80176e2:	462f      	mov	r7, r5
 80176e4:	2e00      	cmp	r6, #0
 80176e6:	d1a9      	bne.n	801763c <rmw_wait+0x1c0>
 80176e8:	2002      	movs	r0, #2
 80176ea:	b009      	add	sp, #36	@ 0x24
 80176ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176f0:	2e00      	cmp	r6, #0
 80176f2:	d0ba      	beq.n	801766a <rmw_wait+0x1ee>
 80176f4:	6834      	ldr	r4, [r6, #0]
 80176f6:	2701      	movs	r7, #1
 80176f8:	2c00      	cmp	r4, #0
 80176fa:	d1a1      	bne.n	8017640 <rmw_wait+0x1c4>
 80176fc:	e7b5      	b.n	801766a <rmw_wait+0x1ee>
 80176fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017702:	f7ff fc79 	bl	8016ff8 <rmw_time_total_nsec>
 8017706:	2300      	movs	r3, #0
 8017708:	4a13      	ldr	r2, [pc, #76]	@ (8017758 <rmw_wait+0x2dc>)
 801770a:	f7e9 f84d 	bl	80007a8 <__aeabi_uldivmod>
 801770e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017712:	f171 0300 	sbcs.w	r3, r1, #0
 8017716:	4607      	mov	r7, r0
 8017718:	bfa8      	it	ge
 801771a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801771e:	e6c9      	b.n	80174b4 <rmw_wait+0x38>
 8017720:	f1b8 0f00 	cmp.w	r8, #0
 8017724:	d009      	beq.n	801773a <rmw_wait+0x2be>
 8017726:	f8d8 3000 	ldr.w	r3, [r8]
 801772a:	464f      	mov	r7, r9
 801772c:	2b00      	cmp	r3, #0
 801772e:	f47f af57 	bne.w	80175e0 <rmw_wait+0x164>
 8017732:	2d00      	cmp	r5, #0
 8017734:	f47f af65 	bne.w	8017602 <rmw_wait+0x186>
 8017738:	e7d3      	b.n	80176e2 <rmw_wait+0x266>
 801773a:	b17d      	cbz	r5, 801775c <rmw_wait+0x2e0>
 801773c:	682b      	ldr	r3, [r5, #0]
 801773e:	4647      	mov	r7, r8
 8017740:	2b00      	cmp	r3, #0
 8017742:	f47f af60 	bne.w	8017606 <rmw_wait+0x18a>
 8017746:	2e00      	cmp	r6, #0
 8017748:	f47f af78 	bne.w	801763c <rmw_wait+0x1c0>
 801774c:	e7cc      	b.n	80176e8 <rmw_wait+0x26c>
 801774e:	bf00      	nop
 8017750:	08019e90 	.word	0x08019e90
 8017754:	2000b69c 	.word	0x2000b69c
 8017758:	000f4240 	.word	0x000f4240
 801775c:	2e00      	cmp	r6, #0
 801775e:	d0c3      	beq.n	80176e8 <rmw_wait+0x26c>
 8017760:	6834      	ldr	r4, [r6, #0]
 8017762:	462f      	mov	r7, r5
 8017764:	2c00      	cmp	r4, #0
 8017766:	f47f af6b 	bne.w	8017640 <rmw_wait+0x1c4>
 801776a:	e7bd      	b.n	80176e8 <rmw_wait+0x26c>

0801776c <rmw_create_wait_set>:
 801776c:	b508      	push	{r3, lr}
 801776e:	4803      	ldr	r0, [pc, #12]	@ (801777c <rmw_create_wait_set+0x10>)
 8017770:	f7ff fd62 	bl	8017238 <get_memory>
 8017774:	b108      	cbz	r0, 801777a <rmw_create_wait_set+0xe>
 8017776:	6880      	ldr	r0, [r0, #8]
 8017778:	3010      	adds	r0, #16
 801777a:	bd08      	pop	{r3, pc}
 801777c:	2000b6dc 	.word	0x2000b6dc

08017780 <rmw_destroy_wait_set>:
 8017780:	b508      	push	{r3, lr}
 8017782:	4b08      	ldr	r3, [pc, #32]	@ (80177a4 <rmw_destroy_wait_set+0x24>)
 8017784:	6819      	ldr	r1, [r3, #0]
 8017786:	b911      	cbnz	r1, 801778e <rmw_destroy_wait_set+0xe>
 8017788:	e00a      	b.n	80177a0 <rmw_destroy_wait_set+0x20>
 801778a:	6849      	ldr	r1, [r1, #4]
 801778c:	b141      	cbz	r1, 80177a0 <rmw_destroy_wait_set+0x20>
 801778e:	688b      	ldr	r3, [r1, #8]
 8017790:	3310      	adds	r3, #16
 8017792:	4298      	cmp	r0, r3
 8017794:	d1f9      	bne.n	801778a <rmw_destroy_wait_set+0xa>
 8017796:	4803      	ldr	r0, [pc, #12]	@ (80177a4 <rmw_destroy_wait_set+0x24>)
 8017798:	f7ff fd5e 	bl	8017258 <put_memory>
 801779c:	2000      	movs	r0, #0
 801779e:	bd08      	pop	{r3, pc}
 80177a0:	2001      	movs	r0, #1
 80177a2:	bd08      	pop	{r3, pc}
 80177a4:	2000b6dc 	.word	0x2000b6dc

080177a8 <rmw_uros_epoch_nanos>:
 80177a8:	4b05      	ldr	r3, [pc, #20]	@ (80177c0 <rmw_uros_epoch_nanos+0x18>)
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	b123      	cbz	r3, 80177b8 <rmw_uros_epoch_nanos+0x10>
 80177ae:	6898      	ldr	r0, [r3, #8]
 80177b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177b4:	f7f9 be6e 	b.w	8011494 <uxr_epoch_nanos>
 80177b8:	2000      	movs	r0, #0
 80177ba:	2100      	movs	r1, #0
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop
 80177c0:	2000b69c 	.word	0x2000b69c

080177c4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80177c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c8:	6805      	ldr	r5, [r0, #0]
 80177ca:	4604      	mov	r4, r0
 80177cc:	4628      	mov	r0, r5
 80177ce:	460e      	mov	r6, r1
 80177d0:	f7e8 fd26 	bl	8000220 <strcmp>
 80177d4:	b1c8      	cbz	r0, 801780a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80177d6:	4b11      	ldr	r3, [pc, #68]	@ (801781c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	429d      	cmp	r5, r3
 80177dc:	d112      	bne.n	8017804 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80177de:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80177e2:	f8d8 4000 	ldr.w	r4, [r8]
 80177e6:	b16c      	cbz	r4, 8017804 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80177e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80177ec:	2700      	movs	r7, #0
 80177ee:	3d04      	subs	r5, #4
 80177f0:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80177f4:	4631      	mov	r1, r6
 80177f6:	f7e8 fd13 	bl	8000220 <strcmp>
 80177fa:	00bb      	lsls	r3, r7, #2
 80177fc:	b140      	cbz	r0, 8017810 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80177fe:	3701      	adds	r7, #1
 8017800:	42bc      	cmp	r4, r7
 8017802:	d1f5      	bne.n	80177f0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8017804:	2000      	movs	r0, #0
 8017806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801780a:	4620      	mov	r0, r4
 801780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017810:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017818:	58d3      	ldr	r3, [r2, r3]
 801781a:	4718      	bx	r3
 801781c:	200001d0 	.word	0x200001d0

08017820 <ucdr_serialize_endian_array_char>:
 8017820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017824:	4619      	mov	r1, r3
 8017826:	461f      	mov	r7, r3
 8017828:	4605      	mov	r5, r0
 801782a:	4690      	mov	r8, r2
 801782c:	f7f4 fdbc 	bl	800c3a8 <ucdr_check_buffer_available_for>
 8017830:	b9e0      	cbnz	r0, 801786c <ucdr_serialize_endian_array_char+0x4c>
 8017832:	463e      	mov	r6, r7
 8017834:	e009      	b.n	801784a <ucdr_serialize_endian_array_char+0x2a>
 8017836:	68a8      	ldr	r0, [r5, #8]
 8017838:	f001 fc85 	bl	8019146 <memcpy>
 801783c:	68ab      	ldr	r3, [r5, #8]
 801783e:	6928      	ldr	r0, [r5, #16]
 8017840:	4423      	add	r3, r4
 8017842:	4420      	add	r0, r4
 8017844:	1b36      	subs	r6, r6, r4
 8017846:	60ab      	str	r3, [r5, #8]
 8017848:	6128      	str	r0, [r5, #16]
 801784a:	4631      	mov	r1, r6
 801784c:	2201      	movs	r2, #1
 801784e:	4628      	mov	r0, r5
 8017850:	f7f4 fe32 	bl	800c4b8 <ucdr_check_final_buffer_behavior_array>
 8017854:	1bb9      	subs	r1, r7, r6
 8017856:	4441      	add	r1, r8
 8017858:	4604      	mov	r4, r0
 801785a:	4602      	mov	r2, r0
 801785c:	2800      	cmp	r0, #0
 801785e:	d1ea      	bne.n	8017836 <ucdr_serialize_endian_array_char+0x16>
 8017860:	2301      	movs	r3, #1
 8017862:	7da8      	ldrb	r0, [r5, #22]
 8017864:	756b      	strb	r3, [r5, #21]
 8017866:	4058      	eors	r0, r3
 8017868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801786c:	463a      	mov	r2, r7
 801786e:	68a8      	ldr	r0, [r5, #8]
 8017870:	4641      	mov	r1, r8
 8017872:	f001 fc68 	bl	8019146 <memcpy>
 8017876:	68aa      	ldr	r2, [r5, #8]
 8017878:	692b      	ldr	r3, [r5, #16]
 801787a:	443a      	add	r2, r7
 801787c:	443b      	add	r3, r7
 801787e:	60aa      	str	r2, [r5, #8]
 8017880:	612b      	str	r3, [r5, #16]
 8017882:	e7ed      	b.n	8017860 <ucdr_serialize_endian_array_char+0x40>

08017884 <ucdr_deserialize_endian_array_char>:
 8017884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017888:	4619      	mov	r1, r3
 801788a:	461f      	mov	r7, r3
 801788c:	4605      	mov	r5, r0
 801788e:	4690      	mov	r8, r2
 8017890:	f7f4 fd8a 	bl	800c3a8 <ucdr_check_buffer_available_for>
 8017894:	b9e0      	cbnz	r0, 80178d0 <ucdr_deserialize_endian_array_char+0x4c>
 8017896:	463e      	mov	r6, r7
 8017898:	e009      	b.n	80178ae <ucdr_deserialize_endian_array_char+0x2a>
 801789a:	68a9      	ldr	r1, [r5, #8]
 801789c:	f001 fc53 	bl	8019146 <memcpy>
 80178a0:	68ab      	ldr	r3, [r5, #8]
 80178a2:	6928      	ldr	r0, [r5, #16]
 80178a4:	4423      	add	r3, r4
 80178a6:	4420      	add	r0, r4
 80178a8:	1b36      	subs	r6, r6, r4
 80178aa:	60ab      	str	r3, [r5, #8]
 80178ac:	6128      	str	r0, [r5, #16]
 80178ae:	2201      	movs	r2, #1
 80178b0:	4631      	mov	r1, r6
 80178b2:	4628      	mov	r0, r5
 80178b4:	f7f4 fe00 	bl	800c4b8 <ucdr_check_final_buffer_behavior_array>
 80178b8:	4604      	mov	r4, r0
 80178ba:	1bb8      	subs	r0, r7, r6
 80178bc:	4440      	add	r0, r8
 80178be:	4622      	mov	r2, r4
 80178c0:	2c00      	cmp	r4, #0
 80178c2:	d1ea      	bne.n	801789a <ucdr_deserialize_endian_array_char+0x16>
 80178c4:	2301      	movs	r3, #1
 80178c6:	7da8      	ldrb	r0, [r5, #22]
 80178c8:	756b      	strb	r3, [r5, #21]
 80178ca:	4058      	eors	r0, r3
 80178cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178d0:	463a      	mov	r2, r7
 80178d2:	68a9      	ldr	r1, [r5, #8]
 80178d4:	4640      	mov	r0, r8
 80178d6:	f001 fc36 	bl	8019146 <memcpy>
 80178da:	68aa      	ldr	r2, [r5, #8]
 80178dc:	692b      	ldr	r3, [r5, #16]
 80178de:	443a      	add	r2, r7
 80178e0:	443b      	add	r3, r7
 80178e2:	60aa      	str	r2, [r5, #8]
 80178e4:	612b      	str	r3, [r5, #16]
 80178e6:	e7ed      	b.n	80178c4 <ucdr_deserialize_endian_array_char+0x40>

080178e8 <ucdr_serialize_array_uint8_t>:
 80178e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ec:	4688      	mov	r8, r1
 80178ee:	4611      	mov	r1, r2
 80178f0:	4617      	mov	r7, r2
 80178f2:	4605      	mov	r5, r0
 80178f4:	f7f4 fd58 	bl	800c3a8 <ucdr_check_buffer_available_for>
 80178f8:	b9e0      	cbnz	r0, 8017934 <ucdr_serialize_array_uint8_t+0x4c>
 80178fa:	463e      	mov	r6, r7
 80178fc:	e009      	b.n	8017912 <ucdr_serialize_array_uint8_t+0x2a>
 80178fe:	68a8      	ldr	r0, [r5, #8]
 8017900:	f001 fc21 	bl	8019146 <memcpy>
 8017904:	68aa      	ldr	r2, [r5, #8]
 8017906:	692b      	ldr	r3, [r5, #16]
 8017908:	4422      	add	r2, r4
 801790a:	4423      	add	r3, r4
 801790c:	1b36      	subs	r6, r6, r4
 801790e:	60aa      	str	r2, [r5, #8]
 8017910:	612b      	str	r3, [r5, #16]
 8017912:	4631      	mov	r1, r6
 8017914:	2201      	movs	r2, #1
 8017916:	4628      	mov	r0, r5
 8017918:	f7f4 fdce 	bl	800c4b8 <ucdr_check_final_buffer_behavior_array>
 801791c:	1bb9      	subs	r1, r7, r6
 801791e:	4441      	add	r1, r8
 8017920:	4604      	mov	r4, r0
 8017922:	4602      	mov	r2, r0
 8017924:	2800      	cmp	r0, #0
 8017926:	d1ea      	bne.n	80178fe <ucdr_serialize_array_uint8_t+0x16>
 8017928:	2301      	movs	r3, #1
 801792a:	7da8      	ldrb	r0, [r5, #22]
 801792c:	756b      	strb	r3, [r5, #21]
 801792e:	4058      	eors	r0, r3
 8017930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017934:	463a      	mov	r2, r7
 8017936:	68a8      	ldr	r0, [r5, #8]
 8017938:	4641      	mov	r1, r8
 801793a:	f001 fc04 	bl	8019146 <memcpy>
 801793e:	68aa      	ldr	r2, [r5, #8]
 8017940:	692b      	ldr	r3, [r5, #16]
 8017942:	443a      	add	r2, r7
 8017944:	443b      	add	r3, r7
 8017946:	60aa      	str	r2, [r5, #8]
 8017948:	612b      	str	r3, [r5, #16]
 801794a:	e7ed      	b.n	8017928 <ucdr_serialize_array_uint8_t+0x40>

0801794c <ucdr_serialize_endian_array_uint8_t>:
 801794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017950:	4619      	mov	r1, r3
 8017952:	461f      	mov	r7, r3
 8017954:	4605      	mov	r5, r0
 8017956:	4690      	mov	r8, r2
 8017958:	f7f4 fd26 	bl	800c3a8 <ucdr_check_buffer_available_for>
 801795c:	b9e0      	cbnz	r0, 8017998 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801795e:	463e      	mov	r6, r7
 8017960:	e009      	b.n	8017976 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017962:	68a8      	ldr	r0, [r5, #8]
 8017964:	f001 fbef 	bl	8019146 <memcpy>
 8017968:	68ab      	ldr	r3, [r5, #8]
 801796a:	6928      	ldr	r0, [r5, #16]
 801796c:	4423      	add	r3, r4
 801796e:	4420      	add	r0, r4
 8017970:	1b36      	subs	r6, r6, r4
 8017972:	60ab      	str	r3, [r5, #8]
 8017974:	6128      	str	r0, [r5, #16]
 8017976:	4631      	mov	r1, r6
 8017978:	2201      	movs	r2, #1
 801797a:	4628      	mov	r0, r5
 801797c:	f7f4 fd9c 	bl	800c4b8 <ucdr_check_final_buffer_behavior_array>
 8017980:	1bb9      	subs	r1, r7, r6
 8017982:	4441      	add	r1, r8
 8017984:	4604      	mov	r4, r0
 8017986:	4602      	mov	r2, r0
 8017988:	2800      	cmp	r0, #0
 801798a:	d1ea      	bne.n	8017962 <ucdr_serialize_endian_array_uint8_t+0x16>
 801798c:	2301      	movs	r3, #1
 801798e:	7da8      	ldrb	r0, [r5, #22]
 8017990:	756b      	strb	r3, [r5, #21]
 8017992:	4058      	eors	r0, r3
 8017994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017998:	463a      	mov	r2, r7
 801799a:	68a8      	ldr	r0, [r5, #8]
 801799c:	4641      	mov	r1, r8
 801799e:	f001 fbd2 	bl	8019146 <memcpy>
 80179a2:	68aa      	ldr	r2, [r5, #8]
 80179a4:	692b      	ldr	r3, [r5, #16]
 80179a6:	443a      	add	r2, r7
 80179a8:	443b      	add	r3, r7
 80179aa:	60aa      	str	r2, [r5, #8]
 80179ac:	612b      	str	r3, [r5, #16]
 80179ae:	e7ed      	b.n	801798c <ucdr_serialize_endian_array_uint8_t+0x40>

080179b0 <ucdr_deserialize_array_uint8_t>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4688      	mov	r8, r1
 80179b6:	4611      	mov	r1, r2
 80179b8:	4617      	mov	r7, r2
 80179ba:	4605      	mov	r5, r0
 80179bc:	f7f4 fcf4 	bl	800c3a8 <ucdr_check_buffer_available_for>
 80179c0:	b9e0      	cbnz	r0, 80179fc <ucdr_deserialize_array_uint8_t+0x4c>
 80179c2:	463e      	mov	r6, r7
 80179c4:	e009      	b.n	80179da <ucdr_deserialize_array_uint8_t+0x2a>
 80179c6:	68a9      	ldr	r1, [r5, #8]
 80179c8:	f001 fbbd 	bl	8019146 <memcpy>
 80179cc:	68aa      	ldr	r2, [r5, #8]
 80179ce:	692b      	ldr	r3, [r5, #16]
 80179d0:	4422      	add	r2, r4
 80179d2:	4423      	add	r3, r4
 80179d4:	1b36      	subs	r6, r6, r4
 80179d6:	60aa      	str	r2, [r5, #8]
 80179d8:	612b      	str	r3, [r5, #16]
 80179da:	2201      	movs	r2, #1
 80179dc:	4631      	mov	r1, r6
 80179de:	4628      	mov	r0, r5
 80179e0:	f7f4 fd6a 	bl	800c4b8 <ucdr_check_final_buffer_behavior_array>
 80179e4:	4604      	mov	r4, r0
 80179e6:	1bb8      	subs	r0, r7, r6
 80179e8:	4440      	add	r0, r8
 80179ea:	4622      	mov	r2, r4
 80179ec:	2c00      	cmp	r4, #0
 80179ee:	d1ea      	bne.n	80179c6 <ucdr_deserialize_array_uint8_t+0x16>
 80179f0:	2301      	movs	r3, #1
 80179f2:	7da8      	ldrb	r0, [r5, #22]
 80179f4:	756b      	strb	r3, [r5, #21]
 80179f6:	4058      	eors	r0, r3
 80179f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179fc:	463a      	mov	r2, r7
 80179fe:	68a9      	ldr	r1, [r5, #8]
 8017a00:	4640      	mov	r0, r8
 8017a02:	f001 fba0 	bl	8019146 <memcpy>
 8017a06:	68aa      	ldr	r2, [r5, #8]
 8017a08:	692b      	ldr	r3, [r5, #16]
 8017a0a:	443a      	add	r2, r7
 8017a0c:	443b      	add	r3, r7
 8017a0e:	60aa      	str	r2, [r5, #8]
 8017a10:	612b      	str	r3, [r5, #16]
 8017a12:	e7ed      	b.n	80179f0 <ucdr_deserialize_array_uint8_t+0x40>

08017a14 <ucdr_deserialize_endian_array_uint8_t>:
 8017a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a18:	4619      	mov	r1, r3
 8017a1a:	461f      	mov	r7, r3
 8017a1c:	4605      	mov	r5, r0
 8017a1e:	4690      	mov	r8, r2
 8017a20:	f7f4 fcc2 	bl	800c3a8 <ucdr_check_buffer_available_for>
 8017a24:	b9e0      	cbnz	r0, 8017a60 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8017a26:	463e      	mov	r6, r7
 8017a28:	e009      	b.n	8017a3e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017a2a:	68a9      	ldr	r1, [r5, #8]
 8017a2c:	f001 fb8b 	bl	8019146 <memcpy>
 8017a30:	68ab      	ldr	r3, [r5, #8]
 8017a32:	6928      	ldr	r0, [r5, #16]
 8017a34:	4423      	add	r3, r4
 8017a36:	4420      	add	r0, r4
 8017a38:	1b36      	subs	r6, r6, r4
 8017a3a:	60ab      	str	r3, [r5, #8]
 8017a3c:	6128      	str	r0, [r5, #16]
 8017a3e:	2201      	movs	r2, #1
 8017a40:	4631      	mov	r1, r6
 8017a42:	4628      	mov	r0, r5
 8017a44:	f7f4 fd38 	bl	800c4b8 <ucdr_check_final_buffer_behavior_array>
 8017a48:	4604      	mov	r4, r0
 8017a4a:	1bb8      	subs	r0, r7, r6
 8017a4c:	4440      	add	r0, r8
 8017a4e:	4622      	mov	r2, r4
 8017a50:	2c00      	cmp	r4, #0
 8017a52:	d1ea      	bne.n	8017a2a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017a54:	2301      	movs	r3, #1
 8017a56:	7da8      	ldrb	r0, [r5, #22]
 8017a58:	756b      	strb	r3, [r5, #21]
 8017a5a:	4058      	eors	r0, r3
 8017a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a60:	463a      	mov	r2, r7
 8017a62:	68a9      	ldr	r1, [r5, #8]
 8017a64:	4640      	mov	r0, r8
 8017a66:	f001 fb6e 	bl	8019146 <memcpy>
 8017a6a:	68aa      	ldr	r2, [r5, #8]
 8017a6c:	692b      	ldr	r3, [r5, #16]
 8017a6e:	443a      	add	r2, r7
 8017a70:	443b      	add	r3, r7
 8017a72:	60aa      	str	r2, [r5, #8]
 8017a74:	612b      	str	r3, [r5, #16]
 8017a76:	e7ed      	b.n	8017a54 <ucdr_deserialize_endian_array_uint8_t+0x40>

08017a78 <ucdr_serialize_string>:
 8017a78:	b510      	push	{r4, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	4604      	mov	r4, r0
 8017a7e:	4608      	mov	r0, r1
 8017a80:	9101      	str	r1, [sp, #4]
 8017a82:	f7e8 fbd7 	bl	8000234 <strlen>
 8017a86:	9901      	ldr	r1, [sp, #4]
 8017a88:	1c42      	adds	r2, r0, #1
 8017a8a:	4620      	mov	r0, r4
 8017a8c:	b002      	add	sp, #8
 8017a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a92:	f7f8 bfdb 	b.w	8010a4c <ucdr_serialize_sequence_char>
 8017a96:	bf00      	nop

08017a98 <ucdr_deserialize_string>:
 8017a98:	b500      	push	{lr}
 8017a9a:	b083      	sub	sp, #12
 8017a9c:	ab01      	add	r3, sp, #4
 8017a9e:	f7f8 ffe7 	bl	8010a70 <ucdr_deserialize_sequence_char>
 8017aa2:	b003      	add	sp, #12
 8017aa4:	f85d fb04 	ldr.w	pc, [sp], #4

08017aa8 <uxr_init_input_best_effort_stream>:
 8017aa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017aac:	8003      	strh	r3, [r0, #0]
 8017aae:	4770      	bx	lr

08017ab0 <uxr_reset_input_best_effort_stream>:
 8017ab0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ab4:	8003      	strh	r3, [r0, #0]
 8017ab6:	4770      	bx	lr

08017ab8 <uxr_receive_best_effort_message>:
 8017ab8:	b538      	push	{r3, r4, r5, lr}
 8017aba:	4604      	mov	r4, r0
 8017abc:	8800      	ldrh	r0, [r0, #0]
 8017abe:	460d      	mov	r5, r1
 8017ac0:	f000 fd42 	bl	8018548 <uxr_seq_num_cmp>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017acc:	bfb8      	it	lt
 8017ace:	8025      	strhlt	r5, [r4, #0]
 8017ad0:	bd38      	pop	{r3, r4, r5, pc}
 8017ad2:	bf00      	nop

08017ad4 <on_full_input_buffer>:
 8017ad4:	b570      	push	{r4, r5, r6, lr}
 8017ad6:	4605      	mov	r5, r0
 8017ad8:	460c      	mov	r4, r1
 8017ada:	682b      	ldr	r3, [r5, #0]
 8017adc:	6809      	ldr	r1, [r1, #0]
 8017ade:	8920      	ldrh	r0, [r4, #8]
 8017ae0:	6862      	ldr	r2, [r4, #4]
 8017ae2:	fbb2 f2f0 	udiv	r2, r2, r0
 8017ae6:	eba3 0c01 	sub.w	ip, r3, r1
 8017aea:	fbbc fcf2 	udiv	ip, ip, r2
 8017aee:	f10c 0c01 	add.w	ip, ip, #1
 8017af2:	fa1f f38c 	uxth.w	r3, ip
 8017af6:	fbb3 f6f0 	udiv	r6, r3, r0
 8017afa:	fb00 3316 	mls	r3, r0, r6, r3
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	fb02 f303 	mul.w	r3, r2, r3
 8017b04:	1d18      	adds	r0, r3, #4
 8017b06:	4408      	add	r0, r1
 8017b08:	7d26      	ldrb	r6, [r4, #20]
 8017b0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017b0e:	b116      	cbz	r6, 8017b16 <on_full_input_buffer+0x42>
 8017b10:	2600      	movs	r6, #0
 8017b12:	f840 6c04 	str.w	r6, [r0, #-4]
 8017b16:	2a03      	cmp	r2, #3
 8017b18:	d801      	bhi.n	8017b1e <on_full_input_buffer+0x4a>
 8017b1a:	2001      	movs	r0, #1
 8017b1c:	bd70      	pop	{r4, r5, r6, pc}
 8017b1e:	3308      	adds	r3, #8
 8017b20:	4419      	add	r1, r3
 8017b22:	4628      	mov	r0, r5
 8017b24:	692b      	ldr	r3, [r5, #16]
 8017b26:	3a04      	subs	r2, #4
 8017b28:	f7f4 fc8a 	bl	800c440 <ucdr_init_buffer_origin>
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	4903      	ldr	r1, [pc, #12]	@ (8017b3c <on_full_input_buffer+0x68>)
 8017b30:	4622      	mov	r2, r4
 8017b32:	f7f4 fc61 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 8017b36:	2000      	movs	r0, #0
 8017b38:	bd70      	pop	{r4, r5, r6, pc}
 8017b3a:	bf00      	nop
 8017b3c:	08017ad5 	.word	0x08017ad5

08017b40 <uxr_init_input_reliable_stream>:
 8017b40:	b500      	push	{lr}
 8017b42:	e9c0 1200 	strd	r1, r2, [r0]
 8017b46:	f04f 0e00 	mov.w	lr, #0
 8017b4a:	9a01      	ldr	r2, [sp, #4]
 8017b4c:	8103      	strh	r3, [r0, #8]
 8017b4e:	6102      	str	r2, [r0, #16]
 8017b50:	f880 e014 	strb.w	lr, [r0, #20]
 8017b54:	b1d3      	cbz	r3, 8017b8c <uxr_init_input_reliable_stream+0x4c>
 8017b56:	f8c1 e000 	str.w	lr, [r1]
 8017b5a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017b5e:	f1bc 0f01 	cmp.w	ip, #1
 8017b62:	d913      	bls.n	8017b8c <uxr_init_input_reliable_stream+0x4c>
 8017b64:	2301      	movs	r3, #1
 8017b66:	fbb3 f1fc 	udiv	r1, r3, ip
 8017b6a:	fb0c 3111 	mls	r1, ip, r1, r3
 8017b6e:	b289      	uxth	r1, r1
 8017b70:	6842      	ldr	r2, [r0, #4]
 8017b72:	fbb2 f2fc 	udiv	r2, r2, ip
 8017b76:	fb01 f202 	mul.w	r2, r1, r2
 8017b7a:	6801      	ldr	r1, [r0, #0]
 8017b7c:	f841 e002 	str.w	lr, [r1, r2]
 8017b80:	3301      	adds	r3, #1
 8017b82:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017b86:	b29b      	uxth	r3, r3
 8017b88:	459c      	cmp	ip, r3
 8017b8a:	d8ec      	bhi.n	8017b66 <uxr_init_input_reliable_stream+0x26>
 8017b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017b90:	60c3      	str	r3, [r0, #12]
 8017b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b96:	bf00      	nop

08017b98 <uxr_reset_input_reliable_stream>:
 8017b98:	8901      	ldrh	r1, [r0, #8]
 8017b9a:	b1e9      	cbz	r1, 8017bd8 <uxr_reset_input_reliable_stream+0x40>
 8017b9c:	f04f 0c00 	mov.w	ip, #0
 8017ba0:	b500      	push	{lr}
 8017ba2:	4663      	mov	r3, ip
 8017ba4:	46e6      	mov	lr, ip
 8017ba6:	fbb3 f2f1 	udiv	r2, r3, r1
 8017baa:	fb01 3312 	mls	r3, r1, r2, r3
 8017bae:	b29b      	uxth	r3, r3
 8017bb0:	6842      	ldr	r2, [r0, #4]
 8017bb2:	fbb2 f2f1 	udiv	r2, r2, r1
 8017bb6:	fb02 f303 	mul.w	r3, r2, r3
 8017bba:	6802      	ldr	r2, [r0, #0]
 8017bbc:	f842 e003 	str.w	lr, [r2, r3]
 8017bc0:	f10c 0c01 	add.w	ip, ip, #1
 8017bc4:	8901      	ldrh	r1, [r0, #8]
 8017bc6:	fa1f f38c 	uxth.w	r3, ip
 8017bca:	4299      	cmp	r1, r3
 8017bcc:	d8eb      	bhi.n	8017ba6 <uxr_reset_input_reliable_stream+0xe>
 8017bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017bd2:	60c3      	str	r3, [r0, #12]
 8017bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017bdc:	60c3      	str	r3, [r0, #12]
 8017bde:	4770      	bx	lr

08017be0 <uxr_receive_reliable_message>:
 8017be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017be4:	4604      	mov	r4, r0
 8017be6:	460d      	mov	r5, r1
 8017be8:	8901      	ldrh	r1, [r0, #8]
 8017bea:	8980      	ldrh	r0, [r0, #12]
 8017bec:	4690      	mov	r8, r2
 8017bee:	461f      	mov	r7, r3
 8017bf0:	f000 fca2 	bl	8018538 <uxr_seq_num_add>
 8017bf4:	4629      	mov	r1, r5
 8017bf6:	4606      	mov	r6, r0
 8017bf8:	89a0      	ldrh	r0, [r4, #12]
 8017bfa:	f000 fca5 	bl	8018548 <uxr_seq_num_cmp>
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	db0a      	blt.n	8017c18 <uxr_receive_reliable_message+0x38>
 8017c02:	2600      	movs	r6, #0
 8017c04:	89e0      	ldrh	r0, [r4, #14]
 8017c06:	4629      	mov	r1, r5
 8017c08:	f000 fc9e 	bl	8018548 <uxr_seq_num_cmp>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	da00      	bge.n	8017c12 <uxr_receive_reliable_message+0x32>
 8017c10:	81e5      	strh	r5, [r4, #14]
 8017c12:	4630      	mov	r0, r6
 8017c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c18:	4630      	mov	r0, r6
 8017c1a:	4629      	mov	r1, r5
 8017c1c:	f000 fc94 	bl	8018548 <uxr_seq_num_cmp>
 8017c20:	2800      	cmp	r0, #0
 8017c22:	dbee      	blt.n	8017c02 <uxr_receive_reliable_message+0x22>
 8017c24:	6923      	ldr	r3, [r4, #16]
 8017c26:	4640      	mov	r0, r8
 8017c28:	4798      	blx	r3
 8017c2a:	2101      	movs	r1, #1
 8017c2c:	4681      	mov	r9, r0
 8017c2e:	89a0      	ldrh	r0, [r4, #12]
 8017c30:	f000 fc82 	bl	8018538 <uxr_seq_num_add>
 8017c34:	f1b9 0f00 	cmp.w	r9, #0
 8017c38:	d101      	bne.n	8017c3e <uxr_receive_reliable_message+0x5e>
 8017c3a:	4285      	cmp	r5, r0
 8017c3c:	d047      	beq.n	8017cce <uxr_receive_reliable_message+0xee>
 8017c3e:	8922      	ldrh	r2, [r4, #8]
 8017c40:	fbb5 f0f2 	udiv	r0, r5, r2
 8017c44:	fb02 5010 	mls	r0, r2, r0, r5
 8017c48:	b280      	uxth	r0, r0
 8017c4a:	6863      	ldr	r3, [r4, #4]
 8017c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c50:	fb00 f303 	mul.w	r3, r0, r3
 8017c54:	6820      	ldr	r0, [r4, #0]
 8017c56:	3304      	adds	r3, #4
 8017c58:	4418      	add	r0, r3
 8017c5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d1cf      	bne.n	8017c02 <uxr_receive_reliable_message+0x22>
 8017c62:	4641      	mov	r1, r8
 8017c64:	463a      	mov	r2, r7
 8017c66:	f001 fa6e 	bl	8019146 <memcpy>
 8017c6a:	8921      	ldrh	r1, [r4, #8]
 8017c6c:	fbb5 f2f1 	udiv	r2, r5, r1
 8017c70:	fb01 5212 	mls	r2, r1, r2, r5
 8017c74:	b292      	uxth	r2, r2
 8017c76:	6863      	ldr	r3, [r4, #4]
 8017c78:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c7c:	fb02 f303 	mul.w	r3, r2, r3
 8017c80:	6822      	ldr	r2, [r4, #0]
 8017c82:	50d7      	str	r7, [r2, r3]
 8017c84:	9a08      	ldr	r2, [sp, #32]
 8017c86:	2301      	movs	r3, #1
 8017c88:	7013      	strb	r3, [r2, #0]
 8017c8a:	f1b9 0f00 	cmp.w	r9, #0
 8017c8e:	d0b8      	beq.n	8017c02 <uxr_receive_reliable_message+0x22>
 8017c90:	89a6      	ldrh	r6, [r4, #12]
 8017c92:	4630      	mov	r0, r6
 8017c94:	2101      	movs	r1, #1
 8017c96:	f000 fc4f 	bl	8018538 <uxr_seq_num_add>
 8017c9a:	8922      	ldrh	r2, [r4, #8]
 8017c9c:	6863      	ldr	r3, [r4, #4]
 8017c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017ca2:	4606      	mov	r6, r0
 8017ca4:	fbb0 f0f2 	udiv	r0, r0, r2
 8017ca8:	fb02 6010 	mls	r0, r2, r0, r6
 8017cac:	b280      	uxth	r0, r0
 8017cae:	fb00 f303 	mul.w	r3, r0, r3
 8017cb2:	6820      	ldr	r0, [r4, #0]
 8017cb4:	3304      	adds	r3, #4
 8017cb6:	4418      	add	r0, r3
 8017cb8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d0a0      	beq.n	8017c02 <uxr_receive_reliable_message+0x22>
 8017cc0:	6923      	ldr	r3, [r4, #16]
 8017cc2:	4798      	blx	r3
 8017cc4:	2802      	cmp	r0, #2
 8017cc6:	d008      	beq.n	8017cda <uxr_receive_reliable_message+0xfa>
 8017cc8:	2801      	cmp	r0, #1
 8017cca:	d0e2      	beq.n	8017c92 <uxr_receive_reliable_message+0xb2>
 8017ccc:	e799      	b.n	8017c02 <uxr_receive_reliable_message+0x22>
 8017cce:	9b08      	ldr	r3, [sp, #32]
 8017cd0:	81a5      	strh	r5, [r4, #12]
 8017cd2:	2601      	movs	r6, #1
 8017cd4:	f883 9000 	strb.w	r9, [r3]
 8017cd8:	e794      	b.n	8017c04 <uxr_receive_reliable_message+0x24>
 8017cda:	2601      	movs	r6, #1
 8017cdc:	e792      	b.n	8017c04 <uxr_receive_reliable_message+0x24>
 8017cde:	bf00      	nop

08017ce0 <uxr_next_input_reliable_buffer_available>:
 8017ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ce4:	4604      	mov	r4, r0
 8017ce6:	460f      	mov	r7, r1
 8017ce8:	8980      	ldrh	r0, [r0, #12]
 8017cea:	2101      	movs	r1, #1
 8017cec:	4690      	mov	r8, r2
 8017cee:	f000 fc23 	bl	8018538 <uxr_seq_num_add>
 8017cf2:	8922      	ldrh	r2, [r4, #8]
 8017cf4:	fbb0 f6f2 	udiv	r6, r0, r2
 8017cf8:	fb02 0616 	mls	r6, r2, r6, r0
 8017cfc:	b2b6      	uxth	r6, r6
 8017cfe:	6863      	ldr	r3, [r4, #4]
 8017d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8017d04:	fb06 f303 	mul.w	r3, r6, r3
 8017d08:	6826      	ldr	r6, [r4, #0]
 8017d0a:	3304      	adds	r3, #4
 8017d0c:	441e      	add	r6, r3
 8017d0e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017d12:	f1b9 0f00 	cmp.w	r9, #0
 8017d16:	d023      	beq.n	8017d60 <uxr_next_input_reliable_buffer_available+0x80>
 8017d18:	6923      	ldr	r3, [r4, #16]
 8017d1a:	4605      	mov	r5, r0
 8017d1c:	4630      	mov	r0, r6
 8017d1e:	4798      	blx	r3
 8017d20:	4682      	mov	sl, r0
 8017d22:	b300      	cbz	r0, 8017d66 <uxr_next_input_reliable_buffer_available+0x86>
 8017d24:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017d28:	2101      	movs	r1, #1
 8017d2a:	4650      	mov	r0, sl
 8017d2c:	f000 fc04 	bl	8018538 <uxr_seq_num_add>
 8017d30:	8921      	ldrh	r1, [r4, #8]
 8017d32:	fbb0 f2f1 	udiv	r2, r0, r1
 8017d36:	4682      	mov	sl, r0
 8017d38:	fb01 0212 	mls	r2, r1, r2, r0
 8017d3c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017d40:	b292      	uxth	r2, r2
 8017d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d46:	fb02 f303 	mul.w	r3, r2, r3
 8017d4a:	3304      	adds	r3, #4
 8017d4c:	4418      	add	r0, r3
 8017d4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017d52:	b12b      	cbz	r3, 8017d60 <uxr_next_input_reliable_buffer_available+0x80>
 8017d54:	6923      	ldr	r3, [r4, #16]
 8017d56:	4798      	blx	r3
 8017d58:	2802      	cmp	r0, #2
 8017d5a:	d01b      	beq.n	8017d94 <uxr_next_input_reliable_buffer_available+0xb4>
 8017d5c:	2801      	cmp	r0, #1
 8017d5e:	d0e3      	beq.n	8017d28 <uxr_next_input_reliable_buffer_available+0x48>
 8017d60:	2000      	movs	r0, #0
 8017d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d66:	464a      	mov	r2, r9
 8017d68:	4631      	mov	r1, r6
 8017d6a:	4638      	mov	r0, r7
 8017d6c:	f7f4 fb70 	bl	800c450 <ucdr_init_buffer>
 8017d70:	8921      	ldrh	r1, [r4, #8]
 8017d72:	fbb5 f2f1 	udiv	r2, r5, r1
 8017d76:	fb01 5212 	mls	r2, r1, r2, r5
 8017d7a:	b292      	uxth	r2, r2
 8017d7c:	6863      	ldr	r3, [r4, #4]
 8017d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d82:	fb02 f303 	mul.w	r3, r2, r3
 8017d86:	6822      	ldr	r2, [r4, #0]
 8017d88:	f842 a003 	str.w	sl, [r2, r3]
 8017d8c:	2001      	movs	r0, #1
 8017d8e:	81a5      	strh	r5, [r4, #12]
 8017d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d94:	8920      	ldrh	r0, [r4, #8]
 8017d96:	fbb5 f3f0 	udiv	r3, r5, r0
 8017d9a:	fb00 5513 	mls	r5, r0, r3, r5
 8017d9e:	b2ad      	uxth	r5, r5
 8017da0:	6863      	ldr	r3, [r4, #4]
 8017da2:	fbb3 f3f0 	udiv	r3, r3, r0
 8017da6:	fb03 f505 	mul.w	r5, r3, r5
 8017daa:	6823      	ldr	r3, [r4, #0]
 8017dac:	2000      	movs	r0, #0
 8017dae:	5158      	str	r0, [r3, r5]
 8017db0:	eb06 0108 	add.w	r1, r6, r8
 8017db4:	eba9 0208 	sub.w	r2, r9, r8
 8017db8:	4638      	mov	r0, r7
 8017dba:	f7f4 fb49 	bl	800c450 <ucdr_init_buffer>
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	4903      	ldr	r1, [pc, #12]	@ (8017dd0 <uxr_next_input_reliable_buffer_available+0xf0>)
 8017dc2:	4622      	mov	r2, r4
 8017dc4:	f7f4 fb18 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 8017dc8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017dcc:	2001      	movs	r0, #1
 8017dce:	e7c8      	b.n	8017d62 <uxr_next_input_reliable_buffer_available+0x82>
 8017dd0:	08017ad5 	.word	0x08017ad5

08017dd4 <uxr_process_heartbeat>:
 8017dd4:	b538      	push	{r3, r4, r5, lr}
 8017dd6:	4611      	mov	r1, r2
 8017dd8:	4604      	mov	r4, r0
 8017dda:	89c0      	ldrh	r0, [r0, #14]
 8017ddc:	4615      	mov	r5, r2
 8017dde:	f000 fbb3 	bl	8018548 <uxr_seq_num_cmp>
 8017de2:	2800      	cmp	r0, #0
 8017de4:	bfb8      	it	lt
 8017de6:	81e5      	strhlt	r5, [r4, #14]
 8017de8:	bd38      	pop	{r3, r4, r5, pc}
 8017dea:	bf00      	nop

08017dec <uxr_compute_acknack>:
 8017dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017df0:	8903      	ldrh	r3, [r0, #8]
 8017df2:	8985      	ldrh	r5, [r0, #12]
 8017df4:	4604      	mov	r4, r0
 8017df6:	460e      	mov	r6, r1
 8017df8:	b1d3      	cbz	r3, 8017e30 <uxr_compute_acknack+0x44>
 8017dfa:	4628      	mov	r0, r5
 8017dfc:	2701      	movs	r7, #1
 8017dfe:	e003      	b.n	8017e08 <uxr_compute_acknack+0x1c>
 8017e00:	4567      	cmp	r7, ip
 8017e02:	d215      	bcs.n	8017e30 <uxr_compute_acknack+0x44>
 8017e04:	89a0      	ldrh	r0, [r4, #12]
 8017e06:	3701      	adds	r7, #1
 8017e08:	b2b9      	uxth	r1, r7
 8017e0a:	f000 fb95 	bl	8018538 <uxr_seq_num_add>
 8017e0e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017e12:	fbb0 f3fc 	udiv	r3, r0, ip
 8017e16:	fb0c 0313 	mls	r3, ip, r3, r0
 8017e1a:	b29a      	uxth	r2, r3
 8017e1c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017e20:	fbb3 f3fc 	udiv	r3, r3, ip
 8017e24:	fb02 f303 	mul.w	r3, r2, r3
 8017e28:	58cb      	ldr	r3, [r1, r3]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d1e8      	bne.n	8017e00 <uxr_compute_acknack+0x14>
 8017e2e:	4605      	mov	r5, r0
 8017e30:	8035      	strh	r5, [r6, #0]
 8017e32:	2101      	movs	r1, #1
 8017e34:	4628      	mov	r0, r5
 8017e36:	89e7      	ldrh	r7, [r4, #14]
 8017e38:	f000 fb82 	bl	8018540 <uxr_seq_num_sub>
 8017e3c:	4601      	mov	r1, r0
 8017e3e:	4638      	mov	r0, r7
 8017e40:	f000 fb7e 	bl	8018540 <uxr_seq_num_sub>
 8017e44:	4605      	mov	r5, r0
 8017e46:	b318      	cbz	r0, 8017e90 <uxr_compute_acknack+0xa4>
 8017e48:	f04f 0900 	mov.w	r9, #0
 8017e4c:	464f      	mov	r7, r9
 8017e4e:	f04f 0801 	mov.w	r8, #1
 8017e52:	fa1f f189 	uxth.w	r1, r9
 8017e56:	8830      	ldrh	r0, [r6, #0]
 8017e58:	f000 fb6e 	bl	8018538 <uxr_seq_num_add>
 8017e5c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017e60:	fbb0 f3fc 	udiv	r3, r0, ip
 8017e64:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017e68:	fb03 001c 	mls	r0, r3, ip, r0
 8017e6c:	b283      	uxth	r3, r0
 8017e6e:	fbb2 f2fc 	udiv	r2, r2, ip
 8017e72:	fb02 f303 	mul.w	r3, r2, r3
 8017e76:	fa08 f209 	lsl.w	r2, r8, r9
 8017e7a:	58cb      	ldr	r3, [r1, r3]
 8017e7c:	f109 0901 	add.w	r9, r9, #1
 8017e80:	b90b      	cbnz	r3, 8017e86 <uxr_compute_acknack+0x9a>
 8017e82:	4317      	orrs	r7, r2
 8017e84:	b2bf      	uxth	r7, r7
 8017e86:	454d      	cmp	r5, r9
 8017e88:	d1e3      	bne.n	8017e52 <uxr_compute_acknack+0x66>
 8017e8a:	4638      	mov	r0, r7
 8017e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e90:	4607      	mov	r7, r0
 8017e92:	4638      	mov	r0, r7
 8017e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017e98 <uxr_init_output_best_effort_stream>:
 8017e98:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017e9c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017ea0:	6001      	str	r1, [r0, #0]
 8017ea2:	7303      	strb	r3, [r0, #12]
 8017ea4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017ea8:	4770      	bx	lr
 8017eaa:	bf00      	nop

08017eac <uxr_reset_output_best_effort_stream>:
 8017eac:	7b02      	ldrb	r2, [r0, #12]
 8017eae:	6042      	str	r2, [r0, #4]
 8017eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017eb4:	81c3      	strh	r3, [r0, #14]
 8017eb6:	4770      	bx	lr

08017eb8 <uxr_prepare_best_effort_buffer_to_write>:
 8017eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017eba:	4604      	mov	r4, r0
 8017ebc:	b083      	sub	sp, #12
 8017ebe:	6840      	ldr	r0, [r0, #4]
 8017ec0:	460d      	mov	r5, r1
 8017ec2:	4616      	mov	r6, r2
 8017ec4:	f7fb f86e 	bl	8012fa4 <uxr_submessage_padding>
 8017ec8:	6863      	ldr	r3, [r4, #4]
 8017eca:	4418      	add	r0, r3
 8017ecc:	68a3      	ldr	r3, [r4, #8]
 8017ece:	1942      	adds	r2, r0, r5
 8017ed0:	4293      	cmp	r3, r2
 8017ed2:	bf2c      	ite	cs
 8017ed4:	2701      	movcs	r7, #1
 8017ed6:	2700      	movcc	r7, #0
 8017ed8:	d202      	bcs.n	8017ee0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017eda:	4638      	mov	r0, r7
 8017edc:	b003      	add	sp, #12
 8017ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ee0:	9000      	str	r0, [sp, #0]
 8017ee2:	6821      	ldr	r1, [r4, #0]
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	f7f4 faa0 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8017eec:	6861      	ldr	r1, [r4, #4]
 8017eee:	4638      	mov	r0, r7
 8017ef0:	4429      	add	r1, r5
 8017ef2:	6061      	str	r1, [r4, #4]
 8017ef4:	b003      	add	sp, #12
 8017ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ef8 <uxr_prepare_best_effort_buffer_to_send>:
 8017ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017efc:	4604      	mov	r4, r0
 8017efe:	461d      	mov	r5, r3
 8017f00:	6840      	ldr	r0, [r0, #4]
 8017f02:	7b23      	ldrb	r3, [r4, #12]
 8017f04:	4298      	cmp	r0, r3
 8017f06:	bf8c      	ite	hi
 8017f08:	2601      	movhi	r6, #1
 8017f0a:	2600      	movls	r6, #0
 8017f0c:	d802      	bhi.n	8017f14 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017f0e:	4630      	mov	r0, r6
 8017f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f14:	4688      	mov	r8, r1
 8017f16:	89e0      	ldrh	r0, [r4, #14]
 8017f18:	2101      	movs	r1, #1
 8017f1a:	4617      	mov	r7, r2
 8017f1c:	f000 fb0c 	bl	8018538 <uxr_seq_num_add>
 8017f20:	6823      	ldr	r3, [r4, #0]
 8017f22:	81e0      	strh	r0, [r4, #14]
 8017f24:	8028      	strh	r0, [r5, #0]
 8017f26:	f8c8 3000 	str.w	r3, [r8]
 8017f2a:	6863      	ldr	r3, [r4, #4]
 8017f2c:	603b      	str	r3, [r7, #0]
 8017f2e:	7b23      	ldrb	r3, [r4, #12]
 8017f30:	6063      	str	r3, [r4, #4]
 8017f32:	4630      	mov	r0, r6
 8017f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f38 <on_full_output_buffer>:
 8017f38:	b538      	push	{r3, r4, r5, lr}
 8017f3a:	6802      	ldr	r2, [r0, #0]
 8017f3c:	460c      	mov	r4, r1
 8017f3e:	6809      	ldr	r1, [r1, #0]
 8017f40:	8923      	ldrh	r3, [r4, #8]
 8017f42:	eba2 0c01 	sub.w	ip, r2, r1
 8017f46:	6862      	ldr	r2, [r4, #4]
 8017f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8017f4c:	fbbc fcf2 	udiv	ip, ip, r2
 8017f50:	f10c 0c01 	add.w	ip, ip, #1
 8017f54:	fa1f fc8c 	uxth.w	ip, ip
 8017f58:	fbbc fef3 	udiv	lr, ip, r3
 8017f5c:	fb03 c31e 	mls	r3, r3, lr, ip
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	fb02 f303 	mul.w	r3, r2, r3
 8017f66:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017f6a:	58ca      	ldr	r2, [r1, r3]
 8017f6c:	4463      	add	r3, ip
 8017f6e:	eba2 020c 	sub.w	r2, r2, ip
 8017f72:	3308      	adds	r3, #8
 8017f74:	4605      	mov	r5, r0
 8017f76:	4419      	add	r1, r3
 8017f78:	3a04      	subs	r2, #4
 8017f7a:	6903      	ldr	r3, [r0, #16]
 8017f7c:	f7f4 fa60 	bl	800c440 <ucdr_init_buffer_origin>
 8017f80:	4628      	mov	r0, r5
 8017f82:	4903      	ldr	r1, [pc, #12]	@ (8017f90 <on_full_output_buffer+0x58>)
 8017f84:	4622      	mov	r2, r4
 8017f86:	f7f4 fa37 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	bd38      	pop	{r3, r4, r5, pc}
 8017f8e:	bf00      	nop
 8017f90:	08017f39 	.word	0x08017f39

08017f94 <uxr_init_output_reliable_stream>:
 8017f94:	b410      	push	{r4}
 8017f96:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017f9a:	8103      	strh	r3, [r0, #8]
 8017f9c:	e9c0 1200 	strd	r1, r2, [r0]
 8017fa0:	f880 c00c 	strb.w	ip, [r0, #12]
 8017fa4:	b1d3      	cbz	r3, 8017fdc <uxr_init_output_reliable_stream+0x48>
 8017fa6:	f8c1 c000 	str.w	ip, [r1]
 8017faa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017fae:	f1bc 0f01 	cmp.w	ip, #1
 8017fb2:	d913      	bls.n	8017fdc <uxr_init_output_reliable_stream+0x48>
 8017fb4:	2301      	movs	r3, #1
 8017fb6:	fbb3 f1fc 	udiv	r1, r3, ip
 8017fba:	fb0c 3111 	mls	r1, ip, r1, r3
 8017fbe:	b289      	uxth	r1, r1
 8017fc0:	6842      	ldr	r2, [r0, #4]
 8017fc2:	6804      	ldr	r4, [r0, #0]
 8017fc4:	fbb2 f2fc 	udiv	r2, r2, ip
 8017fc8:	fb01 f202 	mul.w	r2, r1, r2
 8017fcc:	7b01      	ldrb	r1, [r0, #12]
 8017fce:	50a1      	str	r1, [r4, r2]
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017fd6:	b29b      	uxth	r3, r3
 8017fd8:	459c      	cmp	ip, r3
 8017fda:	d8ec      	bhi.n	8017fb6 <uxr_init_output_reliable_stream+0x22>
 8017fdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017fe0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017fe4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017fe8:	4905      	ldr	r1, [pc, #20]	@ (8018000 <uxr_init_output_reliable_stream+0x6c>)
 8017fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fee:	f8c0 100e 	str.w	r1, [r0, #14]
 8017ff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	8242      	strh	r2, [r0, #18]
 8017ffa:	8403      	strh	r3, [r0, #32]
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop
 8018000:	ffff0000 	.word	0xffff0000

08018004 <uxr_reset_output_reliable_stream>:
 8018004:	8901      	ldrh	r1, [r0, #8]
 8018006:	b1b1      	cbz	r1, 8018036 <uxr_reset_output_reliable_stream+0x32>
 8018008:	f04f 0c00 	mov.w	ip, #0
 801800c:	4663      	mov	r3, ip
 801800e:	fbb3 f2f1 	udiv	r2, r3, r1
 8018012:	fb01 3312 	mls	r3, r1, r2, r3
 8018016:	b29b      	uxth	r3, r3
 8018018:	6842      	ldr	r2, [r0, #4]
 801801a:	fbb2 f2f1 	udiv	r2, r2, r1
 801801e:	6801      	ldr	r1, [r0, #0]
 8018020:	fb02 f303 	mul.w	r3, r2, r3
 8018024:	7b02      	ldrb	r2, [r0, #12]
 8018026:	50ca      	str	r2, [r1, r3]
 8018028:	f10c 0c01 	add.w	ip, ip, #1
 801802c:	8901      	ldrh	r1, [r0, #8]
 801802e:	fa1f f38c 	uxth.w	r3, ip
 8018032:	4299      	cmp	r1, r3
 8018034:	d8eb      	bhi.n	801800e <uxr_reset_output_reliable_stream+0xa>
 8018036:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801803a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801803e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018042:	4904      	ldr	r1, [pc, #16]	@ (8018054 <uxr_reset_output_reliable_stream+0x50>)
 8018044:	f8c0 100e 	str.w	r1, [r0, #14]
 8018048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801804c:	2300      	movs	r3, #0
 801804e:	8242      	strh	r2, [r0, #18]
 8018050:	8403      	strh	r3, [r0, #32]
 8018052:	4770      	bx	lr
 8018054:	ffff0000 	.word	0xffff0000

08018058 <uxr_prepare_reliable_buffer_to_write>:
 8018058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801805c:	4604      	mov	r4, r0
 801805e:	b091      	sub	sp, #68	@ 0x44
 8018060:	8900      	ldrh	r0, [r0, #8]
 8018062:	89e6      	ldrh	r6, [r4, #14]
 8018064:	6823      	ldr	r3, [r4, #0]
 8018066:	9204      	str	r2, [sp, #16]
 8018068:	fbb6 f2f0 	udiv	r2, r6, r0
 801806c:	fb00 6212 	mls	r2, r0, r2, r6
 8018070:	b292      	uxth	r2, r2
 8018072:	6865      	ldr	r5, [r4, #4]
 8018074:	fbb5 f5f0 	udiv	r5, r5, r0
 8018078:	fb05 3202 	mla	r2, r5, r2, r3
 801807c:	3204      	adds	r2, #4
 801807e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8018082:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018086:	9203      	str	r2, [sp, #12]
 8018088:	468b      	mov	fp, r1
 801808a:	1f2f      	subs	r7, r5, #4
 801808c:	2800      	cmp	r0, #0
 801808e:	f000 814c 	beq.w	801832a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8018092:	f04f 0c00 	mov.w	ip, #0
 8018096:	46e2      	mov	sl, ip
 8018098:	4661      	mov	r1, ip
 801809a:	fbb1 f2f0 	udiv	r2, r1, r0
 801809e:	fb00 1212 	mls	r2, r0, r2, r1
 80180a2:	b292      	uxth	r2, r2
 80180a4:	fb05 f202 	mul.w	r2, r5, r2
 80180a8:	f10c 0c01 	add.w	ip, ip, #1
 80180ac:	589a      	ldr	r2, [r3, r2]
 80180ae:	454a      	cmp	r2, r9
 80180b0:	bf08      	it	eq
 80180b2:	f10a 0a01 	addeq.w	sl, sl, #1
 80180b6:	fa1f f18c 	uxth.w	r1, ip
 80180ba:	bf08      	it	eq
 80180bc:	fa1f fa8a 	uxtheq.w	sl, sl
 80180c0:	4281      	cmp	r1, r0
 80180c2:	d3ea      	bcc.n	801809a <uxr_prepare_reliable_buffer_to_write+0x42>
 80180c4:	4640      	mov	r0, r8
 80180c6:	2104      	movs	r1, #4
 80180c8:	f8cd a014 	str.w	sl, [sp, #20]
 80180cc:	f7f4 f9c4 	bl	800c458 <ucdr_alignment>
 80180d0:	4480      	add	r8, r0
 80180d2:	eb08 020b 	add.w	r2, r8, fp
 80180d6:	42ba      	cmp	r2, r7
 80180d8:	f240 80cd 	bls.w	8018276 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80180dc:	7b22      	ldrb	r2, [r4, #12]
 80180de:	445a      	add	r2, fp
 80180e0:	42ba      	cmp	r2, r7
 80180e2:	f240 80b5 	bls.w	8018250 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80180e6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80180ea:	33fc      	adds	r3, #252	@ 0xfc
 80180ec:	b2ba      	uxth	r2, r7
 80180ee:	4413      	add	r3, r2
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	fb0a f903 	mul.w	r9, sl, r3
 80180f6:	45d9      	cmp	r9, fp
 80180f8:	9305      	str	r3, [sp, #20]
 80180fa:	9306      	str	r3, [sp, #24]
 80180fc:	f0c0 80b7 	bcc.w	801826e <uxr_prepare_reliable_buffer_to_write+0x216>
 8018100:	f108 0304 	add.w	r3, r8, #4
 8018104:	42bb      	cmp	r3, r7
 8018106:	f080 80db 	bcs.w	80182c0 <uxr_prepare_reliable_buffer_to_write+0x268>
 801810a:	f1a2 0904 	sub.w	r9, r2, #4
 801810e:	eba9 0908 	sub.w	r9, r9, r8
 8018112:	9b05      	ldr	r3, [sp, #20]
 8018114:	fa1f f989 	uxth.w	r9, r9
 8018118:	ebab 0b09 	sub.w	fp, fp, r9
 801811c:	fbbb f2f3 	udiv	r2, fp, r3
 8018120:	fb03 b312 	mls	r3, r3, r2, fp
 8018124:	2b00      	cmp	r3, #0
 8018126:	f000 80c8 	beq.w	80182ba <uxr_prepare_reliable_buffer_to_write+0x262>
 801812a:	3201      	adds	r2, #1
 801812c:	b292      	uxth	r2, r2
 801812e:	9306      	str	r3, [sp, #24]
 8018130:	4552      	cmp	r2, sl
 8018132:	f200 809c 	bhi.w	801826e <uxr_prepare_reliable_buffer_to_write+0x216>
 8018136:	f10d 0b20 	add.w	fp, sp, #32
 801813a:	2a00      	cmp	r2, #0
 801813c:	d042      	beq.n	80181c4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801813e:	f8cd 801c 	str.w	r8, [sp, #28]
 8018142:	f04f 0a00 	mov.w	sl, #0
 8018146:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801814a:	9505      	str	r5, [sp, #20]
 801814c:	f10d 0b20 	add.w	fp, sp, #32
 8018150:	4615      	mov	r5, r2
 8018152:	e000      	b.n	8018156 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018154:	46c1      	mov	r9, r8
 8018156:	8920      	ldrh	r0, [r4, #8]
 8018158:	fbb6 f2f0 	udiv	r2, r6, r0
 801815c:	fb00 6112 	mls	r1, r0, r2, r6
 8018160:	b28a      	uxth	r2, r1
 8018162:	6863      	ldr	r3, [r4, #4]
 8018164:	fbb3 f1f0 	udiv	r1, r3, r0
 8018168:	6823      	ldr	r3, [r4, #0]
 801816a:	fb02 f101 	mul.w	r1, r2, r1
 801816e:	3104      	adds	r1, #4
 8018170:	4419      	add	r1, r3
 8018172:	4658      	mov	r0, fp
 8018174:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018178:	9200      	str	r2, [sp, #0]
 801817a:	2300      	movs	r3, #0
 801817c:	463a      	mov	r2, r7
 801817e:	f7f4 f955 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8018182:	464a      	mov	r2, r9
 8018184:	2300      	movs	r3, #0
 8018186:	210d      	movs	r1, #13
 8018188:	4658      	mov	r0, fp
 801818a:	f7fa fecb 	bl	8012f24 <uxr_buffer_submessage_header>
 801818e:	8921      	ldrh	r1, [r4, #8]
 8018190:	fbb6 f2f1 	udiv	r2, r6, r1
 8018194:	fb01 6212 	mls	r2, r1, r2, r6
 8018198:	b292      	uxth	r2, r2
 801819a:	6863      	ldr	r3, [r4, #4]
 801819c:	fbb3 f3f1 	udiv	r3, r3, r1
 80181a0:	fb02 f303 	mul.w	r3, r2, r3
 80181a4:	6822      	ldr	r2, [r4, #0]
 80181a6:	4630      	mov	r0, r6
 80181a8:	50d7      	str	r7, [r2, r3]
 80181aa:	2101      	movs	r1, #1
 80181ac:	f000 f9c4 	bl	8018538 <uxr_seq_num_add>
 80181b0:	f10a 0a01 	add.w	sl, sl, #1
 80181b4:	fa1f f38a 	uxth.w	r3, sl
 80181b8:	429d      	cmp	r5, r3
 80181ba:	4606      	mov	r6, r0
 80181bc:	d8ca      	bhi.n	8018154 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80181be:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80181c2:	9d05      	ldr	r5, [sp, #20]
 80181c4:	8920      	ldrh	r0, [r4, #8]
 80181c6:	fbb6 f3f0 	udiv	r3, r6, r0
 80181ca:	fb00 6313 	mls	r3, r0, r3, r6
 80181ce:	b299      	uxth	r1, r3
 80181d0:	6863      	ldr	r3, [r4, #4]
 80181d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80181d6:	fb01 f303 	mul.w	r3, r1, r3
 80181da:	6821      	ldr	r1, [r4, #0]
 80181dc:	3304      	adds	r3, #4
 80181de:	4419      	add	r1, r3
 80181e0:	463a      	mov	r2, r7
 80181e2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80181e6:	9000      	str	r0, [sp, #0]
 80181e8:	2300      	movs	r3, #0
 80181ea:	4658      	mov	r0, fp
 80181ec:	f7f4 f91e 	bl	800c42c <ucdr_init_buffer_origin_offset>
 80181f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80181f4:	4658      	mov	r0, fp
 80181f6:	fa1f f289 	uxth.w	r2, r9
 80181fa:	2302      	movs	r3, #2
 80181fc:	210d      	movs	r1, #13
 80181fe:	f7fa fe91 	bl	8012f24 <uxr_buffer_submessage_header>
 8018202:	9b03      	ldr	r3, [sp, #12]
 8018204:	8927      	ldrh	r7, [r4, #8]
 8018206:	7b20      	ldrb	r0, [r4, #12]
 8018208:	f108 0104 	add.w	r1, r8, #4
 801820c:	440b      	add	r3, r1
 801820e:	4619      	mov	r1, r3
 8018210:	fbb6 f3f7 	udiv	r3, r6, r7
 8018214:	fb07 6313 	mls	r3, r7, r3, r6
 8018218:	f1a5 0208 	sub.w	r2, r5, #8
 801821c:	b29d      	uxth	r5, r3
 801821e:	3004      	adds	r0, #4
 8018220:	6863      	ldr	r3, [r4, #4]
 8018222:	fbb3 f3f7 	udiv	r3, r3, r7
 8018226:	fb05 f303 	mul.w	r3, r5, r3
 801822a:	6825      	ldr	r5, [r4, #0]
 801822c:	4448      	add	r0, r9
 801822e:	50e8      	str	r0, [r5, r3]
 8018230:	9d04      	ldr	r5, [sp, #16]
 8018232:	eba2 0208 	sub.w	r2, r2, r8
 8018236:	4628      	mov	r0, r5
 8018238:	f7f4 f90a 	bl	800c450 <ucdr_init_buffer>
 801823c:	4628      	mov	r0, r5
 801823e:	493c      	ldr	r1, [pc, #240]	@ (8018330 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018240:	4622      	mov	r2, r4
 8018242:	f7f4 f8d9 	bl	800c3f8 <ucdr_set_on_full_buffer_callback>
 8018246:	2001      	movs	r0, #1
 8018248:	81e6      	strh	r6, [r4, #14]
 801824a:	b011      	add	sp, #68	@ 0x44
 801824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018250:	2101      	movs	r1, #1
 8018252:	89e0      	ldrh	r0, [r4, #14]
 8018254:	f000 f970 	bl	8018538 <uxr_seq_num_add>
 8018258:	8921      	ldrh	r1, [r4, #8]
 801825a:	4605      	mov	r5, r0
 801825c:	8a60      	ldrh	r0, [r4, #18]
 801825e:	f000 f96b 	bl	8018538 <uxr_seq_num_add>
 8018262:	4601      	mov	r1, r0
 8018264:	4628      	mov	r0, r5
 8018266:	f000 f96f 	bl	8018548 <uxr_seq_num_cmp>
 801826a:	2800      	cmp	r0, #0
 801826c:	dd42      	ble.n	80182f4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801826e:	2000      	movs	r0, #0
 8018270:	b011      	add	sp, #68	@ 0x44
 8018272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018276:	8921      	ldrh	r1, [r4, #8]
 8018278:	8a60      	ldrh	r0, [r4, #18]
 801827a:	9205      	str	r2, [sp, #20]
 801827c:	f000 f95c 	bl	8018538 <uxr_seq_num_add>
 8018280:	4601      	mov	r1, r0
 8018282:	4630      	mov	r0, r6
 8018284:	f000 f960 	bl	8018548 <uxr_seq_num_cmp>
 8018288:	2800      	cmp	r0, #0
 801828a:	9a05      	ldr	r2, [sp, #20]
 801828c:	dcef      	bgt.n	801826e <uxr_prepare_reliable_buffer_to_write+0x216>
 801828e:	8927      	ldrh	r7, [r4, #8]
 8018290:	fbb6 f3f7 	udiv	r3, r6, r7
 8018294:	fb07 6313 	mls	r3, r7, r3, r6
 8018298:	b29d      	uxth	r5, r3
 801829a:	6863      	ldr	r3, [r4, #4]
 801829c:	6824      	ldr	r4, [r4, #0]
 801829e:	fbb3 f3f7 	udiv	r3, r3, r7
 80182a2:	fb05 f303 	mul.w	r3, r5, r3
 80182a6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80182aa:	50e2      	str	r2, [r4, r3]
 80182ac:	2300      	movs	r3, #0
 80182ae:	f8cd 8000 	str.w	r8, [sp]
 80182b2:	f7f4 f8bb 	bl	800c42c <ucdr_init_buffer_origin_offset>
 80182b6:	2001      	movs	r0, #1
 80182b8:	e7da      	b.n	8018270 <uxr_prepare_reliable_buffer_to_write+0x218>
 80182ba:	b293      	uxth	r3, r2
 80182bc:	461a      	mov	r2, r3
 80182be:	e737      	b.n	8018130 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80182c0:	4630      	mov	r0, r6
 80182c2:	2101      	movs	r1, #1
 80182c4:	9207      	str	r2, [sp, #28]
 80182c6:	f000 f937 	bl	8018538 <uxr_seq_num_add>
 80182ca:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80182ce:	fbb0 f1fc 	udiv	r1, r0, ip
 80182d2:	fb0c 0111 	mls	r1, ip, r1, r0
 80182d6:	4606      	mov	r6, r0
 80182d8:	b288      	uxth	r0, r1
 80182da:	6863      	ldr	r3, [r4, #4]
 80182dc:	fbb3 f1fc 	udiv	r1, r3, ip
 80182e0:	6823      	ldr	r3, [r4, #0]
 80182e2:	9a07      	ldr	r2, [sp, #28]
 80182e4:	fb00 f101 	mul.w	r1, r0, r1
 80182e8:	3104      	adds	r1, #4
 80182ea:	440b      	add	r3, r1
 80182ec:	9303      	str	r3, [sp, #12]
 80182ee:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80182f2:	e70a      	b.n	801810a <uxr_prepare_reliable_buffer_to_write+0xb2>
 80182f4:	8921      	ldrh	r1, [r4, #8]
 80182f6:	fbb5 f3f1 	udiv	r3, r5, r1
 80182fa:	fb01 5313 	mls	r3, r1, r3, r5
 80182fe:	b29a      	uxth	r2, r3
 8018300:	6863      	ldr	r3, [r4, #4]
 8018302:	fbb3 f3f1 	udiv	r3, r3, r1
 8018306:	6821      	ldr	r1, [r4, #0]
 8018308:	9804      	ldr	r0, [sp, #16]
 801830a:	fb02 f303 	mul.w	r3, r2, r3
 801830e:	3304      	adds	r3, #4
 8018310:	7b22      	ldrb	r2, [r4, #12]
 8018312:	4419      	add	r1, r3
 8018314:	445a      	add	r2, fp
 8018316:	f841 2c04 	str.w	r2, [r1, #-4]
 801831a:	7b23      	ldrb	r3, [r4, #12]
 801831c:	9300      	str	r3, [sp, #0]
 801831e:	2300      	movs	r3, #0
 8018320:	f7f4 f884 	bl	800c42c <ucdr_init_buffer_origin_offset>
 8018324:	81e5      	strh	r5, [r4, #14]
 8018326:	2001      	movs	r0, #1
 8018328:	e7a2      	b.n	8018270 <uxr_prepare_reliable_buffer_to_write+0x218>
 801832a:	4682      	mov	sl, r0
 801832c:	e6ca      	b.n	80180c4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801832e:	bf00      	nop
 8018330:	08017f39 	.word	0x08017f39

08018334 <uxr_prepare_next_reliable_buffer_to_send>:
 8018334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018336:	4604      	mov	r4, r0
 8018338:	460f      	mov	r7, r1
 801833a:	8a00      	ldrh	r0, [r0, #16]
 801833c:	2101      	movs	r1, #1
 801833e:	4616      	mov	r6, r2
 8018340:	461d      	mov	r5, r3
 8018342:	f000 f8f9 	bl	8018538 <uxr_seq_num_add>
 8018346:	8028      	strh	r0, [r5, #0]
 8018348:	8922      	ldrh	r2, [r4, #8]
 801834a:	fbb0 f3f2 	udiv	r3, r0, r2
 801834e:	fb02 0c13 	mls	ip, r2, r3, r0
 8018352:	fa1f fc8c 	uxth.w	ip, ip
 8018356:	6863      	ldr	r3, [r4, #4]
 8018358:	fbb3 f3f2 	udiv	r3, r3, r2
 801835c:	fb0c fc03 	mul.w	ip, ip, r3
 8018360:	6823      	ldr	r3, [r4, #0]
 8018362:	89e1      	ldrh	r1, [r4, #14]
 8018364:	f10c 0c04 	add.w	ip, ip, #4
 8018368:	4463      	add	r3, ip
 801836a:	603b      	str	r3, [r7, #0]
 801836c:	6823      	ldr	r3, [r4, #0]
 801836e:	449c      	add	ip, r3
 8018370:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018374:	6033      	str	r3, [r6, #0]
 8018376:	f000 f8e7 	bl	8018548 <uxr_seq_num_cmp>
 801837a:	2800      	cmp	r0, #0
 801837c:	dd01      	ble.n	8018382 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801837e:	2000      	movs	r0, #0
 8018380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018382:	7b23      	ldrb	r3, [r4, #12]
 8018384:	6832      	ldr	r2, [r6, #0]
 8018386:	429a      	cmp	r2, r3
 8018388:	d9f9      	bls.n	801837e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801838a:	8a61      	ldrh	r1, [r4, #18]
 801838c:	8a20      	ldrh	r0, [r4, #16]
 801838e:	f000 f8d7 	bl	8018540 <uxr_seq_num_sub>
 8018392:	8923      	ldrh	r3, [r4, #8]
 8018394:	4283      	cmp	r3, r0
 8018396:	d0f2      	beq.n	801837e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018398:	8828      	ldrh	r0, [r5, #0]
 801839a:	89e3      	ldrh	r3, [r4, #14]
 801839c:	8220      	strh	r0, [r4, #16]
 801839e:	4298      	cmp	r0, r3
 80183a0:	d001      	beq.n	80183a6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80183a2:	2001      	movs	r0, #1
 80183a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183a6:	2101      	movs	r1, #1
 80183a8:	f000 f8c6 	bl	8018538 <uxr_seq_num_add>
 80183ac:	81e0      	strh	r0, [r4, #14]
 80183ae:	2001      	movs	r0, #1
 80183b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183b2:	bf00      	nop

080183b4 <uxr_update_output_stream_heartbeat_timestamp>:
 80183b4:	b570      	push	{r4, r5, r6, lr}
 80183b6:	8a01      	ldrh	r1, [r0, #16]
 80183b8:	4604      	mov	r4, r0
 80183ba:	8a40      	ldrh	r0, [r0, #18]
 80183bc:	4615      	mov	r5, r2
 80183be:	461e      	mov	r6, r3
 80183c0:	f000 f8c2 	bl	8018548 <uxr_seq_num_cmp>
 80183c4:	2800      	cmp	r0, #0
 80183c6:	db07      	blt.n	80183d8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80183c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80183cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80183d0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80183d4:	2000      	movs	r0, #0
 80183d6:	bd70      	pop	{r4, r5, r6, pc}
 80183d8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80183dc:	b940      	cbnz	r0, 80183f0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80183de:	2301      	movs	r3, #1
 80183e0:	f884 3020 	strb.w	r3, [r4, #32]
 80183e4:	3564      	adds	r5, #100	@ 0x64
 80183e6:	f146 0600 	adc.w	r6, r6, #0
 80183ea:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80183ee:	bd70      	pop	{r4, r5, r6, pc}
 80183f0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80183f4:	4295      	cmp	r5, r2
 80183f6:	eb76 0303 	sbcs.w	r3, r6, r3
 80183fa:	bfa5      	ittet	ge
 80183fc:	3001      	addge	r0, #1
 80183fe:	f884 0020 	strbge.w	r0, [r4, #32]
 8018402:	2000      	movlt	r0, #0
 8018404:	2001      	movge	r0, #1
 8018406:	e7ed      	b.n	80183e4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018408 <uxr_begin_output_nack_buffer_it>:
 8018408:	8a40      	ldrh	r0, [r0, #18]
 801840a:	4770      	bx	lr

0801840c <uxr_next_reliable_nack_buffer_to_send>:
 801840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018410:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018414:	b082      	sub	sp, #8
 8018416:	f1b8 0f00 	cmp.w	r8, #0
 801841a:	d011      	beq.n	8018440 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801841c:	4604      	mov	r4, r0
 801841e:	8818      	ldrh	r0, [r3, #0]
 8018420:	460e      	mov	r6, r1
 8018422:	4617      	mov	r7, r2
 8018424:	461d      	mov	r5, r3
 8018426:	2101      	movs	r1, #1
 8018428:	f000 f886 	bl	8018538 <uxr_seq_num_add>
 801842c:	8028      	strh	r0, [r5, #0]
 801842e:	8a21      	ldrh	r1, [r4, #16]
 8018430:	f000 f88a 	bl	8018548 <uxr_seq_num_cmp>
 8018434:	2800      	cmp	r0, #0
 8018436:	dd07      	ble.n	8018448 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018438:	f04f 0800 	mov.w	r8, #0
 801843c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8018440:	4640      	mov	r0, r8
 8018442:	b002      	add	sp, #8
 8018444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018448:	8921      	ldrh	r1, [r4, #8]
 801844a:	8828      	ldrh	r0, [r5, #0]
 801844c:	6823      	ldr	r3, [r4, #0]
 801844e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018452:	fb01 0c12 	mls	ip, r1, r2, r0
 8018456:	fa1f f28c 	uxth.w	r2, ip
 801845a:	9301      	str	r3, [sp, #4]
 801845c:	6863      	ldr	r3, [r4, #4]
 801845e:	fbb3 fcf1 	udiv	ip, r3, r1
 8018462:	9b01      	ldr	r3, [sp, #4]
 8018464:	fb02 fc0c 	mul.w	ip, r2, ip
 8018468:	f10c 0c04 	add.w	ip, ip, #4
 801846c:	4463      	add	r3, ip
 801846e:	6033      	str	r3, [r6, #0]
 8018470:	6823      	ldr	r3, [r4, #0]
 8018472:	4463      	add	r3, ip
 8018474:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018478:	603b      	str	r3, [r7, #0]
 801847a:	7b22      	ldrb	r2, [r4, #12]
 801847c:	429a      	cmp	r2, r3
 801847e:	d0d2      	beq.n	8018426 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018480:	4640      	mov	r0, r8
 8018482:	b002      	add	sp, #8
 8018484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018488 <uxr_process_acknack>:
 8018488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801848a:	4604      	mov	r4, r0
 801848c:	460e      	mov	r6, r1
 801848e:	4610      	mov	r0, r2
 8018490:	2101      	movs	r1, #1
 8018492:	f000 f855 	bl	8018540 <uxr_seq_num_sub>
 8018496:	8a61      	ldrh	r1, [r4, #18]
 8018498:	f000 f852 	bl	8018540 <uxr_seq_num_sub>
 801849c:	b1c0      	cbz	r0, 80184d0 <uxr_process_acknack+0x48>
 801849e:	4605      	mov	r5, r0
 80184a0:	2700      	movs	r7, #0
 80184a2:	2101      	movs	r1, #1
 80184a4:	8a60      	ldrh	r0, [r4, #18]
 80184a6:	f000 f847 	bl	8018538 <uxr_seq_num_add>
 80184aa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80184ae:	fbb0 f1fc 	udiv	r1, r0, ip
 80184b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80184b6:	fb0c 0111 	mls	r1, ip, r1, r0
 80184ba:	b289      	uxth	r1, r1
 80184bc:	3701      	adds	r7, #1
 80184be:	fbb3 f3fc 	udiv	r3, r3, ip
 80184c2:	fb01 f303 	mul.w	r3, r1, r3
 80184c6:	42bd      	cmp	r5, r7
 80184c8:	7b21      	ldrb	r1, [r4, #12]
 80184ca:	8260      	strh	r0, [r4, #18]
 80184cc:	50d1      	str	r1, [r2, r3]
 80184ce:	d1e8      	bne.n	80184a2 <uxr_process_acknack+0x1a>
 80184d0:	3e00      	subs	r6, #0
 80184d2:	f04f 0300 	mov.w	r3, #0
 80184d6:	bf18      	it	ne
 80184d8:	2601      	movne	r6, #1
 80184da:	f884 3020 	strb.w	r3, [r4, #32]
 80184de:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80184e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080184e4 <uxr_is_output_up_to_date>:
 80184e4:	8a01      	ldrh	r1, [r0, #16]
 80184e6:	8a40      	ldrh	r0, [r0, #18]
 80184e8:	b508      	push	{r3, lr}
 80184ea:	f000 f82d 	bl	8018548 <uxr_seq_num_cmp>
 80184ee:	fab0 f080 	clz	r0, r0
 80184f2:	0940      	lsrs	r0, r0, #5
 80184f4:	bd08      	pop	{r3, pc}
 80184f6:	bf00      	nop

080184f8 <get_available_free_slots>:
 80184f8:	8902      	ldrh	r2, [r0, #8]
 80184fa:	b1da      	cbz	r2, 8018534 <get_available_free_slots+0x3c>
 80184fc:	b530      	push	{r4, r5, lr}
 80184fe:	2100      	movs	r1, #0
 8018500:	6843      	ldr	r3, [r0, #4]
 8018502:	6805      	ldr	r5, [r0, #0]
 8018504:	7b04      	ldrb	r4, [r0, #12]
 8018506:	fbb3 fef2 	udiv	lr, r3, r2
 801850a:	4608      	mov	r0, r1
 801850c:	460b      	mov	r3, r1
 801850e:	fbb3 fcf2 	udiv	ip, r3, r2
 8018512:	fb02 331c 	mls	r3, r2, ip, r3
 8018516:	b29b      	uxth	r3, r3
 8018518:	fb0e f303 	mul.w	r3, lr, r3
 801851c:	3101      	adds	r1, #1
 801851e:	f855 c003 	ldr.w	ip, [r5, r3]
 8018522:	4564      	cmp	r4, ip
 8018524:	bf08      	it	eq
 8018526:	3001      	addeq	r0, #1
 8018528:	b28b      	uxth	r3, r1
 801852a:	bf08      	it	eq
 801852c:	b280      	uxtheq	r0, r0
 801852e:	4293      	cmp	r3, r2
 8018530:	d3ed      	bcc.n	801850e <get_available_free_slots+0x16>
 8018532:	bd30      	pop	{r4, r5, pc}
 8018534:	4610      	mov	r0, r2
 8018536:	4770      	bx	lr

08018538 <uxr_seq_num_add>:
 8018538:	4408      	add	r0, r1
 801853a:	b280      	uxth	r0, r0
 801853c:	4770      	bx	lr
 801853e:	bf00      	nop

08018540 <uxr_seq_num_sub>:
 8018540:	1a40      	subs	r0, r0, r1
 8018542:	b280      	uxth	r0, r0
 8018544:	4770      	bx	lr
 8018546:	bf00      	nop

08018548 <uxr_seq_num_cmp>:
 8018548:	4288      	cmp	r0, r1
 801854a:	d011      	beq.n	8018570 <uxr_seq_num_cmp+0x28>
 801854c:	d309      	bcc.n	8018562 <uxr_seq_num_cmp+0x1a>
 801854e:	4288      	cmp	r0, r1
 8018550:	d910      	bls.n	8018574 <uxr_seq_num_cmp+0x2c>
 8018552:	1a40      	subs	r0, r0, r1
 8018554:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018558:	bfd4      	ite	le
 801855a:	2001      	movle	r0, #1
 801855c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018560:	4770      	bx	lr
 8018562:	1a0b      	subs	r3, r1, r0
 8018564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018568:	daf1      	bge.n	801854e <uxr_seq_num_cmp+0x6>
 801856a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801856e:	4770      	bx	lr
 8018570:	2000      	movs	r0, #0
 8018572:	4770      	bx	lr
 8018574:	2001      	movs	r0, #1
 8018576:	4770      	bx	lr

08018578 <rcl_get_default_domain_id>:
 8018578:	b530      	push	{r4, r5, lr}
 801857a:	b083      	sub	sp, #12
 801857c:	2300      	movs	r3, #0
 801857e:	9300      	str	r3, [sp, #0]
 8018580:	b1d0      	cbz	r0, 80185b8 <rcl_get_default_domain_id+0x40>
 8018582:	4604      	mov	r4, r0
 8018584:	4669      	mov	r1, sp
 8018586:	4815      	ldr	r0, [pc, #84]	@ (80185dc <rcl_get_default_domain_id+0x64>)
 8018588:	f7f5 fd92 	bl	800e0b0 <rcutils_get_env>
 801858c:	4602      	mov	r2, r0
 801858e:	b110      	cbz	r0, 8018596 <rcl_get_default_domain_id+0x1e>
 8018590:	2001      	movs	r0, #1
 8018592:	b003      	add	sp, #12
 8018594:	bd30      	pop	{r4, r5, pc}
 8018596:	9b00      	ldr	r3, [sp, #0]
 8018598:	b18b      	cbz	r3, 80185be <rcl_get_default_domain_id+0x46>
 801859a:	7818      	ldrb	r0, [r3, #0]
 801859c:	2800      	cmp	r0, #0
 801859e:	d0f8      	beq.n	8018592 <rcl_get_default_domain_id+0x1a>
 80185a0:	a901      	add	r1, sp, #4
 80185a2:	4618      	mov	r0, r3
 80185a4:	9201      	str	r2, [sp, #4]
 80185a6:	f000 fa5f 	bl	8018a68 <strtoul>
 80185aa:	4605      	mov	r5, r0
 80185ac:	b150      	cbz	r0, 80185c4 <rcl_get_default_domain_id+0x4c>
 80185ae:	1c43      	adds	r3, r0, #1
 80185b0:	d00d      	beq.n	80185ce <rcl_get_default_domain_id+0x56>
 80185b2:	6025      	str	r5, [r4, #0]
 80185b4:	2000      	movs	r0, #0
 80185b6:	e7ec      	b.n	8018592 <rcl_get_default_domain_id+0x1a>
 80185b8:	200b      	movs	r0, #11
 80185ba:	b003      	add	sp, #12
 80185bc:	bd30      	pop	{r4, r5, pc}
 80185be:	4618      	mov	r0, r3
 80185c0:	b003      	add	sp, #12
 80185c2:	bd30      	pop	{r4, r5, pc}
 80185c4:	9b01      	ldr	r3, [sp, #4]
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d0f2      	beq.n	80185b2 <rcl_get_default_domain_id+0x3a>
 80185cc:	e7e0      	b.n	8018590 <rcl_get_default_domain_id+0x18>
 80185ce:	f000 fd85 	bl	80190dc <__errno>
 80185d2:	6803      	ldr	r3, [r0, #0]
 80185d4:	2b22      	cmp	r3, #34	@ 0x22
 80185d6:	d1ec      	bne.n	80185b2 <rcl_get_default_domain_id+0x3a>
 80185d8:	e7da      	b.n	8018590 <rcl_get_default_domain_id+0x18>
 80185da:	bf00      	nop
 80185dc:	0801b2c0 	.word	0x0801b2c0

080185e0 <calloc>:
 80185e0:	4b02      	ldr	r3, [pc, #8]	@ (80185ec <calloc+0xc>)
 80185e2:	460a      	mov	r2, r1
 80185e4:	4601      	mov	r1, r0
 80185e6:	6818      	ldr	r0, [r3, #0]
 80185e8:	f000 b802 	b.w	80185f0 <_calloc_r>
 80185ec:	20000540 	.word	0x20000540

080185f0 <_calloc_r>:
 80185f0:	b570      	push	{r4, r5, r6, lr}
 80185f2:	fba1 5402 	umull	r5, r4, r1, r2
 80185f6:	b93c      	cbnz	r4, 8018608 <_calloc_r+0x18>
 80185f8:	4629      	mov	r1, r5
 80185fa:	f000 f899 	bl	8018730 <_malloc_r>
 80185fe:	4606      	mov	r6, r0
 8018600:	b928      	cbnz	r0, 801860e <_calloc_r+0x1e>
 8018602:	2600      	movs	r6, #0
 8018604:	4630      	mov	r0, r6
 8018606:	bd70      	pop	{r4, r5, r6, pc}
 8018608:	220c      	movs	r2, #12
 801860a:	6002      	str	r2, [r0, #0]
 801860c:	e7f9      	b.n	8018602 <_calloc_r+0x12>
 801860e:	462a      	mov	r2, r5
 8018610:	4621      	mov	r1, r4
 8018612:	f000 fccf 	bl	8018fb4 <memset>
 8018616:	e7f5      	b.n	8018604 <_calloc_r+0x14>

08018618 <exit>:
 8018618:	b508      	push	{r3, lr}
 801861a:	4b06      	ldr	r3, [pc, #24]	@ (8018634 <exit+0x1c>)
 801861c:	4604      	mov	r4, r0
 801861e:	b113      	cbz	r3, 8018626 <exit+0xe>
 8018620:	2100      	movs	r1, #0
 8018622:	f3af 8000 	nop.w
 8018626:	4b04      	ldr	r3, [pc, #16]	@ (8018638 <exit+0x20>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	b103      	cbz	r3, 801862e <exit+0x16>
 801862c:	4798      	blx	r3
 801862e:	4620      	mov	r0, r4
 8018630:	f7e9 fd6c 	bl	800210c <_exit>
 8018634:	00000000 	.word	0x00000000
 8018638:	2000b8e8 	.word	0x2000b8e8

0801863c <getenv>:
 801863c:	b507      	push	{r0, r1, r2, lr}
 801863e:	4b04      	ldr	r3, [pc, #16]	@ (8018650 <getenv+0x14>)
 8018640:	4601      	mov	r1, r0
 8018642:	aa01      	add	r2, sp, #4
 8018644:	6818      	ldr	r0, [r3, #0]
 8018646:	f000 f805 	bl	8018654 <_findenv_r>
 801864a:	b003      	add	sp, #12
 801864c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018650:	20000540 	.word	0x20000540

08018654 <_findenv_r>:
 8018654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018658:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80186c8 <_findenv_r+0x74>
 801865c:	4606      	mov	r6, r0
 801865e:	4689      	mov	r9, r1
 8018660:	4617      	mov	r7, r2
 8018662:	f000 fd9d 	bl	80191a0 <__env_lock>
 8018666:	f8da 4000 	ldr.w	r4, [sl]
 801866a:	b134      	cbz	r4, 801867a <_findenv_r+0x26>
 801866c:	464b      	mov	r3, r9
 801866e:	4698      	mov	r8, r3
 8018670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018674:	b13a      	cbz	r2, 8018686 <_findenv_r+0x32>
 8018676:	2a3d      	cmp	r2, #61	@ 0x3d
 8018678:	d1f9      	bne.n	801866e <_findenv_r+0x1a>
 801867a:	4630      	mov	r0, r6
 801867c:	f000 fd96 	bl	80191ac <__env_unlock>
 8018680:	2000      	movs	r0, #0
 8018682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018686:	eba8 0809 	sub.w	r8, r8, r9
 801868a:	46a3      	mov	fp, r4
 801868c:	f854 0b04 	ldr.w	r0, [r4], #4
 8018690:	2800      	cmp	r0, #0
 8018692:	d0f2      	beq.n	801867a <_findenv_r+0x26>
 8018694:	4642      	mov	r2, r8
 8018696:	4649      	mov	r1, r9
 8018698:	f000 fca1 	bl	8018fde <strncmp>
 801869c:	2800      	cmp	r0, #0
 801869e:	d1f4      	bne.n	801868a <_findenv_r+0x36>
 80186a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80186a4:	eb03 0508 	add.w	r5, r3, r8
 80186a8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80186ac:	2b3d      	cmp	r3, #61	@ 0x3d
 80186ae:	d1ec      	bne.n	801868a <_findenv_r+0x36>
 80186b0:	f8da 3000 	ldr.w	r3, [sl]
 80186b4:	ebab 0303 	sub.w	r3, fp, r3
 80186b8:	109b      	asrs	r3, r3, #2
 80186ba:	4630      	mov	r0, r6
 80186bc:	603b      	str	r3, [r7, #0]
 80186be:	f000 fd75 	bl	80191ac <__env_unlock>
 80186c2:	1c68      	adds	r0, r5, #1
 80186c4:	e7dd      	b.n	8018682 <_findenv_r+0x2e>
 80186c6:	bf00      	nop
 80186c8:	20000000 	.word	0x20000000

080186cc <malloc>:
 80186cc:	4b02      	ldr	r3, [pc, #8]	@ (80186d8 <malloc+0xc>)
 80186ce:	4601      	mov	r1, r0
 80186d0:	6818      	ldr	r0, [r3, #0]
 80186d2:	f000 b82d 	b.w	8018730 <_malloc_r>
 80186d6:	bf00      	nop
 80186d8:	20000540 	.word	0x20000540

080186dc <free>:
 80186dc:	4b02      	ldr	r3, [pc, #8]	@ (80186e8 <free+0xc>)
 80186de:	4601      	mov	r1, r0
 80186e0:	6818      	ldr	r0, [r3, #0]
 80186e2:	f000 bd69 	b.w	80191b8 <_free_r>
 80186e6:	bf00      	nop
 80186e8:	20000540 	.word	0x20000540

080186ec <sbrk_aligned>:
 80186ec:	b570      	push	{r4, r5, r6, lr}
 80186ee:	4e0f      	ldr	r6, [pc, #60]	@ (801872c <sbrk_aligned+0x40>)
 80186f0:	460c      	mov	r4, r1
 80186f2:	6831      	ldr	r1, [r6, #0]
 80186f4:	4605      	mov	r5, r0
 80186f6:	b911      	cbnz	r1, 80186fe <sbrk_aligned+0x12>
 80186f8:	f000 fcce 	bl	8019098 <_sbrk_r>
 80186fc:	6030      	str	r0, [r6, #0]
 80186fe:	4621      	mov	r1, r4
 8018700:	4628      	mov	r0, r5
 8018702:	f000 fcc9 	bl	8019098 <_sbrk_r>
 8018706:	1c43      	adds	r3, r0, #1
 8018708:	d103      	bne.n	8018712 <sbrk_aligned+0x26>
 801870a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801870e:	4620      	mov	r0, r4
 8018710:	bd70      	pop	{r4, r5, r6, pc}
 8018712:	1cc4      	adds	r4, r0, #3
 8018714:	f024 0403 	bic.w	r4, r4, #3
 8018718:	42a0      	cmp	r0, r4
 801871a:	d0f8      	beq.n	801870e <sbrk_aligned+0x22>
 801871c:	1a21      	subs	r1, r4, r0
 801871e:	4628      	mov	r0, r5
 8018720:	f000 fcba 	bl	8019098 <_sbrk_r>
 8018724:	3001      	adds	r0, #1
 8018726:	d1f2      	bne.n	801870e <sbrk_aligned+0x22>
 8018728:	e7ef      	b.n	801870a <sbrk_aligned+0x1e>
 801872a:	bf00      	nop
 801872c:	2000b7a8 	.word	0x2000b7a8

08018730 <_malloc_r>:
 8018730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018734:	1ccd      	adds	r5, r1, #3
 8018736:	f025 0503 	bic.w	r5, r5, #3
 801873a:	3508      	adds	r5, #8
 801873c:	2d0c      	cmp	r5, #12
 801873e:	bf38      	it	cc
 8018740:	250c      	movcc	r5, #12
 8018742:	2d00      	cmp	r5, #0
 8018744:	4606      	mov	r6, r0
 8018746:	db01      	blt.n	801874c <_malloc_r+0x1c>
 8018748:	42a9      	cmp	r1, r5
 801874a:	d904      	bls.n	8018756 <_malloc_r+0x26>
 801874c:	230c      	movs	r3, #12
 801874e:	6033      	str	r3, [r6, #0]
 8018750:	2000      	movs	r0, #0
 8018752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801882c <_malloc_r+0xfc>
 801875a:	f000 f869 	bl	8018830 <__malloc_lock>
 801875e:	f8d8 3000 	ldr.w	r3, [r8]
 8018762:	461c      	mov	r4, r3
 8018764:	bb44      	cbnz	r4, 80187b8 <_malloc_r+0x88>
 8018766:	4629      	mov	r1, r5
 8018768:	4630      	mov	r0, r6
 801876a:	f7ff ffbf 	bl	80186ec <sbrk_aligned>
 801876e:	1c43      	adds	r3, r0, #1
 8018770:	4604      	mov	r4, r0
 8018772:	d158      	bne.n	8018826 <_malloc_r+0xf6>
 8018774:	f8d8 4000 	ldr.w	r4, [r8]
 8018778:	4627      	mov	r7, r4
 801877a:	2f00      	cmp	r7, #0
 801877c:	d143      	bne.n	8018806 <_malloc_r+0xd6>
 801877e:	2c00      	cmp	r4, #0
 8018780:	d04b      	beq.n	801881a <_malloc_r+0xea>
 8018782:	6823      	ldr	r3, [r4, #0]
 8018784:	4639      	mov	r1, r7
 8018786:	4630      	mov	r0, r6
 8018788:	eb04 0903 	add.w	r9, r4, r3
 801878c:	f000 fc84 	bl	8019098 <_sbrk_r>
 8018790:	4581      	cmp	r9, r0
 8018792:	d142      	bne.n	801881a <_malloc_r+0xea>
 8018794:	6821      	ldr	r1, [r4, #0]
 8018796:	1a6d      	subs	r5, r5, r1
 8018798:	4629      	mov	r1, r5
 801879a:	4630      	mov	r0, r6
 801879c:	f7ff ffa6 	bl	80186ec <sbrk_aligned>
 80187a0:	3001      	adds	r0, #1
 80187a2:	d03a      	beq.n	801881a <_malloc_r+0xea>
 80187a4:	6823      	ldr	r3, [r4, #0]
 80187a6:	442b      	add	r3, r5
 80187a8:	6023      	str	r3, [r4, #0]
 80187aa:	f8d8 3000 	ldr.w	r3, [r8]
 80187ae:	685a      	ldr	r2, [r3, #4]
 80187b0:	bb62      	cbnz	r2, 801880c <_malloc_r+0xdc>
 80187b2:	f8c8 7000 	str.w	r7, [r8]
 80187b6:	e00f      	b.n	80187d8 <_malloc_r+0xa8>
 80187b8:	6822      	ldr	r2, [r4, #0]
 80187ba:	1b52      	subs	r2, r2, r5
 80187bc:	d420      	bmi.n	8018800 <_malloc_r+0xd0>
 80187be:	2a0b      	cmp	r2, #11
 80187c0:	d917      	bls.n	80187f2 <_malloc_r+0xc2>
 80187c2:	1961      	adds	r1, r4, r5
 80187c4:	42a3      	cmp	r3, r4
 80187c6:	6025      	str	r5, [r4, #0]
 80187c8:	bf18      	it	ne
 80187ca:	6059      	strne	r1, [r3, #4]
 80187cc:	6863      	ldr	r3, [r4, #4]
 80187ce:	bf08      	it	eq
 80187d0:	f8c8 1000 	streq.w	r1, [r8]
 80187d4:	5162      	str	r2, [r4, r5]
 80187d6:	604b      	str	r3, [r1, #4]
 80187d8:	4630      	mov	r0, r6
 80187da:	f000 f82f 	bl	801883c <__malloc_unlock>
 80187de:	f104 000b 	add.w	r0, r4, #11
 80187e2:	1d23      	adds	r3, r4, #4
 80187e4:	f020 0007 	bic.w	r0, r0, #7
 80187e8:	1ac2      	subs	r2, r0, r3
 80187ea:	bf1c      	itt	ne
 80187ec:	1a1b      	subne	r3, r3, r0
 80187ee:	50a3      	strne	r3, [r4, r2]
 80187f0:	e7af      	b.n	8018752 <_malloc_r+0x22>
 80187f2:	6862      	ldr	r2, [r4, #4]
 80187f4:	42a3      	cmp	r3, r4
 80187f6:	bf0c      	ite	eq
 80187f8:	f8c8 2000 	streq.w	r2, [r8]
 80187fc:	605a      	strne	r2, [r3, #4]
 80187fe:	e7eb      	b.n	80187d8 <_malloc_r+0xa8>
 8018800:	4623      	mov	r3, r4
 8018802:	6864      	ldr	r4, [r4, #4]
 8018804:	e7ae      	b.n	8018764 <_malloc_r+0x34>
 8018806:	463c      	mov	r4, r7
 8018808:	687f      	ldr	r7, [r7, #4]
 801880a:	e7b6      	b.n	801877a <_malloc_r+0x4a>
 801880c:	461a      	mov	r2, r3
 801880e:	685b      	ldr	r3, [r3, #4]
 8018810:	42a3      	cmp	r3, r4
 8018812:	d1fb      	bne.n	801880c <_malloc_r+0xdc>
 8018814:	2300      	movs	r3, #0
 8018816:	6053      	str	r3, [r2, #4]
 8018818:	e7de      	b.n	80187d8 <_malloc_r+0xa8>
 801881a:	230c      	movs	r3, #12
 801881c:	6033      	str	r3, [r6, #0]
 801881e:	4630      	mov	r0, r6
 8018820:	f000 f80c 	bl	801883c <__malloc_unlock>
 8018824:	e794      	b.n	8018750 <_malloc_r+0x20>
 8018826:	6005      	str	r5, [r0, #0]
 8018828:	e7d6      	b.n	80187d8 <_malloc_r+0xa8>
 801882a:	bf00      	nop
 801882c:	2000b7ac 	.word	0x2000b7ac

08018830 <__malloc_lock>:
 8018830:	4801      	ldr	r0, [pc, #4]	@ (8018838 <__malloc_lock+0x8>)
 8018832:	f000 bc7e 	b.w	8019132 <__retarget_lock_acquire_recursive>
 8018836:	bf00      	nop
 8018838:	2000b8f1 	.word	0x2000b8f1

0801883c <__malloc_unlock>:
 801883c:	4801      	ldr	r0, [pc, #4]	@ (8018844 <__malloc_unlock+0x8>)
 801883e:	f000 bc79 	b.w	8019134 <__retarget_lock_release_recursive>
 8018842:	bf00      	nop
 8018844:	2000b8f1 	.word	0x2000b8f1

08018848 <srand>:
 8018848:	b538      	push	{r3, r4, r5, lr}
 801884a:	4b10      	ldr	r3, [pc, #64]	@ (801888c <srand+0x44>)
 801884c:	681d      	ldr	r5, [r3, #0]
 801884e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018850:	4604      	mov	r4, r0
 8018852:	b9b3      	cbnz	r3, 8018882 <srand+0x3a>
 8018854:	2018      	movs	r0, #24
 8018856:	f7ff ff39 	bl	80186cc <malloc>
 801885a:	4602      	mov	r2, r0
 801885c:	6328      	str	r0, [r5, #48]	@ 0x30
 801885e:	b920      	cbnz	r0, 801886a <srand+0x22>
 8018860:	4b0b      	ldr	r3, [pc, #44]	@ (8018890 <srand+0x48>)
 8018862:	480c      	ldr	r0, [pc, #48]	@ (8018894 <srand+0x4c>)
 8018864:	2146      	movs	r1, #70	@ 0x46
 8018866:	f000 fc7d 	bl	8019164 <__assert_func>
 801886a:	490b      	ldr	r1, [pc, #44]	@ (8018898 <srand+0x50>)
 801886c:	4b0b      	ldr	r3, [pc, #44]	@ (801889c <srand+0x54>)
 801886e:	e9c0 1300 	strd	r1, r3, [r0]
 8018872:	4b0b      	ldr	r3, [pc, #44]	@ (80188a0 <srand+0x58>)
 8018874:	6083      	str	r3, [r0, #8]
 8018876:	230b      	movs	r3, #11
 8018878:	8183      	strh	r3, [r0, #12]
 801887a:	2100      	movs	r1, #0
 801887c:	2001      	movs	r0, #1
 801887e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018882:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018884:	2200      	movs	r2, #0
 8018886:	611c      	str	r4, [r3, #16]
 8018888:	615a      	str	r2, [r3, #20]
 801888a:	bd38      	pop	{r3, r4, r5, pc}
 801888c:	20000540 	.word	0x20000540
 8018890:	0801b2ce 	.word	0x0801b2ce
 8018894:	0801b2e5 	.word	0x0801b2e5
 8018898:	abcd330e 	.word	0xabcd330e
 801889c:	e66d1234 	.word	0xe66d1234
 80188a0:	0005deec 	.word	0x0005deec

080188a4 <rand>:
 80188a4:	4b16      	ldr	r3, [pc, #88]	@ (8018900 <rand+0x5c>)
 80188a6:	b510      	push	{r4, lr}
 80188a8:	681c      	ldr	r4, [r3, #0]
 80188aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80188ac:	b9b3      	cbnz	r3, 80188dc <rand+0x38>
 80188ae:	2018      	movs	r0, #24
 80188b0:	f7ff ff0c 	bl	80186cc <malloc>
 80188b4:	4602      	mov	r2, r0
 80188b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80188b8:	b920      	cbnz	r0, 80188c4 <rand+0x20>
 80188ba:	4b12      	ldr	r3, [pc, #72]	@ (8018904 <rand+0x60>)
 80188bc:	4812      	ldr	r0, [pc, #72]	@ (8018908 <rand+0x64>)
 80188be:	2152      	movs	r1, #82	@ 0x52
 80188c0:	f000 fc50 	bl	8019164 <__assert_func>
 80188c4:	4911      	ldr	r1, [pc, #68]	@ (801890c <rand+0x68>)
 80188c6:	4b12      	ldr	r3, [pc, #72]	@ (8018910 <rand+0x6c>)
 80188c8:	e9c0 1300 	strd	r1, r3, [r0]
 80188cc:	4b11      	ldr	r3, [pc, #68]	@ (8018914 <rand+0x70>)
 80188ce:	6083      	str	r3, [r0, #8]
 80188d0:	230b      	movs	r3, #11
 80188d2:	8183      	strh	r3, [r0, #12]
 80188d4:	2100      	movs	r1, #0
 80188d6:	2001      	movs	r0, #1
 80188d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80188dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80188de:	480e      	ldr	r0, [pc, #56]	@ (8018918 <rand+0x74>)
 80188e0:	690b      	ldr	r3, [r1, #16]
 80188e2:	694c      	ldr	r4, [r1, #20]
 80188e4:	4a0d      	ldr	r2, [pc, #52]	@ (801891c <rand+0x78>)
 80188e6:	4358      	muls	r0, r3
 80188e8:	fb02 0004 	mla	r0, r2, r4, r0
 80188ec:	fba3 3202 	umull	r3, r2, r3, r2
 80188f0:	3301      	adds	r3, #1
 80188f2:	eb40 0002 	adc.w	r0, r0, r2
 80188f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80188fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80188fe:	bd10      	pop	{r4, pc}
 8018900:	20000540 	.word	0x20000540
 8018904:	0801b2ce 	.word	0x0801b2ce
 8018908:	0801b2e5 	.word	0x0801b2e5
 801890c:	abcd330e 	.word	0xabcd330e
 8018910:	e66d1234 	.word	0xe66d1234
 8018914:	0005deec 	.word	0x0005deec
 8018918:	5851f42d 	.word	0x5851f42d
 801891c:	4c957f2d 	.word	0x4c957f2d

08018920 <realloc>:
 8018920:	4b02      	ldr	r3, [pc, #8]	@ (801892c <realloc+0xc>)
 8018922:	460a      	mov	r2, r1
 8018924:	4601      	mov	r1, r0
 8018926:	6818      	ldr	r0, [r3, #0]
 8018928:	f000 b802 	b.w	8018930 <_realloc_r>
 801892c:	20000540 	.word	0x20000540

08018930 <_realloc_r>:
 8018930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018934:	4680      	mov	r8, r0
 8018936:	4615      	mov	r5, r2
 8018938:	460c      	mov	r4, r1
 801893a:	b921      	cbnz	r1, 8018946 <_realloc_r+0x16>
 801893c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018940:	4611      	mov	r1, r2
 8018942:	f7ff bef5 	b.w	8018730 <_malloc_r>
 8018946:	b92a      	cbnz	r2, 8018954 <_realloc_r+0x24>
 8018948:	f000 fc36 	bl	80191b8 <_free_r>
 801894c:	2400      	movs	r4, #0
 801894e:	4620      	mov	r0, r4
 8018950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018954:	f000 fc7a 	bl	801924c <_malloc_usable_size_r>
 8018958:	4285      	cmp	r5, r0
 801895a:	4606      	mov	r6, r0
 801895c:	d802      	bhi.n	8018964 <_realloc_r+0x34>
 801895e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018962:	d8f4      	bhi.n	801894e <_realloc_r+0x1e>
 8018964:	4629      	mov	r1, r5
 8018966:	4640      	mov	r0, r8
 8018968:	f7ff fee2 	bl	8018730 <_malloc_r>
 801896c:	4607      	mov	r7, r0
 801896e:	2800      	cmp	r0, #0
 8018970:	d0ec      	beq.n	801894c <_realloc_r+0x1c>
 8018972:	42b5      	cmp	r5, r6
 8018974:	462a      	mov	r2, r5
 8018976:	4621      	mov	r1, r4
 8018978:	bf28      	it	cs
 801897a:	4632      	movcs	r2, r6
 801897c:	f000 fbe3 	bl	8019146 <memcpy>
 8018980:	4621      	mov	r1, r4
 8018982:	4640      	mov	r0, r8
 8018984:	f000 fc18 	bl	80191b8 <_free_r>
 8018988:	463c      	mov	r4, r7
 801898a:	e7e0      	b.n	801894e <_realloc_r+0x1e>

0801898c <_strtoul_l.constprop.0>:
 801898c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018990:	4e34      	ldr	r6, [pc, #208]	@ (8018a64 <_strtoul_l.constprop.0+0xd8>)
 8018992:	4686      	mov	lr, r0
 8018994:	460d      	mov	r5, r1
 8018996:	4628      	mov	r0, r5
 8018998:	f815 4b01 	ldrb.w	r4, [r5], #1
 801899c:	5d37      	ldrb	r7, [r6, r4]
 801899e:	f017 0708 	ands.w	r7, r7, #8
 80189a2:	d1f8      	bne.n	8018996 <_strtoul_l.constprop.0+0xa>
 80189a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80189a6:	d12f      	bne.n	8018a08 <_strtoul_l.constprop.0+0x7c>
 80189a8:	782c      	ldrb	r4, [r5, #0]
 80189aa:	2701      	movs	r7, #1
 80189ac:	1c85      	adds	r5, r0, #2
 80189ae:	f033 0010 	bics.w	r0, r3, #16
 80189b2:	d109      	bne.n	80189c8 <_strtoul_l.constprop.0+0x3c>
 80189b4:	2c30      	cmp	r4, #48	@ 0x30
 80189b6:	d12c      	bne.n	8018a12 <_strtoul_l.constprop.0+0x86>
 80189b8:	7828      	ldrb	r0, [r5, #0]
 80189ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80189be:	2858      	cmp	r0, #88	@ 0x58
 80189c0:	d127      	bne.n	8018a12 <_strtoul_l.constprop.0+0x86>
 80189c2:	786c      	ldrb	r4, [r5, #1]
 80189c4:	2310      	movs	r3, #16
 80189c6:	3502      	adds	r5, #2
 80189c8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80189cc:	2600      	movs	r6, #0
 80189ce:	fbb8 f8f3 	udiv	r8, r8, r3
 80189d2:	fb03 f908 	mul.w	r9, r3, r8
 80189d6:	ea6f 0909 	mvn.w	r9, r9
 80189da:	4630      	mov	r0, r6
 80189dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80189e0:	f1bc 0f09 	cmp.w	ip, #9
 80189e4:	d81c      	bhi.n	8018a20 <_strtoul_l.constprop.0+0x94>
 80189e6:	4664      	mov	r4, ip
 80189e8:	42a3      	cmp	r3, r4
 80189ea:	dd2a      	ble.n	8018a42 <_strtoul_l.constprop.0+0xb6>
 80189ec:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80189f0:	d007      	beq.n	8018a02 <_strtoul_l.constprop.0+0x76>
 80189f2:	4580      	cmp	r8, r0
 80189f4:	d322      	bcc.n	8018a3c <_strtoul_l.constprop.0+0xb0>
 80189f6:	d101      	bne.n	80189fc <_strtoul_l.constprop.0+0x70>
 80189f8:	45a1      	cmp	r9, r4
 80189fa:	db1f      	blt.n	8018a3c <_strtoul_l.constprop.0+0xb0>
 80189fc:	fb00 4003 	mla	r0, r0, r3, r4
 8018a00:	2601      	movs	r6, #1
 8018a02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a06:	e7e9      	b.n	80189dc <_strtoul_l.constprop.0+0x50>
 8018a08:	2c2b      	cmp	r4, #43	@ 0x2b
 8018a0a:	bf04      	itt	eq
 8018a0c:	782c      	ldrbeq	r4, [r5, #0]
 8018a0e:	1c85      	addeq	r5, r0, #2
 8018a10:	e7cd      	b.n	80189ae <_strtoul_l.constprop.0+0x22>
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d1d8      	bne.n	80189c8 <_strtoul_l.constprop.0+0x3c>
 8018a16:	2c30      	cmp	r4, #48	@ 0x30
 8018a18:	bf0c      	ite	eq
 8018a1a:	2308      	moveq	r3, #8
 8018a1c:	230a      	movne	r3, #10
 8018a1e:	e7d3      	b.n	80189c8 <_strtoul_l.constprop.0+0x3c>
 8018a20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018a24:	f1bc 0f19 	cmp.w	ip, #25
 8018a28:	d801      	bhi.n	8018a2e <_strtoul_l.constprop.0+0xa2>
 8018a2a:	3c37      	subs	r4, #55	@ 0x37
 8018a2c:	e7dc      	b.n	80189e8 <_strtoul_l.constprop.0+0x5c>
 8018a2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018a32:	f1bc 0f19 	cmp.w	ip, #25
 8018a36:	d804      	bhi.n	8018a42 <_strtoul_l.constprop.0+0xb6>
 8018a38:	3c57      	subs	r4, #87	@ 0x57
 8018a3a:	e7d5      	b.n	80189e8 <_strtoul_l.constprop.0+0x5c>
 8018a3c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018a40:	e7df      	b.n	8018a02 <_strtoul_l.constprop.0+0x76>
 8018a42:	1c73      	adds	r3, r6, #1
 8018a44:	d106      	bne.n	8018a54 <_strtoul_l.constprop.0+0xc8>
 8018a46:	2322      	movs	r3, #34	@ 0x22
 8018a48:	f8ce 3000 	str.w	r3, [lr]
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	b932      	cbnz	r2, 8018a5e <_strtoul_l.constprop.0+0xd2>
 8018a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a54:	b107      	cbz	r7, 8018a58 <_strtoul_l.constprop.0+0xcc>
 8018a56:	4240      	negs	r0, r0
 8018a58:	2a00      	cmp	r2, #0
 8018a5a:	d0f9      	beq.n	8018a50 <_strtoul_l.constprop.0+0xc4>
 8018a5c:	b106      	cbz	r6, 8018a60 <_strtoul_l.constprop.0+0xd4>
 8018a5e:	1e69      	subs	r1, r5, #1
 8018a60:	6011      	str	r1, [r2, #0]
 8018a62:	e7f5      	b.n	8018a50 <_strtoul_l.constprop.0+0xc4>
 8018a64:	0801b33e 	.word	0x0801b33e

08018a68 <strtoul>:
 8018a68:	4613      	mov	r3, r2
 8018a6a:	460a      	mov	r2, r1
 8018a6c:	4601      	mov	r1, r0
 8018a6e:	4802      	ldr	r0, [pc, #8]	@ (8018a78 <strtoul+0x10>)
 8018a70:	6800      	ldr	r0, [r0, #0]
 8018a72:	f7ff bf8b 	b.w	801898c <_strtoul_l.constprop.0>
 8018a76:	bf00      	nop
 8018a78:	20000540 	.word	0x20000540

08018a7c <std>:
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	b510      	push	{r4, lr}
 8018a80:	4604      	mov	r4, r0
 8018a82:	e9c0 3300 	strd	r3, r3, [r0]
 8018a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a8a:	6083      	str	r3, [r0, #8]
 8018a8c:	8181      	strh	r1, [r0, #12]
 8018a8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018a90:	81c2      	strh	r2, [r0, #14]
 8018a92:	6183      	str	r3, [r0, #24]
 8018a94:	4619      	mov	r1, r3
 8018a96:	2208      	movs	r2, #8
 8018a98:	305c      	adds	r0, #92	@ 0x5c
 8018a9a:	f000 fa8b 	bl	8018fb4 <memset>
 8018a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8018ad4 <std+0x58>)
 8018aa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8018aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8018ad8 <std+0x5c>)
 8018aa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8018adc <std+0x60>)
 8018aa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8018ae0 <std+0x64>)
 8018aac:	6323      	str	r3, [r4, #48]	@ 0x30
 8018aae:	4b0d      	ldr	r3, [pc, #52]	@ (8018ae4 <std+0x68>)
 8018ab0:	6224      	str	r4, [r4, #32]
 8018ab2:	429c      	cmp	r4, r3
 8018ab4:	d006      	beq.n	8018ac4 <std+0x48>
 8018ab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018aba:	4294      	cmp	r4, r2
 8018abc:	d002      	beq.n	8018ac4 <std+0x48>
 8018abe:	33d0      	adds	r3, #208	@ 0xd0
 8018ac0:	429c      	cmp	r4, r3
 8018ac2:	d105      	bne.n	8018ad0 <std+0x54>
 8018ac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018acc:	f000 bb30 	b.w	8019130 <__retarget_lock_init_recursive>
 8018ad0:	bd10      	pop	{r4, pc}
 8018ad2:	bf00      	nop
 8018ad4:	08018d41 	.word	0x08018d41
 8018ad8:	08018d63 	.word	0x08018d63
 8018adc:	08018d9b 	.word	0x08018d9b
 8018ae0:	08018dbf 	.word	0x08018dbf
 8018ae4:	2000b7b0 	.word	0x2000b7b0

08018ae8 <stdio_exit_handler>:
 8018ae8:	4a02      	ldr	r2, [pc, #8]	@ (8018af4 <stdio_exit_handler+0xc>)
 8018aea:	4903      	ldr	r1, [pc, #12]	@ (8018af8 <stdio_exit_handler+0x10>)
 8018aec:	4803      	ldr	r0, [pc, #12]	@ (8018afc <stdio_exit_handler+0x14>)
 8018aee:	f000 b869 	b.w	8018bc4 <_fwalk_sglue>
 8018af2:	bf00      	nop
 8018af4:	20000534 	.word	0x20000534
 8018af8:	08019bb5 	.word	0x08019bb5
 8018afc:	20000544 	.word	0x20000544

08018b00 <cleanup_stdio>:
 8018b00:	6841      	ldr	r1, [r0, #4]
 8018b02:	4b0c      	ldr	r3, [pc, #48]	@ (8018b34 <cleanup_stdio+0x34>)
 8018b04:	4299      	cmp	r1, r3
 8018b06:	b510      	push	{r4, lr}
 8018b08:	4604      	mov	r4, r0
 8018b0a:	d001      	beq.n	8018b10 <cleanup_stdio+0x10>
 8018b0c:	f001 f852 	bl	8019bb4 <_fflush_r>
 8018b10:	68a1      	ldr	r1, [r4, #8]
 8018b12:	4b09      	ldr	r3, [pc, #36]	@ (8018b38 <cleanup_stdio+0x38>)
 8018b14:	4299      	cmp	r1, r3
 8018b16:	d002      	beq.n	8018b1e <cleanup_stdio+0x1e>
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f001 f84b 	bl	8019bb4 <_fflush_r>
 8018b1e:	68e1      	ldr	r1, [r4, #12]
 8018b20:	4b06      	ldr	r3, [pc, #24]	@ (8018b3c <cleanup_stdio+0x3c>)
 8018b22:	4299      	cmp	r1, r3
 8018b24:	d004      	beq.n	8018b30 <cleanup_stdio+0x30>
 8018b26:	4620      	mov	r0, r4
 8018b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b2c:	f001 b842 	b.w	8019bb4 <_fflush_r>
 8018b30:	bd10      	pop	{r4, pc}
 8018b32:	bf00      	nop
 8018b34:	2000b7b0 	.word	0x2000b7b0
 8018b38:	2000b818 	.word	0x2000b818
 8018b3c:	2000b880 	.word	0x2000b880

08018b40 <global_stdio_init.part.0>:
 8018b40:	b510      	push	{r4, lr}
 8018b42:	4b0b      	ldr	r3, [pc, #44]	@ (8018b70 <global_stdio_init.part.0+0x30>)
 8018b44:	4c0b      	ldr	r4, [pc, #44]	@ (8018b74 <global_stdio_init.part.0+0x34>)
 8018b46:	4a0c      	ldr	r2, [pc, #48]	@ (8018b78 <global_stdio_init.part.0+0x38>)
 8018b48:	601a      	str	r2, [r3, #0]
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	2104      	movs	r1, #4
 8018b50:	f7ff ff94 	bl	8018a7c <std>
 8018b54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018b58:	2201      	movs	r2, #1
 8018b5a:	2109      	movs	r1, #9
 8018b5c:	f7ff ff8e 	bl	8018a7c <std>
 8018b60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018b64:	2202      	movs	r2, #2
 8018b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b6a:	2112      	movs	r1, #18
 8018b6c:	f7ff bf86 	b.w	8018a7c <std>
 8018b70:	2000b8e8 	.word	0x2000b8e8
 8018b74:	2000b7b0 	.word	0x2000b7b0
 8018b78:	08018ae9 	.word	0x08018ae9

08018b7c <__sfp_lock_acquire>:
 8018b7c:	4801      	ldr	r0, [pc, #4]	@ (8018b84 <__sfp_lock_acquire+0x8>)
 8018b7e:	f000 bad8 	b.w	8019132 <__retarget_lock_acquire_recursive>
 8018b82:	bf00      	nop
 8018b84:	2000b8f2 	.word	0x2000b8f2

08018b88 <__sfp_lock_release>:
 8018b88:	4801      	ldr	r0, [pc, #4]	@ (8018b90 <__sfp_lock_release+0x8>)
 8018b8a:	f000 bad3 	b.w	8019134 <__retarget_lock_release_recursive>
 8018b8e:	bf00      	nop
 8018b90:	2000b8f2 	.word	0x2000b8f2

08018b94 <__sinit>:
 8018b94:	b510      	push	{r4, lr}
 8018b96:	4604      	mov	r4, r0
 8018b98:	f7ff fff0 	bl	8018b7c <__sfp_lock_acquire>
 8018b9c:	6a23      	ldr	r3, [r4, #32]
 8018b9e:	b11b      	cbz	r3, 8018ba8 <__sinit+0x14>
 8018ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ba4:	f7ff bff0 	b.w	8018b88 <__sfp_lock_release>
 8018ba8:	4b04      	ldr	r3, [pc, #16]	@ (8018bbc <__sinit+0x28>)
 8018baa:	6223      	str	r3, [r4, #32]
 8018bac:	4b04      	ldr	r3, [pc, #16]	@ (8018bc0 <__sinit+0x2c>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d1f5      	bne.n	8018ba0 <__sinit+0xc>
 8018bb4:	f7ff ffc4 	bl	8018b40 <global_stdio_init.part.0>
 8018bb8:	e7f2      	b.n	8018ba0 <__sinit+0xc>
 8018bba:	bf00      	nop
 8018bbc:	08018b01 	.word	0x08018b01
 8018bc0:	2000b8e8 	.word	0x2000b8e8

08018bc4 <_fwalk_sglue>:
 8018bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bc8:	4607      	mov	r7, r0
 8018bca:	4688      	mov	r8, r1
 8018bcc:	4614      	mov	r4, r2
 8018bce:	2600      	movs	r6, #0
 8018bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8018bd8:	d505      	bpl.n	8018be6 <_fwalk_sglue+0x22>
 8018bda:	6824      	ldr	r4, [r4, #0]
 8018bdc:	2c00      	cmp	r4, #0
 8018bde:	d1f7      	bne.n	8018bd0 <_fwalk_sglue+0xc>
 8018be0:	4630      	mov	r0, r6
 8018be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018be6:	89ab      	ldrh	r3, [r5, #12]
 8018be8:	2b01      	cmp	r3, #1
 8018bea:	d907      	bls.n	8018bfc <_fwalk_sglue+0x38>
 8018bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	d003      	beq.n	8018bfc <_fwalk_sglue+0x38>
 8018bf4:	4629      	mov	r1, r5
 8018bf6:	4638      	mov	r0, r7
 8018bf8:	47c0      	blx	r8
 8018bfa:	4306      	orrs	r6, r0
 8018bfc:	3568      	adds	r5, #104	@ 0x68
 8018bfe:	e7e9      	b.n	8018bd4 <_fwalk_sglue+0x10>

08018c00 <_fwrite_r>:
 8018c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c04:	9c08      	ldr	r4, [sp, #32]
 8018c06:	468a      	mov	sl, r1
 8018c08:	4690      	mov	r8, r2
 8018c0a:	fb02 f903 	mul.w	r9, r2, r3
 8018c0e:	4606      	mov	r6, r0
 8018c10:	b118      	cbz	r0, 8018c1a <_fwrite_r+0x1a>
 8018c12:	6a03      	ldr	r3, [r0, #32]
 8018c14:	b90b      	cbnz	r3, 8018c1a <_fwrite_r+0x1a>
 8018c16:	f7ff ffbd 	bl	8018b94 <__sinit>
 8018c1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018c1c:	07dd      	lsls	r5, r3, #31
 8018c1e:	d405      	bmi.n	8018c2c <_fwrite_r+0x2c>
 8018c20:	89a3      	ldrh	r3, [r4, #12]
 8018c22:	0598      	lsls	r0, r3, #22
 8018c24:	d402      	bmi.n	8018c2c <_fwrite_r+0x2c>
 8018c26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018c28:	f000 fa83 	bl	8019132 <__retarget_lock_acquire_recursive>
 8018c2c:	89a3      	ldrh	r3, [r4, #12]
 8018c2e:	0719      	lsls	r1, r3, #28
 8018c30:	d516      	bpl.n	8018c60 <_fwrite_r+0x60>
 8018c32:	6923      	ldr	r3, [r4, #16]
 8018c34:	b1a3      	cbz	r3, 8018c60 <_fwrite_r+0x60>
 8018c36:	2500      	movs	r5, #0
 8018c38:	454d      	cmp	r5, r9
 8018c3a:	d01f      	beq.n	8018c7c <_fwrite_r+0x7c>
 8018c3c:	68a7      	ldr	r7, [r4, #8]
 8018c3e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018c42:	3f01      	subs	r7, #1
 8018c44:	2f00      	cmp	r7, #0
 8018c46:	60a7      	str	r7, [r4, #8]
 8018c48:	da04      	bge.n	8018c54 <_fwrite_r+0x54>
 8018c4a:	69a3      	ldr	r3, [r4, #24]
 8018c4c:	429f      	cmp	r7, r3
 8018c4e:	db0f      	blt.n	8018c70 <_fwrite_r+0x70>
 8018c50:	290a      	cmp	r1, #10
 8018c52:	d00d      	beq.n	8018c70 <_fwrite_r+0x70>
 8018c54:	6823      	ldr	r3, [r4, #0]
 8018c56:	1c5a      	adds	r2, r3, #1
 8018c58:	6022      	str	r2, [r4, #0]
 8018c5a:	7019      	strb	r1, [r3, #0]
 8018c5c:	3501      	adds	r5, #1
 8018c5e:	e7eb      	b.n	8018c38 <_fwrite_r+0x38>
 8018c60:	4621      	mov	r1, r4
 8018c62:	4630      	mov	r0, r6
 8018c64:	f000 f926 	bl	8018eb4 <__swsetup_r>
 8018c68:	2800      	cmp	r0, #0
 8018c6a:	d0e4      	beq.n	8018c36 <_fwrite_r+0x36>
 8018c6c:	2500      	movs	r5, #0
 8018c6e:	e005      	b.n	8018c7c <_fwrite_r+0x7c>
 8018c70:	4622      	mov	r2, r4
 8018c72:	4630      	mov	r0, r6
 8018c74:	f000 f8e0 	bl	8018e38 <__swbuf_r>
 8018c78:	3001      	adds	r0, #1
 8018c7a:	d1ef      	bne.n	8018c5c <_fwrite_r+0x5c>
 8018c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018c7e:	07da      	lsls	r2, r3, #31
 8018c80:	d405      	bmi.n	8018c8e <_fwrite_r+0x8e>
 8018c82:	89a3      	ldrh	r3, [r4, #12]
 8018c84:	059b      	lsls	r3, r3, #22
 8018c86:	d402      	bmi.n	8018c8e <_fwrite_r+0x8e>
 8018c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018c8a:	f000 fa53 	bl	8019134 <__retarget_lock_release_recursive>
 8018c8e:	fbb5 f0f8 	udiv	r0, r5, r8
 8018c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018c98 <fwrite>:
 8018c98:	b507      	push	{r0, r1, r2, lr}
 8018c9a:	9300      	str	r3, [sp, #0]
 8018c9c:	4613      	mov	r3, r2
 8018c9e:	460a      	mov	r2, r1
 8018ca0:	4601      	mov	r1, r0
 8018ca2:	4803      	ldr	r0, [pc, #12]	@ (8018cb0 <fwrite+0x18>)
 8018ca4:	6800      	ldr	r0, [r0, #0]
 8018ca6:	f7ff ffab 	bl	8018c00 <_fwrite_r>
 8018caa:	b003      	add	sp, #12
 8018cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8018cb0:	20000540 	.word	0x20000540

08018cb4 <iprintf>:
 8018cb4:	b40f      	push	{r0, r1, r2, r3}
 8018cb6:	b507      	push	{r0, r1, r2, lr}
 8018cb8:	4906      	ldr	r1, [pc, #24]	@ (8018cd4 <iprintf+0x20>)
 8018cba:	ab04      	add	r3, sp, #16
 8018cbc:	6808      	ldr	r0, [r1, #0]
 8018cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cc2:	6881      	ldr	r1, [r0, #8]
 8018cc4:	9301      	str	r3, [sp, #4]
 8018cc6:	f000 fc4b 	bl	8019560 <_vfiprintf_r>
 8018cca:	b003      	add	sp, #12
 8018ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018cd0:	b004      	add	sp, #16
 8018cd2:	4770      	bx	lr
 8018cd4:	20000540 	.word	0x20000540

08018cd8 <sniprintf>:
 8018cd8:	b40c      	push	{r2, r3}
 8018cda:	b530      	push	{r4, r5, lr}
 8018cdc:	4b17      	ldr	r3, [pc, #92]	@ (8018d3c <sniprintf+0x64>)
 8018cde:	1e0c      	subs	r4, r1, #0
 8018ce0:	681d      	ldr	r5, [r3, #0]
 8018ce2:	b09d      	sub	sp, #116	@ 0x74
 8018ce4:	da08      	bge.n	8018cf8 <sniprintf+0x20>
 8018ce6:	238b      	movs	r3, #139	@ 0x8b
 8018ce8:	602b      	str	r3, [r5, #0]
 8018cea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018cee:	b01d      	add	sp, #116	@ 0x74
 8018cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018cf4:	b002      	add	sp, #8
 8018cf6:	4770      	bx	lr
 8018cf8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018cfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018d00:	bf14      	ite	ne
 8018d02:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018d06:	4623      	moveq	r3, r4
 8018d08:	9304      	str	r3, [sp, #16]
 8018d0a:	9307      	str	r3, [sp, #28]
 8018d0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018d10:	9002      	str	r0, [sp, #8]
 8018d12:	9006      	str	r0, [sp, #24]
 8018d14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018d18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018d1a:	ab21      	add	r3, sp, #132	@ 0x84
 8018d1c:	a902      	add	r1, sp, #8
 8018d1e:	4628      	mov	r0, r5
 8018d20:	9301      	str	r3, [sp, #4]
 8018d22:	f000 faf7 	bl	8019314 <_svfiprintf_r>
 8018d26:	1c43      	adds	r3, r0, #1
 8018d28:	bfbc      	itt	lt
 8018d2a:	238b      	movlt	r3, #139	@ 0x8b
 8018d2c:	602b      	strlt	r3, [r5, #0]
 8018d2e:	2c00      	cmp	r4, #0
 8018d30:	d0dd      	beq.n	8018cee <sniprintf+0x16>
 8018d32:	9b02      	ldr	r3, [sp, #8]
 8018d34:	2200      	movs	r2, #0
 8018d36:	701a      	strb	r2, [r3, #0]
 8018d38:	e7d9      	b.n	8018cee <sniprintf+0x16>
 8018d3a:	bf00      	nop
 8018d3c:	20000540 	.word	0x20000540

08018d40 <__sread>:
 8018d40:	b510      	push	{r4, lr}
 8018d42:	460c      	mov	r4, r1
 8018d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d48:	f000 f994 	bl	8019074 <_read_r>
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	bfab      	itete	ge
 8018d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018d52:	89a3      	ldrhlt	r3, [r4, #12]
 8018d54:	181b      	addge	r3, r3, r0
 8018d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018d5a:	bfac      	ite	ge
 8018d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018d5e:	81a3      	strhlt	r3, [r4, #12]
 8018d60:	bd10      	pop	{r4, pc}

08018d62 <__swrite>:
 8018d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d66:	461f      	mov	r7, r3
 8018d68:	898b      	ldrh	r3, [r1, #12]
 8018d6a:	05db      	lsls	r3, r3, #23
 8018d6c:	4605      	mov	r5, r0
 8018d6e:	460c      	mov	r4, r1
 8018d70:	4616      	mov	r6, r2
 8018d72:	d505      	bpl.n	8018d80 <__swrite+0x1e>
 8018d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d78:	2302      	movs	r3, #2
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	f000 f968 	bl	8019050 <_lseek_r>
 8018d80:	89a3      	ldrh	r3, [r4, #12]
 8018d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018d8a:	81a3      	strh	r3, [r4, #12]
 8018d8c:	4632      	mov	r2, r6
 8018d8e:	463b      	mov	r3, r7
 8018d90:	4628      	mov	r0, r5
 8018d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d96:	f000 b98f 	b.w	80190b8 <_write_r>

08018d9a <__sseek>:
 8018d9a:	b510      	push	{r4, lr}
 8018d9c:	460c      	mov	r4, r1
 8018d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018da2:	f000 f955 	bl	8019050 <_lseek_r>
 8018da6:	1c43      	adds	r3, r0, #1
 8018da8:	89a3      	ldrh	r3, [r4, #12]
 8018daa:	bf15      	itete	ne
 8018dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018db6:	81a3      	strheq	r3, [r4, #12]
 8018db8:	bf18      	it	ne
 8018dba:	81a3      	strhne	r3, [r4, #12]
 8018dbc:	bd10      	pop	{r4, pc}

08018dbe <__sclose>:
 8018dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dc2:	f000 b935 	b.w	8019030 <_close_r>

08018dc6 <_vsniprintf_r>:
 8018dc6:	b530      	push	{r4, r5, lr}
 8018dc8:	4614      	mov	r4, r2
 8018dca:	2c00      	cmp	r4, #0
 8018dcc:	b09b      	sub	sp, #108	@ 0x6c
 8018dce:	4605      	mov	r5, r0
 8018dd0:	461a      	mov	r2, r3
 8018dd2:	da05      	bge.n	8018de0 <_vsniprintf_r+0x1a>
 8018dd4:	238b      	movs	r3, #139	@ 0x8b
 8018dd6:	6003      	str	r3, [r0, #0]
 8018dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ddc:	b01b      	add	sp, #108	@ 0x6c
 8018dde:	bd30      	pop	{r4, r5, pc}
 8018de0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018de4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018de8:	bf14      	ite	ne
 8018dea:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018dee:	4623      	moveq	r3, r4
 8018df0:	9302      	str	r3, [sp, #8]
 8018df2:	9305      	str	r3, [sp, #20]
 8018df4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018df8:	9100      	str	r1, [sp, #0]
 8018dfa:	9104      	str	r1, [sp, #16]
 8018dfc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018e00:	4669      	mov	r1, sp
 8018e02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018e04:	f000 fa86 	bl	8019314 <_svfiprintf_r>
 8018e08:	1c43      	adds	r3, r0, #1
 8018e0a:	bfbc      	itt	lt
 8018e0c:	238b      	movlt	r3, #139	@ 0x8b
 8018e0e:	602b      	strlt	r3, [r5, #0]
 8018e10:	2c00      	cmp	r4, #0
 8018e12:	d0e3      	beq.n	8018ddc <_vsniprintf_r+0x16>
 8018e14:	9b00      	ldr	r3, [sp, #0]
 8018e16:	2200      	movs	r2, #0
 8018e18:	701a      	strb	r2, [r3, #0]
 8018e1a:	e7df      	b.n	8018ddc <_vsniprintf_r+0x16>

08018e1c <vsniprintf>:
 8018e1c:	b507      	push	{r0, r1, r2, lr}
 8018e1e:	9300      	str	r3, [sp, #0]
 8018e20:	4613      	mov	r3, r2
 8018e22:	460a      	mov	r2, r1
 8018e24:	4601      	mov	r1, r0
 8018e26:	4803      	ldr	r0, [pc, #12]	@ (8018e34 <vsniprintf+0x18>)
 8018e28:	6800      	ldr	r0, [r0, #0]
 8018e2a:	f7ff ffcc 	bl	8018dc6 <_vsniprintf_r>
 8018e2e:	b003      	add	sp, #12
 8018e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e34:	20000540 	.word	0x20000540

08018e38 <__swbuf_r>:
 8018e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e3a:	460e      	mov	r6, r1
 8018e3c:	4614      	mov	r4, r2
 8018e3e:	4605      	mov	r5, r0
 8018e40:	b118      	cbz	r0, 8018e4a <__swbuf_r+0x12>
 8018e42:	6a03      	ldr	r3, [r0, #32]
 8018e44:	b90b      	cbnz	r3, 8018e4a <__swbuf_r+0x12>
 8018e46:	f7ff fea5 	bl	8018b94 <__sinit>
 8018e4a:	69a3      	ldr	r3, [r4, #24]
 8018e4c:	60a3      	str	r3, [r4, #8]
 8018e4e:	89a3      	ldrh	r3, [r4, #12]
 8018e50:	071a      	lsls	r2, r3, #28
 8018e52:	d501      	bpl.n	8018e58 <__swbuf_r+0x20>
 8018e54:	6923      	ldr	r3, [r4, #16]
 8018e56:	b943      	cbnz	r3, 8018e6a <__swbuf_r+0x32>
 8018e58:	4621      	mov	r1, r4
 8018e5a:	4628      	mov	r0, r5
 8018e5c:	f000 f82a 	bl	8018eb4 <__swsetup_r>
 8018e60:	b118      	cbz	r0, 8018e6a <__swbuf_r+0x32>
 8018e62:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018e66:	4638      	mov	r0, r7
 8018e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e6a:	6823      	ldr	r3, [r4, #0]
 8018e6c:	6922      	ldr	r2, [r4, #16]
 8018e6e:	1a98      	subs	r0, r3, r2
 8018e70:	6963      	ldr	r3, [r4, #20]
 8018e72:	b2f6      	uxtb	r6, r6
 8018e74:	4283      	cmp	r3, r0
 8018e76:	4637      	mov	r7, r6
 8018e78:	dc05      	bgt.n	8018e86 <__swbuf_r+0x4e>
 8018e7a:	4621      	mov	r1, r4
 8018e7c:	4628      	mov	r0, r5
 8018e7e:	f000 fe99 	bl	8019bb4 <_fflush_r>
 8018e82:	2800      	cmp	r0, #0
 8018e84:	d1ed      	bne.n	8018e62 <__swbuf_r+0x2a>
 8018e86:	68a3      	ldr	r3, [r4, #8]
 8018e88:	3b01      	subs	r3, #1
 8018e8a:	60a3      	str	r3, [r4, #8]
 8018e8c:	6823      	ldr	r3, [r4, #0]
 8018e8e:	1c5a      	adds	r2, r3, #1
 8018e90:	6022      	str	r2, [r4, #0]
 8018e92:	701e      	strb	r6, [r3, #0]
 8018e94:	6962      	ldr	r2, [r4, #20]
 8018e96:	1c43      	adds	r3, r0, #1
 8018e98:	429a      	cmp	r2, r3
 8018e9a:	d004      	beq.n	8018ea6 <__swbuf_r+0x6e>
 8018e9c:	89a3      	ldrh	r3, [r4, #12]
 8018e9e:	07db      	lsls	r3, r3, #31
 8018ea0:	d5e1      	bpl.n	8018e66 <__swbuf_r+0x2e>
 8018ea2:	2e0a      	cmp	r6, #10
 8018ea4:	d1df      	bne.n	8018e66 <__swbuf_r+0x2e>
 8018ea6:	4621      	mov	r1, r4
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	f000 fe83 	bl	8019bb4 <_fflush_r>
 8018eae:	2800      	cmp	r0, #0
 8018eb0:	d0d9      	beq.n	8018e66 <__swbuf_r+0x2e>
 8018eb2:	e7d6      	b.n	8018e62 <__swbuf_r+0x2a>

08018eb4 <__swsetup_r>:
 8018eb4:	b538      	push	{r3, r4, r5, lr}
 8018eb6:	4b29      	ldr	r3, [pc, #164]	@ (8018f5c <__swsetup_r+0xa8>)
 8018eb8:	4605      	mov	r5, r0
 8018eba:	6818      	ldr	r0, [r3, #0]
 8018ebc:	460c      	mov	r4, r1
 8018ebe:	b118      	cbz	r0, 8018ec8 <__swsetup_r+0x14>
 8018ec0:	6a03      	ldr	r3, [r0, #32]
 8018ec2:	b90b      	cbnz	r3, 8018ec8 <__swsetup_r+0x14>
 8018ec4:	f7ff fe66 	bl	8018b94 <__sinit>
 8018ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ecc:	0719      	lsls	r1, r3, #28
 8018ece:	d422      	bmi.n	8018f16 <__swsetup_r+0x62>
 8018ed0:	06da      	lsls	r2, r3, #27
 8018ed2:	d407      	bmi.n	8018ee4 <__swsetup_r+0x30>
 8018ed4:	2209      	movs	r2, #9
 8018ed6:	602a      	str	r2, [r5, #0]
 8018ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018edc:	81a3      	strh	r3, [r4, #12]
 8018ede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ee2:	e033      	b.n	8018f4c <__swsetup_r+0x98>
 8018ee4:	0758      	lsls	r0, r3, #29
 8018ee6:	d512      	bpl.n	8018f0e <__swsetup_r+0x5a>
 8018ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018eea:	b141      	cbz	r1, 8018efe <__swsetup_r+0x4a>
 8018eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018ef0:	4299      	cmp	r1, r3
 8018ef2:	d002      	beq.n	8018efa <__swsetup_r+0x46>
 8018ef4:	4628      	mov	r0, r5
 8018ef6:	f000 f95f 	bl	80191b8 <_free_r>
 8018efa:	2300      	movs	r3, #0
 8018efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8018efe:	89a3      	ldrh	r3, [r4, #12]
 8018f00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018f04:	81a3      	strh	r3, [r4, #12]
 8018f06:	2300      	movs	r3, #0
 8018f08:	6063      	str	r3, [r4, #4]
 8018f0a:	6923      	ldr	r3, [r4, #16]
 8018f0c:	6023      	str	r3, [r4, #0]
 8018f0e:	89a3      	ldrh	r3, [r4, #12]
 8018f10:	f043 0308 	orr.w	r3, r3, #8
 8018f14:	81a3      	strh	r3, [r4, #12]
 8018f16:	6923      	ldr	r3, [r4, #16]
 8018f18:	b94b      	cbnz	r3, 8018f2e <__swsetup_r+0x7a>
 8018f1a:	89a3      	ldrh	r3, [r4, #12]
 8018f1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018f24:	d003      	beq.n	8018f2e <__swsetup_r+0x7a>
 8018f26:	4621      	mov	r1, r4
 8018f28:	4628      	mov	r0, r5
 8018f2a:	f000 fea3 	bl	8019c74 <__smakebuf_r>
 8018f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f32:	f013 0201 	ands.w	r2, r3, #1
 8018f36:	d00a      	beq.n	8018f4e <__swsetup_r+0x9a>
 8018f38:	2200      	movs	r2, #0
 8018f3a:	60a2      	str	r2, [r4, #8]
 8018f3c:	6962      	ldr	r2, [r4, #20]
 8018f3e:	4252      	negs	r2, r2
 8018f40:	61a2      	str	r2, [r4, #24]
 8018f42:	6922      	ldr	r2, [r4, #16]
 8018f44:	b942      	cbnz	r2, 8018f58 <__swsetup_r+0xa4>
 8018f46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018f4a:	d1c5      	bne.n	8018ed8 <__swsetup_r+0x24>
 8018f4c:	bd38      	pop	{r3, r4, r5, pc}
 8018f4e:	0799      	lsls	r1, r3, #30
 8018f50:	bf58      	it	pl
 8018f52:	6962      	ldrpl	r2, [r4, #20]
 8018f54:	60a2      	str	r2, [r4, #8]
 8018f56:	e7f4      	b.n	8018f42 <__swsetup_r+0x8e>
 8018f58:	2000      	movs	r0, #0
 8018f5a:	e7f7      	b.n	8018f4c <__swsetup_r+0x98>
 8018f5c:	20000540 	.word	0x20000540

08018f60 <memcmp>:
 8018f60:	b510      	push	{r4, lr}
 8018f62:	3901      	subs	r1, #1
 8018f64:	4402      	add	r2, r0
 8018f66:	4290      	cmp	r0, r2
 8018f68:	d101      	bne.n	8018f6e <memcmp+0xe>
 8018f6a:	2000      	movs	r0, #0
 8018f6c:	e005      	b.n	8018f7a <memcmp+0x1a>
 8018f6e:	7803      	ldrb	r3, [r0, #0]
 8018f70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018f74:	42a3      	cmp	r3, r4
 8018f76:	d001      	beq.n	8018f7c <memcmp+0x1c>
 8018f78:	1b18      	subs	r0, r3, r4
 8018f7a:	bd10      	pop	{r4, pc}
 8018f7c:	3001      	adds	r0, #1
 8018f7e:	e7f2      	b.n	8018f66 <memcmp+0x6>

08018f80 <memmove>:
 8018f80:	4288      	cmp	r0, r1
 8018f82:	b510      	push	{r4, lr}
 8018f84:	eb01 0402 	add.w	r4, r1, r2
 8018f88:	d902      	bls.n	8018f90 <memmove+0x10>
 8018f8a:	4284      	cmp	r4, r0
 8018f8c:	4623      	mov	r3, r4
 8018f8e:	d807      	bhi.n	8018fa0 <memmove+0x20>
 8018f90:	1e43      	subs	r3, r0, #1
 8018f92:	42a1      	cmp	r1, r4
 8018f94:	d008      	beq.n	8018fa8 <memmove+0x28>
 8018f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f9e:	e7f8      	b.n	8018f92 <memmove+0x12>
 8018fa0:	4402      	add	r2, r0
 8018fa2:	4601      	mov	r1, r0
 8018fa4:	428a      	cmp	r2, r1
 8018fa6:	d100      	bne.n	8018faa <memmove+0x2a>
 8018fa8:	bd10      	pop	{r4, pc}
 8018faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018fb2:	e7f7      	b.n	8018fa4 <memmove+0x24>

08018fb4 <memset>:
 8018fb4:	4402      	add	r2, r0
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	4293      	cmp	r3, r2
 8018fba:	d100      	bne.n	8018fbe <memset+0xa>
 8018fbc:	4770      	bx	lr
 8018fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8018fc2:	e7f9      	b.n	8018fb8 <memset+0x4>

08018fc4 <strchr>:
 8018fc4:	b2c9      	uxtb	r1, r1
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fce:	b112      	cbz	r2, 8018fd6 <strchr+0x12>
 8018fd0:	428a      	cmp	r2, r1
 8018fd2:	d1f9      	bne.n	8018fc8 <strchr+0x4>
 8018fd4:	4770      	bx	lr
 8018fd6:	2900      	cmp	r1, #0
 8018fd8:	bf18      	it	ne
 8018fda:	2000      	movne	r0, #0
 8018fdc:	4770      	bx	lr

08018fde <strncmp>:
 8018fde:	b510      	push	{r4, lr}
 8018fe0:	b16a      	cbz	r2, 8018ffe <strncmp+0x20>
 8018fe2:	3901      	subs	r1, #1
 8018fe4:	1884      	adds	r4, r0, r2
 8018fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d103      	bne.n	8018ffa <strncmp+0x1c>
 8018ff2:	42a0      	cmp	r0, r4
 8018ff4:	d001      	beq.n	8018ffa <strncmp+0x1c>
 8018ff6:	2a00      	cmp	r2, #0
 8018ff8:	d1f5      	bne.n	8018fe6 <strncmp+0x8>
 8018ffa:	1ad0      	subs	r0, r2, r3
 8018ffc:	bd10      	pop	{r4, pc}
 8018ffe:	4610      	mov	r0, r2
 8019000:	e7fc      	b.n	8018ffc <strncmp+0x1e>

08019002 <strstr>:
 8019002:	780a      	ldrb	r2, [r1, #0]
 8019004:	b570      	push	{r4, r5, r6, lr}
 8019006:	b96a      	cbnz	r2, 8019024 <strstr+0x22>
 8019008:	bd70      	pop	{r4, r5, r6, pc}
 801900a:	429a      	cmp	r2, r3
 801900c:	d109      	bne.n	8019022 <strstr+0x20>
 801900e:	460c      	mov	r4, r1
 8019010:	4605      	mov	r5, r0
 8019012:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019016:	2b00      	cmp	r3, #0
 8019018:	d0f6      	beq.n	8019008 <strstr+0x6>
 801901a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801901e:	429e      	cmp	r6, r3
 8019020:	d0f7      	beq.n	8019012 <strstr+0x10>
 8019022:	3001      	adds	r0, #1
 8019024:	7803      	ldrb	r3, [r0, #0]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d1ef      	bne.n	801900a <strstr+0x8>
 801902a:	4618      	mov	r0, r3
 801902c:	e7ec      	b.n	8019008 <strstr+0x6>
	...

08019030 <_close_r>:
 8019030:	b538      	push	{r3, r4, r5, lr}
 8019032:	4d06      	ldr	r5, [pc, #24]	@ (801904c <_close_r+0x1c>)
 8019034:	2300      	movs	r3, #0
 8019036:	4604      	mov	r4, r0
 8019038:	4608      	mov	r0, r1
 801903a:	602b      	str	r3, [r5, #0]
 801903c:	f7e9 f8aa 	bl	8002194 <_close>
 8019040:	1c43      	adds	r3, r0, #1
 8019042:	d102      	bne.n	801904a <_close_r+0x1a>
 8019044:	682b      	ldr	r3, [r5, #0]
 8019046:	b103      	cbz	r3, 801904a <_close_r+0x1a>
 8019048:	6023      	str	r3, [r4, #0]
 801904a:	bd38      	pop	{r3, r4, r5, pc}
 801904c:	2000b8ec 	.word	0x2000b8ec

08019050 <_lseek_r>:
 8019050:	b538      	push	{r3, r4, r5, lr}
 8019052:	4d07      	ldr	r5, [pc, #28]	@ (8019070 <_lseek_r+0x20>)
 8019054:	4604      	mov	r4, r0
 8019056:	4608      	mov	r0, r1
 8019058:	4611      	mov	r1, r2
 801905a:	2200      	movs	r2, #0
 801905c:	602a      	str	r2, [r5, #0]
 801905e:	461a      	mov	r2, r3
 8019060:	f7e9 f8bf 	bl	80021e2 <_lseek>
 8019064:	1c43      	adds	r3, r0, #1
 8019066:	d102      	bne.n	801906e <_lseek_r+0x1e>
 8019068:	682b      	ldr	r3, [r5, #0]
 801906a:	b103      	cbz	r3, 801906e <_lseek_r+0x1e>
 801906c:	6023      	str	r3, [r4, #0]
 801906e:	bd38      	pop	{r3, r4, r5, pc}
 8019070:	2000b8ec 	.word	0x2000b8ec

08019074 <_read_r>:
 8019074:	b538      	push	{r3, r4, r5, lr}
 8019076:	4d07      	ldr	r5, [pc, #28]	@ (8019094 <_read_r+0x20>)
 8019078:	4604      	mov	r4, r0
 801907a:	4608      	mov	r0, r1
 801907c:	4611      	mov	r1, r2
 801907e:	2200      	movs	r2, #0
 8019080:	602a      	str	r2, [r5, #0]
 8019082:	461a      	mov	r2, r3
 8019084:	f7e9 f84d 	bl	8002122 <_read>
 8019088:	1c43      	adds	r3, r0, #1
 801908a:	d102      	bne.n	8019092 <_read_r+0x1e>
 801908c:	682b      	ldr	r3, [r5, #0]
 801908e:	b103      	cbz	r3, 8019092 <_read_r+0x1e>
 8019090:	6023      	str	r3, [r4, #0]
 8019092:	bd38      	pop	{r3, r4, r5, pc}
 8019094:	2000b8ec 	.word	0x2000b8ec

08019098 <_sbrk_r>:
 8019098:	b538      	push	{r3, r4, r5, lr}
 801909a:	4d06      	ldr	r5, [pc, #24]	@ (80190b4 <_sbrk_r+0x1c>)
 801909c:	2300      	movs	r3, #0
 801909e:	4604      	mov	r4, r0
 80190a0:	4608      	mov	r0, r1
 80190a2:	602b      	str	r3, [r5, #0]
 80190a4:	f7e9 f8aa 	bl	80021fc <_sbrk>
 80190a8:	1c43      	adds	r3, r0, #1
 80190aa:	d102      	bne.n	80190b2 <_sbrk_r+0x1a>
 80190ac:	682b      	ldr	r3, [r5, #0]
 80190ae:	b103      	cbz	r3, 80190b2 <_sbrk_r+0x1a>
 80190b0:	6023      	str	r3, [r4, #0]
 80190b2:	bd38      	pop	{r3, r4, r5, pc}
 80190b4:	2000b8ec 	.word	0x2000b8ec

080190b8 <_write_r>:
 80190b8:	b538      	push	{r3, r4, r5, lr}
 80190ba:	4d07      	ldr	r5, [pc, #28]	@ (80190d8 <_write_r+0x20>)
 80190bc:	4604      	mov	r4, r0
 80190be:	4608      	mov	r0, r1
 80190c0:	4611      	mov	r1, r2
 80190c2:	2200      	movs	r2, #0
 80190c4:	602a      	str	r2, [r5, #0]
 80190c6:	461a      	mov	r2, r3
 80190c8:	f7e9 f848 	bl	800215c <_write>
 80190cc:	1c43      	adds	r3, r0, #1
 80190ce:	d102      	bne.n	80190d6 <_write_r+0x1e>
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	b103      	cbz	r3, 80190d6 <_write_r+0x1e>
 80190d4:	6023      	str	r3, [r4, #0]
 80190d6:	bd38      	pop	{r3, r4, r5, pc}
 80190d8:	2000b8ec 	.word	0x2000b8ec

080190dc <__errno>:
 80190dc:	4b01      	ldr	r3, [pc, #4]	@ (80190e4 <__errno+0x8>)
 80190de:	6818      	ldr	r0, [r3, #0]
 80190e0:	4770      	bx	lr
 80190e2:	bf00      	nop
 80190e4:	20000540 	.word	0x20000540

080190e8 <__libc_init_array>:
 80190e8:	b570      	push	{r4, r5, r6, lr}
 80190ea:	4d0d      	ldr	r5, [pc, #52]	@ (8019120 <__libc_init_array+0x38>)
 80190ec:	4c0d      	ldr	r4, [pc, #52]	@ (8019124 <__libc_init_array+0x3c>)
 80190ee:	1b64      	subs	r4, r4, r5
 80190f0:	10a4      	asrs	r4, r4, #2
 80190f2:	2600      	movs	r6, #0
 80190f4:	42a6      	cmp	r6, r4
 80190f6:	d109      	bne.n	801910c <__libc_init_array+0x24>
 80190f8:	4d0b      	ldr	r5, [pc, #44]	@ (8019128 <__libc_init_array+0x40>)
 80190fa:	4c0c      	ldr	r4, [pc, #48]	@ (801912c <__libc_init_array+0x44>)
 80190fc:	f000 fe64 	bl	8019dc8 <_init>
 8019100:	1b64      	subs	r4, r4, r5
 8019102:	10a4      	asrs	r4, r4, #2
 8019104:	2600      	movs	r6, #0
 8019106:	42a6      	cmp	r6, r4
 8019108:	d105      	bne.n	8019116 <__libc_init_array+0x2e>
 801910a:	bd70      	pop	{r4, r5, r6, pc}
 801910c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019110:	4798      	blx	r3
 8019112:	3601      	adds	r6, #1
 8019114:	e7ee      	b.n	80190f4 <__libc_init_array+0xc>
 8019116:	f855 3b04 	ldr.w	r3, [r5], #4
 801911a:	4798      	blx	r3
 801911c:	3601      	adds	r6, #1
 801911e:	e7f2      	b.n	8019106 <__libc_init_array+0x1e>
 8019120:	0801b4b8 	.word	0x0801b4b8
 8019124:	0801b4b8 	.word	0x0801b4b8
 8019128:	0801b4b8 	.word	0x0801b4b8
 801912c:	0801b4c8 	.word	0x0801b4c8

08019130 <__retarget_lock_init_recursive>:
 8019130:	4770      	bx	lr

08019132 <__retarget_lock_acquire_recursive>:
 8019132:	4770      	bx	lr

08019134 <__retarget_lock_release_recursive>:
 8019134:	4770      	bx	lr

08019136 <strcpy>:
 8019136:	4603      	mov	r3, r0
 8019138:	f811 2b01 	ldrb.w	r2, [r1], #1
 801913c:	f803 2b01 	strb.w	r2, [r3], #1
 8019140:	2a00      	cmp	r2, #0
 8019142:	d1f9      	bne.n	8019138 <strcpy+0x2>
 8019144:	4770      	bx	lr

08019146 <memcpy>:
 8019146:	440a      	add	r2, r1
 8019148:	4291      	cmp	r1, r2
 801914a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801914e:	d100      	bne.n	8019152 <memcpy+0xc>
 8019150:	4770      	bx	lr
 8019152:	b510      	push	{r4, lr}
 8019154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019158:	f803 4f01 	strb.w	r4, [r3, #1]!
 801915c:	4291      	cmp	r1, r2
 801915e:	d1f9      	bne.n	8019154 <memcpy+0xe>
 8019160:	bd10      	pop	{r4, pc}
	...

08019164 <__assert_func>:
 8019164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019166:	4614      	mov	r4, r2
 8019168:	461a      	mov	r2, r3
 801916a:	4b09      	ldr	r3, [pc, #36]	@ (8019190 <__assert_func+0x2c>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	4605      	mov	r5, r0
 8019170:	68d8      	ldr	r0, [r3, #12]
 8019172:	b954      	cbnz	r4, 801918a <__assert_func+0x26>
 8019174:	4b07      	ldr	r3, [pc, #28]	@ (8019194 <__assert_func+0x30>)
 8019176:	461c      	mov	r4, r3
 8019178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801917c:	9100      	str	r1, [sp, #0]
 801917e:	462b      	mov	r3, r5
 8019180:	4905      	ldr	r1, [pc, #20]	@ (8019198 <__assert_func+0x34>)
 8019182:	f000 fd3f 	bl	8019c04 <fiprintf>
 8019186:	f000 fdd3 	bl	8019d30 <abort>
 801918a:	4b04      	ldr	r3, [pc, #16]	@ (801919c <__assert_func+0x38>)
 801918c:	e7f4      	b.n	8019178 <__assert_func+0x14>
 801918e:	bf00      	nop
 8019190:	20000540 	.word	0x20000540
 8019194:	0801b479 	.word	0x0801b479
 8019198:	0801b44b 	.word	0x0801b44b
 801919c:	0801b43e 	.word	0x0801b43e

080191a0 <__env_lock>:
 80191a0:	4801      	ldr	r0, [pc, #4]	@ (80191a8 <__env_lock+0x8>)
 80191a2:	f7ff bfc6 	b.w	8019132 <__retarget_lock_acquire_recursive>
 80191a6:	bf00      	nop
 80191a8:	2000b8f0 	.word	0x2000b8f0

080191ac <__env_unlock>:
 80191ac:	4801      	ldr	r0, [pc, #4]	@ (80191b4 <__env_unlock+0x8>)
 80191ae:	f7ff bfc1 	b.w	8019134 <__retarget_lock_release_recursive>
 80191b2:	bf00      	nop
 80191b4:	2000b8f0 	.word	0x2000b8f0

080191b8 <_free_r>:
 80191b8:	b538      	push	{r3, r4, r5, lr}
 80191ba:	4605      	mov	r5, r0
 80191bc:	2900      	cmp	r1, #0
 80191be:	d041      	beq.n	8019244 <_free_r+0x8c>
 80191c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191c4:	1f0c      	subs	r4, r1, #4
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	bfb8      	it	lt
 80191ca:	18e4      	addlt	r4, r4, r3
 80191cc:	f7ff fb30 	bl	8018830 <__malloc_lock>
 80191d0:	4a1d      	ldr	r2, [pc, #116]	@ (8019248 <_free_r+0x90>)
 80191d2:	6813      	ldr	r3, [r2, #0]
 80191d4:	b933      	cbnz	r3, 80191e4 <_free_r+0x2c>
 80191d6:	6063      	str	r3, [r4, #4]
 80191d8:	6014      	str	r4, [r2, #0]
 80191da:	4628      	mov	r0, r5
 80191dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191e0:	f7ff bb2c 	b.w	801883c <__malloc_unlock>
 80191e4:	42a3      	cmp	r3, r4
 80191e6:	d908      	bls.n	80191fa <_free_r+0x42>
 80191e8:	6820      	ldr	r0, [r4, #0]
 80191ea:	1821      	adds	r1, r4, r0
 80191ec:	428b      	cmp	r3, r1
 80191ee:	bf01      	itttt	eq
 80191f0:	6819      	ldreq	r1, [r3, #0]
 80191f2:	685b      	ldreq	r3, [r3, #4]
 80191f4:	1809      	addeq	r1, r1, r0
 80191f6:	6021      	streq	r1, [r4, #0]
 80191f8:	e7ed      	b.n	80191d6 <_free_r+0x1e>
 80191fa:	461a      	mov	r2, r3
 80191fc:	685b      	ldr	r3, [r3, #4]
 80191fe:	b10b      	cbz	r3, 8019204 <_free_r+0x4c>
 8019200:	42a3      	cmp	r3, r4
 8019202:	d9fa      	bls.n	80191fa <_free_r+0x42>
 8019204:	6811      	ldr	r1, [r2, #0]
 8019206:	1850      	adds	r0, r2, r1
 8019208:	42a0      	cmp	r0, r4
 801920a:	d10b      	bne.n	8019224 <_free_r+0x6c>
 801920c:	6820      	ldr	r0, [r4, #0]
 801920e:	4401      	add	r1, r0
 8019210:	1850      	adds	r0, r2, r1
 8019212:	4283      	cmp	r3, r0
 8019214:	6011      	str	r1, [r2, #0]
 8019216:	d1e0      	bne.n	80191da <_free_r+0x22>
 8019218:	6818      	ldr	r0, [r3, #0]
 801921a:	685b      	ldr	r3, [r3, #4]
 801921c:	6053      	str	r3, [r2, #4]
 801921e:	4408      	add	r0, r1
 8019220:	6010      	str	r0, [r2, #0]
 8019222:	e7da      	b.n	80191da <_free_r+0x22>
 8019224:	d902      	bls.n	801922c <_free_r+0x74>
 8019226:	230c      	movs	r3, #12
 8019228:	602b      	str	r3, [r5, #0]
 801922a:	e7d6      	b.n	80191da <_free_r+0x22>
 801922c:	6820      	ldr	r0, [r4, #0]
 801922e:	1821      	adds	r1, r4, r0
 8019230:	428b      	cmp	r3, r1
 8019232:	bf04      	itt	eq
 8019234:	6819      	ldreq	r1, [r3, #0]
 8019236:	685b      	ldreq	r3, [r3, #4]
 8019238:	6063      	str	r3, [r4, #4]
 801923a:	bf04      	itt	eq
 801923c:	1809      	addeq	r1, r1, r0
 801923e:	6021      	streq	r1, [r4, #0]
 8019240:	6054      	str	r4, [r2, #4]
 8019242:	e7ca      	b.n	80191da <_free_r+0x22>
 8019244:	bd38      	pop	{r3, r4, r5, pc}
 8019246:	bf00      	nop
 8019248:	2000b7ac 	.word	0x2000b7ac

0801924c <_malloc_usable_size_r>:
 801924c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019250:	1f18      	subs	r0, r3, #4
 8019252:	2b00      	cmp	r3, #0
 8019254:	bfbc      	itt	lt
 8019256:	580b      	ldrlt	r3, [r1, r0]
 8019258:	18c0      	addlt	r0, r0, r3
 801925a:	4770      	bx	lr

0801925c <__ssputs_r>:
 801925c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019260:	688e      	ldr	r6, [r1, #8]
 8019262:	461f      	mov	r7, r3
 8019264:	42be      	cmp	r6, r7
 8019266:	680b      	ldr	r3, [r1, #0]
 8019268:	4682      	mov	sl, r0
 801926a:	460c      	mov	r4, r1
 801926c:	4690      	mov	r8, r2
 801926e:	d82d      	bhi.n	80192cc <__ssputs_r+0x70>
 8019270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019278:	d026      	beq.n	80192c8 <__ssputs_r+0x6c>
 801927a:	6965      	ldr	r5, [r4, #20]
 801927c:	6909      	ldr	r1, [r1, #16]
 801927e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019282:	eba3 0901 	sub.w	r9, r3, r1
 8019286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801928a:	1c7b      	adds	r3, r7, #1
 801928c:	444b      	add	r3, r9
 801928e:	106d      	asrs	r5, r5, #1
 8019290:	429d      	cmp	r5, r3
 8019292:	bf38      	it	cc
 8019294:	461d      	movcc	r5, r3
 8019296:	0553      	lsls	r3, r2, #21
 8019298:	d527      	bpl.n	80192ea <__ssputs_r+0x8e>
 801929a:	4629      	mov	r1, r5
 801929c:	f7ff fa48 	bl	8018730 <_malloc_r>
 80192a0:	4606      	mov	r6, r0
 80192a2:	b360      	cbz	r0, 80192fe <__ssputs_r+0xa2>
 80192a4:	6921      	ldr	r1, [r4, #16]
 80192a6:	464a      	mov	r2, r9
 80192a8:	f7ff ff4d 	bl	8019146 <memcpy>
 80192ac:	89a3      	ldrh	r3, [r4, #12]
 80192ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80192b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80192b6:	81a3      	strh	r3, [r4, #12]
 80192b8:	6126      	str	r6, [r4, #16]
 80192ba:	6165      	str	r5, [r4, #20]
 80192bc:	444e      	add	r6, r9
 80192be:	eba5 0509 	sub.w	r5, r5, r9
 80192c2:	6026      	str	r6, [r4, #0]
 80192c4:	60a5      	str	r5, [r4, #8]
 80192c6:	463e      	mov	r6, r7
 80192c8:	42be      	cmp	r6, r7
 80192ca:	d900      	bls.n	80192ce <__ssputs_r+0x72>
 80192cc:	463e      	mov	r6, r7
 80192ce:	6820      	ldr	r0, [r4, #0]
 80192d0:	4632      	mov	r2, r6
 80192d2:	4641      	mov	r1, r8
 80192d4:	f7ff fe54 	bl	8018f80 <memmove>
 80192d8:	68a3      	ldr	r3, [r4, #8]
 80192da:	1b9b      	subs	r3, r3, r6
 80192dc:	60a3      	str	r3, [r4, #8]
 80192de:	6823      	ldr	r3, [r4, #0]
 80192e0:	4433      	add	r3, r6
 80192e2:	6023      	str	r3, [r4, #0]
 80192e4:	2000      	movs	r0, #0
 80192e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ea:	462a      	mov	r2, r5
 80192ec:	f7ff fb20 	bl	8018930 <_realloc_r>
 80192f0:	4606      	mov	r6, r0
 80192f2:	2800      	cmp	r0, #0
 80192f4:	d1e0      	bne.n	80192b8 <__ssputs_r+0x5c>
 80192f6:	6921      	ldr	r1, [r4, #16]
 80192f8:	4650      	mov	r0, sl
 80192fa:	f7ff ff5d 	bl	80191b8 <_free_r>
 80192fe:	230c      	movs	r3, #12
 8019300:	f8ca 3000 	str.w	r3, [sl]
 8019304:	89a3      	ldrh	r3, [r4, #12]
 8019306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801930a:	81a3      	strh	r3, [r4, #12]
 801930c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019310:	e7e9      	b.n	80192e6 <__ssputs_r+0x8a>
	...

08019314 <_svfiprintf_r>:
 8019314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019318:	4698      	mov	r8, r3
 801931a:	898b      	ldrh	r3, [r1, #12]
 801931c:	061b      	lsls	r3, r3, #24
 801931e:	b09d      	sub	sp, #116	@ 0x74
 8019320:	4607      	mov	r7, r0
 8019322:	460d      	mov	r5, r1
 8019324:	4614      	mov	r4, r2
 8019326:	d510      	bpl.n	801934a <_svfiprintf_r+0x36>
 8019328:	690b      	ldr	r3, [r1, #16]
 801932a:	b973      	cbnz	r3, 801934a <_svfiprintf_r+0x36>
 801932c:	2140      	movs	r1, #64	@ 0x40
 801932e:	f7ff f9ff 	bl	8018730 <_malloc_r>
 8019332:	6028      	str	r0, [r5, #0]
 8019334:	6128      	str	r0, [r5, #16]
 8019336:	b930      	cbnz	r0, 8019346 <_svfiprintf_r+0x32>
 8019338:	230c      	movs	r3, #12
 801933a:	603b      	str	r3, [r7, #0]
 801933c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019340:	b01d      	add	sp, #116	@ 0x74
 8019342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019346:	2340      	movs	r3, #64	@ 0x40
 8019348:	616b      	str	r3, [r5, #20]
 801934a:	2300      	movs	r3, #0
 801934c:	9309      	str	r3, [sp, #36]	@ 0x24
 801934e:	2320      	movs	r3, #32
 8019350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019354:	f8cd 800c 	str.w	r8, [sp, #12]
 8019358:	2330      	movs	r3, #48	@ 0x30
 801935a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80194f8 <_svfiprintf_r+0x1e4>
 801935e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019362:	f04f 0901 	mov.w	r9, #1
 8019366:	4623      	mov	r3, r4
 8019368:	469a      	mov	sl, r3
 801936a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801936e:	b10a      	cbz	r2, 8019374 <_svfiprintf_r+0x60>
 8019370:	2a25      	cmp	r2, #37	@ 0x25
 8019372:	d1f9      	bne.n	8019368 <_svfiprintf_r+0x54>
 8019374:	ebba 0b04 	subs.w	fp, sl, r4
 8019378:	d00b      	beq.n	8019392 <_svfiprintf_r+0x7e>
 801937a:	465b      	mov	r3, fp
 801937c:	4622      	mov	r2, r4
 801937e:	4629      	mov	r1, r5
 8019380:	4638      	mov	r0, r7
 8019382:	f7ff ff6b 	bl	801925c <__ssputs_r>
 8019386:	3001      	adds	r0, #1
 8019388:	f000 80a7 	beq.w	80194da <_svfiprintf_r+0x1c6>
 801938c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801938e:	445a      	add	r2, fp
 8019390:	9209      	str	r2, [sp, #36]	@ 0x24
 8019392:	f89a 3000 	ldrb.w	r3, [sl]
 8019396:	2b00      	cmp	r3, #0
 8019398:	f000 809f 	beq.w	80194da <_svfiprintf_r+0x1c6>
 801939c:	2300      	movs	r3, #0
 801939e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80193a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80193a6:	f10a 0a01 	add.w	sl, sl, #1
 80193aa:	9304      	str	r3, [sp, #16]
 80193ac:	9307      	str	r3, [sp, #28]
 80193ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80193b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80193b4:	4654      	mov	r4, sl
 80193b6:	2205      	movs	r2, #5
 80193b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193bc:	484e      	ldr	r0, [pc, #312]	@ (80194f8 <_svfiprintf_r+0x1e4>)
 80193be:	f7e6 ff47 	bl	8000250 <memchr>
 80193c2:	9a04      	ldr	r2, [sp, #16]
 80193c4:	b9d8      	cbnz	r0, 80193fe <_svfiprintf_r+0xea>
 80193c6:	06d0      	lsls	r0, r2, #27
 80193c8:	bf44      	itt	mi
 80193ca:	2320      	movmi	r3, #32
 80193cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193d0:	0711      	lsls	r1, r2, #28
 80193d2:	bf44      	itt	mi
 80193d4:	232b      	movmi	r3, #43	@ 0x2b
 80193d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193da:	f89a 3000 	ldrb.w	r3, [sl]
 80193de:	2b2a      	cmp	r3, #42	@ 0x2a
 80193e0:	d015      	beq.n	801940e <_svfiprintf_r+0xfa>
 80193e2:	9a07      	ldr	r2, [sp, #28]
 80193e4:	4654      	mov	r4, sl
 80193e6:	2000      	movs	r0, #0
 80193e8:	f04f 0c0a 	mov.w	ip, #10
 80193ec:	4621      	mov	r1, r4
 80193ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193f2:	3b30      	subs	r3, #48	@ 0x30
 80193f4:	2b09      	cmp	r3, #9
 80193f6:	d94b      	bls.n	8019490 <_svfiprintf_r+0x17c>
 80193f8:	b1b0      	cbz	r0, 8019428 <_svfiprintf_r+0x114>
 80193fa:	9207      	str	r2, [sp, #28]
 80193fc:	e014      	b.n	8019428 <_svfiprintf_r+0x114>
 80193fe:	eba0 0308 	sub.w	r3, r0, r8
 8019402:	fa09 f303 	lsl.w	r3, r9, r3
 8019406:	4313      	orrs	r3, r2
 8019408:	9304      	str	r3, [sp, #16]
 801940a:	46a2      	mov	sl, r4
 801940c:	e7d2      	b.n	80193b4 <_svfiprintf_r+0xa0>
 801940e:	9b03      	ldr	r3, [sp, #12]
 8019410:	1d19      	adds	r1, r3, #4
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	9103      	str	r1, [sp, #12]
 8019416:	2b00      	cmp	r3, #0
 8019418:	bfbb      	ittet	lt
 801941a:	425b      	neglt	r3, r3
 801941c:	f042 0202 	orrlt.w	r2, r2, #2
 8019420:	9307      	strge	r3, [sp, #28]
 8019422:	9307      	strlt	r3, [sp, #28]
 8019424:	bfb8      	it	lt
 8019426:	9204      	strlt	r2, [sp, #16]
 8019428:	7823      	ldrb	r3, [r4, #0]
 801942a:	2b2e      	cmp	r3, #46	@ 0x2e
 801942c:	d10a      	bne.n	8019444 <_svfiprintf_r+0x130>
 801942e:	7863      	ldrb	r3, [r4, #1]
 8019430:	2b2a      	cmp	r3, #42	@ 0x2a
 8019432:	d132      	bne.n	801949a <_svfiprintf_r+0x186>
 8019434:	9b03      	ldr	r3, [sp, #12]
 8019436:	1d1a      	adds	r2, r3, #4
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	9203      	str	r2, [sp, #12]
 801943c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019440:	3402      	adds	r4, #2
 8019442:	9305      	str	r3, [sp, #20]
 8019444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019508 <_svfiprintf_r+0x1f4>
 8019448:	7821      	ldrb	r1, [r4, #0]
 801944a:	2203      	movs	r2, #3
 801944c:	4650      	mov	r0, sl
 801944e:	f7e6 feff 	bl	8000250 <memchr>
 8019452:	b138      	cbz	r0, 8019464 <_svfiprintf_r+0x150>
 8019454:	9b04      	ldr	r3, [sp, #16]
 8019456:	eba0 000a 	sub.w	r0, r0, sl
 801945a:	2240      	movs	r2, #64	@ 0x40
 801945c:	4082      	lsls	r2, r0
 801945e:	4313      	orrs	r3, r2
 8019460:	3401      	adds	r4, #1
 8019462:	9304      	str	r3, [sp, #16]
 8019464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019468:	4824      	ldr	r0, [pc, #144]	@ (80194fc <_svfiprintf_r+0x1e8>)
 801946a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801946e:	2206      	movs	r2, #6
 8019470:	f7e6 feee 	bl	8000250 <memchr>
 8019474:	2800      	cmp	r0, #0
 8019476:	d036      	beq.n	80194e6 <_svfiprintf_r+0x1d2>
 8019478:	4b21      	ldr	r3, [pc, #132]	@ (8019500 <_svfiprintf_r+0x1ec>)
 801947a:	bb1b      	cbnz	r3, 80194c4 <_svfiprintf_r+0x1b0>
 801947c:	9b03      	ldr	r3, [sp, #12]
 801947e:	3307      	adds	r3, #7
 8019480:	f023 0307 	bic.w	r3, r3, #7
 8019484:	3308      	adds	r3, #8
 8019486:	9303      	str	r3, [sp, #12]
 8019488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801948a:	4433      	add	r3, r6
 801948c:	9309      	str	r3, [sp, #36]	@ 0x24
 801948e:	e76a      	b.n	8019366 <_svfiprintf_r+0x52>
 8019490:	fb0c 3202 	mla	r2, ip, r2, r3
 8019494:	460c      	mov	r4, r1
 8019496:	2001      	movs	r0, #1
 8019498:	e7a8      	b.n	80193ec <_svfiprintf_r+0xd8>
 801949a:	2300      	movs	r3, #0
 801949c:	3401      	adds	r4, #1
 801949e:	9305      	str	r3, [sp, #20]
 80194a0:	4619      	mov	r1, r3
 80194a2:	f04f 0c0a 	mov.w	ip, #10
 80194a6:	4620      	mov	r0, r4
 80194a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194ac:	3a30      	subs	r2, #48	@ 0x30
 80194ae:	2a09      	cmp	r2, #9
 80194b0:	d903      	bls.n	80194ba <_svfiprintf_r+0x1a6>
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d0c6      	beq.n	8019444 <_svfiprintf_r+0x130>
 80194b6:	9105      	str	r1, [sp, #20]
 80194b8:	e7c4      	b.n	8019444 <_svfiprintf_r+0x130>
 80194ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80194be:	4604      	mov	r4, r0
 80194c0:	2301      	movs	r3, #1
 80194c2:	e7f0      	b.n	80194a6 <_svfiprintf_r+0x192>
 80194c4:	ab03      	add	r3, sp, #12
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	462a      	mov	r2, r5
 80194ca:	4b0e      	ldr	r3, [pc, #56]	@ (8019504 <_svfiprintf_r+0x1f0>)
 80194cc:	a904      	add	r1, sp, #16
 80194ce:	4638      	mov	r0, r7
 80194d0:	f3af 8000 	nop.w
 80194d4:	1c42      	adds	r2, r0, #1
 80194d6:	4606      	mov	r6, r0
 80194d8:	d1d6      	bne.n	8019488 <_svfiprintf_r+0x174>
 80194da:	89ab      	ldrh	r3, [r5, #12]
 80194dc:	065b      	lsls	r3, r3, #25
 80194de:	f53f af2d 	bmi.w	801933c <_svfiprintf_r+0x28>
 80194e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80194e4:	e72c      	b.n	8019340 <_svfiprintf_r+0x2c>
 80194e6:	ab03      	add	r3, sp, #12
 80194e8:	9300      	str	r3, [sp, #0]
 80194ea:	462a      	mov	r2, r5
 80194ec:	4b05      	ldr	r3, [pc, #20]	@ (8019504 <_svfiprintf_r+0x1f0>)
 80194ee:	a904      	add	r1, sp, #16
 80194f0:	4638      	mov	r0, r7
 80194f2:	f000 f9bb 	bl	801986c <_printf_i>
 80194f6:	e7ed      	b.n	80194d4 <_svfiprintf_r+0x1c0>
 80194f8:	0801b47a 	.word	0x0801b47a
 80194fc:	0801b484 	.word	0x0801b484
 8019500:	00000000 	.word	0x00000000
 8019504:	0801925d 	.word	0x0801925d
 8019508:	0801b480 	.word	0x0801b480

0801950c <__sfputc_r>:
 801950c:	6893      	ldr	r3, [r2, #8]
 801950e:	3b01      	subs	r3, #1
 8019510:	2b00      	cmp	r3, #0
 8019512:	b410      	push	{r4}
 8019514:	6093      	str	r3, [r2, #8]
 8019516:	da08      	bge.n	801952a <__sfputc_r+0x1e>
 8019518:	6994      	ldr	r4, [r2, #24]
 801951a:	42a3      	cmp	r3, r4
 801951c:	db01      	blt.n	8019522 <__sfputc_r+0x16>
 801951e:	290a      	cmp	r1, #10
 8019520:	d103      	bne.n	801952a <__sfputc_r+0x1e>
 8019522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019526:	f7ff bc87 	b.w	8018e38 <__swbuf_r>
 801952a:	6813      	ldr	r3, [r2, #0]
 801952c:	1c58      	adds	r0, r3, #1
 801952e:	6010      	str	r0, [r2, #0]
 8019530:	7019      	strb	r1, [r3, #0]
 8019532:	4608      	mov	r0, r1
 8019534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019538:	4770      	bx	lr

0801953a <__sfputs_r>:
 801953a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801953c:	4606      	mov	r6, r0
 801953e:	460f      	mov	r7, r1
 8019540:	4614      	mov	r4, r2
 8019542:	18d5      	adds	r5, r2, r3
 8019544:	42ac      	cmp	r4, r5
 8019546:	d101      	bne.n	801954c <__sfputs_r+0x12>
 8019548:	2000      	movs	r0, #0
 801954a:	e007      	b.n	801955c <__sfputs_r+0x22>
 801954c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019550:	463a      	mov	r2, r7
 8019552:	4630      	mov	r0, r6
 8019554:	f7ff ffda 	bl	801950c <__sfputc_r>
 8019558:	1c43      	adds	r3, r0, #1
 801955a:	d1f3      	bne.n	8019544 <__sfputs_r+0xa>
 801955c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019560 <_vfiprintf_r>:
 8019560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019564:	460d      	mov	r5, r1
 8019566:	b09d      	sub	sp, #116	@ 0x74
 8019568:	4614      	mov	r4, r2
 801956a:	4698      	mov	r8, r3
 801956c:	4606      	mov	r6, r0
 801956e:	b118      	cbz	r0, 8019578 <_vfiprintf_r+0x18>
 8019570:	6a03      	ldr	r3, [r0, #32]
 8019572:	b90b      	cbnz	r3, 8019578 <_vfiprintf_r+0x18>
 8019574:	f7ff fb0e 	bl	8018b94 <__sinit>
 8019578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801957a:	07d9      	lsls	r1, r3, #31
 801957c:	d405      	bmi.n	801958a <_vfiprintf_r+0x2a>
 801957e:	89ab      	ldrh	r3, [r5, #12]
 8019580:	059a      	lsls	r2, r3, #22
 8019582:	d402      	bmi.n	801958a <_vfiprintf_r+0x2a>
 8019584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019586:	f7ff fdd4 	bl	8019132 <__retarget_lock_acquire_recursive>
 801958a:	89ab      	ldrh	r3, [r5, #12]
 801958c:	071b      	lsls	r3, r3, #28
 801958e:	d501      	bpl.n	8019594 <_vfiprintf_r+0x34>
 8019590:	692b      	ldr	r3, [r5, #16]
 8019592:	b99b      	cbnz	r3, 80195bc <_vfiprintf_r+0x5c>
 8019594:	4629      	mov	r1, r5
 8019596:	4630      	mov	r0, r6
 8019598:	f7ff fc8c 	bl	8018eb4 <__swsetup_r>
 801959c:	b170      	cbz	r0, 80195bc <_vfiprintf_r+0x5c>
 801959e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80195a0:	07dc      	lsls	r4, r3, #31
 80195a2:	d504      	bpl.n	80195ae <_vfiprintf_r+0x4e>
 80195a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195a8:	b01d      	add	sp, #116	@ 0x74
 80195aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195ae:	89ab      	ldrh	r3, [r5, #12]
 80195b0:	0598      	lsls	r0, r3, #22
 80195b2:	d4f7      	bmi.n	80195a4 <_vfiprintf_r+0x44>
 80195b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80195b6:	f7ff fdbd 	bl	8019134 <__retarget_lock_release_recursive>
 80195ba:	e7f3      	b.n	80195a4 <_vfiprintf_r+0x44>
 80195bc:	2300      	movs	r3, #0
 80195be:	9309      	str	r3, [sp, #36]	@ 0x24
 80195c0:	2320      	movs	r3, #32
 80195c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80195c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80195ca:	2330      	movs	r3, #48	@ 0x30
 80195cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801977c <_vfiprintf_r+0x21c>
 80195d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80195d4:	f04f 0901 	mov.w	r9, #1
 80195d8:	4623      	mov	r3, r4
 80195da:	469a      	mov	sl, r3
 80195dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195e0:	b10a      	cbz	r2, 80195e6 <_vfiprintf_r+0x86>
 80195e2:	2a25      	cmp	r2, #37	@ 0x25
 80195e4:	d1f9      	bne.n	80195da <_vfiprintf_r+0x7a>
 80195e6:	ebba 0b04 	subs.w	fp, sl, r4
 80195ea:	d00b      	beq.n	8019604 <_vfiprintf_r+0xa4>
 80195ec:	465b      	mov	r3, fp
 80195ee:	4622      	mov	r2, r4
 80195f0:	4629      	mov	r1, r5
 80195f2:	4630      	mov	r0, r6
 80195f4:	f7ff ffa1 	bl	801953a <__sfputs_r>
 80195f8:	3001      	adds	r0, #1
 80195fa:	f000 80a7 	beq.w	801974c <_vfiprintf_r+0x1ec>
 80195fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019600:	445a      	add	r2, fp
 8019602:	9209      	str	r2, [sp, #36]	@ 0x24
 8019604:	f89a 3000 	ldrb.w	r3, [sl]
 8019608:	2b00      	cmp	r3, #0
 801960a:	f000 809f 	beq.w	801974c <_vfiprintf_r+0x1ec>
 801960e:	2300      	movs	r3, #0
 8019610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019618:	f10a 0a01 	add.w	sl, sl, #1
 801961c:	9304      	str	r3, [sp, #16]
 801961e:	9307      	str	r3, [sp, #28]
 8019620:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019624:	931a      	str	r3, [sp, #104]	@ 0x68
 8019626:	4654      	mov	r4, sl
 8019628:	2205      	movs	r2, #5
 801962a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801962e:	4853      	ldr	r0, [pc, #332]	@ (801977c <_vfiprintf_r+0x21c>)
 8019630:	f7e6 fe0e 	bl	8000250 <memchr>
 8019634:	9a04      	ldr	r2, [sp, #16]
 8019636:	b9d8      	cbnz	r0, 8019670 <_vfiprintf_r+0x110>
 8019638:	06d1      	lsls	r1, r2, #27
 801963a:	bf44      	itt	mi
 801963c:	2320      	movmi	r3, #32
 801963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019642:	0713      	lsls	r3, r2, #28
 8019644:	bf44      	itt	mi
 8019646:	232b      	movmi	r3, #43	@ 0x2b
 8019648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801964c:	f89a 3000 	ldrb.w	r3, [sl]
 8019650:	2b2a      	cmp	r3, #42	@ 0x2a
 8019652:	d015      	beq.n	8019680 <_vfiprintf_r+0x120>
 8019654:	9a07      	ldr	r2, [sp, #28]
 8019656:	4654      	mov	r4, sl
 8019658:	2000      	movs	r0, #0
 801965a:	f04f 0c0a 	mov.w	ip, #10
 801965e:	4621      	mov	r1, r4
 8019660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019664:	3b30      	subs	r3, #48	@ 0x30
 8019666:	2b09      	cmp	r3, #9
 8019668:	d94b      	bls.n	8019702 <_vfiprintf_r+0x1a2>
 801966a:	b1b0      	cbz	r0, 801969a <_vfiprintf_r+0x13a>
 801966c:	9207      	str	r2, [sp, #28]
 801966e:	e014      	b.n	801969a <_vfiprintf_r+0x13a>
 8019670:	eba0 0308 	sub.w	r3, r0, r8
 8019674:	fa09 f303 	lsl.w	r3, r9, r3
 8019678:	4313      	orrs	r3, r2
 801967a:	9304      	str	r3, [sp, #16]
 801967c:	46a2      	mov	sl, r4
 801967e:	e7d2      	b.n	8019626 <_vfiprintf_r+0xc6>
 8019680:	9b03      	ldr	r3, [sp, #12]
 8019682:	1d19      	adds	r1, r3, #4
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	9103      	str	r1, [sp, #12]
 8019688:	2b00      	cmp	r3, #0
 801968a:	bfbb      	ittet	lt
 801968c:	425b      	neglt	r3, r3
 801968e:	f042 0202 	orrlt.w	r2, r2, #2
 8019692:	9307      	strge	r3, [sp, #28]
 8019694:	9307      	strlt	r3, [sp, #28]
 8019696:	bfb8      	it	lt
 8019698:	9204      	strlt	r2, [sp, #16]
 801969a:	7823      	ldrb	r3, [r4, #0]
 801969c:	2b2e      	cmp	r3, #46	@ 0x2e
 801969e:	d10a      	bne.n	80196b6 <_vfiprintf_r+0x156>
 80196a0:	7863      	ldrb	r3, [r4, #1]
 80196a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80196a4:	d132      	bne.n	801970c <_vfiprintf_r+0x1ac>
 80196a6:	9b03      	ldr	r3, [sp, #12]
 80196a8:	1d1a      	adds	r2, r3, #4
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	9203      	str	r2, [sp, #12]
 80196ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80196b2:	3402      	adds	r4, #2
 80196b4:	9305      	str	r3, [sp, #20]
 80196b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801978c <_vfiprintf_r+0x22c>
 80196ba:	7821      	ldrb	r1, [r4, #0]
 80196bc:	2203      	movs	r2, #3
 80196be:	4650      	mov	r0, sl
 80196c0:	f7e6 fdc6 	bl	8000250 <memchr>
 80196c4:	b138      	cbz	r0, 80196d6 <_vfiprintf_r+0x176>
 80196c6:	9b04      	ldr	r3, [sp, #16]
 80196c8:	eba0 000a 	sub.w	r0, r0, sl
 80196cc:	2240      	movs	r2, #64	@ 0x40
 80196ce:	4082      	lsls	r2, r0
 80196d0:	4313      	orrs	r3, r2
 80196d2:	3401      	adds	r4, #1
 80196d4:	9304      	str	r3, [sp, #16]
 80196d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196da:	4829      	ldr	r0, [pc, #164]	@ (8019780 <_vfiprintf_r+0x220>)
 80196dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80196e0:	2206      	movs	r2, #6
 80196e2:	f7e6 fdb5 	bl	8000250 <memchr>
 80196e6:	2800      	cmp	r0, #0
 80196e8:	d03f      	beq.n	801976a <_vfiprintf_r+0x20a>
 80196ea:	4b26      	ldr	r3, [pc, #152]	@ (8019784 <_vfiprintf_r+0x224>)
 80196ec:	bb1b      	cbnz	r3, 8019736 <_vfiprintf_r+0x1d6>
 80196ee:	9b03      	ldr	r3, [sp, #12]
 80196f0:	3307      	adds	r3, #7
 80196f2:	f023 0307 	bic.w	r3, r3, #7
 80196f6:	3308      	adds	r3, #8
 80196f8:	9303      	str	r3, [sp, #12]
 80196fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196fc:	443b      	add	r3, r7
 80196fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8019700:	e76a      	b.n	80195d8 <_vfiprintf_r+0x78>
 8019702:	fb0c 3202 	mla	r2, ip, r2, r3
 8019706:	460c      	mov	r4, r1
 8019708:	2001      	movs	r0, #1
 801970a:	e7a8      	b.n	801965e <_vfiprintf_r+0xfe>
 801970c:	2300      	movs	r3, #0
 801970e:	3401      	adds	r4, #1
 8019710:	9305      	str	r3, [sp, #20]
 8019712:	4619      	mov	r1, r3
 8019714:	f04f 0c0a 	mov.w	ip, #10
 8019718:	4620      	mov	r0, r4
 801971a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801971e:	3a30      	subs	r2, #48	@ 0x30
 8019720:	2a09      	cmp	r2, #9
 8019722:	d903      	bls.n	801972c <_vfiprintf_r+0x1cc>
 8019724:	2b00      	cmp	r3, #0
 8019726:	d0c6      	beq.n	80196b6 <_vfiprintf_r+0x156>
 8019728:	9105      	str	r1, [sp, #20]
 801972a:	e7c4      	b.n	80196b6 <_vfiprintf_r+0x156>
 801972c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019730:	4604      	mov	r4, r0
 8019732:	2301      	movs	r3, #1
 8019734:	e7f0      	b.n	8019718 <_vfiprintf_r+0x1b8>
 8019736:	ab03      	add	r3, sp, #12
 8019738:	9300      	str	r3, [sp, #0]
 801973a:	462a      	mov	r2, r5
 801973c:	4b12      	ldr	r3, [pc, #72]	@ (8019788 <_vfiprintf_r+0x228>)
 801973e:	a904      	add	r1, sp, #16
 8019740:	4630      	mov	r0, r6
 8019742:	f3af 8000 	nop.w
 8019746:	4607      	mov	r7, r0
 8019748:	1c78      	adds	r0, r7, #1
 801974a:	d1d6      	bne.n	80196fa <_vfiprintf_r+0x19a>
 801974c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801974e:	07d9      	lsls	r1, r3, #31
 8019750:	d405      	bmi.n	801975e <_vfiprintf_r+0x1fe>
 8019752:	89ab      	ldrh	r3, [r5, #12]
 8019754:	059a      	lsls	r2, r3, #22
 8019756:	d402      	bmi.n	801975e <_vfiprintf_r+0x1fe>
 8019758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801975a:	f7ff fceb 	bl	8019134 <__retarget_lock_release_recursive>
 801975e:	89ab      	ldrh	r3, [r5, #12]
 8019760:	065b      	lsls	r3, r3, #25
 8019762:	f53f af1f 	bmi.w	80195a4 <_vfiprintf_r+0x44>
 8019766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019768:	e71e      	b.n	80195a8 <_vfiprintf_r+0x48>
 801976a:	ab03      	add	r3, sp, #12
 801976c:	9300      	str	r3, [sp, #0]
 801976e:	462a      	mov	r2, r5
 8019770:	4b05      	ldr	r3, [pc, #20]	@ (8019788 <_vfiprintf_r+0x228>)
 8019772:	a904      	add	r1, sp, #16
 8019774:	4630      	mov	r0, r6
 8019776:	f000 f879 	bl	801986c <_printf_i>
 801977a:	e7e4      	b.n	8019746 <_vfiprintf_r+0x1e6>
 801977c:	0801b47a 	.word	0x0801b47a
 8019780:	0801b484 	.word	0x0801b484
 8019784:	00000000 	.word	0x00000000
 8019788:	0801953b 	.word	0x0801953b
 801978c:	0801b480 	.word	0x0801b480

08019790 <_printf_common>:
 8019790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019794:	4616      	mov	r6, r2
 8019796:	4698      	mov	r8, r3
 8019798:	688a      	ldr	r2, [r1, #8]
 801979a:	690b      	ldr	r3, [r1, #16]
 801979c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80197a0:	4293      	cmp	r3, r2
 80197a2:	bfb8      	it	lt
 80197a4:	4613      	movlt	r3, r2
 80197a6:	6033      	str	r3, [r6, #0]
 80197a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80197ac:	4607      	mov	r7, r0
 80197ae:	460c      	mov	r4, r1
 80197b0:	b10a      	cbz	r2, 80197b6 <_printf_common+0x26>
 80197b2:	3301      	adds	r3, #1
 80197b4:	6033      	str	r3, [r6, #0]
 80197b6:	6823      	ldr	r3, [r4, #0]
 80197b8:	0699      	lsls	r1, r3, #26
 80197ba:	bf42      	ittt	mi
 80197bc:	6833      	ldrmi	r3, [r6, #0]
 80197be:	3302      	addmi	r3, #2
 80197c0:	6033      	strmi	r3, [r6, #0]
 80197c2:	6825      	ldr	r5, [r4, #0]
 80197c4:	f015 0506 	ands.w	r5, r5, #6
 80197c8:	d106      	bne.n	80197d8 <_printf_common+0x48>
 80197ca:	f104 0a19 	add.w	sl, r4, #25
 80197ce:	68e3      	ldr	r3, [r4, #12]
 80197d0:	6832      	ldr	r2, [r6, #0]
 80197d2:	1a9b      	subs	r3, r3, r2
 80197d4:	42ab      	cmp	r3, r5
 80197d6:	dc26      	bgt.n	8019826 <_printf_common+0x96>
 80197d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80197dc:	6822      	ldr	r2, [r4, #0]
 80197de:	3b00      	subs	r3, #0
 80197e0:	bf18      	it	ne
 80197e2:	2301      	movne	r3, #1
 80197e4:	0692      	lsls	r2, r2, #26
 80197e6:	d42b      	bmi.n	8019840 <_printf_common+0xb0>
 80197e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80197ec:	4641      	mov	r1, r8
 80197ee:	4638      	mov	r0, r7
 80197f0:	47c8      	blx	r9
 80197f2:	3001      	adds	r0, #1
 80197f4:	d01e      	beq.n	8019834 <_printf_common+0xa4>
 80197f6:	6823      	ldr	r3, [r4, #0]
 80197f8:	6922      	ldr	r2, [r4, #16]
 80197fa:	f003 0306 	and.w	r3, r3, #6
 80197fe:	2b04      	cmp	r3, #4
 8019800:	bf02      	ittt	eq
 8019802:	68e5      	ldreq	r5, [r4, #12]
 8019804:	6833      	ldreq	r3, [r6, #0]
 8019806:	1aed      	subeq	r5, r5, r3
 8019808:	68a3      	ldr	r3, [r4, #8]
 801980a:	bf0c      	ite	eq
 801980c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019810:	2500      	movne	r5, #0
 8019812:	4293      	cmp	r3, r2
 8019814:	bfc4      	itt	gt
 8019816:	1a9b      	subgt	r3, r3, r2
 8019818:	18ed      	addgt	r5, r5, r3
 801981a:	2600      	movs	r6, #0
 801981c:	341a      	adds	r4, #26
 801981e:	42b5      	cmp	r5, r6
 8019820:	d11a      	bne.n	8019858 <_printf_common+0xc8>
 8019822:	2000      	movs	r0, #0
 8019824:	e008      	b.n	8019838 <_printf_common+0xa8>
 8019826:	2301      	movs	r3, #1
 8019828:	4652      	mov	r2, sl
 801982a:	4641      	mov	r1, r8
 801982c:	4638      	mov	r0, r7
 801982e:	47c8      	blx	r9
 8019830:	3001      	adds	r0, #1
 8019832:	d103      	bne.n	801983c <_printf_common+0xac>
 8019834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801983c:	3501      	adds	r5, #1
 801983e:	e7c6      	b.n	80197ce <_printf_common+0x3e>
 8019840:	18e1      	adds	r1, r4, r3
 8019842:	1c5a      	adds	r2, r3, #1
 8019844:	2030      	movs	r0, #48	@ 0x30
 8019846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801984a:	4422      	add	r2, r4
 801984c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019854:	3302      	adds	r3, #2
 8019856:	e7c7      	b.n	80197e8 <_printf_common+0x58>
 8019858:	2301      	movs	r3, #1
 801985a:	4622      	mov	r2, r4
 801985c:	4641      	mov	r1, r8
 801985e:	4638      	mov	r0, r7
 8019860:	47c8      	blx	r9
 8019862:	3001      	adds	r0, #1
 8019864:	d0e6      	beq.n	8019834 <_printf_common+0xa4>
 8019866:	3601      	adds	r6, #1
 8019868:	e7d9      	b.n	801981e <_printf_common+0x8e>
	...

0801986c <_printf_i>:
 801986c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019870:	7e0f      	ldrb	r7, [r1, #24]
 8019872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019874:	2f78      	cmp	r7, #120	@ 0x78
 8019876:	4691      	mov	r9, r2
 8019878:	4680      	mov	r8, r0
 801987a:	460c      	mov	r4, r1
 801987c:	469a      	mov	sl, r3
 801987e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019882:	d807      	bhi.n	8019894 <_printf_i+0x28>
 8019884:	2f62      	cmp	r7, #98	@ 0x62
 8019886:	d80a      	bhi.n	801989e <_printf_i+0x32>
 8019888:	2f00      	cmp	r7, #0
 801988a:	f000 80d2 	beq.w	8019a32 <_printf_i+0x1c6>
 801988e:	2f58      	cmp	r7, #88	@ 0x58
 8019890:	f000 80b9 	beq.w	8019a06 <_printf_i+0x19a>
 8019894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801989c:	e03a      	b.n	8019914 <_printf_i+0xa8>
 801989e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80198a2:	2b15      	cmp	r3, #21
 80198a4:	d8f6      	bhi.n	8019894 <_printf_i+0x28>
 80198a6:	a101      	add	r1, pc, #4	@ (adr r1, 80198ac <_printf_i+0x40>)
 80198a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80198ac:	08019905 	.word	0x08019905
 80198b0:	08019919 	.word	0x08019919
 80198b4:	08019895 	.word	0x08019895
 80198b8:	08019895 	.word	0x08019895
 80198bc:	08019895 	.word	0x08019895
 80198c0:	08019895 	.word	0x08019895
 80198c4:	08019919 	.word	0x08019919
 80198c8:	08019895 	.word	0x08019895
 80198cc:	08019895 	.word	0x08019895
 80198d0:	08019895 	.word	0x08019895
 80198d4:	08019895 	.word	0x08019895
 80198d8:	08019a19 	.word	0x08019a19
 80198dc:	08019943 	.word	0x08019943
 80198e0:	080199d3 	.word	0x080199d3
 80198e4:	08019895 	.word	0x08019895
 80198e8:	08019895 	.word	0x08019895
 80198ec:	08019a3b 	.word	0x08019a3b
 80198f0:	08019895 	.word	0x08019895
 80198f4:	08019943 	.word	0x08019943
 80198f8:	08019895 	.word	0x08019895
 80198fc:	08019895 	.word	0x08019895
 8019900:	080199db 	.word	0x080199db
 8019904:	6833      	ldr	r3, [r6, #0]
 8019906:	1d1a      	adds	r2, r3, #4
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	6032      	str	r2, [r6, #0]
 801990c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019914:	2301      	movs	r3, #1
 8019916:	e09d      	b.n	8019a54 <_printf_i+0x1e8>
 8019918:	6833      	ldr	r3, [r6, #0]
 801991a:	6820      	ldr	r0, [r4, #0]
 801991c:	1d19      	adds	r1, r3, #4
 801991e:	6031      	str	r1, [r6, #0]
 8019920:	0606      	lsls	r6, r0, #24
 8019922:	d501      	bpl.n	8019928 <_printf_i+0xbc>
 8019924:	681d      	ldr	r5, [r3, #0]
 8019926:	e003      	b.n	8019930 <_printf_i+0xc4>
 8019928:	0645      	lsls	r5, r0, #25
 801992a:	d5fb      	bpl.n	8019924 <_printf_i+0xb8>
 801992c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019930:	2d00      	cmp	r5, #0
 8019932:	da03      	bge.n	801993c <_printf_i+0xd0>
 8019934:	232d      	movs	r3, #45	@ 0x2d
 8019936:	426d      	negs	r5, r5
 8019938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801993c:	4859      	ldr	r0, [pc, #356]	@ (8019aa4 <_printf_i+0x238>)
 801993e:	230a      	movs	r3, #10
 8019940:	e011      	b.n	8019966 <_printf_i+0xfa>
 8019942:	6821      	ldr	r1, [r4, #0]
 8019944:	6833      	ldr	r3, [r6, #0]
 8019946:	0608      	lsls	r0, r1, #24
 8019948:	f853 5b04 	ldr.w	r5, [r3], #4
 801994c:	d402      	bmi.n	8019954 <_printf_i+0xe8>
 801994e:	0649      	lsls	r1, r1, #25
 8019950:	bf48      	it	mi
 8019952:	b2ad      	uxthmi	r5, r5
 8019954:	2f6f      	cmp	r7, #111	@ 0x6f
 8019956:	4853      	ldr	r0, [pc, #332]	@ (8019aa4 <_printf_i+0x238>)
 8019958:	6033      	str	r3, [r6, #0]
 801995a:	bf14      	ite	ne
 801995c:	230a      	movne	r3, #10
 801995e:	2308      	moveq	r3, #8
 8019960:	2100      	movs	r1, #0
 8019962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019966:	6866      	ldr	r6, [r4, #4]
 8019968:	60a6      	str	r6, [r4, #8]
 801996a:	2e00      	cmp	r6, #0
 801996c:	bfa2      	ittt	ge
 801996e:	6821      	ldrge	r1, [r4, #0]
 8019970:	f021 0104 	bicge.w	r1, r1, #4
 8019974:	6021      	strge	r1, [r4, #0]
 8019976:	b90d      	cbnz	r5, 801997c <_printf_i+0x110>
 8019978:	2e00      	cmp	r6, #0
 801997a:	d04b      	beq.n	8019a14 <_printf_i+0x1a8>
 801997c:	4616      	mov	r6, r2
 801997e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019982:	fb03 5711 	mls	r7, r3, r1, r5
 8019986:	5dc7      	ldrb	r7, [r0, r7]
 8019988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801998c:	462f      	mov	r7, r5
 801998e:	42bb      	cmp	r3, r7
 8019990:	460d      	mov	r5, r1
 8019992:	d9f4      	bls.n	801997e <_printf_i+0x112>
 8019994:	2b08      	cmp	r3, #8
 8019996:	d10b      	bne.n	80199b0 <_printf_i+0x144>
 8019998:	6823      	ldr	r3, [r4, #0]
 801999a:	07df      	lsls	r7, r3, #31
 801999c:	d508      	bpl.n	80199b0 <_printf_i+0x144>
 801999e:	6923      	ldr	r3, [r4, #16]
 80199a0:	6861      	ldr	r1, [r4, #4]
 80199a2:	4299      	cmp	r1, r3
 80199a4:	bfde      	ittt	le
 80199a6:	2330      	movle	r3, #48	@ 0x30
 80199a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80199ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80199b0:	1b92      	subs	r2, r2, r6
 80199b2:	6122      	str	r2, [r4, #16]
 80199b4:	f8cd a000 	str.w	sl, [sp]
 80199b8:	464b      	mov	r3, r9
 80199ba:	aa03      	add	r2, sp, #12
 80199bc:	4621      	mov	r1, r4
 80199be:	4640      	mov	r0, r8
 80199c0:	f7ff fee6 	bl	8019790 <_printf_common>
 80199c4:	3001      	adds	r0, #1
 80199c6:	d14a      	bne.n	8019a5e <_printf_i+0x1f2>
 80199c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80199cc:	b004      	add	sp, #16
 80199ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199d2:	6823      	ldr	r3, [r4, #0]
 80199d4:	f043 0320 	orr.w	r3, r3, #32
 80199d8:	6023      	str	r3, [r4, #0]
 80199da:	4833      	ldr	r0, [pc, #204]	@ (8019aa8 <_printf_i+0x23c>)
 80199dc:	2778      	movs	r7, #120	@ 0x78
 80199de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80199e2:	6823      	ldr	r3, [r4, #0]
 80199e4:	6831      	ldr	r1, [r6, #0]
 80199e6:	061f      	lsls	r7, r3, #24
 80199e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80199ec:	d402      	bmi.n	80199f4 <_printf_i+0x188>
 80199ee:	065f      	lsls	r7, r3, #25
 80199f0:	bf48      	it	mi
 80199f2:	b2ad      	uxthmi	r5, r5
 80199f4:	6031      	str	r1, [r6, #0]
 80199f6:	07d9      	lsls	r1, r3, #31
 80199f8:	bf44      	itt	mi
 80199fa:	f043 0320 	orrmi.w	r3, r3, #32
 80199fe:	6023      	strmi	r3, [r4, #0]
 8019a00:	b11d      	cbz	r5, 8019a0a <_printf_i+0x19e>
 8019a02:	2310      	movs	r3, #16
 8019a04:	e7ac      	b.n	8019960 <_printf_i+0xf4>
 8019a06:	4827      	ldr	r0, [pc, #156]	@ (8019aa4 <_printf_i+0x238>)
 8019a08:	e7e9      	b.n	80199de <_printf_i+0x172>
 8019a0a:	6823      	ldr	r3, [r4, #0]
 8019a0c:	f023 0320 	bic.w	r3, r3, #32
 8019a10:	6023      	str	r3, [r4, #0]
 8019a12:	e7f6      	b.n	8019a02 <_printf_i+0x196>
 8019a14:	4616      	mov	r6, r2
 8019a16:	e7bd      	b.n	8019994 <_printf_i+0x128>
 8019a18:	6833      	ldr	r3, [r6, #0]
 8019a1a:	6825      	ldr	r5, [r4, #0]
 8019a1c:	6961      	ldr	r1, [r4, #20]
 8019a1e:	1d18      	adds	r0, r3, #4
 8019a20:	6030      	str	r0, [r6, #0]
 8019a22:	062e      	lsls	r6, r5, #24
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	d501      	bpl.n	8019a2c <_printf_i+0x1c0>
 8019a28:	6019      	str	r1, [r3, #0]
 8019a2a:	e002      	b.n	8019a32 <_printf_i+0x1c6>
 8019a2c:	0668      	lsls	r0, r5, #25
 8019a2e:	d5fb      	bpl.n	8019a28 <_printf_i+0x1bc>
 8019a30:	8019      	strh	r1, [r3, #0]
 8019a32:	2300      	movs	r3, #0
 8019a34:	6123      	str	r3, [r4, #16]
 8019a36:	4616      	mov	r6, r2
 8019a38:	e7bc      	b.n	80199b4 <_printf_i+0x148>
 8019a3a:	6833      	ldr	r3, [r6, #0]
 8019a3c:	1d1a      	adds	r2, r3, #4
 8019a3e:	6032      	str	r2, [r6, #0]
 8019a40:	681e      	ldr	r6, [r3, #0]
 8019a42:	6862      	ldr	r2, [r4, #4]
 8019a44:	2100      	movs	r1, #0
 8019a46:	4630      	mov	r0, r6
 8019a48:	f7e6 fc02 	bl	8000250 <memchr>
 8019a4c:	b108      	cbz	r0, 8019a52 <_printf_i+0x1e6>
 8019a4e:	1b80      	subs	r0, r0, r6
 8019a50:	6060      	str	r0, [r4, #4]
 8019a52:	6863      	ldr	r3, [r4, #4]
 8019a54:	6123      	str	r3, [r4, #16]
 8019a56:	2300      	movs	r3, #0
 8019a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019a5c:	e7aa      	b.n	80199b4 <_printf_i+0x148>
 8019a5e:	6923      	ldr	r3, [r4, #16]
 8019a60:	4632      	mov	r2, r6
 8019a62:	4649      	mov	r1, r9
 8019a64:	4640      	mov	r0, r8
 8019a66:	47d0      	blx	sl
 8019a68:	3001      	adds	r0, #1
 8019a6a:	d0ad      	beq.n	80199c8 <_printf_i+0x15c>
 8019a6c:	6823      	ldr	r3, [r4, #0]
 8019a6e:	079b      	lsls	r3, r3, #30
 8019a70:	d413      	bmi.n	8019a9a <_printf_i+0x22e>
 8019a72:	68e0      	ldr	r0, [r4, #12]
 8019a74:	9b03      	ldr	r3, [sp, #12]
 8019a76:	4298      	cmp	r0, r3
 8019a78:	bfb8      	it	lt
 8019a7a:	4618      	movlt	r0, r3
 8019a7c:	e7a6      	b.n	80199cc <_printf_i+0x160>
 8019a7e:	2301      	movs	r3, #1
 8019a80:	4632      	mov	r2, r6
 8019a82:	4649      	mov	r1, r9
 8019a84:	4640      	mov	r0, r8
 8019a86:	47d0      	blx	sl
 8019a88:	3001      	adds	r0, #1
 8019a8a:	d09d      	beq.n	80199c8 <_printf_i+0x15c>
 8019a8c:	3501      	adds	r5, #1
 8019a8e:	68e3      	ldr	r3, [r4, #12]
 8019a90:	9903      	ldr	r1, [sp, #12]
 8019a92:	1a5b      	subs	r3, r3, r1
 8019a94:	42ab      	cmp	r3, r5
 8019a96:	dcf2      	bgt.n	8019a7e <_printf_i+0x212>
 8019a98:	e7eb      	b.n	8019a72 <_printf_i+0x206>
 8019a9a:	2500      	movs	r5, #0
 8019a9c:	f104 0619 	add.w	r6, r4, #25
 8019aa0:	e7f5      	b.n	8019a8e <_printf_i+0x222>
 8019aa2:	bf00      	nop
 8019aa4:	0801b48b 	.word	0x0801b48b
 8019aa8:	0801b49c 	.word	0x0801b49c

08019aac <__sflush_r>:
 8019aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ab4:	0716      	lsls	r6, r2, #28
 8019ab6:	4605      	mov	r5, r0
 8019ab8:	460c      	mov	r4, r1
 8019aba:	d454      	bmi.n	8019b66 <__sflush_r+0xba>
 8019abc:	684b      	ldr	r3, [r1, #4]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	dc02      	bgt.n	8019ac8 <__sflush_r+0x1c>
 8019ac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	dd48      	ble.n	8019b5a <__sflush_r+0xae>
 8019ac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019aca:	2e00      	cmp	r6, #0
 8019acc:	d045      	beq.n	8019b5a <__sflush_r+0xae>
 8019ace:	2300      	movs	r3, #0
 8019ad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019ad4:	682f      	ldr	r7, [r5, #0]
 8019ad6:	6a21      	ldr	r1, [r4, #32]
 8019ad8:	602b      	str	r3, [r5, #0]
 8019ada:	d030      	beq.n	8019b3e <__sflush_r+0x92>
 8019adc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019ade:	89a3      	ldrh	r3, [r4, #12]
 8019ae0:	0759      	lsls	r1, r3, #29
 8019ae2:	d505      	bpl.n	8019af0 <__sflush_r+0x44>
 8019ae4:	6863      	ldr	r3, [r4, #4]
 8019ae6:	1ad2      	subs	r2, r2, r3
 8019ae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019aea:	b10b      	cbz	r3, 8019af0 <__sflush_r+0x44>
 8019aec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019aee:	1ad2      	subs	r2, r2, r3
 8019af0:	2300      	movs	r3, #0
 8019af2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019af4:	6a21      	ldr	r1, [r4, #32]
 8019af6:	4628      	mov	r0, r5
 8019af8:	47b0      	blx	r6
 8019afa:	1c43      	adds	r3, r0, #1
 8019afc:	89a3      	ldrh	r3, [r4, #12]
 8019afe:	d106      	bne.n	8019b0e <__sflush_r+0x62>
 8019b00:	6829      	ldr	r1, [r5, #0]
 8019b02:	291d      	cmp	r1, #29
 8019b04:	d82b      	bhi.n	8019b5e <__sflush_r+0xb2>
 8019b06:	4a2a      	ldr	r2, [pc, #168]	@ (8019bb0 <__sflush_r+0x104>)
 8019b08:	410a      	asrs	r2, r1
 8019b0a:	07d6      	lsls	r6, r2, #31
 8019b0c:	d427      	bmi.n	8019b5e <__sflush_r+0xb2>
 8019b0e:	2200      	movs	r2, #0
 8019b10:	6062      	str	r2, [r4, #4]
 8019b12:	04d9      	lsls	r1, r3, #19
 8019b14:	6922      	ldr	r2, [r4, #16]
 8019b16:	6022      	str	r2, [r4, #0]
 8019b18:	d504      	bpl.n	8019b24 <__sflush_r+0x78>
 8019b1a:	1c42      	adds	r2, r0, #1
 8019b1c:	d101      	bne.n	8019b22 <__sflush_r+0x76>
 8019b1e:	682b      	ldr	r3, [r5, #0]
 8019b20:	b903      	cbnz	r3, 8019b24 <__sflush_r+0x78>
 8019b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8019b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019b26:	602f      	str	r7, [r5, #0]
 8019b28:	b1b9      	cbz	r1, 8019b5a <__sflush_r+0xae>
 8019b2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019b2e:	4299      	cmp	r1, r3
 8019b30:	d002      	beq.n	8019b38 <__sflush_r+0x8c>
 8019b32:	4628      	mov	r0, r5
 8019b34:	f7ff fb40 	bl	80191b8 <_free_r>
 8019b38:	2300      	movs	r3, #0
 8019b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8019b3c:	e00d      	b.n	8019b5a <__sflush_r+0xae>
 8019b3e:	2301      	movs	r3, #1
 8019b40:	4628      	mov	r0, r5
 8019b42:	47b0      	blx	r6
 8019b44:	4602      	mov	r2, r0
 8019b46:	1c50      	adds	r0, r2, #1
 8019b48:	d1c9      	bne.n	8019ade <__sflush_r+0x32>
 8019b4a:	682b      	ldr	r3, [r5, #0]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d0c6      	beq.n	8019ade <__sflush_r+0x32>
 8019b50:	2b1d      	cmp	r3, #29
 8019b52:	d001      	beq.n	8019b58 <__sflush_r+0xac>
 8019b54:	2b16      	cmp	r3, #22
 8019b56:	d11e      	bne.n	8019b96 <__sflush_r+0xea>
 8019b58:	602f      	str	r7, [r5, #0]
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	e022      	b.n	8019ba4 <__sflush_r+0xf8>
 8019b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b62:	b21b      	sxth	r3, r3
 8019b64:	e01b      	b.n	8019b9e <__sflush_r+0xf2>
 8019b66:	690f      	ldr	r7, [r1, #16]
 8019b68:	2f00      	cmp	r7, #0
 8019b6a:	d0f6      	beq.n	8019b5a <__sflush_r+0xae>
 8019b6c:	0793      	lsls	r3, r2, #30
 8019b6e:	680e      	ldr	r6, [r1, #0]
 8019b70:	bf08      	it	eq
 8019b72:	694b      	ldreq	r3, [r1, #20]
 8019b74:	600f      	str	r7, [r1, #0]
 8019b76:	bf18      	it	ne
 8019b78:	2300      	movne	r3, #0
 8019b7a:	eba6 0807 	sub.w	r8, r6, r7
 8019b7e:	608b      	str	r3, [r1, #8]
 8019b80:	f1b8 0f00 	cmp.w	r8, #0
 8019b84:	dde9      	ble.n	8019b5a <__sflush_r+0xae>
 8019b86:	6a21      	ldr	r1, [r4, #32]
 8019b88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019b8a:	4643      	mov	r3, r8
 8019b8c:	463a      	mov	r2, r7
 8019b8e:	4628      	mov	r0, r5
 8019b90:	47b0      	blx	r6
 8019b92:	2800      	cmp	r0, #0
 8019b94:	dc08      	bgt.n	8019ba8 <__sflush_r+0xfc>
 8019b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b9e:	81a3      	strh	r3, [r4, #12]
 8019ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ba8:	4407      	add	r7, r0
 8019baa:	eba8 0800 	sub.w	r8, r8, r0
 8019bae:	e7e7      	b.n	8019b80 <__sflush_r+0xd4>
 8019bb0:	dfbffffe 	.word	0xdfbffffe

08019bb4 <_fflush_r>:
 8019bb4:	b538      	push	{r3, r4, r5, lr}
 8019bb6:	690b      	ldr	r3, [r1, #16]
 8019bb8:	4605      	mov	r5, r0
 8019bba:	460c      	mov	r4, r1
 8019bbc:	b913      	cbnz	r3, 8019bc4 <_fflush_r+0x10>
 8019bbe:	2500      	movs	r5, #0
 8019bc0:	4628      	mov	r0, r5
 8019bc2:	bd38      	pop	{r3, r4, r5, pc}
 8019bc4:	b118      	cbz	r0, 8019bce <_fflush_r+0x1a>
 8019bc6:	6a03      	ldr	r3, [r0, #32]
 8019bc8:	b90b      	cbnz	r3, 8019bce <_fflush_r+0x1a>
 8019bca:	f7fe ffe3 	bl	8018b94 <__sinit>
 8019bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d0f3      	beq.n	8019bbe <_fflush_r+0xa>
 8019bd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019bd8:	07d0      	lsls	r0, r2, #31
 8019bda:	d404      	bmi.n	8019be6 <_fflush_r+0x32>
 8019bdc:	0599      	lsls	r1, r3, #22
 8019bde:	d402      	bmi.n	8019be6 <_fflush_r+0x32>
 8019be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019be2:	f7ff faa6 	bl	8019132 <__retarget_lock_acquire_recursive>
 8019be6:	4628      	mov	r0, r5
 8019be8:	4621      	mov	r1, r4
 8019bea:	f7ff ff5f 	bl	8019aac <__sflush_r>
 8019bee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019bf0:	07da      	lsls	r2, r3, #31
 8019bf2:	4605      	mov	r5, r0
 8019bf4:	d4e4      	bmi.n	8019bc0 <_fflush_r+0xc>
 8019bf6:	89a3      	ldrh	r3, [r4, #12]
 8019bf8:	059b      	lsls	r3, r3, #22
 8019bfa:	d4e1      	bmi.n	8019bc0 <_fflush_r+0xc>
 8019bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019bfe:	f7ff fa99 	bl	8019134 <__retarget_lock_release_recursive>
 8019c02:	e7dd      	b.n	8019bc0 <_fflush_r+0xc>

08019c04 <fiprintf>:
 8019c04:	b40e      	push	{r1, r2, r3}
 8019c06:	b503      	push	{r0, r1, lr}
 8019c08:	4601      	mov	r1, r0
 8019c0a:	ab03      	add	r3, sp, #12
 8019c0c:	4805      	ldr	r0, [pc, #20]	@ (8019c24 <fiprintf+0x20>)
 8019c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019c12:	6800      	ldr	r0, [r0, #0]
 8019c14:	9301      	str	r3, [sp, #4]
 8019c16:	f7ff fca3 	bl	8019560 <_vfiprintf_r>
 8019c1a:	b002      	add	sp, #8
 8019c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019c20:	b003      	add	sp, #12
 8019c22:	4770      	bx	lr
 8019c24:	20000540 	.word	0x20000540

08019c28 <__swhatbuf_r>:
 8019c28:	b570      	push	{r4, r5, r6, lr}
 8019c2a:	460c      	mov	r4, r1
 8019c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c30:	2900      	cmp	r1, #0
 8019c32:	b096      	sub	sp, #88	@ 0x58
 8019c34:	4615      	mov	r5, r2
 8019c36:	461e      	mov	r6, r3
 8019c38:	da0d      	bge.n	8019c56 <__swhatbuf_r+0x2e>
 8019c3a:	89a3      	ldrh	r3, [r4, #12]
 8019c3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019c40:	f04f 0100 	mov.w	r1, #0
 8019c44:	bf14      	ite	ne
 8019c46:	2340      	movne	r3, #64	@ 0x40
 8019c48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019c4c:	2000      	movs	r0, #0
 8019c4e:	6031      	str	r1, [r6, #0]
 8019c50:	602b      	str	r3, [r5, #0]
 8019c52:	b016      	add	sp, #88	@ 0x58
 8019c54:	bd70      	pop	{r4, r5, r6, pc}
 8019c56:	466a      	mov	r2, sp
 8019c58:	f000 f848 	bl	8019cec <_fstat_r>
 8019c5c:	2800      	cmp	r0, #0
 8019c5e:	dbec      	blt.n	8019c3a <__swhatbuf_r+0x12>
 8019c60:	9901      	ldr	r1, [sp, #4]
 8019c62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019c66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019c6a:	4259      	negs	r1, r3
 8019c6c:	4159      	adcs	r1, r3
 8019c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019c72:	e7eb      	b.n	8019c4c <__swhatbuf_r+0x24>

08019c74 <__smakebuf_r>:
 8019c74:	898b      	ldrh	r3, [r1, #12]
 8019c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c78:	079d      	lsls	r5, r3, #30
 8019c7a:	4606      	mov	r6, r0
 8019c7c:	460c      	mov	r4, r1
 8019c7e:	d507      	bpl.n	8019c90 <__smakebuf_r+0x1c>
 8019c80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019c84:	6023      	str	r3, [r4, #0]
 8019c86:	6123      	str	r3, [r4, #16]
 8019c88:	2301      	movs	r3, #1
 8019c8a:	6163      	str	r3, [r4, #20]
 8019c8c:	b003      	add	sp, #12
 8019c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c90:	ab01      	add	r3, sp, #4
 8019c92:	466a      	mov	r2, sp
 8019c94:	f7ff ffc8 	bl	8019c28 <__swhatbuf_r>
 8019c98:	9f00      	ldr	r7, [sp, #0]
 8019c9a:	4605      	mov	r5, r0
 8019c9c:	4639      	mov	r1, r7
 8019c9e:	4630      	mov	r0, r6
 8019ca0:	f7fe fd46 	bl	8018730 <_malloc_r>
 8019ca4:	b948      	cbnz	r0, 8019cba <__smakebuf_r+0x46>
 8019ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019caa:	059a      	lsls	r2, r3, #22
 8019cac:	d4ee      	bmi.n	8019c8c <__smakebuf_r+0x18>
 8019cae:	f023 0303 	bic.w	r3, r3, #3
 8019cb2:	f043 0302 	orr.w	r3, r3, #2
 8019cb6:	81a3      	strh	r3, [r4, #12]
 8019cb8:	e7e2      	b.n	8019c80 <__smakebuf_r+0xc>
 8019cba:	89a3      	ldrh	r3, [r4, #12]
 8019cbc:	6020      	str	r0, [r4, #0]
 8019cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019cc2:	81a3      	strh	r3, [r4, #12]
 8019cc4:	9b01      	ldr	r3, [sp, #4]
 8019cc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019cca:	b15b      	cbz	r3, 8019ce4 <__smakebuf_r+0x70>
 8019ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cd0:	4630      	mov	r0, r6
 8019cd2:	f000 f81d 	bl	8019d10 <_isatty_r>
 8019cd6:	b128      	cbz	r0, 8019ce4 <__smakebuf_r+0x70>
 8019cd8:	89a3      	ldrh	r3, [r4, #12]
 8019cda:	f023 0303 	bic.w	r3, r3, #3
 8019cde:	f043 0301 	orr.w	r3, r3, #1
 8019ce2:	81a3      	strh	r3, [r4, #12]
 8019ce4:	89a3      	ldrh	r3, [r4, #12]
 8019ce6:	431d      	orrs	r5, r3
 8019ce8:	81a5      	strh	r5, [r4, #12]
 8019cea:	e7cf      	b.n	8019c8c <__smakebuf_r+0x18>

08019cec <_fstat_r>:
 8019cec:	b538      	push	{r3, r4, r5, lr}
 8019cee:	4d07      	ldr	r5, [pc, #28]	@ (8019d0c <_fstat_r+0x20>)
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	4604      	mov	r4, r0
 8019cf4:	4608      	mov	r0, r1
 8019cf6:	4611      	mov	r1, r2
 8019cf8:	602b      	str	r3, [r5, #0]
 8019cfa:	f7e8 fa57 	bl	80021ac <_fstat>
 8019cfe:	1c43      	adds	r3, r0, #1
 8019d00:	d102      	bne.n	8019d08 <_fstat_r+0x1c>
 8019d02:	682b      	ldr	r3, [r5, #0]
 8019d04:	b103      	cbz	r3, 8019d08 <_fstat_r+0x1c>
 8019d06:	6023      	str	r3, [r4, #0]
 8019d08:	bd38      	pop	{r3, r4, r5, pc}
 8019d0a:	bf00      	nop
 8019d0c:	2000b8ec 	.word	0x2000b8ec

08019d10 <_isatty_r>:
 8019d10:	b538      	push	{r3, r4, r5, lr}
 8019d12:	4d06      	ldr	r5, [pc, #24]	@ (8019d2c <_isatty_r+0x1c>)
 8019d14:	2300      	movs	r3, #0
 8019d16:	4604      	mov	r4, r0
 8019d18:	4608      	mov	r0, r1
 8019d1a:	602b      	str	r3, [r5, #0]
 8019d1c:	f7e8 fa56 	bl	80021cc <_isatty>
 8019d20:	1c43      	adds	r3, r0, #1
 8019d22:	d102      	bne.n	8019d2a <_isatty_r+0x1a>
 8019d24:	682b      	ldr	r3, [r5, #0]
 8019d26:	b103      	cbz	r3, 8019d2a <_isatty_r+0x1a>
 8019d28:	6023      	str	r3, [r4, #0]
 8019d2a:	bd38      	pop	{r3, r4, r5, pc}
 8019d2c:	2000b8ec 	.word	0x2000b8ec

08019d30 <abort>:
 8019d30:	b508      	push	{r3, lr}
 8019d32:	2006      	movs	r0, #6
 8019d34:	f000 f82c 	bl	8019d90 <raise>
 8019d38:	2001      	movs	r0, #1
 8019d3a:	f7e8 f9e7 	bl	800210c <_exit>

08019d3e <_raise_r>:
 8019d3e:	291f      	cmp	r1, #31
 8019d40:	b538      	push	{r3, r4, r5, lr}
 8019d42:	4605      	mov	r5, r0
 8019d44:	460c      	mov	r4, r1
 8019d46:	d904      	bls.n	8019d52 <_raise_r+0x14>
 8019d48:	2316      	movs	r3, #22
 8019d4a:	6003      	str	r3, [r0, #0]
 8019d4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019d50:	bd38      	pop	{r3, r4, r5, pc}
 8019d52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019d54:	b112      	cbz	r2, 8019d5c <_raise_r+0x1e>
 8019d56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019d5a:	b94b      	cbnz	r3, 8019d70 <_raise_r+0x32>
 8019d5c:	4628      	mov	r0, r5
 8019d5e:	f000 f831 	bl	8019dc4 <_getpid_r>
 8019d62:	4622      	mov	r2, r4
 8019d64:	4601      	mov	r1, r0
 8019d66:	4628      	mov	r0, r5
 8019d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d6c:	f000 b818 	b.w	8019da0 <_kill_r>
 8019d70:	2b01      	cmp	r3, #1
 8019d72:	d00a      	beq.n	8019d8a <_raise_r+0x4c>
 8019d74:	1c59      	adds	r1, r3, #1
 8019d76:	d103      	bne.n	8019d80 <_raise_r+0x42>
 8019d78:	2316      	movs	r3, #22
 8019d7a:	6003      	str	r3, [r0, #0]
 8019d7c:	2001      	movs	r0, #1
 8019d7e:	e7e7      	b.n	8019d50 <_raise_r+0x12>
 8019d80:	2100      	movs	r1, #0
 8019d82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019d86:	4620      	mov	r0, r4
 8019d88:	4798      	blx	r3
 8019d8a:	2000      	movs	r0, #0
 8019d8c:	e7e0      	b.n	8019d50 <_raise_r+0x12>
	...

08019d90 <raise>:
 8019d90:	4b02      	ldr	r3, [pc, #8]	@ (8019d9c <raise+0xc>)
 8019d92:	4601      	mov	r1, r0
 8019d94:	6818      	ldr	r0, [r3, #0]
 8019d96:	f7ff bfd2 	b.w	8019d3e <_raise_r>
 8019d9a:	bf00      	nop
 8019d9c:	20000540 	.word	0x20000540

08019da0 <_kill_r>:
 8019da0:	b538      	push	{r3, r4, r5, lr}
 8019da2:	4d07      	ldr	r5, [pc, #28]	@ (8019dc0 <_kill_r+0x20>)
 8019da4:	2300      	movs	r3, #0
 8019da6:	4604      	mov	r4, r0
 8019da8:	4608      	mov	r0, r1
 8019daa:	4611      	mov	r1, r2
 8019dac:	602b      	str	r3, [r5, #0]
 8019dae:	f7e8 f99d 	bl	80020ec <_kill>
 8019db2:	1c43      	adds	r3, r0, #1
 8019db4:	d102      	bne.n	8019dbc <_kill_r+0x1c>
 8019db6:	682b      	ldr	r3, [r5, #0]
 8019db8:	b103      	cbz	r3, 8019dbc <_kill_r+0x1c>
 8019dba:	6023      	str	r3, [r4, #0]
 8019dbc:	bd38      	pop	{r3, r4, r5, pc}
 8019dbe:	bf00      	nop
 8019dc0:	2000b8ec 	.word	0x2000b8ec

08019dc4 <_getpid_r>:
 8019dc4:	f7e8 b98a 	b.w	80020dc <_getpid>

08019dc8 <_init>:
 8019dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dca:	bf00      	nop
 8019dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dce:	bc08      	pop	{r3}
 8019dd0:	469e      	mov	lr, r3
 8019dd2:	4770      	bx	lr

08019dd4 <_fini>:
 8019dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dd6:	bf00      	nop
 8019dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019dda:	bc08      	pop	{r3}
 8019ddc:	469e      	mov	lr, r3
 8019dde:	4770      	bx	lr
