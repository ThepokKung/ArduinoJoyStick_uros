
ArduinoJoyStick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001892c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08018b10  08018b10  00019b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198c8  080198c8  0001b234  2**0
                  CONTENTS
  4 .ARM          00000008  080198c8  080198c8  0001a8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198d0  080198d0  0001b234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080198d0  080198d0  0001a8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080198d8  080198d8  0001a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080198dc  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae58  20000238  08019b10  0001b238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b090  08019b10  0001c090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027470  00000000  00000000  0001b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005268  00000000  00000000  000426d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  00047940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f5  00000000  00000000  00049860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb09  00000000  00000000  0004b055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a3f  00000000  00000000  00079b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128a51  00000000  00000000  0009f59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c7fee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091d4  00000000  00000000  001c8064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001d1238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000238 	.word	0x20000238
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018af4 	.word	0x08018af4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000023c 	.word	0x2000023c
 800021c:	08018af4 	.word	0x08018af4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f017 f8d1 	bl	8017bb8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a1e:	4b37      	ldr	r3, [pc, #220]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2c:	4b33      	ldr	r3, [pc, #204]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a32:	4b32      	ldr	r3, [pc, #200]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a38:	4b30      	ldr	r3, [pc, #192]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a72:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a78:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a80:	481e      	ldr	r0, [pc, #120]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a82:	f001 fdd1 	bl	8002628 <HAL_ADC_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a8c:	f000 fec4 	bl	8001818 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a9c:	f003 f98c 	bl	8003db8 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 feb7 	bl	8001818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000aac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab6:	237f      	movs	r3, #127	@ 0x7f
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000ac8:	f002 fac6 	bl	8003058 <HAL_ADC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ad2:	f000 fea1 	bl	8001818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_ADC1_Init+0x10c>)
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ada:	230c      	movs	r3, #12
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000ae4:	f002 fab8 	bl	8003058 <HAL_ADC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000aee:	f000 fe93 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	@ 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000254 	.word	0x20000254
 8000b00:	04300002 	.word	0x04300002
 8000b04:	08600004 	.word	0x08600004

08000b08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09e      	sub	sp, #120	@ 0x78
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2254      	movs	r2, #84	@ 0x54
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f017 f845 	bl	8017bb8 <memset>
  if(adcHandle->Instance==ADC1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b36:	d167      	bne.n	8000c08 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b42:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 fe2d 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b54:	f000 fe60 	bl	8001818 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b64:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7c:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f003 fe31 	bl	8004804 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <HAL_ADC_MspInit+0x110>)
 8000ba6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000baa:	2205      	movs	r2, #5
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bdc:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bde:	f003 fad3 	bl	8004188 <HAL_DMA_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000be8:	f000 fe16 	bl	8001818 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bf0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2105      	movs	r1, #5
 8000bfc:	2012      	movs	r0, #18
 8000bfe:	f003 fa9b 	bl	8004138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c02:	2012      	movs	r0, #18
 8000c04:	f003 fab2 	bl	800416c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3778      	adds	r7, #120	@ 0x78
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	200002c0 	.word	0x200002c0
 8000c18:	40020030 	.word	0x40020030

08000c1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <MX_FREERTOS_Init+0x18>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_FREERTOS_Init+0x1c>)
 8000c26:	f007 f9cb 	bl	8007fc0 <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a03      	ldr	r2, [pc, #12]	@ (8000c3c <MX_FREERTOS_Init+0x20>)
 8000c2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	08018b98 	.word	0x08018b98
 8000c38:	080013ad 	.word	0x080013ad
 8000c3c:	20000320 	.word	0x20000320

08000c40 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000c4c:	f008 fa8c 	bl	8009168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000c50:	4b5a      	ldr	r3, [pc, #360]	@ (8000dbc <pvPortMallocMicroROS+0x17c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000c58:	f000 f986 	bl	8000f68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000c5c:	4b58      	ldr	r3, [pc, #352]	@ (8000dc0 <pvPortMallocMicroROS+0x180>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8090 	bne.w	8000d8a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d01e      	beq.n	8000cae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000c70:	2208      	movs	r2, #8
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d015      	beq.n	8000cae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f023 0307 	bic.w	r3, r3, #7
 8000c88:	3308      	adds	r3, #8
 8000c8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c9a:	f383 8811 	msr	BASEPRI, r3
 8000c9e:	f3bf 8f6f 	isb	sy
 8000ca2:	f3bf 8f4f 	dsb	sy
 8000ca6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	e7fd      	b.n	8000caa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d06a      	beq.n	8000d8a <pvPortMallocMicroROS+0x14a>
 8000cb4:	4b43      	ldr	r3, [pc, #268]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d865      	bhi.n	8000d8a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <pvPortMallocMicroROS+0x188>)
 8000cc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000cc2:	4b41      	ldr	r3, [pc, #260]	@ (8000dc8 <pvPortMallocMicroROS+0x188>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cc8:	e004      	b.n	8000cd4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d903      	bls.n	8000ce6 <pvPortMallocMicroROS+0xa6>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f1      	bne.n	8000cca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000ce6:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <pvPortMallocMicroROS+0x17c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d04c      	beq.n	8000d8a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	4413      	add	r3, r2
 8000cf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1ad2      	subs	r2, r2, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d920      	bls.n	8000d54 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00b      	beq.n	8000d3c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	613b      	str	r3, [r7, #16]
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d4e:	69b8      	ldr	r0, [r7, #24]
 8000d50:	f000 f96c 	bl	800102c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	4a19      	ldr	r2, [pc, #100]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <pvPortMallocMicroROS+0x18c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d203      	bcs.n	8000d76 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <pvPortMallocMicroROS+0x18c>)
 8000d74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <pvPortMallocMicroROS+0x180>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000d8a:	f008 f9fb 	bl	8009184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d9c:	f383 8811 	msr	BASEPRI, r3
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	60fb      	str	r3, [r7, #12]
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000db0:	69fb      	ldr	r3, [r7, #28]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3728      	adds	r7, #40	@ 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20003e68 	.word	0x20003e68
 8000dc0:	20003e74 	.word	0x20003e74
 8000dc4:	20003e6c 	.word	0x20003e6c
 8000dc8:	20003e60 	.word	0x20003e60
 8000dcc:	20003e70 	.word	0x20003e70

08000dd0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d04a      	beq.n	8000e78 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000de2:	2308      	movs	r3, #8
 8000de4:	425b      	negs	r3, r3
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4413      	add	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <vPortFreeMicroROS+0xb0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10b      	bne.n	8000e16 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	60fb      	str	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	e7fd      	b.n	8000e12 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
 8000e2e:	60bb      	str	r3, [r7, #8]
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	e7fd      	b.n	8000e32 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <vPortFreeMicroROS+0xb0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d019      	beq.n	8000e78 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d115      	bne.n	8000e78 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <vPortFreeMicroROS+0xb0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000e5c:	f008 f984 	bl	8009168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <vPortFreeMicroROS+0xb4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <vPortFreeMicroROS+0xb4>)
 8000e6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e6e:	6938      	ldr	r0, [r7, #16]
 8000e70:	f000 f8dc 	bl	800102c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000e74:	f008 f986 	bl	8009184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20003e74 	.word	0x20003e74
 8000e84:	20003e6c 	.word	0x20003e6c

08000e88 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000e94:	2308      	movs	r3, #8
 8000e96:	425b      	negs	r3, r3
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <getBlockSize+0x38>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

	return count;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20003e74 	.word	0x20003e74

08000ec4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ece:	f008 f94b 	bl	8009168 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f7ff feb4 	bl	8000c40 <pvPortMallocMicroROS>
 8000ed8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d017      	beq.n	8000f10 <pvPortReallocMicroROS+0x4c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d014      	beq.n	8000f10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffce 	bl	8000e88 <getBlockSize>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2208      	movs	r2, #8
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d201      	bcs.n	8000f00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f016 ff20 	bl	8017d4a <memcpy>

		vPortFreeMicroROS(pv);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff60 	bl	8000dd0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f10:	f008 f938 	bl	8009184 <xTaskResumeAll>

	return newmem;
 8000f14:	68bb      	ldr	r3, [r7, #8]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f28:	f008 f91e 	bl	8009168 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff fe82 	bl	8000c40 <pvPortMallocMicroROS>
 8000f3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000f42:	e004      	b.n	8000f4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	613a      	str	r2, [r7, #16]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	617a      	str	r2, [r7, #20]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f5      	bne.n	8000f44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000f58:	f008 f914 	bl	8009184 <xTaskResumeAll>
  	return mem;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <prvHeapInit+0xac>)
 8000f76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00c      	beq.n	8000f9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3307      	adds	r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 0307 	bic.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a1f      	ldr	r2, [pc, #124]	@ (8001014 <prvHeapInit+0xac>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <prvHeapInit+0xb0>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <prvHeapInit+0xb0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 0307 	bic.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <prvHeapInit+0xb4>)
 8000fc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <prvHeapInit+0xb4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <prvHeapInit+0xb4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <prvHeapInit+0xb4>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <prvHeapInit+0xb8>)
 8000ff6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a09      	ldr	r2, [pc, #36]	@ (8001024 <prvHeapInit+0xbc>)
 8000ffe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <prvHeapInit+0xc0>)
 8001002:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20003260 	.word	0x20003260
 8001018:	20003e60 	.word	0x20003e60
 800101c:	20003e68 	.word	0x20003e68
 8001020:	20003e70 	.word	0x20003e70
 8001024:	20003e6c 	.word	0x20003e6c
 8001028:	20003e74 	.word	0x20003e74

0800102c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <prvInsertBlockIntoFreeList+0xac>)
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e002      	b.n	8001040 <prvInsertBlockIntoFreeList+0x14>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d8f7      	bhi.n	800103a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	d108      	bne.n	800106e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	441a      	add	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	441a      	add	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d118      	bne.n	80010b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <prvInsertBlockIntoFreeList+0xb0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d00d      	beq.n	80010aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	441a      	add	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e008      	b.n	80010bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <prvInsertBlockIntoFreeList+0xb0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e003      	b.n	80010bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d002      	beq.n	80010ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20003e60 	.word	0x20003e60
 80010dc:	20003e68 	.word	0x20003e68

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_DMA_Init+0x70>)
 80010e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ea:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <MX_DMA_Init+0x70>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_DMA_Init+0x70>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_DMA_Init+0x70>)
 8001100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001102:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <MX_DMA_Init+0x70>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6493      	str	r3, [r2, #72]	@ 0x48
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <MX_DMA_Init+0x70>)
 800110c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	200b      	movs	r0, #11
 800111c:	f003 f80c 	bl	8004138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001120:	200b      	movs	r0, #11
 8001122:	f003 f823 	bl	800416c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	200c      	movs	r0, #12
 800112c:	f003 f804 	bl	8004138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001130:	200c      	movs	r0, #12
 8001132:	f003 f81b 	bl	800416c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	200d      	movs	r0, #13
 800113c:	f002 fffc 	bl	8004138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001140:	200d      	movs	r0, #13
 8001142:	f003 f813 	bl	800416c <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001162:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001168:	4904      	ldr	r1, [pc, #16]	@ (800117c <cubemx_transport_open+0x28>)
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f005 f986 	bl	800647c <HAL_UART_Receive_DMA>
    return true;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20003e78 	.word	0x20003e78

08001180 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800118e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f005 f9bf 	bl	8006514 <HAL_UART_DMAStop>
    return true;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011b4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011bc:	2b20      	cmp	r3, #32
 80011be:	d11b      	bne.n	80011f8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	6978      	ldr	r0, [r7, #20]
 80011ca:	f005 f8d7 	bl	800637c <HAL_UART_Transmit_DMA>
 80011ce:	4603      	mov	r3, r0
 80011d0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011d2:	e002      	b.n	80011da <cubemx_transport_write+0x3a>
            osDelay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f006 ff85 	bl	80080e4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011da:	7cfb      	ldrb	r3, [r7, #19]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <cubemx_transport_write+0x4a>
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d1f4      	bne.n	80011d4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <cubemx_transport_write+0x54>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e002      	b.n	80011fa <cubemx_transport_write+0x5a>
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80011f8:	2300      	movs	r3, #0
    }
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001218:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121e:	b672      	cpsid	i
}
 8001220:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <cubemx_transport_read+0x9c>)
 8001232:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001234:	b662      	cpsie	i
}
 8001236:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800123e:	2001      	movs	r0, #1
 8001240:	f006 ff50 	bl	80080e4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <cubemx_transport_read+0x9c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d103      	bne.n	8001258 <cubemx_transport_read+0x54>
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbe2      	blt.n	800121e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800125c:	e011      	b.n	8001282 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	440b      	add	r3, r1
 8001268:	490f      	ldr	r1, [pc, #60]	@ (80012a8 <cubemx_transport_read+0xa4>)
 800126a:	5c8a      	ldrb	r2, [r1, r2]
 800126c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001278:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <cubemx_transport_read+0xa0>)
 800127a:	6013      	str	r3, [r2, #0]
        wrote++;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	3301      	adds	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <cubemx_transport_read+0x9c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d003      	beq.n	8001296 <cubemx_transport_read+0x92>
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3e3      	bcc.n	800125e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001296:	69bb      	ldr	r3, [r7, #24]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000467c 	.word	0x2000467c
 80012a4:	20004678 	.word	0x20004678
 80012a8:	20003e78 	.word	0x20003e78

080012ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <MX_GPIO_Init+0xd4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <MX_GPIO_Init+0xd4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <MX_GPIO_Init+0xd4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <MX_GPIO_Init+0xd4>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <MX_GPIO_Init+0xd4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2120      	movs	r1, #32
 8001326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132a:	f003 fbed 	bl	8004b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001334:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480f      	ldr	r0, [pc, #60]	@ (8001384 <MX_GPIO_Init+0xd8>)
 8001346:	f003 fa5d 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800134a:	2320      	movs	r3, #32
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f003 fa4e 	bl	8004804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2105      	movs	r1, #5
 800136c:	2028      	movs	r0, #40	@ 0x28
 800136e:	f002 fee3 	bl	8004138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001372:	2028      	movs	r0, #40	@ 0x28
 8001374:	f002 fefa 	bl	800416c <HAL_NVIC_EnableIRQ>

}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	@ 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	48000800 	.word	0x48000800

08001388 <timer_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END Header_StartDefaultTask */

/* Start Out of Start DefaultTask */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <timer_callback+0x1a>
		/* Code here*/
		ReadADC_AVERAGE();
 800139a:	f000 f931 	bl	8001600 <ReadADC_AVERAGE>
		SentCMDVEL();
 800139e:	f000 f9c7 	bl	8001730 <SentCMDVEL>
	}
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b0b2      	sub	sp, #200	@ 0xc8
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close, cubemx_transport_write, cubemx_transport_read);
 80013b6:	4b44      	ldr	r3, [pc, #272]	@ (80014c8 <StartDefaultTask+0x11c>)
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	4b44      	ldr	r3, [pc, #272]	@ (80014cc <StartDefaultTask+0x120>)
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4b44      	ldr	r3, [pc, #272]	@ (80014d0 <StartDefaultTask+0x124>)
 80013c0:	4a44      	ldr	r2, [pc, #272]	@ (80014d4 <StartDefaultTask+0x128>)
 80013c2:	4945      	ldr	r1, [pc, #276]	@ (80014d8 <StartDefaultTask+0x12c>)
 80013c4:	2001      	movs	r0, #1
 80013c6:	f00c f863 	bl	800d490 <rmw_uros_set_custom_transport>

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 80013ca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00b ff7a 	bl	800d2c8 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80013d4:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <StartDefaultTask+0x130>)
 80013d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <StartDefaultTask+0x134>)
 80013dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 80013e0:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <StartDefaultTask+0x138>)
 80013e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 80013e6:	4b40      	ldr	r3, [pc, #256]	@ (80014e8 <StartDefaultTask+0x13c>)
 80013e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80013ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00b ff77 	bl	800d2e4 <rcutils_set_default_allocator>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8001402:	2196      	movs	r1, #150	@ 0x96
 8001404:	4839      	ldr	r0, [pc, #228]	@ (80014ec <StartDefaultTask+0x140>)
 8001406:	f016 faeb 	bl	80179e0 <iprintf>
	}

	// micro-ROS app
	allocator = rcl_get_default_allocator();
 800140a:	4c39      	ldr	r4, [pc, #228]	@ (80014f0 <StartDefaultTask+0x144>)
 800140c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001410:	4618      	mov	r0, r3
 8001412:	f00b ff85 	bl	800d320 <rcutils_get_default_allocator>
 8001416:	4625      	mov	r5, r4
 8001418:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 8001424:	f00a fe44 	bl	800c0b0 <rcl_get_zero_initialized_init_options>
 8001428:	4603      	mov	r3, r0
 800142a:	4a32      	ldr	r2, [pc, #200]	@ (80014f4 <StartDefaultTask+0x148>)
 800142c:	6013      	str	r3, [r2, #0]
	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800142e:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <StartDefaultTask+0x144>)
 8001430:	466c      	mov	r4, sp
 8001432:	f103 020c 	add.w	r2, r3, #12
 8001436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800143a:	e884 0003 	stmia.w	r4, {r0, r1}
 800143e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001440:	482c      	ldr	r0, [pc, #176]	@ (80014f4 <StartDefaultTask+0x148>)
 8001442:	f00a fe37 	bl	800c0b4 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 26)); //Set Domain ID
 8001446:	211a      	movs	r1, #26
 8001448:	482a      	ldr	r0, [pc, #168]	@ (80014f4 <StartDefaultTask+0x148>)
 800144a:	f00a ff2f 	bl	800c2ac <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(
 800144e:	4b28      	ldr	r3, [pc, #160]	@ (80014f0 <StartDefaultTask+0x144>)
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <StartDefaultTask+0x148>)
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	4827      	ldr	r0, [pc, #156]	@ (80014f8 <StartDefaultTask+0x14c>)
 800145a:	f00b fe59 	bl	800d110 <rclc_support_init_with_options>
			&init_options,
			&allocator
	);

	//Start up code for check enter
	CalibrateJoystickCenter();
 800145e:	f000 f91b 	bl	8001698 <CalibrateJoystickCenter>

	// create node
	rclc_node_init_default(
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <StartDefaultTask+0x14c>)
 8001464:	4a25      	ldr	r2, [pc, #148]	@ (80014fc <StartDefaultTask+0x150>)
 8001466:	4926      	ldr	r1, [pc, #152]	@ (8001500 <StartDefaultTask+0x154>)
 8001468:	4826      	ldr	r0, [pc, #152]	@ (8001504 <StartDefaultTask+0x158>)
 800146a:	f00b fe85 	bl	800d178 <rclc_node_init_default>
			"",
			&support
	); //Node name

	// create cmd_ve; publisher
	rclc_publisher_init_default(
 800146e:	f009 fb03 	bl	800aa78 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001472:	4602      	mov	r2, r0
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <StartDefaultTask+0x15c>)
 8001476:	4923      	ldr	r1, [pc, #140]	@ (8001504 <StartDefaultTask+0x158>)
 8001478:	4824      	ldr	r0, [pc, #144]	@ (800150c <StartDefaultTask+0x160>)
 800147a:	f00b feb9 	bl	800d1f0 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			"/cmd_vel"
	);

	// create Timer
	rclc_timer_init_default(
 800147e:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <StartDefaultTask+0x164>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <StartDefaultTask+0x168>)
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	491b      	ldr	r1, [pc, #108]	@ (80014f8 <StartDefaultTask+0x14c>)
 800148a:	4823      	ldr	r0, [pc, #140]	@ (8001518 <StartDefaultTask+0x16c>)
 800148c:	f00b fee4 	bl	800d258 <rclc_timer_init_default>
			RCL_MS_TO_NS(10),
			timer_callback
	);

	// create executer
	executor = rclc_executor_get_zero_initialized_executor();
 8001490:	4c22      	ldr	r4, [pc, #136]	@ (800151c <StartDefaultTask+0x170>)
 8001492:	463b      	mov	r3, r7
 8001494:	4618      	mov	r0, r3
 8001496:	f00b fb69 	bl	800cb6c <rclc_executor_get_zero_initialized_executor>
 800149a:	4620      	mov	r0, r4
 800149c:	463b      	mov	r3, r7
 800149e:	2288      	movs	r2, #136	@ 0x88
 80014a0:	4619      	mov	r1, r3
 80014a2:	f016 fc52 	bl	8017d4a <memcpy>
	rclc_executor_init(&executor, &support.context, 1, &allocator);
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <StartDefaultTask+0x144>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	4913      	ldr	r1, [pc, #76]	@ (80014f8 <StartDefaultTask+0x14c>)
 80014ac:	481b      	ldr	r0, [pc, #108]	@ (800151c <StartDefaultTask+0x170>)
 80014ae:	f00b fb67 	bl	800cb80 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 80014b2:	4919      	ldr	r1, [pc, #100]	@ (8001518 <StartDefaultTask+0x16c>)
 80014b4:	4819      	ldr	r0, [pc, #100]	@ (800151c <StartDefaultTask+0x170>)
 80014b6:	f00b fbd3 	bl	800cc60 <rclc_executor_add_timer>
	rclc_executor_spin(&executor); //ต้องเรียกก่อนถึงจะเริ่มทำงาน
 80014ba:	4818      	ldr	r0, [pc, #96]	@ (800151c <StartDefaultTask+0x170>)
 80014bc:	f00b fde6 	bl	800d08c <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f006 fe0f 	bl	80080e4 <osDelay>
 80014c6:	e7fb      	b.n	80014c0 <StartDefaultTask+0x114>
 80014c8:	08001205 	.word	0x08001205
 80014cc:	080011a1 	.word	0x080011a1
 80014d0:	08001181 	.word	0x08001181
 80014d4:	08001155 	.word	0x08001155
 80014d8:	20004990 	.word	0x20004990
 80014dc:	08001825 	.word	0x08001825
 80014e0:	08001869 	.word	0x08001869
 80014e4:	080018a1 	.word	0x080018a1
 80014e8:	0800190d 	.word	0x0800190d
 80014ec:	08018b1c 	.word	0x08018b1c
 80014f0:	200046b8 	.word	0x200046b8
 80014f4:	20004680 	.word	0x20004680
 80014f8:	20004684 	.word	0x20004684
 80014fc:	08018b44 	.word	0x08018b44
 8001500:	08018b48 	.word	0x08018b48
 8001504:	200046cc 	.word	0x200046cc
 8001508:	08018b54 	.word	0x08018b54
 800150c:	20004760 	.word	0x20004760
 8001510:	08001389 	.word	0x08001389
 8001514:	00989680 	.word	0x00989680
 8001518:	20004798 	.word	0x20004798
 800151c:	200046d8 	.word	0x200046d8

08001520 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001524:	f000 fde3 	bl	80020ee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001528:	f000 f81e 	bl	8001568 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800152c:	f7ff febe 	bl	80012ac <MX_GPIO_Init>
	MX_DMA_Init();
 8001530:	f7ff fdd6 	bl	80010e0 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8001534:	f000 fcaa 	bl	8001e8c <MX_LPUART1_UART_Init>
	MX_ADC1_Init();
 8001538:	f7ff fa5e 	bl	80009f8 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	/* Start Analog Read */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800153c:	217f      	movs	r1, #127	@ 0x7f
 800153e:	4808      	ldr	r0, [pc, #32]	@ (8001560 <main+0x40>)
 8001540:	f002 fba6 	bl	8003c90 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 8001544:	22c8      	movs	r2, #200	@ 0xc8
 8001546:	4907      	ldr	r1, [pc, #28]	@ (8001564 <main+0x44>)
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <main+0x40>)
 800154a:	f001 fa29 	bl	80029a0 <HAL_ADC_Start_DMA>
	/* End Analog Read */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800154e:	f006 fced 	bl	8007f2c <osKernelInitialize>

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8001552:	f7ff fb63 	bl	8000c1c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001556:	f006 fd0d 	bl	8007f74 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800155a:	bf00      	nop
 800155c:	e7fd      	b.n	800155a <main+0x3a>
 800155e:	bf00      	nop
 8001560:	20000254 	.word	0x20000254
 8001564:	2000479c 	.word	0x2000479c

08001568 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	@ 0x50
 800156c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2238      	movs	r2, #56	@ 0x38
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f016 fb1e 	bl	8017bb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800158a:	2000      	movs	r0, #0
 800158c:	f003 faf8 	bl	8004b80 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159a:	2340      	movs	r3, #64	@ 0x40
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a2:	2302      	movs	r3, #2
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015a6:	2304      	movs	r3, #4
 80015a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80015aa:	2355      	movs	r3, #85	@ 0x55
 80015ac:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fb92 	bl	8004ce8 <HAL_RCC_OscConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0x66>
		Error_Handler();
 80015ca:	f000 f925 	bl	8001818 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015ce:	230f      	movs	r3, #15
 80015d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d2:	2303      	movs	r3, #3
 80015d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2104      	movs	r1, #4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fe90 	bl	800530c <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x8e>
		Error_Handler();
 80015f2:	f000 f911 	bl	8001818 <Error_Handler>
	}
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	@ 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <ReadADC_AVERAGE>:

/* USER CODE BEGIN 4 */

void ReadADC_AVERAGE() {
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	e020      	b.n	8001656 <ReadADC_AVERAGE+0x56>
		if (i % 2 == 0) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d108      	bne.n	8001630 <ReadADC_AVERAGE+0x30>
			temp_1 += ADC_RawRead[i];
 800161e:	4a1a      	ldr	r2, [pc, #104]	@ (8001688 <ReadADC_AVERAGE+0x88>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e00f      	b.n	8001650 <ReadADC_AVERAGE+0x50>
		} else if (i % 2 == 1) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	bfb8      	it	lt
 800163a:	425b      	neglt	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d107      	bne.n	8001650 <ReadADC_AVERAGE+0x50>
			temp_2 += ADC_RawRead[i];
 8001640:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <ReadADC_AVERAGE+0x88>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001648:	461a      	mov	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2bc7      	cmp	r3, #199	@ 0xc7
 800165a:	dddb      	ble.n	8001614 <ReadADC_AVERAGE+0x14>
		}
	}
	x_axis = (temp_1 / 100);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <ReadADC_AVERAGE+0x8c>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <ReadADC_AVERAGE+0x90>)
 800166a:	801a      	strh	r2, [r3, #0]
	y_axis = (temp_2 / 100);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4a07      	ldr	r2, [pc, #28]	@ (800168c <ReadADC_AVERAGE+0x8c>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	095b      	lsrs	r3, r3, #5
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <ReadADC_AVERAGE+0x94>)
 800167a:	801a      	strh	r2, [r3, #0]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	2000479c 	.word	0x2000479c
 800168c:	51eb851f 	.word	0x51eb851f
 8001690:	2000492c 	.word	0x2000492c
 8001694:	2000492e 	.word	0x2000492e

08001698 <CalibrateJoystickCenter>:

void CalibrateJoystickCenter() {
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	e020      	b.n	80016ee <CalibrateJoystickCenter+0x56>
		if (i % 2 == 0) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d108      	bne.n	80016c8 <CalibrateJoystickCenter+0x30>
			temp_1 += ADC_RawRead[i];
 80016b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <CalibrateJoystickCenter+0x88>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	e00f      	b.n	80016e8 <CalibrateJoystickCenter+0x50>
		} else if (i % 2 == 1) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	bfb8      	it	lt
 80016d2:	425b      	neglt	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <CalibrateJoystickCenter+0x50>
			temp_2 += ADC_RawRead[i];
 80016d8:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <CalibrateJoystickCenter+0x88>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4413      	add	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80016f2:	dddb      	ble.n	80016ac <CalibrateJoystickCenter+0x14>
		}
	}
	center_x = (temp_1 / 100);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <CalibrateJoystickCenter+0x8c>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <CalibrateJoystickCenter+0x90>)
 8001702:	801a      	strh	r2, [r3, #0]
	center_y = (temp_2 / 100);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <CalibrateJoystickCenter+0x8c>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	095b      	lsrs	r3, r3, #5
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <CalibrateJoystickCenter+0x94>)
 8001712:	801a      	strh	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	2000479c 	.word	0x2000479c
 8001724:	51eb851f 	.word	0x51eb851f
 8001728:	20004930 	.word	0x20004930
 800172c:	20004932 	.word	0x20004932

08001730 <SentCMDVEL>:

void SentCMDVEL(){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	float linear_velocity = (y_axis - 2048) / 2048.0f;  // Normalize -1.0 to 1.0
 8001736:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <SentCMDVEL+0xa8>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80017dc <SentCMDVEL+0xac>
 800174a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174e:	edc7 7a01 	vstr	s15, [r7, #4]
	float angular_velocity = (x_axis - 2048) / 2048.0f; // Normalize -1.0 to 1.0
 8001752:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <SentCMDVEL+0xb0>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001762:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80017dc <SentCMDVEL+0xac>
 8001766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176a:	edc7 7a00 	vstr	s15, [r7]

	if (fabs(linear_velocity) < 0.025f) {
 800176e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001772:	eef0 7ae7 	vabs.f32	s15, s15
 8001776:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80017e4 <SentCMDVEL+0xb4>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d502      	bpl.n	800178a <SentCMDVEL+0x5a>
		linear_velocity = 0.0f;
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
	}

	if (fabs(angular_velocity) < 0.015f) {
 800178a:	edd7 7a00 	vldr	s15, [r7]
 800178e:	eef0 7ae7 	vabs.f32	s15, s15
 8001792:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80017e8 <SentCMDVEL+0xb8>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d502      	bpl.n	80017a6 <SentCMDVEL+0x76>
		angular_velocity = 0.0f;
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
	}

	twist_msg.linear.x = linear_velocity;  // Adjust MAX_LINEAR_SPEED as needed
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe ff06 	bl	80005b8 <__aeabi_f2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	490e      	ldr	r1, [pc, #56]	@ (80017ec <SentCMDVEL+0xbc>)
 80017b2:	e9c1 2300 	strd	r2, r3, [r1]
	twist_msg.angular.z = angular_velocity;  // Adjust MAX_ANGULAR_SPEED as needed
 80017b6:	6838      	ldr	r0, [r7, #0]
 80017b8:	f7fe fefe 	bl	80005b8 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	490a      	ldr	r1, [pc, #40]	@ (80017ec <SentCMDVEL+0xbc>)
 80017c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &twist_msg, NULL));
 80017c6:	2200      	movs	r2, #0
 80017c8:	4908      	ldr	r1, [pc, #32]	@ (80017ec <SentCMDVEL+0xbc>)
 80017ca:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <SentCMDVEL+0xc0>)
 80017cc:	f00a fe40 	bl	800c450 <rcl_publish>

}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000492e 	.word	0x2000492e
 80017dc:	45000000 	.word	0x45000000
 80017e0:	2000492c 	.word	0x2000492c
 80017e4:	3ccccccd 	.word	0x3ccccccd
 80017e8:	3c75c28f 	.word	0x3c75c28f
 80017ec:	20004768 	.word	0x20004768
 80017f0:	20004760 	.word	0x20004760

080017f4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001806:	f000 fc8b 	bl	8002120 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40012c00 	.word	0x40012c00

08001818 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <Error_Handler+0x8>

08001824 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <microros_allocate+0x3c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <microros_allocate+0x3c>)
 800183c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <microros_allocate+0x40>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <microros_allocate+0x40>)
 800184c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff f9f6 	bl	8000c40 <pvPortMallocMicroROS>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20004934 	.word	0x20004934
 8001864:	20004938 	.word	0x20004938

08001868 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00c      	beq.n	8001892 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fb05 	bl	8000e88 <getBlockSize>
 800187e:	4603      	mov	r3, r0
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <microros_deallocate+0x34>)
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	461a      	mov	r2, r3
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <microros_deallocate+0x34>)
 800188a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fa9f 	bl	8000dd0 <vPortFreeMicroROS>
  }
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20004938 	.word	0x20004938

080018a0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <microros_reallocate+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4413      	add	r3, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <microros_reallocate+0x64>)
 80018ba:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <microros_reallocate+0x68>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <microros_reallocate+0x68>)
 80018ca:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d104      	bne.n	80018dc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80018d2:	68b8      	ldr	r0, [r7, #8]
 80018d4:	f7ff f9b4 	bl	8000c40 <pvPortMallocMicroROS>
 80018d8:	4603      	mov	r3, r0
 80018da:	e00e      	b.n	80018fa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff fad3 	bl	8000e88 <getBlockSize>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a08      	ldr	r2, [pc, #32]	@ (8001908 <microros_reallocate+0x68>)
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <microros_reallocate+0x68>)
 80018ee:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff fae6 	bl	8000ec4 <pvPortReallocMicroROS>
 80018f8:	4603      	mov	r3, r0
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20004934 	.word	0x20004934
 8001908:	20004938 	.word	0x20004938

0800190c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	4a0c      	ldr	r2, [pc, #48]	@ (8001954 <microros_zero_allocate+0x48>)
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	4413      	add	r3, r2
 8001926:	461a      	mov	r2, r3
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <microros_zero_allocate+0x48>)
 800192a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	4a08      	ldr	r2, [pc, #32]	@ (8001958 <microros_zero_allocate+0x4c>)
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	4413      	add	r3, r2
 800193a:	461a      	mov	r2, r3
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <microros_zero_allocate+0x4c>)
 800193e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff faeb 	bl	8000f1e <pvPortCallocMicroROS>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20004934 	.word	0x20004934
 8001958:	20004938 	.word	0x20004938
 800195c:	00000000 	.word	0x00000000

08001960 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001976:	a320      	add	r3, pc, #128	@ (adr r3, 80019f8 <UTILS_NanosecondsToTimespec+0x98>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fe74 	bl	8000668 <__aeabi_ldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800198a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800198e:	a31a      	add	r3, pc, #104	@ (adr r3, 80019f8 <UTILS_NanosecondsToTimespec+0x98>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fe68 	bl	8000668 <__aeabi_ldivmod>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da20      	bge.n	80019e6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <UTILS_NanosecondsToTimespec+0x90>)
 80019aa:	fb82 1203 	smull	r1, r2, r2, r3
 80019ae:	1712      	asrs	r2, r2, #28
 80019b0:	17db      	asrs	r3, r3, #31
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	6979      	ldr	r1, [r7, #20]
 80019c0:	17c8      	asrs	r0, r1, #31
 80019c2:	460c      	mov	r4, r1
 80019c4:	4605      	mov	r5, r0
 80019c6:	ebb2 0804 	subs.w	r8, r2, r4
 80019ca:	eb63 0905 	sbc.w	r9, r3, r5
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	4906      	ldr	r1, [pc, #24]	@ (80019f4 <UTILS_NanosecondsToTimespec+0x94>)
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	441a      	add	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
    }
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019f0:	44b82fa1 	.word	0x44b82fa1
 80019f4:	3b9aca00 	.word	0x3b9aca00
 80019f8:	3b9aca00 	.word	0x3b9aca00
 80019fc:	00000000 	.word	0x00000000

08001a00 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	b08e      	sub	sp, #56	@ 0x38
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6278      	str	r0, [r7, #36]	@ 0x24
 8001a0a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001a0c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001a10:	2300      	movs	r3, #0
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001a22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a26:	4618      	mov	r0, r3
 8001a28:	f007 fe28 	bl	800967c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2e:	17da      	asrs	r2, r3, #31
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	61fa      	str	r2, [r7, #28]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	69b9      	ldr	r1, [r7, #24]
 8001a3e:	000b      	movs	r3, r1
 8001a40:	2200      	movs	r2, #0
 8001a42:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	461c      	mov	r4, r3
 8001a4c:	4615      	mov	r5, r2
 8001a4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a52:	1911      	adds	r1, r2, r4
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	416b      	adcs	r3, r5
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a5e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001a62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	f04f 0400 	mov.w	r4, #0
 8001a6e:	f04f 0500 	mov.w	r5, #0
 8001a72:	015d      	lsls	r5, r3, #5
 8001a74:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001a78:	0154      	lsls	r4, r2, #5
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	ebb2 0800 	subs.w	r8, r2, r0
 8001a82:	eb63 0901 	sbc.w	r9, r3, r1
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001a92:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001a96:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001a9a:	4690      	mov	r8, r2
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	eb18 0a00 	adds.w	sl, r8, r0
 8001aa2:	eb49 0b01 	adc.w	fp, r9, r1
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aba:	ebb2 040a 	subs.w	r4, r2, sl
 8001abe:	603c      	str	r4, [r7, #0]
 8001ac0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aca:	4623      	mov	r3, r4
 8001acc:	181b      	adds	r3, r3, r0
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	eb41 0303 	adc.w	r3, r1, r3
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ade:	f7ff ff3f 	bl	8001960 <UTILS_NanosecondsToTimespec>

    return 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3738      	adds	r7, #56	@ 0x38
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_MspInit+0x50>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_MspInit+0x50>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_MspInit+0x50>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_MspInit+0x50>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	4a0b      	ldr	r2, [pc, #44]	@ (8001b40 <HAL_MspInit+0x50>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_MspInit+0x50>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	210f      	movs	r1, #15
 8001b2a:	f06f 0001 	mvn.w	r0, #1
 8001b2e:	f002 fb03 	bl	8004138 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b32:	f003 f8c9 	bl	8004cc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	@ 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b54:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <HAL_InitTick+0xc4>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b58:	4a2b      	ldr	r2, [pc, #172]	@ (8001c08 <HAL_InitTick+0xc4>)
 8001b5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b60:	4b29      	ldr	r3, [pc, #164]	@ (8001c08 <HAL_InitTick+0xc4>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fd9e 	bl	80056b8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b7c:	f003 fd86 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 8001b80:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b84:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <HAL_InitTick+0xc8>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <HAL_InitTick+0xcc>)
 8001b92:	4a20      	ldr	r2, [pc, #128]	@ (8001c14 <HAL_InitTick+0xd0>)
 8001b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <HAL_InitTick+0xcc>)
 8001b98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c10 <HAL_InitTick+0xcc>)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <HAL_InitTick+0xcc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_InitTick+0xcc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001bb0:	4817      	ldr	r0, [pc, #92]	@ (8001c10 <HAL_InitTick+0xcc>)
 8001bb2:	f004 f847 	bl	8005c44 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d11b      	bne.n	8001bfc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bc4:	4812      	ldr	r0, [pc, #72]	@ (8001c10 <HAL_InitTick+0xcc>)
 8001bc6:	f004 f89f 	bl	8005d08 <HAL_TIM_Base_Start_IT>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f002 fac7 	bl	800416c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d808      	bhi.n	8001bf6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	2019      	movs	r0, #25
 8001bea:	f002 faa5 	bl	8004138 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <HAL_InitTick+0xd4>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e002      	b.n	8001bfc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3730      	adds	r7, #48	@ 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	2000493c 	.word	0x2000493c
 8001c14:	40012c00 	.word	0x40012c00
 8001c18:	20000008 	.word	0x20000008

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <DMA1_Channel1_IRQHandler+0x10>)
 8001c5a:	f002 fc78 	bl	800454e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20004a24 	.word	0x20004a24

08001c68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <DMA1_Channel2_IRQHandler+0x10>)
 8001c6e:	f002 fc6e 	bl	800454e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20004a84 	.word	0x20004a84

08001c7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <DMA1_Channel3_IRQHandler+0x10>)
 8001c82:	f002 fc64 	bl	800454e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002c0 	.word	0x200002c0

08001c90 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <ADC1_2_IRQHandler+0x10>)
 8001c96:	f000 ff57 	bl	8002b48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000254 	.word	0x20000254

08001ca4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001caa:	f004 f8a5 	bl	8005df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000493c 	.word	0x2000493c

08001cb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cc0:	f002 ff3a 	bl	8004b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <LPUART1_IRQHandler+0x10>)
 8001cce:	f004 fcb7 	bl	8006640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20004990 	.word	0x20004990

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_kill>:

int _kill(int pid, int sig)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf6:	f015 fff3 	bl	8017ce0 <__errno>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2216      	movs	r2, #22
 8001cfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_exit>:

void _exit (int status)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffe7 	bl	8001cec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1e:	bf00      	nop
 8001d20:	e7fd      	b.n	8001d1e <_exit+0x12>

08001d22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e00a      	b.n	8001d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d34:	f3af 8000 	nop.w
 8001d38:	4601      	mov	r1, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	60ba      	str	r2, [r7, #8]
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf0      	blt.n	8001d34 <_read+0x12>
  }

  return len;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e009      	b.n	8001d82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	60ba      	str	r2, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dbf1      	blt.n	8001d6e <_write+0x12>
  }
  return len;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_close>:

int _close(int file)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_isatty>:

int _isatty(int file)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e04:	4a14      	ldr	r2, [pc, #80]	@ (8001e58 <_sbrk+0x5c>)
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <_sbrk+0x60>)
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e10:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <_sbrk+0x64>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <_sbrk+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e2c:	f015 ff58 	bl	8017ce0 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20020000 	.word	0x20020000
 8001e5c:	00000400 	.word	0x00000400
 8001e60:	2000498c 	.word	0x2000498c
 8001e64:	2000b090 	.word	0x2000b090

08001e68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <SystemInit+0x20>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <SystemInit+0x20>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001e92:	4a22      	ldr	r2, [pc, #136]	@ (8001f1c <MX_LPUART1_UART_Init+0x90>)
 8001e94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001e96:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ece:	4812      	ldr	r0, [pc, #72]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001ed0:	f004 fa04 	bl	80062dc <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001eda:	f7ff fc9d 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001ee2:	f005 ff14 	bl	8007d0e <HAL_UARTEx_SetTxFifoThreshold>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001eec:	f7ff fc94 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4809      	ldr	r0, [pc, #36]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001ef4:	f005 ff49 	bl	8007d8a <HAL_UARTEx_SetRxFifoThreshold>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001efe:	f7ff fc8b 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_LPUART1_UART_Init+0x8c>)
 8001f04:	f005 feca 	bl	8007c9c <HAL_UARTEx_DisableFifoMode>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f0e:	f7ff fc83 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20004990 	.word	0x20004990
 8001f1c:	40008000 	.word	0x40008000

08001f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09e      	sub	sp, #120	@ 0x78
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2254      	movs	r2, #84	@ 0x54
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f015 fe39 	bl	8017bb8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8002084 <HAL_UART_MspInit+0x164>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 8094 	bne.w	800207a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f52:	2320      	movs	r3, #32
 8001f54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fc22 	bl	80057a8 <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f6a:	f7ff fc55 	bl	8001818 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f6e:	4b46      	ldr	r3, [pc, #280]	@ (8002088 <HAL_UART_MspInit+0x168>)
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	4a45      	ldr	r2, [pc, #276]	@ (8002088 <HAL_UART_MspInit+0x168>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f7a:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_UART_MspInit+0x168>)
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b40      	ldr	r3, [pc, #256]	@ (8002088 <HAL_UART_MspInit+0x168>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002088 <HAL_UART_MspInit+0x168>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f92:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_UART_MspInit+0x168>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001fae:	230c      	movs	r3, #12
 8001fb0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fbc:	f002 fc22 	bl	8004804 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001fc0:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fc2:	4a33      	ldr	r2, [pc, #204]	@ (8002090 <HAL_UART_MspInit+0x170>)
 8001fc4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001fc6:	4b31      	ldr	r3, [pc, #196]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fc8:	2222      	movs	r2, #34	@ 0x22
 8001fca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fde:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe4:	4b29      	ldr	r3, [pc, #164]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001fec:	2220      	movs	r2, #32
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ff0:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001ff2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001ff6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001ff8:	4824      	ldr	r0, [pc, #144]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8001ffa:	f002 f8c5 	bl	8004188 <HAL_DMA_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002004:	f7ff fc08 	bl	8001818 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a20      	ldr	r2, [pc, #128]	@ (800208c <HAL_UART_MspInit+0x16c>)
 800200c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002010:	4a1e      	ldr	r2, [pc, #120]	@ (800208c <HAL_UART_MspInit+0x16c>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002016:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002018:	4a1f      	ldr	r2, [pc, #124]	@ (8002098 <HAL_UART_MspInit+0x178>)
 800201a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800201c:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <HAL_UART_MspInit+0x174>)
 800201e:	2223      	movs	r2, #35	@ 0x23
 8002020:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002022:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002024:	2210      	movs	r2, #16
 8002026:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002028:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <HAL_UART_MspInit+0x174>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800202e:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002030:	2280      	movs	r2, #128	@ 0x80
 8002032:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <HAL_UART_MspInit+0x174>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002048:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800204c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800204e:	4811      	ldr	r0, [pc, #68]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002050:	f002 f89a 	bl	8004188 <HAL_DMA_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800205a:	f7ff fbdd 	bl	8001818 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002062:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002064:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <HAL_UART_MspInit+0x174>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2105      	movs	r1, #5
 800206e:	205b      	movs	r0, #91	@ 0x5b
 8002070:	f002 f862 	bl	8004138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002074:	205b      	movs	r0, #91	@ 0x5b
 8002076:	f002 f879 	bl	800416c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800207a:	bf00      	nop
 800207c:	3778      	adds	r7, #120	@ 0x78
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40008000 	.word	0x40008000
 8002088:	40021000 	.word	0x40021000
 800208c:	20004a24 	.word	0x20004a24
 8002090:	40020008 	.word	0x40020008
 8002094:	20004a84 	.word	0x20004a84
 8002098:	4002001c 	.word	0x4002001c

0800209c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800209c:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800209e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a0:	f7ff fee2 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopForever+0xe>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopForever+0x16>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f015 fe0f 	bl	8017cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ce:	f7ff fa27 	bl	8001520 <main>

080020d2 <LoopForever>:

LoopForever:
    b LoopForever
 80020d2:	e7fe      	b.n	80020d2 <LoopForever>
  ldr   r0, =_estack
 80020d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80020e0:	080198dc 	.word	0x080198dc
  ldr r2, =_sbss
 80020e4:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80020e8:	2000b090 	.word	0x2000b090

080020ec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC3_IRQHandler>

080020ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f002 f812 	bl	8004122 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fe:	200f      	movs	r0, #15
 8002100:	f7ff fd20 	bl	8001b44 <HAL_InitTick>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	e001      	b.n	8002114 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002110:	f7ff fcee 	bl	8001af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002114:	79fb      	ldrb	r3, [r7, #7]

}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_IncTick+0x1c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <HAL_IncTick+0x20>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4413      	add	r3, r2
 800212e:	4a03      	ldr	r2, [pc, #12]	@ (800213c <HAL_IncTick+0x1c>)
 8002130:	6013      	str	r3, [r2, #0]
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	20004ae4 	.word	0x20004ae4
 8002140:	2000000c 	.word	0x2000000c

08002144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return uwTick;
 8002148:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <HAL_GetTick+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20004ae4 	.word	0x20004ae4

0800215c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	609a      	str	r2, [r3, #8]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3360      	adds	r3, #96	@ 0x60
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <LL_ADC_SetOffset+0x44>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021fc:	bf00      	nop
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	03fff000 	.word	0x03fff000

0800220c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3360      	adds	r3, #96	@ 0x60
 800221a:	461a      	mov	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3360      	adds	r3, #96	@ 0x60
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	431a      	orrs	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800226e:	b480      	push	{r7}
 8002270:	b087      	sub	sp, #28
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3360      	adds	r3, #96	@ 0x60
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	431a      	orrs	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3360      	adds	r3, #96	@ 0x60
 80022b4:	461a      	mov	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	615a      	str	r2, [r3, #20]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002326:	b480      	push	{r7}
 8002328:	b087      	sub	sp, #28
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3330      	adds	r3, #48	@ 0x30
 8002336:	461a      	mov	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	4413      	add	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	211f      	movs	r1, #31
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	f003 011f 	and.w	r1, r3, #31
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	431a      	orrs	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3314      	adds	r3, #20
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	0e5b      	lsrs	r3, r3, #25
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	4413      	add	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	0d1b      	lsrs	r3, r3, #20
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2107      	movs	r1, #7
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	401a      	ands	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	0d1b      	lsrs	r3, r3, #20
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	43db      	mvns	r3, r3
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0318 	and.w	r3, r3, #24
 800241e:	4908      	ldr	r1, [pc, #32]	@ (8002440 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002420:	40d9      	lsrs	r1, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	400b      	ands	r3, r1
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	431a      	orrs	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	0007ffff 	.word	0x0007ffff

08002444 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 031f 	and.w	r3, r3, #31
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800248c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6093      	str	r3, [r2, #8]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024b4:	d101      	bne.n	80024ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002504:	d101      	bne.n	800250a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002528:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002550:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002554:	f043 0202 	orr.w	r2, r3, #2
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <LL_ADC_IsEnabled+0x18>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <LL_ADC_IsEnabled+0x1a>
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d101      	bne.n	80025a6 <LL_ADC_IsDisableOngoing+0x18>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LL_ADC_IsDisableOngoing+0x1a>
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d101      	bne.n	80025f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b08      	cmp	r3, #8
 8002614:	d101      	bne.n	800261a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e1a9      	b.n	8002996 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe fa59 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff19 	bl	80024a0 <LL_ADC_IsDeepPowerDownEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff feff 	bl	800247c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff34 	bl	80024f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d115      	bne.n	80026ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff18 	bl	80024c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002698:	4b9c      	ldr	r3, [pc, #624]	@ (800290c <HAL_ADC_Init+0x2e4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	4a9c      	ldr	r2, [pc, #624]	@ (8002910 <HAL_ADC_Init+0x2e8>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff16 	bl	80024f0 <LL_ADC_IsInternalRegulatorEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10d      	bne.n	80026e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff76 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 80026f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 8142 	bne.w	8002984 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 813e 	bne.w	8002984 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002710:	f043 0202 	orr.w	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff23 	bl	8002568 <LL_ADC_IsEnabled>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d141      	bne.n	80027ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002730:	d004      	beq.n	800273c <HAL_ADC_Init+0x114>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a77      	ldr	r2, [pc, #476]	@ (8002914 <HAL_ADC_Init+0x2ec>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10f      	bne.n	800275c <HAL_ADC_Init+0x134>
 800273c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002740:	f7ff ff12 	bl	8002568 <LL_ADC_IsEnabled>
 8002744:	4604      	mov	r4, r0
 8002746:	4873      	ldr	r0, [pc, #460]	@ (8002914 <HAL_ADC_Init+0x2ec>)
 8002748:	f7ff ff0e 	bl	8002568 <LL_ADC_IsEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	4323      	orrs	r3, r4
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e012      	b.n	8002782 <HAL_ADC_Init+0x15a>
 800275c:	486e      	ldr	r0, [pc, #440]	@ (8002918 <HAL_ADC_Init+0x2f0>)
 800275e:	f7ff ff03 	bl	8002568 <LL_ADC_IsEnabled>
 8002762:	4604      	mov	r4, r0
 8002764:	486d      	ldr	r0, [pc, #436]	@ (800291c <HAL_ADC_Init+0x2f4>)
 8002766:	f7ff feff 	bl	8002568 <LL_ADC_IsEnabled>
 800276a:	4603      	mov	r3, r0
 800276c:	431c      	orrs	r4, r3
 800276e:	486c      	ldr	r0, [pc, #432]	@ (8002920 <HAL_ADC_Init+0x2f8>)
 8002770:	f7ff fefa 	bl	8002568 <LL_ADC_IsEnabled>
 8002774:	4603      	mov	r3, r0
 8002776:	4323      	orrs	r3, r4
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800278e:	d004      	beq.n	800279a <HAL_ADC_Init+0x172>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5f      	ldr	r2, [pc, #380]	@ (8002914 <HAL_ADC_Init+0x2ec>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_ADC_Init+0x176>
 800279a:	4a62      	ldr	r2, [pc, #392]	@ (8002924 <HAL_ADC_Init+0x2fc>)
 800279c:	e000      	b.n	80027a0 <HAL_ADC_Init+0x178>
 800279e:	4a62      	ldr	r2, [pc, #392]	@ (8002928 <HAL_ADC_Init+0x300>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f7ff fcd8 	bl	800215c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7f5b      	ldrb	r3, [r3, #29]
 80027b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d106      	bne.n	80027e8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	045b      	lsls	r3, r3, #17
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	4b48      	ldr	r3, [pc, #288]	@ (800292c <HAL_ADC_Init+0x304>)
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	430b      	orrs	r3, r1
 8002816:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fee5 	bl	8002602 <LL_ADC_INJ_IsConversionOngoing>
 8002838:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d17f      	bne.n	8002940 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d17c      	bne.n	8002940 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800284a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002852:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002862:	f023 0302 	bic.w	r3, r3, #2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	430b      	orrs	r3, r1
 800286e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002886:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002890:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6911      	ldr	r1, [r2, #16]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80028a6:	e013      	b.n	80028d0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12a      	bne.n	8002930 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028f0:	4311      	orrs	r1, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028fc:	430a      	orrs	r2, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	e019      	b.n	8002940 <HAL_ADC_Init+0x318>
 800290c:	20000004 	.word	0x20000004
 8002910:	053e2d63 	.word	0x053e2d63
 8002914:	50000100 	.word	0x50000100
 8002918:	50000400 	.word	0x50000400
 800291c:	50000500 	.word	0x50000500
 8002920:	50000600 	.word	0x50000600
 8002924:	50000300 	.word	0x50000300
 8002928:	50000700 	.word	0x50000700
 800292c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10c      	bne.n	8002962 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f023 010f 	bic.w	r1, r3, #15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002960:	e007      	b.n	8002972 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 020f 	bic.w	r2, r2, #15
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002982:	e007      	b.n	8002994 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002994:	7ffb      	ldrb	r3, [r7, #31]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	bf00      	nop

080029a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029b4:	d004      	beq.n	80029c0 <HAL_ADC_Start_DMA+0x20>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002b24 <HAL_ADC_Start_DMA+0x184>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_Start_DMA+0x24>
 80029c0:	4b59      	ldr	r3, [pc, #356]	@ (8002b28 <HAL_ADC_Start_DMA+0x188>)
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_Start_DMA+0x26>
 80029c4:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_ADC_Start_DMA+0x18c>)
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fd3c 	bl	8002444 <LL_ADC_GetMultimode>
 80029cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe02 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 809b 	bne.w	8002b16 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_Start_DMA+0x4e>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e096      	b.n	8002b1c <HAL_ADC_Start_DMA+0x17c>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002b30 <HAL_ADC_Start_DMA+0x190>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d008      	beq.n	8002a12 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d002      	beq.n	8002a12 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b09      	cmp	r3, #9
 8002a10:	d17a      	bne.n	8002b08 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 ff60 	bl	80038d8 <ADC_Enable>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d16d      	bne.n	8002afe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b24 <HAL_ADC_Start_DMA+0x184>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_ADC_Start_DMA+0xb4>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3b      	ldr	r2, [pc, #236]	@ (8002b34 <HAL_ADC_Start_DMA+0x194>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d002      	beq.n	8002a50 <HAL_ADC_Start_DMA+0xb0>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_Start_DMA+0xb8>
 8002a50:	4b39      	ldr	r3, [pc, #228]	@ (8002b38 <HAL_ADC_Start_DMA+0x198>)
 8002a52:	e001      	b.n	8002a58 <HAL_ADC_Start_DMA+0xb8>
 8002a54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d002      	beq.n	8002a66 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	f023 0206 	bic.w	r2, r3, #6
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a8a:	e002      	b.n	8002a92 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	4a29      	ldr	r2, [pc, #164]	@ (8002b3c <HAL_ADC_Start_DMA+0x19c>)
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	4a28      	ldr	r2, [pc, #160]	@ (8002b40 <HAL_ADC_Start_DMA+0x1a0>)
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	4a27      	ldr	r2, [pc, #156]	@ (8002b44 <HAL_ADC_Start_DMA+0x1a4>)
 8002aa8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	221c      	movs	r2, #28
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0210 	orr.w	r2, r2, #16
 8002ac8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3340      	adds	r3, #64	@ 0x40
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f001 fbf5 	bl	80042d8 <HAL_DMA_Start_IT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fd5c 	bl	80025b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002afc:	e00d      	b.n	8002b1a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002b06:	e008      	b.n	8002b1a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b14:	e001      	b.n	8002b1a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
 8002b18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	50000100 	.word	0x50000100
 8002b28:	50000300 	.word	0x50000300
 8002b2c:	50000700 	.word	0x50000700
 8002b30:	50000600 	.word	0x50000600
 8002b34:	50000500 	.word	0x50000500
 8002b38:	50000400 	.word	0x50000400
 8002b3c:	08003ac3 	.word	0x08003ac3
 8002b40:	08003b9b 	.word	0x08003b9b
 8002b44:	08003bb7 	.word	0x08003bb7

08002b48 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b6c:	d004      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x30>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a8e      	ldr	r2, [pc, #568]	@ (8002dac <HAL_ADC_IRQHandler+0x264>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_IRQHandler+0x34>
 8002b78:	4b8d      	ldr	r3, [pc, #564]	@ (8002db0 <HAL_ADC_IRQHandler+0x268>)
 8002b7a:	e000      	b.n	8002b7e <HAL_ADC_IRQHandler+0x36>
 8002b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8002db4 <HAL_ADC_IRQHandler+0x26c>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fc60 	bl	8002444 <LL_ADC_GetMultimode>
 8002b84:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d017      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x78>
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d012      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d105      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f001 f8f6 	bl	8003da4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x8c>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8094 	beq.w	8002d08 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 808e 	beq.w	8002d08 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fb79 	bl	8002300 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d072      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a64      	ldr	r2, [pc, #400]	@ (8002dac <HAL_ADC_IRQHandler+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_ADC_IRQHandler+0xea>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a65      	ldr	r2, [pc, #404]	@ (8002db8 <HAL_ADC_IRQHandler+0x270>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d002      	beq.n	8002c2e <HAL_ADC_IRQHandler+0xe6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	e003      	b.n	8002c36 <HAL_ADC_IRQHandler+0xee>
 8002c2e:	4b63      	ldr	r3, [pc, #396]	@ (8002dbc <HAL_ADC_IRQHandler+0x274>)
 8002c30:	e001      	b.n	8002c36 <HAL_ADC_IRQHandler+0xee>
 8002c32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d008      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d002      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d104      	bne.n	8002c5a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	623b      	str	r3, [r7, #32]
 8002c58:	e014      	b.n	8002c84 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a53      	ldr	r2, [pc, #332]	@ (8002dac <HAL_ADC_IRQHandler+0x264>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_ADC_IRQHandler+0x130>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a53      	ldr	r2, [pc, #332]	@ (8002db8 <HAL_ADC_IRQHandler+0x270>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d002      	beq.n	8002c74 <HAL_ADC_IRQHandler+0x12c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	e003      	b.n	8002c7c <HAL_ADC_IRQHandler+0x134>
 8002c74:	4b51      	ldr	r3, [pc, #324]	@ (8002dbc <HAL_ADC_IRQHandler+0x274>)
 8002c76:	e001      	b.n	8002c7c <HAL_ADC_IRQHandler+0x134>
 8002c78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c7c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d135      	bne.n	8002cfa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d12e      	bne.n	8002cfa <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fc9b 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11a      	bne.n	8002ce2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 020c 	bic.w	r2, r2, #12
 8002cba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d112      	bne.n	8002cfa <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ce0:	e00b      	b.n	8002cfa <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f984 	bl	8003008 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	220c      	movs	r2, #12
 8002d06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_ADC_IRQHandler+0x1d4>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80b3 	beq.w	8002e8e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80ad 	beq.w	8002e8e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fb14 	bl	800237e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d56:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff facf 	bl	8002300 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d62:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <HAL_ADC_IRQHandler+0x264>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x23a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a11      	ldr	r2, [pc, #68]	@ (8002db8 <HAL_ADC_IRQHandler+0x270>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d002      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x236>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	e003      	b.n	8002d86 <HAL_ADC_IRQHandler+0x23e>
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dbc <HAL_ADC_IRQHandler+0x274>)
 8002d80:	e001      	b.n	8002d86 <HAL_ADC_IRQHandler+0x23e>
 8002d82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d008      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d002      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b07      	cmp	r3, #7
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	e01f      	b.n	8002dea <HAL_ADC_IRQHandler+0x2a2>
 8002daa:	bf00      	nop
 8002dac:	50000100 	.word	0x50000100
 8002db0:	50000300 	.word	0x50000300
 8002db4:	50000700 	.word	0x50000700
 8002db8:	50000500 	.word	0x50000500
 8002dbc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a8b      	ldr	r2, [pc, #556]	@ (8002ff4 <HAL_ADC_IRQHandler+0x4ac>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_ADC_IRQHandler+0x296>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a8a      	ldr	r2, [pc, #552]	@ (8002ff8 <HAL_ADC_IRQHandler+0x4b0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d002      	beq.n	8002dda <HAL_ADC_IRQHandler+0x292>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	e003      	b.n	8002de2 <HAL_ADC_IRQHandler+0x29a>
 8002dda:	4b88      	ldr	r3, [pc, #544]	@ (8002ffc <HAL_ADC_IRQHandler+0x4b4>)
 8002ddc:	e001      	b.n	8002de2 <HAL_ADC_IRQHandler+0x29a>
 8002dde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002de2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d047      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_ADC_IRQHandler+0x2c2>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d03f      	beq.n	8002e80 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d13a      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e14:	2b40      	cmp	r3, #64	@ 0x40
 8002e16:	d133      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d12e      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fbeb 	bl	8002602 <LL_ADC_INJ_IsConversionOngoing>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11a      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d112      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e66:	e00b      	b.n	8002e80 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 ff67 	bl	8003d54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2260      	movs	r2, #96	@ 0x60
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d011      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x374>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00c      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8be 	bl	8003030 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2280      	movs	r2, #128	@ 0x80
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d012      	beq.n	8002eec <HAL_ADC_IRQHandler+0x3a4>
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 ff4d 	bl	8003d7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x3d4>
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 ff3f 	bl	8003d90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d043      	beq.n	8002fae <HAL_ADC_IRQHandler+0x466>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d03e      	beq.n	8002fae <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3c:	e021      	b.n	8002f82 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4c:	d004      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x410>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <HAL_ADC_IRQHandler+0x4ac>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_IRQHandler+0x414>
 8002f58:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <HAL_ADC_IRQHandler+0x4b8>)
 8002f5a:	e000      	b.n	8002f5e <HAL_ADC_IRQHandler+0x416>
 8002f5c:	4b29      	ldr	r3, [pc, #164]	@ (8003004 <HAL_ADC_IRQHandler+0x4bc>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fa7e 	bl	8002460 <LL_ADC_GetMultiDMATransfer>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6e:	e008      	b.n	8002f82 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10e      	bne.n	8002fa6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f98:	f043 0202 	orr.w	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f84f 	bl	8003044 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2210      	movs	r2, #16
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d018      	beq.n	8002fea <HAL_ADC_IRQHandler+0x4a2>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d013      	beq.n	8002fea <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	f043 0208 	orr.w	r2, r3, #8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 febf 	bl	8003d68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002fea:	bf00      	nop
 8002fec:	3728      	adds	r7, #40	@ 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	50000100 	.word	0x50000100
 8002ff8:	50000500 	.word	0x50000500
 8002ffc:	50000400 	.word	0x50000400
 8003000:	50000300 	.word	0x50000300
 8003004:	50000700 	.word	0x50000700

08003008 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b0b6      	sub	sp, #216	@ 0xd8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_ADC_ConfigChannel+0x24>
 8003076:	2302      	movs	r3, #2
 8003078:	f000 bc13 	b.w	80038a2 <HAL_ADC_ConfigChannel+0x84a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff faa7 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 83f3 	bne.w	800387c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f7ff f93f 	bl	8002326 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fa95 	bl	80025dc <LL_ADC_REG_IsConversionOngoing>
 80030b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff faa1 	bl	8002602 <LL_ADC_INJ_IsConversionOngoing>
 80030c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f040 81d9 	bne.w	8003480 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 81d4 	bne.w	8003480 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030e0:	d10f      	bne.n	8003102 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7ff f959 	bl	80023a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff f8ed 	bl	80022da <LL_ADC_SetSamplingTimeCommonConfig>
 8003100:	e00e      	b.n	8003120 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	461a      	mov	r2, r3
 8003110:	f7ff f948 	bl	80023a4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f8dd 	bl	80022da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	08db      	lsrs	r3, r3, #3
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b04      	cmp	r3, #4
 8003140:	d022      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003152:	f7ff f837 	bl	80021c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6919      	ldr	r1, [r3, #16]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	461a      	mov	r2, r3
 8003164:	f7ff f883 	bl	800226e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <HAL_ADC_ConfigChannel+0x126>
 8003178:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800317c:	e000      	b.n	8003180 <HAL_ADC_ConfigChannel+0x128>
 800317e:	2300      	movs	r3, #0
 8003180:	461a      	mov	r2, r3
 8003182:	f7ff f88f 	bl	80022a4 <LL_ADC_SetOffsetSaturation>
 8003186:	e17b      	b.n	8003480 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f83c 	bl	800220c <LL_ADC_GetOffsetChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x15c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f831 	bl	800220c <LL_ADC_GetOffsetChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	f003 021f 	and.w	r2, r3, #31
 80031b2:	e01e      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x19a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f826 	bl	800220c <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80031e2:	2320      	movs	r3, #32
 80031e4:	e004      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80031e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <HAL_ADC_ConfigChannel+0x1b2>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	e018      	b.n	800323c <HAL_ADC_ConfigChannel+0x1e4>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800321e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e004      	b.n	800323c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800323c:	429a      	cmp	r2, r3
 800323e:	d106      	bne.n	800324e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2200      	movs	r2, #0
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fff5 	bl	8002238 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe ffd9 	bl	800220c <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <HAL_ADC_ConfigChannel+0x222>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ffce 	bl	800220c <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	e01e      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x260>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe ffc3 	bl	800220c <LL_ADC_GetOffsetChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003298:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800329c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e004      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80032ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x278>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	e018      	b.n	8003302 <HAL_ADC_ConfigChannel+0x2aa>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e004      	b.n	8003302 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80032f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003302:	429a      	cmp	r2, r3
 8003304:	d106      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	2101      	movs	r1, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ff92 	bl	8002238 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe ff76 	bl	800220c <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x2e8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe ff6b 	bl	800220c <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	e01e      	b.n	800337e <HAL_ADC_ConfigChannel+0x326>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe ff60 	bl	800220c <LL_ADC_GetOffsetChannel>
 800334c:	4603      	mov	r3, r0
 800334e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800335e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003366:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800336e:	2320      	movs	r3, #32
 8003370:	e004      	b.n	800337c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003372:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x33e>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	0e9b      	lsrs	r3, r3, #26
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	e016      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x36c>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80033b6:	2320      	movs	r3, #32
 80033b8:	e004      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80033ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2102      	movs	r1, #2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe ff31 	bl	8002238 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2103      	movs	r1, #3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe ff15 	bl	800220c <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x3aa>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2103      	movs	r1, #3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe ff0a 	bl	800220c <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	0e9b      	lsrs	r3, r3, #26
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	e017      	b.n	8003432 <HAL_ADC_ConfigChannel+0x3da>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2103      	movs	r1, #3
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe feff 	bl	800220c <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800341a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800341c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800341e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003424:	2320      	movs	r3, #32
 8003426:	e003      	b.n	8003430 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <HAL_ADC_ConfigChannel+0x3f2>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0e9b      	lsrs	r3, r3, #26
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	e011      	b.n	800346e <HAL_ADC_ConfigChannel+0x416>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800345a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800345c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003462:	2320      	movs	r3, #32
 8003464:	e003      	b.n	800346e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800346e:	429a      	cmp	r2, r3
 8003470:	d106      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	2103      	movs	r1, #3
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fedc 	bl	8002238 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f86f 	bl	8002568 <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 813d 	bne.w	800370c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	f7fe ffac 	bl	80023fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4aa2      	ldr	r2, [pc, #648]	@ (8003734 <HAL_ADC_ConfigChannel+0x6dc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f040 812e 	bne.w	800370c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x480>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	3301      	adds	r3, #1
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	bf94      	ite	ls
 80034d0:	2301      	movls	r3, #1
 80034d2:	2300      	movhi	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e019      	b.n	800350c <HAL_ADC_ConfigChannel+0x4b4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80034f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2b09      	cmp	r3, #9
 8003504:	bf94      	ite	ls
 8003506:	2301      	movls	r3, #1
 8003508:	2300      	movhi	r3, #0
 800350a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800350c:	2b00      	cmp	r3, #0
 800350e:	d079      	beq.n	8003604 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_ADC_ConfigChannel+0x4d4>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	3301      	adds	r3, #1
 8003524:	069b      	lsls	r3, r3, #26
 8003526:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800352a:	e015      	b.n	8003558 <HAL_ADC_ConfigChannel+0x500>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800353a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800353c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800353e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e003      	b.n	8003550 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	069b      	lsls	r3, r3, #26
 8003554:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x520>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	3301      	adds	r3, #1
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	e017      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x550>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003588:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800358a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e003      	b.n	800359c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	ea42 0103 	orr.w	r1, r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x576>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	051b      	lsls	r3, r3, #20
 80035cc:	e018      	b.n	8003600 <HAL_ADC_ConfigChannel+0x5a8>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80035e6:	2320      	movs	r3, #32
 80035e8:	e003      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80035ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003600:	430b      	orrs	r3, r1
 8003602:	e07e      	b.n	8003702 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	2b00      	cmp	r3, #0
 800360e:	d107      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x5c8>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	3301      	adds	r3, #1
 8003618:	069b      	lsls	r3, r3, #26
 800361a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800361e:	e015      	b.n	800364c <HAL_ADC_ConfigChannel+0x5f4>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800362e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003630:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003638:	2320      	movs	r3, #32
 800363a:	e003      	b.n	8003644 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	069b      	lsls	r3, r3, #26
 8003648:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_ADC_ConfigChannel+0x614>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	3301      	adds	r3, #1
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	e017      	b.n	800369c <HAL_ADC_ConfigChannel+0x644>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	61fb      	str	r3, [r7, #28]
  return result;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e003      	b.n	8003690 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2101      	movs	r1, #1
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	ea42 0103 	orr.w	r1, r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10d      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x670>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0e9b      	lsrs	r3, r3, #26
 80036b2:	3301      	adds	r3, #1
 80036b4:	f003 021f 	and.w	r2, r3, #31
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	3b1e      	subs	r3, #30
 80036c0:	051b      	lsls	r3, r3, #20
 80036c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	e01b      	b.n	8003700 <HAL_ADC_ConfigChannel+0x6a8>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	613b      	str	r3, [r7, #16]
  return result;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e003      	b.n	80036ec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f003 021f 	and.w	r2, r3, #31
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	3b1e      	subs	r3, #30
 80036fa:	051b      	lsls	r3, r3, #20
 80036fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003700:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003706:	4619      	mov	r1, r3
 8003708:	f7fe fe4c 	bl	80023a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_ADC_ConfigChannel+0x6e0>)
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80be 	beq.w	8003896 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003722:	d004      	beq.n	800372e <HAL_ADC_ConfigChannel+0x6d6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a04      	ldr	r2, [pc, #16]	@ (800373c <HAL_ADC_ConfigChannel+0x6e4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10a      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x6ec>
 800372e:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <HAL_ADC_ConfigChannel+0x6e8>)
 8003730:	e009      	b.n	8003746 <HAL_ADC_ConfigChannel+0x6ee>
 8003732:	bf00      	nop
 8003734:	407f0000 	.word	0x407f0000
 8003738:	80080000 	.word	0x80080000
 800373c:	50000100 	.word	0x50000100
 8003740:	50000300 	.word	0x50000300
 8003744:	4b59      	ldr	r3, [pc, #356]	@ (80038ac <HAL_ADC_ConfigChannel+0x854>)
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fd2e 	bl	80021a8 <LL_ADC_GetCommonPathInternalCh>
 800374c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a56      	ldr	r2, [pc, #344]	@ (80038b0 <HAL_ADC_ConfigChannel+0x858>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_ADC_ConfigChannel+0x70c>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a55      	ldr	r2, [pc, #340]	@ (80038b4 <HAL_ADC_ConfigChannel+0x85c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d13a      	bne.n	80037da <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d134      	bne.n	80037da <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003778:	d005      	beq.n	8003786 <HAL_ADC_ConfigChannel+0x72e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4e      	ldr	r2, [pc, #312]	@ (80038b8 <HAL_ADC_ConfigChannel+0x860>)
 8003780:	4293      	cmp	r3, r2
 8003782:	f040 8085 	bne.w	8003890 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800378e:	d004      	beq.n	800379a <HAL_ADC_ConfigChannel+0x742>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a49      	ldr	r2, [pc, #292]	@ (80038bc <HAL_ADC_ConfigChannel+0x864>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_ADC_ConfigChannel+0x746>
 800379a:	4a49      	ldr	r2, [pc, #292]	@ (80038c0 <HAL_ADC_ConfigChannel+0x868>)
 800379c:	e000      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x748>
 800379e:	4a43      	ldr	r2, [pc, #268]	@ (80038ac <HAL_ADC_ConfigChannel+0x854>)
 80037a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f7fe fce9 	bl	8002182 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b0:	4b44      	ldr	r3, [pc, #272]	@ (80038c4 <HAL_ADC_ConfigChannel+0x86c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	4a44      	ldr	r2, [pc, #272]	@ (80038c8 <HAL_ADC_ConfigChannel+0x870>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ca:	e002      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f9      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037d8:	e05a      	b.n	8003890 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <HAL_ADC_ConfigChannel+0x874>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d125      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11f      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a31      	ldr	r2, [pc, #196]	@ (80038bc <HAL_ADC_ConfigChannel+0x864>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d104      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7ac>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a34      	ldr	r2, [pc, #208]	@ (80038d0 <HAL_ADC_ConfigChannel+0x878>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d047      	beq.n	8003894 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380c:	d004      	beq.n	8003818 <HAL_ADC_ConfigChannel+0x7c0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2a      	ldr	r2, [pc, #168]	@ (80038bc <HAL_ADC_ConfigChannel+0x864>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_ADC_ConfigChannel+0x7c4>
 8003818:	4a29      	ldr	r2, [pc, #164]	@ (80038c0 <HAL_ADC_ConfigChannel+0x868>)
 800381a:	e000      	b.n	800381e <HAL_ADC_ConfigChannel+0x7c6>
 800381c:	4a23      	ldr	r2, [pc, #140]	@ (80038ac <HAL_ADC_ConfigChannel+0x854>)
 800381e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f7fe fcaa 	bl	8002182 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800382e:	e031      	b.n	8003894 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a27      	ldr	r2, [pc, #156]	@ (80038d4 <HAL_ADC_ConfigChannel+0x87c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d12d      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800383a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800383e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d127      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <HAL_ADC_ConfigChannel+0x864>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003858:	d004      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x80c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a17      	ldr	r2, [pc, #92]	@ (80038bc <HAL_ADC_ConfigChannel+0x864>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x810>
 8003864:	4a16      	ldr	r2, [pc, #88]	@ (80038c0 <HAL_ADC_ConfigChannel+0x868>)
 8003866:	e000      	b.n	800386a <HAL_ADC_ConfigChannel+0x812>
 8003868:	4a10      	ldr	r2, [pc, #64]	@ (80038ac <HAL_ADC_ConfigChannel+0x854>)
 800386a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800386e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fe fc84 	bl	8002182 <LL_ADC_SetCommonPathInternalCh>
 800387a:	e00c      	b.n	8003896 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800388e:	e002      	b.n	8003896 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003894:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800389e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	37d8      	adds	r7, #216	@ 0xd8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	50000700 	.word	0x50000700
 80038b0:	c3210000 	.word	0xc3210000
 80038b4:	90c00010 	.word	0x90c00010
 80038b8:	50000600 	.word	0x50000600
 80038bc:	50000100 	.word	0x50000100
 80038c0:	50000300 	.word	0x50000300
 80038c4:	20000004 	.word	0x20000004
 80038c8:	053e2d63 	.word	0x053e2d63
 80038cc:	c7520000 	.word	0xc7520000
 80038d0:	50000500 	.word	0x50000500
 80038d4:	cb840000 	.word	0xcb840000

080038d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fe3d 	bl	8002568 <LL_ADC_IsEnabled>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d176      	bne.n	80039e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	4b3c      	ldr	r3, [pc, #240]	@ (80039ec <ADC_Enable+0x114>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e062      	b.n	80039e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fdf8 	bl	8002518 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003930:	d004      	beq.n	800393c <ADC_Enable+0x64>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2e      	ldr	r2, [pc, #184]	@ (80039f0 <ADC_Enable+0x118>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <ADC_Enable+0x68>
 800393c:	4b2d      	ldr	r3, [pc, #180]	@ (80039f4 <ADC_Enable+0x11c>)
 800393e:	e000      	b.n	8003942 <ADC_Enable+0x6a>
 8003940:	4b2d      	ldr	r3, [pc, #180]	@ (80039f8 <ADC_Enable+0x120>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe fc30 	bl	80021a8 <LL_ADC_GetCommonPathInternalCh>
 8003948:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800394a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800394e:	2b00      	cmp	r3, #0
 8003950:	d013      	beq.n	800397a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003952:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <ADC_Enable+0x124>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	4a29      	ldr	r2, [pc, #164]	@ (8003a00 <ADC_Enable+0x128>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	099b      	lsrs	r3, r3, #6
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800396c:	e002      	b.n	8003974 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3b01      	subs	r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f9      	bne.n	800396e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800397a:	f7fe fbe3 	bl	8002144 <HAL_GetTick>
 800397e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003980:	e028      	b.n	80039d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fdee 	bl	8002568 <LL_ADC_IsEnabled>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d104      	bne.n	800399c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fdbe 	bl	8002518 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800399c:	f7fe fbd2 	bl	8002144 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d914      	bls.n	80039d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d00d      	beq.n	80039d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e007      	b.n	80039e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d1cf      	bne.n	8003982 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	8000003f 	.word	0x8000003f
 80039f0:	50000100 	.word	0x50000100
 80039f4:	50000300 	.word	0x50000300
 80039f8:	50000700 	.word	0x50000700
 80039fc:	20000004 	.word	0x20000004
 8003a00:	053e2d63 	.word	0x053e2d63

08003a04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fdbc 	bl	800258e <LL_ADC_IsDisableOngoing>
 8003a16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fda3 	bl	8002568 <LL_ADC_IsEnabled>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d047      	beq.n	8003ab8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d144      	bne.n	8003ab8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 030d 	and.w	r3, r3, #13
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10c      	bne.n	8003a56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fd7d 	bl	8002540 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a4e:	f7fe fb79 	bl	8002144 <HAL_GetTick>
 8003a52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a54:	e029      	b.n	8003aaa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f043 0210 	orr.w	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e023      	b.n	8003aba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a72:	f7fe fb67 	bl	8002144 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d914      	bls.n	8003aaa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	f043 0210 	orr.w	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e007      	b.n	8003aba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1dc      	bne.n	8003a72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d14b      	bne.n	8003b74 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d021      	beq.n	8003b3a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fc00 	bl	8002300 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d032      	beq.n	8003b6c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d12b      	bne.n	8003b6c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11f      	bne.n	8003b6c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b38:	e018      	b.n	8003b6c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff fa4b 	bl	8003008 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b72:	e00e      	b.n	8003b92 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff fa5f 	bl	8003044 <HAL_ADC_ErrorCallback>
}
 8003b86:	e004      	b.n	8003b92 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fa37 	bl	800301c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff fa31 	bl	8003044 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <LL_ADC_IsEnabled>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <LL_ADC_IsEnabled+0x18>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <LL_ADC_IsEnabled+0x1a>
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_ADC_StartCalibration>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003c22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c56:	d101      	bne.n	8003c5c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d101      	bne.n	8003c82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_ADCEx_Calibration_Start+0x1c>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e04d      	b.n	8003d48 <HAL_ADCEx_Calibration_Start+0xb8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fea5 	bl	8003a04 <ADC_Disable>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d136      	bne.n	8003d32 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ccc:	f023 0302 	bic.w	r3, r3, #2
 8003cd0:	f043 0202 	orr.w	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6839      	ldr	r1, [r7, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ff96 	bl	8003c10 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ce4:	e014      	b.n	8003d10 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a18      	ldr	r2, [pc, #96]	@ (8003d50 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d90d      	bls.n	8003d10 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	f023 0312 	bic.w	r3, r3, #18
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e01b      	b.n	8003d48 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff94 	bl	8003c42 <LL_ADC_IsCalibrationOnGoing>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e2      	bne.n	8003ce6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d24:	f023 0303 	bic.w	r3, r3, #3
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d30:	e005      	b.n	8003d3e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	f043 0210 	orr.w	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	0004de01 	.word	0x0004de01

08003d54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b0a1      	sub	sp, #132	@ 0x84
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e0e7      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003dde:	2300      	movs	r3, #0
 8003de0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003de2:	2300      	movs	r3, #0
 8003de4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dee:	d102      	bne.n	8003df6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003df0:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	e009      	b.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d102      	bne.n	8003e06 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003e00:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	e001      	b.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0be      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff1d 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 8003e30:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff ff17 	bl	8003c6a <LL_ADC_REG_IsConversionOngoing>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f040 80a0 	bne.w	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 809c 	bne.w	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e54:	d004      	beq.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a55      	ldr	r2, [pc, #340]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e60:	4b56      	ldr	r3, [pc, #344]	@ (8003fbc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e62:	e000      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e64:	4b56      	ldr	r3, [pc, #344]	@ (8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e66:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d04b      	beq.n	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e82:	035b      	lsls	r3, r3, #13
 8003e84:	430b      	orrs	r3, r1
 8003e86:	431a      	orrs	r2, r3
 8003e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e94:	d004      	beq.n	8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a45      	ldr	r2, [pc, #276]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003ea0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ea4:	f7ff fea1 	bl	8003bea <LL_ADC_IsEnabled>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	4841      	ldr	r0, [pc, #260]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eac:	f7ff fe9d 	bl	8003bea <LL_ADC_IsEnabled>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4323      	orrs	r3, r4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e012      	b.n	8003ee6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ec0:	483c      	ldr	r0, [pc, #240]	@ (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ec2:	f7ff fe92 	bl	8003bea <LL_ADC_IsEnabled>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	483b      	ldr	r0, [pc, #236]	@ (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003eca:	f7ff fe8e 	bl	8003bea <LL_ADC_IsEnabled>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	431c      	orrs	r4, r3
 8003ed2:	483c      	ldr	r0, [pc, #240]	@ (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ed4:	f7ff fe89 	bl	8003bea <LL_ADC_IsEnabled>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4323      	orrs	r3, r4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d056      	beq.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ef2:	f023 030f 	bic.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	6892      	ldr	r2, [r2, #8]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	431a      	orrs	r2, r3
 8003f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f04:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f06:	e047      	b.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f1c:	d004      	beq.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a23      	ldr	r2, [pc, #140]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10f      	bne.n	8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003f28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f2c:	f7ff fe5d 	bl	8003bea <LL_ADC_IsEnabled>
 8003f30:	4604      	mov	r4, r0
 8003f32:	481f      	ldr	r0, [pc, #124]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f34:	f7ff fe59 	bl	8003bea <LL_ADC_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4323      	orrs	r3, r4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	e012      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f48:	481a      	ldr	r0, [pc, #104]	@ (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f4a:	f7ff fe4e 	bl	8003bea <LL_ADC_IsEnabled>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	4819      	ldr	r0, [pc, #100]	@ (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f52:	f7ff fe4a 	bl	8003bea <LL_ADC_IsEnabled>
 8003f56:	4603      	mov	r3, r0
 8003f58:	431c      	orrs	r4, r3
 8003f5a:	481a      	ldr	r0, [pc, #104]	@ (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f5c:	f7ff fe45 	bl	8003bea <LL_ADC_IsEnabled>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4323      	orrs	r3, r4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d012      	beq.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f7a:	f023 030f 	bic.w	r3, r3, #15
 8003f7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f82:	e009      	b.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f96:	e000      	b.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3784      	adds	r7, #132	@ 0x84
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	50000100 	.word	0x50000100
 8003fb4:	50000400 	.word	0x50000400
 8003fb8:	50000500 	.word	0x50000500
 8003fbc:	50000300 	.word	0x50000300
 8003fc0:	50000700 	.word	0x50000700
 8003fc4:	50000600 	.word	0x50000600

08003fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	@ (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <__NVIC_GetPriorityGrouping+0x18>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 0307 	and.w	r3, r3, #7
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	2b00      	cmp	r3, #0
 800403c:	db0b      	blt.n	8004056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	f003 021f 	and.w	r2, r3, #31
 8004044:	4907      	ldr	r1, [pc, #28]	@ (8004064 <__NVIC_EnableIRQ+0x38>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2001      	movs	r0, #1
 800404e:	fa00 f202 	lsl.w	r2, r0, r2
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000e100 	.word	0xe000e100

08004068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db0a      	blt.n	8004092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	490c      	ldr	r1, [pc, #48]	@ (80040b4 <__NVIC_SetPriority+0x4c>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	440b      	add	r3, r1
 800408c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004090:	e00a      	b.n	80040a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4908      	ldr	r1, [pc, #32]	@ (80040b8 <__NVIC_SetPriority+0x50>)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	3b04      	subs	r3, #4
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	761a      	strb	r2, [r3, #24]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000e100 	.word	0xe000e100
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	@ 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f1c3 0307 	rsb	r3, r3, #7
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	bf28      	it	cs
 80040da:	2304      	movcs	r3, #4
 80040dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d902      	bls.n	80040ec <NVIC_EncodePriority+0x30>
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3b03      	subs	r3, #3
 80040ea:	e000      	b.n	80040ee <NVIC_EncodePriority+0x32>
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	401a      	ands	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004104:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	43d9      	mvns	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004114:	4313      	orrs	r3, r2
         );
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	@ 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff4c 	bl	8003fc8 <__NVIC_SetPriorityGrouping>
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004146:	f7ff ff63 	bl	8004010 <__NVIC_GetPriorityGrouping>
 800414a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	6978      	ldr	r0, [r7, #20]
 8004152:	f7ff ffb3 	bl	80040bc <NVIC_EncodePriority>
 8004156:	4602      	mov	r2, r0
 8004158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff82 	bl	8004068 <__NVIC_SetPriority>
}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ff56 	bl	800402c <__NVIC_EnableIRQ>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e08d      	b.n	80042b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	4b47      	ldr	r3, [pc, #284]	@ (80042c0 <HAL_DMA_Init+0x138>)
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d80f      	bhi.n	80041c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b45      	ldr	r3, [pc, #276]	@ (80042c4 <HAL_DMA_Init+0x13c>)
 80041ae:	4413      	add	r3, r2
 80041b0:	4a45      	ldr	r2, [pc, #276]	@ (80042c8 <HAL_DMA_Init+0x140>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	009a      	lsls	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <HAL_DMA_Init+0x144>)
 80041c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80041c4:	e00e      	b.n	80041e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b40      	ldr	r3, [pc, #256]	@ (80042d0 <HAL_DMA_Init+0x148>)
 80041ce:	4413      	add	r3, r2
 80041d0:	4a3d      	ldr	r2, [pc, #244]	@ (80042c8 <HAL_DMA_Init+0x140>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	009a      	lsls	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a3c      	ldr	r2, [pc, #240]	@ (80042d4 <HAL_DMA_Init+0x14c>)
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa82 	bl	8004740 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004244:	d102      	bne.n	800424c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004260:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <HAL_DMA_Init+0x104>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d80c      	bhi.n	800428c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 faa2 	bl	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e008      	b.n	800429e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40020407 	.word	0x40020407
 80042c4:	bffdfff8 	.word	0xbffdfff8
 80042c8:	cccccccd 	.word	0xcccccccd
 80042cc:	40020000 	.word	0x40020000
 80042d0:	bffdfbf8 	.word	0xbffdfbf8
 80042d4:	40020400 	.word	0x40020400

080042d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_Start_IT+0x20>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e066      	b.n	80043c6 <HAL_DMA_Start_IT+0xee>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d155      	bne.n	80043b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f9c7 	bl	80046c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 020e 	orr.w	r2, r2, #14
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e00f      	b.n	8004370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 020a 	orr.w	r2, r2, #10
 800436e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800438c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e005      	b.n	80043c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d005      	beq.n	80043f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	e037      	b.n	8004462 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 020e 	bic.w	r2, r2, #14
 8004400:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004410:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	f003 021f 	and.w	r2, r3, #31
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2101      	movs	r1, #1
 8004430:	fa01 f202 	lsl.w	r2, r1, r2
 8004434:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800443e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004456:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004460:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d00d      	beq.n	80044b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2204      	movs	r2, #4
 800449c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
 80044b2:	e047      	b.n	8004544 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 020e 	bic.w	r2, r2, #14
 80044c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004500:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004518:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004522:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
    }
  }
  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2204      	movs	r2, #4
 8004570:	409a      	lsls	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d026      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x7a>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d021      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d107      	bne.n	80045a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0204 	bic.w	r2, r2, #4
 80045a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f003 021f 	and.w	r2, r3, #31
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	2104      	movs	r1, #4
 80045b0:	fa01 f202 	lsl.w	r2, r1, r2
 80045b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d071      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045c6:	e06c      	b.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2202      	movs	r2, #2
 80045d2:	409a      	lsls	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02e      	beq.n	800463a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d029      	beq.n	800463a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 020a 	bic.w	r2, r2, #10
 8004602:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004610:	f003 021f 	and.w	r2, r3, #31
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	2102      	movs	r1, #2
 800461a:	fa01 f202 	lsl.w	r2, r1, r2
 800461e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d038      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004638:	e033      	b.n	80046a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2208      	movs	r2, #8
 8004644:	409a      	lsls	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4013      	ands	r3, r2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d02a      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d025      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 020e 	bic.w	r2, r2, #14
 8004666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f202 	lsl.w	r2, r1, r2
 800467a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
}
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	f003 021f 	and.w	r2, r3, #31
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	2101      	movs	r1, #1
 80046fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004700:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b10      	cmp	r3, #16
 8004710:	d108      	bne.n	8004724 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004722:	e007      	b.n	8004734 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	4b16      	ldr	r3, [pc, #88]	@ (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004750:	429a      	cmp	r2, r3
 8004752:	d802      	bhi.n	800475a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004754:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e001      	b.n	800475e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800475a:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800475c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	3b08      	subs	r3, #8
 800476a:	4a12      	ldr	r2, [pc, #72]	@ (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a0b      	ldr	r2, [pc, #44]	@ (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800478a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2201      	movs	r2, #1
 8004794:	409a      	lsls	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40020407 	.word	0x40020407
 80047ac:	40020800 	.word	0x40020800
 80047b0:	40020820 	.word	0x40020820
 80047b4:	cccccccd 	.word	0xcccccccd
 80047b8:	40020880 	.word	0x40020880

080047bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a08      	ldr	r2, [pc, #32]	@ (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047de:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	1000823f 	.word	0x1000823f
 8004800:	40020940 	.word	0x40020940

08004804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004812:	e15a      	b.n	8004aca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	2101      	movs	r1, #1
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	4013      	ands	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 814c 	beq.w	8004ac4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d005      	beq.n	8004844 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004840:	2b02      	cmp	r3, #2
 8004842:	d130      	bne.n	80048a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	2203      	movs	r2, #3
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800487a:	2201      	movs	r2, #1
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 0201 	and.w	r2, r3, #1
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d017      	beq.n	80048e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	2203      	movs	r2, #3
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d123      	bne.n	8004936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	08da      	lsrs	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3208      	adds	r2, #8
 80048f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	220f      	movs	r2, #15
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	08da      	lsrs	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3208      	adds	r2, #8
 8004930:	6939      	ldr	r1, [r7, #16]
 8004932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	2203      	movs	r2, #3
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0203 	and.w	r2, r3, #3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80a6 	beq.w	8004ac4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004978:	4b5b      	ldr	r3, [pc, #364]	@ (8004ae8 <HAL_GPIO_Init+0x2e4>)
 800497a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ae8 <HAL_GPIO_Init+0x2e4>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6613      	str	r3, [r2, #96]	@ 0x60
 8004984:	4b58      	ldr	r3, [pc, #352]	@ (8004ae8 <HAL_GPIO_Init+0x2e4>)
 8004986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004990:	4a56      	ldr	r2, [pc, #344]	@ (8004aec <HAL_GPIO_Init+0x2e8>)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	3302      	adds	r3, #2
 8004998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	220f      	movs	r2, #15
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	43db      	mvns	r3, r3
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049ba:	d01f      	beq.n	80049fc <HAL_GPIO_Init+0x1f8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a4c      	ldr	r2, [pc, #304]	@ (8004af0 <HAL_GPIO_Init+0x2ec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d019      	beq.n	80049f8 <HAL_GPIO_Init+0x1f4>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a4b      	ldr	r2, [pc, #300]	@ (8004af4 <HAL_GPIO_Init+0x2f0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <HAL_GPIO_Init+0x1f0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a4a      	ldr	r2, [pc, #296]	@ (8004af8 <HAL_GPIO_Init+0x2f4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00d      	beq.n	80049f0 <HAL_GPIO_Init+0x1ec>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a49      	ldr	r2, [pc, #292]	@ (8004afc <HAL_GPIO_Init+0x2f8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <HAL_GPIO_Init+0x1e8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a48      	ldr	r2, [pc, #288]	@ (8004b00 <HAL_GPIO_Init+0x2fc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d101      	bne.n	80049e8 <HAL_GPIO_Init+0x1e4>
 80049e4:	2305      	movs	r3, #5
 80049e6:	e00a      	b.n	80049fe <HAL_GPIO_Init+0x1fa>
 80049e8:	2306      	movs	r3, #6
 80049ea:	e008      	b.n	80049fe <HAL_GPIO_Init+0x1fa>
 80049ec:	2304      	movs	r3, #4
 80049ee:	e006      	b.n	80049fe <HAL_GPIO_Init+0x1fa>
 80049f0:	2303      	movs	r3, #3
 80049f2:	e004      	b.n	80049fe <HAL_GPIO_Init+0x1fa>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e002      	b.n	80049fe <HAL_GPIO_Init+0x1fa>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <HAL_GPIO_Init+0x1fa>
 80049fc:	2300      	movs	r3, #0
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	f002 0203 	and.w	r2, r2, #3
 8004a04:	0092      	lsls	r2, r2, #2
 8004a06:	4093      	lsls	r3, r2
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a0e:	4937      	ldr	r1, [pc, #220]	@ (8004aec <HAL_GPIO_Init+0x2e8>)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	3302      	adds	r3, #2
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a1c:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a40:	4a30      	ldr	r2, [pc, #192]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a46:	4b2f      	ldr	r3, [pc, #188]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a6a:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a70:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004abe:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <HAL_GPIO_Init+0x300>)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f47f ae9d 	bne.w	8004814 <HAL_GPIO_Init+0x10>
  }
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40010000 	.word	0x40010000
 8004af0:	48000400 	.word	0x48000400
 8004af4:	48000800 	.word	0x48000800
 8004af8:	48000c00 	.word	0x48000c00
 8004afc:	48001000 	.word	0x48001000
 8004b00:	48001400 	.word	0x48001400
 8004b04:	40010400 	.word	0x40010400

08004b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
 8004b14:	4613      	mov	r3, r2
 8004b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b18:	787b      	ldrb	r3, [r7, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b24:	e002      	b.n	8004b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b26:	887a      	ldrh	r2, [r7, #2]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b42:	4b08      	ldr	r3, [pc, #32]	@ (8004b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b4e:	4a05      	ldr	r2, [pc, #20]	@ (8004b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f806 	bl	8004b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40010400 	.word	0x40010400

08004b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d141      	bne.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d131      	bne.n	8004c00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b9c:	4b47      	ldr	r3, [pc, #284]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba2:	4a46      	ldr	r2, [pc, #280]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bac:	4b43      	ldr	r3, [pc, #268]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bb4:	4a41      	ldr	r2, [pc, #260]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bbc:	4b40      	ldr	r3, [pc, #256]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2232      	movs	r2, #50	@ 0x32
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8004cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	0c9b      	lsrs	r3, r3, #18
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd2:	e002      	b.n	8004bda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bda:	4b38      	ldr	r3, [pc, #224]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be6:	d102      	bne.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f2      	bne.n	8004bd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bee:	4b33      	ldr	r3, [pc, #204]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bfa:	d158      	bne.n	8004cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e057      	b.n	8004cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c00:	4b2e      	ldr	r3, [pc, #184]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c06:	4a2d      	ldr	r2, [pc, #180]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c10:	e04d      	b.n	8004cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c18:	d141      	bne.n	8004c9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c1a:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c26:	d131      	bne.n	8004c8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c28:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c2e:	4a23      	ldr	r2, [pc, #140]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c38:	4b20      	ldr	r3, [pc, #128]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c40:	4a1e      	ldr	r2, [pc, #120]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c48:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2232      	movs	r2, #50	@ 0x32
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	0c9b      	lsrs	r3, r3, #18
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c5e:	e002      	b.n	8004c66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c66:	4b15      	ldr	r3, [pc, #84]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c72:	d102      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f2      	bne.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c7a:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c86:	d112      	bne.n	8004cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e011      	b.n	8004cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c92:	4a0a      	ldr	r2, [pc, #40]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c9c:	e007      	b.n	8004cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c9e:	4b07      	ldr	r3, [pc, #28]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ca6:	4a05      	ldr	r2, [pc, #20]	@ (8004cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40007000 	.word	0x40007000
 8004cc0:	20000004 	.word	0x20000004
 8004cc4:	431bde83 	.word	0x431bde83

08004cc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ccc:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	@ (8004ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cd6:	6093      	str	r3, [r2, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40007000 	.word	0x40007000

08004ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e2fe      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d075      	beq.n	8004df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d06:	4b97      	ldr	r3, [pc, #604]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d10:	4b94      	ldr	r3, [pc, #592]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d102      	bne.n	8004d26 <HAL_RCC_OscConfig+0x3e>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d002      	beq.n	8004d2c <HAL_RCC_OscConfig+0x44>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d10b      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	4b8d      	ldr	r3, [pc, #564]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d05b      	beq.n	8004df0 <HAL_RCC_OscConfig+0x108>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d157      	bne.n	8004df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e2d9      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCC_OscConfig+0x74>
 8004d4e:	4b85      	ldr	r3, [pc, #532]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a84      	ldr	r2, [pc, #528]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e01d      	b.n	8004d98 <HAL_RCC_OscConfig+0xb0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x98>
 8004d66:	4b7f      	ldr	r3, [pc, #508]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	4b7c      	ldr	r3, [pc, #496]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7b      	ldr	r2, [pc, #492]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCC_OscConfig+0xb0>
 8004d80:	4b78      	ldr	r3, [pc, #480]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a77      	ldr	r2, [pc, #476]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	4b75      	ldr	r3, [pc, #468]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a74      	ldr	r2, [pc, #464]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d013      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fd f9d0 	bl	8002144 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da8:	f7fd f9cc 	bl	8002144 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	@ 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e29e      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dba:	4b6a      	ldr	r3, [pc, #424]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0xc0>
 8004dc6:	e014      	b.n	8004df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fd f9bc 	bl	8002144 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fd f9b8 	bl	8002144 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	@ 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e28a      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004de2:	4b60      	ldr	r3, [pc, #384]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0xe8>
 8004dee:	e000      	b.n	8004df2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d075      	beq.n	8004eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dfe:	4b59      	ldr	r3, [pc, #356]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e08:	4b56      	ldr	r3, [pc, #344]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d102      	bne.n	8004e1e <HAL_RCC_OscConfig+0x136>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d002      	beq.n	8004e24 <HAL_RCC_OscConfig+0x13c>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11f      	bne.n	8004e64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e24:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_OscConfig+0x154>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e25d      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3c:	4b49      	ldr	r3, [pc, #292]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	4946      	ldr	r1, [pc, #280]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e50:	4b45      	ldr	r3, [pc, #276]	@ (8004f68 <HAL_RCC_OscConfig+0x280>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fc fe75 	bl	8001b44 <HAL_InitTick>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d043      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e249      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d023      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a3c      	ldr	r2, [pc, #240]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fd f964 	bl	8002144 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e80:	f7fd f960 	bl	8002144 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e232      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e92:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9e:	4b31      	ldr	r3, [pc, #196]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	061b      	lsls	r3, r3, #24
 8004eac:	492d      	ldr	r1, [pc, #180]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	604b      	str	r3, [r1, #4]
 8004eb2:	e01a      	b.n	8004eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004eba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd f940 	bl	8002144 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec8:	f7fd f93c 	bl	8002144 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e20e      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eda:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x1e0>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d041      	beq.n	8004f7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01c      	beq.n	8004f38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efe:	4b19      	ldr	r3, [pc, #100]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f04:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fd f919 	bl	8002144 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f16:	f7fd f915 	bl	8002144 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1e7      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f28:	4b0e      	ldr	r3, [pc, #56]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0ef      	beq.n	8004f16 <HAL_RCC_OscConfig+0x22e>
 8004f36:	e020      	b.n	8004f7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f38:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3e:	4a09      	ldr	r2, [pc, #36]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fd f8fc 	bl	8002144 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f4e:	e00d      	b.n	8004f6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f50:	f7fd f8f8 	bl	8002144 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d906      	bls.n	8004f6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e1ca      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ea      	bne.n	8004f50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80a6 	beq.w	80050d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f8c:	4b84      	ldr	r3, [pc, #528]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_OscConfig+0x2b4>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_RCC_OscConfig+0x2b6>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fae:	4b7c      	ldr	r3, [pc, #496]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbe:	4b79      	ldr	r3, [pc, #484]	@ (80051a4 <HAL_RCC_OscConfig+0x4bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d118      	bne.n	8004ffc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fca:	4b76      	ldr	r3, [pc, #472]	@ (80051a4 <HAL_RCC_OscConfig+0x4bc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a75      	ldr	r2, [pc, #468]	@ (80051a4 <HAL_RCC_OscConfig+0x4bc>)
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd6:	f7fd f8b5 	bl	8002144 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fde:	f7fd f8b1 	bl	8002144 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e183      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80051a4 <HAL_RCC_OscConfig+0x4bc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d108      	bne.n	8005016 <HAL_RCC_OscConfig+0x32e>
 8005004:	4b66      	ldr	r3, [pc, #408]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500a:	4a65      	ldr	r2, [pc, #404]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005014:	e024      	b.n	8005060 <HAL_RCC_OscConfig+0x378>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b05      	cmp	r3, #5
 800501c:	d110      	bne.n	8005040 <HAL_RCC_OscConfig+0x358>
 800501e:	4b60      	ldr	r3, [pc, #384]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005024:	4a5e      	ldr	r2, [pc, #376]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800502e:	4b5c      	ldr	r3, [pc, #368]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005034:	4a5a      	ldr	r2, [pc, #360]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800503e:	e00f      	b.n	8005060 <HAL_RCC_OscConfig+0x378>
 8005040:	4b57      	ldr	r3, [pc, #348]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005046:	4a56      	ldr	r2, [pc, #344]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005050:	4b53      	ldr	r3, [pc, #332]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005056:	4a52      	ldr	r2, [pc, #328]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005058:	f023 0304 	bic.w	r3, r3, #4
 800505c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d016      	beq.n	8005096 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fd f86c 	bl	8002144 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fd f868 	bl	8002144 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e138      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005086:	4b46      	ldr	r3, [pc, #280]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ed      	beq.n	8005070 <HAL_RCC_OscConfig+0x388>
 8005094:	e015      	b.n	80050c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fd f855 	bl	8002144 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509e:	f7fd f851 	bl	8002144 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e121      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b4:	4b3a      	ldr	r3, [pc, #232]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ed      	bne.n	800509e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050c2:	7ffb      	ldrb	r3, [r7, #31]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d105      	bne.n	80050d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c8:	4b35      	ldr	r3, [pc, #212]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050cc:	4a34      	ldr	r2, [pc, #208]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 80050ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d03c      	beq.n	800515a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01c      	beq.n	8005122 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050e8:	4b2d      	ldr	r3, [pc, #180]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 80050ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050ee:	4a2c      	ldr	r2, [pc, #176]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7fd f824 	bl	8002144 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005100:	f7fd f820 	bl	8002144 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e0f2      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005112:	4b23      	ldr	r3, [pc, #140]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ef      	beq.n	8005100 <HAL_RCC_OscConfig+0x418>
 8005120:	e01b      	b.n	800515a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005122:	4b1f      	ldr	r3, [pc, #124]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fd f807 	bl	8002144 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800513a:	f7fd f803 	bl	8002144 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0d5      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800514c:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 800514e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1ef      	bne.n	800513a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80c9 	beq.w	80052f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 030c 	and.w	r3, r3, #12
 800516c:	2b0c      	cmp	r3, #12
 800516e:	f000 8083 	beq.w	8005278 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d15e      	bne.n	8005238 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517a:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a08      	ldr	r2, [pc, #32]	@ (80051a0 <HAL_RCC_OscConfig+0x4b8>)
 8005180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fc ffdd 	bl	8002144 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518c:	e00c      	b.n	80051a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518e:	f7fc ffd9 	bl	8002144 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d905      	bls.n	80051a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e0ab      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a8:	4b55      	ldr	r3, [pc, #340]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ec      	bne.n	800518e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b4:	4b52      	ldr	r3, [pc, #328]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	4b52      	ldr	r3, [pc, #328]	@ (8005304 <HAL_RCC_OscConfig+0x61c>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6a11      	ldr	r1, [r2, #32]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051c4:	3a01      	subs	r2, #1
 80051c6:	0112      	lsls	r2, r2, #4
 80051c8:	4311      	orrs	r1, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80051ce:	0212      	lsls	r2, r2, #8
 80051d0:	4311      	orrs	r1, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051d6:	0852      	lsrs	r2, r2, #1
 80051d8:	3a01      	subs	r2, #1
 80051da:	0552      	lsls	r2, r2, #21
 80051dc:	4311      	orrs	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051e2:	0852      	lsrs	r2, r2, #1
 80051e4:	3a01      	subs	r2, #1
 80051e6:	0652      	lsls	r2, r2, #25
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051ee:	06d2      	lsls	r2, r2, #27
 80051f0:	430a      	orrs	r2, r1
 80051f2:	4943      	ldr	r1, [pc, #268]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f8:	4b41      	ldr	r3, [pc, #260]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a40      	ldr	r2, [pc, #256]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 80051fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005202:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005204:	4b3e      	ldr	r3, [pc, #248]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a3d      	ldr	r2, [pc, #244]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 800520a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fc ff98 	bl	8002144 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fc ff94 	bl	8002144 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e066      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522a:	4b35      	ldr	r3, [pc, #212]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x530>
 8005236:	e05e      	b.n	80052f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005238:	4b31      	ldr	r3, [pc, #196]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a30      	ldr	r2, [pc, #192]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fc ff7e 	bl	8002144 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc ff7a 	bl	8002144 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e04c      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800525e:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800526a:	4b25      	ldr	r3, [pc, #148]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	4924      	ldr	r1, [pc, #144]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 8005270:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <HAL_RCC_OscConfig+0x620>)
 8005272:	4013      	ands	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]
 8005276:	e03e      	b.n	80052f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e039      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005284:	4b1e      	ldr	r3, [pc, #120]	@ (8005300 <HAL_RCC_OscConfig+0x618>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f003 0203 	and.w	r2, r3, #3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	429a      	cmp	r2, r3
 8005296:	d12c      	bne.n	80052f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	3b01      	subs	r3, #1
 80052a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d123      	bne.n	80052f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d11b      	bne.n	80052f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d113      	bne.n	80052f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	3b01      	subs	r3, #1
 80052d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d109      	bne.n	80052f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	3b01      	subs	r3, #1
 80052ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d001      	beq.n	80052f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	019f800c 	.word	0x019f800c
 8005308:	feeefffc 	.word	0xfeeefffc

0800530c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e11e      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005324:	4b91      	ldr	r3, [pc, #580]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d910      	bls.n	8005354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b8e      	ldr	r3, [pc, #568]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 020f 	bic.w	r2, r3, #15
 800533a:	498c      	ldr	r1, [pc, #560]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b8a      	ldr	r3, [pc, #552]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e106      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d073      	beq.n	8005448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d129      	bne.n	80053bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005368:	4b81      	ldr	r3, [pc, #516]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0f4      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005378:	f000 f9d0 	bl	800571c <RCC_GetSysClockFreqFromPLLSource>
 800537c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4a7c      	ldr	r2, [pc, #496]	@ (8005574 <HAL_RCC_ClockConfig+0x268>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d93f      	bls.n	8005406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005386:	4b7a      	ldr	r3, [pc, #488]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800539a:	2b00      	cmp	r3, #0
 800539c:	d033      	beq.n	8005406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d12f      	bne.n	8005406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053a6:	4b72      	ldr	r3, [pc, #456]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053ae:	4a70      	ldr	r2, [pc, #448]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053b6:	2380      	movs	r3, #128	@ 0x80
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e024      	b.n	8005406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0c6      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d4:	4b66      	ldr	r3, [pc, #408]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0be      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053e4:	f000 f8ce 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4a61      	ldr	r2, [pc, #388]	@ (8005574 <HAL_RCC_ClockConfig+0x268>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d909      	bls.n	8005406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053fa:	4a5d      	ldr	r2, [pc, #372]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80053fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005402:	2380      	movs	r3, #128	@ 0x80
 8005404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005406:	4b5a      	ldr	r3, [pc, #360]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f023 0203 	bic.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4957      	ldr	r1, [pc, #348]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005414:	4313      	orrs	r3, r2
 8005416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005418:	f7fc fe94 	bl	8002144 <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541e:	e00a      	b.n	8005436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005420:	f7fc fe90 	bl	8002144 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e095      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	4b4e      	ldr	r3, [pc, #312]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 020c 	and.w	r2, r3, #12
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	429a      	cmp	r2, r3
 8005446:	d1eb      	bne.n	8005420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d023      	beq.n	800549c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b43      	ldr	r3, [pc, #268]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4a42      	ldr	r2, [pc, #264]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800546a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005478:	4b3d      	ldr	r3, [pc, #244]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005480:	4a3b      	ldr	r2, [pc, #236]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b39      	ldr	r3, [pc, #228]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4936      	ldr	r1, [pc, #216]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
 800549a:	e008      	b.n	80054ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b80      	cmp	r3, #128	@ 0x80
 80054a0:	d105      	bne.n	80054ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054a2:	4b33      	ldr	r3, [pc, #204]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4a32      	ldr	r2, [pc, #200]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 80054a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ae:	4b2f      	ldr	r3, [pc, #188]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d21d      	bcs.n	80054f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054bc:	4b2b      	ldr	r3, [pc, #172]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 020f 	bic.w	r2, r3, #15
 80054c4:	4929      	ldr	r1, [pc, #164]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054cc:	f7fc fe3a 	bl	8002144 <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d2:	e00a      	b.n	80054ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d4:	f7fc fe36 	bl	8002144 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e03b      	b.n	8005562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b20      	ldr	r3, [pc, #128]	@ (800556c <HAL_RCC_ClockConfig+0x260>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d1ed      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005504:	4b1a      	ldr	r3, [pc, #104]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4917      	ldr	r1, [pc, #92]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005522:	4b13      	ldr	r3, [pc, #76]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	490f      	ldr	r1, [pc, #60]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005536:	f000 f825 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 800553a:	4602      	mov	r2, r0
 800553c:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <HAL_RCC_ClockConfig+0x264>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	490c      	ldr	r1, [pc, #48]	@ (8005578 <HAL_RCC_ClockConfig+0x26c>)
 8005548:	5ccb      	ldrb	r3, [r1, r3]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <HAL_RCC_ClockConfig+0x270>)
 8005554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <HAL_RCC_ClockConfig+0x274>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fc faf2 	bl	8001b44 <HAL_InitTick>
 8005560:	4603      	mov	r3, r0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40022000 	.word	0x40022000
 8005570:	40021000 	.word	0x40021000
 8005574:	04c4b400 	.word	0x04c4b400
 8005578:	08018bbc 	.word	0x08018bbc
 800557c:	20000004 	.word	0x20000004
 8005580:	20000008 	.word	0x20000008

08005584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800558a:	4b2c      	ldr	r3, [pc, #176]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b04      	cmp	r3, #4
 8005594:	d102      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005596:	4b2a      	ldr	r3, [pc, #168]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e047      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800559c:	4b27      	ldr	r3, [pc, #156]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 030c 	and.w	r3, r3, #12
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d102      	bne.n	80055ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055a8:	4b26      	ldr	r3, [pc, #152]	@ (8005644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	e03e      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055ae:	4b23      	ldr	r3, [pc, #140]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d136      	bne.n	8005628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ba:	4b20      	ldr	r3, [pc, #128]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055c4:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3301      	adds	r3, #1
 80055d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d10c      	bne.n	80055f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e0:	4a16      	ldr	r2, [pc, #88]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e2:	68d2      	ldr	r2, [r2, #12]
 80055e4:	0a12      	lsrs	r2, r2, #8
 80055e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	617b      	str	r3, [r7, #20]
      break;
 80055f0:	e00c      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055f2:	4a13      	ldr	r2, [pc, #76]	@ (8005640 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	4a10      	ldr	r2, [pc, #64]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fc:	68d2      	ldr	r2, [r2, #12]
 80055fe:	0a12      	lsrs	r2, r2, #8
 8005600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]
      break;
 800560a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800560c:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <HAL_RCC_GetSysClockFreq+0xb8>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	0e5b      	lsrs	r3, r3, #25
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	3301      	adds	r3, #1
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e001      	b.n	800562c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800562c:	693b      	ldr	r3, [r7, #16]
}
 800562e:	4618      	mov	r0, r3
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	00f42400 	.word	0x00f42400
 8005644:	016e3600 	.word	0x016e3600

08005648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800564c:	4b03      	ldr	r3, [pc, #12]	@ (800565c <HAL_RCC_GetHCLKFreq+0x14>)
 800564e:	681b      	ldr	r3, [r3, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000004 	.word	0x20000004

08005660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005664:	f7ff fff0 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4904      	ldr	r1, [pc, #16]	@ (8005688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000
 8005688:	08018bcc 	.word	0x08018bcc

0800568c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005690:	f7ff ffda 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0adb      	lsrs	r3, r3, #11
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4904      	ldr	r1, [pc, #16]	@ (80056b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40021000 	.word	0x40021000
 80056b4:	08018bcc 	.word	0x08018bcc

080056b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	220f      	movs	r2, #15
 80056c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056c8:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0203 	and.w	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80056ec:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <HAL_RCC_GetClockConfig+0x5c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	08db      	lsrs	r3, r3, #3
 80056f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80056fa:	4b07      	ldr	r3, [pc, #28]	@ (8005718 <HAL_RCC_GetClockConfig+0x60>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	601a      	str	r2, [r3, #0]
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	40022000 	.word	0x40022000

0800571c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005722:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d10c      	bne.n	800575a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005740:	4a17      	ldr	r2, [pc, #92]	@ (80057a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	4a14      	ldr	r2, [pc, #80]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800574a:	68d2      	ldr	r2, [r2, #12]
 800574c:	0a12      	lsrs	r2, r2, #8
 800574e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	617b      	str	r3, [r7, #20]
    break;
 8005758:	e00c      	b.n	8005774 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800575a:	4a12      	ldr	r2, [pc, #72]	@ (80057a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	4a0e      	ldr	r2, [pc, #56]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005764:	68d2      	ldr	r2, [r2, #12]
 8005766:	0a12      	lsrs	r2, r2, #8
 8005768:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800576c:	fb02 f303 	mul.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]
    break;
 8005772:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005774:	4b09      	ldr	r3, [pc, #36]	@ (800579c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	0e5b      	lsrs	r3, r3, #25
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	3301      	adds	r3, #1
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800578e:	687b      	ldr	r3, [r7, #4]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	40021000 	.word	0x40021000
 80057a0:	016e3600 	.word	0x016e3600
 80057a4:	00f42400 	.word	0x00f42400

080057a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057b0:	2300      	movs	r3, #0
 80057b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057b4:	2300      	movs	r3, #0
 80057b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8098 	beq.w	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c6:	2300      	movs	r3, #0
 80057c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ca:	4b43      	ldr	r3, [pc, #268]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d6:	4b40      	ldr	r3, [pc, #256]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	4a3f      	ldr	r2, [pc, #252]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057e2:	4b3d      	ldr	r3, [pc, #244]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ee:	2301      	movs	r3, #1
 80057f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f2:	4b3a      	ldr	r3, [pc, #232]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a39      	ldr	r2, [pc, #228]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057fe:	f7fc fca1 	bl	8002144 <HAL_GetTick>
 8005802:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005804:	e009      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005806:	f7fc fc9d 	bl	8002144 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d902      	bls.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	74fb      	strb	r3, [r7, #19]
        break;
 8005818:	e005      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800581a:	4b30      	ldr	r3, [pc, #192]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0ef      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d159      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800582c:	4b2a      	ldr	r3, [pc, #168]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005836:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01e      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d019      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005848:	4b23      	ldr	r3, [pc, #140]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005852:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005854:	4b20      	ldr	r3, [pc, #128]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585a:	4a1f      	ldr	r2, [pc, #124]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005864:	4b1c      	ldr	r3, [pc, #112]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005874:	4a18      	ldr	r2, [pc, #96]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fc fc5d 	bl	8002144 <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588c:	e00b      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fc fc59 	bl	8002144 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d902      	bls.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	74fb      	strb	r3, [r7, #19]
            break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a6:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ec      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ba:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c8:	4903      	ldr	r1, [pc, #12]	@ (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80058d0:	e008      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d2:	7cfb      	ldrb	r3, [r7, #19]
 80058d4:	74bb      	strb	r3, [r7, #18]
 80058d6:	e005      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058d8:	40021000 	.word	0x40021000
 80058dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	7cfb      	ldrb	r3, [r7, #19]
 80058e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e4:	7c7b      	ldrb	r3, [r7, #17]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d105      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ea:	4ba7      	ldr	r3, [pc, #668]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ee:	4aa6      	ldr	r2, [pc, #664]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005902:	4ba1      	ldr	r3, [pc, #644]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005908:	f023 0203 	bic.w	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	499d      	ldr	r1, [pc, #628]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005924:	4b98      	ldr	r3, [pc, #608]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592a:	f023 020c 	bic.w	r2, r3, #12
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4995      	ldr	r1, [pc, #596]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005946:	4b90      	ldr	r3, [pc, #576]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	498c      	ldr	r1, [pc, #560]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005968:	4b87      	ldr	r3, [pc, #540]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	4984      	ldr	r1, [pc, #528]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800598a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005990:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	497b      	ldr	r1, [pc, #492]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059ac:	4b76      	ldr	r3, [pc, #472]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	4973      	ldr	r1, [pc, #460]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ce:	4b6e      	ldr	r3, [pc, #440]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	496a      	ldr	r1, [pc, #424]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059f0:	4b65      	ldr	r3, [pc, #404]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	4962      	ldr	r1, [pc, #392]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a12:	4b5d      	ldr	r3, [pc, #372]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	4959      	ldr	r1, [pc, #356]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a34:	4b54      	ldr	r3, [pc, #336]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a3a:	f023 0203 	bic.w	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	4951      	ldr	r1, [pc, #324]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a56:	4b4c      	ldr	r3, [pc, #304]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	4948      	ldr	r1, [pc, #288]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d015      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a78:	4b43      	ldr	r3, [pc, #268]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a86:	4940      	ldr	r1, [pc, #256]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a96:	d105      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a98:	4b3b      	ldr	r3, [pc, #236]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a3a      	ldr	r2, [pc, #232]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aa2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ab0:	4b35      	ldr	r3, [pc, #212]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	4932      	ldr	r1, [pc, #200]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ace:	d105      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ada:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ae8:	4b27      	ldr	r3, [pc, #156]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af6:	4924      	ldr	r1, [pc, #144]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b06:	d105      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b08:	4b1f      	ldr	r3, [pc, #124]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d015      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b20:	4b19      	ldr	r3, [pc, #100]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2e:	4916      	ldr	r1, [pc, #88]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b3e:	d105      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b40:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a10      	ldr	r2, [pc, #64]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d019      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b58:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	4908      	ldr	r1, [pc, #32]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b76:	d109      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b78:	4b03      	ldr	r3, [pc, #12]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a02      	ldr	r2, [pc, #8]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b82:	60d3      	str	r3, [r2, #12]
 8005b84:	e002      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b86:	bf00      	nop
 8005b88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b98:	4b29      	ldr	r3, [pc, #164]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	4926      	ldr	r1, [pc, #152]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bb8:	4b21      	ldr	r3, [pc, #132]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d015      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bde:	4918      	ldr	r1, [pc, #96]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bf0:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a12      	ldr	r2, [pc, #72]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c08:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	490a      	ldr	r1, [pc, #40]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c28:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a04      	ldr	r2, [pc, #16]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c34:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40021000 	.word	0x40021000

08005c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e049      	b.n	8005cea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f841 	bl	8005cf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f000 fa30 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d001      	beq.n	8005d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e054      	b.n	8005dca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a26      	ldr	r2, [pc, #152]	@ (8005dd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d022      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4a:	d01d      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a22      	ldr	r2, [pc, #136]	@ (8005ddc <HAL_TIM_Base_Start_IT+0xd4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d018      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x80>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a21      	ldr	r2, [pc, #132]	@ (8005de0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x80>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1f      	ldr	r2, [pc, #124]	@ (8005de4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00e      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x80>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d009      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x80>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1c      	ldr	r2, [pc, #112]	@ (8005dec <HAL_TIM_Base_Start_IT+0xe4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x80>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d115      	bne.n	8005db4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xec>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d015      	beq.n	8005dc6 <HAL_TIM_Base_Start_IT+0xbe>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da0:	d011      	beq.n	8005dc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	e008      	b.n	8005dc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e000      	b.n	8005dc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40000400 	.word	0x40000400
 8005de0:	40000800 	.word	0x40000800
 8005de4:	40000c00 	.word	0x40000c00
 8005de8:	40013400 	.word	0x40013400
 8005dec:	40014000 	.word	0x40014000
 8005df0:	40015000 	.word	0x40015000
 8005df4:	00010007 	.word	0x00010007

08005df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d020      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0202 	mvn.w	r2, #2
 8005e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f931 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f923 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f934 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d020      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0204 	mvn.w	r2, #4
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f90b 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8fd 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f90e 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d020      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01b      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0208 	mvn.w	r2, #8
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8e5 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f8d7 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f8e8 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d020      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0210 	mvn.w	r2, #16
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2208      	movs	r2, #8
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8bf 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8b1 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8c2 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0201 	mvn.w	r2, #1
 8005f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fb fc48 	bl	80017f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f969 	bl	8006264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f961 	bl	8006278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f87c 	bl	80060d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0220 	mvn.w	r2, #32
 8005ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f929 	bl	8006250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00c      	beq.n	8006022 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800601a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f935 	bl	800628c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800603e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f92d 	bl	80062a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00c      	beq.n	800606a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f925 	bl	80062b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00c      	beq.n	800608e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f91d 	bl	80062c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a4c      	ldr	r2, [pc, #304]	@ (800622c <TIM_Base_SetConfig+0x144>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d017      	beq.n	8006130 <TIM_Base_SetConfig+0x48>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006106:	d013      	beq.n	8006130 <TIM_Base_SetConfig+0x48>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a49      	ldr	r2, [pc, #292]	@ (8006230 <TIM_Base_SetConfig+0x148>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00f      	beq.n	8006130 <TIM_Base_SetConfig+0x48>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a48      	ldr	r2, [pc, #288]	@ (8006234 <TIM_Base_SetConfig+0x14c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00b      	beq.n	8006130 <TIM_Base_SetConfig+0x48>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a47      	ldr	r2, [pc, #284]	@ (8006238 <TIM_Base_SetConfig+0x150>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d007      	beq.n	8006130 <TIM_Base_SetConfig+0x48>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a46      	ldr	r2, [pc, #280]	@ (800623c <TIM_Base_SetConfig+0x154>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_Base_SetConfig+0x48>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a45      	ldr	r2, [pc, #276]	@ (8006240 <TIM_Base_SetConfig+0x158>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d108      	bne.n	8006142 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a39      	ldr	r2, [pc, #228]	@ (800622c <TIM_Base_SetConfig+0x144>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d023      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006150:	d01f      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a36      	ldr	r2, [pc, #216]	@ (8006230 <TIM_Base_SetConfig+0x148>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01b      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a35      	ldr	r2, [pc, #212]	@ (8006234 <TIM_Base_SetConfig+0x14c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d017      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a34      	ldr	r2, [pc, #208]	@ (8006238 <TIM_Base_SetConfig+0x150>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a33      	ldr	r2, [pc, #204]	@ (800623c <TIM_Base_SetConfig+0x154>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00f      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a33      	ldr	r2, [pc, #204]	@ (8006244 <TIM_Base_SetConfig+0x15c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00b      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a32      	ldr	r2, [pc, #200]	@ (8006248 <TIM_Base_SetConfig+0x160>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d007      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a31      	ldr	r2, [pc, #196]	@ (800624c <TIM_Base_SetConfig+0x164>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_Base_SetConfig+0xaa>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2c      	ldr	r2, [pc, #176]	@ (8006240 <TIM_Base_SetConfig+0x158>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d108      	bne.n	80061a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a18      	ldr	r2, [pc, #96]	@ (800622c <TIM_Base_SetConfig+0x144>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <TIM_Base_SetConfig+0x110>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a1a      	ldr	r2, [pc, #104]	@ (800623c <TIM_Base_SetConfig+0x154>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00f      	beq.n	80061f8 <TIM_Base_SetConfig+0x110>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a1a      	ldr	r2, [pc, #104]	@ (8006244 <TIM_Base_SetConfig+0x15c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00b      	beq.n	80061f8 <TIM_Base_SetConfig+0x110>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a19      	ldr	r2, [pc, #100]	@ (8006248 <TIM_Base_SetConfig+0x160>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d007      	beq.n	80061f8 <TIM_Base_SetConfig+0x110>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a18      	ldr	r2, [pc, #96]	@ (800624c <TIM_Base_SetConfig+0x164>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_Base_SetConfig+0x110>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a13      	ldr	r2, [pc, #76]	@ (8006240 <TIM_Base_SetConfig+0x158>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d103      	bne.n	8006200 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b01      	cmp	r3, #1
 8006210:	d105      	bne.n	800621e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	611a      	str	r2, [r3, #16]
  }
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800
 8006238:	40000c00 	.word	0x40000c00
 800623c:	40013400 	.word	0x40013400
 8006240:	40015000 	.word	0x40015000
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800

08006250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e042      	b.n	8006374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fb fe0d 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	@ 0x24
 800630a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 f806 	bl	8007338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fd07 	bl	8006d40 <UART_SetConfig>
 8006332:	4603      	mov	r3, r0
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e01b      	b.n	8006374 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800634a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800635a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 f885 	bl	800747c <UART_CheckIdleState>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	@ 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006390:	2b20      	cmp	r3, #32
 8006392:	d167      	bne.n	8006464 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_UART_Transmit_DMA+0x24>
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e060      	b.n	8006466 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	88fa      	ldrh	r2, [r7, #6]
 80063ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	88fa      	ldrh	r2, [r7, #6]
 80063b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2221      	movs	r2, #33	@ 0x21
 80063c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d028      	beq.n	8006424 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063d6:	4a26      	ldr	r2, [pc, #152]	@ (8006470 <HAL_UART_Transmit_DMA+0xf4>)
 80063d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063de:	4a25      	ldr	r2, [pc, #148]	@ (8006474 <HAL_UART_Transmit_DMA+0xf8>)
 80063e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063e6:	4a24      	ldr	r2, [pc, #144]	@ (8006478 <HAL_UART_Transmit_DMA+0xfc>)
 80063e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ee:	2200      	movs	r2, #0
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063fa:	4619      	mov	r1, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3328      	adds	r3, #40	@ 0x28
 8006402:	461a      	mov	r2, r3
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	f7fd ff67 	bl	80042d8 <HAL_DMA_Start_IT>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d009      	beq.n	8006424 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2210      	movs	r2, #16
 8006414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e020      	b.n	8006466 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2240      	movs	r2, #64	@ 0x40
 800642a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	613b      	str	r3, [r7, #16]
   return(result);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644c:	623a      	str	r2, [r7, #32]
 800644e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	69f9      	ldr	r1, [r7, #28]
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	61bb      	str	r3, [r7, #24]
   return(result);
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
  }
}
 8006466:	4618      	mov	r0, r3
 8006468:	3728      	adds	r7, #40	@ 0x28
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	08007947 	.word	0x08007947
 8006474:	080079e1 	.word	0x080079e1
 8006478:	08007b67 	.word	0x08007b67

0800647c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	@ 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006490:	2b20      	cmp	r3, #32
 8006492:	d137      	bne.n	8006504 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_UART_Receive_DMA+0x24>
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e030      	b.n	8006506 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_UART_Receive_DMA+0x94>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01f      	beq.n	80064f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d018      	beq.n	80064f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	613b      	str	r3, [r7, #16]
   return(result);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	623b      	str	r3, [r7, #32]
 80064e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e6      	bne.n	80064c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f001 f8d6 	bl	80076ac <UART_Start_Receive_DMA>
 8006500:	4603      	mov	r3, r0
 8006502:	e000      	b.n	8006506 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006504:	2302      	movs	r3, #2
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	3728      	adds	r7, #40	@ 0x28
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40008000 	.word	0x40008000

08006514 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b090      	sub	sp, #64	@ 0x40
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800652a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006536:	2b80      	cmp	r3, #128	@ 0x80
 8006538:	d139      	bne.n	80065ae <HAL_UART_DMAStop+0x9a>
 800653a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653c:	2b21      	cmp	r3, #33	@ 0x21
 800653e:	d136      	bne.n	80065ae <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3308      	adds	r3, #8
 8006546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3308      	adds	r3, #8
 800655e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006560:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d015      	beq.n	80065a8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006580:	4618      	mov	r0, r3
 8006582:	f7fd ff24 	bl	80043ce <HAL_DMA_Abort>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00d      	beq.n	80065a8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe f88b 	bl	80046ac <HAL_DMA_GetError>
 8006596:	4603      	mov	r3, r0
 8006598:	2b20      	cmp	r3, #32
 800659a:	d105      	bne.n	80065a8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2210      	movs	r2, #16
 80065a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e047      	b.n	8006638 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f925 	bl	80077f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b8:	2b40      	cmp	r3, #64	@ 0x40
 80065ba:	d13c      	bne.n	8006636 <HAL_UART_DMAStop+0x122>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065be:	2b22      	cmp	r3, #34	@ 0x22
 80065c0:	d139      	bne.n	8006636 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3308      	adds	r3, #8
 80065c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e2:	61ba      	str	r2, [r7, #24]
 80065e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6979      	ldr	r1, [r7, #20]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	613b      	str	r3, [r7, #16]
   return(result);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e5      	bne.n	80065c2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d017      	beq.n	8006630 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd fee1 	bl	80043ce <HAL_DMA_Abort>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00e      	beq.n	8006630 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe f847 	bl	80046ac <HAL_DMA_GetError>
 800661e:	4603      	mov	r3, r0
 8006620:	2b20      	cmp	r3, #32
 8006622:	d105      	bne.n	8006630 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2210      	movs	r2, #16
 8006628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e003      	b.n	8006638 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f922 	bl	800787a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3740      	adds	r7, #64	@ 0x40
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b0ba      	sub	sp, #232	@ 0xe8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006666:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800666a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800666e:	4013      	ands	r3, r2
 8006670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d11b      	bne.n	80066b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8300 	beq.w	8006caa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
      }
      return;
 80066b2:	e2fa      	b.n	8006caa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8123 	beq.w	8006904 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066c2:	4b8d      	ldr	r3, [pc, #564]	@ (80068f8 <HAL_UART_IRQHandler+0x2b8>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80066ce:	4b8b      	ldr	r3, [pc, #556]	@ (80068fc <HAL_UART_IRQHandler+0x2bc>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8116 	beq.w	8006904 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <HAL_UART_IRQHandler+0xc8>
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d011      	beq.n	8006738 <HAL_UART_IRQHandler+0xf8>
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2202      	movs	r2, #2
 8006726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d011      	beq.n	8006768 <HAL_UART_IRQHandler+0x128>
 8006744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2204      	movs	r2, #4
 8006756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006780:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006784:	4b5c      	ldr	r3, [pc, #368]	@ (80068f8 <HAL_UART_IRQHandler+0x2b8>)
 8006786:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679a:	f043 0208 	orr.w	r2, r3, #8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_UART_IRQHandler+0x196>
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8266 	beq.w	8006cae <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682a:	2b40      	cmp	r3, #64	@ 0x40
 800682c:	d005      	beq.n	800683a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800682e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006832:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006836:	2b00      	cmp	r3, #0
 8006838:	d054      	beq.n	80068e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 f81d 	bl	800787a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684a:	2b40      	cmp	r3, #64	@ 0x40
 800684c:	d146      	bne.n	80068dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800686c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800687a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800687e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1d9      	bne.n	800684e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d017      	beq.n	80068d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068aa:	4a15      	ldr	r2, [pc, #84]	@ (8006900 <HAL_UART_IRQHandler+0x2c0>)
 80068ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fd fde3 	bl	8004480 <HAL_DMA_Abort_IT>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d019      	beq.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80068ce:	4610      	mov	r0, r2
 80068d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d2:	e00f      	b.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fa1d 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068da:	e00b      	b.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa19 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e2:	e007      	b.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa15 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80068f2:	e1dc      	b.n	8006cae <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	bf00      	nop
    return;
 80068f6:	e1da      	b.n	8006cae <HAL_UART_IRQHandler+0x66e>
 80068f8:	10000001 	.word	0x10000001
 80068fc:	04000120 	.word	0x04000120
 8006900:	08007be7 	.word	0x08007be7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 8170 	bne.w	8006bee <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8169 	beq.w	8006bee <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8162 	beq.w	8006bee <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2210      	movs	r2, #16
 8006930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693c:	2b40      	cmp	r3, #64	@ 0x40
 800693e:	f040 80d8 	bne.w	8006af2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80af 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006960:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006964:	429a      	cmp	r2, r3
 8006966:	f080 80a7 	bcs.w	8006ab8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	f040 8087 	bne.w	8006a96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800699c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1da      	bne.n	8006988 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e1      	bne.n	80069d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e3      	bne.n	8006a0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a64:	f023 0310 	bic.w	r3, r3, #16
 8006a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e4      	bne.n	8006a54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd fc9c 	bl	80043ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f939 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006ab6:	e0fc      	b.n	8006cb2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	f040 80f5 	bne.w	8006cb2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	f040 80eb 	bne.w	8006cb2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f91c 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
      return;
 8006af0:	e0df      	b.n	8006cb2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80d1 	beq.w	8006cb6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80cc 	beq.w	8006cb6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e4      	bne.n	8006b1e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	623b      	str	r3, [r7, #32]
   return(result);
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3308      	adds	r3, #8
 8006b78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e1      	bne.n	8006b54 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 0310 	bic.w	r3, r3, #16
 8006bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	69b9      	ldr	r1, [r7, #24]
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e4      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f89e 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bec:	e063      	b.n	8006cb6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00e      	beq.n	8006c18 <HAL_UART_IRQHandler+0x5d8>
 8006bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f825 	bl	8007c60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c16:	e051      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d014      	beq.n	8006c4e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d105      	bne.n	8006c3c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d03a      	beq.n	8006cba <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
    }
    return;
 8006c4c:	e035      	b.n	8006cba <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_UART_IRQHandler+0x62e>
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 ffcf 	bl	8007c0a <UART_EndTransmit_IT>
    return;
 8006c6c:	e026      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <HAL_UART_IRQHandler+0x64e>
 8006c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fffe 	bl	8007c88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c8c:	e016      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d010      	beq.n	8006cbc <HAL_UART_IRQHandler+0x67c>
 8006c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	da0c      	bge.n	8006cbc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 ffe6 	bl	8007c74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ca8:	e008      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
      return;
 8006caa:	bf00      	nop
 8006cac:	e006      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
    return;
 8006cae:	bf00      	nop
 8006cb0:	e004      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
      return;
 8006cb2:	bf00      	nop
 8006cb4:	e002      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
      return;
 8006cb6:	bf00      	nop
 8006cb8:	e000      	b.n	8006cbc <HAL_UART_IRQHandler+0x67c>
    return;
 8006cba:	bf00      	nop
  }
}
 8006cbc:	37e8      	adds	r7, #232	@ 0xe8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d44:	b08c      	sub	sp, #48	@ 0x30
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4baa      	ldr	r3, [pc, #680]	@ (8007018 <UART_SetConfig+0x2d8>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a9f      	ldr	r2, [pc, #636]	@ (800701c <UART_SetConfig+0x2dc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da8:	4313      	orrs	r3, r2
 8006daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006db6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	f023 010f 	bic.w	r1, r3, #15
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a90      	ldr	r2, [pc, #576]	@ (8007020 <UART_SetConfig+0x2e0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d125      	bne.n	8006e30 <UART_SetConfig+0xf0>
 8006de4:	4b8f      	ldr	r3, [pc, #572]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d81a      	bhi.n	8006e28 <UART_SetConfig+0xe8>
 8006df2:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <UART_SetConfig+0xb8>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e19 	.word	0x08006e19
 8006e00:	08006e11 	.word	0x08006e11
 8006e04:	08006e21 	.word	0x08006e21
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e116      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e10:	2302      	movs	r3, #2
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e16:	e112      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e10e      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e26:	e10a      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2e:	e106      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a7c      	ldr	r2, [pc, #496]	@ (8007028 <UART_SetConfig+0x2e8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d138      	bne.n	8006eac <UART_SetConfig+0x16c>
 8006e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e40:	f003 030c 	and.w	r3, r3, #12
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	d82d      	bhi.n	8006ea4 <UART_SetConfig+0x164>
 8006e48:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <UART_SetConfig+0x110>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e85 	.word	0x08006e85
 8006e54:	08006ea5 	.word	0x08006ea5
 8006e58:	08006ea5 	.word	0x08006ea5
 8006e5c:	08006ea5 	.word	0x08006ea5
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006ea5 	.word	0x08006ea5
 8006e68:	08006ea5 	.word	0x08006ea5
 8006e6c:	08006ea5 	.word	0x08006ea5
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	08006ea5 	.word	0x08006ea5
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006e9d 	.word	0x08006e9d
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8a:	e0d8      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e92:	e0d4      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e94:	2304      	movs	r3, #4
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9a:	e0d0      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea2:	e0cc      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eaa:	e0c8      	b.n	800703e <UART_SetConfig+0x2fe>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800702c <UART_SetConfig+0x2ec>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d125      	bne.n	8006f02 <UART_SetConfig+0x1c2>
 8006eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ec0:	2b30      	cmp	r3, #48	@ 0x30
 8006ec2:	d016      	beq.n	8006ef2 <UART_SetConfig+0x1b2>
 8006ec4:	2b30      	cmp	r3, #48	@ 0x30
 8006ec6:	d818      	bhi.n	8006efa <UART_SetConfig+0x1ba>
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d00a      	beq.n	8006ee2 <UART_SetConfig+0x1a2>
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d814      	bhi.n	8006efa <UART_SetConfig+0x1ba>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <UART_SetConfig+0x19a>
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d008      	beq.n	8006eea <UART_SetConfig+0x1aa>
 8006ed8:	e00f      	b.n	8006efa <UART_SetConfig+0x1ba>
 8006eda:	2300      	movs	r3, #0
 8006edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee0:	e0ad      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee8:	e0a9      	b.n	800703e <UART_SetConfig+0x2fe>
 8006eea:	2304      	movs	r3, #4
 8006eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef0:	e0a5      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef8:	e0a1      	b.n	800703e <UART_SetConfig+0x2fe>
 8006efa:	2310      	movs	r3, #16
 8006efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f00:	e09d      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a4a      	ldr	r2, [pc, #296]	@ (8007030 <UART_SetConfig+0x2f0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d125      	bne.n	8006f58 <UART_SetConfig+0x218>
 8006f0c:	4b45      	ldr	r3, [pc, #276]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f18:	d016      	beq.n	8006f48 <UART_SetConfig+0x208>
 8006f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f1c:	d818      	bhi.n	8006f50 <UART_SetConfig+0x210>
 8006f1e:	2b80      	cmp	r3, #128	@ 0x80
 8006f20:	d00a      	beq.n	8006f38 <UART_SetConfig+0x1f8>
 8006f22:	2b80      	cmp	r3, #128	@ 0x80
 8006f24:	d814      	bhi.n	8006f50 <UART_SetConfig+0x210>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <UART_SetConfig+0x1f0>
 8006f2a:	2b40      	cmp	r3, #64	@ 0x40
 8006f2c:	d008      	beq.n	8006f40 <UART_SetConfig+0x200>
 8006f2e:	e00f      	b.n	8006f50 <UART_SetConfig+0x210>
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f36:	e082      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3e:	e07e      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f46:	e07a      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4e:	e076      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f56:	e072      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a35      	ldr	r2, [pc, #212]	@ (8007034 <UART_SetConfig+0x2f4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d12a      	bne.n	8006fb8 <UART_SetConfig+0x278>
 8006f62:	4b30      	ldr	r3, [pc, #192]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f70:	d01a      	beq.n	8006fa8 <UART_SetConfig+0x268>
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f76:	d81b      	bhi.n	8006fb0 <UART_SetConfig+0x270>
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f7c:	d00c      	beq.n	8006f98 <UART_SetConfig+0x258>
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f82:	d815      	bhi.n	8006fb0 <UART_SetConfig+0x270>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <UART_SetConfig+0x250>
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f8c:	d008      	beq.n	8006fa0 <UART_SetConfig+0x260>
 8006f8e:	e00f      	b.n	8006fb0 <UART_SetConfig+0x270>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e052      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e04e      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e04a      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fae:	e046      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb6:	e042      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a17      	ldr	r2, [pc, #92]	@ (800701c <UART_SetConfig+0x2dc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d13a      	bne.n	8007038 <UART_SetConfig+0x2f8>
 8006fc2:	4b18      	ldr	r3, [pc, #96]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fd0:	d01a      	beq.n	8007008 <UART_SetConfig+0x2c8>
 8006fd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fd6:	d81b      	bhi.n	8007010 <UART_SetConfig+0x2d0>
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fdc:	d00c      	beq.n	8006ff8 <UART_SetConfig+0x2b8>
 8006fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe2:	d815      	bhi.n	8007010 <UART_SetConfig+0x2d0>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <UART_SetConfig+0x2b0>
 8006fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fec:	d008      	beq.n	8007000 <UART_SetConfig+0x2c0>
 8006fee:	e00f      	b.n	8007010 <UART_SetConfig+0x2d0>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff6:	e022      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e01e      	b.n	800703e <UART_SetConfig+0x2fe>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007006:	e01a      	b.n	800703e <UART_SetConfig+0x2fe>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700e:	e016      	b.n	800703e <UART_SetConfig+0x2fe>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007016:	e012      	b.n	800703e <UART_SetConfig+0x2fe>
 8007018:	cfff69f3 	.word	0xcfff69f3
 800701c:	40008000 	.word	0x40008000
 8007020:	40013800 	.word	0x40013800
 8007024:	40021000 	.word	0x40021000
 8007028:	40004400 	.word	0x40004400
 800702c:	40004800 	.word	0x40004800
 8007030:	40004c00 	.word	0x40004c00
 8007034:	40005000 	.word	0x40005000
 8007038:	2310      	movs	r3, #16
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4aae      	ldr	r2, [pc, #696]	@ (80072fc <UART_SetConfig+0x5bc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	f040 8097 	bne.w	8007178 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800704a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800704e:	2b08      	cmp	r3, #8
 8007050:	d823      	bhi.n	800709a <UART_SetConfig+0x35a>
 8007052:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <UART_SetConfig+0x318>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	0800707d 	.word	0x0800707d
 800705c:	0800709b 	.word	0x0800709b
 8007060:	08007085 	.word	0x08007085
 8007064:	0800709b 	.word	0x0800709b
 8007068:	0800708b 	.word	0x0800708b
 800706c:	0800709b 	.word	0x0800709b
 8007070:	0800709b 	.word	0x0800709b
 8007074:	0800709b 	.word	0x0800709b
 8007078:	08007093 	.word	0x08007093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fe faf0 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8007080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007082:	e010      	b.n	80070a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007084:	4b9e      	ldr	r3, [pc, #632]	@ (8007300 <UART_SetConfig+0x5c0>)
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007088:	e00d      	b.n	80070a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708a:	f7fe fa7b 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 800708e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007090:	e009      	b.n	80070a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007098:	e005      	b.n	80070a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8130 	beq.w	800730e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	4a94      	ldr	r2, [pc, #592]	@ (8007304 <UART_SetConfig+0x5c4>)
 80070b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d305      	bcc.n	80070de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d903      	bls.n	80070e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070e4:	e113      	b.n	800730e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	2200      	movs	r2, #0
 80070ea:	60bb      	str	r3, [r7, #8]
 80070ec:	60fa      	str	r2, [r7, #12]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	4a84      	ldr	r2, [pc, #528]	@ (8007304 <UART_SetConfig+0x5c4>)
 80070f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2200      	movs	r2, #0
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007108:	f7f9 fafe 	bl	8000708 <__aeabi_uldivmod>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	020b      	lsls	r3, r1, #8
 800711e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007122:	0202      	lsls	r2, r0, #8
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	6849      	ldr	r1, [r1, #4]
 8007128:	0849      	lsrs	r1, r1, #1
 800712a:	2000      	movs	r0, #0
 800712c:	460c      	mov	r4, r1
 800712e:	4605      	mov	r5, r0
 8007130:	eb12 0804 	adds.w	r8, r2, r4
 8007134:	eb43 0905 	adc.w	r9, r3, r5
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	469a      	mov	sl, r3
 8007140:	4693      	mov	fp, r2
 8007142:	4652      	mov	r2, sl
 8007144:	465b      	mov	r3, fp
 8007146:	4640      	mov	r0, r8
 8007148:	4649      	mov	r1, r9
 800714a:	f7f9 fadd 	bl	8000708 <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4613      	mov	r3, r2
 8007154:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800715c:	d308      	bcc.n	8007170 <UART_SetConfig+0x430>
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007164:	d204      	bcs.n	8007170 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6a3a      	ldr	r2, [r7, #32]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	e0ce      	b.n	800730e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007176:	e0ca      	b.n	800730e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007180:	d166      	bne.n	8007250 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007182:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007186:	2b08      	cmp	r3, #8
 8007188:	d827      	bhi.n	80071da <UART_SetConfig+0x49a>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <UART_SetConfig+0x450>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071b5 	.word	0x080071b5
 8007194:	080071bd 	.word	0x080071bd
 8007198:	080071c5 	.word	0x080071c5
 800719c:	080071db 	.word	0x080071db
 80071a0:	080071cb 	.word	0x080071cb
 80071a4:	080071db 	.word	0x080071db
 80071a8:	080071db 	.word	0x080071db
 80071ac:	080071db 	.word	0x080071db
 80071b0:	080071d3 	.word	0x080071d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7fe fa54 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 80071b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071ba:	e014      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071bc:	f7fe fa66 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 80071c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071c2:	e010      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007300 <UART_SetConfig+0x5c0>)
 80071c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071c8:	e00d      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ca:	f7fe f9db 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 80071ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071d0:	e009      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071d8:	e005      	b.n	80071e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8090 	beq.w	800730e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	4a44      	ldr	r2, [pc, #272]	@ (8007304 <UART_SetConfig+0x5c4>)
 80071f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007200:	005a      	lsls	r2, r3, #1
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	441a      	add	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d916      	bls.n	8007248 <UART_SetConfig+0x508>
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007220:	d212      	bcs.n	8007248 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f023 030f 	bic.w	r3, r3, #15
 800722a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	085b      	lsrs	r3, r3, #1
 8007230:	b29b      	uxth	r3, r3
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	b29a      	uxth	r2, r3
 8007238:	8bfb      	ldrh	r3, [r7, #30]
 800723a:	4313      	orrs	r3, r2
 800723c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	8bfa      	ldrh	r2, [r7, #30]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	e062      	b.n	800730e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800724e:	e05e      	b.n	800730e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007250:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007254:	2b08      	cmp	r3, #8
 8007256:	d828      	bhi.n	80072aa <UART_SetConfig+0x56a>
 8007258:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <UART_SetConfig+0x520>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007285 	.word	0x08007285
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007295 	.word	0x08007295
 800726c:	080072ab 	.word	0x080072ab
 8007270:	0800729b 	.word	0x0800729b
 8007274:	080072ab 	.word	0x080072ab
 8007278:	080072ab 	.word	0x080072ab
 800727c:	080072ab 	.word	0x080072ab
 8007280:	080072a3 	.word	0x080072a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007284:	f7fe f9ec 	bl	8005660 <HAL_RCC_GetPCLK1Freq>
 8007288:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800728a:	e014      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800728c:	f7fe f9fe 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 8007290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007292:	e010      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007294:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <UART_SetConfig+0x5c0>)
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007298:	e00d      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729a:	f7fe f973 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 800729e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072a0:	e009      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072a8:	e005      	b.n	80072b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072b4:	bf00      	nop
    }

    if (pclk != 0U)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d028      	beq.n	800730e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c0:	4a10      	ldr	r2, [pc, #64]	@ (8007304 <UART_SetConfig+0x5c4>)
 80072c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c6:	461a      	mov	r2, r3
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	441a      	add	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d910      	bls.n	8007308 <UART_SetConfig+0x5c8>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ec:	d20c      	bcs.n	8007308 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60da      	str	r2, [r3, #12]
 80072f8:	e009      	b.n	800730e <UART_SetConfig+0x5ce>
 80072fa:	bf00      	nop
 80072fc:	40008000 	.word	0x40008000
 8007300:	00f42400 	.word	0x00f42400
 8007304:	08018bd4 	.word	0x08018bd4
      }
      else
      {
        ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2201      	movs	r2, #1
 8007312:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2201      	movs	r2, #1
 800731a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2200      	movs	r2, #0
 8007322:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2200      	movs	r2, #0
 8007328:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800732a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800732e:	4618      	mov	r0, r3
 8007330:	3730      	adds	r7, #48	@ 0x30
 8007332:	46bd      	mov	sp, r7
 8007334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007436:	d10a      	bne.n	800744e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b098      	sub	sp, #96	@ 0x60
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800748c:	f7fa fe5a 	bl	8002144 <HAL_GetTick>
 8007490:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d12f      	bne.n	8007500 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f88e 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d022      	beq.n	8007500 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e6      	bne.n	80074ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e063      	b.n	80075c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b04      	cmp	r3, #4
 800750c:	d149      	bne.n	80075a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800750e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007516:	2200      	movs	r2, #0
 8007518:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f857 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d03c      	beq.n	80075a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	623b      	str	r3, [r7, #32]
   return(result);
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800753c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007546:	633b      	str	r3, [r7, #48]	@ 0x30
 8007548:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800754c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e6      	bne.n	8007528 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	60fb      	str	r3, [r7, #12]
   return(result);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800757a:	61fa      	str	r2, [r7, #28]
 800757c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	69b9      	ldr	r1, [r7, #24]
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	617b      	str	r3, [r7, #20]
   return(result);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e5      	bne.n	800755a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e012      	b.n	80075c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3758      	adds	r7, #88	@ 0x58
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e0:	e04f      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075e8:	d04b      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ea:	f7fa fdab 	bl	8002144 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <UART_WaitOnFlagUntilTimeout+0x30>
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e04e      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d037      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b80      	cmp	r3, #128	@ 0x80
 8007616:	d034      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b40      	cmp	r3, #64	@ 0x40
 800761c:	d031      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b08      	cmp	r3, #8
 800762a:	d110      	bne.n	800764e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2208      	movs	r2, #8
 8007632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f920 	bl	800787a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2208      	movs	r2, #8
 800763e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e029      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800765c:	d111      	bne.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f906 	bl	800787a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e00f      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4013      	ands	r3, r2
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	429a      	cmp	r2, r3
 8007690:	bf0c      	ite	eq
 8007692:	2301      	moveq	r3, #1
 8007694:	2300      	movne	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	429a      	cmp	r2, r3
 800769e:	d0a0      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b096      	sub	sp, #88	@ 0x58
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2222      	movs	r2, #34	@ 0x22
 80076d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d02d      	beq.n	800773e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e8:	4a40      	ldr	r2, [pc, #256]	@ (80077ec <UART_Start_Receive_DMA+0x140>)
 80076ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f2:	4a3f      	ldr	r2, [pc, #252]	@ (80077f0 <UART_Start_Receive_DMA+0x144>)
 80076f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076fc:	4a3d      	ldr	r2, [pc, #244]	@ (80077f4 <UART_Start_Receive_DMA+0x148>)
 80076fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007706:	2200      	movs	r2, #0
 8007708:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3324      	adds	r3, #36	@ 0x24
 8007716:	4619      	mov	r1, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800771c:	461a      	mov	r2, r3
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	f7fc fdda 	bl	80042d8 <HAL_DMA_Start_IT>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2210      	movs	r2, #16
 800772e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e051      	b.n	80077e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800775a:	657b      	str	r3, [r7, #84]	@ 0x54
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007766:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800776a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007798:	637a      	str	r2, [r7, #52]	@ 0x34
 800779a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800779e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e5      	bne.n	8007778 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	613b      	str	r3, [r7, #16]
   return(result);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077cc:	623a      	str	r2, [r7, #32]
 80077ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3758      	adds	r7, #88	@ 0x58
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	080079fd 	.word	0x080079fd
 80077f0:	08007b29 	.word	0x08007b29
 80077f4:	08007b67 	.word	0x08007b67

080077f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b08f      	sub	sp, #60	@ 0x3c
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	61fb      	str	r3, [r7, #28]
   return(result);
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007814:	637b      	str	r3, [r7, #52]	@ 0x34
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007820:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e6      	bne.n	8007800 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	60bb      	str	r3, [r7, #8]
   return(result);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007848:	633b      	str	r3, [r7, #48]	@ 0x30
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007852:	61ba      	str	r2, [r7, #24]
 8007854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6979      	ldr	r1, [r7, #20]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	613b      	str	r3, [r7, #16]
   return(result);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e5      	bne.n	8007832 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800786e:	bf00      	nop
 8007870:	373c      	adds	r7, #60	@ 0x3c
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800787a:	b480      	push	{r7}
 800787c:	b095      	sub	sp, #84	@ 0x54
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80078a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e6      	bne.n	8007882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e3      	bne.n	80078b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d118      	bne.n	8007926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	60bb      	str	r3, [r7, #8]
   return(result);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f023 0310 	bic.w	r3, r3, #16
 8007908:	647b      	str	r3, [r7, #68]	@ 0x44
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6979      	ldr	r1, [r7, #20]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	613b      	str	r3, [r7, #16]
   return(result);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e6      	bne.n	80078f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800793a:	bf00      	nop
 800793c:	3754      	adds	r7, #84	@ 0x54
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b090      	sub	sp, #64	@ 0x40
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d137      	bne.n	80079d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007964:	2200      	movs	r2, #0
 8007966:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800796a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	623b      	str	r3, [r7, #32]
   return(result);
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007980:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3308      	adds	r3, #8
 8007988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800798a:	633a      	str	r2, [r7, #48]	@ 0x30
 800798c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800799e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079bc:	61fb      	str	r3, [r7, #28]
 80079be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	69b9      	ldr	r1, [r7, #24]
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079d0:	e002      	b.n	80079d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80079d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80079d4:	f7ff f976 	bl	8006cc4 <HAL_UART_TxCpltCallback>
}
 80079d8:	bf00      	nop
 80079da:	3740      	adds	r7, #64	@ 0x40
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff f972 	bl	8006cd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b09c      	sub	sp, #112	@ 0x70
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0320 	and.w	r3, r3, #32
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d171      	bne.n	8007afc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e6      	bne.n	8007a20 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a64:	f023 0301 	bic.w	r3, r3, #1
 8007a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a72:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e5      	bne.n	8007a52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	623b      	str	r3, [r7, #32]
   return(result);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007aa6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d118      	bne.n	8007afc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0310 	bic.w	r3, r3, #16
 8007ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	69b9      	ldr	r1, [r7, #24]
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	617b      	str	r3, [r7, #20]
   return(result);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e6      	bne.n	8007aca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007afe:	2200      	movs	r2, #0
 8007b00:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d107      	bne.n	8007b1a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b10:	4619      	mov	r1, r3
 8007b12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007b14:	f7ff f908 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b18:	e002      	b.n	8007b20 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007b1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007b1c:	f7ff f8e6 	bl	8006cec <HAL_UART_RxCpltCallback>
}
 8007b20:	bf00      	nop
 8007b22:	3770      	adds	r7, #112	@ 0x70
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d109      	bne.n	8007b58 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4619      	mov	r1, r3
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff f8e9 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b56:	e002      	b.n	8007b5e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7ff f8d1 	bl	8006d00 <HAL_UART_RxHalfCpltCallback>
}
 8007b5e:	bf00      	nop
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8e:	2b80      	cmp	r3, #128	@ 0x80
 8007b90:	d109      	bne.n	8007ba6 <UART_DMAError+0x40>
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b21      	cmp	r3, #33	@ 0x21
 8007b96:	d106      	bne.n	8007ba6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007ba0:	6978      	ldr	r0, [r7, #20]
 8007ba2:	f7ff fe29 	bl	80077f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb0:	2b40      	cmp	r3, #64	@ 0x40
 8007bb2:	d109      	bne.n	8007bc8 <UART_DMAError+0x62>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b22      	cmp	r3, #34	@ 0x22
 8007bb8:	d106      	bne.n	8007bc8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007bc2:	6978      	ldr	r0, [r7, #20]
 8007bc4:	f7ff fe59 	bl	800787a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bce:	f043 0210 	orr.w	r2, r3, #16
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bd8:	6978      	ldr	r0, [r7, #20]
 8007bda:	f7ff f89b 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bde:	bf00      	nop
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff f889 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b088      	sub	sp, #32
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff f836 	bl	8006cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c58:	bf00      	nop
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e027      	b.n	8007d02 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2224      	movs	r2, #36	@ 0x24
 8007cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e02d      	b.n	8007d82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2224      	movs	r2, #36	@ 0x24
 8007d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f850 	bl	8007e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e02d      	b.n	8007dfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2224      	movs	r2, #36	@ 0x24
 8007dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f812 	bl	8007e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d108      	bne.n	8007e2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e28:	e031      	b.n	8007e8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e2e:	2308      	movs	r3, #8
 8007e30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	0e5b      	lsrs	r3, r3, #25
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0307 	and.w	r3, r3, #7
 8007e40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	0f5b      	lsrs	r3, r3, #29
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	7b3a      	ldrb	r2, [r7, #12]
 8007e56:	4911      	ldr	r1, [pc, #68]	@ (8007e9c <UARTEx_SetNbDataToProcess+0x94>)
 8007e58:	5c8a      	ldrb	r2, [r1, r2]
 8007e5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e5e:	7b3a      	ldrb	r2, [r7, #12]
 8007e60:	490f      	ldr	r1, [pc, #60]	@ (8007ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8007e62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	7b7a      	ldrb	r2, [r7, #13]
 8007e74:	4909      	ldr	r1, [pc, #36]	@ (8007e9c <UARTEx_SetNbDataToProcess+0x94>)
 8007e76:	5c8a      	ldrb	r2, [r1, r2]
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e7c:	7b7a      	ldrb	r2, [r7, #13]
 8007e7e:	4908      	ldr	r1, [pc, #32]	@ (8007ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8007e80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	08018bec 	.word	0x08018bec
 8007ea0:	08018bf4 	.word	0x08018bf4

08007ea4 <__NVIC_SetPriority>:
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	db0a      	blt.n	8007ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	490c      	ldr	r1, [pc, #48]	@ (8007ef0 <__NVIC_SetPriority+0x4c>)
 8007ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec2:	0112      	lsls	r2, r2, #4
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ecc:	e00a      	b.n	8007ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	4908      	ldr	r1, [pc, #32]	@ (8007ef4 <__NVIC_SetPriority+0x50>)
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	3b04      	subs	r3, #4
 8007edc:	0112      	lsls	r2, r2, #4
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	761a      	strb	r2, [r3, #24]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	e000e100 	.word	0xe000e100
 8007ef4:	e000ed00 	.word	0xe000ed00

08007ef8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <SysTick_Handler+0x1c>)
 8007efe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f00:	f001 fd40 	bl	8009984 <xTaskGetSchedulerState>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d001      	beq.n	8007f0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f0a:	f002 fb35 	bl	800a578 <xPortSysTickHandler>
  }
}
 8007f0e:	bf00      	nop
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	e000e010 	.word	0xe000e010

08007f18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	f06f 0004 	mvn.w	r0, #4
 8007f22:	f7ff ffbf 	bl	8007ea4 <__NVIC_SetPriority>
#endif
}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f32:	f3ef 8305 	mrs	r3, IPSR
 8007f36:	603b      	str	r3, [r7, #0]
  return(result);
 8007f38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f3e:	f06f 0305 	mvn.w	r3, #5
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	e00c      	b.n	8007f60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f46:	4b0a      	ldr	r3, [pc, #40]	@ (8007f70 <osKernelInitialize+0x44>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d105      	bne.n	8007f5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f4e:	4b08      	ldr	r3, [pc, #32]	@ (8007f70 <osKernelInitialize+0x44>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e002      	b.n	8007f60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f60:	687b      	ldr	r3, [r7, #4]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20004ae8 	.word	0x20004ae8

08007f74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f7a:	f3ef 8305 	mrs	r3, IPSR
 8007f7e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f86:	f06f 0305 	mvn.w	r3, #5
 8007f8a:	607b      	str	r3, [r7, #4]
 8007f8c:	e010      	b.n	8007fb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fbc <osKernelStart+0x48>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d109      	bne.n	8007faa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f96:	f7ff ffbf 	bl	8007f18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f9a:	4b08      	ldr	r3, [pc, #32]	@ (8007fbc <osKernelStart+0x48>)
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fa0:	f001 f87a 	bl	8009098 <vTaskStartScheduler>
      stat = osOK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	607b      	str	r3, [r7, #4]
 8007fa8:	e002      	b.n	8007fb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fb0:	687b      	ldr	r3, [r7, #4]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20004ae8 	.word	0x20004ae8

08007fc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	@ 0x38
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fd0:	f3ef 8305 	mrs	r3, IPSR
 8007fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8007fd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d17e      	bne.n	80080da <osThreadNew+0x11a>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d07b      	beq.n	80080da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fe2:	2380      	movs	r3, #128	@ 0x80
 8007fe4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fe6:	2318      	movs	r3, #24
 8007fe8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ff2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d045      	beq.n	8008086 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <osThreadNew+0x48>
        name = attr->name;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d008      	beq.n	800802e <osThreadNew+0x6e>
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	2b38      	cmp	r3, #56	@ 0x38
 8008020:	d805      	bhi.n	800802e <osThreadNew+0x6e>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <osThreadNew+0x72>
        return (NULL);
 800802e:	2300      	movs	r3, #0
 8008030:	e054      	b.n	80080dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	089b      	lsrs	r3, r3, #2
 8008040:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00e      	beq.n	8008068 <osThreadNew+0xa8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008050:	d90a      	bls.n	8008068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <osThreadNew+0xa8>
        mem = 1;
 8008062:	2301      	movs	r3, #1
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	e010      	b.n	800808a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10c      	bne.n	800808a <osThreadNew+0xca>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d108      	bne.n	800808a <osThreadNew+0xca>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <osThreadNew+0xca>
          mem = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	e001      	b.n	800808a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d110      	bne.n	80080b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008098:	9202      	str	r2, [sp, #8]
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	6a3a      	ldr	r2, [r7, #32]
 80080a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fe1a 	bl	8008ce0 <xTaskCreateStatic>
 80080ac:	4603      	mov	r3, r0
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	e013      	b.n	80080da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d110      	bne.n	80080da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	f107 0310 	add.w	r3, r7, #16
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fe68 	bl	8008da0 <xTaskCreate>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d001      	beq.n	80080da <osThreadNew+0x11a>
            hTask = NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080da:	693b      	ldr	r3, [r7, #16]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3728      	adds	r7, #40	@ 0x28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ec:	f3ef 8305 	mrs	r3, IPSR
 80080f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80080f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <osDelay+0x1c>
    stat = osErrorISR;
 80080f8:	f06f 0305 	mvn.w	r3, #5
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	e007      	b.n	8008110 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <osDelay+0x2c>
      vTaskDelay(ticks);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 ff8e 	bl	800902c <vTaskDelay>
    }
  }

  return (stat);
 8008110:	68fb      	ldr	r3, [r7, #12]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4a07      	ldr	r2, [pc, #28]	@ (8008148 <vApplicationGetIdleTaskMemory+0x2c>)
 800812c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4a06      	ldr	r2, [pc, #24]	@ (800814c <vApplicationGetIdleTaskMemory+0x30>)
 8008132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2280      	movs	r2, #128	@ 0x80
 8008138:	601a      	str	r2, [r3, #0]
}
 800813a:	bf00      	nop
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20004aec 	.word	0x20004aec
 800814c:	20004b48 	.word	0x20004b48

08008150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4a07      	ldr	r2, [pc, #28]	@ (800817c <vApplicationGetTimerTaskMemory+0x2c>)
 8008160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	4a06      	ldr	r2, [pc, #24]	@ (8008180 <vApplicationGetTimerTaskMemory+0x30>)
 8008166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800816e:	601a      	str	r2, [r3, #0]
}
 8008170:	bf00      	nop
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	20004d48 	.word	0x20004d48
 8008180:	20004da4 	.word	0x20004da4

08008184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f103 0208 	add.w	r2, r3, #8
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800819c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f103 0208 	add.w	r2, r3, #8
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f103 0208 	add.w	r2, r3, #8
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081de:	b480      	push	{r7}
 80081e0:	b085      	sub	sp, #20
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	601a      	str	r2, [r3, #0]
}
 800821a:	bf00      	nop
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800823c:	d103      	bne.n	8008246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	e00c      	b.n	8008260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3308      	adds	r3, #8
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e002      	b.n	8008254 <vListInsert+0x2e>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	429a      	cmp	r2, r3
 800825e:	d2f6      	bcs.n	800824e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]
}
 800828c:	bf00      	nop
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6892      	ldr	r2, [r2, #8]
 80082ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6852      	ldr	r2, [r2, #4]
 80082b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d103      	bne.n	80082cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	1e5a      	subs	r2, r3, #1
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10b      	bne.n	8008318 <xQueueGenericReset+0x2c>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60bb      	str	r3, [r7, #8]
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	e7fd      	b.n	8008314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008318:	f002 f89e 	bl	800a458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	68f9      	ldr	r1, [r7, #12]
 8008326:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008328:	fb01 f303 	mul.w	r3, r1, r3
 800832c:	441a      	add	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008348:	3b01      	subs	r3, #1
 800834a:	68f9      	ldr	r1, [r7, #12]
 800834c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800834e:	fb01 f303 	mul.w	r3, r1, r3
 8008352:	441a      	add	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	22ff      	movs	r2, #255	@ 0xff
 800835c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	22ff      	movs	r2, #255	@ 0xff
 8008364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d114      	bne.n	8008398 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01a      	beq.n	80083ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3310      	adds	r3, #16
 800837a:	4618      	mov	r0, r3
 800837c:	f001 f91a 	bl	80095b4 <xTaskRemoveFromEventList>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d012      	beq.n	80083ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008386:	4b0d      	ldr	r3, [pc, #52]	@ (80083bc <xQueueGenericReset+0xd0>)
 8008388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	e009      	b.n	80083ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3310      	adds	r3, #16
 800839c:	4618      	mov	r0, r3
 800839e:	f7ff fef1 	bl	8008184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3324      	adds	r3, #36	@ 0x24
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff feec 	bl	8008184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083ac:	f002 f886 	bl	800a4bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083b0:	2301      	movs	r3, #1
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08e      	sub	sp, #56	@ 0x38
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083e6:	bf00      	nop
 80083e8:	bf00      	nop
 80083ea:	e7fd      	b.n	80083e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10b      	bne.n	800840a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <xQueueGenericCreateStatic+0x56>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <xQueueGenericCreateStatic+0x5a>
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <xQueueGenericCreateStatic+0x5c>
 800841a:	2300      	movs	r3, #0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10b      	bne.n	8008438 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	623b      	str	r3, [r7, #32]
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <xQueueGenericCreateStatic+0x84>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <xQueueGenericCreateStatic+0x88>
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <xQueueGenericCreateStatic+0x8a>
 8008448:	2300      	movs	r3, #0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	61fb      	str	r3, [r7, #28]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008466:	2350      	movs	r3, #80	@ 0x50
 8008468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b50      	cmp	r3, #80	@ 0x50
 800846e:	d00b      	beq.n	8008488 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	61bb      	str	r3, [r7, #24]
}
 8008482:	bf00      	nop
 8008484:	bf00      	nop
 8008486:	e7fd      	b.n	8008484 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008488:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800848e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00d      	beq.n	80084b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800849c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f805 	bl	80084ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3730      	adds	r7, #48	@ 0x30
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
 80084c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e002      	b.n	80084dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084e8:	2101      	movs	r1, #1
 80084ea:	69b8      	ldr	r0, [r7, #24]
 80084ec:	f7ff fefe 	bl	80082ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08e      	sub	sp, #56	@ 0x38
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <xQueueGenericSend+0x34>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <xQueueGenericSend+0x42>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <xQueueGenericSend+0x46>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <xQueueGenericSend+0x48>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10b      	bne.n	8008564 <xQueueGenericSend+0x64>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	e7fd      	b.n	8008560 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d103      	bne.n	8008572 <xQueueGenericSend+0x72>
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <xQueueGenericSend+0x76>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueGenericSend+0x78>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10b      	bne.n	8008594 <xQueueGenericSend+0x94>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	623b      	str	r3, [r7, #32]
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008594:	f001 f9f6 	bl	8009984 <xTaskGetSchedulerState>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <xQueueGenericSend+0xa4>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <xQueueGenericSend+0xa8>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <xQueueGenericSend+0xaa>
 80085a8:	2300      	movs	r3, #0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10b      	bne.n	80085c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	61fb      	str	r3, [r7, #28]
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	e7fd      	b.n	80085c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085c6:	f001 ff47 	bl	800a458 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d302      	bcc.n	80085dc <xQueueGenericSend+0xdc>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d129      	bne.n	8008630 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085e2:	f000 fa0f 	bl	8008a04 <prvCopyDataToQueue>
 80085e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d010      	beq.n	8008612 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	3324      	adds	r3, #36	@ 0x24
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 ffdd 	bl	80095b4 <xTaskRemoveFromEventList>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d013      	beq.n	8008628 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008600:	4b3f      	ldr	r3, [pc, #252]	@ (8008700 <xQueueGenericSend+0x200>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	e00a      	b.n	8008628 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008618:	4b39      	ldr	r3, [pc, #228]	@ (8008700 <xQueueGenericSend+0x200>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008628:	f001 ff48 	bl	800a4bc <vPortExitCritical>
				return pdPASS;
 800862c:	2301      	movs	r3, #1
 800862e:	e063      	b.n	80086f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d103      	bne.n	800863e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008636:	f001 ff41 	bl	800a4bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800863a:	2300      	movs	r3, #0
 800863c:	e05c      	b.n	80086f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008644:	f107 0314 	add.w	r3, r7, #20
 8008648:	4618      	mov	r0, r3
 800864a:	f001 f83f 	bl	80096cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008652:	f001 ff33 	bl	800a4bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008656:	f000 fd87 	bl	8009168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800865a:	f001 fefd 	bl	800a458 <vPortEnterCritical>
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008664:	b25b      	sxtb	r3, r3
 8008666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800866a:	d103      	bne.n	8008674 <xQueueGenericSend+0x174>
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800867a:	b25b      	sxtb	r3, r3
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008680:	d103      	bne.n	800868a <xQueueGenericSend+0x18a>
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800868a:	f001 ff17 	bl	800a4bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800868e:	1d3a      	adds	r2, r7, #4
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f001 f82e 	bl	80096f8 <xTaskCheckForTimeOut>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d124      	bne.n	80086ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086a4:	f000 faa6 	bl	8008bf4 <prvIsQueueFull>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d018      	beq.n	80086e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	3310      	adds	r3, #16
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 ff2a 	bl	8009510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086be:	f000 fa31 	bl	8008b24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086c2:	f000 fd5f 	bl	8009184 <xTaskResumeAll>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f47f af7c 	bne.w	80085c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80086ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008700 <xQueueGenericSend+0x200>)
 80086d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	e772      	b.n	80085c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086e2:	f000 fa1f 	bl	8008b24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086e6:	f000 fd4d 	bl	8009184 <xTaskResumeAll>
 80086ea:	e76c      	b.n	80085c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ee:	f000 fa19 	bl	8008b24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086f2:	f000 fd47 	bl	8009184 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3738      	adds	r7, #56	@ 0x38
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b090      	sub	sp, #64	@ 0x40
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10b      	bne.n	8008734 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800872e:	bf00      	nop
 8008730:	bf00      	nop
 8008732:	e7fd      	b.n	8008730 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d103      	bne.n	8008742 <xQueueGenericSendFromISR+0x3e>
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <xQueueGenericSendFromISR+0x42>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueGenericSendFromISR+0x44>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800875e:	bf00      	nop
 8008760:	bf00      	nop
 8008762:	e7fd      	b.n	8008760 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b02      	cmp	r3, #2
 8008768:	d103      	bne.n	8008772 <xQueueGenericSendFromISR+0x6e>
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <xQueueGenericSendFromISR+0x72>
 8008772:	2301      	movs	r3, #1
 8008774:	e000      	b.n	8008778 <xQueueGenericSendFromISR+0x74>
 8008776:	2300      	movs	r3, #0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	623b      	str	r3, [r7, #32]
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008794:	f001 ff40 	bl	800a618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008798:	f3ef 8211 	mrs	r2, BASEPRI
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	61fa      	str	r2, [r7, #28]
 80087ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087bc:	429a      	cmp	r2, r3
 80087be:	d302      	bcc.n	80087c6 <xQueueGenericSendFromISR+0xc2>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d12f      	bne.n	8008826 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087dc:	f000 f912 	bl	8008a04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e8:	d112      	bne.n	8008810 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d016      	beq.n	8008820 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	3324      	adds	r3, #36	@ 0x24
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fedc 	bl	80095b4 <xTaskRemoveFromEventList>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00e      	beq.n	8008820 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e007      	b.n	8008820 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008810:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008814:	3301      	adds	r3, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	b25a      	sxtb	r2, r3
 800881a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008820:	2301      	movs	r3, #1
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008824:	e001      	b.n	800882a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008826:	2300      	movs	r3, #0
 8008828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800882a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008834:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008838:	4618      	mov	r0, r3
 800883a:	3740      	adds	r7, #64	@ 0x40
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	@ 0x30
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800884c:	2300      	movs	r3, #0
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <xQueueReceive+0x32>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	623b      	str	r3, [r7, #32]
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <xQueueReceive+0x40>
 8008878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <xQueueReceive+0x44>
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <xQueueReceive+0x46>
 8008884:	2300      	movs	r3, #0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10b      	bne.n	80088a2 <xQueueReceive+0x62>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	61fb      	str	r3, [r7, #28]
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	e7fd      	b.n	800889e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088a2:	f001 f86f 	bl	8009984 <xTaskGetSchedulerState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <xQueueReceive+0x72>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <xQueueReceive+0x76>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <xQueueReceive+0x78>
 80088b6:	2300      	movs	r3, #0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10b      	bne.n	80088d4 <xQueueReceive+0x94>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	61bb      	str	r3, [r7, #24]
}
 80088ce:	bf00      	nop
 80088d0:	bf00      	nop
 80088d2:	e7fd      	b.n	80088d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088d4:	f001 fdc0 	bl	800a458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01f      	beq.n	8008924 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e8:	f000 f8f6 	bl	8008ad8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	1e5a      	subs	r2, r3, #1
 80088f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00f      	beq.n	800891c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fe:	3310      	adds	r3, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fe57 	bl	80095b4 <xTaskRemoveFromEventList>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800890c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a00 <xQueueReceive+0x1c0>)
 800890e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800891c:	f001 fdce 	bl	800a4bc <vPortExitCritical>
				return pdPASS;
 8008920:	2301      	movs	r3, #1
 8008922:	e069      	b.n	80089f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800892a:	f001 fdc7 	bl	800a4bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800892e:	2300      	movs	r3, #0
 8008930:	e062      	b.n	80089f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008938:	f107 0310 	add.w	r3, r7, #16
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fec5 	bl	80096cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008942:	2301      	movs	r3, #1
 8008944:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008946:	f001 fdb9 	bl	800a4bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800894a:	f000 fc0d 	bl	8009168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800894e:	f001 fd83 	bl	800a458 <vPortEnterCritical>
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008958:	b25b      	sxtb	r3, r3
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800895e:	d103      	bne.n	8008968 <xQueueReceive+0x128>
 8008960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800896e:	b25b      	sxtb	r3, r3
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008974:	d103      	bne.n	800897e <xQueueReceive+0x13e>
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800897e:	f001 fd9d 	bl	800a4bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008982:	1d3a      	adds	r2, r7, #4
 8008984:	f107 0310 	add.w	r3, r7, #16
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f000 feb4 	bl	80096f8 <xTaskCheckForTimeOut>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d123      	bne.n	80089de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008998:	f000 f916 	bl	8008bc8 <prvIsQueueEmpty>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d017      	beq.n	80089d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	3324      	adds	r3, #36	@ 0x24
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fdb0 	bl	8009510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089b2:	f000 f8b7 	bl	8008b24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089b6:	f000 fbe5 	bl	8009184 <xTaskResumeAll>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d189      	bne.n	80088d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80089c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a00 <xQueueReceive+0x1c0>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e780      	b.n	80088d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089d4:	f000 f8a6 	bl	8008b24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d8:	f000 fbd4 	bl	8009184 <xTaskResumeAll>
 80089dc:	e77a      	b.n	80088d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089e0:	f000 f8a0 	bl	8008b24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089e4:	f000 fbce 	bl	8009184 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ea:	f000 f8ed 	bl	8008bc8 <prvIsQueueEmpty>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f43f af6f 	beq.w	80088d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3730      	adds	r7, #48	@ 0x30
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10d      	bne.n	8008a3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d14d      	bne.n	8008ac6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 ffc6 	bl	80099c0 <xTaskPriorityDisinherit>
 8008a34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	609a      	str	r2, [r3, #8]
 8008a3c:	e043      	b.n	8008ac6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d119      	bne.n	8008a78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6858      	ldr	r0, [r3, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	f00f f97b 	bl	8017d4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d32b      	bcc.n	8008ac6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	e026      	b.n	8008ac6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68d8      	ldr	r0, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	461a      	mov	r2, r3
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	f00f f961 	bl	8017d4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a90:	425b      	negs	r3, r3
 8008a92:	441a      	add	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d207      	bcs.n	8008ab4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aac:	425b      	negs	r3, r3
 8008aae:	441a      	add	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d105      	bne.n	8008ac6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008ace:	697b      	ldr	r3, [r7, #20]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d018      	beq.n	8008b1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af2:	441a      	add	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d303      	bcc.n	8008b0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68d9      	ldr	r1, [r3, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b14:	461a      	mov	r2, r3
 8008b16:	6838      	ldr	r0, [r7, #0]
 8008b18:	f00f f917 	bl	8017d4a <memcpy>
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b2c:	f001 fc94 	bl	800a458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b38:	e011      	b.n	8008b5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d012      	beq.n	8008b68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3324      	adds	r3, #36	@ 0x24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fd34 	bl	80095b4 <xTaskRemoveFromEventList>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b52:	f000 fe35 	bl	80097c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dce9      	bgt.n	8008b3a <prvUnlockQueue+0x16>
 8008b66:	e000      	b.n	8008b6a <prvUnlockQueue+0x46>
					break;
 8008b68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	22ff      	movs	r2, #255	@ 0xff
 8008b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008b72:	f001 fca3 	bl	800a4bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b76:	f001 fc6f 	bl	800a458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b82:	e011      	b.n	8008ba8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d012      	beq.n	8008bb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3310      	adds	r3, #16
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fd0f 	bl	80095b4 <xTaskRemoveFromEventList>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b9c:	f000 fe10 	bl	80097c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dce9      	bgt.n	8008b84 <prvUnlockQueue+0x60>
 8008bb0:	e000      	b.n	8008bb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	22ff      	movs	r2, #255	@ 0xff
 8008bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008bbc:	f001 fc7e 	bl	800a4bc <vPortExitCritical>
}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bd0:	f001 fc42 	bl	800a458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e001      	b.n	8008be6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008be6:	f001 fc69 	bl	800a4bc <vPortExitCritical>

	return xReturn;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bfc:	f001 fc2c 	bl	800a458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d102      	bne.n	8008c12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e001      	b.n	8008c16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c16:	f001 fc51 	bl	800a4bc <vPortExitCritical>

	return xReturn;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	e014      	b.n	8008c5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c34:	4a0f      	ldr	r2, [pc, #60]	@ (8008c74 <vQueueAddToRegistry+0x50>)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c40:	490c      	ldr	r1, [pc, #48]	@ (8008c74 <vQueueAddToRegistry+0x50>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008c74 <vQueueAddToRegistry+0x50>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	4413      	add	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c56:	e006      	b.n	8008c66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	d9e7      	bls.n	8008c34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	200051a4 	.word	0x200051a4

08008c78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c88:	f001 fbe6 	bl	800a458 <vPortEnterCritical>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c92:	b25b      	sxtb	r3, r3
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c98:	d103      	bne.n	8008ca2 <vQueueWaitForMessageRestricted+0x2a>
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ca8:	b25b      	sxtb	r3, r3
 8008caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cae:	d103      	bne.n	8008cb8 <vQueueWaitForMessageRestricted+0x40>
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cb8:	f001 fc00 	bl	800a4bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	3324      	adds	r3, #36	@ 0x24
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fc45 	bl	800955c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cd2:	6978      	ldr	r0, [r7, #20]
 8008cd4:	f7ff ff26 	bl	8008b24 <prvUnlockQueue>
	}
 8008cd8:	bf00      	nop
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08e      	sub	sp, #56	@ 0x38
 8008ce4:	af04      	add	r7, sp, #16
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10b      	bne.n	8008d0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	623b      	str	r3, [r7, #32]
}
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	e7fd      	b.n	8008d08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10b      	bne.n	8008d2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	61fb      	str	r3, [r7, #28]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d2a:	235c      	movs	r3, #92	@ 0x5c
 8008d2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d32:	d00b      	beq.n	8008d4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	61bb      	str	r3, [r7, #24]
}
 8008d46:	bf00      	nop
 8008d48:	bf00      	nop
 8008d4a:	e7fd      	b.n	8008d48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01e      	beq.n	8008d92 <xTaskCreateStatic+0xb2>
 8008d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01b      	beq.n	8008d92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	9302      	str	r3, [sp, #8]
 8008d74:	f107 0314 	add.w	r3, r7, #20
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	68b9      	ldr	r1, [r7, #8]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f850 	bl	8008e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d8c:	f000 f8de 	bl	8008f4c <prvAddNewTaskToReadyList>
 8008d90:	e001      	b.n	8008d96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d96:	697b      	ldr	r3, [r7, #20]
	}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3728      	adds	r7, #40	@ 0x28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08c      	sub	sp, #48	@ 0x30
 8008da4:	af04      	add	r7, sp, #16
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 fc71 	bl	800a69c <pvPortMalloc>
 8008dba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00e      	beq.n	8008de0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dc2:	205c      	movs	r0, #92	@ 0x5c
 8008dc4:	f001 fc6a 	bl	800a69c <pvPortMalloc>
 8008dc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008dd6:	e005      	b.n	8008de4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dd8:	6978      	ldr	r0, [r7, #20]
 8008dda:	f001 fd2d 	bl	800a838 <vPortFree>
 8008dde:	e001      	b.n	8008de4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d017      	beq.n	8008e1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	2300      	movs	r3, #0
 8008df6:	9303      	str	r3, [sp, #12]
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	9302      	str	r3, [sp, #8]
 8008dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfe:	9301      	str	r3, [sp, #4]
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 f80e 	bl	8008e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e0e:	69f8      	ldr	r0, [r7, #28]
 8008e10:	f000 f89c 	bl	8008f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e14:	2301      	movs	r3, #1
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	e002      	b.n	8008e20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e20:	69bb      	ldr	r3, [r7, #24]
	}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3720      	adds	r7, #32
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b088      	sub	sp, #32
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	607a      	str	r2, [r7, #4]
 8008e36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	461a      	mov	r2, r3
 8008e42:	21a5      	movs	r1, #165	@ 0xa5
 8008e44:	f00e feb8 	bl	8017bb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e52:	3b01      	subs	r3, #1
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f023 0307 	bic.w	r3, r3, #7
 8008e60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	617b      	str	r3, [r7, #20]
}
 8008e7e:	bf00      	nop
 8008e80:	bf00      	nop
 8008e82:	e7fd      	b.n	8008e80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d01f      	beq.n	8008eca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	e012      	b.n	8008eb6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	7819      	ldrb	r1, [r3, #0]
 8008e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3334      	adds	r3, #52	@ 0x34
 8008ea0:	460a      	mov	r2, r1
 8008ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d006      	beq.n	8008ebe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	2b0f      	cmp	r3, #15
 8008eba:	d9e9      	bls.n	8008e90 <prvInitialiseNewTask+0x66>
 8008ebc:	e000      	b.n	8008ec0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ec8:	e003      	b.n	8008ed2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed4:	2b37      	cmp	r3, #55	@ 0x37
 8008ed6:	d901      	bls.n	8008edc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ed8:	2337      	movs	r3, #55	@ 0x37
 8008eda:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ee6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eea:	2200      	movs	r2, #0
 8008eec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff f966 	bl	80081c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	3318      	adds	r3, #24
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff f961 	bl	80081c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	68f9      	ldr	r1, [r7, #12]
 8008f2a:	69b8      	ldr	r0, [r7, #24]
 8008f2c:	f001 f966 	bl	800a1fc <pxPortInitialiseStack>
 8008f30:	4602      	mov	r2, r0
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f42:	bf00      	nop
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f54:	f001 fa80 	bl	800a458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f58:	4b2d      	ldr	r3, [pc, #180]	@ (8009010 <prvAddNewTaskToReadyList+0xc4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8009010 <prvAddNewTaskToReadyList+0xc4>)
 8008f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f62:	4b2c      	ldr	r3, [pc, #176]	@ (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f70:	4b27      	ldr	r3, [pc, #156]	@ (8009010 <prvAddNewTaskToReadyList+0xc4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d110      	bne.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f78:	f000 fc46 	bl	8009808 <prvInitialiseTaskLists>
 8008f7c:	e00d      	b.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f7e:	4b26      	ldr	r3, [pc, #152]	@ (8009018 <prvAddNewTaskToReadyList+0xcc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d109      	bne.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f86:	4b23      	ldr	r3, [pc, #140]	@ (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d802      	bhi.n	8008f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f94:	4a1f      	ldr	r2, [pc, #124]	@ (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f9a:	4b20      	ldr	r3, [pc, #128]	@ (800901c <prvAddNewTaskToReadyList+0xd0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800901c <prvAddNewTaskToReadyList+0xd0>)
 8008fa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800901c <prvAddNewTaskToReadyList+0xd0>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8009020 <prvAddNewTaskToReadyList+0xd4>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d903      	bls.n	8008fc0 <prvAddNewTaskToReadyList+0x74>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbc:	4a18      	ldr	r2, [pc, #96]	@ (8009020 <prvAddNewTaskToReadyList+0xd4>)
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4a15      	ldr	r2, [pc, #84]	@ (8009024 <prvAddNewTaskToReadyList+0xd8>)
 8008fce:	441a      	add	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7ff f901 	bl	80081de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fdc:	f001 fa6e 	bl	800a4bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <prvAddNewTaskToReadyList+0xcc>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00e      	beq.n	8009006 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8009014 <prvAddNewTaskToReadyList+0xc8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d207      	bcs.n	8009006 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8009028 <prvAddNewTaskToReadyList+0xdc>)
 8008ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	200056b8 	.word	0x200056b8
 8009014:	200051e4 	.word	0x200051e4
 8009018:	200056c4 	.word	0x200056c4
 800901c:	200056d4 	.word	0x200056d4
 8009020:	200056c0 	.word	0x200056c0
 8009024:	200051e8 	.word	0x200051e8
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d018      	beq.n	8009070 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800903e:	4b14      	ldr	r3, [pc, #80]	@ (8009090 <vTaskDelay+0x64>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00b      	beq.n	800905e <vTaskDelay+0x32>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	60bb      	str	r3, [r7, #8]
}
 8009058:	bf00      	nop
 800905a:	bf00      	nop
 800905c:	e7fd      	b.n	800905a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800905e:	f000 f883 	bl	8009168 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009062:	2100      	movs	r1, #0
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fd1b 	bl	8009aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800906a:	f000 f88b 	bl	8009184 <xTaskResumeAll>
 800906e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d107      	bne.n	8009086 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009076:	4b07      	ldr	r3, [pc, #28]	@ (8009094 <vTaskDelay+0x68>)
 8009078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	200056e0 	.word	0x200056e0
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	@ 0x28
 800909c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800909e:	2300      	movs	r3, #0
 80090a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090a6:	463a      	mov	r2, r7
 80090a8:	1d39      	adds	r1, r7, #4
 80090aa:	f107 0308 	add.w	r3, r7, #8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff f834 	bl	800811c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	9202      	str	r2, [sp, #8]
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	2300      	movs	r3, #0
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	2300      	movs	r3, #0
 80090c4:	460a      	mov	r2, r1
 80090c6:	4922      	ldr	r1, [pc, #136]	@ (8009150 <vTaskStartScheduler+0xb8>)
 80090c8:	4822      	ldr	r0, [pc, #136]	@ (8009154 <vTaskStartScheduler+0xbc>)
 80090ca:	f7ff fe09 	bl	8008ce0 <xTaskCreateStatic>
 80090ce:	4603      	mov	r3, r0
 80090d0:	4a21      	ldr	r2, [pc, #132]	@ (8009158 <vTaskStartScheduler+0xc0>)
 80090d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090d4:	4b20      	ldr	r3, [pc, #128]	@ (8009158 <vTaskStartScheduler+0xc0>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090dc:	2301      	movs	r3, #1
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e001      	b.n	80090e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d102      	bne.n	80090f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090ec:	f000 fd2c 	bl	8009b48 <xTimerCreateTimerTask>
 80090f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d116      	bne.n	8009126 <vTaskStartScheduler+0x8e>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	613b      	str	r3, [r7, #16]
}
 800910a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800910c:	4b13      	ldr	r3, [pc, #76]	@ (800915c <vTaskStartScheduler+0xc4>)
 800910e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009112:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009114:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <vTaskStartScheduler+0xc8>)
 8009116:	2201      	movs	r2, #1
 8009118:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800911a:	4b12      	ldr	r3, [pc, #72]	@ (8009164 <vTaskStartScheduler+0xcc>)
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009120:	f001 f8f6 	bl	800a310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009124:	e00f      	b.n	8009146 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800912c:	d10b      	bne.n	8009146 <vTaskStartScheduler+0xae>
	__asm volatile
 800912e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	60fb      	str	r3, [r7, #12]
}
 8009140:	bf00      	nop
 8009142:	bf00      	nop
 8009144:	e7fd      	b.n	8009142 <vTaskStartScheduler+0xaa>
}
 8009146:	bf00      	nop
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	08018b60 	.word	0x08018b60
 8009154:	080097d9 	.word	0x080097d9
 8009158:	200056dc 	.word	0x200056dc
 800915c:	200056d8 	.word	0x200056d8
 8009160:	200056c4 	.word	0x200056c4
 8009164:	200056bc 	.word	0x200056bc

08009168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800916c:	4b04      	ldr	r3, [pc, #16]	@ (8009180 <vTaskSuspendAll+0x18>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	4a03      	ldr	r2, [pc, #12]	@ (8009180 <vTaskSuspendAll+0x18>)
 8009174:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009176:	bf00      	nop
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	200056e0 	.word	0x200056e0

08009184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800918e:	2300      	movs	r3, #0
 8009190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009192:	4b42      	ldr	r3, [pc, #264]	@ (800929c <xTaskResumeAll+0x118>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	603b      	str	r3, [r7, #0]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091b2:	f001 f951 	bl	800a458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091b6:	4b39      	ldr	r3, [pc, #228]	@ (800929c <xTaskResumeAll+0x118>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	4a37      	ldr	r2, [pc, #220]	@ (800929c <xTaskResumeAll+0x118>)
 80091be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091c0:	4b36      	ldr	r3, [pc, #216]	@ (800929c <xTaskResumeAll+0x118>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d162      	bne.n	800928e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091c8:	4b35      	ldr	r3, [pc, #212]	@ (80092a0 <xTaskResumeAll+0x11c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d05e      	beq.n	800928e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091d0:	e02f      	b.n	8009232 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b34      	ldr	r3, [pc, #208]	@ (80092a4 <xTaskResumeAll+0x120>)
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3318      	adds	r3, #24
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff f85a 	bl	8008298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff f855 	bl	8008298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f2:	4b2d      	ldr	r3, [pc, #180]	@ (80092a8 <xTaskResumeAll+0x124>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d903      	bls.n	8009202 <xTaskResumeAll+0x7e>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fe:	4a2a      	ldr	r2, [pc, #168]	@ (80092a8 <xTaskResumeAll+0x124>)
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4a27      	ldr	r2, [pc, #156]	@ (80092ac <xTaskResumeAll+0x128>)
 8009210:	441a      	add	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3304      	adds	r3, #4
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f7fe ffe0 	bl	80081de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009222:	4b23      	ldr	r3, [pc, #140]	@ (80092b0 <xTaskResumeAll+0x12c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009228:	429a      	cmp	r2, r3
 800922a:	d302      	bcc.n	8009232 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800922c:	4b21      	ldr	r3, [pc, #132]	@ (80092b4 <xTaskResumeAll+0x130>)
 800922e:	2201      	movs	r2, #1
 8009230:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009232:	4b1c      	ldr	r3, [pc, #112]	@ (80092a4 <xTaskResumeAll+0x120>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1cb      	bne.n	80091d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009240:	f000 fb80 	bl	8009944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009244:	4b1c      	ldr	r3, [pc, #112]	@ (80092b8 <xTaskResumeAll+0x134>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d010      	beq.n	8009272 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009250:	f000 f846 	bl	80092e0 <xTaskIncrementTick>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800925a:	4b16      	ldr	r3, [pc, #88]	@ (80092b4 <xTaskResumeAll+0x130>)
 800925c:	2201      	movs	r2, #1
 800925e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3b01      	subs	r3, #1
 8009264:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f1      	bne.n	8009250 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800926c:	4b12      	ldr	r3, [pc, #72]	@ (80092b8 <xTaskResumeAll+0x134>)
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009272:	4b10      	ldr	r3, [pc, #64]	@ (80092b4 <xTaskResumeAll+0x130>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d009      	beq.n	800928e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800927a:	2301      	movs	r3, #1
 800927c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800927e:	4b0f      	ldr	r3, [pc, #60]	@ (80092bc <xTaskResumeAll+0x138>)
 8009280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800928e:	f001 f915 	bl	800a4bc <vPortExitCritical>

	return xAlreadyYielded;
 8009292:	68bb      	ldr	r3, [r7, #8]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	200056e0 	.word	0x200056e0
 80092a0:	200056b8 	.word	0x200056b8
 80092a4:	20005678 	.word	0x20005678
 80092a8:	200056c0 	.word	0x200056c0
 80092ac:	200051e8 	.word	0x200051e8
 80092b0:	200051e4 	.word	0x200051e4
 80092b4:	200056cc 	.word	0x200056cc
 80092b8:	200056c8 	.word	0x200056c8
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092c6:	4b05      	ldr	r3, [pc, #20]	@ (80092dc <xTaskGetTickCount+0x1c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092cc:	687b      	ldr	r3, [r7, #4]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	200056bc 	.word	0x200056bc

080092e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009428 <xTaskIncrementTick+0x148>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 8090 	bne.w	8009414 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092f4:	4b4d      	ldr	r3, [pc, #308]	@ (800942c <xTaskIncrementTick+0x14c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092fc:	4a4b      	ldr	r2, [pc, #300]	@ (800942c <xTaskIncrementTick+0x14c>)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d121      	bne.n	800934c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009308:	4b49      	ldr	r3, [pc, #292]	@ (8009430 <xTaskIncrementTick+0x150>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	603b      	str	r3, [r7, #0]
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	e7fd      	b.n	8009326 <xTaskIncrementTick+0x46>
 800932a:	4b41      	ldr	r3, [pc, #260]	@ (8009430 <xTaskIncrementTick+0x150>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	4b40      	ldr	r3, [pc, #256]	@ (8009434 <xTaskIncrementTick+0x154>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a3e      	ldr	r2, [pc, #248]	@ (8009430 <xTaskIncrementTick+0x150>)
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	4a3e      	ldr	r2, [pc, #248]	@ (8009434 <xTaskIncrementTick+0x154>)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	4b3e      	ldr	r3, [pc, #248]	@ (8009438 <xTaskIncrementTick+0x158>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3301      	adds	r3, #1
 8009344:	4a3c      	ldr	r2, [pc, #240]	@ (8009438 <xTaskIncrementTick+0x158>)
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	f000 fafc 	bl	8009944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800934c:	4b3b      	ldr	r3, [pc, #236]	@ (800943c <xTaskIncrementTick+0x15c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	429a      	cmp	r2, r3
 8009354:	d349      	bcc.n	80093ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009356:	4b36      	ldr	r3, [pc, #216]	@ (8009430 <xTaskIncrementTick+0x150>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009360:	4b36      	ldr	r3, [pc, #216]	@ (800943c <xTaskIncrementTick+0x15c>)
 8009362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009366:	601a      	str	r2, [r3, #0]
					break;
 8009368:	e03f      	b.n	80093ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936a:	4b31      	ldr	r3, [pc, #196]	@ (8009430 <xTaskIncrementTick+0x150>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d203      	bcs.n	800938a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009382:	4a2e      	ldr	r2, [pc, #184]	@ (800943c <xTaskIncrementTick+0x15c>)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009388:	e02f      	b.n	80093ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3304      	adds	r3, #4
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe ff82 	bl	8008298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	3318      	adds	r3, #24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe ff79 	bl	8008298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093aa:	4b25      	ldr	r3, [pc, #148]	@ (8009440 <xTaskIncrementTick+0x160>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d903      	bls.n	80093ba <xTaskIncrementTick+0xda>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	4a22      	ldr	r2, [pc, #136]	@ (8009440 <xTaskIncrementTick+0x160>)
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009444 <xTaskIncrementTick+0x164>)
 80093c8:	441a      	add	r2, r3
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7fe ff04 	bl	80081de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093da:	4b1b      	ldr	r3, [pc, #108]	@ (8009448 <xTaskIncrementTick+0x168>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d3b8      	bcc.n	8009356 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80093e4:	2301      	movs	r3, #1
 80093e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e8:	e7b5      	b.n	8009356 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093ea:	4b17      	ldr	r3, [pc, #92]	@ (8009448 <xTaskIncrementTick+0x168>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f0:	4914      	ldr	r1, [pc, #80]	@ (8009444 <xTaskIncrementTick+0x164>)
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d901      	bls.n	8009406 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009402:	2301      	movs	r3, #1
 8009404:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009406:	4b11      	ldr	r3, [pc, #68]	@ (800944c <xTaskIncrementTick+0x16c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d007      	beq.n	800941e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800940e:	2301      	movs	r3, #1
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	e004      	b.n	800941e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009414:	4b0e      	ldr	r3, [pc, #56]	@ (8009450 <xTaskIncrementTick+0x170>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	4a0d      	ldr	r2, [pc, #52]	@ (8009450 <xTaskIncrementTick+0x170>)
 800941c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800941e:	697b      	ldr	r3, [r7, #20]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	200056e0 	.word	0x200056e0
 800942c:	200056bc 	.word	0x200056bc
 8009430:	20005670 	.word	0x20005670
 8009434:	20005674 	.word	0x20005674
 8009438:	200056d0 	.word	0x200056d0
 800943c:	200056d8 	.word	0x200056d8
 8009440:	200056c0 	.word	0x200056c0
 8009444:	200051e8 	.word	0x200051e8
 8009448:	200051e4 	.word	0x200051e4
 800944c:	200056cc 	.word	0x200056cc
 8009450:	200056c8 	.word	0x200056c8

08009454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800945a:	4b28      	ldr	r3, [pc, #160]	@ (80094fc <vTaskSwitchContext+0xa8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009462:	4b27      	ldr	r3, [pc, #156]	@ (8009500 <vTaskSwitchContext+0xac>)
 8009464:	2201      	movs	r2, #1
 8009466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009468:	e042      	b.n	80094f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800946a:	4b25      	ldr	r3, [pc, #148]	@ (8009500 <vTaskSwitchContext+0xac>)
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009470:	4b24      	ldr	r3, [pc, #144]	@ (8009504 <vTaskSwitchContext+0xb0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	e011      	b.n	800949c <vTaskSwitchContext+0x48>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10b      	bne.n	8009496 <vTaskSwitchContext+0x42>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <vTaskSwitchContext+0x3e>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3b01      	subs	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	491a      	ldr	r1, [pc, #104]	@ (8009508 <vTaskSwitchContext+0xb4>)
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0e3      	beq.n	8009478 <vTaskSwitchContext+0x24>
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4a13      	ldr	r2, [pc, #76]	@ (8009508 <vTaskSwitchContext+0xb4>)
 80094bc:	4413      	add	r3, r2
 80094be:	60bb      	str	r3, [r7, #8]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	605a      	str	r2, [r3, #4]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	3308      	adds	r3, #8
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d104      	bne.n	80094e0 <vTaskSwitchContext+0x8c>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	605a      	str	r2, [r3, #4]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	4a09      	ldr	r2, [pc, #36]	@ (800950c <vTaskSwitchContext+0xb8>)
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	4a06      	ldr	r2, [pc, #24]	@ (8009504 <vTaskSwitchContext+0xb0>)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6013      	str	r3, [r2, #0]
}
 80094f0:	bf00      	nop
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	200056e0 	.word	0x200056e0
 8009500:	200056cc 	.word	0x200056cc
 8009504:	200056c0 	.word	0x200056c0
 8009508:	200051e8 	.word	0x200051e8
 800950c:	200051e4 	.word	0x200051e4

08009510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10b      	bne.n	8009538 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60fb      	str	r3, [r7, #12]
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	e7fd      	b.n	8009534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009538:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <vTaskPlaceOnEventList+0x48>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3318      	adds	r3, #24
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7fe fe70 	bl	8008226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009546:	2101      	movs	r1, #1
 8009548:	6838      	ldr	r0, [r7, #0]
 800954a:	f000 faa9 	bl	8009aa0 <prvAddCurrentTaskToDelayedList>
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200051e4 	.word	0x200051e4

0800955c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10b      	bne.n	8009586 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	617b      	str	r3, [r7, #20]
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	e7fd      	b.n	8009582 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009586:	4b0a      	ldr	r3, [pc, #40]	@ (80095b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3318      	adds	r3, #24
 800958c:	4619      	mov	r1, r3
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7fe fe25 	bl	80081de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800959e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	68b8      	ldr	r0, [r7, #8]
 80095a4:	f000 fa7c 	bl	8009aa0 <prvAddCurrentTaskToDelayedList>
	}
 80095a8:	bf00      	nop
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	200051e4 	.word	0x200051e4

080095b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	60fb      	str	r3, [r7, #12]
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	e7fd      	b.n	80095de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	3318      	adds	r3, #24
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fe56 	bl	8008298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009664 <xTaskRemoveFromEventList+0xb0>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d11d      	bne.n	8009630 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fe4d 	bl	8008298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009602:	4b19      	ldr	r3, [pc, #100]	@ (8009668 <xTaskRemoveFromEventList+0xb4>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d903      	bls.n	8009612 <xTaskRemoveFromEventList+0x5e>
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960e:	4a16      	ldr	r2, [pc, #88]	@ (8009668 <xTaskRemoveFromEventList+0xb4>)
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4a13      	ldr	r2, [pc, #76]	@ (800966c <xTaskRemoveFromEventList+0xb8>)
 8009620:	441a      	add	r2, r3
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7fe fdd8 	bl	80081de <vListInsertEnd>
 800962e:	e005      	b.n	800963c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	3318      	adds	r3, #24
 8009634:	4619      	mov	r1, r3
 8009636:	480e      	ldr	r0, [pc, #56]	@ (8009670 <xTaskRemoveFromEventList+0xbc>)
 8009638:	f7fe fdd1 	bl	80081de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009640:	4b0c      	ldr	r3, [pc, #48]	@ (8009674 <xTaskRemoveFromEventList+0xc0>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009646:	429a      	cmp	r2, r3
 8009648:	d905      	bls.n	8009656 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800964a:	2301      	movs	r3, #1
 800964c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800964e:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <xTaskRemoveFromEventList+0xc4>)
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e001      	b.n	800965a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800965a:	697b      	ldr	r3, [r7, #20]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	200056e0 	.word	0x200056e0
 8009668:	200056c0 	.word	0x200056c0
 800966c:	200051e8 	.word	0x200051e8
 8009670:	20005678 	.word	0x20005678
 8009674:	200051e4 	.word	0x200051e4
 8009678:	200056cc 	.word	0x200056cc

0800967c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10b      	bne.n	80096a2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	60fb      	str	r3, [r7, #12]
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	e7fd      	b.n	800969e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80096a2:	f000 fed9 	bl	800a458 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096a6:	4b07      	ldr	r3, [pc, #28]	@ (80096c4 <vTaskSetTimeOutState+0x48>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80096ae:	4b06      	ldr	r3, [pc, #24]	@ (80096c8 <vTaskSetTimeOutState+0x4c>)
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80096b6:	f000 ff01 	bl	800a4bc <vPortExitCritical>
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	200056d0 	.word	0x200056d0
 80096c8:	200056bc 	.word	0x200056bc

080096cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096d4:	4b06      	ldr	r3, [pc, #24]	@ (80096f0 <vTaskInternalSetTimeOutState+0x24>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096dc:	4b05      	ldr	r3, [pc, #20]	@ (80096f4 <vTaskInternalSetTimeOutState+0x28>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	605a      	str	r2, [r3, #4]
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	200056d0 	.word	0x200056d0
 80096f4:	200056bc 	.word	0x200056bc

080096f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10b      	bne.n	8009720 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	613b      	str	r3, [r7, #16]
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	e7fd      	b.n	800971c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10b      	bne.n	800973e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60fb      	str	r3, [r7, #12]
}
 8009738:	bf00      	nop
 800973a:	bf00      	nop
 800973c:	e7fd      	b.n	800973a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800973e:	f000 fe8b 	bl	800a458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009742:	4b1d      	ldr	r3, [pc, #116]	@ (80097b8 <xTaskCheckForTimeOut+0xc0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800975a:	d102      	bne.n	8009762 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800975c:	2300      	movs	r3, #0
 800975e:	61fb      	str	r3, [r7, #28]
 8009760:	e023      	b.n	80097aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	4b15      	ldr	r3, [pc, #84]	@ (80097bc <xTaskCheckForTimeOut+0xc4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d007      	beq.n	800977e <xTaskCheckForTimeOut+0x86>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	429a      	cmp	r2, r3
 8009776:	d302      	bcc.n	800977e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009778:	2301      	movs	r3, #1
 800977a:	61fb      	str	r3, [r7, #28]
 800977c:	e015      	b.n	80097aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	429a      	cmp	r2, r3
 8009786:	d20b      	bcs.n	80097a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	1ad2      	subs	r2, r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff ff99 	bl	80096cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800979a:	2300      	movs	r3, #0
 800979c:	61fb      	str	r3, [r7, #28]
 800979e:	e004      	b.n	80097aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097a6:	2301      	movs	r3, #1
 80097a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097aa:	f000 fe87 	bl	800a4bc <vPortExitCritical>

	return xReturn;
 80097ae:	69fb      	ldr	r3, [r7, #28]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3720      	adds	r7, #32
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	200056bc 	.word	0x200056bc
 80097bc:	200056d0 	.word	0x200056d0

080097c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097c4:	4b03      	ldr	r3, [pc, #12]	@ (80097d4 <vTaskMissedYield+0x14>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	601a      	str	r2, [r3, #0]
}
 80097ca:	bf00      	nop
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	200056cc 	.word	0x200056cc

080097d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097e0:	f000 f852 	bl	8009888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097e4:	4b06      	ldr	r3, [pc, #24]	@ (8009800 <prvIdleTask+0x28>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d9f9      	bls.n	80097e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097ec:	4b05      	ldr	r3, [pc, #20]	@ (8009804 <prvIdleTask+0x2c>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097fc:	e7f0      	b.n	80097e0 <prvIdleTask+0x8>
 80097fe:	bf00      	nop
 8009800:	200051e8 	.word	0x200051e8
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800980e:	2300      	movs	r3, #0
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	e00c      	b.n	800982e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4a12      	ldr	r2, [pc, #72]	@ (8009868 <prvInitialiseTaskLists+0x60>)
 8009820:	4413      	add	r3, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe fcae 	bl	8008184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	607b      	str	r3, [r7, #4]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b37      	cmp	r3, #55	@ 0x37
 8009832:	d9ef      	bls.n	8009814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009834:	480d      	ldr	r0, [pc, #52]	@ (800986c <prvInitialiseTaskLists+0x64>)
 8009836:	f7fe fca5 	bl	8008184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800983a:	480d      	ldr	r0, [pc, #52]	@ (8009870 <prvInitialiseTaskLists+0x68>)
 800983c:	f7fe fca2 	bl	8008184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009840:	480c      	ldr	r0, [pc, #48]	@ (8009874 <prvInitialiseTaskLists+0x6c>)
 8009842:	f7fe fc9f 	bl	8008184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009846:	480c      	ldr	r0, [pc, #48]	@ (8009878 <prvInitialiseTaskLists+0x70>)
 8009848:	f7fe fc9c 	bl	8008184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800984c:	480b      	ldr	r0, [pc, #44]	@ (800987c <prvInitialiseTaskLists+0x74>)
 800984e:	f7fe fc99 	bl	8008184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009852:	4b0b      	ldr	r3, [pc, #44]	@ (8009880 <prvInitialiseTaskLists+0x78>)
 8009854:	4a05      	ldr	r2, [pc, #20]	@ (800986c <prvInitialiseTaskLists+0x64>)
 8009856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009858:	4b0a      	ldr	r3, [pc, #40]	@ (8009884 <prvInitialiseTaskLists+0x7c>)
 800985a:	4a05      	ldr	r2, [pc, #20]	@ (8009870 <prvInitialiseTaskLists+0x68>)
 800985c:	601a      	str	r2, [r3, #0]
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	200051e8 	.word	0x200051e8
 800986c:	20005648 	.word	0x20005648
 8009870:	2000565c 	.word	0x2000565c
 8009874:	20005678 	.word	0x20005678
 8009878:	2000568c 	.word	0x2000568c
 800987c:	200056a4 	.word	0x200056a4
 8009880:	20005670 	.word	0x20005670
 8009884:	20005674 	.word	0x20005674

08009888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800988e:	e019      	b.n	80098c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009890:	f000 fde2 	bl	800a458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009894:	4b10      	ldr	r3, [pc, #64]	@ (80098d8 <prvCheckTasksWaitingTermination+0x50>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	3304      	adds	r3, #4
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe fcf9 	bl	8008298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098a6:	4b0d      	ldr	r3, [pc, #52]	@ (80098dc <prvCheckTasksWaitingTermination+0x54>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a0b      	ldr	r2, [pc, #44]	@ (80098dc <prvCheckTasksWaitingTermination+0x54>)
 80098ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098b0:	4b0b      	ldr	r3, [pc, #44]	@ (80098e0 <prvCheckTasksWaitingTermination+0x58>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	4a0a      	ldr	r2, [pc, #40]	@ (80098e0 <prvCheckTasksWaitingTermination+0x58>)
 80098b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098ba:	f000 fdff 	bl	800a4bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f810 	bl	80098e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098c4:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <prvCheckTasksWaitingTermination+0x58>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e1      	bne.n	8009890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	2000568c 	.word	0x2000568c
 80098dc:	200056b8 	.word	0x200056b8
 80098e0:	200056a0 	.word	0x200056a0

080098e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d108      	bne.n	8009908 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 ff9c 	bl	800a838 <vPortFree>
				vPortFree( pxTCB );
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 ff99 	bl	800a838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009906:	e019      	b.n	800993c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800990e:	2b01      	cmp	r3, #1
 8009910:	d103      	bne.n	800991a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 ff90 	bl	800a838 <vPortFree>
	}
 8009918:	e010      	b.n	800993c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009920:	2b02      	cmp	r3, #2
 8009922:	d00b      	beq.n	800993c <prvDeleteTCB+0x58>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	e7fd      	b.n	8009938 <prvDeleteTCB+0x54>
	}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800994a:	4b0c      	ldr	r3, [pc, #48]	@ (800997c <prvResetNextTaskUnblockTime+0x38>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009954:	4b0a      	ldr	r3, [pc, #40]	@ (8009980 <prvResetNextTaskUnblockTime+0x3c>)
 8009956:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800995a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800995c:	e008      	b.n	8009970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995e:	4b07      	ldr	r3, [pc, #28]	@ (800997c <prvResetNextTaskUnblockTime+0x38>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	4a04      	ldr	r2, [pc, #16]	@ (8009980 <prvResetNextTaskUnblockTime+0x3c>)
 800996e:	6013      	str	r3, [r2, #0]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	20005670 	.word	0x20005670
 8009980:	200056d8 	.word	0x200056d8

08009984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800998a:	4b0b      	ldr	r3, [pc, #44]	@ (80099b8 <xTaskGetSchedulerState+0x34>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009992:	2301      	movs	r3, #1
 8009994:	607b      	str	r3, [r7, #4]
 8009996:	e008      	b.n	80099aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009998:	4b08      	ldr	r3, [pc, #32]	@ (80099bc <xTaskGetSchedulerState+0x38>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099a0:	2302      	movs	r3, #2
 80099a2:	607b      	str	r3, [r7, #4]
 80099a4:	e001      	b.n	80099aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099a6:	2300      	movs	r3, #0
 80099a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099aa:	687b      	ldr	r3, [r7, #4]
	}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	200056c4 	.word	0x200056c4
 80099bc:	200056e0 	.word	0x200056e0

080099c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d058      	beq.n	8009a88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009a94 <xTaskPriorityDisinherit+0xd4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d00b      	beq.n	80099f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	e7fd      	b.n	80099f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10b      	bne.n	8009a18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60bb      	str	r3, [r7, #8]
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	e7fd      	b.n	8009a14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a1c:	1e5a      	subs	r2, r3, #1
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d02c      	beq.n	8009a88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d128      	bne.n	8009a88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe fc2c 	bl	8008298 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a58:	4b0f      	ldr	r3, [pc, #60]	@ (8009a98 <xTaskPriorityDisinherit+0xd8>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d903      	bls.n	8009a68 <xTaskPriorityDisinherit+0xa8>
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	4a0c      	ldr	r2, [pc, #48]	@ (8009a98 <xTaskPriorityDisinherit+0xd8>)
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4a09      	ldr	r2, [pc, #36]	@ (8009a9c <xTaskPriorityDisinherit+0xdc>)
 8009a76:	441a      	add	r2, r3
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fe fbad 	bl	80081de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a88:	697b      	ldr	r3, [r7, #20]
	}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	200051e4 	.word	0x200051e4
 8009a98:	200056c0 	.word	0x200056c0
 8009a9c:	200051e8 	.word	0x200051e8

08009aa0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aaa:	4b21      	ldr	r3, [pc, #132]	@ (8009b30 <prvAddCurrentTaskToDelayedList+0x90>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ab0:	4b20      	ldr	r3, [pc, #128]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fbee 	bl	8008298 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ac2:	d10a      	bne.n	8009ada <prvAddCurrentTaskToDelayedList+0x3a>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aca:	4b1a      	ldr	r3, [pc, #104]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4819      	ldr	r0, [pc, #100]	@ (8009b38 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ad4:	f7fe fb83 	bl	80081de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ad8:	e026      	b.n	8009b28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4413      	add	r3, r2
 8009ae0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ae2:	4b14      	ldr	r3, [pc, #80]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d209      	bcs.n	8009b06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af2:	4b12      	ldr	r3, [pc, #72]	@ (8009b3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f7fe fb91 	bl	8008226 <vListInsert>
}
 8009b04:	e010      	b.n	8009b28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b06:	4b0e      	ldr	r3, [pc, #56]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f7fe fb87 	bl	8008226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b18:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d202      	bcs.n	8009b28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b22:	4a08      	ldr	r2, [pc, #32]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	6013      	str	r3, [r2, #0]
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	200056bc 	.word	0x200056bc
 8009b34:	200051e4 	.word	0x200051e4
 8009b38:	200056a4 	.word	0x200056a4
 8009b3c:	20005674 	.word	0x20005674
 8009b40:	20005670 	.word	0x20005670
 8009b44:	200056d8 	.word	0x200056d8

08009b48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	@ 0x28
 8009b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b52:	f000 fb13 	bl	800a17c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b56:	4b1d      	ldr	r3, [pc, #116]	@ (8009bcc <xTimerCreateTimerTask+0x84>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d021      	beq.n	8009ba2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b66:	1d3a      	adds	r2, r7, #4
 8009b68:	f107 0108 	add.w	r1, r7, #8
 8009b6c:	f107 030c 	add.w	r3, r7, #12
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe faed 	bl	8008150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	9202      	str	r2, [sp, #8]
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	2302      	movs	r3, #2
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	2300      	movs	r3, #0
 8009b86:	460a      	mov	r2, r1
 8009b88:	4911      	ldr	r1, [pc, #68]	@ (8009bd0 <xTimerCreateTimerTask+0x88>)
 8009b8a:	4812      	ldr	r0, [pc, #72]	@ (8009bd4 <xTimerCreateTimerTask+0x8c>)
 8009b8c:	f7ff f8a8 	bl	8008ce0 <xTaskCreateStatic>
 8009b90:	4603      	mov	r3, r0
 8009b92:	4a11      	ldr	r2, [pc, #68]	@ (8009bd8 <xTimerCreateTimerTask+0x90>)
 8009b94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b96:	4b10      	ldr	r3, [pc, #64]	@ (8009bd8 <xTimerCreateTimerTask+0x90>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10b      	bne.n	8009bc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	613b      	str	r3, [r7, #16]
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009bc0:	697b      	ldr	r3, [r7, #20]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20005714 	.word	0x20005714
 8009bd0:	08018b68 	.word	0x08018b68
 8009bd4:	08009d15 	.word	0x08009d15
 8009bd8:	20005718 	.word	0x20005718

08009bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08a      	sub	sp, #40	@ 0x28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10b      	bne.n	8009c0c <xTimerGenericCommand+0x30>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	623b      	str	r3, [r7, #32]
}
 8009c06:	bf00      	nop
 8009c08:	bf00      	nop
 8009c0a:	e7fd      	b.n	8009c08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c0c:	4b19      	ldr	r3, [pc, #100]	@ (8009c74 <xTimerGenericCommand+0x98>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d02a      	beq.n	8009c6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b05      	cmp	r3, #5
 8009c24:	dc18      	bgt.n	8009c58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c26:	f7ff fead 	bl	8009984 <xTaskGetSchedulerState>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d109      	bne.n	8009c44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c30:	4b10      	ldr	r3, [pc, #64]	@ (8009c74 <xTimerGenericCommand+0x98>)
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	f107 0110 	add.w	r1, r7, #16
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c3c:	f7fe fc60 	bl	8008500 <xQueueGenericSend>
 8009c40:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c42:	e012      	b.n	8009c6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c44:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <xTimerGenericCommand+0x98>)
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	f107 0110 	add.w	r1, r7, #16
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f7fe fc56 	bl	8008500 <xQueueGenericSend>
 8009c54:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c56:	e008      	b.n	8009c6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c58:	4b06      	ldr	r3, [pc, #24]	@ (8009c74 <xTimerGenericCommand+0x98>)
 8009c5a:	6818      	ldr	r0, [r3, #0]
 8009c5c:	f107 0110 	add.w	r1, r7, #16
 8009c60:	2300      	movs	r3, #0
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	f7fe fd4e 	bl	8008704 <xQueueGenericSendFromISR>
 8009c68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3728      	adds	r7, #40	@ 0x28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20005714 	.word	0x20005714

08009c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c82:	4b23      	ldr	r3, [pc, #140]	@ (8009d10 <prvProcessExpiredTimer+0x98>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fb01 	bl	8008298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d023      	beq.n	8009cec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	699a      	ldr	r2, [r3, #24]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	18d1      	adds	r1, r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	6978      	ldr	r0, [r7, #20]
 8009cb2:	f000 f8d5 	bl	8009e60 <prvInsertTimerInActiveList>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d020      	beq.n	8009cfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	6978      	ldr	r0, [r7, #20]
 8009cc8:	f7ff ff88 	bl	8009bdc <xTimerGenericCommand>
 8009ccc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d114      	bne.n	8009cfe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	60fb      	str	r3, [r7, #12]
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	e7fd      	b.n	8009ce8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf2:	f023 0301 	bic.w	r3, r3, #1
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	4798      	blx	r3
}
 8009d06:	bf00      	nop
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	2000570c 	.word	0x2000570c

08009d14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d1c:	f107 0308 	add.w	r3, r7, #8
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f859 	bl	8009dd8 <prvGetNextExpireTime>
 8009d26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f805 	bl	8009d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d32:	f000 f8d7 	bl	8009ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d36:	bf00      	nop
 8009d38:	e7f0      	b.n	8009d1c <prvTimerTask+0x8>
	...

08009d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d46:	f7ff fa0f 	bl	8009168 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d4a:	f107 0308 	add.w	r3, r7, #8
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 f866 	bl	8009e20 <prvSampleTimeNow>
 8009d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d130      	bne.n	8009dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <prvProcessTimerOrBlockTask+0x3c>
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d806      	bhi.n	8009d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d6a:	f7ff fa0b 	bl	8009184 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff ff81 	bl	8009c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d76:	e024      	b.n	8009dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d008      	beq.n	8009d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d7e:	4b13      	ldr	r3, [pc, #76]	@ (8009dcc <prvProcessTimerOrBlockTask+0x90>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <prvProcessTimerOrBlockTask+0x50>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e000      	b.n	8009d8e <prvProcessTimerOrBlockTask+0x52>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d90:	4b0f      	ldr	r3, [pc, #60]	@ (8009dd0 <prvProcessTimerOrBlockTask+0x94>)
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f7fe ff6b 	bl	8008c78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009da2:	f7ff f9ef 	bl	8009184 <xTaskResumeAll>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009dac:	4b09      	ldr	r3, [pc, #36]	@ (8009dd4 <prvProcessTimerOrBlockTask+0x98>)
 8009dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	f3bf 8f6f 	isb	sy
}
 8009dbc:	e001      	b.n	8009dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009dbe:	f7ff f9e1 	bl	8009184 <xTaskResumeAll>
}
 8009dc2:	bf00      	nop
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20005710 	.word	0x20005710
 8009dd0:	20005714 	.word	0x20005714
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009de0:	4b0e      	ldr	r3, [pc, #56]	@ (8009e1c <prvGetNextExpireTime+0x44>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <prvGetNextExpireTime+0x16>
 8009dea:	2201      	movs	r2, #1
 8009dec:	e000      	b.n	8009df0 <prvGetNextExpireTime+0x18>
 8009dee:	2200      	movs	r2, #0
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d105      	bne.n	8009e08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dfc:	4b07      	ldr	r3, [pc, #28]	@ (8009e1c <prvGetNextExpireTime+0x44>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	e001      	b.n	8009e0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	2000570c 	.word	0x2000570c

08009e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e28:	f7ff fa4a 	bl	80092c0 <xTaskGetTickCount>
 8009e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e5c <prvSampleTimeNow+0x3c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d205      	bcs.n	8009e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e38:	f000 f93a 	bl	800a0b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	e002      	b.n	8009e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e4a:	4a04      	ldr	r2, [pc, #16]	@ (8009e5c <prvSampleTimeNow+0x3c>)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e50:	68fb      	ldr	r3, [r7, #12]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	2000571c 	.word	0x2000571c

08009e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d812      	bhi.n	8009eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	1ad2      	subs	r2, r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d302      	bcc.n	8009e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	e01b      	b.n	8009ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e9a:	4b10      	ldr	r3, [pc, #64]	@ (8009edc <prvInsertTimerInActiveList+0x7c>)
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	f7fe f9be 	bl	8008226 <vListInsert>
 8009eaa:	e012      	b.n	8009ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d206      	bcs.n	8009ec2 <prvInsertTimerInActiveList+0x62>
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d302      	bcc.n	8009ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e007      	b.n	8009ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ec2:	4b07      	ldr	r3, [pc, #28]	@ (8009ee0 <prvInsertTimerInActiveList+0x80>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f7fe f9aa 	bl	8008226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ed2:	697b      	ldr	r3, [r7, #20]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20005710 	.word	0x20005710
 8009ee0:	2000570c 	.word	0x2000570c

08009ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08e      	sub	sp, #56	@ 0x38
 8009ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eea:	e0ce      	b.n	800a08a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	da19      	bge.n	8009f26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ef2:	1d3b      	adds	r3, r7, #4
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10b      	bne.n	8009f16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	61fb      	str	r3, [r7, #28]
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	e7fd      	b.n	8009f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f1c:	6850      	ldr	r0, [r2, #4]
 8009f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f20:	6892      	ldr	r2, [r2, #8]
 8009f22:	4611      	mov	r1, r2
 8009f24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f2c0 80ae 	blt.w	800a08a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d004      	beq.n	8009f44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe f9aa 	bl	8008298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f44:	463b      	mov	r3, r7
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff ff6a 	bl	8009e20 <prvSampleTimeNow>
 8009f4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b09      	cmp	r3, #9
 8009f52:	f200 8097 	bhi.w	800a084 <prvProcessReceivedCommands+0x1a0>
 8009f56:	a201      	add	r2, pc, #4	@ (adr r2, 8009f5c <prvProcessReceivedCommands+0x78>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009f85 	.word	0x08009f85
 8009f60:	08009f85 	.word	0x08009f85
 8009f64:	08009f85 	.word	0x08009f85
 8009f68:	08009ffb 	.word	0x08009ffb
 8009f6c:	0800a00f 	.word	0x0800a00f
 8009f70:	0800a05b 	.word	0x0800a05b
 8009f74:	08009f85 	.word	0x08009f85
 8009f78:	08009f85 	.word	0x08009f85
 8009f7c:	08009ffb 	.word	0x08009ffb
 8009f80:	0800a00f 	.word	0x0800a00f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f8a:	f043 0301 	orr.w	r3, r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	18d1      	adds	r1, r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fa4:	f7ff ff5c 	bl	8009e60 <prvInsertTimerInActiveList>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d06c      	beq.n	800a088 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d061      	beq.n	800a088 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	441a      	add	r2, r3
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fd6:	f7ff fe01 	bl	8009bdc <xTimerGenericCommand>
 8009fda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d152      	bne.n	800a088 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	61bb      	str	r3, [r7, #24]
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	e7fd      	b.n	8009ff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a000:	f023 0301 	bic.w	r3, r3, #1
 800a004:	b2da      	uxtb	r2, r3
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a00c:	e03d      	b.n	800a08a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a014:	f043 0301 	orr.w	r3, r3, #1
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a024:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10b      	bne.n	800a046 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	617b      	str	r3, [r7, #20]
}
 800a040:	bf00      	nop
 800a042:	bf00      	nop
 800a044:	e7fd      	b.n	800a042 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a048:	699a      	ldr	r2, [r3, #24]
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	18d1      	adds	r1, r2, r3
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a054:	f7ff ff04 	bl	8009e60 <prvInsertTimerInActiveList>
					break;
 800a058:	e017      	b.n	800a08a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d103      	bne.n	800a070 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a06a:	f000 fbe5 	bl	800a838 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a06e:	e00c      	b.n	800a08a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a072:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a076:	f023 0301 	bic.w	r3, r3, #1
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a082:	e002      	b.n	800a08a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a084:	bf00      	nop
 800a086:	e000      	b.n	800a08a <prvProcessReceivedCommands+0x1a6>
					break;
 800a088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a08a:	4b08      	ldr	r3, [pc, #32]	@ (800a0ac <prvProcessReceivedCommands+0x1c8>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	1d39      	adds	r1, r7, #4
 800a090:	2200      	movs	r2, #0
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fbd4 	bl	8008840 <xQueueReceive>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f47f af26 	bne.w	8009eec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
 800a0a4:	3730      	adds	r7, #48	@ 0x30
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20005714 	.word	0x20005714

0800a0b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0b6:	e049      	b.n	800a14c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0b8:	4b2e      	ldr	r3, [pc, #184]	@ (800a174 <prvSwitchTimerLists+0xc4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c2:	4b2c      	ldr	r3, [pc, #176]	@ (800a174 <prvSwitchTimerLists+0xc4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe f8e1 	bl	8008298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d02f      	beq.n	800a14c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d90e      	bls.n	800a11c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a10a:	4b1a      	ldr	r3, [pc, #104]	@ (800a174 <prvSwitchTimerLists+0xc4>)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3304      	adds	r3, #4
 800a112:	4619      	mov	r1, r3
 800a114:	4610      	mov	r0, r2
 800a116:	f7fe f886 	bl	8008226 <vListInsert>
 800a11a:	e017      	b.n	800a14c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a11c:	2300      	movs	r3, #0
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	2300      	movs	r3, #0
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	2100      	movs	r1, #0
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff fd58 	bl	8009bdc <xTimerGenericCommand>
 800a12c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10b      	bne.n	800a14c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	603b      	str	r3, [r7, #0]
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a14c:	4b09      	ldr	r3, [pc, #36]	@ (800a174 <prvSwitchTimerLists+0xc4>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1b0      	bne.n	800a0b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a156:	4b07      	ldr	r3, [pc, #28]	@ (800a174 <prvSwitchTimerLists+0xc4>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <prvSwitchTimerLists+0xc8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a04      	ldr	r2, [pc, #16]	@ (800a174 <prvSwitchTimerLists+0xc4>)
 800a162:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a164:	4a04      	ldr	r2, [pc, #16]	@ (800a178 <prvSwitchTimerLists+0xc8>)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	6013      	str	r3, [r2, #0]
}
 800a16a:	bf00      	nop
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	2000570c 	.word	0x2000570c
 800a178:	20005710 	.word	0x20005710

0800a17c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a182:	f000 f969 	bl	800a458 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a186:	4b15      	ldr	r3, [pc, #84]	@ (800a1dc <prvCheckForValidListAndQueue+0x60>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d120      	bne.n	800a1d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a18e:	4814      	ldr	r0, [pc, #80]	@ (800a1e0 <prvCheckForValidListAndQueue+0x64>)
 800a190:	f7fd fff8 	bl	8008184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a194:	4813      	ldr	r0, [pc, #76]	@ (800a1e4 <prvCheckForValidListAndQueue+0x68>)
 800a196:	f7fd fff5 	bl	8008184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a19a:	4b13      	ldr	r3, [pc, #76]	@ (800a1e8 <prvCheckForValidListAndQueue+0x6c>)
 800a19c:	4a10      	ldr	r2, [pc, #64]	@ (800a1e0 <prvCheckForValidListAndQueue+0x64>)
 800a19e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1a0:	4b12      	ldr	r3, [pc, #72]	@ (800a1ec <prvCheckForValidListAndQueue+0x70>)
 800a1a2:	4a10      	ldr	r2, [pc, #64]	@ (800a1e4 <prvCheckForValidListAndQueue+0x68>)
 800a1a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	4b11      	ldr	r3, [pc, #68]	@ (800a1f0 <prvCheckForValidListAndQueue+0x74>)
 800a1ac:	4a11      	ldr	r2, [pc, #68]	@ (800a1f4 <prvCheckForValidListAndQueue+0x78>)
 800a1ae:	2110      	movs	r1, #16
 800a1b0:	200a      	movs	r0, #10
 800a1b2:	f7fe f905 	bl	80083c0 <xQueueGenericCreateStatic>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4a08      	ldr	r2, [pc, #32]	@ (800a1dc <prvCheckForValidListAndQueue+0x60>)
 800a1ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1bc:	4b07      	ldr	r3, [pc, #28]	@ (800a1dc <prvCheckForValidListAndQueue+0x60>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1c4:	4b05      	ldr	r3, [pc, #20]	@ (800a1dc <prvCheckForValidListAndQueue+0x60>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	490b      	ldr	r1, [pc, #44]	@ (800a1f8 <prvCheckForValidListAndQueue+0x7c>)
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fd2a 	bl	8008c24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1d0:	f000 f974 	bl	800a4bc <vPortExitCritical>
}
 800a1d4:	bf00      	nop
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20005714 	.word	0x20005714
 800a1e0:	200056e4 	.word	0x200056e4
 800a1e4:	200056f8 	.word	0x200056f8
 800a1e8:	2000570c 	.word	0x2000570c
 800a1ec:	20005710 	.word	0x20005710
 800a1f0:	200057c0 	.word	0x200057c0
 800a1f4:	20005720 	.word	0x20005720
 800a1f8:	08018b70 	.word	0x08018b70

0800a1fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3b04      	subs	r3, #4
 800a20c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b04      	subs	r3, #4
 800a21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f023 0201 	bic.w	r2, r3, #1
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b04      	subs	r3, #4
 800a22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a22c:	4a0c      	ldr	r2, [pc, #48]	@ (800a260 <pxPortInitialiseStack+0x64>)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3b14      	subs	r3, #20
 800a236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3b04      	subs	r3, #4
 800a242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f06f 0202 	mvn.w	r2, #2
 800a24a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3b20      	subs	r3, #32
 800a250:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a252:	68fb      	ldr	r3, [r7, #12]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	0800a265 	.word	0x0800a265

0800a264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a26e:	4b13      	ldr	r3, [pc, #76]	@ (800a2bc <prvTaskExitError+0x58>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a276:	d00b      	beq.n	800a290 <prvTaskExitError+0x2c>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60fb      	str	r3, [r7, #12]
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	e7fd      	b.n	800a28c <prvTaskExitError+0x28>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	60bb      	str	r3, [r7, #8]
}
 800a2a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2a4:	bf00      	nop
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0fc      	beq.n	800a2a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000010 	.word	0x20000010

0800a2c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2c0:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <pxCurrentTCBConst2>)
 800a2c2:	6819      	ldr	r1, [r3, #0]
 800a2c4:	6808      	ldr	r0, [r1, #0]
 800a2c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ca:	f380 8809 	msr	PSP, r0
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f04f 0000 	mov.w	r0, #0
 800a2d6:	f380 8811 	msr	BASEPRI, r0
 800a2da:	4770      	bx	lr
 800a2dc:	f3af 8000 	nop.w

0800a2e0 <pxCurrentTCBConst2>:
 800a2e0:	200051e4 	.word	0x200051e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop

0800a2e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2e8:	4808      	ldr	r0, [pc, #32]	@ (800a30c <prvPortStartFirstTask+0x24>)
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	6800      	ldr	r0, [r0, #0]
 800a2ee:	f380 8808 	msr	MSP, r0
 800a2f2:	f04f 0000 	mov.w	r0, #0
 800a2f6:	f380 8814 	msr	CONTROL, r0
 800a2fa:	b662      	cpsie	i
 800a2fc:	b661      	cpsie	f
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	df00      	svc	0
 800a308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a30a:	bf00      	nop
 800a30c:	e000ed08 	.word	0xe000ed08

0800a310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a316:	4b47      	ldr	r3, [pc, #284]	@ (800a434 <xPortStartScheduler+0x124>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a47      	ldr	r2, [pc, #284]	@ (800a438 <xPortStartScheduler+0x128>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d10b      	bne.n	800a338 <xPortStartScheduler+0x28>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	613b      	str	r3, [r7, #16]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a338:	4b3e      	ldr	r3, [pc, #248]	@ (800a434 <xPortStartScheduler+0x124>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a3f      	ldr	r2, [pc, #252]	@ (800a43c <xPortStartScheduler+0x12c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d10b      	bne.n	800a35a <xPortStartScheduler+0x4a>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	60fb      	str	r3, [r7, #12]
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	e7fd      	b.n	800a356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a35a:	4b39      	ldr	r3, [pc, #228]	@ (800a440 <xPortStartScheduler+0x130>)
 800a35c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	22ff      	movs	r2, #255	@ 0xff
 800a36a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	b2db      	uxtb	r3, r3
 800a372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	4b31      	ldr	r3, [pc, #196]	@ (800a444 <xPortStartScheduler+0x134>)
 800a380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a382:	4b31      	ldr	r3, [pc, #196]	@ (800a448 <xPortStartScheduler+0x138>)
 800a384:	2207      	movs	r2, #7
 800a386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a388:	e009      	b.n	800a39e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a38a:	4b2f      	ldr	r3, [pc, #188]	@ (800a448 <xPortStartScheduler+0x138>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3b01      	subs	r3, #1
 800a390:	4a2d      	ldr	r2, [pc, #180]	@ (800a448 <xPortStartScheduler+0x138>)
 800a392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a394:	78fb      	ldrb	r3, [r7, #3]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3a6:	2b80      	cmp	r3, #128	@ 0x80
 800a3a8:	d0ef      	beq.n	800a38a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3aa:	4b27      	ldr	r3, [pc, #156]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f1c3 0307 	rsb	r3, r3, #7
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d00b      	beq.n	800a3ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	60bb      	str	r3, [r7, #8]
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	e7fd      	b.n	800a3ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	021b      	lsls	r3, r3, #8
 800a3d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3e0:	4a19      	ldr	r2, [pc, #100]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3ec:	4b17      	ldr	r3, [pc, #92]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a16      	ldr	r2, [pc, #88]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3f8:	4b14      	ldr	r3, [pc, #80]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a13      	ldr	r2, [pc, #76]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a404:	f000 f8da 	bl	800a5bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a408:	4b11      	ldr	r3, [pc, #68]	@ (800a450 <xPortStartScheduler+0x140>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a40e:	f000 f8f9 	bl	800a604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a412:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <xPortStartScheduler+0x144>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a0f      	ldr	r2, [pc, #60]	@ (800a454 <xPortStartScheduler+0x144>)
 800a418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a41c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a41e:	f7ff ff63 	bl	800a2e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a422:	f7ff f817 	bl	8009454 <vTaskSwitchContext>
	prvTaskExitError();
 800a426:	f7ff ff1d 	bl	800a264 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	e000ed00 	.word	0xe000ed00
 800a438:	410fc271 	.word	0x410fc271
 800a43c:	410fc270 	.word	0x410fc270
 800a440:	e000e400 	.word	0xe000e400
 800a444:	20005810 	.word	0x20005810
 800a448:	20005814 	.word	0x20005814
 800a44c:	e000ed20 	.word	0xe000ed20
 800a450:	20000010 	.word	0x20000010
 800a454:	e000ef34 	.word	0xe000ef34

0800a458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	607b      	str	r3, [r7, #4]
}
 800a470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a472:	4b10      	ldr	r3, [pc, #64]	@ (800a4b4 <vPortEnterCritical+0x5c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3301      	adds	r3, #1
 800a478:	4a0e      	ldr	r2, [pc, #56]	@ (800a4b4 <vPortEnterCritical+0x5c>)
 800a47a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a47c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b4 <vPortEnterCritical+0x5c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d110      	bne.n	800a4a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a484:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b8 <vPortEnterCritical+0x60>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	603b      	str	r3, [r7, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
 800a4a4:	e7fd      	b.n	800a4a2 <vPortEnterCritical+0x4a>
	}
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20000010 	.word	0x20000010
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4c2:	4b12      	ldr	r3, [pc, #72]	@ (800a50c <vPortExitCritical+0x50>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10b      	bne.n	800a4e2 <vPortExitCritical+0x26>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	607b      	str	r3, [r7, #4]
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	e7fd      	b.n	800a4de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <vPortExitCritical+0x50>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	4a08      	ldr	r2, [pc, #32]	@ (800a50c <vPortExitCritical+0x50>)
 800a4ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4ec:	4b07      	ldr	r3, [pc, #28]	@ (800a50c <vPortExitCritical+0x50>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <vPortExitCritical+0x44>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f383 8811 	msr	BASEPRI, r3
}
 800a4fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	20000010 	.word	0x20000010

0800a510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a510:	f3ef 8009 	mrs	r0, PSP
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	4b15      	ldr	r3, [pc, #84]	@ (800a570 <pxCurrentTCBConst>)
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	f01e 0f10 	tst.w	lr, #16
 800a520:	bf08      	it	eq
 800a522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52a:	6010      	str	r0, [r2, #0]
 800a52c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a534:	f380 8811 	msr	BASEPRI, r0
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f7fe ff88 	bl	8009454 <vTaskSwitchContext>
 800a544:	f04f 0000 	mov.w	r0, #0
 800a548:	f380 8811 	msr	BASEPRI, r0
 800a54c:	bc09      	pop	{r0, r3}
 800a54e:	6819      	ldr	r1, [r3, #0]
 800a550:	6808      	ldr	r0, [r1, #0]
 800a552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a556:	f01e 0f10 	tst.w	lr, #16
 800a55a:	bf08      	it	eq
 800a55c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a560:	f380 8809 	msr	PSP, r0
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	f3af 8000 	nop.w

0800a570 <pxCurrentTCBConst>:
 800a570:	200051e4 	.word	0x200051e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop

0800a578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	607b      	str	r3, [r7, #4]
}
 800a590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a592:	f7fe fea5 	bl	80092e0 <xTaskIncrementTick>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a59c:	4b06      	ldr	r3, [pc, #24]	@ (800a5b8 <xPortSysTickHandler+0x40>)
 800a59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f383 8811 	msr	BASEPRI, r3
}
 800a5ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	e000ed04 	.word	0xe000ed04

0800a5bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <vPortSetupTimerInterrupt+0x34>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f4 <vPortSetupTimerInterrupt+0x38>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f8 <vPortSetupTimerInterrupt+0x3c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5fc <vPortSetupTimerInterrupt+0x40>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	099b      	lsrs	r3, r3, #6
 800a5d8:	4a09      	ldr	r2, [pc, #36]	@ (800a600 <vPortSetupTimerInterrupt+0x44>)
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5de:	4b04      	ldr	r3, [pc, #16]	@ (800a5f0 <vPortSetupTimerInterrupt+0x34>)
 800a5e0:	2207      	movs	r2, #7
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	e000e010 	.word	0xe000e010
 800a5f4:	e000e018 	.word	0xe000e018
 800a5f8:	20000004 	.word	0x20000004
 800a5fc:	10624dd3 	.word	0x10624dd3
 800a600:	e000e014 	.word	0xe000e014

0800a604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a614 <vPortEnableVFP+0x10>
 800a608:	6801      	ldr	r1, [r0, #0]
 800a60a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a60e:	6001      	str	r1, [r0, #0]
 800a610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a612:	bf00      	nop
 800a614:	e000ed88 	.word	0xe000ed88

0800a618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a61e:	f3ef 8305 	mrs	r3, IPSR
 800a622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b0f      	cmp	r3, #15
 800a628:	d915      	bls.n	800a656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a62a:	4a18      	ldr	r2, [pc, #96]	@ (800a68c <vPortValidateInterruptPriority+0x74>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a634:	4b16      	ldr	r3, [pc, #88]	@ (800a690 <vPortValidateInterruptPriority+0x78>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	7afa      	ldrb	r2, [r7, #11]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d20b      	bcs.n	800a656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	607b      	str	r3, [r7, #4]
}
 800a650:	bf00      	nop
 800a652:	bf00      	nop
 800a654:	e7fd      	b.n	800a652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a656:	4b0f      	ldr	r3, [pc, #60]	@ (800a694 <vPortValidateInterruptPriority+0x7c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a65e:	4b0e      	ldr	r3, [pc, #56]	@ (800a698 <vPortValidateInterruptPriority+0x80>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d90b      	bls.n	800a67e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	603b      	str	r3, [r7, #0]
}
 800a678:	bf00      	nop
 800a67a:	bf00      	nop
 800a67c:	e7fd      	b.n	800a67a <vPortValidateInterruptPriority+0x62>
	}
 800a67e:	bf00      	nop
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	e000e3f0 	.word	0xe000e3f0
 800a690:	20005810 	.word	0x20005810
 800a694:	e000ed0c 	.word	0xe000ed0c
 800a698:	20005814 	.word	0x20005814

0800a69c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08a      	sub	sp, #40	@ 0x28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6a8:	f7fe fd5e 	bl	8009168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a820 <pvPortMalloc+0x184>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6b4:	f000 f924 	bl	800a900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6b8:	4b5a      	ldr	r3, [pc, #360]	@ (800a824 <pvPortMalloc+0x188>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4013      	ands	r3, r2
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f040 8095 	bne.w	800a7f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d01e      	beq.n	800a70a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6cc:	2208      	movs	r2, #8
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d015      	beq.n	800a70a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f023 0307 	bic.w	r3, r3, #7
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <pvPortMalloc+0x6e>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	617b      	str	r3, [r7, #20]
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	e7fd      	b.n	800a706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d06f      	beq.n	800a7f0 <pvPortMalloc+0x154>
 800a710:	4b45      	ldr	r3, [pc, #276]	@ (800a828 <pvPortMalloc+0x18c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d86a      	bhi.n	800a7f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a71a:	4b44      	ldr	r3, [pc, #272]	@ (800a82c <pvPortMalloc+0x190>)
 800a71c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a71e:	4b43      	ldr	r3, [pc, #268]	@ (800a82c <pvPortMalloc+0x190>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a724:	e004      	b.n	800a730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	429a      	cmp	r2, r3
 800a738:	d903      	bls.n	800a742 <pvPortMalloc+0xa6>
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f1      	bne.n	800a726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a742:	4b37      	ldr	r3, [pc, #220]	@ (800a820 <pvPortMalloc+0x184>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a748:	429a      	cmp	r2, r3
 800a74a:	d051      	beq.n	800a7f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2208      	movs	r2, #8
 800a752:	4413      	add	r3, r2
 800a754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	1ad2      	subs	r2, r2, r3
 800a766:	2308      	movs	r3, #8
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d920      	bls.n	800a7b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a76e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4413      	add	r3, r2
 800a774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <pvPortMalloc+0xfc>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	613b      	str	r3, [r7, #16]
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	e7fd      	b.n	800a794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	1ad2      	subs	r2, r2, r3
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7aa:	69b8      	ldr	r0, [r7, #24]
 800a7ac:	f000 f90a 	bl	800a9c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7be:	4b1a      	ldr	r3, [pc, #104]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a830 <pvPortMalloc+0x194>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d203      	bcs.n	800a7d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7ca:	4b17      	ldr	r3, [pc, #92]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a18      	ldr	r2, [pc, #96]	@ (800a830 <pvPortMalloc+0x194>)
 800a7d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <pvPortMalloc+0x188>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7e6:	4b13      	ldr	r3, [pc, #76]	@ (800a834 <pvPortMalloc+0x198>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	4a11      	ldr	r2, [pc, #68]	@ (800a834 <pvPortMalloc+0x198>)
 800a7ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7f0:	f7fe fcc8 	bl	8009184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	f003 0307 	and.w	r3, r3, #7
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <pvPortMalloc+0x17a>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	60fb      	str	r3, [r7, #12]
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <pvPortMalloc+0x176>
	return pvReturn;
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3728      	adds	r7, #40	@ 0x28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20006420 	.word	0x20006420
 800a824:	20006434 	.word	0x20006434
 800a828:	20006424 	.word	0x20006424
 800a82c:	20006418 	.word	0x20006418
 800a830:	20006428 	.word	0x20006428
 800a834:	2000642c 	.word	0x2000642c

0800a838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d04f      	beq.n	800a8ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a84a:	2308      	movs	r3, #8
 800a84c:	425b      	negs	r3, r3
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4413      	add	r3, r2
 800a852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	4b25      	ldr	r3, [pc, #148]	@ (800a8f4 <vPortFree+0xbc>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4013      	ands	r3, r2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <vPortFree+0x46>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60fb      	str	r3, [r7, #12]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00b      	beq.n	800a89e <vPortFree+0x66>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	60bb      	str	r3, [r7, #8]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <vPortFree+0xbc>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d01e      	beq.n	800a8ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d11a      	bne.n	800a8ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <vPortFree+0xbc>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	43db      	mvns	r3, r3
 800a8be:	401a      	ands	r2, r3
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8c4:	f7fe fc50 	bl	8009168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f8 <vPortFree+0xc0>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	4a09      	ldr	r2, [pc, #36]	@ (800a8f8 <vPortFree+0xc0>)
 800a8d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8d6:	6938      	ldr	r0, [r7, #16]
 800a8d8:	f000 f874 	bl	800a9c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8dc:	4b07      	ldr	r3, [pc, #28]	@ (800a8fc <vPortFree+0xc4>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	4a06      	ldr	r2, [pc, #24]	@ (800a8fc <vPortFree+0xc4>)
 800a8e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8e6:	f7fe fc4d 	bl	8009184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8ea:	bf00      	nop
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20006434 	.word	0x20006434
 800a8f8:	20006424 	.word	0x20006424
 800a8fc:	20006430 	.word	0x20006430

0800a900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a906:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a90a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a90c:	4b27      	ldr	r3, [pc, #156]	@ (800a9ac <prvHeapInit+0xac>)
 800a90e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00c      	beq.n	800a934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3307      	adds	r3, #7
 800a91e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f023 0307 	bic.w	r3, r3, #7
 800a926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9ac <prvHeapInit+0xac>)
 800a930:	4413      	add	r3, r2
 800a932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a938:	4a1d      	ldr	r2, [pc, #116]	@ (800a9b0 <prvHeapInit+0xb0>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a93e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9b0 <prvHeapInit+0xb0>)
 800a940:	2200      	movs	r2, #0
 800a942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	4413      	add	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a94c:	2208      	movs	r2, #8
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0307 	bic.w	r3, r3, #7
 800a95a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a15      	ldr	r2, [pc, #84]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a962:	4b14      	ldr	r3, [pc, #80]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2200      	movs	r2, #0
 800a968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a96a:	4b12      	ldr	r3, [pc, #72]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	1ad2      	subs	r2, r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a980:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4a0a      	ldr	r2, [pc, #40]	@ (800a9b8 <prvHeapInit+0xb8>)
 800a98e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	4a09      	ldr	r2, [pc, #36]	@ (800a9bc <prvHeapInit+0xbc>)
 800a996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a998:	4b09      	ldr	r3, [pc, #36]	@ (800a9c0 <prvHeapInit+0xc0>)
 800a99a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a99e:	601a      	str	r2, [r3, #0]
}
 800a9a0:	bf00      	nop
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	20005818 	.word	0x20005818
 800a9b0:	20006418 	.word	0x20006418
 800a9b4:	20006420 	.word	0x20006420
 800a9b8:	20006428 	.word	0x20006428
 800a9bc:	20006424 	.word	0x20006424
 800a9c0:	20006434 	.word	0x20006434

0800a9c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9cc:	4b28      	ldr	r3, [pc, #160]	@ (800aa70 <prvInsertBlockIntoFreeList+0xac>)
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e002      	b.n	800a9d8 <prvInsertBlockIntoFreeList+0x14>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d8f7      	bhi.n	800a9d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d108      	bne.n	800aa06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	441a      	add	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	441a      	add	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d118      	bne.n	800aa4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4b15      	ldr	r3, [pc, #84]	@ (800aa74 <prvInsertBlockIntoFreeList+0xb0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d00d      	beq.n	800aa42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	441a      	add	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	e008      	b.n	800aa54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa42:	4b0c      	ldr	r3, [pc, #48]	@ (800aa74 <prvInsertBlockIntoFreeList+0xb0>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	e003      	b.n	800aa54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d002      	beq.n	800aa62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa62:	bf00      	nop
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20006418 	.word	0x20006418
 800aa74:	20006420 	.word	0x20006420

0800aa78 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa78:	4b04      	ldr	r3, [pc, #16]	@ (800aa8c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	b10a      	cbz	r2, 800aa82 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800aa7e:	4803      	ldr	r0, [pc, #12]	@ (800aa8c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa80:	4770      	bx	lr
 800aa82:	4a03      	ldr	r2, [pc, #12]	@ (800aa90 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800aa84:	4801      	ldr	r0, [pc, #4]	@ (800aa8c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa86:	6812      	ldr	r2, [r2, #0]
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	4770      	bx	lr
 800aa8c:	2000001c 	.word	0x2000001c
 800aa90:	200001d0 	.word	0x200001d0

0800aa94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa94:	4a02      	ldr	r2, [pc, #8]	@ (800aaa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800aa96:	4b03      	ldr	r3, [pc, #12]	@ (800aaa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800aa98:	6812      	ldr	r2, [r2, #0]
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	200001d0 	.word	0x200001d0
 800aaa4:	2000001c 	.word	0x2000001c

0800aaa8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800aaa8:	f003 be7c 	b.w	800e7a4 <geometry_msgs__msg__Twist__init>

0800aaac <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800aaac:	f003 be9e 	b.w	800e7ec <geometry_msgs__msg__Twist__fini>

0800aab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	f000 f819 	bl	800aae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aab6:	4c07      	ldr	r4, [pc, #28]	@ (800aad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800aab8:	60e0      	str	r0, [r4, #12]
 800aaba:	f000 f815 	bl	800aae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aabe:	4b06      	ldr	r3, [pc, #24]	@ (800aad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aac0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	b10a      	cbz	r2, 800aaca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800aac6:	4804      	ldr	r0, [pc, #16]	@ (800aad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aac8:	bd10      	pop	{r4, pc}
 800aaca:	4a04      	ldr	r2, [pc, #16]	@ (800aadc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800aacc:	4802      	ldr	r0, [pc, #8]	@ (800aad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aace:	6812      	ldr	r2, [r2, #0]
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	bd10      	pop	{r4, pc}
 800aad4:	20000028 	.word	0x20000028
 800aad8:	200000a0 	.word	0x200000a0
 800aadc:	200001d4 	.word	0x200001d4

0800aae0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800aae0:	f003 be90 	b.w	800e804 <geometry_msgs__msg__Vector3__init>

0800aae4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800aae4:	f003 be92 	b.w	800e80c <geometry_msgs__msg__Vector3__fini>

0800aae8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800aae8:	4b04      	ldr	r3, [pc, #16]	@ (800aafc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	b10a      	cbz	r2, 800aaf2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800aaee:	4803      	ldr	r0, [pc, #12]	@ (800aafc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aaf0:	4770      	bx	lr
 800aaf2:	4a03      	ldr	r2, [pc, #12]	@ (800ab00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800aaf4:	4801      	ldr	r0, [pc, #4]	@ (800aafc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aaf6:	6812      	ldr	r2, [r2, #0]
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	4770      	bx	lr
 800aafc:	20000160 	.word	0x20000160
 800ab00:	200001d4 	.word	0x200001d4

0800ab04 <get_serialized_size_geometry_msgs__msg__Twist>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	4604      	mov	r4, r0
 800ab08:	b148      	cbz	r0, 800ab1e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	f000 f860 	bl	800abd0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab10:	4606      	mov	r6, r0
 800ab12:	1829      	adds	r1, r5, r0
 800ab14:	f104 0018 	add.w	r0, r4, #24
 800ab18:	f000 f85a 	bl	800abd0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab1c:	4430      	add	r0, r6
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}

0800ab20 <_Twist__cdr_deserialize>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	460c      	mov	r4, r1
 800ab24:	b189      	cbz	r1, 800ab4a <_Twist__cdr_deserialize+0x2a>
 800ab26:	4605      	mov	r5, r0
 800ab28:	f000 f8de 	bl	800ace8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab2c:	6843      	ldr	r3, [r0, #4]
 800ab2e:	4621      	mov	r1, r4
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	4628      	mov	r0, r5
 800ab34:	4798      	blx	r3
 800ab36:	f000 f8d7 	bl	800ace8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab3a:	6843      	ldr	r3, [r0, #4]
 800ab3c:	f104 0118 	add.w	r1, r4, #24
 800ab40:	4628      	mov	r0, r5
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab48:	4718      	bx	r3
 800ab4a:	4608      	mov	r0, r1
 800ab4c:	bd70      	pop	{r4, r5, r6, pc}
 800ab4e:	bf00      	nop

0800ab50 <_Twist__cdr_serialize>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	9101      	str	r1, [sp, #4]
 800ab56:	b190      	cbz	r0, 800ab7e <_Twist__cdr_serialize+0x2e>
 800ab58:	4604      	mov	r4, r0
 800ab5a:	f000 f8c5 	bl	800ace8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab5e:	6843      	ldr	r3, [r0, #4]
 800ab60:	9901      	ldr	r1, [sp, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	4620      	mov	r0, r4
 800ab66:	4798      	blx	r3
 800ab68:	f000 f8be 	bl	800ace8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab6c:	6843      	ldr	r3, [r0, #4]
 800ab6e:	9901      	ldr	r1, [sp, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f104 0018 	add.w	r0, r4, #24
 800ab76:	b002      	add	sp, #8
 800ab78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab7c:	4718      	bx	r3
 800ab7e:	b002      	add	sp, #8
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	bf00      	nop

0800ab84 <_Twist__get_serialized_size>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4604      	mov	r4, r0
 800ab88:	b148      	cbz	r0, 800ab9e <_Twist__get_serialized_size+0x1a>
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	f000 f820 	bl	800abd0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab90:	4605      	mov	r5, r0
 800ab92:	4601      	mov	r1, r0
 800ab94:	f104 0018 	add.w	r0, r4, #24
 800ab98:	f000 f81a 	bl	800abd0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab9c:	4428      	add	r0, r5
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}

0800aba0 <_Twist__max_serialized_size>:
 800aba0:	b510      	push	{r4, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	2301      	movs	r3, #1
 800aba6:	2100      	movs	r1, #0
 800aba8:	f10d 0007 	add.w	r0, sp, #7
 800abac:	f88d 3007 	strb.w	r3, [sp, #7]
 800abb0:	f000 f87e 	bl	800acb0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800abb4:	4604      	mov	r4, r0
 800abb6:	4601      	mov	r1, r0
 800abb8:	f10d 0007 	add.w	r0, sp, #7
 800abbc:	f000 f878 	bl	800acb0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800abc0:	4420      	add	r0, r4
 800abc2:	b002      	add	sp, #8
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	bf00      	nop

0800abc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800abc8:	4800      	ldr	r0, [pc, #0]	@ (800abcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800abca:	4770      	bx	lr
 800abcc:	2000016c 	.word	0x2000016c

0800abd0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800abd0:	b1b8      	cbz	r0, 800ac02 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800abd2:	b538      	push	{r3, r4, r5, lr}
 800abd4:	460d      	mov	r5, r1
 800abd6:	4628      	mov	r0, r5
 800abd8:	2108      	movs	r1, #8
 800abda:	f001 f9fd 	bl	800bfd8 <ucdr_alignment>
 800abde:	f105 0308 	add.w	r3, r5, #8
 800abe2:	181c      	adds	r4, r3, r0
 800abe4:	2108      	movs	r1, #8
 800abe6:	4620      	mov	r0, r4
 800abe8:	f001 f9f6 	bl	800bfd8 <ucdr_alignment>
 800abec:	3008      	adds	r0, #8
 800abee:	4404      	add	r4, r0
 800abf0:	2108      	movs	r1, #8
 800abf2:	4620      	mov	r0, r4
 800abf4:	f001 f9f0 	bl	800bfd8 <ucdr_alignment>
 800abf8:	f1c5 0508 	rsb	r5, r5, #8
 800abfc:	4428      	add	r0, r5
 800abfe:	4420      	add	r0, r4
 800ac00:	bd38      	pop	{r3, r4, r5, pc}
 800ac02:	4770      	bx	lr

0800ac04 <_Vector3__cdr_deserialize>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	460c      	mov	r4, r1
 800ac08:	b171      	cbz	r1, 800ac28 <_Vector3__cdr_deserialize+0x24>
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	f001 f8c6 	bl	800bd9c <ucdr_deserialize_double>
 800ac10:	f104 0108 	add.w	r1, r4, #8
 800ac14:	4628      	mov	r0, r5
 800ac16:	f001 f8c1 	bl	800bd9c <ucdr_deserialize_double>
 800ac1a:	f104 0110 	add.w	r1, r4, #16
 800ac1e:	4628      	mov	r0, r5
 800ac20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac24:	f001 b8ba 	b.w	800bd9c <ucdr_deserialize_double>
 800ac28:	4608      	mov	r0, r1
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}

0800ac2c <_Vector3__cdr_serialize>:
 800ac2c:	b198      	cbz	r0, 800ac56 <_Vector3__cdr_serialize+0x2a>
 800ac2e:	b538      	push	{r3, r4, r5, lr}
 800ac30:	ed90 0b00 	vldr	d0, [r0]
 800ac34:	460d      	mov	r5, r1
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	f000 ffdf 	bl	800bbfc <ucdr_serialize_double>
 800ac3e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 ffda 	bl	800bbfc <ucdr_serialize_double>
 800ac48:	ed94 0b04 	vldr	d0, [r4, #16]
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac52:	f000 bfd3 	b.w	800bbfc <ucdr_serialize_double>
 800ac56:	4770      	bx	lr

0800ac58 <_Vector3__get_serialized_size>:
 800ac58:	b198      	cbz	r0, 800ac82 <_Vector3__get_serialized_size+0x2a>
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	2108      	movs	r1, #8
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f001 f9ba 	bl	800bfd8 <ucdr_alignment>
 800ac64:	f100 0408 	add.w	r4, r0, #8
 800ac68:	2108      	movs	r1, #8
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f001 f9b4 	bl	800bfd8 <ucdr_alignment>
 800ac70:	3008      	adds	r0, #8
 800ac72:	4404      	add	r4, r0
 800ac74:	2108      	movs	r1, #8
 800ac76:	4620      	mov	r0, r4
 800ac78:	f001 f9ae 	bl	800bfd8 <ucdr_alignment>
 800ac7c:	3008      	adds	r0, #8
 800ac7e:	4420      	add	r0, r4
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	4770      	bx	lr

0800ac84 <_Vector3__max_serialized_size>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	2108      	movs	r1, #8
 800ac88:	2000      	movs	r0, #0
 800ac8a:	f001 f9a5 	bl	800bfd8 <ucdr_alignment>
 800ac8e:	f100 0508 	add.w	r5, r0, #8
 800ac92:	2108      	movs	r1, #8
 800ac94:	4628      	mov	r0, r5
 800ac96:	f001 f99f 	bl	800bfd8 <ucdr_alignment>
 800ac9a:	f100 0408 	add.w	r4, r0, #8
 800ac9e:	442c      	add	r4, r5
 800aca0:	2108      	movs	r1, #8
 800aca2:	4620      	mov	r0, r4
 800aca4:	f001 f998 	bl	800bfd8 <ucdr_alignment>
 800aca8:	3008      	adds	r0, #8
 800acaa:	4420      	add	r0, r4
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	bf00      	nop

0800acb0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	2301      	movs	r3, #1
 800acb4:	460c      	mov	r4, r1
 800acb6:	7003      	strb	r3, [r0, #0]
 800acb8:	2108      	movs	r1, #8
 800acba:	4620      	mov	r0, r4
 800acbc:	f001 f98c 	bl	800bfd8 <ucdr_alignment>
 800acc0:	f104 0508 	add.w	r5, r4, #8
 800acc4:	1946      	adds	r6, r0, r5
 800acc6:	2108      	movs	r1, #8
 800acc8:	4630      	mov	r0, r6
 800acca:	f001 f985 	bl	800bfd8 <ucdr_alignment>
 800acce:	f100 0508 	add.w	r5, r0, #8
 800acd2:	4435      	add	r5, r6
 800acd4:	2108      	movs	r1, #8
 800acd6:	4628      	mov	r0, r5
 800acd8:	f001 f97e 	bl	800bfd8 <ucdr_alignment>
 800acdc:	f1c4 0408 	rsb	r4, r4, #8
 800ace0:	4420      	add	r0, r4
 800ace2:	4428      	add	r0, r5
 800ace4:	bd70      	pop	{r4, r5, r6, pc}
 800ace6:	bf00      	nop

0800ace8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ace8:	4800      	ldr	r0, [pc, #0]	@ (800acec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800acea:	4770      	bx	lr
 800acec:	20000194 	.word	0x20000194

0800acf0 <ucdr_serialize_bool>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	460d      	mov	r5, r1
 800acf4:	2101      	movs	r1, #1
 800acf6:	4604      	mov	r4, r0
 800acf8:	f001 f922 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800acfc:	b148      	cbz	r0, 800ad12 <ucdr_serialize_bool+0x22>
 800acfe:	68a3      	ldr	r3, [r4, #8]
 800ad00:	701d      	strb	r5, [r3, #0]
 800ad02:	68a2      	ldr	r2, [r4, #8]
 800ad04:	6923      	ldr	r3, [r4, #16]
 800ad06:	2101      	movs	r1, #1
 800ad08:	440a      	add	r2, r1
 800ad0a:	440b      	add	r3, r1
 800ad0c:	60a2      	str	r2, [r4, #8]
 800ad0e:	6123      	str	r3, [r4, #16]
 800ad10:	7561      	strb	r1, [r4, #21]
 800ad12:	7da0      	ldrb	r0, [r4, #22]
 800ad14:	f080 0001 	eor.w	r0, r0, #1
 800ad18:	bd38      	pop	{r3, r4, r5, pc}
 800ad1a:	bf00      	nop

0800ad1c <ucdr_deserialize_bool>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	460d      	mov	r5, r1
 800ad20:	2101      	movs	r1, #1
 800ad22:	4604      	mov	r4, r0
 800ad24:	f001 f90c 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800ad28:	b160      	cbz	r0, 800ad44 <ucdr_deserialize_bool+0x28>
 800ad2a:	68a2      	ldr	r2, [r4, #8]
 800ad2c:	6923      	ldr	r3, [r4, #16]
 800ad2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ad32:	3900      	subs	r1, #0
 800ad34:	bf18      	it	ne
 800ad36:	2101      	movne	r1, #1
 800ad38:	7029      	strb	r1, [r5, #0]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	60a2      	str	r2, [r4, #8]
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	7561      	strb	r1, [r4, #21]
 800ad44:	7da0      	ldrb	r0, [r4, #22]
 800ad46:	f080 0001 	eor.w	r0, r0, #1
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}

0800ad4c <ucdr_serialize_uint8_t>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	460d      	mov	r5, r1
 800ad50:	2101      	movs	r1, #1
 800ad52:	4604      	mov	r4, r0
 800ad54:	f001 f8f4 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800ad58:	b148      	cbz	r0, 800ad6e <ucdr_serialize_uint8_t+0x22>
 800ad5a:	68a3      	ldr	r3, [r4, #8]
 800ad5c:	701d      	strb	r5, [r3, #0]
 800ad5e:	68a2      	ldr	r2, [r4, #8]
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	2101      	movs	r1, #1
 800ad64:	440a      	add	r2, r1
 800ad66:	440b      	add	r3, r1
 800ad68:	60a2      	str	r2, [r4, #8]
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	7561      	strb	r1, [r4, #21]
 800ad6e:	7da0      	ldrb	r0, [r4, #22]
 800ad70:	f080 0001 	eor.w	r0, r0, #1
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	bf00      	nop

0800ad78 <ucdr_deserialize_uint8_t>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4604      	mov	r4, r0
 800ad80:	f001 f8de 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800ad84:	b150      	cbz	r0, 800ad9c <ucdr_deserialize_uint8_t+0x24>
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	702b      	strb	r3, [r5, #0]
 800ad8c:	68a2      	ldr	r2, [r4, #8]
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	2101      	movs	r1, #1
 800ad92:	440a      	add	r2, r1
 800ad94:	440b      	add	r3, r1
 800ad96:	60a2      	str	r2, [r4, #8]
 800ad98:	6123      	str	r3, [r4, #16]
 800ad9a:	7561      	strb	r1, [r4, #21]
 800ad9c:	7da0      	ldrb	r0, [r4, #22]
 800ad9e:	f080 0001 	eor.w	r0, r0, #1
 800ada2:	bd38      	pop	{r3, r4, r5, pc}

0800ada4 <ucdr_serialize_uint16_t>:
 800ada4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	460b      	mov	r3, r1
 800adac:	2102      	movs	r1, #2
 800adae:	4604      	mov	r4, r0
 800adb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800adb4:	f001 f918 	bl	800bfe8 <ucdr_buffer_alignment>
 800adb8:	4601      	mov	r1, r0
 800adba:	4620      	mov	r0, r4
 800adbc:	7d67      	ldrb	r7, [r4, #21]
 800adbe:	f001 f957 	bl	800c070 <ucdr_advance_buffer>
 800adc2:	2102      	movs	r1, #2
 800adc4:	4620      	mov	r0, r4
 800adc6:	f001 f8af 	bl	800bf28 <ucdr_check_buffer_available_for>
 800adca:	bb78      	cbnz	r0, 800ae2c <ucdr_serialize_uint16_t+0x88>
 800adcc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800add0:	42ab      	cmp	r3, r5
 800add2:	d926      	bls.n	800ae22 <ucdr_serialize_uint16_t+0x7e>
 800add4:	1b5e      	subs	r6, r3, r5
 800add6:	60a3      	str	r3, [r4, #8]
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	f1c6 0802 	rsb	r8, r6, #2
 800adde:	4433      	add	r3, r6
 800ade0:	6123      	str	r3, [r4, #16]
 800ade2:	4641      	mov	r1, r8
 800ade4:	4620      	mov	r0, r4
 800ade6:	f001 f8ab 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800adea:	2800      	cmp	r0, #0
 800adec:	d03b      	beq.n	800ae66 <ucdr_serialize_uint16_t+0xc2>
 800adee:	7d23      	ldrb	r3, [r4, #20]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d04a      	beq.n	800ae8a <ucdr_serialize_uint16_t+0xe6>
 800adf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800adf8:	702b      	strb	r3, [r5, #0]
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	d040      	beq.n	800ae80 <ucdr_serialize_uint16_t+0xdc>
 800adfe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae02:	706b      	strb	r3, [r5, #1]
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	68a2      	ldr	r2, [r4, #8]
 800ae08:	7da0      	ldrb	r0, [r4, #22]
 800ae0a:	3302      	adds	r3, #2
 800ae0c:	1b9e      	subs	r6, r3, r6
 800ae0e:	4442      	add	r2, r8
 800ae10:	2302      	movs	r3, #2
 800ae12:	f080 0001 	eor.w	r0, r0, #1
 800ae16:	60a2      	str	r2, [r4, #8]
 800ae18:	6126      	str	r6, [r4, #16]
 800ae1a:	7563      	strb	r3, [r4, #21]
 800ae1c:	b002      	add	sp, #8
 800ae1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae22:	2102      	movs	r1, #2
 800ae24:	4620      	mov	r0, r4
 800ae26:	f001 f88b 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800ae2a:	b190      	cbz	r0, 800ae52 <ucdr_serialize_uint16_t+0xae>
 800ae2c:	7d23      	ldrb	r3, [r4, #20]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	d014      	beq.n	800ae5e <ucdr_serialize_uint16_t+0xba>
 800ae34:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	68a3      	ldr	r3, [r4, #8]
 800ae3c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae40:	705a      	strb	r2, [r3, #1]
 800ae42:	68a2      	ldr	r2, [r4, #8]
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	3202      	adds	r2, #2
 800ae48:	3302      	adds	r3, #2
 800ae4a:	2102      	movs	r1, #2
 800ae4c:	60a2      	str	r2, [r4, #8]
 800ae4e:	6123      	str	r3, [r4, #16]
 800ae50:	7561      	strb	r1, [r4, #21]
 800ae52:	7da0      	ldrb	r0, [r4, #22]
 800ae54:	f080 0001 	eor.w	r0, r0, #1
 800ae58:	b002      	add	sp, #8
 800ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ae62:	801a      	strh	r2, [r3, #0]
 800ae64:	e7ed      	b.n	800ae42 <ucdr_serialize_uint16_t+0x9e>
 800ae66:	68a2      	ldr	r2, [r4, #8]
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	7da0      	ldrb	r0, [r4, #22]
 800ae6c:	7567      	strb	r7, [r4, #21]
 800ae6e:	1b92      	subs	r2, r2, r6
 800ae70:	1b9b      	subs	r3, r3, r6
 800ae72:	f080 0001 	eor.w	r0, r0, #1
 800ae76:	60a2      	str	r2, [r4, #8]
 800ae78:	6123      	str	r3, [r4, #16]
 800ae7a:	b002      	add	sp, #8
 800ae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae80:	68a3      	ldr	r3, [r4, #8]
 800ae82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	e7bc      	b.n	800ae04 <ucdr_serialize_uint16_t+0x60>
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f10d 0506 	add.w	r5, sp, #6
 800ae90:	4629      	mov	r1, r5
 800ae92:	4632      	mov	r2, r6
 800ae94:	f00c ff59 	bl	8017d4a <memcpy>
 800ae98:	68a0      	ldr	r0, [r4, #8]
 800ae9a:	4642      	mov	r2, r8
 800ae9c:	19a9      	adds	r1, r5, r6
 800ae9e:	f00c ff54 	bl	8017d4a <memcpy>
 800aea2:	e7af      	b.n	800ae04 <ucdr_serialize_uint16_t+0x60>

0800aea4 <ucdr_serialize_endian_uint16_t>:
 800aea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	460d      	mov	r5, r1
 800aeac:	2102      	movs	r1, #2
 800aeae:	4604      	mov	r4, r0
 800aeb0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800aeb4:	f001 f898 	bl	800bfe8 <ucdr_buffer_alignment>
 800aeb8:	4601      	mov	r1, r0
 800aeba:	4620      	mov	r0, r4
 800aebc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aec0:	f001 f8d6 	bl	800c070 <ucdr_advance_buffer>
 800aec4:	2102      	movs	r1, #2
 800aec6:	4620      	mov	r0, r4
 800aec8:	f001 f82e 	bl	800bf28 <ucdr_check_buffer_available_for>
 800aecc:	bb70      	cbnz	r0, 800af2c <ucdr_serialize_endian_uint16_t+0x88>
 800aece:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aed2:	42be      	cmp	r6, r7
 800aed4:	d925      	bls.n	800af22 <ucdr_serialize_endian_uint16_t+0x7e>
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	60a6      	str	r6, [r4, #8]
 800aeda:	1bf6      	subs	r6, r6, r7
 800aedc:	4433      	add	r3, r6
 800aede:	f1c6 0902 	rsb	r9, r6, #2
 800aee2:	6123      	str	r3, [r4, #16]
 800aee4:	4649      	mov	r1, r9
 800aee6:	4620      	mov	r0, r4
 800aee8:	f001 f82a 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d039      	beq.n	800af64 <ucdr_serialize_endian_uint16_t+0xc0>
 800aef0:	2d01      	cmp	r5, #1
 800aef2:	d04a      	beq.n	800af8a <ucdr_serialize_endian_uint16_t+0xe6>
 800aef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aef8:	703b      	strb	r3, [r7, #0]
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	d040      	beq.n	800af80 <ucdr_serialize_endian_uint16_t+0xdc>
 800aefe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800af02:	707b      	strb	r3, [r7, #1]
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	68a2      	ldr	r2, [r4, #8]
 800af08:	7da0      	ldrb	r0, [r4, #22]
 800af0a:	3302      	adds	r3, #2
 800af0c:	444a      	add	r2, r9
 800af0e:	1b9b      	subs	r3, r3, r6
 800af10:	2102      	movs	r1, #2
 800af12:	f080 0001 	eor.w	r0, r0, #1
 800af16:	60a2      	str	r2, [r4, #8]
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	7561      	strb	r1, [r4, #21]
 800af1c:	b003      	add	sp, #12
 800af1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af22:	2102      	movs	r1, #2
 800af24:	4620      	mov	r0, r4
 800af26:	f001 f80b 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800af2a:	b188      	cbz	r0, 800af50 <ucdr_serialize_endian_uint16_t+0xac>
 800af2c:	2d01      	cmp	r5, #1
 800af2e:	68a3      	ldr	r3, [r4, #8]
 800af30:	d014      	beq.n	800af5c <ucdr_serialize_endian_uint16_t+0xb8>
 800af32:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af3e:	705a      	strb	r2, [r3, #1]
 800af40:	68a2      	ldr	r2, [r4, #8]
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	3202      	adds	r2, #2
 800af46:	3302      	adds	r3, #2
 800af48:	2102      	movs	r1, #2
 800af4a:	60a2      	str	r2, [r4, #8]
 800af4c:	6123      	str	r3, [r4, #16]
 800af4e:	7561      	strb	r1, [r4, #21]
 800af50:	7da0      	ldrb	r0, [r4, #22]
 800af52:	f080 0001 	eor.w	r0, r0, #1
 800af56:	b003      	add	sp, #12
 800af58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800af60:	801a      	strh	r2, [r3, #0]
 800af62:	e7ed      	b.n	800af40 <ucdr_serialize_endian_uint16_t+0x9c>
 800af64:	68a2      	ldr	r2, [r4, #8]
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	7da0      	ldrb	r0, [r4, #22]
 800af6a:	f884 8015 	strb.w	r8, [r4, #21]
 800af6e:	1b92      	subs	r2, r2, r6
 800af70:	1b9b      	subs	r3, r3, r6
 800af72:	f080 0001 	eor.w	r0, r0, #1
 800af76:	60a2      	str	r2, [r4, #8]
 800af78:	6123      	str	r3, [r4, #16]
 800af7a:	b003      	add	sp, #12
 800af7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af86:	701a      	strb	r2, [r3, #0]
 800af88:	e7bc      	b.n	800af04 <ucdr_serialize_endian_uint16_t+0x60>
 800af8a:	f10d 0506 	add.w	r5, sp, #6
 800af8e:	4629      	mov	r1, r5
 800af90:	4632      	mov	r2, r6
 800af92:	4638      	mov	r0, r7
 800af94:	f00c fed9 	bl	8017d4a <memcpy>
 800af98:	68a0      	ldr	r0, [r4, #8]
 800af9a:	464a      	mov	r2, r9
 800af9c:	19a9      	adds	r1, r5, r6
 800af9e:	f00c fed4 	bl	8017d4a <memcpy>
 800afa2:	e7af      	b.n	800af04 <ucdr_serialize_endian_uint16_t+0x60>

0800afa4 <ucdr_deserialize_uint16_t>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	460d      	mov	r5, r1
 800afaa:	2102      	movs	r1, #2
 800afac:	4604      	mov	r4, r0
 800afae:	f001 f81b 	bl	800bfe8 <ucdr_buffer_alignment>
 800afb2:	4601      	mov	r1, r0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800afba:	f001 f859 	bl	800c070 <ucdr_advance_buffer>
 800afbe:	2102      	movs	r1, #2
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 ffb1 	bl	800bf28 <ucdr_check_buffer_available_for>
 800afc6:	bb60      	cbnz	r0, 800b022 <ucdr_deserialize_uint16_t+0x7e>
 800afc8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800afcc:	42be      	cmp	r6, r7
 800afce:	d923      	bls.n	800b018 <ucdr_deserialize_uint16_t+0x74>
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	60a6      	str	r6, [r4, #8]
 800afd4:	1bf6      	subs	r6, r6, r7
 800afd6:	4433      	add	r3, r6
 800afd8:	f1c6 0902 	rsb	r9, r6, #2
 800afdc:	6123      	str	r3, [r4, #16]
 800afde:	4649      	mov	r1, r9
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 ffad 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d034      	beq.n	800b054 <ucdr_deserialize_uint16_t+0xb0>
 800afea:	7d23      	ldrb	r3, [r4, #20]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d042      	beq.n	800b076 <ucdr_deserialize_uint16_t+0xd2>
 800aff0:	787b      	ldrb	r3, [r7, #1]
 800aff2:	702b      	strb	r3, [r5, #0]
 800aff4:	2e00      	cmp	r6, #0
 800aff6:	d03a      	beq.n	800b06e <ucdr_deserialize_uint16_t+0xca>
 800aff8:	783b      	ldrb	r3, [r7, #0]
 800affa:	706b      	strb	r3, [r5, #1]
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	68a2      	ldr	r2, [r4, #8]
 800b000:	7da0      	ldrb	r0, [r4, #22]
 800b002:	2102      	movs	r1, #2
 800b004:	3302      	adds	r3, #2
 800b006:	444a      	add	r2, r9
 800b008:	1b9b      	subs	r3, r3, r6
 800b00a:	7561      	strb	r1, [r4, #21]
 800b00c:	60a2      	str	r2, [r4, #8]
 800b00e:	6123      	str	r3, [r4, #16]
 800b010:	f080 0001 	eor.w	r0, r0, #1
 800b014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b018:	2102      	movs	r1, #2
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 ff90 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b020:	b180      	cbz	r0, 800b044 <ucdr_deserialize_uint16_t+0xa0>
 800b022:	7d23      	ldrb	r3, [r4, #20]
 800b024:	2b01      	cmp	r3, #1
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	d011      	beq.n	800b04e <ucdr_deserialize_uint16_t+0xaa>
 800b02a:	785b      	ldrb	r3, [r3, #1]
 800b02c:	702b      	strb	r3, [r5, #0]
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	706b      	strb	r3, [r5, #1]
 800b034:	68a2      	ldr	r2, [r4, #8]
 800b036:	6923      	ldr	r3, [r4, #16]
 800b038:	3202      	adds	r2, #2
 800b03a:	3302      	adds	r3, #2
 800b03c:	2102      	movs	r1, #2
 800b03e:	60a2      	str	r2, [r4, #8]
 800b040:	6123      	str	r3, [r4, #16]
 800b042:	7561      	strb	r1, [r4, #21]
 800b044:	7da0      	ldrb	r0, [r4, #22]
 800b046:	f080 0001 	eor.w	r0, r0, #1
 800b04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	802b      	strh	r3, [r5, #0]
 800b052:	e7ef      	b.n	800b034 <ucdr_deserialize_uint16_t+0x90>
 800b054:	68a2      	ldr	r2, [r4, #8]
 800b056:	6923      	ldr	r3, [r4, #16]
 800b058:	7da0      	ldrb	r0, [r4, #22]
 800b05a:	f884 8015 	strb.w	r8, [r4, #21]
 800b05e:	1b92      	subs	r2, r2, r6
 800b060:	1b9b      	subs	r3, r3, r6
 800b062:	60a2      	str	r2, [r4, #8]
 800b064:	6123      	str	r3, [r4, #16]
 800b066:	f080 0001 	eor.w	r0, r0, #1
 800b06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06e:	68a3      	ldr	r3, [r4, #8]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	706b      	strb	r3, [r5, #1]
 800b074:	e7c2      	b.n	800affc <ucdr_deserialize_uint16_t+0x58>
 800b076:	4639      	mov	r1, r7
 800b078:	4632      	mov	r2, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	f00c fe65 	bl	8017d4a <memcpy>
 800b080:	68a1      	ldr	r1, [r4, #8]
 800b082:	464a      	mov	r2, r9
 800b084:	19a8      	adds	r0, r5, r6
 800b086:	f00c fe60 	bl	8017d4a <memcpy>
 800b08a:	e7b7      	b.n	800affc <ucdr_deserialize_uint16_t+0x58>

0800b08c <ucdr_deserialize_endian_uint16_t>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	460e      	mov	r6, r1
 800b092:	2102      	movs	r1, #2
 800b094:	4604      	mov	r4, r0
 800b096:	4615      	mov	r5, r2
 800b098:	f000 ffa6 	bl	800bfe8 <ucdr_buffer_alignment>
 800b09c:	4601      	mov	r1, r0
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b0a4:	f000 ffe4 	bl	800c070 <ucdr_advance_buffer>
 800b0a8:	2102      	movs	r1, #2
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 ff3c 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b0b0:	bb70      	cbnz	r0, 800b110 <ucdr_deserialize_endian_uint16_t+0x84>
 800b0b2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b0b6:	4547      	cmp	r7, r8
 800b0b8:	d925      	bls.n	800b106 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	60a7      	str	r7, [r4, #8]
 800b0be:	eba7 0708 	sub.w	r7, r7, r8
 800b0c2:	443b      	add	r3, r7
 800b0c4:	f1c7 0a02 	rsb	sl, r7, #2
 800b0c8:	6123      	str	r3, [r4, #16]
 800b0ca:	4651      	mov	r1, sl
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 ff37 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d034      	beq.n	800b140 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b0d6:	2e01      	cmp	r6, #1
 800b0d8:	d043      	beq.n	800b162 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b0da:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b0de:	702b      	strb	r3, [r5, #0]
 800b0e0:	2f00      	cmp	r7, #0
 800b0e2:	d03a      	beq.n	800b15a <ucdr_deserialize_endian_uint16_t+0xce>
 800b0e4:	f898 3000 	ldrb.w	r3, [r8]
 800b0e8:	706b      	strb	r3, [r5, #1]
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	68a2      	ldr	r2, [r4, #8]
 800b0ee:	7da0      	ldrb	r0, [r4, #22]
 800b0f0:	2102      	movs	r1, #2
 800b0f2:	3302      	adds	r3, #2
 800b0f4:	4452      	add	r2, sl
 800b0f6:	1bdb      	subs	r3, r3, r7
 800b0f8:	7561      	strb	r1, [r4, #21]
 800b0fa:	60a2      	str	r2, [r4, #8]
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	f080 0001 	eor.w	r0, r0, #1
 800b102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b106:	2102      	movs	r1, #2
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 ff19 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b10e:	b178      	cbz	r0, 800b130 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b110:	2e01      	cmp	r6, #1
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	d011      	beq.n	800b13a <ucdr_deserialize_endian_uint16_t+0xae>
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	702b      	strb	r3, [r5, #0]
 800b11a:	68a3      	ldr	r3, [r4, #8]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	706b      	strb	r3, [r5, #1]
 800b120:	68a2      	ldr	r2, [r4, #8]
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	3202      	adds	r2, #2
 800b126:	3302      	adds	r3, #2
 800b128:	2102      	movs	r1, #2
 800b12a:	60a2      	str	r2, [r4, #8]
 800b12c:	6123      	str	r3, [r4, #16]
 800b12e:	7561      	strb	r1, [r4, #21]
 800b130:	7da0      	ldrb	r0, [r4, #22]
 800b132:	f080 0001 	eor.w	r0, r0, #1
 800b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	802b      	strh	r3, [r5, #0]
 800b13e:	e7ef      	b.n	800b120 <ucdr_deserialize_endian_uint16_t+0x94>
 800b140:	68a2      	ldr	r2, [r4, #8]
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	7da0      	ldrb	r0, [r4, #22]
 800b146:	f884 9015 	strb.w	r9, [r4, #21]
 800b14a:	1bd2      	subs	r2, r2, r7
 800b14c:	1bdb      	subs	r3, r3, r7
 800b14e:	60a2      	str	r2, [r4, #8]
 800b150:	6123      	str	r3, [r4, #16]
 800b152:	f080 0001 	eor.w	r0, r0, #1
 800b156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	706b      	strb	r3, [r5, #1]
 800b160:	e7c3      	b.n	800b0ea <ucdr_deserialize_endian_uint16_t+0x5e>
 800b162:	4641      	mov	r1, r8
 800b164:	463a      	mov	r2, r7
 800b166:	4628      	mov	r0, r5
 800b168:	f00c fdef 	bl	8017d4a <memcpy>
 800b16c:	68a1      	ldr	r1, [r4, #8]
 800b16e:	4652      	mov	r2, sl
 800b170:	19e8      	adds	r0, r5, r7
 800b172:	f00c fdea 	bl	8017d4a <memcpy>
 800b176:	e7b8      	b.n	800b0ea <ucdr_deserialize_endian_uint16_t+0x5e>

0800b178 <ucdr_serialize_uint32_t>:
 800b178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	4604      	mov	r4, r0
 800b180:	9101      	str	r1, [sp, #4]
 800b182:	2104      	movs	r1, #4
 800b184:	f000 ff30 	bl	800bfe8 <ucdr_buffer_alignment>
 800b188:	4601      	mov	r1, r0
 800b18a:	4620      	mov	r0, r4
 800b18c:	7d67      	ldrb	r7, [r4, #21]
 800b18e:	f000 ff6f 	bl	800c070 <ucdr_advance_buffer>
 800b192:	2104      	movs	r1, #4
 800b194:	4620      	mov	r0, r4
 800b196:	f000 fec7 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d139      	bne.n	800b212 <ucdr_serialize_uint32_t+0x9a>
 800b19e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b1a2:	42ab      	cmp	r3, r5
 800b1a4:	d930      	bls.n	800b208 <ucdr_serialize_uint32_t+0x90>
 800b1a6:	1b5e      	subs	r6, r3, r5
 800b1a8:	60a3      	str	r3, [r4, #8]
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	f1c6 0804 	rsb	r8, r6, #4
 800b1b0:	4433      	add	r3, r6
 800b1b2:	6123      	str	r3, [r4, #16]
 800b1b4:	4641      	mov	r1, r8
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 fec2 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d04c      	beq.n	800b25a <ucdr_serialize_uint32_t+0xe2>
 800b1c0:	7d23      	ldrb	r3, [r4, #20]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d063      	beq.n	800b28e <ucdr_serialize_uint32_t+0x116>
 800b1c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1ca:	702b      	strb	r3, [r5, #0]
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	d051      	beq.n	800b274 <ucdr_serialize_uint32_t+0xfc>
 800b1d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1d4:	706b      	strb	r3, [r5, #1]
 800b1d6:	2e01      	cmp	r6, #1
 800b1d8:	d050      	beq.n	800b27c <ucdr_serialize_uint32_t+0x104>
 800b1da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b1de:	70ab      	strb	r3, [r5, #2]
 800b1e0:	2e02      	cmp	r6, #2
 800b1e2:	d04f      	beq.n	800b284 <ucdr_serialize_uint32_t+0x10c>
 800b1e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b1e8:	70eb      	strb	r3, [r5, #3]
 800b1ea:	6923      	ldr	r3, [r4, #16]
 800b1ec:	68a2      	ldr	r2, [r4, #8]
 800b1ee:	7da0      	ldrb	r0, [r4, #22]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	1b9e      	subs	r6, r3, r6
 800b1f4:	4442      	add	r2, r8
 800b1f6:	2304      	movs	r3, #4
 800b1f8:	f080 0001 	eor.w	r0, r0, #1
 800b1fc:	60a2      	str	r2, [r4, #8]
 800b1fe:	6126      	str	r6, [r4, #16]
 800b200:	7563      	strb	r3, [r4, #21]
 800b202:	b002      	add	sp, #8
 800b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b208:	2104      	movs	r1, #4
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 fe98 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b210:	b1d0      	cbz	r0, 800b248 <ucdr_serialize_uint32_t+0xd0>
 800b212:	7d23      	ldrb	r3, [r4, #20]
 800b214:	2b01      	cmp	r3, #1
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	d01c      	beq.n	800b254 <ucdr_serialize_uint32_t+0xdc>
 800b21a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b21e:	701a      	strb	r2, [r3, #0]
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b226:	705a      	strb	r2, [r3, #1]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b22e:	709a      	strb	r2, [r3, #2]
 800b230:	68a3      	ldr	r3, [r4, #8]
 800b232:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b236:	70da      	strb	r2, [r3, #3]
 800b238:	68a2      	ldr	r2, [r4, #8]
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	3204      	adds	r2, #4
 800b23e:	3304      	adds	r3, #4
 800b240:	2104      	movs	r1, #4
 800b242:	60a2      	str	r2, [r4, #8]
 800b244:	6123      	str	r3, [r4, #16]
 800b246:	7561      	strb	r1, [r4, #21]
 800b248:	7da0      	ldrb	r0, [r4, #22]
 800b24a:	f080 0001 	eor.w	r0, r0, #1
 800b24e:	b002      	add	sp, #8
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b254:	9a01      	ldr	r2, [sp, #4]
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	e7ee      	b.n	800b238 <ucdr_serialize_uint32_t+0xc0>
 800b25a:	68a2      	ldr	r2, [r4, #8]
 800b25c:	6923      	ldr	r3, [r4, #16]
 800b25e:	7da0      	ldrb	r0, [r4, #22]
 800b260:	7567      	strb	r7, [r4, #21]
 800b262:	1b92      	subs	r2, r2, r6
 800b264:	1b9b      	subs	r3, r3, r6
 800b266:	f080 0001 	eor.w	r0, r0, #1
 800b26a:	60a2      	str	r2, [r4, #8]
 800b26c:	6123      	str	r3, [r4, #16]
 800b26e:	b002      	add	sp, #8
 800b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b274:	68a3      	ldr	r3, [r4, #8]
 800b276:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b27a:	701a      	strb	r2, [r3, #0]
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b282:	701a      	strb	r2, [r3, #0]
 800b284:	68a3      	ldr	r3, [r4, #8]
 800b286:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	e7ad      	b.n	800b1ea <ucdr_serialize_uint32_t+0x72>
 800b28e:	4628      	mov	r0, r5
 800b290:	ad01      	add	r5, sp, #4
 800b292:	4629      	mov	r1, r5
 800b294:	4632      	mov	r2, r6
 800b296:	f00c fd58 	bl	8017d4a <memcpy>
 800b29a:	68a0      	ldr	r0, [r4, #8]
 800b29c:	4642      	mov	r2, r8
 800b29e:	19a9      	adds	r1, r5, r6
 800b2a0:	f00c fd53 	bl	8017d4a <memcpy>
 800b2a4:	e7a1      	b.n	800b1ea <ucdr_serialize_uint32_t+0x72>
 800b2a6:	bf00      	nop

0800b2a8 <ucdr_serialize_endian_uint32_t>:
 800b2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	b083      	sub	sp, #12
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	2104      	movs	r1, #4
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	9201      	str	r2, [sp, #4]
 800b2b6:	f000 fe97 	bl	800bfe8 <ucdr_buffer_alignment>
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b2c2:	f000 fed5 	bl	800c070 <ucdr_advance_buffer>
 800b2c6:	2104      	movs	r1, #4
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 fe2d 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d138      	bne.n	800b344 <ucdr_serialize_endian_uint32_t+0x9c>
 800b2d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b2d6:	42b7      	cmp	r7, r6
 800b2d8:	d92f      	bls.n	800b33a <ucdr_serialize_endian_uint32_t+0x92>
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	60a7      	str	r7, [r4, #8]
 800b2de:	1bbf      	subs	r7, r7, r6
 800b2e0:	443b      	add	r3, r7
 800b2e2:	f1c7 0904 	rsb	r9, r7, #4
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fe28 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d04a      	beq.n	800b38a <ucdr_serialize_endian_uint32_t+0xe2>
 800b2f4:	2d01      	cmp	r5, #1
 800b2f6:	d063      	beq.n	800b3c0 <ucdr_serialize_endian_uint32_t+0x118>
 800b2f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2fc:	7033      	strb	r3, [r6, #0]
 800b2fe:	2f00      	cmp	r7, #0
 800b300:	d051      	beq.n	800b3a6 <ucdr_serialize_endian_uint32_t+0xfe>
 800b302:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b306:	7073      	strb	r3, [r6, #1]
 800b308:	2f01      	cmp	r7, #1
 800b30a:	d050      	beq.n	800b3ae <ucdr_serialize_endian_uint32_t+0x106>
 800b30c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b310:	70b3      	strb	r3, [r6, #2]
 800b312:	2f02      	cmp	r7, #2
 800b314:	d04f      	beq.n	800b3b6 <ucdr_serialize_endian_uint32_t+0x10e>
 800b316:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b31a:	70f3      	strb	r3, [r6, #3]
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	68a2      	ldr	r2, [r4, #8]
 800b320:	7da0      	ldrb	r0, [r4, #22]
 800b322:	3304      	adds	r3, #4
 800b324:	444a      	add	r2, r9
 800b326:	1bdb      	subs	r3, r3, r7
 800b328:	2104      	movs	r1, #4
 800b32a:	f080 0001 	eor.w	r0, r0, #1
 800b32e:	60a2      	str	r2, [r4, #8]
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	7561      	strb	r1, [r4, #21]
 800b334:	b003      	add	sp, #12
 800b336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b33a:	2104      	movs	r1, #4
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 fdff 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b342:	b1c8      	cbz	r0, 800b378 <ucdr_serialize_endian_uint32_t+0xd0>
 800b344:	2d01      	cmp	r5, #1
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	d01c      	beq.n	800b384 <ucdr_serialize_endian_uint32_t+0xdc>
 800b34a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b34e:	701a      	strb	r2, [r3, #0]
 800b350:	68a3      	ldr	r3, [r4, #8]
 800b352:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b356:	705a      	strb	r2, [r3, #1]
 800b358:	68a3      	ldr	r3, [r4, #8]
 800b35a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b35e:	709a      	strb	r2, [r3, #2]
 800b360:	68a3      	ldr	r3, [r4, #8]
 800b362:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b366:	70da      	strb	r2, [r3, #3]
 800b368:	68a2      	ldr	r2, [r4, #8]
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	3204      	adds	r2, #4
 800b36e:	3304      	adds	r3, #4
 800b370:	2104      	movs	r1, #4
 800b372:	60a2      	str	r2, [r4, #8]
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	7561      	strb	r1, [r4, #21]
 800b378:	7da0      	ldrb	r0, [r4, #22]
 800b37a:	f080 0001 	eor.w	r0, r0, #1
 800b37e:	b003      	add	sp, #12
 800b380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b384:	9a01      	ldr	r2, [sp, #4]
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	e7ee      	b.n	800b368 <ucdr_serialize_endian_uint32_t+0xc0>
 800b38a:	68a2      	ldr	r2, [r4, #8]
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	7da0      	ldrb	r0, [r4, #22]
 800b390:	f884 8015 	strb.w	r8, [r4, #21]
 800b394:	1bd2      	subs	r2, r2, r7
 800b396:	1bdb      	subs	r3, r3, r7
 800b398:	f080 0001 	eor.w	r0, r0, #1
 800b39c:	60a2      	str	r2, [r4, #8]
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	b003      	add	sp, #12
 800b3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3a6:	68a3      	ldr	r3, [r4, #8]
 800b3a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b3b4:	701a      	strb	r2, [r3, #0]
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	e7ad      	b.n	800b31c <ucdr_serialize_endian_uint32_t+0x74>
 800b3c0:	ad01      	add	r5, sp, #4
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	463a      	mov	r2, r7
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f00c fcbf 	bl	8017d4a <memcpy>
 800b3cc:	68a0      	ldr	r0, [r4, #8]
 800b3ce:	464a      	mov	r2, r9
 800b3d0:	19e9      	adds	r1, r5, r7
 800b3d2:	f00c fcba 	bl	8017d4a <memcpy>
 800b3d6:	e7a1      	b.n	800b31c <ucdr_serialize_endian_uint32_t+0x74>

0800b3d8 <ucdr_deserialize_uint32_t>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	460d      	mov	r5, r1
 800b3de:	2104      	movs	r1, #4
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	f000 fe01 	bl	800bfe8 <ucdr_buffer_alignment>
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b3ee:	f000 fe3f 	bl	800c070 <ucdr_advance_buffer>
 800b3f2:	2104      	movs	r1, #4
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 fd97 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d138      	bne.n	800b470 <ucdr_deserialize_uint32_t+0x98>
 800b3fe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b402:	42b7      	cmp	r7, r6
 800b404:	d92f      	bls.n	800b466 <ucdr_deserialize_uint32_t+0x8e>
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	60a7      	str	r7, [r4, #8]
 800b40a:	1bbf      	subs	r7, r7, r6
 800b40c:	443b      	add	r3, r7
 800b40e:	f1c7 0904 	rsb	r9, r7, #4
 800b412:	6123      	str	r3, [r4, #16]
 800b414:	4649      	mov	r1, r9
 800b416:	4620      	mov	r0, r4
 800b418:	f000 fd92 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d046      	beq.n	800b4ae <ucdr_deserialize_uint32_t+0xd6>
 800b420:	7d23      	ldrb	r3, [r4, #20]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d05c      	beq.n	800b4e0 <ucdr_deserialize_uint32_t+0x108>
 800b426:	78f3      	ldrb	r3, [r6, #3]
 800b428:	702b      	strb	r3, [r5, #0]
 800b42a:	2f00      	cmp	r7, #0
 800b42c:	d04c      	beq.n	800b4c8 <ucdr_deserialize_uint32_t+0xf0>
 800b42e:	78b3      	ldrb	r3, [r6, #2]
 800b430:	706b      	strb	r3, [r5, #1]
 800b432:	2f01      	cmp	r7, #1
 800b434:	f105 0302 	add.w	r3, r5, #2
 800b438:	d04a      	beq.n	800b4d0 <ucdr_deserialize_uint32_t+0xf8>
 800b43a:	7873      	ldrb	r3, [r6, #1]
 800b43c:	70ab      	strb	r3, [r5, #2]
 800b43e:	2f02      	cmp	r7, #2
 800b440:	f105 0303 	add.w	r3, r5, #3
 800b444:	d048      	beq.n	800b4d8 <ucdr_deserialize_uint32_t+0x100>
 800b446:	7833      	ldrb	r3, [r6, #0]
 800b448:	70eb      	strb	r3, [r5, #3]
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	68a2      	ldr	r2, [r4, #8]
 800b44e:	7da0      	ldrb	r0, [r4, #22]
 800b450:	2104      	movs	r1, #4
 800b452:	3304      	adds	r3, #4
 800b454:	444a      	add	r2, r9
 800b456:	1bdb      	subs	r3, r3, r7
 800b458:	7561      	strb	r1, [r4, #21]
 800b45a:	60a2      	str	r2, [r4, #8]
 800b45c:	6123      	str	r3, [r4, #16]
 800b45e:	f080 0001 	eor.w	r0, r0, #1
 800b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b466:	2104      	movs	r1, #4
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 fd69 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b46e:	b1b0      	cbz	r0, 800b49e <ucdr_deserialize_uint32_t+0xc6>
 800b470:	7d23      	ldrb	r3, [r4, #20]
 800b472:	2b01      	cmp	r3, #1
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	d017      	beq.n	800b4a8 <ucdr_deserialize_uint32_t+0xd0>
 800b478:	78db      	ldrb	r3, [r3, #3]
 800b47a:	702b      	strb	r3, [r5, #0]
 800b47c:	68a3      	ldr	r3, [r4, #8]
 800b47e:	789b      	ldrb	r3, [r3, #2]
 800b480:	706b      	strb	r3, [r5, #1]
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	70ab      	strb	r3, [r5, #2]
 800b488:	68a3      	ldr	r3, [r4, #8]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	70eb      	strb	r3, [r5, #3]
 800b48e:	68a2      	ldr	r2, [r4, #8]
 800b490:	6923      	ldr	r3, [r4, #16]
 800b492:	3204      	adds	r2, #4
 800b494:	3304      	adds	r3, #4
 800b496:	2104      	movs	r1, #4
 800b498:	60a2      	str	r2, [r4, #8]
 800b49a:	6123      	str	r3, [r4, #16]
 800b49c:	7561      	strb	r1, [r4, #21]
 800b49e:	7da0      	ldrb	r0, [r4, #22]
 800b4a0:	f080 0001 	eor.w	r0, r0, #1
 800b4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	602b      	str	r3, [r5, #0]
 800b4ac:	e7ef      	b.n	800b48e <ucdr_deserialize_uint32_t+0xb6>
 800b4ae:	68a2      	ldr	r2, [r4, #8]
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	7da0      	ldrb	r0, [r4, #22]
 800b4b4:	f884 8015 	strb.w	r8, [r4, #21]
 800b4b8:	1bd2      	subs	r2, r2, r7
 800b4ba:	1bdb      	subs	r3, r3, r7
 800b4bc:	60a2      	str	r2, [r4, #8]
 800b4be:	6123      	str	r3, [r4, #16]
 800b4c0:	f080 0001 	eor.w	r0, r0, #1
 800b4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	789b      	ldrb	r3, [r3, #2]
 800b4cc:	706b      	strb	r3, [r5, #1]
 800b4ce:	1cab      	adds	r3, r5, #2
 800b4d0:	68a2      	ldr	r2, [r4, #8]
 800b4d2:	7852      	ldrb	r2, [r2, #1]
 800b4d4:	f803 2b01 	strb.w	r2, [r3], #1
 800b4d8:	68a2      	ldr	r2, [r4, #8]
 800b4da:	7812      	ldrb	r2, [r2, #0]
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	e7b4      	b.n	800b44a <ucdr_deserialize_uint32_t+0x72>
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	463a      	mov	r2, r7
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f00c fc30 	bl	8017d4a <memcpy>
 800b4ea:	68a1      	ldr	r1, [r4, #8]
 800b4ec:	464a      	mov	r2, r9
 800b4ee:	19e8      	adds	r0, r5, r7
 800b4f0:	f00c fc2b 	bl	8017d4a <memcpy>
 800b4f4:	e7a9      	b.n	800b44a <ucdr_deserialize_uint32_t+0x72>
 800b4f6:	bf00      	nop

0800b4f8 <ucdr_deserialize_endian_uint32_t>:
 800b4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fc:	460e      	mov	r6, r1
 800b4fe:	2104      	movs	r1, #4
 800b500:	4604      	mov	r4, r0
 800b502:	4615      	mov	r5, r2
 800b504:	f000 fd70 	bl	800bfe8 <ucdr_buffer_alignment>
 800b508:	4601      	mov	r1, r0
 800b50a:	4620      	mov	r0, r4
 800b50c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b510:	f000 fdae 	bl	800c070 <ucdr_advance_buffer>
 800b514:	2104      	movs	r1, #4
 800b516:	4620      	mov	r0, r4
 800b518:	f000 fd06 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d13c      	bne.n	800b59a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b520:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b524:	42bb      	cmp	r3, r7
 800b526:	d933      	bls.n	800b590 <ucdr_deserialize_endian_uint32_t+0x98>
 800b528:	eba3 0807 	sub.w	r8, r3, r7
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	f1c8 0a04 	rsb	sl, r8, #4
 800b534:	4443      	add	r3, r8
 800b536:	6123      	str	r3, [r4, #16]
 800b538:	4651      	mov	r1, sl
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 fd00 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b540:	2800      	cmp	r0, #0
 800b542:	d048      	beq.n	800b5d6 <ucdr_deserialize_endian_uint32_t+0xde>
 800b544:	2e01      	cmp	r6, #1
 800b546:	d061      	beq.n	800b60c <ucdr_deserialize_endian_uint32_t+0x114>
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	702b      	strb	r3, [r5, #0]
 800b54c:	f1b8 0f00 	cmp.w	r8, #0
 800b550:	d050      	beq.n	800b5f4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b552:	78bb      	ldrb	r3, [r7, #2]
 800b554:	706b      	strb	r3, [r5, #1]
 800b556:	f1b8 0f01 	cmp.w	r8, #1
 800b55a:	f105 0302 	add.w	r3, r5, #2
 800b55e:	d04d      	beq.n	800b5fc <ucdr_deserialize_endian_uint32_t+0x104>
 800b560:	787b      	ldrb	r3, [r7, #1]
 800b562:	70ab      	strb	r3, [r5, #2]
 800b564:	f1b8 0f02 	cmp.w	r8, #2
 800b568:	f105 0303 	add.w	r3, r5, #3
 800b56c:	d04a      	beq.n	800b604 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b56e:	783b      	ldrb	r3, [r7, #0]
 800b570:	70eb      	strb	r3, [r5, #3]
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	68a2      	ldr	r2, [r4, #8]
 800b576:	7da0      	ldrb	r0, [r4, #22]
 800b578:	2104      	movs	r1, #4
 800b57a:	3304      	adds	r3, #4
 800b57c:	4452      	add	r2, sl
 800b57e:	eba3 0308 	sub.w	r3, r3, r8
 800b582:	7561      	strb	r1, [r4, #21]
 800b584:	60a2      	str	r2, [r4, #8]
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	f080 0001 	eor.w	r0, r0, #1
 800b58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b590:	2104      	movs	r1, #4
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fcd4 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b598:	b1a8      	cbz	r0, 800b5c6 <ucdr_deserialize_endian_uint32_t+0xce>
 800b59a:	2e01      	cmp	r6, #1
 800b59c:	68a3      	ldr	r3, [r4, #8]
 800b59e:	d017      	beq.n	800b5d0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b5a0:	78db      	ldrb	r3, [r3, #3]
 800b5a2:	702b      	strb	r3, [r5, #0]
 800b5a4:	68a3      	ldr	r3, [r4, #8]
 800b5a6:	789b      	ldrb	r3, [r3, #2]
 800b5a8:	706b      	strb	r3, [r5, #1]
 800b5aa:	68a3      	ldr	r3, [r4, #8]
 800b5ac:	785b      	ldrb	r3, [r3, #1]
 800b5ae:	70ab      	strb	r3, [r5, #2]
 800b5b0:	68a3      	ldr	r3, [r4, #8]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	70eb      	strb	r3, [r5, #3]
 800b5b6:	68a2      	ldr	r2, [r4, #8]
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	3204      	adds	r2, #4
 800b5bc:	3304      	adds	r3, #4
 800b5be:	2104      	movs	r1, #4
 800b5c0:	60a2      	str	r2, [r4, #8]
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	7561      	strb	r1, [r4, #21]
 800b5c6:	7da0      	ldrb	r0, [r4, #22]
 800b5c8:	f080 0001 	eor.w	r0, r0, #1
 800b5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	602b      	str	r3, [r5, #0]
 800b5d4:	e7ef      	b.n	800b5b6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b5d6:	68a2      	ldr	r2, [r4, #8]
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	7da0      	ldrb	r0, [r4, #22]
 800b5dc:	f884 9015 	strb.w	r9, [r4, #21]
 800b5e0:	eba2 0208 	sub.w	r2, r2, r8
 800b5e4:	eba3 0308 	sub.w	r3, r3, r8
 800b5e8:	60a2      	str	r2, [r4, #8]
 800b5ea:	6123      	str	r3, [r4, #16]
 800b5ec:	f080 0001 	eor.w	r0, r0, #1
 800b5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f4:	68a3      	ldr	r3, [r4, #8]
 800b5f6:	789b      	ldrb	r3, [r3, #2]
 800b5f8:	706b      	strb	r3, [r5, #1]
 800b5fa:	1cab      	adds	r3, r5, #2
 800b5fc:	68a2      	ldr	r2, [r4, #8]
 800b5fe:	7852      	ldrb	r2, [r2, #1]
 800b600:	f803 2b01 	strb.w	r2, [r3], #1
 800b604:	68a2      	ldr	r2, [r4, #8]
 800b606:	7812      	ldrb	r2, [r2, #0]
 800b608:	701a      	strb	r2, [r3, #0]
 800b60a:	e7b2      	b.n	800b572 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b60c:	4639      	mov	r1, r7
 800b60e:	4642      	mov	r2, r8
 800b610:	4628      	mov	r0, r5
 800b612:	f00c fb9a 	bl	8017d4a <memcpy>
 800b616:	68a1      	ldr	r1, [r4, #8]
 800b618:	4652      	mov	r2, sl
 800b61a:	eb05 0008 	add.w	r0, r5, r8
 800b61e:	f00c fb94 	bl	8017d4a <memcpy>
 800b622:	e7a6      	b.n	800b572 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b624 <ucdr_serialize_uint64_t>:
 800b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b628:	2108      	movs	r1, #8
 800b62a:	b082      	sub	sp, #8
 800b62c:	4604      	mov	r4, r0
 800b62e:	e9cd 2300 	strd	r2, r3, [sp]
 800b632:	f000 fcd9 	bl	800bfe8 <ucdr_buffer_alignment>
 800b636:	4601      	mov	r1, r0
 800b638:	4620      	mov	r0, r4
 800b63a:	7d67      	ldrb	r7, [r4, #21]
 800b63c:	f000 fd18 	bl	800c070 <ucdr_advance_buffer>
 800b640:	2108      	movs	r1, #8
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fc70 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d14e      	bne.n	800b6ea <ucdr_serialize_uint64_t+0xc6>
 800b64c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b650:	42ab      	cmp	r3, r5
 800b652:	d945      	bls.n	800b6e0 <ucdr_serialize_uint64_t+0xbc>
 800b654:	1b5e      	subs	r6, r3, r5
 800b656:	60a3      	str	r3, [r4, #8]
 800b658:	6923      	ldr	r3, [r4, #16]
 800b65a:	f1c6 0808 	rsb	r8, r6, #8
 800b65e:	4433      	add	r3, r6
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	4641      	mov	r1, r8
 800b664:	4620      	mov	r0, r4
 800b666:	f000 fc6b 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d074      	beq.n	800b758 <ucdr_serialize_uint64_t+0x134>
 800b66e:	7d23      	ldrb	r3, [r4, #20]
 800b670:	2b01      	cmp	r3, #1
 800b672:	f000 809b 	beq.w	800b7ac <ucdr_serialize_uint64_t+0x188>
 800b676:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b67a:	702b      	strb	r3, [r5, #0]
 800b67c:	2e00      	cmp	r6, #0
 800b67e:	d078      	beq.n	800b772 <ucdr_serialize_uint64_t+0x14e>
 800b680:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b684:	706b      	strb	r3, [r5, #1]
 800b686:	2e01      	cmp	r6, #1
 800b688:	d077      	beq.n	800b77a <ucdr_serialize_uint64_t+0x156>
 800b68a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b68e:	70ab      	strb	r3, [r5, #2]
 800b690:	2e02      	cmp	r6, #2
 800b692:	d076      	beq.n	800b782 <ucdr_serialize_uint64_t+0x15e>
 800b694:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b698:	70eb      	strb	r3, [r5, #3]
 800b69a:	2e03      	cmp	r6, #3
 800b69c:	d075      	beq.n	800b78a <ucdr_serialize_uint64_t+0x166>
 800b69e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b6a2:	712b      	strb	r3, [r5, #4]
 800b6a4:	2e04      	cmp	r6, #4
 800b6a6:	d074      	beq.n	800b792 <ucdr_serialize_uint64_t+0x16e>
 800b6a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b6ac:	716b      	strb	r3, [r5, #5]
 800b6ae:	2e05      	cmp	r6, #5
 800b6b0:	d073      	beq.n	800b79a <ucdr_serialize_uint64_t+0x176>
 800b6b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b6b6:	71ab      	strb	r3, [r5, #6]
 800b6b8:	2e06      	cmp	r6, #6
 800b6ba:	d072      	beq.n	800b7a2 <ucdr_serialize_uint64_t+0x17e>
 800b6bc:	f89d 3000 	ldrb.w	r3, [sp]
 800b6c0:	71eb      	strb	r3, [r5, #7]
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	68a2      	ldr	r2, [r4, #8]
 800b6c6:	7da0      	ldrb	r0, [r4, #22]
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	1b9e      	subs	r6, r3, r6
 800b6cc:	4442      	add	r2, r8
 800b6ce:	2308      	movs	r3, #8
 800b6d0:	f080 0001 	eor.w	r0, r0, #1
 800b6d4:	60a2      	str	r2, [r4, #8]
 800b6d6:	6126      	str	r6, [r4, #16]
 800b6d8:	7563      	strb	r3, [r4, #21]
 800b6da:	b002      	add	sp, #8
 800b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e0:	2108      	movs	r1, #8
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 fc2c 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b6e8:	b350      	cbz	r0, 800b740 <ucdr_serialize_uint64_t+0x11c>
 800b6ea:	7d23      	ldrb	r3, [r4, #20]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d02d      	beq.n	800b74c <ucdr_serialize_uint64_t+0x128>
 800b6f0:	68a3      	ldr	r3, [r4, #8]
 800b6f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6fe:	705a      	strb	r2, [r3, #1]
 800b700:	68a3      	ldr	r3, [r4, #8]
 800b702:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b706:	709a      	strb	r2, [r3, #2]
 800b708:	68a3      	ldr	r3, [r4, #8]
 800b70a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b70e:	70da      	strb	r2, [r3, #3]
 800b710:	68a3      	ldr	r3, [r4, #8]
 800b712:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b716:	711a      	strb	r2, [r3, #4]
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b71e:	715a      	strb	r2, [r3, #5]
 800b720:	68a3      	ldr	r3, [r4, #8]
 800b722:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b726:	719a      	strb	r2, [r3, #6]
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	f89d 2000 	ldrb.w	r2, [sp]
 800b72e:	71da      	strb	r2, [r3, #7]
 800b730:	68a2      	ldr	r2, [r4, #8]
 800b732:	6923      	ldr	r3, [r4, #16]
 800b734:	3208      	adds	r2, #8
 800b736:	3308      	adds	r3, #8
 800b738:	2108      	movs	r1, #8
 800b73a:	60a2      	str	r2, [r4, #8]
 800b73c:	6123      	str	r3, [r4, #16]
 800b73e:	7561      	strb	r1, [r4, #21]
 800b740:	7da0      	ldrb	r0, [r4, #22]
 800b742:	f080 0001 	eor.w	r0, r0, #1
 800b746:	b002      	add	sp, #8
 800b748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74c:	466b      	mov	r3, sp
 800b74e:	cb03      	ldmia	r3!, {r0, r1}
 800b750:	68a3      	ldr	r3, [r4, #8]
 800b752:	6018      	str	r0, [r3, #0]
 800b754:	6059      	str	r1, [r3, #4]
 800b756:	e7eb      	b.n	800b730 <ucdr_serialize_uint64_t+0x10c>
 800b758:	68a2      	ldr	r2, [r4, #8]
 800b75a:	6923      	ldr	r3, [r4, #16]
 800b75c:	7da0      	ldrb	r0, [r4, #22]
 800b75e:	7567      	strb	r7, [r4, #21]
 800b760:	1b92      	subs	r2, r2, r6
 800b762:	1b9b      	subs	r3, r3, r6
 800b764:	f080 0001 	eor.w	r0, r0, #1
 800b768:	60a2      	str	r2, [r4, #8]
 800b76a:	6123      	str	r3, [r4, #16]
 800b76c:	b002      	add	sp, #8
 800b76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b772:	68a3      	ldr	r3, [r4, #8]
 800b774:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b790:	701a      	strb	r2, [r3, #0]
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	68a3      	ldr	r3, [r4, #8]
 800b79c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	f89d 2000 	ldrb.w	r2, [sp]
 800b7a8:	701a      	strb	r2, [r3, #0]
 800b7aa:	e78a      	b.n	800b6c2 <ucdr_serialize_uint64_t+0x9e>
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	466d      	mov	r5, sp
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	f00c fac9 	bl	8017d4a <memcpy>
 800b7b8:	68a0      	ldr	r0, [r4, #8]
 800b7ba:	4642      	mov	r2, r8
 800b7bc:	19a9      	adds	r1, r5, r6
 800b7be:	f00c fac4 	bl	8017d4a <memcpy>
 800b7c2:	e77e      	b.n	800b6c2 <ucdr_serialize_uint64_t+0x9e>

0800b7c4 <ucdr_serialize_int16_t>:
 800b7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	2102      	movs	r1, #2
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b7d4:	f000 fc08 	bl	800bfe8 <ucdr_buffer_alignment>
 800b7d8:	4601      	mov	r1, r0
 800b7da:	4620      	mov	r0, r4
 800b7dc:	7d67      	ldrb	r7, [r4, #21]
 800b7de:	f000 fc47 	bl	800c070 <ucdr_advance_buffer>
 800b7e2:	2102      	movs	r1, #2
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 fb9f 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b7ea:	bb78      	cbnz	r0, 800b84c <ucdr_serialize_int16_t+0x88>
 800b7ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	d926      	bls.n	800b842 <ucdr_serialize_int16_t+0x7e>
 800b7f4:	1b5e      	subs	r6, r3, r5
 800b7f6:	60a3      	str	r3, [r4, #8]
 800b7f8:	6923      	ldr	r3, [r4, #16]
 800b7fa:	f1c6 0802 	rsb	r8, r6, #2
 800b7fe:	4433      	add	r3, r6
 800b800:	6123      	str	r3, [r4, #16]
 800b802:	4641      	mov	r1, r8
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fb9b 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d03b      	beq.n	800b886 <ucdr_serialize_int16_t+0xc2>
 800b80e:	7d23      	ldrb	r3, [r4, #20]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d04a      	beq.n	800b8aa <ucdr_serialize_int16_t+0xe6>
 800b814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b818:	702b      	strb	r3, [r5, #0]
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	d040      	beq.n	800b8a0 <ucdr_serialize_int16_t+0xdc>
 800b81e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b822:	706b      	strb	r3, [r5, #1]
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	68a2      	ldr	r2, [r4, #8]
 800b828:	7da0      	ldrb	r0, [r4, #22]
 800b82a:	3302      	adds	r3, #2
 800b82c:	1b9e      	subs	r6, r3, r6
 800b82e:	4442      	add	r2, r8
 800b830:	2302      	movs	r3, #2
 800b832:	f080 0001 	eor.w	r0, r0, #1
 800b836:	60a2      	str	r2, [r4, #8]
 800b838:	6126      	str	r6, [r4, #16]
 800b83a:	7563      	strb	r3, [r4, #21]
 800b83c:	b002      	add	sp, #8
 800b83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b842:	2102      	movs	r1, #2
 800b844:	4620      	mov	r0, r4
 800b846:	f000 fb7b 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b84a:	b190      	cbz	r0, 800b872 <ucdr_serialize_int16_t+0xae>
 800b84c:	7d23      	ldrb	r3, [r4, #20]
 800b84e:	2b01      	cmp	r3, #1
 800b850:	68a3      	ldr	r3, [r4, #8]
 800b852:	d014      	beq.n	800b87e <ucdr_serialize_int16_t+0xba>
 800b854:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b858:	701a      	strb	r2, [r3, #0]
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b860:	705a      	strb	r2, [r3, #1]
 800b862:	68a2      	ldr	r2, [r4, #8]
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	3202      	adds	r2, #2
 800b868:	3302      	adds	r3, #2
 800b86a:	2102      	movs	r1, #2
 800b86c:	60a2      	str	r2, [r4, #8]
 800b86e:	6123      	str	r3, [r4, #16]
 800b870:	7561      	strb	r1, [r4, #21]
 800b872:	7da0      	ldrb	r0, [r4, #22]
 800b874:	f080 0001 	eor.w	r0, r0, #1
 800b878:	b002      	add	sp, #8
 800b87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b882:	801a      	strh	r2, [r3, #0]
 800b884:	e7ed      	b.n	800b862 <ucdr_serialize_int16_t+0x9e>
 800b886:	68a2      	ldr	r2, [r4, #8]
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	7da0      	ldrb	r0, [r4, #22]
 800b88c:	7567      	strb	r7, [r4, #21]
 800b88e:	1b92      	subs	r2, r2, r6
 800b890:	1b9b      	subs	r3, r3, r6
 800b892:	f080 0001 	eor.w	r0, r0, #1
 800b896:	60a2      	str	r2, [r4, #8]
 800b898:	6123      	str	r3, [r4, #16]
 800b89a:	b002      	add	sp, #8
 800b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a0:	68a3      	ldr	r3, [r4, #8]
 800b8a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8a6:	701a      	strb	r2, [r3, #0]
 800b8a8:	e7bc      	b.n	800b824 <ucdr_serialize_int16_t+0x60>
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	f10d 0506 	add.w	r5, sp, #6
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4632      	mov	r2, r6
 800b8b4:	f00c fa49 	bl	8017d4a <memcpy>
 800b8b8:	68a0      	ldr	r0, [r4, #8]
 800b8ba:	4642      	mov	r2, r8
 800b8bc:	19a9      	adds	r1, r5, r6
 800b8be:	f00c fa44 	bl	8017d4a <memcpy>
 800b8c2:	e7af      	b.n	800b824 <ucdr_serialize_int16_t+0x60>

0800b8c4 <ucdr_deserialize_int16_t>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	f000 fb8b 	bl	800bfe8 <ucdr_buffer_alignment>
 800b8d2:	4601      	mov	r1, r0
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b8da:	f000 fbc9 	bl	800c070 <ucdr_advance_buffer>
 800b8de:	2102      	movs	r1, #2
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 fb21 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b8e6:	bb60      	cbnz	r0, 800b942 <ucdr_deserialize_int16_t+0x7e>
 800b8e8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b8ec:	42be      	cmp	r6, r7
 800b8ee:	d923      	bls.n	800b938 <ucdr_deserialize_int16_t+0x74>
 800b8f0:	6923      	ldr	r3, [r4, #16]
 800b8f2:	60a6      	str	r6, [r4, #8]
 800b8f4:	1bf6      	subs	r6, r6, r7
 800b8f6:	4433      	add	r3, r6
 800b8f8:	f1c6 0902 	rsb	r9, r6, #2
 800b8fc:	6123      	str	r3, [r4, #16]
 800b8fe:	4649      	mov	r1, r9
 800b900:	4620      	mov	r0, r4
 800b902:	f000 fb1d 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b906:	2800      	cmp	r0, #0
 800b908:	d034      	beq.n	800b974 <ucdr_deserialize_int16_t+0xb0>
 800b90a:	7d23      	ldrb	r3, [r4, #20]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d042      	beq.n	800b996 <ucdr_deserialize_int16_t+0xd2>
 800b910:	787b      	ldrb	r3, [r7, #1]
 800b912:	702b      	strb	r3, [r5, #0]
 800b914:	2e00      	cmp	r6, #0
 800b916:	d03a      	beq.n	800b98e <ucdr_deserialize_int16_t+0xca>
 800b918:	783b      	ldrb	r3, [r7, #0]
 800b91a:	706b      	strb	r3, [r5, #1]
 800b91c:	6923      	ldr	r3, [r4, #16]
 800b91e:	68a2      	ldr	r2, [r4, #8]
 800b920:	7da0      	ldrb	r0, [r4, #22]
 800b922:	2102      	movs	r1, #2
 800b924:	3302      	adds	r3, #2
 800b926:	444a      	add	r2, r9
 800b928:	1b9b      	subs	r3, r3, r6
 800b92a:	7561      	strb	r1, [r4, #21]
 800b92c:	60a2      	str	r2, [r4, #8]
 800b92e:	6123      	str	r3, [r4, #16]
 800b930:	f080 0001 	eor.w	r0, r0, #1
 800b934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b938:	2102      	movs	r1, #2
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 fb00 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b940:	b180      	cbz	r0, 800b964 <ucdr_deserialize_int16_t+0xa0>
 800b942:	7d23      	ldrb	r3, [r4, #20]
 800b944:	2b01      	cmp	r3, #1
 800b946:	68a3      	ldr	r3, [r4, #8]
 800b948:	d011      	beq.n	800b96e <ucdr_deserialize_int16_t+0xaa>
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	702b      	strb	r3, [r5, #0]
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	706b      	strb	r3, [r5, #1]
 800b954:	68a2      	ldr	r2, [r4, #8]
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	3202      	adds	r2, #2
 800b95a:	3302      	adds	r3, #2
 800b95c:	2102      	movs	r1, #2
 800b95e:	60a2      	str	r2, [r4, #8]
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	7561      	strb	r1, [r4, #21]
 800b964:	7da0      	ldrb	r0, [r4, #22]
 800b966:	f080 0001 	eor.w	r0, r0, #1
 800b96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	802b      	strh	r3, [r5, #0]
 800b972:	e7ef      	b.n	800b954 <ucdr_deserialize_int16_t+0x90>
 800b974:	68a2      	ldr	r2, [r4, #8]
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	7da0      	ldrb	r0, [r4, #22]
 800b97a:	f884 8015 	strb.w	r8, [r4, #21]
 800b97e:	1b92      	subs	r2, r2, r6
 800b980:	1b9b      	subs	r3, r3, r6
 800b982:	60a2      	str	r2, [r4, #8]
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	f080 0001 	eor.w	r0, r0, #1
 800b98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	706b      	strb	r3, [r5, #1]
 800b994:	e7c2      	b.n	800b91c <ucdr_deserialize_int16_t+0x58>
 800b996:	4639      	mov	r1, r7
 800b998:	4632      	mov	r2, r6
 800b99a:	4628      	mov	r0, r5
 800b99c:	f00c f9d5 	bl	8017d4a <memcpy>
 800b9a0:	68a1      	ldr	r1, [r4, #8]
 800b9a2:	464a      	mov	r2, r9
 800b9a4:	19a8      	adds	r0, r5, r6
 800b9a6:	f00c f9d0 	bl	8017d4a <memcpy>
 800b9aa:	e7b7      	b.n	800b91c <ucdr_deserialize_int16_t+0x58>

0800b9ac <ucdr_serialize_int32_t>:
 800b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	9101      	str	r1, [sp, #4]
 800b9b6:	2104      	movs	r1, #4
 800b9b8:	f000 fb16 	bl	800bfe8 <ucdr_buffer_alignment>
 800b9bc:	4601      	mov	r1, r0
 800b9be:	4620      	mov	r0, r4
 800b9c0:	7d67      	ldrb	r7, [r4, #21]
 800b9c2:	f000 fb55 	bl	800c070 <ucdr_advance_buffer>
 800b9c6:	2104      	movs	r1, #4
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 faad 	bl	800bf28 <ucdr_check_buffer_available_for>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d139      	bne.n	800ba46 <ucdr_serialize_int32_t+0x9a>
 800b9d2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b9d6:	42ab      	cmp	r3, r5
 800b9d8:	d930      	bls.n	800ba3c <ucdr_serialize_int32_t+0x90>
 800b9da:	1b5e      	subs	r6, r3, r5
 800b9dc:	60a3      	str	r3, [r4, #8]
 800b9de:	6923      	ldr	r3, [r4, #16]
 800b9e0:	f1c6 0804 	rsb	r8, r6, #4
 800b9e4:	4433      	add	r3, r6
 800b9e6:	6123      	str	r3, [r4, #16]
 800b9e8:	4641      	mov	r1, r8
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 faa8 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d04c      	beq.n	800ba8e <ucdr_serialize_int32_t+0xe2>
 800b9f4:	7d23      	ldrb	r3, [r4, #20]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d063      	beq.n	800bac2 <ucdr_serialize_int32_t+0x116>
 800b9fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9fe:	702b      	strb	r3, [r5, #0]
 800ba00:	2e00      	cmp	r6, #0
 800ba02:	d051      	beq.n	800baa8 <ucdr_serialize_int32_t+0xfc>
 800ba04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba08:	706b      	strb	r3, [r5, #1]
 800ba0a:	2e01      	cmp	r6, #1
 800ba0c:	d050      	beq.n	800bab0 <ucdr_serialize_int32_t+0x104>
 800ba0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ba12:	70ab      	strb	r3, [r5, #2]
 800ba14:	2e02      	cmp	r6, #2
 800ba16:	d04f      	beq.n	800bab8 <ucdr_serialize_int32_t+0x10c>
 800ba18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ba1c:	70eb      	strb	r3, [r5, #3]
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	68a2      	ldr	r2, [r4, #8]
 800ba22:	7da0      	ldrb	r0, [r4, #22]
 800ba24:	3304      	adds	r3, #4
 800ba26:	1b9e      	subs	r6, r3, r6
 800ba28:	4442      	add	r2, r8
 800ba2a:	2304      	movs	r3, #4
 800ba2c:	f080 0001 	eor.w	r0, r0, #1
 800ba30:	60a2      	str	r2, [r4, #8]
 800ba32:	6126      	str	r6, [r4, #16]
 800ba34:	7563      	strb	r3, [r4, #21]
 800ba36:	b002      	add	sp, #8
 800ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3c:	2104      	movs	r1, #4
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 fa7e 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800ba44:	b1d0      	cbz	r0, 800ba7c <ucdr_serialize_int32_t+0xd0>
 800ba46:	7d23      	ldrb	r3, [r4, #20]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	68a3      	ldr	r3, [r4, #8]
 800ba4c:	d01c      	beq.n	800ba88 <ucdr_serialize_int32_t+0xdc>
 800ba4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba52:	701a      	strb	r2, [r3, #0]
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba5a:	705a      	strb	r2, [r3, #1]
 800ba5c:	68a3      	ldr	r3, [r4, #8]
 800ba5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba62:	709a      	strb	r2, [r3, #2]
 800ba64:	68a3      	ldr	r3, [r4, #8]
 800ba66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba6a:	70da      	strb	r2, [r3, #3]
 800ba6c:	68a2      	ldr	r2, [r4, #8]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	3204      	adds	r2, #4
 800ba72:	3304      	adds	r3, #4
 800ba74:	2104      	movs	r1, #4
 800ba76:	60a2      	str	r2, [r4, #8]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	7561      	strb	r1, [r4, #21]
 800ba7c:	7da0      	ldrb	r0, [r4, #22]
 800ba7e:	f080 0001 	eor.w	r0, r0, #1
 800ba82:	b002      	add	sp, #8
 800ba84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba88:	9a01      	ldr	r2, [sp, #4]
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	e7ee      	b.n	800ba6c <ucdr_serialize_int32_t+0xc0>
 800ba8e:	68a2      	ldr	r2, [r4, #8]
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	7da0      	ldrb	r0, [r4, #22]
 800ba94:	7567      	strb	r7, [r4, #21]
 800ba96:	1b92      	subs	r2, r2, r6
 800ba98:	1b9b      	subs	r3, r3, r6
 800ba9a:	f080 0001 	eor.w	r0, r0, #1
 800ba9e:	60a2      	str	r2, [r4, #8]
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	b002      	add	sp, #8
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	68a3      	ldr	r3, [r4, #8]
 800baaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800baae:	701a      	strb	r2, [r3, #0]
 800bab0:	68a3      	ldr	r3, [r4, #8]
 800bab2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bab6:	701a      	strb	r2, [r3, #0]
 800bab8:	68a3      	ldr	r3, [r4, #8]
 800baba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	e7ad      	b.n	800ba1e <ucdr_serialize_int32_t+0x72>
 800bac2:	4628      	mov	r0, r5
 800bac4:	ad01      	add	r5, sp, #4
 800bac6:	4629      	mov	r1, r5
 800bac8:	4632      	mov	r2, r6
 800baca:	f00c f93e 	bl	8017d4a <memcpy>
 800bace:	68a0      	ldr	r0, [r4, #8]
 800bad0:	4642      	mov	r2, r8
 800bad2:	19a9      	adds	r1, r5, r6
 800bad4:	f00c f939 	bl	8017d4a <memcpy>
 800bad8:	e7a1      	b.n	800ba1e <ucdr_serialize_int32_t+0x72>
 800bada:	bf00      	nop

0800badc <ucdr_deserialize_int32_t>:
 800badc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae0:	460d      	mov	r5, r1
 800bae2:	2104      	movs	r1, #4
 800bae4:	4604      	mov	r4, r0
 800bae6:	f000 fa7f 	bl	800bfe8 <ucdr_buffer_alignment>
 800baea:	4601      	mov	r1, r0
 800baec:	4620      	mov	r0, r4
 800baee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800baf2:	f000 fabd 	bl	800c070 <ucdr_advance_buffer>
 800baf6:	2104      	movs	r1, #4
 800baf8:	4620      	mov	r0, r4
 800bafa:	f000 fa15 	bl	800bf28 <ucdr_check_buffer_available_for>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d138      	bne.n	800bb74 <ucdr_deserialize_int32_t+0x98>
 800bb02:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bb06:	42b7      	cmp	r7, r6
 800bb08:	d92f      	bls.n	800bb6a <ucdr_deserialize_int32_t+0x8e>
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	60a7      	str	r7, [r4, #8]
 800bb0e:	1bbf      	subs	r7, r7, r6
 800bb10:	443b      	add	r3, r7
 800bb12:	f1c7 0904 	rsb	r9, r7, #4
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	4649      	mov	r1, r9
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fa10 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d046      	beq.n	800bbb2 <ucdr_deserialize_int32_t+0xd6>
 800bb24:	7d23      	ldrb	r3, [r4, #20]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d05c      	beq.n	800bbe4 <ucdr_deserialize_int32_t+0x108>
 800bb2a:	78f3      	ldrb	r3, [r6, #3]
 800bb2c:	702b      	strb	r3, [r5, #0]
 800bb2e:	2f00      	cmp	r7, #0
 800bb30:	d04c      	beq.n	800bbcc <ucdr_deserialize_int32_t+0xf0>
 800bb32:	78b3      	ldrb	r3, [r6, #2]
 800bb34:	706b      	strb	r3, [r5, #1]
 800bb36:	2f01      	cmp	r7, #1
 800bb38:	f105 0302 	add.w	r3, r5, #2
 800bb3c:	d04a      	beq.n	800bbd4 <ucdr_deserialize_int32_t+0xf8>
 800bb3e:	7873      	ldrb	r3, [r6, #1]
 800bb40:	70ab      	strb	r3, [r5, #2]
 800bb42:	2f02      	cmp	r7, #2
 800bb44:	f105 0303 	add.w	r3, r5, #3
 800bb48:	d048      	beq.n	800bbdc <ucdr_deserialize_int32_t+0x100>
 800bb4a:	7833      	ldrb	r3, [r6, #0]
 800bb4c:	70eb      	strb	r3, [r5, #3]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	68a2      	ldr	r2, [r4, #8]
 800bb52:	7da0      	ldrb	r0, [r4, #22]
 800bb54:	2104      	movs	r1, #4
 800bb56:	3304      	adds	r3, #4
 800bb58:	444a      	add	r2, r9
 800bb5a:	1bdb      	subs	r3, r3, r7
 800bb5c:	7561      	strb	r1, [r4, #21]
 800bb5e:	60a2      	str	r2, [r4, #8]
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	f080 0001 	eor.w	r0, r0, #1
 800bb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6a:	2104      	movs	r1, #4
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 f9e7 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800bb72:	b1b0      	cbz	r0, 800bba2 <ucdr_deserialize_int32_t+0xc6>
 800bb74:	7d23      	ldrb	r3, [r4, #20]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	68a3      	ldr	r3, [r4, #8]
 800bb7a:	d017      	beq.n	800bbac <ucdr_deserialize_int32_t+0xd0>
 800bb7c:	78db      	ldrb	r3, [r3, #3]
 800bb7e:	702b      	strb	r3, [r5, #0]
 800bb80:	68a3      	ldr	r3, [r4, #8]
 800bb82:	789b      	ldrb	r3, [r3, #2]
 800bb84:	706b      	strb	r3, [r5, #1]
 800bb86:	68a3      	ldr	r3, [r4, #8]
 800bb88:	785b      	ldrb	r3, [r3, #1]
 800bb8a:	70ab      	strb	r3, [r5, #2]
 800bb8c:	68a3      	ldr	r3, [r4, #8]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	70eb      	strb	r3, [r5, #3]
 800bb92:	68a2      	ldr	r2, [r4, #8]
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	3204      	adds	r2, #4
 800bb98:	3304      	adds	r3, #4
 800bb9a:	2104      	movs	r1, #4
 800bb9c:	60a2      	str	r2, [r4, #8]
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	7561      	strb	r1, [r4, #21]
 800bba2:	7da0      	ldrb	r0, [r4, #22]
 800bba4:	f080 0001 	eor.w	r0, r0, #1
 800bba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	e7ef      	b.n	800bb92 <ucdr_deserialize_int32_t+0xb6>
 800bbb2:	68a2      	ldr	r2, [r4, #8]
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	7da0      	ldrb	r0, [r4, #22]
 800bbb8:	f884 8015 	strb.w	r8, [r4, #21]
 800bbbc:	1bd2      	subs	r2, r2, r7
 800bbbe:	1bdb      	subs	r3, r3, r7
 800bbc0:	60a2      	str	r2, [r4, #8]
 800bbc2:	6123      	str	r3, [r4, #16]
 800bbc4:	f080 0001 	eor.w	r0, r0, #1
 800bbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbcc:	68a3      	ldr	r3, [r4, #8]
 800bbce:	789b      	ldrb	r3, [r3, #2]
 800bbd0:	706b      	strb	r3, [r5, #1]
 800bbd2:	1cab      	adds	r3, r5, #2
 800bbd4:	68a2      	ldr	r2, [r4, #8]
 800bbd6:	7852      	ldrb	r2, [r2, #1]
 800bbd8:	f803 2b01 	strb.w	r2, [r3], #1
 800bbdc:	68a2      	ldr	r2, [r4, #8]
 800bbde:	7812      	ldrb	r2, [r2, #0]
 800bbe0:	701a      	strb	r2, [r3, #0]
 800bbe2:	e7b4      	b.n	800bb4e <ucdr_deserialize_int32_t+0x72>
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	463a      	mov	r2, r7
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f00c f8ae 	bl	8017d4a <memcpy>
 800bbee:	68a1      	ldr	r1, [r4, #8]
 800bbf0:	464a      	mov	r2, r9
 800bbf2:	19e8      	adds	r0, r5, r7
 800bbf4:	f00c f8a9 	bl	8017d4a <memcpy>
 800bbf8:	e7a9      	b.n	800bb4e <ucdr_deserialize_int32_t+0x72>
 800bbfa:	bf00      	nop

0800bbfc <ucdr_serialize_double>:
 800bbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc00:	2108      	movs	r1, #8
 800bc02:	b082      	sub	sp, #8
 800bc04:	4604      	mov	r4, r0
 800bc06:	ed8d 0b00 	vstr	d0, [sp]
 800bc0a:	f000 f9ed 	bl	800bfe8 <ucdr_buffer_alignment>
 800bc0e:	4601      	mov	r1, r0
 800bc10:	4620      	mov	r0, r4
 800bc12:	7d67      	ldrb	r7, [r4, #21]
 800bc14:	f000 fa2c 	bl	800c070 <ucdr_advance_buffer>
 800bc18:	2108      	movs	r1, #8
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 f984 	bl	800bf28 <ucdr_check_buffer_available_for>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d14e      	bne.n	800bcc2 <ucdr_serialize_double+0xc6>
 800bc24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc28:	42ab      	cmp	r3, r5
 800bc2a:	d945      	bls.n	800bcb8 <ucdr_serialize_double+0xbc>
 800bc2c:	1b5e      	subs	r6, r3, r5
 800bc2e:	60a3      	str	r3, [r4, #8]
 800bc30:	6923      	ldr	r3, [r4, #16]
 800bc32:	f1c6 0808 	rsb	r8, r6, #8
 800bc36:	4433      	add	r3, r6
 800bc38:	6123      	str	r3, [r4, #16]
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f000 f97f 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d074      	beq.n	800bd30 <ucdr_serialize_double+0x134>
 800bc46:	7d23      	ldrb	r3, [r4, #20]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	f000 809b 	beq.w	800bd84 <ucdr_serialize_double+0x188>
 800bc4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc52:	702b      	strb	r3, [r5, #0]
 800bc54:	2e00      	cmp	r6, #0
 800bc56:	d078      	beq.n	800bd4a <ucdr_serialize_double+0x14e>
 800bc58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc5c:	706b      	strb	r3, [r5, #1]
 800bc5e:	2e01      	cmp	r6, #1
 800bc60:	d077      	beq.n	800bd52 <ucdr_serialize_double+0x156>
 800bc62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc66:	70ab      	strb	r3, [r5, #2]
 800bc68:	2e02      	cmp	r6, #2
 800bc6a:	d076      	beq.n	800bd5a <ucdr_serialize_double+0x15e>
 800bc6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc70:	70eb      	strb	r3, [r5, #3]
 800bc72:	2e03      	cmp	r6, #3
 800bc74:	d075      	beq.n	800bd62 <ucdr_serialize_double+0x166>
 800bc76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bc7a:	712b      	strb	r3, [r5, #4]
 800bc7c:	2e04      	cmp	r6, #4
 800bc7e:	d074      	beq.n	800bd6a <ucdr_serialize_double+0x16e>
 800bc80:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bc84:	716b      	strb	r3, [r5, #5]
 800bc86:	2e05      	cmp	r6, #5
 800bc88:	d073      	beq.n	800bd72 <ucdr_serialize_double+0x176>
 800bc8a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bc8e:	71ab      	strb	r3, [r5, #6]
 800bc90:	2e06      	cmp	r6, #6
 800bc92:	d072      	beq.n	800bd7a <ucdr_serialize_double+0x17e>
 800bc94:	f89d 3000 	ldrb.w	r3, [sp]
 800bc98:	71eb      	strb	r3, [r5, #7]
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	68a2      	ldr	r2, [r4, #8]
 800bc9e:	7da0      	ldrb	r0, [r4, #22]
 800bca0:	3308      	adds	r3, #8
 800bca2:	1b9e      	subs	r6, r3, r6
 800bca4:	4442      	add	r2, r8
 800bca6:	2308      	movs	r3, #8
 800bca8:	f080 0001 	eor.w	r0, r0, #1
 800bcac:	60a2      	str	r2, [r4, #8]
 800bcae:	6126      	str	r6, [r4, #16]
 800bcb0:	7563      	strb	r3, [r4, #21]
 800bcb2:	b002      	add	sp, #8
 800bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb8:	2108      	movs	r1, #8
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f000 f940 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800bcc0:	b350      	cbz	r0, 800bd18 <ucdr_serialize_double+0x11c>
 800bcc2:	7d23      	ldrb	r3, [r4, #20]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d02d      	beq.n	800bd24 <ucdr_serialize_double+0x128>
 800bcc8:	68a3      	ldr	r3, [r4, #8]
 800bcca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcd6:	705a      	strb	r2, [r3, #1]
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcde:	709a      	strb	r2, [r3, #2]
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bce6:	70da      	strb	r2, [r3, #3]
 800bce8:	68a3      	ldr	r3, [r4, #8]
 800bcea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bcee:	711a      	strb	r2, [r3, #4]
 800bcf0:	68a3      	ldr	r3, [r4, #8]
 800bcf2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bcf6:	715a      	strb	r2, [r3, #5]
 800bcf8:	68a3      	ldr	r3, [r4, #8]
 800bcfa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bcfe:	719a      	strb	r2, [r3, #6]
 800bd00:	68a3      	ldr	r3, [r4, #8]
 800bd02:	f89d 2000 	ldrb.w	r2, [sp]
 800bd06:	71da      	strb	r2, [r3, #7]
 800bd08:	68a2      	ldr	r2, [r4, #8]
 800bd0a:	6923      	ldr	r3, [r4, #16]
 800bd0c:	3208      	adds	r2, #8
 800bd0e:	3308      	adds	r3, #8
 800bd10:	2108      	movs	r1, #8
 800bd12:	60a2      	str	r2, [r4, #8]
 800bd14:	6123      	str	r3, [r4, #16]
 800bd16:	7561      	strb	r1, [r4, #21]
 800bd18:	7da0      	ldrb	r0, [r4, #22]
 800bd1a:	f080 0001 	eor.w	r0, r0, #1
 800bd1e:	b002      	add	sp, #8
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	466b      	mov	r3, sp
 800bd26:	cb03      	ldmia	r3!, {r0, r1}
 800bd28:	68a3      	ldr	r3, [r4, #8]
 800bd2a:	6018      	str	r0, [r3, #0]
 800bd2c:	6059      	str	r1, [r3, #4]
 800bd2e:	e7eb      	b.n	800bd08 <ucdr_serialize_double+0x10c>
 800bd30:	68a2      	ldr	r2, [r4, #8]
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	7da0      	ldrb	r0, [r4, #22]
 800bd36:	7567      	strb	r7, [r4, #21]
 800bd38:	1b92      	subs	r2, r2, r6
 800bd3a:	1b9b      	subs	r3, r3, r6
 800bd3c:	f080 0001 	eor.w	r0, r0, #1
 800bd40:	60a2      	str	r2, [r4, #8]
 800bd42:	6123      	str	r3, [r4, #16]
 800bd44:	b002      	add	sp, #8
 800bd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd50:	701a      	strb	r2, [r3, #0]
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd58:	701a      	strb	r2, [r3, #0]
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bd68:	701a      	strb	r2, [r3, #0]
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bd70:	701a      	strb	r2, [r3, #0]
 800bd72:	68a3      	ldr	r3, [r4, #8]
 800bd74:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bd78:	701a      	strb	r2, [r3, #0]
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	f89d 2000 	ldrb.w	r2, [sp]
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	e78a      	b.n	800bc9a <ucdr_serialize_double+0x9e>
 800bd84:	4628      	mov	r0, r5
 800bd86:	466d      	mov	r5, sp
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	f00b ffdd 	bl	8017d4a <memcpy>
 800bd90:	68a0      	ldr	r0, [r4, #8]
 800bd92:	4642      	mov	r2, r8
 800bd94:	19a9      	adds	r1, r5, r6
 800bd96:	f00b ffd8 	bl	8017d4a <memcpy>
 800bd9a:	e77e      	b.n	800bc9a <ucdr_serialize_double+0x9e>

0800bd9c <ucdr_deserialize_double>:
 800bd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda0:	460d      	mov	r5, r1
 800bda2:	2108      	movs	r1, #8
 800bda4:	4604      	mov	r4, r0
 800bda6:	f000 f91f 	bl	800bfe8 <ucdr_buffer_alignment>
 800bdaa:	4601      	mov	r1, r0
 800bdac:	4620      	mov	r0, r4
 800bdae:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bdb2:	f000 f95d 	bl	800c070 <ucdr_advance_buffer>
 800bdb6:	2108      	movs	r1, #8
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 f8b5 	bl	800bf28 <ucdr_check_buffer_available_for>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d151      	bne.n	800be66 <ucdr_deserialize_double+0xca>
 800bdc2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bdc6:	42be      	cmp	r6, r7
 800bdc8:	d948      	bls.n	800be5c <ucdr_deserialize_double+0xc0>
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	60a6      	str	r6, [r4, #8]
 800bdce:	1bf6      	subs	r6, r6, r7
 800bdd0:	4433      	add	r3, r6
 800bdd2:	f1c6 0808 	rsb	r8, r6, #8
 800bdd6:	6123      	str	r3, [r4, #16]
 800bdd8:	4641      	mov	r1, r8
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f8b0 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d06d      	beq.n	800bec0 <ucdr_deserialize_double+0x124>
 800bde4:	7d23      	ldrb	r3, [r4, #20]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	f000 8093 	beq.w	800bf12 <ucdr_deserialize_double+0x176>
 800bdec:	79fb      	ldrb	r3, [r7, #7]
 800bdee:	702b      	strb	r3, [r5, #0]
 800bdf0:	2e00      	cmp	r6, #0
 800bdf2:	d072      	beq.n	800beda <ucdr_deserialize_double+0x13e>
 800bdf4:	79bb      	ldrb	r3, [r7, #6]
 800bdf6:	706b      	strb	r3, [r5, #1]
 800bdf8:	2e01      	cmp	r6, #1
 800bdfa:	f105 0302 	add.w	r3, r5, #2
 800bdfe:	d070      	beq.n	800bee2 <ucdr_deserialize_double+0x146>
 800be00:	797b      	ldrb	r3, [r7, #5]
 800be02:	70ab      	strb	r3, [r5, #2]
 800be04:	2e02      	cmp	r6, #2
 800be06:	f105 0303 	add.w	r3, r5, #3
 800be0a:	d06e      	beq.n	800beea <ucdr_deserialize_double+0x14e>
 800be0c:	793b      	ldrb	r3, [r7, #4]
 800be0e:	70eb      	strb	r3, [r5, #3]
 800be10:	2e03      	cmp	r6, #3
 800be12:	f105 0304 	add.w	r3, r5, #4
 800be16:	d06c      	beq.n	800bef2 <ucdr_deserialize_double+0x156>
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	712b      	strb	r3, [r5, #4]
 800be1c:	2e04      	cmp	r6, #4
 800be1e:	f105 0305 	add.w	r3, r5, #5
 800be22:	d06a      	beq.n	800befa <ucdr_deserialize_double+0x15e>
 800be24:	78bb      	ldrb	r3, [r7, #2]
 800be26:	716b      	strb	r3, [r5, #5]
 800be28:	2e05      	cmp	r6, #5
 800be2a:	f105 0306 	add.w	r3, r5, #6
 800be2e:	d068      	beq.n	800bf02 <ucdr_deserialize_double+0x166>
 800be30:	787b      	ldrb	r3, [r7, #1]
 800be32:	71ab      	strb	r3, [r5, #6]
 800be34:	2e06      	cmp	r6, #6
 800be36:	f105 0307 	add.w	r3, r5, #7
 800be3a:	d066      	beq.n	800bf0a <ucdr_deserialize_double+0x16e>
 800be3c:	783b      	ldrb	r3, [r7, #0]
 800be3e:	71eb      	strb	r3, [r5, #7]
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	68a2      	ldr	r2, [r4, #8]
 800be44:	7da0      	ldrb	r0, [r4, #22]
 800be46:	3308      	adds	r3, #8
 800be48:	1b9e      	subs	r6, r3, r6
 800be4a:	2308      	movs	r3, #8
 800be4c:	4442      	add	r2, r8
 800be4e:	7563      	strb	r3, [r4, #21]
 800be50:	60a2      	str	r2, [r4, #8]
 800be52:	6126      	str	r6, [r4, #16]
 800be54:	f080 0001 	eor.w	r0, r0, #1
 800be58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be5c:	2108      	movs	r1, #8
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 f86e 	bl	800bf40 <ucdr_check_final_buffer_behavior>
 800be64:	b310      	cbz	r0, 800beac <ucdr_deserialize_double+0x110>
 800be66:	7d23      	ldrb	r3, [r4, #20]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	d023      	beq.n	800beb6 <ucdr_deserialize_double+0x11a>
 800be6e:	79db      	ldrb	r3, [r3, #7]
 800be70:	702b      	strb	r3, [r5, #0]
 800be72:	68a3      	ldr	r3, [r4, #8]
 800be74:	799b      	ldrb	r3, [r3, #6]
 800be76:	706b      	strb	r3, [r5, #1]
 800be78:	68a3      	ldr	r3, [r4, #8]
 800be7a:	795b      	ldrb	r3, [r3, #5]
 800be7c:	70ab      	strb	r3, [r5, #2]
 800be7e:	68a3      	ldr	r3, [r4, #8]
 800be80:	791b      	ldrb	r3, [r3, #4]
 800be82:	70eb      	strb	r3, [r5, #3]
 800be84:	68a3      	ldr	r3, [r4, #8]
 800be86:	78db      	ldrb	r3, [r3, #3]
 800be88:	712b      	strb	r3, [r5, #4]
 800be8a:	68a3      	ldr	r3, [r4, #8]
 800be8c:	789b      	ldrb	r3, [r3, #2]
 800be8e:	716b      	strb	r3, [r5, #5]
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	785b      	ldrb	r3, [r3, #1]
 800be94:	71ab      	strb	r3, [r5, #6]
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	71eb      	strb	r3, [r5, #7]
 800be9c:	68a2      	ldr	r2, [r4, #8]
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	3208      	adds	r2, #8
 800bea2:	3308      	adds	r3, #8
 800bea4:	2108      	movs	r1, #8
 800bea6:	60a2      	str	r2, [r4, #8]
 800bea8:	6123      	str	r3, [r4, #16]
 800beaa:	7561      	strb	r1, [r4, #21]
 800beac:	7da0      	ldrb	r0, [r4, #22]
 800beae:	f080 0001 	eor.w	r0, r0, #1
 800beb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	606b      	str	r3, [r5, #4]
 800bebc:	602a      	str	r2, [r5, #0]
 800bebe:	e7ed      	b.n	800be9c <ucdr_deserialize_double+0x100>
 800bec0:	68a2      	ldr	r2, [r4, #8]
 800bec2:	6923      	ldr	r3, [r4, #16]
 800bec4:	7da0      	ldrb	r0, [r4, #22]
 800bec6:	f884 9015 	strb.w	r9, [r4, #21]
 800beca:	1b92      	subs	r2, r2, r6
 800becc:	1b9b      	subs	r3, r3, r6
 800bece:	60a2      	str	r2, [r4, #8]
 800bed0:	6123      	str	r3, [r4, #16]
 800bed2:	f080 0001 	eor.w	r0, r0, #1
 800bed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beda:	68a3      	ldr	r3, [r4, #8]
 800bedc:	799b      	ldrb	r3, [r3, #6]
 800bede:	706b      	strb	r3, [r5, #1]
 800bee0:	1cab      	adds	r3, r5, #2
 800bee2:	68a2      	ldr	r2, [r4, #8]
 800bee4:	7952      	ldrb	r2, [r2, #5]
 800bee6:	f803 2b01 	strb.w	r2, [r3], #1
 800beea:	68a2      	ldr	r2, [r4, #8]
 800beec:	7912      	ldrb	r2, [r2, #4]
 800beee:	f803 2b01 	strb.w	r2, [r3], #1
 800bef2:	68a2      	ldr	r2, [r4, #8]
 800bef4:	78d2      	ldrb	r2, [r2, #3]
 800bef6:	f803 2b01 	strb.w	r2, [r3], #1
 800befa:	68a2      	ldr	r2, [r4, #8]
 800befc:	7892      	ldrb	r2, [r2, #2]
 800befe:	f803 2b01 	strb.w	r2, [r3], #1
 800bf02:	68a2      	ldr	r2, [r4, #8]
 800bf04:	7852      	ldrb	r2, [r2, #1]
 800bf06:	f803 2b01 	strb.w	r2, [r3], #1
 800bf0a:	68a2      	ldr	r2, [r4, #8]
 800bf0c:	7812      	ldrb	r2, [r2, #0]
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	e796      	b.n	800be40 <ucdr_deserialize_double+0xa4>
 800bf12:	4639      	mov	r1, r7
 800bf14:	4632      	mov	r2, r6
 800bf16:	4628      	mov	r0, r5
 800bf18:	f00b ff17 	bl	8017d4a <memcpy>
 800bf1c:	68a1      	ldr	r1, [r4, #8]
 800bf1e:	4642      	mov	r2, r8
 800bf20:	19a8      	adds	r0, r5, r6
 800bf22:	f00b ff12 	bl	8017d4a <memcpy>
 800bf26:	e78b      	b.n	800be40 <ucdr_deserialize_double+0xa4>

0800bf28 <ucdr_check_buffer_available_for>:
 800bf28:	7d83      	ldrb	r3, [r0, #22]
 800bf2a:	b93b      	cbnz	r3, 800bf3c <ucdr_check_buffer_available_for+0x14>
 800bf2c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800bf30:	4419      	add	r1, r3
 800bf32:	4288      	cmp	r0, r1
 800bf34:	bf34      	ite	cc
 800bf36:	2000      	movcc	r0, #0
 800bf38:	2001      	movcs	r0, #1
 800bf3a:	4770      	bx	lr
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	4770      	bx	lr

0800bf40 <ucdr_check_final_buffer_behavior>:
 800bf40:	7d83      	ldrb	r3, [r0, #22]
 800bf42:	b943      	cbnz	r3, 800bf56 <ucdr_check_final_buffer_behavior+0x16>
 800bf44:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bf48:	4291      	cmp	r1, r2
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	d205      	bcs.n	800bf5c <ucdr_check_final_buffer_behavior+0x1c>
 800bf50:	2301      	movs	r3, #1
 800bf52:	4618      	mov	r0, r3
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	2300      	movs	r3, #0
 800bf58:	4618      	mov	r0, r3
 800bf5a:	4770      	bx	lr
 800bf5c:	6982      	ldr	r2, [r0, #24]
 800bf5e:	b13a      	cbz	r2, 800bf70 <ucdr_check_final_buffer_behavior+0x30>
 800bf60:	69c1      	ldr	r1, [r0, #28]
 800bf62:	4790      	blx	r2
 800bf64:	f080 0301 	eor.w	r3, r0, #1
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	75a0      	strb	r0, [r4, #22]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	bd10      	pop	{r4, pc}
 800bf70:	2001      	movs	r0, #1
 800bf72:	75a0      	strb	r0, [r4, #22]
 800bf74:	e7fa      	b.n	800bf6c <ucdr_check_final_buffer_behavior+0x2c>
 800bf76:	bf00      	nop

0800bf78 <ucdr_set_on_full_buffer_callback>:
 800bf78:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop

0800bf80 <ucdr_init_buffer_origin_offset_endian>:
 800bf80:	b410      	push	{r4}
 800bf82:	9c01      	ldr	r4, [sp, #4]
 800bf84:	6001      	str	r1, [r0, #0]
 800bf86:	440a      	add	r2, r1
 800bf88:	6042      	str	r2, [r0, #4]
 800bf8a:	190a      	adds	r2, r1, r4
 800bf8c:	441c      	add	r4, r3
 800bf8e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bf92:	6082      	str	r2, [r0, #8]
 800bf94:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bf98:	7503      	strb	r3, [r0, #20]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bfa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfa4:	7542      	strb	r2, [r0, #21]
 800bfa6:	7582      	strb	r2, [r0, #22]
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop

0800bfac <ucdr_init_buffer_origin_offset>:
 800bfac:	b510      	push	{r4, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	9c04      	ldr	r4, [sp, #16]
 800bfb2:	9400      	str	r4, [sp, #0]
 800bfb4:	2401      	movs	r4, #1
 800bfb6:	9401      	str	r4, [sp, #4]
 800bfb8:	f7ff ffe2 	bl	800bf80 <ucdr_init_buffer_origin_offset_endian>
 800bfbc:	b002      	add	sp, #8
 800bfbe:	bd10      	pop	{r4, pc}

0800bfc0 <ucdr_init_buffer_origin>:
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	2400      	movs	r4, #0
 800bfc6:	9400      	str	r4, [sp, #0]
 800bfc8:	f7ff fff0 	bl	800bfac <ucdr_init_buffer_origin_offset>
 800bfcc:	b002      	add	sp, #8
 800bfce:	bd10      	pop	{r4, pc}

0800bfd0 <ucdr_init_buffer>:
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f7ff bff5 	b.w	800bfc0 <ucdr_init_buffer_origin>
 800bfd6:	bf00      	nop

0800bfd8 <ucdr_alignment>:
 800bfd8:	fbb0 f3f1 	udiv	r3, r0, r1
 800bfdc:	fb03 0011 	mls	r0, r3, r1, r0
 800bfe0:	1a08      	subs	r0, r1, r0
 800bfe2:	3901      	subs	r1, #1
 800bfe4:	4008      	ands	r0, r1
 800bfe6:	4770      	bx	lr

0800bfe8 <ucdr_buffer_alignment>:
 800bfe8:	7d43      	ldrb	r3, [r0, #21]
 800bfea:	428b      	cmp	r3, r1
 800bfec:	d208      	bcs.n	800c000 <ucdr_buffer_alignment+0x18>
 800bfee:	6900      	ldr	r0, [r0, #16]
 800bff0:	fbb0 f3f1 	udiv	r3, r0, r1
 800bff4:	fb01 0013 	mls	r0, r1, r3, r0
 800bff8:	1a08      	subs	r0, r1, r0
 800bffa:	3901      	subs	r1, #1
 800bffc:	4008      	ands	r0, r1
 800bffe:	4770      	bx	lr
 800c000:	2000      	movs	r0, #0
 800c002:	4770      	bx	lr

0800c004 <ucdr_align_to>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4604      	mov	r4, r0
 800c008:	460d      	mov	r5, r1
 800c00a:	f7ff ffed 	bl	800bfe8 <ucdr_buffer_alignment>
 800c00e:	68a3      	ldr	r3, [r4, #8]
 800c010:	6921      	ldr	r1, [r4, #16]
 800c012:	7565      	strb	r5, [r4, #21]
 800c014:	181a      	adds	r2, r3, r0
 800c016:	6863      	ldr	r3, [r4, #4]
 800c018:	4293      	cmp	r3, r2
 800c01a:	4408      	add	r0, r1
 800c01c:	bf28      	it	cs
 800c01e:	4613      	movcs	r3, r2
 800c020:	6120      	str	r0, [r4, #16]
 800c022:	60a3      	str	r3, [r4, #8]
 800c024:	bd38      	pop	{r3, r4, r5, pc}
 800c026:	bf00      	nop

0800c028 <ucdr_buffer_length>:
 800c028:	6882      	ldr	r2, [r0, #8]
 800c02a:	6800      	ldr	r0, [r0, #0]
 800c02c:	1a10      	subs	r0, r2, r0
 800c02e:	4770      	bx	lr

0800c030 <ucdr_buffer_remaining>:
 800c030:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c034:	1a10      	subs	r0, r2, r0
 800c036:	4770      	bx	lr

0800c038 <ucdr_check_final_buffer_behavior_array>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	7d83      	ldrb	r3, [r0, #22]
 800c03c:	b963      	cbnz	r3, 800c058 <ucdr_check_final_buffer_behavior_array+0x20>
 800c03e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c042:	429a      	cmp	r2, r3
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	d308      	bcc.n	800c05c <ucdr_check_final_buffer_behavior_array+0x24>
 800c04a:	b139      	cbz	r1, 800c05c <ucdr_check_final_buffer_behavior_array+0x24>
 800c04c:	6983      	ldr	r3, [r0, #24]
 800c04e:	b163      	cbz	r3, 800c06a <ucdr_check_final_buffer_behavior_array+0x32>
 800c050:	69c1      	ldr	r1, [r0, #28]
 800c052:	4798      	blx	r3
 800c054:	75a0      	strb	r0, [r4, #22]
 800c056:	b108      	cbz	r0, 800c05c <ucdr_check_final_buffer_behavior_array+0x24>
 800c058:	2000      	movs	r0, #0
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	4620      	mov	r0, r4
 800c05e:	f7ff ffe7 	bl	800c030 <ucdr_buffer_remaining>
 800c062:	42a8      	cmp	r0, r5
 800c064:	bf28      	it	cs
 800c066:	4628      	movcs	r0, r5
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	2301      	movs	r3, #1
 800c06c:	7583      	strb	r3, [r0, #22]
 800c06e:	e7f3      	b.n	800c058 <ucdr_check_final_buffer_behavior_array+0x20>

0800c070 <ucdr_advance_buffer>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	f7ff ff57 	bl	800bf28 <ucdr_check_buffer_available_for>
 800c07a:	b178      	cbz	r0, 800c09c <ucdr_advance_buffer+0x2c>
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	68a2      	ldr	r2, [r4, #8]
 800c080:	442b      	add	r3, r5
 800c082:	6123      	str	r3, [r4, #16]
 800c084:	2301      	movs	r3, #1
 800c086:	442a      	add	r2, r5
 800c088:	7563      	strb	r3, [r4, #21]
 800c08a:	60a2      	str	r2, [r4, #8]
 800c08c:	bd38      	pop	{r3, r4, r5, pc}
 800c08e:	68a2      	ldr	r2, [r4, #8]
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	4402      	add	r2, r0
 800c094:	4403      	add	r3, r0
 800c096:	1a2d      	subs	r5, r5, r0
 800c098:	60a2      	str	r2, [r4, #8]
 800c09a:	6123      	str	r3, [r4, #16]
 800c09c:	4629      	mov	r1, r5
 800c09e:	2201      	movs	r2, #1
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f7ff ffc9 	bl	800c038 <ucdr_check_final_buffer_behavior_array>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d1f1      	bne.n	800c08e <ucdr_advance_buffer+0x1e>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	7563      	strb	r3, [r4, #21]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}

0800c0b0 <rcl_get_zero_initialized_init_options>:
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	4770      	bx	lr

0800c0b4 <rcl_init_options_init>:
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0b8:	b097      	sub	sp, #92	@ 0x5c
 800c0ba:	ae1d      	add	r6, sp, #116	@ 0x74
 800c0bc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d058      	beq.n	800c176 <rcl_init_options_init+0xc2>
 800c0c4:	6803      	ldr	r3, [r0, #0]
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	b133      	cbz	r3, 800c0d8 <rcl_init_options_init+0x24>
 800c0ca:	2464      	movs	r4, #100	@ 0x64
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	b017      	add	sp, #92	@ 0x5c
 800c0d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c0d4:	b004      	add	sp, #16
 800c0d6:	4770      	bx	lr
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f001 f92f 	bl	800d33c <rcutils_allocator_is_valid>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d049      	beq.n	800c176 <rcl_init_options_init+0xc2>
 800c0e2:	46b4      	mov	ip, r6
 800c0e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0e8:	ac11      	add	r4, sp, #68	@ 0x44
 800c0ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0ec:	f8dc 3000 	ldr.w	r3, [ip]
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c0f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c0f6:	2050      	movs	r0, #80	@ 0x50
 800c0f8:	4798      	blx	r3
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	6028      	str	r0, [r5, #0]
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d03b      	beq.n	800c17a <rcl_init_options_init+0xc6>
 800c102:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c106:	4686      	mov	lr, r0
 800c108:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c10c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c110:	f8dc 3000 	ldr.w	r3, [ip]
 800c114:	f8ce 3000 	str.w	r3, [lr]
 800c118:	a802      	add	r0, sp, #8
 800c11a:	f001 f9a1 	bl	800d460 <rmw_get_zero_initialized_init_options>
 800c11e:	f10d 0e08 	add.w	lr, sp, #8
 800c122:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c126:	f104 0c18 	add.w	ip, r4, #24
 800c12a:	682f      	ldr	r7, [r5, #0]
 800c12c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c130:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c138:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c13c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c140:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c144:	ac20      	add	r4, sp, #128	@ 0x80
 800c146:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c14a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c14e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c152:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c156:	f107 0018 	add.w	r0, r7, #24
 800c15a:	f001 f9af 	bl	800d4bc <rmw_init_options_init>
 800c15e:	4604      	mov	r4, r0
 800c160:	2800      	cmp	r0, #0
 800c162:	d0b3      	beq.n	800c0cc <rcl_init_options_init+0x18>
 800c164:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c166:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c168:	6828      	ldr	r0, [r5, #0]
 800c16a:	4798      	blx	r3
 800c16c:	4620      	mov	r0, r4
 800c16e:	f005 ff19 	bl	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c172:	4604      	mov	r4, r0
 800c174:	e7aa      	b.n	800c0cc <rcl_init_options_init+0x18>
 800c176:	240b      	movs	r4, #11
 800c178:	e7a8      	b.n	800c0cc <rcl_init_options_init+0x18>
 800c17a:	240a      	movs	r4, #10
 800c17c:	e7a6      	b.n	800c0cc <rcl_init_options_init+0x18>
 800c17e:	bf00      	nop

0800c180 <rcl_init_options_fini>:
 800c180:	b530      	push	{r4, r5, lr}
 800c182:	b087      	sub	sp, #28
 800c184:	b1f0      	cbz	r0, 800c1c4 <rcl_init_options_fini+0x44>
 800c186:	6803      	ldr	r3, [r0, #0]
 800c188:	4604      	mov	r4, r0
 800c18a:	b1db      	cbz	r3, 800c1c4 <rcl_init_options_fini+0x44>
 800c18c:	469c      	mov	ip, r3
 800c18e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c192:	f10d 0e04 	add.w	lr, sp, #4
 800c196:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c19a:	f8dc 3000 	ldr.w	r3, [ip]
 800c19e:	f8ce 3000 	str.w	r3, [lr]
 800c1a2:	a801      	add	r0, sp, #4
 800c1a4:	f001 f8ca 	bl	800d33c <rcutils_allocator_is_valid>
 800c1a8:	b160      	cbz	r0, 800c1c4 <rcl_init_options_fini+0x44>
 800c1aa:	6820      	ldr	r0, [r4, #0]
 800c1ac:	3018      	adds	r0, #24
 800c1ae:	f001 fa35 	bl	800d61c <rmw_init_options_fini>
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	b950      	cbnz	r0, 800c1cc <rcl_init_options_fini+0x4c>
 800c1b6:	6820      	ldr	r0, [r4, #0]
 800c1b8:	9b02      	ldr	r3, [sp, #8]
 800c1ba:	9905      	ldr	r1, [sp, #20]
 800c1bc:	4798      	blx	r3
 800c1be:	4628      	mov	r0, r5
 800c1c0:	b007      	add	sp, #28
 800c1c2:	bd30      	pop	{r4, r5, pc}
 800c1c4:	250b      	movs	r5, #11
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	b007      	add	sp, #28
 800c1ca:	bd30      	pop	{r4, r5, pc}
 800c1cc:	f005 feea 	bl	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	e7f8      	b.n	800c1c6 <rcl_init_options_fini+0x46>

0800c1d4 <rcl_init_options_copy>:
 800c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	b094      	sub	sp, #80	@ 0x50
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d058      	beq.n	800c290 <rcl_init_options_copy+0xbc>
 800c1de:	4604      	mov	r4, r0
 800c1e0:	6800      	ldr	r0, [r0, #0]
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d054      	beq.n	800c290 <rcl_init_options_copy+0xbc>
 800c1e6:	460e      	mov	r6, r1
 800c1e8:	f001 f8a8 	bl	800d33c <rcutils_allocator_is_valid>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d04f      	beq.n	800c290 <rcl_init_options_copy+0xbc>
 800c1f0:	2e00      	cmp	r6, #0
 800c1f2:	d04d      	beq.n	800c290 <rcl_init_options_copy+0xbc>
 800c1f4:	6833      	ldr	r3, [r6, #0]
 800c1f6:	b123      	cbz	r3, 800c202 <rcl_init_options_copy+0x2e>
 800c1f8:	2464      	movs	r4, #100	@ 0x64
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	b014      	add	sp, #80	@ 0x50
 800c1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c202:	6827      	ldr	r7, [r4, #0]
 800c204:	46bc      	mov	ip, r7
 800c206:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c20a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c20c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c20e:	f8dc 3000 	ldr.w	r3, [ip]
 800c212:	f8d7 8000 	ldr.w	r8, [r7]
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	4619      	mov	r1, r3
 800c21a:	2050      	movs	r0, #80	@ 0x50
 800c21c:	47c0      	blx	r8
 800c21e:	4605      	mov	r5, r0
 800c220:	6030      	str	r0, [r6, #0]
 800c222:	b3d0      	cbz	r0, 800c29a <rcl_init_options_copy+0xc6>
 800c224:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c228:	4686      	mov	lr, r0
 800c22a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c22e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c232:	f8dc 3000 	ldr.w	r3, [ip]
 800c236:	f8ce 3000 	str.w	r3, [lr]
 800c23a:	4668      	mov	r0, sp
 800c23c:	f001 f910 	bl	800d460 <rmw_get_zero_initialized_init_options>
 800c240:	46ee      	mov	lr, sp
 800c242:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c246:	f105 0c18 	add.w	ip, r5, #24
 800c24a:	6824      	ldr	r4, [r4, #0]
 800c24c:	6835      	ldr	r5, [r6, #0]
 800c24e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c252:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c25a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c25e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c262:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c266:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c26a:	f104 0018 	add.w	r0, r4, #24
 800c26e:	f105 0118 	add.w	r1, r5, #24
 800c272:	f001 f98b 	bl	800d58c <rmw_init_options_copy>
 800c276:	4604      	mov	r4, r0
 800c278:	2800      	cmp	r0, #0
 800c27a:	d0be      	beq.n	800c1fa <rcl_init_options_copy+0x26>
 800c27c:	f001 f86c 	bl	800d358 <rcutils_get_error_string>
 800c280:	f001 f882 	bl	800d388 <rcutils_reset_error>
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff ff7b 	bl	800c180 <rcl_init_options_fini>
 800c28a:	b140      	cbz	r0, 800c29e <rcl_init_options_copy+0xca>
 800c28c:	4604      	mov	r4, r0
 800c28e:	e7b4      	b.n	800c1fa <rcl_init_options_copy+0x26>
 800c290:	240b      	movs	r4, #11
 800c292:	4620      	mov	r0, r4
 800c294:	b014      	add	sp, #80	@ 0x50
 800c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29a:	240a      	movs	r4, #10
 800c29c:	e7ad      	b.n	800c1fa <rcl_init_options_copy+0x26>
 800c29e:	4620      	mov	r0, r4
 800c2a0:	b014      	add	sp, #80	@ 0x50
 800c2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a6:	f005 be7d 	b.w	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c2aa:	bf00      	nop

0800c2ac <rcl_init_options_set_domain_id>:
 800c2ac:	b120      	cbz	r0, 800c2b8 <rcl_init_options_set_domain_id+0xc>
 800c2ae:	6803      	ldr	r3, [r0, #0]
 800c2b0:	b113      	cbz	r3, 800c2b8 <rcl_init_options_set_domain_id+0xc>
 800c2b2:	6259      	str	r1, [r3, #36]	@ 0x24
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	4770      	bx	lr
 800c2b8:	200b      	movs	r0, #11
 800c2ba:	4770      	bx	lr

0800c2bc <rcl_get_zero_initialized_publisher>:
 800c2bc:	4b01      	ldr	r3, [pc, #4]	@ (800c2c4 <rcl_get_zero_initialized_publisher+0x8>)
 800c2be:	6818      	ldr	r0, [r3, #0]
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	08018dbc 	.word	0x08018dbc

0800c2c8 <rcl_publisher_init>:
 800c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2cc:	b088      	sub	sp, #32
 800c2ce:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c2d0:	2d00      	cmp	r5, #0
 800c2d2:	d069      	beq.n	800c3a8 <rcl_publisher_init+0xe0>
 800c2d4:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c2d8:	4604      	mov	r4, r0
 800c2da:	4648      	mov	r0, r9
 800c2dc:	460e      	mov	r6, r1
 800c2de:	4690      	mov	r8, r2
 800c2e0:	461f      	mov	r7, r3
 800c2e2:	f001 f82b 	bl	800d33c <rcutils_allocator_is_valid>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d05e      	beq.n	800c3a8 <rcl_publisher_init+0xe0>
 800c2ea:	2c00      	cmp	r4, #0
 800c2ec:	d05c      	beq.n	800c3a8 <rcl_publisher_init+0xe0>
 800c2ee:	f8d4 a000 	ldr.w	sl, [r4]
 800c2f2:	f1ba 0f00 	cmp.w	sl, #0
 800c2f6:	d004      	beq.n	800c302 <rcl_publisher_init+0x3a>
 800c2f8:	2764      	movs	r7, #100	@ 0x64
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	b008      	add	sp, #32
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	4630      	mov	r0, r6
 800c304:	f006 f948 	bl	8012598 <rcl_node_is_valid>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d052      	beq.n	800c3b2 <rcl_publisher_init+0xea>
 800c30c:	f1b8 0f00 	cmp.w	r8, #0
 800c310:	d04a      	beq.n	800c3a8 <rcl_publisher_init+0xe0>
 800c312:	2f00      	cmp	r7, #0
 800c314:	d048      	beq.n	800c3a8 <rcl_publisher_init+0xe0>
 800c316:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c31a:	aa07      	add	r2, sp, #28
 800c31c:	9205      	str	r2, [sp, #20]
 800c31e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c322:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c326:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c32a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c32e:	4639      	mov	r1, r7
 800c330:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c334:	4630      	mov	r0, r6
 800c336:	f006 f983 	bl	8012640 <rcl_node_resolve_name>
 800c33a:	4607      	mov	r7, r0
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d14f      	bne.n	800c3e0 <rcl_publisher_init+0x118>
 800c340:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c342:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c344:	20c8      	movs	r0, #200	@ 0xc8
 800c346:	4798      	blx	r3
 800c348:	6020      	str	r0, [r4, #0]
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d04e      	beq.n	800c3ec <rcl_publisher_init+0x124>
 800c34e:	4630      	mov	r0, r6
 800c350:	f006 f944 	bl	80125dc <rcl_node_get_rmw_handle>
 800c354:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	9a07      	ldr	r2, [sp, #28]
 800c35c:	6827      	ldr	r7, [r4, #0]
 800c35e:	462b      	mov	r3, r5
 800c360:	4641      	mov	r1, r8
 800c362:	f001 fc83 	bl	800dc6c <rmw_create_publisher>
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c36c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c370:	b370      	cbz	r0, 800c3d0 <rcl_publisher_init+0x108>
 800c372:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c376:	f001 fd57 	bl	800de28 <rmw_publisher_get_actual_qos>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	4607      	mov	r7, r0
 800c37e:	b9d0      	cbnz	r0, 800c3b6 <rcl_publisher_init+0xee>
 800c380:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c384:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c388:	4629      	mov	r1, r5
 800c38a:	2270      	movs	r2, #112	@ 0x70
 800c38c:	4618      	mov	r0, r3
 800c38e:	f00b fcdc 	bl	8017d4a <memcpy>
 800c392:	6832      	ldr	r2, [r6, #0]
 800c394:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c398:	9807      	ldr	r0, [sp, #28]
 800c39a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c39c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c39e:	4798      	blx	r3
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	b008      	add	sp, #32
 800c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a8:	270b      	movs	r7, #11
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	b008      	add	sp, #32
 800c3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b2:	27c8      	movs	r7, #200	@ 0xc8
 800c3b4:	e7a1      	b.n	800c2fa <rcl_publisher_init+0x32>
 800c3b6:	b18b      	cbz	r3, 800c3dc <rcl_publisher_init+0x114>
 800c3b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c3bc:	b142      	cbz	r2, 800c3d0 <rcl_publisher_init+0x108>
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f006 f90c 	bl	80125dc <rcl_node_get_rmw_handle>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c3ca:	f001 fd3d 	bl	800de48 <rmw_destroy_publisher>
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c3d2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	4790      	blx	r2
 800c3d8:	2300      	movs	r3, #0
 800c3da:	6023      	str	r3, [r4, #0]
 800c3dc:	2701      	movs	r7, #1
 800c3de:	e7db      	b.n	800c398 <rcl_publisher_init+0xd0>
 800c3e0:	2867      	cmp	r0, #103	@ 0x67
 800c3e2:	d0d9      	beq.n	800c398 <rcl_publisher_init+0xd0>
 800c3e4:	2869      	cmp	r0, #105	@ 0x69
 800c3e6:	d003      	beq.n	800c3f0 <rcl_publisher_init+0x128>
 800c3e8:	280a      	cmp	r0, #10
 800c3ea:	d1f7      	bne.n	800c3dc <rcl_publisher_init+0x114>
 800c3ec:	270a      	movs	r7, #10
 800c3ee:	e7d3      	b.n	800c398 <rcl_publisher_init+0xd0>
 800c3f0:	2767      	movs	r7, #103	@ 0x67
 800c3f2:	e7d1      	b.n	800c398 <rcl_publisher_init+0xd0>

0800c3f4 <rcl_publisher_get_default_options>:
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	4d14      	ldr	r5, [pc, #80]	@ (800c448 <rcl_publisher_get_default_options+0x54>)
 800c3f8:	4914      	ldr	r1, [pc, #80]	@ (800c44c <rcl_publisher_get_default_options+0x58>)
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	2250      	movs	r2, #80	@ 0x50
 800c400:	4628      	mov	r0, r5
 800c402:	f00b fca2 	bl	8017d4a <memcpy>
 800c406:	a802      	add	r0, sp, #8
 800c408:	f000 ff8a 	bl	800d320 <rcutils_get_default_allocator>
 800c40c:	f10d 0c08 	add.w	ip, sp, #8
 800c410:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c414:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c418:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c41c:	466e      	mov	r6, sp
 800c41e:	f8dc 3000 	ldr.w	r3, [ip]
 800c422:	f8ce 3000 	str.w	r3, [lr]
 800c426:	4630      	mov	r0, r6
 800c428:	f001 f82a 	bl	800d480 <rmw_get_default_publisher_options>
 800c42c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c430:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c434:	e883 0003 	stmia.w	r3, {r0, r1}
 800c438:	2270      	movs	r2, #112	@ 0x70
 800c43a:	4629      	mov	r1, r5
 800c43c:	4620      	mov	r0, r4
 800c43e:	f00b fc84 	bl	8017d4a <memcpy>
 800c442:	4620      	mov	r0, r4
 800c444:	b008      	add	sp, #32
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	20006438 	.word	0x20006438
 800c44c:	08018dc0 	.word	0x08018dc0

0800c450 <rcl_publish>:
 800c450:	b1f8      	cbz	r0, 800c492 <rcl_publish+0x42>
 800c452:	6803      	ldr	r3, [r0, #0]
 800c454:	b570      	push	{r4, r5, r6, lr}
 800c456:	4604      	mov	r4, r0
 800c458:	b1b3      	cbz	r3, 800c488 <rcl_publish+0x38>
 800c45a:	4616      	mov	r6, r2
 800c45c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c460:	b192      	cbz	r2, 800c488 <rcl_publish+0x38>
 800c462:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c466:	460d      	mov	r5, r1
 800c468:	f005 fdba 	bl	8011fe0 <rcl_context_is_valid>
 800c46c:	b160      	cbz	r0, 800c488 <rcl_publish+0x38>
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c474:	b140      	cbz	r0, 800c488 <rcl_publish+0x38>
 800c476:	b155      	cbz	r5, 800c48e <rcl_publish+0x3e>
 800c478:	4632      	mov	r2, r6
 800c47a:	4629      	mov	r1, r5
 800c47c:	f001 fb96 	bl	800dbac <rmw_publish>
 800c480:	3800      	subs	r0, #0
 800c482:	bf18      	it	ne
 800c484:	2001      	movne	r0, #1
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c48c:	bd70      	pop	{r4, r5, r6, pc}
 800c48e:	200b      	movs	r0, #11
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c496:	4770      	bx	lr

0800c498 <rcl_publisher_is_valid>:
 800c498:	b1a0      	cbz	r0, 800c4c4 <rcl_publisher_is_valid+0x2c>
 800c49a:	6803      	ldr	r3, [r0, #0]
 800c49c:	b510      	push	{r4, lr}
 800c49e:	4604      	mov	r4, r0
 800c4a0:	b173      	cbz	r3, 800c4c0 <rcl_publisher_is_valid+0x28>
 800c4a2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c4a6:	b15a      	cbz	r2, 800c4c0 <rcl_publisher_is_valid+0x28>
 800c4a8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c4ac:	f005 fd98 	bl	8011fe0 <rcl_context_is_valid>
 800c4b0:	b130      	cbz	r0, 800c4c0 <rcl_publisher_is_valid+0x28>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c4b8:	3800      	subs	r0, #0
 800c4ba:	bf18      	it	ne
 800c4bc:	2001      	movne	r0, #1
 800c4be:	bd10      	pop	{r4, pc}
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	bd10      	pop	{r4, pc}
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	4770      	bx	lr

0800c4c8 <rcl_publisher_is_valid_except_context>:
 800c4c8:	b130      	cbz	r0, 800c4d8 <rcl_publisher_is_valid_except_context+0x10>
 800c4ca:	6800      	ldr	r0, [r0, #0]
 800c4cc:	b120      	cbz	r0, 800c4d8 <rcl_publisher_is_valid_except_context+0x10>
 800c4ce:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c4d2:	3800      	subs	r0, #0
 800c4d4:	bf18      	it	ne
 800c4d6:	2001      	movne	r0, #1
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop

0800c4dc <_rclc_check_for_new_data>:
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d046      	beq.n	800c56e <_rclc_check_for_new_data+0x92>
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	7802      	ldrb	r2, [r0, #0]
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2a0a      	cmp	r2, #10
 800c4ea:	d842      	bhi.n	800c572 <_rclc_check_for_new_data+0x96>
 800c4ec:	e8df f002 	tbb	[pc, r2]
 800c4f0:	14181212 	.word	0x14181212
 800c4f4:	06060614 	.word	0x06060614
 800c4f8:	2e1a      	.short	0x2e1a
 800c4fa:	16          	.byte	0x16
 800c4fb:	00          	.byte	0x00
 800c4fc:	6a0a      	ldr	r2, [r1, #32]
 800c4fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c500:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c504:	2000      	movs	r0, #0
 800c506:	1a12      	subs	r2, r2, r0
 800c508:	bf18      	it	ne
 800c50a:	2201      	movne	r2, #1
 800c50c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c510:	b004      	add	sp, #16
 800c512:	bd10      	pop	{r4, pc}
 800c514:	680a      	ldr	r2, [r1, #0]
 800c516:	e7f2      	b.n	800c4fe <_rclc_check_for_new_data+0x22>
 800c518:	698a      	ldr	r2, [r1, #24]
 800c51a:	e7f0      	b.n	800c4fe <_rclc_check_for_new_data+0x22>
 800c51c:	688a      	ldr	r2, [r1, #8]
 800c51e:	e7ee      	b.n	800c4fe <_rclc_check_for_new_data+0x22>
 800c520:	690a      	ldr	r2, [r1, #16]
 800c522:	e7ec      	b.n	800c4fe <_rclc_check_for_new_data+0x22>
 800c524:	685c      	ldr	r4, [r3, #4]
 800c526:	4608      	mov	r0, r1
 800c528:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c52c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c530:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c534:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c53e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c542:	f104 0110 	add.w	r1, r4, #16
 800c546:	f007 fe77 	bl	8014238 <rcl_action_client_wait_set_get_entities_ready>
 800c54a:	e7e1      	b.n	800c510 <_rclc_check_for_new_data+0x34>
 800c54c:	685c      	ldr	r4, [r3, #4]
 800c54e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c552:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c556:	e9cd 3200 	strd	r3, r2, [sp]
 800c55a:	4608      	mov	r0, r1
 800c55c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c560:	f104 0220 	add.w	r2, r4, #32
 800c564:	f104 0110 	add.w	r1, r4, #16
 800c568:	f008 f87e 	bl	8014668 <rcl_action_server_wait_set_get_entities_ready>
 800c56c:	e7d0      	b.n	800c510 <_rclc_check_for_new_data+0x34>
 800c56e:	200b      	movs	r0, #11
 800c570:	4770      	bx	lr
 800c572:	2001      	movs	r0, #1
 800c574:	e7cc      	b.n	800c510 <_rclc_check_for_new_data+0x34>
 800c576:	bf00      	nop

0800c578 <_rclc_take_new_data>:
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	b09b      	sub	sp, #108	@ 0x6c
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f000 8088 	beq.w	800c692 <_rclc_take_new_data+0x11a>
 800c582:	7803      	ldrb	r3, [r0, #0]
 800c584:	4604      	mov	r4, r0
 800c586:	2b0a      	cmp	r3, #10
 800c588:	f200 8167 	bhi.w	800c85a <_rclc_take_new_data+0x2e2>
 800c58c:	e8df f003 	tbb	[pc, r3]
 800c590:	44152d2d 	.word	0x44152d2d
 800c594:	19191944 	.word	0x19191944
 800c598:	065a      	.short	0x065a
 800c59a:	15          	.byte	0x15
 800c59b:	00          	.byte	0x00
 800c59c:	6840      	ldr	r0, [r0, #4]
 800c59e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f040 80b2 	bne.w	800c70c <_rclc_take_new_data+0x194>
 800c5a8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 80e4 	bne.w	800c77a <_rclc_take_new_data+0x202>
 800c5b2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d16f      	bne.n	800c69a <_rclc_take_new_data+0x122>
 800c5ba:	2500      	movs	r5, #0
 800c5bc:	4628      	mov	r0, r5
 800c5be:	b01b      	add	sp, #108	@ 0x6c
 800c5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c5c4:	6a0b      	ldr	r3, [r1, #32]
 800c5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d0f5      	beq.n	800c5ba <_rclc_take_new_data+0x42>
 800c5ce:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c5d2:	f104 0110 	add.w	r1, r4, #16
 800c5d6:	f006 f9dd 	bl	8012994 <rcl_take_request>
 800c5da:	4605      	mov	r5, r0
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d0ec      	beq.n	800c5ba <_rclc_take_new_data+0x42>
 800c5e0:	f240 2359 	movw	r3, #601	@ 0x259
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	d013      	beq.n	800c610 <_rclc_take_new_data+0x98>
 800c5e8:	e029      	b.n	800c63e <_rclc_take_new_data+0xc6>
 800c5ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c5ec:	680b      	ldr	r3, [r1, #0]
 800c5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d0e1      	beq.n	800c5ba <_rclc_take_new_data+0x42>
 800c5f6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	aa0a      	add	r2, sp, #40	@ 0x28
 800c5fe:	f006 fa2b 	bl	8012a58 <rcl_take>
 800c602:	4605      	mov	r5, r0
 800c604:	2800      	cmp	r0, #0
 800c606:	d0d9      	beq.n	800c5bc <_rclc_take_new_data+0x44>
 800c608:	f240 1391 	movw	r3, #401	@ 0x191
 800c60c:	4298      	cmp	r0, r3
 800c60e:	d116      	bne.n	800c63e <_rclc_take_new_data+0xc6>
 800c610:	2300      	movs	r3, #0
 800c612:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c616:	e7d1      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c618:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c61a:	698b      	ldr	r3, [r1, #24]
 800c61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0ca      	beq.n	800c5ba <_rclc_take_new_data+0x42>
 800c624:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c628:	f104 0110 	add.w	r1, r4, #16
 800c62c:	f005 fc68 	bl	8011f00 <rcl_take_response>
 800c630:	4605      	mov	r5, r0
 800c632:	2800      	cmp	r0, #0
 800c634:	d0c1      	beq.n	800c5ba <_rclc_take_new_data+0x42>
 800c636:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c63a:	4298      	cmp	r0, r3
 800c63c:	d0be      	beq.n	800c5bc <_rclc_take_new_data+0x44>
 800c63e:	f000 fea3 	bl	800d388 <rcutils_reset_error>
 800c642:	e7bb      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c644:	6840      	ldr	r0, [r0, #4]
 800c646:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d17d      	bne.n	800c74a <_rclc_take_new_data+0x1d2>
 800c64e:	69c3      	ldr	r3, [r0, #28]
 800c650:	b11b      	cbz	r3, 800c65a <_rclc_take_new_data+0xe2>
 800c652:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c656:	2b00      	cmp	r3, #0
 800c658:	d144      	bne.n	800c6e4 <_rclc_take_new_data+0x16c>
 800c65a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f040 80ac 	bne.w	800c7bc <_rclc_take_new_data+0x244>
 800c664:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d0a6      	beq.n	800c5ba <_rclc_take_new_data+0x42>
 800c66c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c66e:	a90a      	add	r1, sp, #40	@ 0x28
 800c670:	3010      	adds	r0, #16
 800c672:	f007 fcb9 	bl	8013fe8 <rcl_action_take_result_response>
 800c676:	4605      	mov	r5, r0
 800c678:	2800      	cmp	r0, #0
 800c67a:	d1e0      	bne.n	800c63e <_rclc_take_new_data+0xc6>
 800c67c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c680:	6860      	ldr	r0, [r4, #4]
 800c682:	f008 f915 	bl	80148b0 <rclc_action_find_handle_by_result_request_sequence_number>
 800c686:	2800      	cmp	r0, #0
 800c688:	d098      	beq.n	800c5bc <_rclc_take_new_data+0x44>
 800c68a:	2301      	movs	r3, #1
 800c68c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c690:	e794      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c692:	250b      	movs	r5, #11
 800c694:	4628      	mov	r0, r5
 800c696:	b01b      	add	sp, #108	@ 0x6c
 800c698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c69a:	ae04      	add	r6, sp, #16
 800c69c:	aa0a      	add	r2, sp, #40	@ 0x28
 800c69e:	3010      	adds	r0, #16
 800c6a0:	4631      	mov	r1, r6
 800c6a2:	f007 ff15 	bl	80144d0 <rcl_action_take_cancel_request>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d1c8      	bne.n	800c63e <_rclc_take_new_data+0xc6>
 800c6ac:	6860      	ldr	r0, [r4, #4]
 800c6ae:	a90a      	add	r1, sp, #40	@ 0x28
 800c6b0:	f008 f8bc 	bl	801482c <rclc_action_find_goal_handle_by_uuid>
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f000 80bb 	beq.w	800c832 <_rclc_take_new_data+0x2ba>
 800c6bc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	f008 f83d 	bl	8014740 <rcl_action_transition_goal_state>
 800c6c6:	2803      	cmp	r0, #3
 800c6c8:	4684      	mov	ip, r0
 800c6ca:	f040 80a7 	bne.w	800c81c <_rclc_take_new_data+0x2a4>
 800c6ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6d0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c6d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c6da:	e884 0003 	stmia.w	r4, {r0, r1}
 800c6de:	f887 c008 	strb.w	ip, [r7, #8]
 800c6e2:	e76b      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c6e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c6e6:	3010      	adds	r0, #16
 800c6e8:	f007 fcfe 	bl	80140e8 <rcl_action_take_feedback>
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d1a5      	bne.n	800c63e <_rclc_take_new_data+0xc6>
 800c6f2:	6860      	ldr	r0, [r4, #4]
 800c6f4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c6f6:	f008 f899 	bl	801482c <rclc_action_find_goal_handle_by_uuid>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f000 80a3 	beq.w	800c848 <_rclc_take_new_data+0x2d0>
 800c702:	2201      	movs	r2, #1
 800c704:	6860      	ldr	r0, [r4, #4]
 800c706:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c70a:	e7a6      	b.n	800c65a <_rclc_take_new_data+0xe2>
 800c70c:	f008 f868 	bl	80147e0 <rclc_action_take_goal_handle>
 800c710:	4606      	mov	r6, r0
 800c712:	6860      	ldr	r0, [r4, #4]
 800c714:	2e00      	cmp	r6, #0
 800c716:	f43f af47 	beq.w	800c5a8 <_rclc_take_new_data+0x30>
 800c71a:	6070      	str	r0, [r6, #4]
 800c71c:	69f2      	ldr	r2, [r6, #28]
 800c71e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c722:	3010      	adds	r0, #16
 800c724:	f007 fe1c 	bl	8014360 <rcl_action_take_goal_request>
 800c728:	4605      	mov	r5, r0
 800c72a:	2800      	cmp	r0, #0
 800c72c:	f040 808e 	bne.w	800c84c <_rclc_take_new_data+0x2d4>
 800c730:	69f7      	ldr	r7, [r6, #28]
 800c732:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c734:	7235      	strb	r5, [r6, #8]
 800c736:	f8c6 0009 	str.w	r0, [r6, #9]
 800c73a:	f8c6 100d 	str.w	r1, [r6, #13]
 800c73e:	6860      	ldr	r0, [r4, #4]
 800c740:	f8c6 2011 	str.w	r2, [r6, #17]
 800c744:	f8c6 3015 	str.w	r3, [r6, #21]
 800c748:	e72e      	b.n	800c5a8 <_rclc_take_new_data+0x30>
 800c74a:	aa04      	add	r2, sp, #16
 800c74c:	a90a      	add	r1, sp, #40	@ 0x28
 800c74e:	3010      	adds	r0, #16
 800c750:	f007 fbd2 	bl	8013ef8 <rcl_action_take_goal_response>
 800c754:	4605      	mov	r5, r0
 800c756:	2800      	cmp	r0, #0
 800c758:	f47f af71 	bne.w	800c63e <_rclc_take_new_data+0xc6>
 800c75c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c760:	6860      	ldr	r0, [r4, #4]
 800c762:	f008 f893 	bl	801488c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c766:	b130      	cbz	r0, 800c776 <_rclc_take_new_data+0x1fe>
 800c768:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c76c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c770:	2201      	movs	r2, #1
 800c772:	f880 2020 	strb.w	r2, [r0, #32]
 800c776:	6860      	ldr	r0, [r4, #4]
 800c778:	e769      	b.n	800c64e <_rclc_take_new_data+0xd6>
 800c77a:	aa04      	add	r2, sp, #16
 800c77c:	3010      	adds	r0, #16
 800c77e:	a90a      	add	r1, sp, #40	@ 0x28
 800c780:	f007 fe66 	bl	8014450 <rcl_action_take_result_request>
 800c784:	4605      	mov	r5, r0
 800c786:	2800      	cmp	r0, #0
 800c788:	f47f af59 	bne.w	800c63e <_rclc_take_new_data+0xc6>
 800c78c:	6860      	ldr	r0, [r4, #4]
 800c78e:	a904      	add	r1, sp, #16
 800c790:	f008 f84c 	bl	801482c <rclc_action_find_goal_handle_by_uuid>
 800c794:	4607      	mov	r7, r0
 800c796:	b160      	cbz	r0, 800c7b2 <_rclc_take_new_data+0x23a>
 800c798:	ad0a      	add	r5, sp, #40	@ 0x28
 800c79a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c79e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c7a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c7a6:	f04f 0c02 	mov.w	ip, #2
 800c7aa:	e886 0003 	stmia.w	r6, {r0, r1}
 800c7ae:	f887 c008 	strb.w	ip, [r7, #8]
 800c7b2:	6860      	ldr	r0, [r4, #4]
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c7ba:	e6fa      	b.n	800c5b2 <_rclc_take_new_data+0x3a>
 800c7bc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c7c0:	a90a      	add	r1, sp, #40	@ 0x28
 800c7c2:	3010      	adds	r0, #16
 800c7c4:	f007 fc50 	bl	8014068 <rcl_action_take_cancel_response>
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f47f af37 	bne.w	800c63e <_rclc_take_new_data+0xc6>
 800c7d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c7d4:	6860      	ldr	r0, [r4, #4]
 800c7d6:	f008 f87d 	bl	80148d4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c7da:	4606      	mov	r6, r0
 800c7dc:	6860      	ldr	r0, [r4, #4]
 800c7de:	2e00      	cmp	r6, #0
 800c7e0:	f43f af40 	beq.w	800c664 <_rclc_take_new_data+0xec>
 800c7e4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c7e6:	2701      	movs	r7, #1
 800c7e8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f43f af3a 	beq.w	800c664 <_rclc_take_new_data+0xec>
 800c7f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c7f2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c7f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c7fa:	f008 f817 	bl	801482c <rclc_action_find_goal_handle_by_uuid>
 800c7fe:	b138      	cbz	r0, 800c810 <_rclc_take_new_data+0x298>
 800c800:	6860      	ldr	r0, [r4, #4]
 800c802:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c804:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c808:	3501      	adds	r5, #1
 800c80a:	42ab      	cmp	r3, r5
 800c80c:	d8f0      	bhi.n	800c7f0 <_rclc_take_new_data+0x278>
 800c80e:	e729      	b.n	800c664 <_rclc_take_new_data+0xec>
 800c810:	6860      	ldr	r0, [r4, #4]
 800c812:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c814:	3501      	adds	r5, #1
 800c816:	42ab      	cmp	r3, r5
 800c818:	d8ea      	bhi.n	800c7f0 <_rclc_take_new_data+0x278>
 800c81a:	e723      	b.n	800c664 <_rclc_take_new_data+0xec>
 800c81c:	ab06      	add	r3, sp, #24
 800c81e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c820:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c824:	2103      	movs	r1, #3
 800c826:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c82a:	6860      	ldr	r0, [r4, #4]
 800c82c:	f008 f8c8 	bl	80149c0 <rclc_action_server_goal_cancel_reject>
 800c830:	e6c4      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c832:	ab06      	add	r3, sp, #24
 800c834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c836:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c83a:	2102      	movs	r1, #2
 800c83c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c840:	6860      	ldr	r0, [r4, #4]
 800c842:	f008 f8bd 	bl	80149c0 <rclc_action_server_goal_cancel_reject>
 800c846:	e6b9      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c848:	6860      	ldr	r0, [r4, #4]
 800c84a:	e706      	b.n	800c65a <_rclc_take_new_data+0xe2>
 800c84c:	6860      	ldr	r0, [r4, #4]
 800c84e:	4631      	mov	r1, r6
 800c850:	f007 ffd6 	bl	8014800 <rclc_action_remove_used_goal_handle>
 800c854:	f000 fd98 	bl	800d388 <rcutils_reset_error>
 800c858:	e6b0      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c85a:	2501      	movs	r5, #1
 800c85c:	e6ae      	b.n	800c5bc <_rclc_take_new_data+0x44>
 800c85e:	bf00      	nop

0800c860 <_rclc_execute.part.0>:
 800c860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c862:	7803      	ldrb	r3, [r0, #0]
 800c864:	b087      	sub	sp, #28
 800c866:	4604      	mov	r4, r0
 800c868:	2b0a      	cmp	r3, #10
 800c86a:	f200 8136 	bhi.w	800cada <_rclc_execute.part.0+0x27a>
 800c86e:	e8df f003 	tbb	[pc, r3]
 800c872:	435e      	.short	0x435e
 800c874:	06a1664f 	.word	0x06a1664f
 800c878:	6c1e0606 	.word	0x6c1e0606
 800c87c:	59          	.byte	0x59
 800c87d:	00          	.byte	0x00
 800c87e:	2b06      	cmp	r3, #6
 800c880:	f000 8122 	beq.w	800cac8 <_rclc_execute.part.0+0x268>
 800c884:	2b07      	cmp	r3, #7
 800c886:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c888:	f040 8118 	bne.w	800cabc <_rclc_execute.part.0+0x25c>
 800c88c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c890:	6880      	ldr	r0, [r0, #8]
 800c892:	4798      	blx	r3
 800c894:	f104 0110 	add.w	r1, r4, #16
 800c898:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c89a:	6860      	ldr	r0, [r4, #4]
 800c89c:	f006 f8ba 	bl	8012a14 <rcl_send_response>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d033      	beq.n	800c90c <_rclc_execute.part.0+0xac>
 800c8a4:	9005      	str	r0, [sp, #20]
 800c8a6:	f000 fd6f 	bl	800d388 <rcutils_reset_error>
 800c8aa:	9805      	ldr	r0, [sp, #20]
 800c8ac:	e02e      	b.n	800c90c <_rclc_execute.part.0+0xac>
 800c8ae:	6840      	ldr	r0, [r0, #4]
 800c8b0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 8086 	beq.w	800c9c6 <_rclc_execute.part.0+0x166>
 800c8ba:	2600      	movs	r6, #0
 800c8bc:	2701      	movs	r7, #1
 800c8be:	e004      	b.n	800c8ca <_rclc_execute.part.0+0x6a>
 800c8c0:	f007 ff68 	bl	8014794 <rclc_action_send_result_request>
 800c8c4:	b998      	cbnz	r0, 800c8ee <_rclc_execute.part.0+0x8e>
 800c8c6:	722f      	strb	r7, [r5, #8]
 800c8c8:	6860      	ldr	r0, [r4, #4]
 800c8ca:	f008 f815 	bl	80148f8 <rclc_action_find_first_handle_with_goal_response>
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d077      	beq.n	800c9c4 <_rclc_execute.part.0+0x164>
 800c8d4:	6863      	ldr	r3, [r4, #4]
 800c8d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c8de:	f885 6020 	strb.w	r6, [r5, #32]
 800c8e2:	4798      	blx	r3
 800c8e4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1e8      	bne.n	800c8c0 <_rclc_execute.part.0+0x60>
 800c8ee:	6860      	ldr	r0, [r4, #4]
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f007 ff85 	bl	8014800 <rclc_action_remove_used_goal_handle>
 800c8f6:	e7e7      	b.n	800c8c8 <_rclc_execute.part.0+0x68>
 800c8f8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c8fc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c900:	2d00      	cmp	r5, #0
 800c902:	f000 80c9 	beq.w	800ca98 <_rclc_execute.part.0+0x238>
 800c906:	6880      	ldr	r0, [r0, #8]
 800c908:	4798      	blx	r3
 800c90a:	2000      	movs	r0, #0
 800c90c:	b007      	add	sp, #28
 800c90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c910:	6840      	ldr	r0, [r0, #4]
 800c912:	f006 fbaf 	bl	8013074 <rcl_timer_call>
 800c916:	f240 3321 	movw	r3, #801	@ 0x321
 800c91a:	4298      	cmp	r0, r3
 800c91c:	d004      	beq.n	800c928 <_rclc_execute.part.0+0xc8>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d0f4      	beq.n	800c90c <_rclc_execute.part.0+0xac>
 800c922:	e7bf      	b.n	800c8a4 <_rclc_execute.part.0+0x44>
 800c924:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c926:	4798      	blx	r3
 800c928:	2000      	movs	r0, #0
 800c92a:	b007      	add	sp, #28
 800c92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c92e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c932:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c934:	b925      	cbnz	r5, 800c940 <_rclc_execute.part.0+0xe0>
 800c936:	4628      	mov	r0, r5
 800c938:	4798      	blx	r3
 800c93a:	4628      	mov	r0, r5
 800c93c:	e7e6      	b.n	800c90c <_rclc_execute.part.0+0xac>
 800c93e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c940:	68a0      	ldr	r0, [r4, #8]
 800c942:	4798      	blx	r3
 800c944:	2000      	movs	r0, #0
 800c946:	b007      	add	sp, #28
 800c948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c94a:	6840      	ldr	r0, [r0, #4]
 800c94c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c950:	bb3b      	cbnz	r3, 800c9a2 <_rclc_execute.part.0+0x142>
 800c952:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d07b      	beq.n	800ca52 <_rclc_execute.part.0+0x1f2>
 800c95a:	f640 0634 	movw	r6, #2100	@ 0x834
 800c95e:	2701      	movs	r7, #1
 800c960:	e007      	b.n	800c972 <_rclc_execute.part.0+0x112>
 800c962:	4628      	mov	r0, r5
 800c964:	f007 ffe0 	bl	8014928 <rclc_action_server_response_goal_request>
 800c968:	6860      	ldr	r0, [r4, #4]
 800c96a:	4629      	mov	r1, r5
 800c96c:	f007 ff48 	bl	8014800 <rclc_action_remove_used_goal_handle>
 800c970:	6860      	ldr	r0, [r4, #4]
 800c972:	2100      	movs	r1, #0
 800c974:	f007 ff72 	bl	801485c <rclc_action_find_first_handle_by_status>
 800c978:	4605      	mov	r5, r0
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d066      	beq.n	800ca4c <_rclc_execute.part.0+0x1ec>
 800c97e:	6863      	ldr	r3, [r4, #4]
 800c980:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	4798      	blx	r3
 800c986:	42b0      	cmp	r0, r6
 800c988:	f04f 0100 	mov.w	r1, #0
 800c98c:	d1e9      	bne.n	800c962 <_rclc_execute.part.0+0x102>
 800c98e:	2101      	movs	r1, #1
 800c990:	4628      	mov	r0, r5
 800c992:	f007 ffc9 	bl	8014928 <rclc_action_server_response_goal_request>
 800c996:	722f      	strb	r7, [r5, #8]
 800c998:	e7ea      	b.n	800c970 <_rclc_execute.part.0+0x110>
 800c99a:	6848      	ldr	r0, [r1, #4]
 800c99c:	f007 ff30 	bl	8014800 <rclc_action_remove_used_goal_handle>
 800c9a0:	6860      	ldr	r0, [r4, #4]
 800c9a2:	f007 ff67 	bl	8014874 <rclc_action_find_first_terminated_handle>
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d1f6      	bne.n	800c99a <_rclc_execute.part.0+0x13a>
 800c9ac:	6860      	ldr	r0, [r4, #4]
 800c9ae:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c9b2:	e7ce      	b.n	800c952 <_rclc_execute.part.0+0xf2>
 800c9b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9b6:	6880      	ldr	r0, [r0, #8]
 800c9b8:	f104 0110 	add.w	r1, r4, #16
 800c9bc:	4798      	blx	r3
 800c9be:	2000      	movs	r0, #0
 800c9c0:	b007      	add	sp, #28
 800c9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9c4:	6860      	ldr	r0, [r4, #4]
 800c9c6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c9ca:	b18b      	cbz	r3, 800c9f0 <_rclc_execute.part.0+0x190>
 800c9cc:	68c5      	ldr	r5, [r0, #12]
 800c9ce:	b32d      	cbz	r5, 800ca1c <_rclc_execute.part.0+0x1bc>
 800c9d0:	2600      	movs	r6, #0
 800c9d2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c9d6:	b143      	cbz	r3, 800c9ea <_rclc_execute.part.0+0x18a>
 800c9d8:	69c3      	ldr	r3, [r0, #28]
 800c9da:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c9de:	b123      	cbz	r3, 800c9ea <_rclc_execute.part.0+0x18a>
 800c9e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c9e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	4798      	blx	r3
 800c9e8:	6860      	ldr	r0, [r4, #4]
 800c9ea:	682d      	ldr	r5, [r5, #0]
 800c9ec:	2d00      	cmp	r5, #0
 800c9ee:	d1f0      	bne.n	800c9d2 <_rclc_execute.part.0+0x172>
 800c9f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c9f4:	b193      	cbz	r3, 800ca1c <_rclc_execute.part.0+0x1bc>
 800c9f6:	68c5      	ldr	r5, [r0, #12]
 800c9f8:	b185      	cbz	r5, 800ca1c <_rclc_execute.part.0+0x1bc>
 800c9fa:	2600      	movs	r6, #0
 800c9fc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ca00:	b14b      	cbz	r3, 800ca16 <_rclc_execute.part.0+0x1b6>
 800ca02:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ca04:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ca08:	b12b      	cbz	r3, 800ca16 <_rclc_execute.part.0+0x1b6>
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ca10:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca12:	4798      	blx	r3
 800ca14:	6860      	ldr	r0, [r4, #4]
 800ca16:	682d      	ldr	r5, [r5, #0]
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	d1ef      	bne.n	800c9fc <_rclc_execute.part.0+0x19c>
 800ca1c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d081      	beq.n	800c928 <_rclc_execute.part.0+0xc8>
 800ca24:	2700      	movs	r7, #0
 800ca26:	e00b      	b.n	800ca40 <_rclc_execute.part.0+0x1e0>
 800ca28:	6863      	ldr	r3, [r4, #4]
 800ca2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ca2e:	6a1e      	ldr	r6, [r3, #32]
 800ca30:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ca34:	47b0      	blx	r6
 800ca36:	6860      	ldr	r0, [r4, #4]
 800ca38:	4629      	mov	r1, r5
 800ca3a:	f007 fee1 	bl	8014800 <rclc_action_remove_used_goal_handle>
 800ca3e:	6860      	ldr	r0, [r4, #4]
 800ca40:	f007 ff66 	bl	8014910 <rclc_action_find_first_handle_with_result_response>
 800ca44:	4605      	mov	r5, r0
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d1ee      	bne.n	800ca28 <_rclc_execute.part.0+0x1c8>
 800ca4a:	e76d      	b.n	800c928 <_rclc_execute.part.0+0xc8>
 800ca4c:	6860      	ldr	r0, [r4, #4]
 800ca4e:	f880 5020 	strb.w	r5, [r0, #32]
 800ca52:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f43f af66 	beq.w	800c928 <_rclc_execute.part.0+0xc8>
 800ca5c:	68c5      	ldr	r5, [r0, #12]
 800ca5e:	b1b5      	cbz	r5, 800ca8e <_rclc_execute.part.0+0x22e>
 800ca60:	2602      	movs	r6, #2
 800ca62:	e001      	b.n	800ca68 <_rclc_execute.part.0+0x208>
 800ca64:	682d      	ldr	r5, [r5, #0]
 800ca66:	b195      	cbz	r5, 800ca8e <_rclc_execute.part.0+0x22e>
 800ca68:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	d1f9      	bne.n	800ca64 <_rclc_execute.part.0+0x204>
 800ca70:	69c3      	ldr	r3, [r0, #28]
 800ca72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca74:	4628      	mov	r0, r5
 800ca76:	4798      	blx	r3
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ca84:	b163      	cbz	r3, 800caa0 <_rclc_execute.part.0+0x240>
 800ca86:	f007 ff6f 	bl	8014968 <rclc_action_server_goal_cancel_accept>
 800ca8a:	6860      	ldr	r0, [r4, #4]
 800ca8c:	e7ea      	b.n	800ca64 <_rclc_execute.part.0+0x204>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ca94:	4618      	mov	r0, r3
 800ca96:	e739      	b.n	800c90c <_rclc_execute.part.0+0xac>
 800ca98:	4628      	mov	r0, r5
 800ca9a:	4798      	blx	r3
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	e735      	b.n	800c90c <_rclc_execute.part.0+0xac>
 800caa0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800caa2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800caa6:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800caaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caae:	6860      	ldr	r0, [r4, #4]
 800cab0:	2101      	movs	r1, #1
 800cab2:	f007 ff85 	bl	80149c0 <rclc_action_server_goal_cancel_reject>
 800cab6:	722e      	strb	r6, [r5, #8]
 800cab8:	6860      	ldr	r0, [r4, #4]
 800caba:	e7d3      	b.n	800ca64 <_rclc_execute.part.0+0x204>
 800cabc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cabe:	6880      	ldr	r0, [r0, #8]
 800cac0:	4798      	blx	r3
 800cac2:	f104 0110 	add.w	r1, r4, #16
 800cac6:	e6e7      	b.n	800c898 <_rclc_execute.part.0+0x38>
 800cac8:	f100 0110 	add.w	r1, r0, #16
 800cacc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cace:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800cad0:	6880      	ldr	r0, [r0, #8]
 800cad2:	9105      	str	r1, [sp, #20]
 800cad4:	4798      	blx	r3
 800cad6:	9905      	ldr	r1, [sp, #20]
 800cad8:	e6de      	b.n	800c898 <_rclc_execute.part.0+0x38>
 800cada:	2001      	movs	r0, #1
 800cadc:	e716      	b.n	800c90c <_rclc_execute.part.0+0xac>
 800cade:	bf00      	nop

0800cae0 <rclc_executor_trigger_any>:
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d03f      	beq.n	800cb64 <rclc_executor_trigger_any+0x84>
 800cae4:	2900      	cmp	r1, #0
 800cae6:	d03e      	beq.n	800cb66 <rclc_executor_trigger_any+0x86>
 800cae8:	4603      	mov	r3, r0
 800caea:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800caee:	2200      	movs	r2, #0
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d037      	beq.n	800cb64 <rclc_executor_trigger_any+0x84>
 800caf4:	b430      	push	{r4, r5}
 800caf6:	f893 c000 	ldrb.w	ip, [r3]
 800cafa:	f1bc 0f08 	cmp.w	ip, #8
 800cafe:	d11e      	bne.n	800cb3e <rclc_executor_trigger_any+0x5e>
 800cb00:	685c      	ldr	r4, [r3, #4]
 800cb02:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cb04:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cb08:	d105      	bne.n	800cb16 <rclc_executor_trigger_any+0x36>
 800cb0a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cb0e:	b910      	cbnz	r0, 800cb16 <rclc_executor_trigger_any+0x36>
 800cb10:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800cb14:	b128      	cbz	r0, 800cb22 <rclc_executor_trigger_any+0x42>
 800cb16:	bc30      	pop	{r4, r5}
 800cb18:	4770      	bx	lr
 800cb1a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d1f9      	bne.n	800cb16 <rclc_executor_trigger_any+0x36>
 800cb22:	3201      	adds	r2, #1
 800cb24:	4291      	cmp	r1, r2
 800cb26:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cb2a:	d018      	beq.n	800cb5e <rclc_executor_trigger_any+0x7e>
 800cb2c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d0f0      	beq.n	800cb16 <rclc_executor_trigger_any+0x36>
 800cb34:	f893 c000 	ldrb.w	ip, [r3]
 800cb38:	f1bc 0f08 	cmp.w	ip, #8
 800cb3c:	d0e0      	beq.n	800cb00 <rclc_executor_trigger_any+0x20>
 800cb3e:	f1bc 0f09 	cmp.w	ip, #9
 800cb42:	d1ea      	bne.n	800cb1a <rclc_executor_trigger_any+0x3a>
 800cb44:	685c      	ldr	r4, [r3, #4]
 800cb46:	6a25      	ldr	r5, [r4, #32]
 800cb48:	2d00      	cmp	r5, #0
 800cb4a:	d1e4      	bne.n	800cb16 <rclc_executor_trigger_any+0x36>
 800cb4c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d1e0      	bne.n	800cb16 <rclc_executor_trigger_any+0x36>
 800cb54:	3201      	adds	r2, #1
 800cb56:	4291      	cmp	r1, r2
 800cb58:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cb5c:	d1e6      	bne.n	800cb2c <rclc_executor_trigger_any+0x4c>
 800cb5e:	2000      	movs	r0, #0
 800cb60:	bc30      	pop	{r4, r5}
 800cb62:	4770      	bx	lr
 800cb64:	4770      	bx	lr
 800cb66:	4608      	mov	r0, r1
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop

0800cb6c <rclc_executor_get_zero_initialized_executor>:
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	4903      	ldr	r1, [pc, #12]	@ (800cb7c <rclc_executor_get_zero_initialized_executor+0x10>)
 800cb70:	4604      	mov	r4, r0
 800cb72:	2288      	movs	r2, #136	@ 0x88
 800cb74:	f00b f8e9 	bl	8017d4a <memcpy>
 800cb78:	4620      	mov	r0, r4
 800cb7a:	bd10      	pop	{r4, pc}
 800cb7c:	08018e10 	.word	0x08018e10

0800cb80 <rclc_executor_init>:
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d05f      	beq.n	800cc44 <rclc_executor_init+0xc4>
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	460c      	mov	r4, r1
 800cb8a:	b0b0      	sub	sp, #192	@ 0xc0
 800cb8c:	2900      	cmp	r1, #0
 800cb8e:	d051      	beq.n	800cc34 <rclc_executor_init+0xb4>
 800cb90:	4605      	mov	r5, r0
 800cb92:	4618      	mov	r0, r3
 800cb94:	4616      	mov	r6, r2
 800cb96:	461f      	mov	r7, r3
 800cb98:	f000 fbd0 	bl	800d33c <rcutils_allocator_is_valid>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d049      	beq.n	800cc34 <rclc_executor_init+0xb4>
 800cba0:	2e00      	cmp	r6, #0
 800cba2:	d047      	beq.n	800cc34 <rclc_executor_init+0xb4>
 800cba4:	492c      	ldr	r1, [pc, #176]	@ (800cc58 <rclc_executor_init+0xd8>)
 800cba6:	2288      	movs	r2, #136	@ 0x88
 800cba8:	a80e      	add	r0, sp, #56	@ 0x38
 800cbaa:	f00b f8ce 	bl	8017d4a <memcpy>
 800cbae:	a90e      	add	r1, sp, #56	@ 0x38
 800cbb0:	2288      	movs	r2, #136	@ 0x88
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f00b f8c9 	bl	8017d4a <memcpy>
 800cbb8:	602c      	str	r4, [r5, #0]
 800cbba:	4668      	mov	r0, sp
 800cbbc:	60ae      	str	r6, [r5, #8]
 800cbbe:	466c      	mov	r4, sp
 800cbc0:	f006 fbca 	bl	8013358 <rcl_get_zero_initialized_wait_set>
 800cbc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbc6:	f105 0c14 	add.w	ip, r5, #20
 800cbca:	f8d7 8000 	ldr.w	r8, [r7]
 800cbce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbde:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cc50 <rclc_executor_init+0xd0>
 800cbe2:	6823      	ldr	r3, [r4, #0]
 800cbe4:	f8cc 3000 	str.w	r3, [ip]
 800cbe8:	6939      	ldr	r1, [r7, #16]
 800cbea:	612f      	str	r7, [r5, #16]
 800cbec:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cbf0:	01b0      	lsls	r0, r6, #6
 800cbf2:	47c0      	blx	r8
 800cbf4:	6068      	str	r0, [r5, #4]
 800cbf6:	b338      	cbz	r0, 800cc48 <rclc_executor_init+0xc8>
 800cbf8:	2400      	movs	r4, #0
 800cbfa:	e000      	b.n	800cbfe <rclc_executor_init+0x7e>
 800cbfc:	6868      	ldr	r0, [r5, #4]
 800cbfe:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800cc02:	4631      	mov	r1, r6
 800cc04:	3401      	adds	r4, #1
 800cc06:	f000 fa6b 	bl	800d0e0 <rclc_executor_handle_init>
 800cc0a:	42a6      	cmp	r6, r4
 800cc0c:	d1f6      	bne.n	800cbfc <rclc_executor_init+0x7c>
 800cc0e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800cc12:	f000 fa59 	bl	800d0c8 <rclc_executor_handle_counters_zero_init>
 800cc16:	4a11      	ldr	r2, [pc, #68]	@ (800cc5c <rclc_executor_init+0xdc>)
 800cc18:	686b      	ldr	r3, [r5, #4]
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800cc20:	b163      	cbz	r3, 800cc3c <rclc_executor_init+0xbc>
 800cc22:	692b      	ldr	r3, [r5, #16]
 800cc24:	b153      	cbz	r3, 800cc3c <rclc_executor_init+0xbc>
 800cc26:	68ab      	ldr	r3, [r5, #8]
 800cc28:	b143      	cbz	r3, 800cc3c <rclc_executor_init+0xbc>
 800cc2a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800cc2e:	b030      	add	sp, #192	@ 0xc0
 800cc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc34:	200b      	movs	r0, #11
 800cc36:	b030      	add	sp, #192	@ 0xc0
 800cc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	b030      	add	sp, #192	@ 0xc0
 800cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc44:	200b      	movs	r0, #11
 800cc46:	4770      	bx	lr
 800cc48:	200a      	movs	r0, #10
 800cc4a:	e7f4      	b.n	800cc36 <rclc_executor_init+0xb6>
 800cc4c:	f3af 8000 	nop.w
 800cc50:	3b9aca00 	.word	0x3b9aca00
 800cc54:	00000000 	.word	0x00000000
 800cc58:	08018e10 	.word	0x08018e10
 800cc5c:	0800cae1 	.word	0x0800cae1

0800cc60 <rclc_executor_add_timer>:
 800cc60:	b300      	cbz	r0, 800cca4 <rclc_executor_add_timer+0x44>
 800cc62:	b1f9      	cbz	r1, 800cca4 <rclc_executor_add_timer+0x44>
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	d301      	bcc.n	800cc74 <rclc_executor_add_timer+0x14>
 800cc70:	2001      	movs	r0, #1
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	6840      	ldr	r0, [r0, #4]
 800cc76:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800cc7a:	019d      	lsls	r5, r3, #6
 800cc7c:	6051      	str	r1, [r2, #4]
 800cc7e:	2102      	movs	r1, #2
 800cc80:	5341      	strh	r1, [r0, r5]
 800cc82:	3301      	adds	r3, #1
 800cc84:	2000      	movs	r0, #0
 800cc86:	2101      	movs	r1, #1
 800cc88:	f104 0514 	add.w	r5, r4, #20
 800cc8c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800cc8e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800cc90:	4628      	mov	r0, r5
 800cc92:	60e3      	str	r3, [r4, #12]
 800cc94:	f006 fb74 	bl	8013380 <rcl_wait_set_is_valid>
 800cc98:	b930      	cbnz	r0, 800cca8 <rclc_executor_add_timer+0x48>
 800cc9a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	2000      	movs	r0, #0
 800cca0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	200b      	movs	r0, #11
 800cca6:	4770      	bx	lr
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f006 fb6f 	bl	801338c <rcl_wait_set_fini>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d0f3      	beq.n	800cc9a <rclc_executor_add_timer+0x3a>
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}

0800ccb4 <rclc_executor_prepare>:
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d044      	beq.n	800cd42 <rclc_executor_prepare+0x8e>
 800ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccba:	f100 0514 	add.w	r5, r0, #20
 800ccbe:	b09b      	sub	sp, #108	@ 0x6c
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f006 fb5c 	bl	8013380 <rcl_wait_set_is_valid>
 800ccc8:	b110      	cbz	r0, 800ccd0 <rclc_executor_prepare+0x1c>
 800ccca:	2000      	movs	r0, #0
 800cccc:	b01b      	add	sp, #108	@ 0x6c
 800ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f006 fb5b 	bl	801338c <rcl_wait_set_fini>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d130      	bne.n	800cd3c <rclc_executor_prepare+0x88>
 800ccda:	a80c      	add	r0, sp, #48	@ 0x30
 800ccdc:	f006 fb3c 	bl	8013358 <rcl_get_zero_initialized_wait_set>
 800cce0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cce4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cce8:	46ae      	mov	lr, r5
 800ccea:	6927      	ldr	r7, [r4, #16]
 800ccec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccf4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccfc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cd00:	f8dc 3000 	ldr.w	r3, [ip]
 800cd04:	f8ce 3000 	str.w	r3, [lr]
 800cd08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cd0a:	ae04      	add	r6, sp, #16
 800cd0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	6822      	ldr	r2, [r4, #0]
 800cd12:	6033      	str	r3, [r6, #0]
 800cd14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd16:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cd18:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cd1c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800cd20:	e9cd 2100 	strd	r2, r1, [sp]
 800cd24:	4628      	mov	r0, r5
 800cd26:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cd28:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cd2a:	f006 fe2d 	bl	8013988 <rcl_wait_set_init>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d0cc      	beq.n	800cccc <rclc_executor_prepare+0x18>
 800cd32:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cd34:	f000 fb28 	bl	800d388 <rcutils_reset_error>
 800cd38:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cd3a:	e7c7      	b.n	800cccc <rclc_executor_prepare+0x18>
 800cd3c:	f000 fb24 	bl	800d388 <rcutils_reset_error>
 800cd40:	e7cb      	b.n	800ccda <rclc_executor_prepare+0x26>
 800cd42:	200b      	movs	r0, #11
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop

0800cd48 <rclc_executor_spin_some.part.0>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	f100 0614 	add.w	r6, r0, #20
 800cd50:	b083      	sub	sp, #12
 800cd52:	4691      	mov	r9, r2
 800cd54:	4698      	mov	r8, r3
 800cd56:	4605      	mov	r5, r0
 800cd58:	f7ff ffac 	bl	800ccb4 <rclc_executor_prepare>
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f006 fbe1 	bl	8013524 <rcl_wait_set_clear>
 800cd62:	4607      	mov	r7, r0
 800cd64:	2800      	cmp	r0, #0
 800cd66:	f040 80ed 	bne.w	800cf44 <rclc_executor_spin_some.part.0+0x1fc>
 800cd6a:	68ab      	ldr	r3, [r5, #8]
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	b303      	cbz	r3, 800cdb2 <rclc_executor_spin_some.part.0+0x6a>
 800cd70:	6869      	ldr	r1, [r5, #4]
 800cd72:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cd76:	01a2      	lsls	r2, r4, #6
 800cd78:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cd7c:	b1cb      	cbz	r3, 800cdb2 <rclc_executor_spin_some.part.0+0x6a>
 800cd7e:	5c8b      	ldrb	r3, [r1, r2]
 800cd80:	2b0a      	cmp	r3, #10
 800cd82:	f200 80d8 	bhi.w	800cf36 <rclc_executor_spin_some.part.0+0x1ee>
 800cd86:	e8df f003 	tbb	[pc, r3]
 800cd8a:	9c9c      	.short	0x9c9c
 800cd8c:	068c8ca7 	.word	0x068c8ca7
 800cd90:	bdc90606 	.word	0xbdc90606
 800cd94:	b2          	.byte	0xb2
 800cd95:	00          	.byte	0x00
 800cd96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd9a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd9e:	4630      	mov	r0, r6
 800cda0:	f006 ff08 	bl	8013bb4 <rcl_wait_set_add_service>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	f040 8086 	bne.w	800ceb6 <rclc_executor_spin_some.part.0+0x16e>
 800cdaa:	68ab      	ldr	r3, [r5, #8]
 800cdac:	3401      	adds	r4, #1
 800cdae:	429c      	cmp	r4, r3
 800cdb0:	d3de      	bcc.n	800cd70 <rclc_executor_spin_some.part.0+0x28>
 800cdb2:	4643      	mov	r3, r8
 800cdb4:	464a      	mov	r2, r9
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f006 ff2a 	bl	8013c10 <rcl_wait>
 800cdbc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 80c7 	beq.w	800cf54 <rclc_executor_spin_some.part.0+0x20c>
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	f040 80b5 	bne.w	800cf36 <rclc_executor_spin_some.part.0+0x1ee>
 800cdcc:	68ab      	ldr	r3, [r5, #8]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 8159 	beq.w	800d086 <rclc_executor_spin_some.part.0+0x33e>
 800cdd4:	2400      	movs	r4, #0
 800cdd6:	46a0      	mov	r8, r4
 800cdd8:	f240 1991 	movw	r9, #401	@ 0x191
 800cddc:	e00a      	b.n	800cdf4 <rclc_executor_spin_some.part.0+0xac>
 800cdde:	f7ff fb7d 	bl	800c4dc <_rclc_check_for_new_data>
 800cde2:	4604      	mov	r4, r0
 800cde4:	b110      	cbz	r0, 800cdec <rclc_executor_spin_some.part.0+0xa4>
 800cde6:	4548      	cmp	r0, r9
 800cde8:	f040 80b2 	bne.w	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800cdec:	68ab      	ldr	r3, [r5, #8]
 800cdee:	4598      	cmp	r8, r3
 800cdf0:	f080 8126 	bcs.w	800d040 <rclc_executor_spin_some.part.0+0x2f8>
 800cdf4:	686a      	ldr	r2, [r5, #4]
 800cdf6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ce00:	f108 0801 	add.w	r8, r8, #1
 800ce04:	f1bc 0f00 	cmp.w	ip, #0
 800ce08:	d1e9      	bne.n	800cdde <rclc_executor_spin_some.part.0+0x96>
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ce12:	4798      	blx	r3
 800ce14:	2800      	cmp	r0, #0
 800ce16:	f000 809b 	beq.w	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800ce1a:	68ab      	ldr	r3, [r5, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f000 8097 	beq.w	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800ce22:	f04f 0800 	mov.w	r8, #0
 800ce26:	f240 1991 	movw	r9, #401	@ 0x191
 800ce2a:	e009      	b.n	800ce40 <rclc_executor_spin_some.part.0+0xf8>
 800ce2c:	f7ff fba4 	bl	800c578 <_rclc_take_new_data>
 800ce30:	4604      	mov	r4, r0
 800ce32:	b110      	cbz	r0, 800ce3a <rclc_executor_spin_some.part.0+0xf2>
 800ce34:	4548      	cmp	r0, r9
 800ce36:	f040 808b 	bne.w	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800ce3a:	68ab      	ldr	r3, [r5, #8]
 800ce3c:	4598      	cmp	r8, r3
 800ce3e:	d209      	bcs.n	800ce54 <rclc_executor_spin_some.part.0+0x10c>
 800ce40:	6868      	ldr	r0, [r5, #4]
 800ce42:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ce46:	4631      	mov	r1, r6
 800ce48:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ce4c:	f108 0801 	add.w	r8, r8, #1
 800ce50:	2a00      	cmp	r2, #0
 800ce52:	d1eb      	bne.n	800ce2c <rclc_executor_spin_some.part.0+0xe4>
 800ce54:	2600      	movs	r6, #0
 800ce56:	b97b      	cbnz	r3, 800ce78 <rclc_executor_spin_some.part.0+0x130>
 800ce58:	e07a      	b.n	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800ce5a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ce5e:	2a08      	cmp	r2, #8
 800ce60:	f000 80fd 	beq.w	800d05e <rclc_executor_spin_some.part.0+0x316>
 800ce64:	2a09      	cmp	r2, #9
 800ce66:	f000 80ef 	beq.w	800d048 <rclc_executor_spin_some.part.0+0x300>
 800ce6a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800ce6e:	b98a      	cbnz	r2, 800ce94 <rclc_executor_spin_some.part.0+0x14c>
 800ce70:	3601      	adds	r6, #1
 800ce72:	429e      	cmp	r6, r3
 800ce74:	d262      	bcs.n	800cf3c <rclc_executor_spin_some.part.0+0x1f4>
 800ce76:	2400      	movs	r4, #0
 800ce78:	686a      	ldr	r2, [r5, #4]
 800ce7a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ce7e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ce82:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800ce86:	2900      	cmp	r1, #0
 800ce88:	d062      	beq.n	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800ce8a:	7841      	ldrb	r1, [r0, #1]
 800ce8c:	2900      	cmp	r1, #0
 800ce8e:	d0e4      	beq.n	800ce5a <rclc_executor_spin_some.part.0+0x112>
 800ce90:	2901      	cmp	r1, #1
 800ce92:	d1ed      	bne.n	800ce70 <rclc_executor_spin_some.part.0+0x128>
 800ce94:	f7ff fce4 	bl	800c860 <_rclc_execute.part.0>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	f040 80b6 	bne.w	800d00a <rclc_executor_spin_some.part.0+0x2c2>
 800ce9e:	68ab      	ldr	r3, [r5, #8]
 800cea0:	e7e6      	b.n	800ce70 <rclc_executor_spin_some.part.0+0x128>
 800cea2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cea6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f006 fe56 	bl	8013b5c <rcl_wait_set_add_client>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	f43f af7a 	beq.w	800cdaa <rclc_executor_spin_some.part.0+0x62>
 800ceb6:	9001      	str	r0, [sp, #4]
 800ceb8:	f000 fa66 	bl	800d388 <rcutils_reset_error>
 800cebc:	9801      	ldr	r0, [sp, #4]
 800cebe:	4607      	mov	r7, r0
 800cec0:	e03c      	b.n	800cf3c <rclc_executor_spin_some.part.0+0x1f4>
 800cec2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cec6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ceca:	4630      	mov	r0, r6
 800cecc:	f006 fafe 	bl	80134cc <rcl_wait_set_add_subscription>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	f43f af6a 	beq.w	800cdaa <rclc_executor_spin_some.part.0+0x62>
 800ced6:	e7ee      	b.n	800ceb6 <rclc_executor_spin_some.part.0+0x16e>
 800ced8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cedc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cee0:	4630      	mov	r0, r6
 800cee2:	f006 fe0b 	bl	8013afc <rcl_wait_set_add_timer>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f43f af5f 	beq.w	800cdaa <rclc_executor_spin_some.part.0+0x62>
 800ceec:	e7e3      	b.n	800ceb6 <rclc_executor_spin_some.part.0+0x16e>
 800ceee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cef2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cef6:	4630      	mov	r0, r6
 800cef8:	f006 fdd4 	bl	8013aa4 <rcl_wait_set_add_guard_condition>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	f43f af54 	beq.w	800cdaa <rclc_executor_spin_some.part.0+0x62>
 800cf02:	e7d8      	b.n	800ceb6 <rclc_executor_spin_some.part.0+0x16e>
 800cf04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cf08:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cf0c:	3110      	adds	r1, #16
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f007 fb56 	bl	80145c0 <rcl_action_wait_set_add_action_server>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	f43f af48 	beq.w	800cdaa <rclc_executor_spin_some.part.0+0x62>
 800cf1a:	e7cc      	b.n	800ceb6 <rclc_executor_spin_some.part.0+0x16e>
 800cf1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cf20:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cf24:	3110      	adds	r1, #16
 800cf26:	2300      	movs	r3, #0
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f007 f921 	bl	8014170 <rcl_action_wait_set_add_action_client>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	f43f af3b 	beq.w	800cdaa <rclc_executor_spin_some.part.0+0x62>
 800cf34:	e7bf      	b.n	800ceb6 <rclc_executor_spin_some.part.0+0x16e>
 800cf36:	f000 fa27 	bl	800d388 <rcutils_reset_error>
 800cf3a:	2701      	movs	r7, #1
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	b003      	add	sp, #12
 800cf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf44:	f000 fa20 	bl	800d388 <rcutils_reset_error>
 800cf48:	4638      	mov	r0, r7
 800cf4a:	b003      	add	sp, #12
 800cf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf50:	4627      	mov	r7, r4
 800cf52:	e7f3      	b.n	800cf3c <rclc_executor_spin_some.part.0+0x1f4>
 800cf54:	68ab      	ldr	r3, [r5, #8]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 8092 	beq.w	800d080 <rclc_executor_spin_some.part.0+0x338>
 800cf5c:	2400      	movs	r4, #0
 800cf5e:	46a0      	mov	r8, r4
 800cf60:	f240 1991 	movw	r9, #401	@ 0x191
 800cf64:	e008      	b.n	800cf78 <rclc_executor_spin_some.part.0+0x230>
 800cf66:	f7ff fab9 	bl	800c4dc <_rclc_check_for_new_data>
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	b108      	cbz	r0, 800cf72 <rclc_executor_spin_some.part.0+0x22a>
 800cf6e:	4548      	cmp	r0, r9
 800cf70:	d1ee      	bne.n	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800cf72:	68ab      	ldr	r3, [r5, #8]
 800cf74:	4598      	cmp	r8, r3
 800cf76:	d265      	bcs.n	800d044 <rclc_executor_spin_some.part.0+0x2fc>
 800cf78:	686a      	ldr	r2, [r5, #4]
 800cf7a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cf7e:	4631      	mov	r1, r6
 800cf80:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cf84:	f108 0801 	add.w	r8, r8, #1
 800cf88:	f1bc 0f00 	cmp.w	ip, #0
 800cf8c:	d1eb      	bne.n	800cf66 <rclc_executor_spin_some.part.0+0x21e>
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4610      	mov	r0, r2
 800cf92:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cf96:	4798      	blx	r3
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d0d9      	beq.n	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800cf9c:	68ab      	ldr	r3, [r5, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d0d6      	beq.n	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800cfa2:	f04f 0800 	mov.w	r8, #0
 800cfa6:	f240 1991 	movw	r9, #401	@ 0x191
 800cfaa:	f240 2a59 	movw	sl, #601	@ 0x259
 800cfae:	e00e      	b.n	800cfce <rclc_executor_spin_some.part.0+0x286>
 800cfb0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d033      	beq.n	800d020 <rclc_executor_spin_some.part.0+0x2d8>
 800cfb8:	2b09      	cmp	r3, #9
 800cfba:	d028      	beq.n	800d00e <rclc_executor_spin_some.part.0+0x2c6>
 800cfbc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cfc0:	b9fb      	cbnz	r3, 800d002 <rclc_executor_spin_some.part.0+0x2ba>
 800cfc2:	68ab      	ldr	r3, [r5, #8]
 800cfc4:	f108 0801 	add.w	r8, r8, #1
 800cfc8:	4598      	cmp	r8, r3
 800cfca:	d2b7      	bcs.n	800cf3c <rclc_executor_spin_some.part.0+0x1f4>
 800cfcc:	2400      	movs	r4, #0
 800cfce:	6868      	ldr	r0, [r5, #4]
 800cfd0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cfd4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cfd8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0b7      	beq.n	800cf50 <rclc_executor_spin_some.part.0+0x208>
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	f7ff fac9 	bl	800c578 <_rclc_take_new_data>
 800cfe6:	b118      	cbz	r0, 800cff0 <rclc_executor_spin_some.part.0+0x2a8>
 800cfe8:	4548      	cmp	r0, r9
 800cfea:	d001      	beq.n	800cff0 <rclc_executor_spin_some.part.0+0x2a8>
 800cfec:	4550      	cmp	r0, sl
 800cfee:	d10c      	bne.n	800d00a <rclc_executor_spin_some.part.0+0x2c2>
 800cff0:	686b      	ldr	r3, [r5, #4]
 800cff2:	eb13 000b 	adds.w	r0, r3, fp
 800cff6:	d021      	beq.n	800d03c <rclc_executor_spin_some.part.0+0x2f4>
 800cff8:	7842      	ldrb	r2, [r0, #1]
 800cffa:	2a00      	cmp	r2, #0
 800cffc:	d0d8      	beq.n	800cfb0 <rclc_executor_spin_some.part.0+0x268>
 800cffe:	2a01      	cmp	r2, #1
 800d000:	d1df      	bne.n	800cfc2 <rclc_executor_spin_some.part.0+0x27a>
 800d002:	f7ff fc2d 	bl	800c860 <_rclc_execute.part.0>
 800d006:	2800      	cmp	r0, #0
 800d008:	d0db      	beq.n	800cfc2 <rclc_executor_spin_some.part.0+0x27a>
 800d00a:	4607      	mov	r7, r0
 800d00c:	e796      	b.n	800cf3c <rclc_executor_spin_some.part.0+0x1f4>
 800d00e:	6843      	ldr	r3, [r0, #4]
 800d010:	6a1a      	ldr	r2, [r3, #32]
 800d012:	2a00      	cmp	r2, #0
 800d014:	d1f5      	bne.n	800d002 <rclc_executor_spin_some.part.0+0x2ba>
 800d016:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0d1      	beq.n	800cfc2 <rclc_executor_spin_some.part.0+0x27a>
 800d01e:	e7f0      	b.n	800d002 <rclc_executor_spin_some.part.0+0x2ba>
 800d020:	6843      	ldr	r3, [r0, #4]
 800d022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d024:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d028:	d1eb      	bne.n	800d002 <rclc_executor_spin_some.part.0+0x2ba>
 800d02a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d02e:	2a00      	cmp	r2, #0
 800d030:	d1e7      	bne.n	800d002 <rclc_executor_spin_some.part.0+0x2ba>
 800d032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0c3      	beq.n	800cfc2 <rclc_executor_spin_some.part.0+0x27a>
 800d03a:	e7e2      	b.n	800d002 <rclc_executor_spin_some.part.0+0x2ba>
 800d03c:	270b      	movs	r7, #11
 800d03e:	e77d      	b.n	800cf3c <rclc_executor_spin_some.part.0+0x1f4>
 800d040:	686a      	ldr	r2, [r5, #4]
 800d042:	e6e2      	b.n	800ce0a <rclc_executor_spin_some.part.0+0xc2>
 800d044:	686a      	ldr	r2, [r5, #4]
 800d046:	e7a2      	b.n	800cf8e <rclc_executor_spin_some.part.0+0x246>
 800d048:	6842      	ldr	r2, [r0, #4]
 800d04a:	6a11      	ldr	r1, [r2, #32]
 800d04c:	2900      	cmp	r1, #0
 800d04e:	f47f af21 	bne.w	800ce94 <rclc_executor_spin_some.part.0+0x14c>
 800d052:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d056:	2a00      	cmp	r2, #0
 800d058:	f43f af0a 	beq.w	800ce70 <rclc_executor_spin_some.part.0+0x128>
 800d05c:	e71a      	b.n	800ce94 <rclc_executor_spin_some.part.0+0x14c>
 800d05e:	6842      	ldr	r2, [r0, #4]
 800d060:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d062:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d066:	f47f af15 	bne.w	800ce94 <rclc_executor_spin_some.part.0+0x14c>
 800d06a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d06e:	2900      	cmp	r1, #0
 800d070:	f47f af10 	bne.w	800ce94 <rclc_executor_spin_some.part.0+0x14c>
 800d074:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d078:	2a00      	cmp	r2, #0
 800d07a:	f43f aef9 	beq.w	800ce70 <rclc_executor_spin_some.part.0+0x128>
 800d07e:	e709      	b.n	800ce94 <rclc_executor_spin_some.part.0+0x14c>
 800d080:	686a      	ldr	r2, [r5, #4]
 800d082:	461c      	mov	r4, r3
 800d084:	e783      	b.n	800cf8e <rclc_executor_spin_some.part.0+0x246>
 800d086:	686a      	ldr	r2, [r5, #4]
 800d088:	461c      	mov	r4, r3
 800d08a:	e6be      	b.n	800ce0a <rclc_executor_spin_some.part.0+0xc2>

0800d08c <rclc_executor_spin>:
 800d08c:	b1d0      	cbz	r0, 800d0c4 <rclc_executor_spin+0x38>
 800d08e:	b510      	push	{r4, lr}
 800d090:	4604      	mov	r4, r0
 800d092:	b082      	sub	sp, #8
 800d094:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	e9cd 2300 	strd	r2, r3, [sp]
 800d09e:	f004 ff9f 	bl	8011fe0 <rcl_context_is_valid>
 800d0a2:	4601      	mov	r1, r0
 800d0a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	b131      	cbz	r1, 800d0ba <rclc_executor_spin+0x2e>
 800d0ac:	f7ff fe4c 	bl	800cd48 <rclc_executor_spin_some.part.0>
 800d0b0:	f030 0302 	bics.w	r3, r0, #2
 800d0b4:	d0ee      	beq.n	800d094 <rclc_executor_spin+0x8>
 800d0b6:	b002      	add	sp, #8
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	f000 f965 	bl	800d388 <rcutils_reset_error>
 800d0be:	2001      	movs	r0, #1
 800d0c0:	b002      	add	sp, #8
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	200b      	movs	r0, #11
 800d0c6:	4770      	bx	lr

0800d0c8 <rclc_executor_handle_counters_zero_init>:
 800d0c8:	b130      	cbz	r0, 800d0d8 <rclc_executor_handle_counters_zero_init+0x10>
 800d0ca:	b508      	push	{r3, lr}
 800d0cc:	2220      	movs	r2, #32
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	f00a fd72 	bl	8017bb8 <memset>
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	bd08      	pop	{r3, pc}
 800d0d8:	200b      	movs	r0, #11
 800d0da:	4770      	bx	lr
 800d0dc:	0000      	movs	r0, r0
	...

0800d0e0 <rclc_executor_handle_init>:
 800d0e0:	b168      	cbz	r0, 800d0fe <rclc_executor_handle_init+0x1e>
 800d0e2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d108 <rclc_executor_handle_init+0x28>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	220b      	movs	r2, #11
 800d0ea:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d0ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d0f2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d0f6:	8002      	strh	r2, [r0, #0]
 800d0f8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	4770      	bx	lr
 800d0fe:	200b      	movs	r0, #11
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	f3af 8000 	nop.w
	...

0800d110 <rclc_support_init_with_options>:
 800d110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d114:	b083      	sub	sp, #12
 800d116:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d118:	b340      	cbz	r0, 800d16c <rclc_support_init_with_options+0x5c>
 800d11a:	461d      	mov	r5, r3
 800d11c:	b333      	cbz	r3, 800d16c <rclc_support_init_with_options+0x5c>
 800d11e:	b32e      	cbz	r6, 800d16c <rclc_support_init_with_options+0x5c>
 800d120:	46e9      	mov	r9, sp
 800d122:	4604      	mov	r4, r0
 800d124:	4648      	mov	r0, r9
 800d126:	460f      	mov	r7, r1
 800d128:	4690      	mov	r8, r2
 800d12a:	f004 ff4f 	bl	8011fcc <rcl_get_zero_initialized_context>
 800d12e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d132:	462a      	mov	r2, r5
 800d134:	e884 0003 	stmia.w	r4, {r0, r1}
 800d138:	4623      	mov	r3, r4
 800d13a:	4641      	mov	r1, r8
 800d13c:	4638      	mov	r0, r7
 800d13e:	f004 ffb5 	bl	80120ac <rcl_init>
 800d142:	4605      	mov	r5, r0
 800d144:	b960      	cbnz	r0, 800d160 <rclc_support_init_with_options+0x50>
 800d146:	60a6      	str	r6, [r4, #8]
 800d148:	4632      	mov	r2, r6
 800d14a:	f104 010c 	add.w	r1, r4, #12
 800d14e:	2003      	movs	r0, #3
 800d150:	f005 fd02 	bl	8012b58 <rcl_clock_init>
 800d154:	4605      	mov	r5, r0
 800d156:	b918      	cbnz	r0, 800d160 <rclc_support_init_with_options+0x50>
 800d158:	4628      	mov	r0, r5
 800d15a:	b003      	add	sp, #12
 800d15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d160:	f000 f912 	bl	800d388 <rcutils_reset_error>
 800d164:	4628      	mov	r0, r5
 800d166:	b003      	add	sp, #12
 800d168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d16c:	250b      	movs	r5, #11
 800d16e:	4628      	mov	r0, r5
 800d170:	b003      	add	sp, #12
 800d172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d176:	bf00      	nop

0800d178 <rclc_node_init_default>:
 800d178:	b3b8      	cbz	r0, 800d1ea <rclc_node_init_default+0x72>
 800d17a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d17e:	460d      	mov	r5, r1
 800d180:	b0a1      	sub	sp, #132	@ 0x84
 800d182:	b329      	cbz	r1, 800d1d0 <rclc_node_init_default+0x58>
 800d184:	4616      	mov	r6, r2
 800d186:	b31a      	cbz	r2, 800d1d0 <rclc_node_init_default+0x58>
 800d188:	461f      	mov	r7, r3
 800d18a:	b30b      	cbz	r3, 800d1d0 <rclc_node_init_default+0x58>
 800d18c:	f10d 0810 	add.w	r8, sp, #16
 800d190:	4604      	mov	r4, r0
 800d192:	4640      	mov	r0, r8
 800d194:	f005 f8b0 	bl	80122f8 <rcl_get_zero_initialized_node>
 800d198:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d19c:	f10d 0918 	add.w	r9, sp, #24
 800d1a0:	e884 0003 	stmia.w	r4, {r0, r1}
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	f005 fa1f 	bl	80125e8 <rcl_node_get_default_options>
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	f005 f8a4 	bl	80122f8 <rcl_get_zero_initialized_node>
 800d1b0:	f8cd 9000 	str.w	r9, [sp]
 800d1b4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d1b8:	463b      	mov	r3, r7
 800d1ba:	e884 0003 	stmia.w	r4, {r0, r1}
 800d1be:	4632      	mov	r2, r6
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f005 f8a2 	bl	801230c <rcl_node_init>
 800d1c8:	b930      	cbnz	r0, 800d1d8 <rclc_node_init_default+0x60>
 800d1ca:	b021      	add	sp, #132	@ 0x84
 800d1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d0:	200b      	movs	r0, #11
 800d1d2:	b021      	add	sp, #132	@ 0x84
 800d1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d8:	9003      	str	r0, [sp, #12]
 800d1da:	f000 f8d5 	bl	800d388 <rcutils_reset_error>
 800d1de:	f000 f8d3 	bl	800d388 <rcutils_reset_error>
 800d1e2:	9803      	ldr	r0, [sp, #12]
 800d1e4:	b021      	add	sp, #132	@ 0x84
 800d1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ea:	200b      	movs	r0, #11
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop

0800d1f0 <rclc_publisher_init_default>:
 800d1f0:	b368      	cbz	r0, 800d24e <rclc_publisher_init_default+0x5e>
 800d1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f6:	460d      	mov	r5, r1
 800d1f8:	b0a0      	sub	sp, #128	@ 0x80
 800d1fa:	b321      	cbz	r1, 800d246 <rclc_publisher_init_default+0x56>
 800d1fc:	4616      	mov	r6, r2
 800d1fe:	b312      	cbz	r2, 800d246 <rclc_publisher_init_default+0x56>
 800d200:	461f      	mov	r7, r3
 800d202:	b303      	cbz	r3, 800d246 <rclc_publisher_init_default+0x56>
 800d204:	4604      	mov	r4, r0
 800d206:	f7ff f859 	bl	800c2bc <rcl_get_zero_initialized_publisher>
 800d20a:	f10d 0810 	add.w	r8, sp, #16
 800d20e:	6020      	str	r0, [r4, #0]
 800d210:	4640      	mov	r0, r8
 800d212:	f7ff f8ef 	bl	800c3f4 <rcl_publisher_get_default_options>
 800d216:	490f      	ldr	r1, [pc, #60]	@ (800d254 <rclc_publisher_init_default+0x64>)
 800d218:	2250      	movs	r2, #80	@ 0x50
 800d21a:	4640      	mov	r0, r8
 800d21c:	f00a fd95 	bl	8017d4a <memcpy>
 800d220:	f8cd 8000 	str.w	r8, [sp]
 800d224:	463b      	mov	r3, r7
 800d226:	4632      	mov	r2, r6
 800d228:	4629      	mov	r1, r5
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7ff f84c 	bl	800c2c8 <rcl_publisher_init>
 800d230:	b910      	cbnz	r0, 800d238 <rclc_publisher_init_default+0x48>
 800d232:	b020      	add	sp, #128	@ 0x80
 800d234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d238:	9003      	str	r0, [sp, #12]
 800d23a:	f000 f8a5 	bl	800d388 <rcutils_reset_error>
 800d23e:	9803      	ldr	r0, [sp, #12]
 800d240:	b020      	add	sp, #128	@ 0x80
 800d242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d246:	200b      	movs	r0, #11
 800d248:	b020      	add	sp, #128	@ 0x80
 800d24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24e:	200b      	movs	r0, #11
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	08018e98 	.word	0x08018e98

0800d258 <rclc_timer_init_default>:
 800d258:	b360      	cbz	r0, 800d2b4 <rclc_timer_init_default+0x5c>
 800d25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d25e:	460e      	mov	r6, r1
 800d260:	b08a      	sub	sp, #40	@ 0x28
 800d262:	b319      	cbz	r1, 800d2ac <rclc_timer_init_default+0x54>
 800d264:	4690      	mov	r8, r2
 800d266:	461f      	mov	r7, r3
 800d268:	4605      	mov	r5, r0
 800d26a:	f005 fe53 	bl	8012f14 <rcl_get_zero_initialized_timer>
 800d26e:	68b4      	ldr	r4, [r6, #8]
 800d270:	6028      	str	r0, [r5, #0]
 800d272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d274:	f10d 0c0c 	add.w	ip, sp, #12
 800d278:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d27c:	6823      	ldr	r3, [r4, #0]
 800d27e:	f8cc 3000 	str.w	r3, [ip]
 800d282:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d284:	9302      	str	r3, [sp, #8]
 800d286:	e9cd 8700 	strd	r8, r7, [sp]
 800d28a:	4628      	mov	r0, r5
 800d28c:	4632      	mov	r2, r6
 800d28e:	f106 010c 	add.w	r1, r6, #12
 800d292:	f005 fe45 	bl	8012f20 <rcl_timer_init>
 800d296:	b910      	cbnz	r0, 800d29e <rclc_timer_init_default+0x46>
 800d298:	b00a      	add	sp, #40	@ 0x28
 800d29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29e:	9009      	str	r0, [sp, #36]	@ 0x24
 800d2a0:	f000 f872 	bl	800d388 <rcutils_reset_error>
 800d2a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2a6:	b00a      	add	sp, #40	@ 0x28
 800d2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ac:	200b      	movs	r0, #11
 800d2ae:	b00a      	add	sp, #40	@ 0x28
 800d2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b4:	200b      	movs	r0, #11
 800d2b6:	4770      	bx	lr

0800d2b8 <__default_zero_allocate>:
 800d2b8:	f00a b894 	b.w	80173e4 <calloc>

0800d2bc <__default_reallocate>:
 800d2bc:	f00a ba20 	b.w	8017700 <realloc>

0800d2c0 <__default_deallocate>:
 800d2c0:	f00a b8fc 	b.w	80174bc <free>

0800d2c4 <__default_allocate>:
 800d2c4:	f00a b8f2 	b.w	80174ac <malloc>

0800d2c8 <rcutils_get_zero_initialized_allocator>:
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	4c05      	ldr	r4, [pc, #20]	@ (800d2e0 <rcutils_get_zero_initialized_allocator+0x18>)
 800d2cc:	4686      	mov	lr, r0
 800d2ce:	4684      	mov	ip, r0
 800d2d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	f8cc 3000 	str.w	r3, [ip]
 800d2dc:	4670      	mov	r0, lr
 800d2de:	bd10      	pop	{r4, pc}
 800d2e0:	08018ee8 	.word	0x08018ee8

0800d2e4 <rcutils_set_default_allocator>:
 800d2e4:	b1a8      	cbz	r0, 800d312 <rcutils_set_default_allocator+0x2e>
 800d2e6:	6802      	ldr	r2, [r0, #0]
 800d2e8:	b1a2      	cbz	r2, 800d314 <rcutils_set_default_allocator+0x30>
 800d2ea:	6841      	ldr	r1, [r0, #4]
 800d2ec:	b1a1      	cbz	r1, 800d318 <rcutils_set_default_allocator+0x34>
 800d2ee:	b410      	push	{r4}
 800d2f0:	68c4      	ldr	r4, [r0, #12]
 800d2f2:	b164      	cbz	r4, 800d30e <rcutils_set_default_allocator+0x2a>
 800d2f4:	6880      	ldr	r0, [r0, #8]
 800d2f6:	b138      	cbz	r0, 800d308 <rcutils_set_default_allocator+0x24>
 800d2f8:	4b08      	ldr	r3, [pc, #32]	@ (800d31c <rcutils_set_default_allocator+0x38>)
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d302:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d306:	2001      	movs	r0, #1
 800d308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	4620      	mov	r0, r4
 800d310:	e7fa      	b.n	800d308 <rcutils_set_default_allocator+0x24>
 800d312:	4770      	bx	lr
 800d314:	4610      	mov	r0, r2
 800d316:	4770      	bx	lr
 800d318:	4608      	mov	r0, r1
 800d31a:	4770      	bx	lr
 800d31c:	200001bc 	.word	0x200001bc

0800d320 <rcutils_get_default_allocator>:
 800d320:	b510      	push	{r4, lr}
 800d322:	4c05      	ldr	r4, [pc, #20]	@ (800d338 <rcutils_get_default_allocator+0x18>)
 800d324:	4686      	mov	lr, r0
 800d326:	4684      	mov	ip, r0
 800d328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d32a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	f8cc 3000 	str.w	r3, [ip]
 800d334:	4670      	mov	r0, lr
 800d336:	bd10      	pop	{r4, pc}
 800d338:	200001bc 	.word	0x200001bc

0800d33c <rcutils_allocator_is_valid>:
 800d33c:	b158      	cbz	r0, 800d356 <rcutils_allocator_is_valid+0x1a>
 800d33e:	6803      	ldr	r3, [r0, #0]
 800d340:	b143      	cbz	r3, 800d354 <rcutils_allocator_is_valid+0x18>
 800d342:	6843      	ldr	r3, [r0, #4]
 800d344:	b133      	cbz	r3, 800d354 <rcutils_allocator_is_valid+0x18>
 800d346:	68c3      	ldr	r3, [r0, #12]
 800d348:	b123      	cbz	r3, 800d354 <rcutils_allocator_is_valid+0x18>
 800d34a:	6880      	ldr	r0, [r0, #8]
 800d34c:	3800      	subs	r0, #0
 800d34e:	bf18      	it	ne
 800d350:	2001      	movne	r0, #1
 800d352:	4770      	bx	lr
 800d354:	4618      	mov	r0, r3
 800d356:	4770      	bx	lr

0800d358 <rcutils_get_error_string>:
 800d358:	4b06      	ldr	r3, [pc, #24]	@ (800d374 <rcutils_get_error_string+0x1c>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b13b      	cbz	r3, 800d36e <rcutils_get_error_string+0x16>
 800d35e:	4b06      	ldr	r3, [pc, #24]	@ (800d378 <rcutils_get_error_string+0x20>)
 800d360:	781a      	ldrb	r2, [r3, #0]
 800d362:	b90a      	cbnz	r2, 800d368 <rcutils_get_error_string+0x10>
 800d364:	2201      	movs	r2, #1
 800d366:	701a      	strb	r2, [r3, #0]
 800d368:	4b04      	ldr	r3, [pc, #16]	@ (800d37c <rcutils_get_error_string+0x24>)
 800d36a:	7818      	ldrb	r0, [r3, #0]
 800d36c:	4770      	bx	lr
 800d36e:	4b04      	ldr	r3, [pc, #16]	@ (800d380 <rcutils_get_error_string+0x28>)
 800d370:	7818      	ldrb	r0, [r3, #0]
 800d372:	4770      	bx	lr
 800d374:	200064a8 	.word	0x200064a8
 800d378:	200064c1 	.word	0x200064c1
 800d37c:	200064c0 	.word	0x200064c0
 800d380:	08018efc 	.word	0x08018efc
 800d384:	00000000 	.word	0x00000000

0800d388 <rcutils_reset_error>:
 800d388:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d3a8 <rcutils_reset_error+0x20>
 800d38c:	4a08      	ldr	r2, [pc, #32]	@ (800d3b0 <rcutils_reset_error+0x28>)
 800d38e:	4809      	ldr	r0, [pc, #36]	@ (800d3b4 <rcutils_reset_error+0x2c>)
 800d390:	4909      	ldr	r1, [pc, #36]	@ (800d3b8 <rcutils_reset_error+0x30>)
 800d392:	2300      	movs	r3, #0
 800d394:	8013      	strh	r3, [r2, #0]
 800d396:	ed82 7b02 	vstr	d7, [r2, #8]
 800d39a:	4a08      	ldr	r2, [pc, #32]	@ (800d3bc <rcutils_reset_error+0x34>)
 800d39c:	7003      	strb	r3, [r0, #0]
 800d39e:	700b      	strb	r3, [r1, #0]
 800d3a0:	7013      	strb	r3, [r2, #0]
 800d3a2:	4770      	bx	lr
 800d3a4:	f3af 8000 	nop.w
	...
 800d3b0:	200064b0 	.word	0x200064b0
 800d3b4:	200064c1 	.word	0x200064c1
 800d3b8:	200064c0 	.word	0x200064c0
 800d3bc:	200064a8 	.word	0x200064a8

0800d3c0 <rcutils_system_time_now>:
 800d3c0:	b308      	cbz	r0, 800d406 <rcutils_system_time_now+0x46>
 800d3c2:	b570      	push	{r4, r5, r6, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4669      	mov	r1, sp
 800d3ca:	2001      	movs	r0, #1
 800d3cc:	f7f4 fb18 	bl	8001a00 <clock_gettime>
 800d3d0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d3d4:	2d00      	cmp	r5, #0
 800d3d6:	db13      	blt.n	800d400 <rcutils_system_time_now+0x40>
 800d3d8:	9902      	ldr	r1, [sp, #8]
 800d3da:	2900      	cmp	r1, #0
 800d3dc:	db0d      	blt.n	800d3fa <rcutils_system_time_now+0x3a>
 800d3de:	4e0b      	ldr	r6, [pc, #44]	@ (800d40c <rcutils_system_time_now+0x4c>)
 800d3e0:	fba3 3206 	umull	r3, r2, r3, r6
 800d3e4:	185b      	adds	r3, r3, r1
 800d3e6:	fb06 2205 	mla	r2, r6, r5, r2
 800d3ea:	f04f 0000 	mov.w	r0, #0
 800d3ee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d3f2:	e9c4 3200 	strd	r3, r2, [r4]
 800d3f6:	b004      	add	sp, #16
 800d3f8:	bd70      	pop	{r4, r5, r6, pc}
 800d3fa:	ea53 0205 	orrs.w	r2, r3, r5
 800d3fe:	d1ee      	bne.n	800d3de <rcutils_system_time_now+0x1e>
 800d400:	2002      	movs	r0, #2
 800d402:	b004      	add	sp, #16
 800d404:	bd70      	pop	{r4, r5, r6, pc}
 800d406:	200b      	movs	r0, #11
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	3b9aca00 	.word	0x3b9aca00

0800d410 <rcutils_steady_time_now>:
 800d410:	b308      	cbz	r0, 800d456 <rcutils_steady_time_now+0x46>
 800d412:	b570      	push	{r4, r5, r6, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	4604      	mov	r4, r0
 800d418:	4669      	mov	r1, sp
 800d41a:	2000      	movs	r0, #0
 800d41c:	f7f4 faf0 	bl	8001a00 <clock_gettime>
 800d420:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d424:	2d00      	cmp	r5, #0
 800d426:	db13      	blt.n	800d450 <rcutils_steady_time_now+0x40>
 800d428:	9902      	ldr	r1, [sp, #8]
 800d42a:	2900      	cmp	r1, #0
 800d42c:	db0d      	blt.n	800d44a <rcutils_steady_time_now+0x3a>
 800d42e:	4e0b      	ldr	r6, [pc, #44]	@ (800d45c <rcutils_steady_time_now+0x4c>)
 800d430:	fba3 3206 	umull	r3, r2, r3, r6
 800d434:	185b      	adds	r3, r3, r1
 800d436:	fb06 2205 	mla	r2, r6, r5, r2
 800d43a:	f04f 0000 	mov.w	r0, #0
 800d43e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d442:	e9c4 3200 	strd	r3, r2, [r4]
 800d446:	b004      	add	sp, #16
 800d448:	bd70      	pop	{r4, r5, r6, pc}
 800d44a:	ea53 0205 	orrs.w	r2, r3, r5
 800d44e:	d1ee      	bne.n	800d42e <rcutils_steady_time_now+0x1e>
 800d450:	2002      	movs	r0, #2
 800d452:	b004      	add	sp, #16
 800d454:	bd70      	pop	{r4, r5, r6, pc}
 800d456:	200b      	movs	r0, #11
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	3b9aca00 	.word	0x3b9aca00

0800d460 <rmw_get_zero_initialized_init_options>:
 800d460:	b510      	push	{r4, lr}
 800d462:	2238      	movs	r2, #56	@ 0x38
 800d464:	4604      	mov	r4, r0
 800d466:	2100      	movs	r1, #0
 800d468:	f00a fba6 	bl	8017bb8 <memset>
 800d46c:	f104 0010 	add.w	r0, r4, #16
 800d470:	f000 f80a 	bl	800d488 <rmw_get_default_security_options>
 800d474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d478:	60e3      	str	r3, [r4, #12]
 800d47a:	4620      	mov	r0, r4
 800d47c:	bd10      	pop	{r4, pc}
 800d47e:	bf00      	nop

0800d480 <rmw_get_default_publisher_options>:
 800d480:	2200      	movs	r2, #0
 800d482:	6002      	str	r2, [r0, #0]
 800d484:	7102      	strb	r2, [r0, #4]
 800d486:	4770      	bx	lr

0800d488 <rmw_get_default_security_options>:
 800d488:	2200      	movs	r2, #0
 800d48a:	7002      	strb	r2, [r0, #0]
 800d48c:	6042      	str	r2, [r0, #4]
 800d48e:	4770      	bx	lr

0800d490 <rmw_uros_set_custom_transport>:
 800d490:	b470      	push	{r4, r5, r6}
 800d492:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d496:	b162      	cbz	r2, 800d4b2 <rmw_uros_set_custom_transport+0x22>
 800d498:	b15b      	cbz	r3, 800d4b2 <rmw_uros_set_custom_transport+0x22>
 800d49a:	b155      	cbz	r5, 800d4b2 <rmw_uros_set_custom_transport+0x22>
 800d49c:	b14e      	cbz	r6, 800d4b2 <rmw_uros_set_custom_transport+0x22>
 800d49e:	4c06      	ldr	r4, [pc, #24]	@ (800d4b8 <rmw_uros_set_custom_transport+0x28>)
 800d4a0:	7020      	strb	r0, [r4, #0]
 800d4a2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d4a6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d4aa:	6166      	str	r6, [r4, #20]
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	bc70      	pop	{r4, r5, r6}
 800d4b0:	4770      	bx	lr
 800d4b2:	200b      	movs	r0, #11
 800d4b4:	bc70      	pop	{r4, r5, r6}
 800d4b6:	4770      	bx	lr
 800d4b8:	200064c4 	.word	0x200064c4

0800d4bc <rmw_init_options_init>:
 800d4bc:	b084      	sub	sp, #16
 800d4be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	ad09      	add	r5, sp, #36	@ 0x24
 800d4c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d4c8:	b130      	cbz	r0, 800d4d8 <rmw_init_options_init+0x1c>
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	f7ff ff35 	bl	800d33c <rcutils_allocator_is_valid>
 800d4d2:	b108      	cbz	r0, 800d4d8 <rmw_init_options_init+0x1c>
 800d4d4:	68a6      	ldr	r6, [r4, #8]
 800d4d6:	b12e      	cbz	r6, 800d4e4 <rmw_init_options_init+0x28>
 800d4d8:	200b      	movs	r0, #11
 800d4da:	b003      	add	sp, #12
 800d4dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d4e0:	b004      	add	sp, #16
 800d4e2:	4770      	bx	lr
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	e9c4 2300 	strd	r2, r3, [r4]
 800d4ec:	4b22      	ldr	r3, [pc, #136]	@ (800d578 <rmw_init_options_init+0xbc>)
 800d4ee:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d588 <rmw_init_options_init+0xcc>
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	60a3      	str	r3, [r4, #8]
 800d4f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4f8:	f104 0c20 	add.w	ip, r4, #32
 800d4fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d500:	466f      	mov	r7, sp
 800d502:	682b      	ldr	r3, [r5, #0]
 800d504:	f8cc 3000 	str.w	r3, [ip]
 800d508:	4638      	mov	r0, r7
 800d50a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d50e:	60e6      	str	r6, [r4, #12]
 800d510:	f7ff ffba 	bl	800d488 <rmw_get_default_security_options>
 800d514:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d518:	f104 0310 	add.w	r3, r4, #16
 800d51c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d520:	2203      	movs	r2, #3
 800d522:	4816      	ldr	r0, [pc, #88]	@ (800d57c <rmw_init_options_init+0xc0>)
 800d524:	4916      	ldr	r1, [pc, #88]	@ (800d580 <rmw_init_options_init+0xc4>)
 800d526:	7626      	strb	r6, [r4, #24]
 800d528:	f000 fe9c 	bl	800e264 <rmw_uxrce_init_init_options_impl_memory>
 800d52c:	4813      	ldr	r0, [pc, #76]	@ (800d57c <rmw_init_options_init+0xc0>)
 800d52e:	f008 f87b 	bl	8015628 <get_memory>
 800d532:	b1f0      	cbz	r0, 800d572 <rmw_init_options_init+0xb6>
 800d534:	4a13      	ldr	r2, [pc, #76]	@ (800d584 <rmw_init_options_init+0xc8>)
 800d536:	6883      	ldr	r3, [r0, #8]
 800d538:	6851      	ldr	r1, [r2, #4]
 800d53a:	7810      	ldrb	r0, [r2, #0]
 800d53c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d53e:	7418      	strb	r0, [r3, #16]
 800d540:	6159      	str	r1, [r3, #20]
 800d542:	68d1      	ldr	r1, [r2, #12]
 800d544:	61d9      	str	r1, [r3, #28]
 800d546:	6911      	ldr	r1, [r2, #16]
 800d548:	6219      	str	r1, [r3, #32]
 800d54a:	6951      	ldr	r1, [r2, #20]
 800d54c:	6892      	ldr	r2, [r2, #8]
 800d54e:	619a      	str	r2, [r3, #24]
 800d550:	6259      	str	r1, [r3, #36]	@ 0x24
 800d552:	f003 fb5b 	bl	8010c0c <uxr_nanos>
 800d556:	f00a f867 	bl	8017628 <srand>
 800d55a:	f00a f893 	bl	8017684 <rand>
 800d55e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d560:	6298      	str	r0, [r3, #40]	@ 0x28
 800d562:	2800      	cmp	r0, #0
 800d564:	d0f9      	beq.n	800d55a <rmw_init_options_init+0x9e>
 800d566:	2000      	movs	r0, #0
 800d568:	b003      	add	sp, #12
 800d56a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d56e:	b004      	add	sp, #16
 800d570:	4770      	bx	lr
 800d572:	2001      	movs	r0, #1
 800d574:	e7b1      	b.n	800d4da <rmw_init_options_init+0x1e>
 800d576:	bf00      	nop
 800d578:	080196a8 	.word	0x080196a8
 800d57c:	2000addc 	.word	0x2000addc
 800d580:	20006678 	.word	0x20006678
 800d584:	200064c4 	.word	0x200064c4
 800d588:	08018f00 	.word	0x08018f00

0800d58c <rmw_init_options_copy>:
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	b158      	cbz	r0, 800d5a8 <rmw_init_options_copy+0x1c>
 800d590:	460d      	mov	r5, r1
 800d592:	b149      	cbz	r1, 800d5a8 <rmw_init_options_copy+0x1c>
 800d594:	4604      	mov	r4, r0
 800d596:	6880      	ldr	r0, [r0, #8]
 800d598:	b120      	cbz	r0, 800d5a4 <rmw_init_options_copy+0x18>
 800d59a:	4b1e      	ldr	r3, [pc, #120]	@ (800d614 <rmw_init_options_copy+0x88>)
 800d59c:	6819      	ldr	r1, [r3, #0]
 800d59e:	f7f2 fe3f 	bl	8000220 <strcmp>
 800d5a2:	bb90      	cbnz	r0, 800d60a <rmw_init_options_copy+0x7e>
 800d5a4:	68ab      	ldr	r3, [r5, #8]
 800d5a6:	b113      	cbz	r3, 800d5ae <rmw_init_options_copy+0x22>
 800d5a8:	250b      	movs	r5, #11
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}
 800d5ae:	4623      	mov	r3, r4
 800d5b0:	462a      	mov	r2, r5
 800d5b2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d5b6:	f8d3 c000 	ldr.w	ip, [r3]
 800d5ba:	6858      	ldr	r0, [r3, #4]
 800d5bc:	6899      	ldr	r1, [r3, #8]
 800d5be:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d5c2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d5c6:	3310      	adds	r3, #16
 800d5c8:	42b3      	cmp	r3, r6
 800d5ca:	f8c2 c000 	str.w	ip, [r2]
 800d5ce:	6050      	str	r0, [r2, #4]
 800d5d0:	6091      	str	r1, [r2, #8]
 800d5d2:	f102 0210 	add.w	r2, r2, #16
 800d5d6:	d1ee      	bne.n	800d5b6 <rmw_init_options_copy+0x2a>
 800d5d8:	6819      	ldr	r1, [r3, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	480e      	ldr	r0, [pc, #56]	@ (800d618 <rmw_init_options_copy+0x8c>)
 800d5de:	6053      	str	r3, [r2, #4]
 800d5e0:	6011      	str	r1, [r2, #0]
 800d5e2:	f008 f821 	bl	8015628 <get_memory>
 800d5e6:	b198      	cbz	r0, 800d610 <rmw_init_options_copy+0x84>
 800d5e8:	6883      	ldr	r3, [r0, #8]
 800d5ea:	636b      	str	r3, [r5, #52]	@ 0x34
 800d5ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d5ee:	f102 0c10 	add.w	ip, r2, #16
 800d5f2:	f103 0410 	add.w	r4, r3, #16
 800d5f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5fc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d600:	2500      	movs	r5, #0
 800d602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d606:	4628      	mov	r0, r5
 800d608:	bd70      	pop	{r4, r5, r6, pc}
 800d60a:	250c      	movs	r5, #12
 800d60c:	4628      	mov	r0, r5
 800d60e:	bd70      	pop	{r4, r5, r6, pc}
 800d610:	2501      	movs	r5, #1
 800d612:	e7ca      	b.n	800d5aa <rmw_init_options_copy+0x1e>
 800d614:	080196a8 	.word	0x080196a8
 800d618:	2000addc 	.word	0x2000addc

0800d61c <rmw_init_options_fini>:
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d03d      	beq.n	800d69c <rmw_init_options_fini+0x80>
 800d620:	b510      	push	{r4, lr}
 800d622:	4604      	mov	r4, r0
 800d624:	b08e      	sub	sp, #56	@ 0x38
 800d626:	3020      	adds	r0, #32
 800d628:	f7ff fe88 	bl	800d33c <rcutils_allocator_is_valid>
 800d62c:	b360      	cbz	r0, 800d688 <rmw_init_options_fini+0x6c>
 800d62e:	68a0      	ldr	r0, [r4, #8]
 800d630:	b120      	cbz	r0, 800d63c <rmw_init_options_fini+0x20>
 800d632:	4b1c      	ldr	r3, [pc, #112]	@ (800d6a4 <rmw_init_options_fini+0x88>)
 800d634:	6819      	ldr	r1, [r3, #0]
 800d636:	f7f2 fdf3 	bl	8000220 <strcmp>
 800d63a:	bb68      	cbnz	r0, 800d698 <rmw_init_options_fini+0x7c>
 800d63c:	4b1a      	ldr	r3, [pc, #104]	@ (800d6a8 <rmw_init_options_fini+0x8c>)
 800d63e:	6819      	ldr	r1, [r3, #0]
 800d640:	b331      	cbz	r1, 800d690 <rmw_init_options_fini+0x74>
 800d642:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d644:	e001      	b.n	800d64a <rmw_init_options_fini+0x2e>
 800d646:	6849      	ldr	r1, [r1, #4]
 800d648:	b311      	cbz	r1, 800d690 <rmw_init_options_fini+0x74>
 800d64a:	688b      	ldr	r3, [r1, #8]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d1fa      	bne.n	800d646 <rmw_init_options_fini+0x2a>
 800d650:	4815      	ldr	r0, [pc, #84]	@ (800d6a8 <rmw_init_options_fini+0x8c>)
 800d652:	f007 fff9 	bl	8015648 <put_memory>
 800d656:	4668      	mov	r0, sp
 800d658:	f7ff ff02 	bl	800d460 <rmw_get_zero_initialized_init_options>
 800d65c:	46ee      	mov	lr, sp
 800d65e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d662:	46a4      	mov	ip, r4
 800d664:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d668:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d66c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d670:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d678:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d67c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d680:	2300      	movs	r3, #0
 800d682:	4618      	mov	r0, r3
 800d684:	b00e      	add	sp, #56	@ 0x38
 800d686:	bd10      	pop	{r4, pc}
 800d688:	230b      	movs	r3, #11
 800d68a:	4618      	mov	r0, r3
 800d68c:	b00e      	add	sp, #56	@ 0x38
 800d68e:	bd10      	pop	{r4, pc}
 800d690:	2301      	movs	r3, #1
 800d692:	4618      	mov	r0, r3
 800d694:	b00e      	add	sp, #56	@ 0x38
 800d696:	bd10      	pop	{r4, pc}
 800d698:	230c      	movs	r3, #12
 800d69a:	e7f2      	b.n	800d682 <rmw_init_options_fini+0x66>
 800d69c:	230b      	movs	r3, #11
 800d69e:	4618      	mov	r0, r3
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	080196a8 	.word	0x080196a8
 800d6a8:	2000addc 	.word	0x2000addc

0800d6ac <rmw_init>:
 800d6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6b0:	b083      	sub	sp, #12
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	f000 80d3 	beq.w	800d85e <rmw_init+0x1b2>
 800d6b8:	460e      	mov	r6, r1
 800d6ba:	2900      	cmp	r1, #0
 800d6bc:	f000 80cf 	beq.w	800d85e <rmw_init+0x1b2>
 800d6c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	f000 80ca 	beq.w	800d85e <rmw_init+0x1b2>
 800d6ca:	4b78      	ldr	r3, [pc, #480]	@ (800d8ac <rmw_init+0x200>)
 800d6cc:	6880      	ldr	r0, [r0, #8]
 800d6ce:	681f      	ldr	r7, [r3, #0]
 800d6d0:	b128      	cbz	r0, 800d6de <rmw_init+0x32>
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	f7f2 fda4 	bl	8000220 <strcmp>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	f040 80ca 	bne.w	800d872 <rmw_init+0x1c6>
 800d6de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6e2:	4c73      	ldr	r4, [pc, #460]	@ (800d8b0 <rmw_init+0x204>)
 800d6e4:	4973      	ldr	r1, [pc, #460]	@ (800d8b4 <rmw_init+0x208>)
 800d6e6:	4874      	ldr	r0, [pc, #464]	@ (800d8b8 <rmw_init+0x20c>)
 800d6e8:	60b7      	str	r7, [r6, #8]
 800d6ea:	e9c6 2300 	strd	r2, r3, [r6]
 800d6ee:	68eb      	ldr	r3, [r5, #12]
 800d6f0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f000 fd56 	bl	800e1a4 <rmw_uxrce_init_session_memory>
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	4970      	ldr	r1, [pc, #448]	@ (800d8bc <rmw_init+0x210>)
 800d6fc:	2204      	movs	r2, #4
 800d6fe:	f000 fd91 	bl	800e224 <rmw_uxrce_init_static_input_buffer_memory>
 800d702:	f04f 0800 	mov.w	r8, #0
 800d706:	486c      	ldr	r0, [pc, #432]	@ (800d8b8 <rmw_init+0x20c>)
 800d708:	f884 800d 	strb.w	r8, [r4, #13]
 800d70c:	f007 ff8c 	bl	8015628 <get_memory>
 800d710:	2800      	cmp	r0, #0
 800d712:	f000 80a9 	beq.w	800d868 <rmw_init+0x1bc>
 800d716:	6884      	ldr	r4, [r0, #8]
 800d718:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d71a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d71c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d720:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d724:	9101      	str	r1, [sp, #4]
 800d726:	6a00      	ldr	r0, [r0, #32]
 800d728:	9000      	str	r0, [sp, #0]
 800d72a:	f104 0910 	add.w	r9, r4, #16
 800d72e:	4661      	mov	r1, ip
 800d730:	4648      	mov	r0, r9
 800d732:	f001 fa43 	bl	800ebbc <uxr_set_custom_transport_callbacks>
 800d736:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d73a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d73e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d742:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d746:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d74a:	495d      	ldr	r1, [pc, #372]	@ (800d8c0 <rmw_init+0x214>)
 800d74c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d750:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d754:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d758:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d75c:	4859      	ldr	r0, [pc, #356]	@ (800d8c4 <rmw_init+0x218>)
 800d75e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d762:	2201      	movs	r2, #1
 800d764:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d766:	f000 fcfd 	bl	800e164 <rmw_uxrce_init_node_memory>
 800d76a:	4957      	ldr	r1, [pc, #348]	@ (800d8c8 <rmw_init+0x21c>)
 800d76c:	4857      	ldr	r0, [pc, #348]	@ (800d8cc <rmw_init+0x220>)
 800d76e:	2205      	movs	r2, #5
 800d770:	f000 fcd8 	bl	800e124 <rmw_uxrce_init_subscription_memory>
 800d774:	4956      	ldr	r1, [pc, #344]	@ (800d8d0 <rmw_init+0x224>)
 800d776:	4857      	ldr	r0, [pc, #348]	@ (800d8d4 <rmw_init+0x228>)
 800d778:	220a      	movs	r2, #10
 800d77a:	f000 fcb3 	bl	800e0e4 <rmw_uxrce_init_publisher_memory>
 800d77e:	4956      	ldr	r1, [pc, #344]	@ (800d8d8 <rmw_init+0x22c>)
 800d780:	4856      	ldr	r0, [pc, #344]	@ (800d8dc <rmw_init+0x230>)
 800d782:	2201      	movs	r2, #1
 800d784:	f000 fc6e 	bl	800e064 <rmw_uxrce_init_service_memory>
 800d788:	4955      	ldr	r1, [pc, #340]	@ (800d8e0 <rmw_init+0x234>)
 800d78a:	4856      	ldr	r0, [pc, #344]	@ (800d8e4 <rmw_init+0x238>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	f000 fc89 	bl	800e0a4 <rmw_uxrce_init_client_memory>
 800d792:	4955      	ldr	r1, [pc, #340]	@ (800d8e8 <rmw_init+0x23c>)
 800d794:	4855      	ldr	r0, [pc, #340]	@ (800d8ec <rmw_init+0x240>)
 800d796:	220f      	movs	r2, #15
 800d798:	f000 fd24 	bl	800e1e4 <rmw_uxrce_init_topic_memory>
 800d79c:	4954      	ldr	r1, [pc, #336]	@ (800d8f0 <rmw_init+0x244>)
 800d79e:	4855      	ldr	r0, [pc, #340]	@ (800d8f4 <rmw_init+0x248>)
 800d7a0:	2203      	movs	r2, #3
 800d7a2:	f000 fd5f 	bl	800e264 <rmw_uxrce_init_init_options_impl_memory>
 800d7a6:	4954      	ldr	r1, [pc, #336]	@ (800d8f8 <rmw_init+0x24c>)
 800d7a8:	4854      	ldr	r0, [pc, #336]	@ (800d8fc <rmw_init+0x250>)
 800d7aa:	2204      	movs	r2, #4
 800d7ac:	f000 fd7a 	bl	800e2a4 <rmw_uxrce_init_wait_set_memory>
 800d7b0:	4953      	ldr	r1, [pc, #332]	@ (800d900 <rmw_init+0x254>)
 800d7b2:	4854      	ldr	r0, [pc, #336]	@ (800d904 <rmw_init+0x258>)
 800d7b4:	2204      	movs	r2, #4
 800d7b6:	f000 fd95 	bl	800e2e4 <rmw_uxrce_init_guard_condition_memory>
 800d7ba:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d7bc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d7be:	4642      	mov	r2, r8
 800d7c0:	f000 fc38 	bl	800e034 <rmw_uxrce_transport_init>
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d158      	bne.n	800d87c <rmw_init+0x1d0>
 800d7ca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d7cc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d7d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7d2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f001 fbea 	bl	800efb0 <uxr_init_session>
 800d7dc:	494a      	ldr	r1, [pc, #296]	@ (800d908 <rmw_init+0x25c>)
 800d7de:	4622      	mov	r2, r4
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	f001 fc09 	bl	800eff8 <uxr_set_topic_callback>
 800d7e6:	4949      	ldr	r1, [pc, #292]	@ (800d90c <rmw_init+0x260>)
 800d7e8:	463a      	mov	r2, r7
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f001 fc00 	bl	800eff0 <uxr_set_status_callback>
 800d7f0:	4947      	ldr	r1, [pc, #284]	@ (800d910 <rmw_init+0x264>)
 800d7f2:	463a      	mov	r2, r7
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f001 fc03 	bl	800f000 <uxr_set_request_callback>
 800d7fa:	4946      	ldr	r1, [pc, #280]	@ (800d914 <rmw_init+0x268>)
 800d7fc:	463a      	mov	r2, r7
 800d7fe:	4628      	mov	r0, r5
 800d800:	f001 fc02 	bl	800f008 <uxr_set_reply_callback>
 800d804:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d808:	2304      	movs	r3, #4
 800d80a:	0092      	lsls	r2, r2, #2
 800d80c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d810:	4628      	mov	r0, r5
 800d812:	f001 fc37 	bl	800f084 <uxr_create_input_reliable_stream>
 800d816:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d81a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d81e:	0092      	lsls	r2, r2, #2
 800d820:	2304      	movs	r3, #4
 800d822:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d826:	4628      	mov	r0, r5
 800d828:	f001 fc04 	bl	800f034 <uxr_create_output_reliable_stream>
 800d82c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d830:	4628      	mov	r0, r5
 800d832:	f001 fc21 	bl	800f078 <uxr_create_input_best_effort_stream>
 800d836:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d83a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d83e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d842:	3114      	adds	r1, #20
 800d844:	4628      	mov	r0, r5
 800d846:	f001 fbe3 	bl	800f010 <uxr_create_output_best_effort_stream>
 800d84a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d84e:	4628      	mov	r0, r5
 800d850:	f002 f96e 	bl	800fb30 <uxr_create_session>
 800d854:	b1f8      	cbz	r0, 800d896 <rmw_init+0x1ea>
 800d856:	4638      	mov	r0, r7
 800d858:	b003      	add	sp, #12
 800d85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85e:	270b      	movs	r7, #11
 800d860:	4638      	mov	r0, r7
 800d862:	b003      	add	sp, #12
 800d864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d868:	2701      	movs	r7, #1
 800d86a:	4638      	mov	r0, r7
 800d86c:	b003      	add	sp, #12
 800d86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d872:	270c      	movs	r7, #12
 800d874:	4638      	mov	r0, r7
 800d876:	b003      	add	sp, #12
 800d878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d87c:	4648      	mov	r0, r9
 800d87e:	f001 f9df 	bl	800ec40 <uxr_close_custom_transport>
 800d882:	480d      	ldr	r0, [pc, #52]	@ (800d8b8 <rmw_init+0x20c>)
 800d884:	4621      	mov	r1, r4
 800d886:	f007 fedf 	bl	8015648 <put_memory>
 800d88a:	4638      	mov	r0, r7
 800d88c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d890:	b003      	add	sp, #12
 800d892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d896:	4648      	mov	r0, r9
 800d898:	f001 f9d2 	bl	800ec40 <uxr_close_custom_transport>
 800d89c:	4806      	ldr	r0, [pc, #24]	@ (800d8b8 <rmw_init+0x20c>)
 800d89e:	4621      	mov	r1, r4
 800d8a0:	f007 fed2 	bl	8015648 <put_memory>
 800d8a4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d8a6:	2701      	movs	r7, #1
 800d8a8:	e7d5      	b.n	800d856 <rmw_init+0x1aa>
 800d8aa:	bf00      	nop
 800d8ac:	080196a8 	.word	0x080196a8
 800d8b0:	2000ae2c 	.word	0x2000ae2c
 800d8b4:	200070d8 	.word	0x200070d8
 800d8b8:	2000ae1c 	.word	0x2000ae1c
 800d8bc:	20008680 	.word	0x20008680
 800d8c0:	200066fc 	.word	0x200066fc
 800d8c4:	2000adec 	.word	0x2000adec
 800d8c8:	2000a780 	.word	0x2000a780
 800d8cc:	2000ae3c 	.word	0x2000ae3c
 800d8d0:	200067a0 	.word	0x200067a0
 800d8d4:	2000adfc 	.word	0x2000adfc
 800d8d8:	20007010 	.word	0x20007010
 800d8dc:	2000ae0c 	.word	0x2000ae0c
 800d8e0:	20006530 	.word	0x20006530
 800d8e4:	2000651c 	.word	0x2000651c
 800d8e8:	2000abb8 	.word	0x2000abb8
 800d8ec:	2000ae4c 	.word	0x2000ae4c
 800d8f0:	20006678 	.word	0x20006678
 800d8f4:	2000addc 	.word	0x2000addc
 800d8f8:	2000ad5c 	.word	0x2000ad5c
 800d8fc:	2000ae5c 	.word	0x2000ae5c
 800d900:	200065f8 	.word	0x200065f8
 800d904:	2000adcc 	.word	0x2000adcc
 800d908:	08015461 	.word	0x08015461
 800d90c:	08015459 	.word	0x08015459
 800d910:	080154f9 	.word	0x080154f9
 800d914:	08015595 	.word	0x08015595

0800d918 <rmw_context_fini>:
 800d918:	4b17      	ldr	r3, [pc, #92]	@ (800d978 <rmw_context_fini+0x60>)
 800d91a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	681c      	ldr	r4, [r3, #0]
 800d920:	4605      	mov	r5, r0
 800d922:	b334      	cbz	r4, 800d972 <rmw_context_fini+0x5a>
 800d924:	2600      	movs	r6, #0
 800d926:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d92a:	6902      	ldr	r2, [r0, #16]
 800d92c:	428a      	cmp	r2, r1
 800d92e:	d018      	beq.n	800d962 <rmw_context_fini+0x4a>
 800d930:	2c00      	cmp	r4, #0
 800d932:	d1f8      	bne.n	800d926 <rmw_context_fini+0xe>
 800d934:	b189      	cbz	r1, 800d95a <rmw_context_fini+0x42>
 800d936:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d93a:	789b      	ldrb	r3, [r3, #2]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d942:	bf14      	ite	ne
 800d944:	210a      	movne	r1, #10
 800d946:	2100      	moveq	r1, #0
 800d948:	f002 f8ca 	bl	800fae0 <uxr_delete_session_retries>
 800d94c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d94e:	f000 fce9 	bl	800e324 <rmw_uxrce_fini_session_memory>
 800d952:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d954:	3010      	adds	r0, #16
 800d956:	f001 f973 	bl	800ec40 <uxr_close_custom_transport>
 800d95a:	2300      	movs	r3, #0
 800d95c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d95e:	4630      	mov	r0, r6
 800d960:	bd70      	pop	{r4, r5, r6, pc}
 800d962:	3018      	adds	r0, #24
 800d964:	f000 f89c 	bl	800daa0 <rmw_destroy_node>
 800d968:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d96a:	4606      	mov	r6, r0
 800d96c:	2c00      	cmp	r4, #0
 800d96e:	d1da      	bne.n	800d926 <rmw_context_fini+0xe>
 800d970:	e7e0      	b.n	800d934 <rmw_context_fini+0x1c>
 800d972:	4626      	mov	r6, r4
 800d974:	e7de      	b.n	800d934 <rmw_context_fini+0x1c>
 800d976:	bf00      	nop
 800d978:	2000adec 	.word	0x2000adec

0800d97c <create_node>:
 800d97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d980:	b083      	sub	sp, #12
 800d982:	2b00      	cmp	r3, #0
 800d984:	d05f      	beq.n	800da46 <create_node+0xca>
 800d986:	4606      	mov	r6, r0
 800d988:	4835      	ldr	r0, [pc, #212]	@ (800da60 <create_node+0xe4>)
 800d98a:	460f      	mov	r7, r1
 800d98c:	4690      	mov	r8, r2
 800d98e:	461d      	mov	r5, r3
 800d990:	f007 fe4a 	bl	8015628 <get_memory>
 800d994:	2800      	cmp	r0, #0
 800d996:	d056      	beq.n	800da46 <create_node+0xca>
 800d998:	6884      	ldr	r4, [r0, #8]
 800d99a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d99c:	6123      	str	r3, [r4, #16]
 800d99e:	f007 feab 	bl	80156f8 <rmw_get_implementation_identifier>
 800d9a2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d9a6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d9aa:	f8c4 9020 	str.w	r9, [r4, #32]
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7f2 fc40 	bl	8000234 <strlen>
 800d9b4:	1c42      	adds	r2, r0, #1
 800d9b6:	2a3c      	cmp	r2, #60	@ 0x3c
 800d9b8:	f104 0518 	add.w	r5, r4, #24
 800d9bc:	d840      	bhi.n	800da40 <create_node+0xc4>
 800d9be:	4648      	mov	r0, r9
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d9c6:	f00a f9c0 	bl	8017d4a <memcpy>
 800d9ca:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	f7f2 fc30 	bl	8000234 <strlen>
 800d9d4:	1c42      	adds	r2, r0, #1
 800d9d6:	2a3c      	cmp	r2, #60	@ 0x3c
 800d9d8:	d832      	bhi.n	800da40 <create_node+0xc4>
 800d9da:	4639      	mov	r1, r7
 800d9dc:	4648      	mov	r0, r9
 800d9de:	f00a f9b4 	bl	8017d4a <memcpy>
 800d9e2:	6923      	ldr	r3, [r4, #16]
 800d9e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9e8:	2101      	movs	r1, #1
 800d9ea:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d9ee:	1842      	adds	r2, r0, r1
 800d9f0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d9f4:	f001 f928 	bl	800ec48 <uxr_object_id>
 800d9f8:	6160      	str	r0, [r4, #20]
 800d9fa:	783b      	ldrb	r3, [r7, #0]
 800d9fc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9fe:	d127      	bne.n	800da50 <create_node+0xd4>
 800da00:	787b      	ldrb	r3, [r7, #1]
 800da02:	bb2b      	cbnz	r3, 800da50 <create_node+0xd4>
 800da04:	4a17      	ldr	r2, [pc, #92]	@ (800da64 <create_node+0xe8>)
 800da06:	4818      	ldr	r0, [pc, #96]	@ (800da68 <create_node+0xec>)
 800da08:	4633      	mov	r3, r6
 800da0a:	213c      	movs	r1, #60	@ 0x3c
 800da0c:	f009 fffa 	bl	8017a04 <sniprintf>
 800da10:	6920      	ldr	r0, [r4, #16]
 800da12:	4915      	ldr	r1, [pc, #84]	@ (800da68 <create_node+0xec>)
 800da14:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800da18:	9100      	str	r1, [sp, #0]
 800da1a:	2106      	movs	r1, #6
 800da1c:	9101      	str	r1, [sp, #4]
 800da1e:	6811      	ldr	r1, [r2, #0]
 800da20:	6962      	ldr	r2, [r4, #20]
 800da22:	fa1f f388 	uxth.w	r3, r8
 800da26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da2a:	f000 ff3d 	bl	800e8a8 <uxr_buffer_create_participant_bin>
 800da2e:	4602      	mov	r2, r0
 800da30:	6920      	ldr	r0, [r4, #16]
 800da32:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800da36:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800da3a:	f000 fdeb 	bl	800e614 <run_xrce_session>
 800da3e:	b918      	cbnz	r0, 800da48 <create_node+0xcc>
 800da40:	4628      	mov	r0, r5
 800da42:	f000 fc75 	bl	800e330 <rmw_uxrce_fini_node_memory>
 800da46:	2500      	movs	r5, #0
 800da48:	4628      	mov	r0, r5
 800da4a:	b003      	add	sp, #12
 800da4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da50:	4a06      	ldr	r2, [pc, #24]	@ (800da6c <create_node+0xf0>)
 800da52:	9600      	str	r6, [sp, #0]
 800da54:	463b      	mov	r3, r7
 800da56:	213c      	movs	r1, #60	@ 0x3c
 800da58:	4803      	ldr	r0, [pc, #12]	@ (800da68 <create_node+0xec>)
 800da5a:	f009 ffd3 	bl	8017a04 <sniprintf>
 800da5e:	e7d7      	b.n	800da10 <create_node+0x94>
 800da60:	2000adec 	.word	0x2000adec
 800da64:	08018f1c 	.word	0x08018f1c
 800da68:	200064e0 	.word	0x200064e0
 800da6c:	08018f04 	.word	0x08018f04

0800da70 <rmw_create_node>:
 800da70:	b199      	cbz	r1, 800da9a <rmw_create_node+0x2a>
 800da72:	780b      	ldrb	r3, [r1, #0]
 800da74:	468c      	mov	ip, r1
 800da76:	b183      	cbz	r3, 800da9a <rmw_create_node+0x2a>
 800da78:	b410      	push	{r4}
 800da7a:	4614      	mov	r4, r2
 800da7c:	b14a      	cbz	r2, 800da92 <rmw_create_node+0x22>
 800da7e:	7813      	ldrb	r3, [r2, #0]
 800da80:	b13b      	cbz	r3, 800da92 <rmw_create_node+0x22>
 800da82:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800da84:	4603      	mov	r3, r0
 800da86:	4621      	mov	r1, r4
 800da88:	4660      	mov	r0, ip
 800da8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da8e:	f7ff bf75 	b.w	800d97c <create_node>
 800da92:	2000      	movs	r0, #0
 800da94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da98:	4770      	bx	lr
 800da9a:	2000      	movs	r0, #0
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop

0800daa0 <rmw_destroy_node>:
 800daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa2:	b328      	cbz	r0, 800daf0 <rmw_destroy_node+0x50>
 800daa4:	4607      	mov	r7, r0
 800daa6:	6800      	ldr	r0, [r0, #0]
 800daa8:	b120      	cbz	r0, 800dab4 <rmw_destroy_node+0x14>
 800daaa:	4b36      	ldr	r3, [pc, #216]	@ (800db84 <rmw_destroy_node+0xe4>)
 800daac:	6819      	ldr	r1, [r3, #0]
 800daae:	f7f2 fbb7 	bl	8000220 <strcmp>
 800dab2:	b9e8      	cbnz	r0, 800daf0 <rmw_destroy_node+0x50>
 800dab4:	687d      	ldr	r5, [r7, #4]
 800dab6:	b1dd      	cbz	r5, 800daf0 <rmw_destroy_node+0x50>
 800dab8:	4b33      	ldr	r3, [pc, #204]	@ (800db88 <rmw_destroy_node+0xe8>)
 800daba:	681c      	ldr	r4, [r3, #0]
 800dabc:	2c00      	cmp	r4, #0
 800dabe:	d05f      	beq.n	800db80 <rmw_destroy_node+0xe0>
 800dac0:	2600      	movs	r6, #0
 800dac2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dac6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800daca:	429d      	cmp	r5, r3
 800dacc:	d013      	beq.n	800daf6 <rmw_destroy_node+0x56>
 800dace:	2c00      	cmp	r4, #0
 800dad0:	d1f7      	bne.n	800dac2 <rmw_destroy_node+0x22>
 800dad2:	4b2e      	ldr	r3, [pc, #184]	@ (800db8c <rmw_destroy_node+0xec>)
 800dad4:	681c      	ldr	r4, [r3, #0]
 800dad6:	b1c4      	cbz	r4, 800db0a <rmw_destroy_node+0x6a>
 800dad8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dadc:	6a0b      	ldr	r3, [r1, #32]
 800dade:	429d      	cmp	r5, r3
 800dae0:	d1f9      	bne.n	800dad6 <rmw_destroy_node+0x36>
 800dae2:	317c      	adds	r1, #124	@ 0x7c
 800dae4:	4638      	mov	r0, r7
 800dae6:	f000 fa45 	bl	800df74 <rmw_destroy_subscription>
 800daea:	2801      	cmp	r0, #1
 800daec:	4606      	mov	r6, r0
 800daee:	d1f2      	bne.n	800dad6 <rmw_destroy_node+0x36>
 800daf0:	2601      	movs	r6, #1
 800daf2:	4630      	mov	r0, r6
 800daf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf6:	3184      	adds	r1, #132	@ 0x84
 800daf8:	4638      	mov	r0, r7
 800dafa:	f000 f9a5 	bl	800de48 <rmw_destroy_publisher>
 800dafe:	2801      	cmp	r0, #1
 800db00:	4606      	mov	r6, r0
 800db02:	d0f5      	beq.n	800daf0 <rmw_destroy_node+0x50>
 800db04:	2c00      	cmp	r4, #0
 800db06:	d1dc      	bne.n	800dac2 <rmw_destroy_node+0x22>
 800db08:	e7e3      	b.n	800dad2 <rmw_destroy_node+0x32>
 800db0a:	4b21      	ldr	r3, [pc, #132]	@ (800db90 <rmw_destroy_node+0xf0>)
 800db0c:	681c      	ldr	r4, [r3, #0]
 800db0e:	b16c      	cbz	r4, 800db2c <rmw_destroy_node+0x8c>
 800db10:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800db14:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800db16:	429d      	cmp	r5, r3
 800db18:	d1f9      	bne.n	800db0e <rmw_destroy_node+0x6e>
 800db1a:	317c      	adds	r1, #124	@ 0x7c
 800db1c:	4638      	mov	r0, r7
 800db1e:	f000 f9e5 	bl	800deec <rmw_destroy_service>
 800db22:	2801      	cmp	r0, #1
 800db24:	4606      	mov	r6, r0
 800db26:	d0e3      	beq.n	800daf0 <rmw_destroy_node+0x50>
 800db28:	2c00      	cmp	r4, #0
 800db2a:	d1f1      	bne.n	800db10 <rmw_destroy_node+0x70>
 800db2c:	4b19      	ldr	r3, [pc, #100]	@ (800db94 <rmw_destroy_node+0xf4>)
 800db2e:	681c      	ldr	r4, [r3, #0]
 800db30:	b16c      	cbz	r4, 800db4e <rmw_destroy_node+0xae>
 800db32:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800db36:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800db38:	429d      	cmp	r5, r3
 800db3a:	d1f9      	bne.n	800db30 <rmw_destroy_node+0x90>
 800db3c:	317c      	adds	r1, #124	@ 0x7c
 800db3e:	4638      	mov	r0, r7
 800db40:	f007 fd96 	bl	8015670 <rmw_destroy_client>
 800db44:	2801      	cmp	r0, #1
 800db46:	4606      	mov	r6, r0
 800db48:	d0d2      	beq.n	800daf0 <rmw_destroy_node+0x50>
 800db4a:	2c00      	cmp	r4, #0
 800db4c:	d1f1      	bne.n	800db32 <rmw_destroy_node+0x92>
 800db4e:	6928      	ldr	r0, [r5, #16]
 800db50:	696a      	ldr	r2, [r5, #20]
 800db52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db5a:	6819      	ldr	r1, [r3, #0]
 800db5c:	f000 fe58 	bl	800e810 <uxr_buffer_delete_entity>
 800db60:	4602      	mov	r2, r0
 800db62:	6928      	ldr	r0, [r5, #16]
 800db64:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800db68:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800db6c:	f000 fd52 	bl	800e614 <run_xrce_session>
 800db70:	2800      	cmp	r0, #0
 800db72:	bf08      	it	eq
 800db74:	2602      	moveq	r6, #2
 800db76:	4638      	mov	r0, r7
 800db78:	f000 fbda 	bl	800e330 <rmw_uxrce_fini_node_memory>
 800db7c:	4630      	mov	r0, r6
 800db7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db80:	4626      	mov	r6, r4
 800db82:	e7a6      	b.n	800dad2 <rmw_destroy_node+0x32>
 800db84:	080196a8 	.word	0x080196a8
 800db88:	2000adfc 	.word	0x2000adfc
 800db8c:	2000ae3c 	.word	0x2000ae3c
 800db90:	2000ae0c 	.word	0x2000ae0c
 800db94:	2000651c 	.word	0x2000651c

0800db98 <rmw_node_get_graph_guard_condition>:
 800db98:	6843      	ldr	r3, [r0, #4]
 800db9a:	6918      	ldr	r0, [r3, #16]
 800db9c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop

0800dba4 <flush_session>:
 800dba4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800dba6:	f001 be53 	b.w	800f850 <uxr_run_session_until_confirm_delivery>
 800dbaa:	bf00      	nop

0800dbac <rmw_publish>:
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d053      	beq.n	800dc58 <rmw_publish+0xac>
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	b08e      	sub	sp, #56	@ 0x38
 800dbb6:	2900      	cmp	r1, #0
 800dbb8:	d04b      	beq.n	800dc52 <rmw_publish+0xa6>
 800dbba:	4604      	mov	r4, r0
 800dbbc:	6800      	ldr	r0, [r0, #0]
 800dbbe:	f000 fda9 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d045      	beq.n	800dc52 <rmw_publish+0xa6>
 800dbc6:	6866      	ldr	r6, [r4, #4]
 800dbc8:	2e00      	cmp	r6, #0
 800dbca:	d042      	beq.n	800dc52 <rmw_publish+0xa6>
 800dbcc:	69b4      	ldr	r4, [r6, #24]
 800dbce:	4628      	mov	r0, r5
 800dbd0:	6923      	ldr	r3, [r4, #16]
 800dbd2:	4798      	blx	r3
 800dbd4:	69f3      	ldr	r3, [r6, #28]
 800dbd6:	9005      	str	r0, [sp, #20]
 800dbd8:	b113      	cbz	r3, 800dbe0 <rmw_publish+0x34>
 800dbda:	a805      	add	r0, sp, #20
 800dbdc:	4798      	blx	r3
 800dbde:	9805      	ldr	r0, [sp, #20]
 800dbe0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	9000      	str	r0, [sp, #0]
 800dbe8:	6972      	ldr	r2, [r6, #20]
 800dbea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dbec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dbf0:	ab06      	add	r3, sp, #24
 800dbf2:	f003 f8ab 	bl	8010d4c <uxr_prepare_output_stream>
 800dbf6:	b1d8      	cbz	r0, 800dc30 <rmw_publish+0x84>
 800dbf8:	68a3      	ldr	r3, [r4, #8]
 800dbfa:	a906      	add	r1, sp, #24
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	4798      	blx	r3
 800dc00:	6a33      	ldr	r3, [r6, #32]
 800dc02:	4604      	mov	r4, r0
 800dc04:	b10b      	cbz	r3, 800dc0a <rmw_publish+0x5e>
 800dc06:	a806      	add	r0, sp, #24
 800dc08:	4798      	blx	r3
 800dc0a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dc14:	d022      	beq.n	800dc5c <rmw_publish+0xb0>
 800dc16:	6918      	ldr	r0, [r3, #16]
 800dc18:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dc1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc1e:	f001 fe17 	bl	800f850 <uxr_run_session_until_confirm_delivery>
 800dc22:	4020      	ands	r0, r4
 800dc24:	b2c4      	uxtb	r4, r0
 800dc26:	f084 0001 	eor.w	r0, r4, #1
 800dc2a:	b2c0      	uxtb	r0, r0
 800dc2c:	b00e      	add	sp, #56	@ 0x38
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
 800dc30:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dc34:	6918      	ldr	r0, [r3, #16]
 800dc36:	9b05      	ldr	r3, [sp, #20]
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc68 <rmw_publish+0xbc>)
 800dc3c:	9301      	str	r3, [sp, #4]
 800dc3e:	9602      	str	r6, [sp, #8]
 800dc40:	6972      	ldr	r2, [r6, #20]
 800dc42:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dc44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc48:	ab06      	add	r3, sp, #24
 800dc4a:	f003 f8af 	bl	8010dac <uxr_prepare_output_stream_fragmented>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d1d2      	bne.n	800dbf8 <rmw_publish+0x4c>
 800dc52:	2001      	movs	r0, #1
 800dc54:	b00e      	add	sp, #56	@ 0x38
 800dc56:	bd70      	pop	{r4, r5, r6, pc}
 800dc58:	2001      	movs	r0, #1
 800dc5a:	4770      	bx	lr
 800dc5c:	6918      	ldr	r0, [r3, #16]
 800dc5e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc62:	f001 fa35 	bl	800f0d0 <uxr_flash_output_streams>
 800dc66:	e7de      	b.n	800dc26 <rmw_publish+0x7a>
 800dc68:	0800dba5 	.word	0x0800dba5

0800dc6c <rmw_create_publisher>:
 800dc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc70:	b087      	sub	sp, #28
 800dc72:	2800      	cmp	r0, #0
 800dc74:	f000 80cc 	beq.w	800de10 <rmw_create_publisher+0x1a4>
 800dc78:	460e      	mov	r6, r1
 800dc7a:	2900      	cmp	r1, #0
 800dc7c:	f000 80c8 	beq.w	800de10 <rmw_create_publisher+0x1a4>
 800dc80:	4604      	mov	r4, r0
 800dc82:	6800      	ldr	r0, [r0, #0]
 800dc84:	4615      	mov	r5, r2
 800dc86:	4698      	mov	r8, r3
 800dc88:	f000 fd44 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	f000 80bf 	beq.w	800de10 <rmw_create_publisher+0x1a4>
 800dc92:	2d00      	cmp	r5, #0
 800dc94:	f000 80bc 	beq.w	800de10 <rmw_create_publisher+0x1a4>
 800dc98:	782b      	ldrb	r3, [r5, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f000 80b8 	beq.w	800de10 <rmw_create_publisher+0x1a4>
 800dca0:	f1b8 0f00 	cmp.w	r8, #0
 800dca4:	f000 80b4 	beq.w	800de10 <rmw_create_publisher+0x1a4>
 800dca8:	485c      	ldr	r0, [pc, #368]	@ (800de1c <rmw_create_publisher+0x1b0>)
 800dcaa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dcae:	f007 fcbb 	bl	8015628 <get_memory>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	f000 80ac 	beq.w	800de10 <rmw_create_publisher+0x1a4>
 800dcb8:	6884      	ldr	r4, [r0, #8]
 800dcba:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800dcbe:	f007 fd1b 	bl	80156f8 <rmw_get_implementation_identifier>
 800dcc2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dcc6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dcca:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f7f2 fab0 	bl	8000234 <strlen>
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	283c      	cmp	r0, #60	@ 0x3c
 800dcd8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dcdc:	f200 8091 	bhi.w	800de02 <rmw_create_publisher+0x196>
 800dce0:	4a4f      	ldr	r2, [pc, #316]	@ (800de20 <rmw_create_publisher+0x1b4>)
 800dce2:	462b      	mov	r3, r5
 800dce4:	213c      	movs	r1, #60	@ 0x3c
 800dce6:	4650      	mov	r0, sl
 800dce8:	f009 fe8c 	bl	8017a04 <sniprintf>
 800dcec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dcf0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dcf2:	4641      	mov	r1, r8
 800dcf4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dcf8:	2250      	movs	r2, #80	@ 0x50
 800dcfa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dcfe:	f00a f824 	bl	8017d4a <memcpy>
 800dd02:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dd06:	4947      	ldr	r1, [pc, #284]	@ (800de24 <rmw_create_publisher+0x1b8>)
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd0e:	bf0c      	ite	eq
 800dd10:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dd14:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dd18:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dd20:	4630      	mov	r0, r6
 800dd22:	f000 fd05 	bl	800e730 <get_message_typesupport_handle>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d06b      	beq.n	800de02 <rmw_create_publisher+0x196>
 800dd2a:	6842      	ldr	r2, [r0, #4]
 800dd2c:	61a2      	str	r2, [r4, #24]
 800dd2e:	2a00      	cmp	r2, #0
 800dd30:	d067      	beq.n	800de02 <rmw_create_publisher+0x196>
 800dd32:	4629      	mov	r1, r5
 800dd34:	4643      	mov	r3, r8
 800dd36:	4648      	mov	r0, r9
 800dd38:	f007 fce4 	bl	8015704 <create_topic>
 800dd3c:	6260      	str	r0, [r4, #36]	@ 0x24
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d063      	beq.n	800de0a <rmw_create_publisher+0x19e>
 800dd42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd4a:	2103      	movs	r1, #3
 800dd4c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800dd50:	1c42      	adds	r2, r0, #1
 800dd52:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800dd56:	f000 ff77 	bl	800ec48 <uxr_object_id>
 800dd5a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dd5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd62:	6120      	str	r0, [r4, #16]
 800dd64:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dd68:	6910      	ldr	r0, [r2, #16]
 800dd6a:	2506      	movs	r5, #6
 800dd6c:	9500      	str	r5, [sp, #0]
 800dd6e:	6819      	ldr	r1, [r3, #0]
 800dd70:	6922      	ldr	r2, [r4, #16]
 800dd72:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dd76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd7a:	f000 fdfd 	bl	800e978 <uxr_buffer_create_publisher_bin>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dd84:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dd88:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dd8c:	f000 fc42 	bl	800e614 <run_xrce_session>
 800dd90:	b3b8      	cbz	r0, 800de02 <rmw_create_publisher+0x196>
 800dd92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd9a:	2105      	movs	r1, #5
 800dd9c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800dda0:	1c42      	adds	r2, r0, #1
 800dda2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800dda6:	f000 ff4f 	bl	800ec48 <uxr_object_id>
 800ddaa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ddae:	6160      	str	r0, [r4, #20]
 800ddb0:	691e      	ldr	r6, [r3, #16]
 800ddb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ddb6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ddba:	f10d 0a10 	add.w	sl, sp, #16
 800ddbe:	4641      	mov	r1, r8
 800ddc0:	4650      	mov	r0, sl
 800ddc2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ddc6:	f000 fc41 	bl	800e64c <convert_qos_profile>
 800ddca:	9503      	str	r5, [sp, #12]
 800ddcc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ddd0:	9001      	str	r0, [sp, #4]
 800ddd2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ddd6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800dde0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dde4:	f8d8 1000 	ldr.w	r1, [r8]
 800dde8:	4630      	mov	r0, r6
 800ddea:	f000 fdf5 	bl	800e9d8 <uxr_buffer_create_datawriter_bin>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ddf4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ddf8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ddfc:	f000 fc0a 	bl	800e614 <run_xrce_session>
 800de00:	b938      	cbnz	r0, 800de12 <rmw_create_publisher+0x1a6>
 800de02:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800de04:	b108      	cbz	r0, 800de0a <rmw_create_publisher+0x19e>
 800de06:	f000 fb03 	bl	800e410 <rmw_uxrce_fini_topic_memory>
 800de0a:	4638      	mov	r0, r7
 800de0c:	f000 faa8 	bl	800e360 <rmw_uxrce_fini_publisher_memory>
 800de10:	2700      	movs	r7, #0
 800de12:	4638      	mov	r0, r7
 800de14:	b007      	add	sp, #28
 800de16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1a:	bf00      	nop
 800de1c:	2000adfc 	.word	0x2000adfc
 800de20:	08018f1c 	.word	0x08018f1c
 800de24:	08018cf0 	.word	0x08018cf0

0800de28 <rmw_publisher_get_actual_qos>:
 800de28:	b150      	cbz	r0, 800de40 <rmw_publisher_get_actual_qos+0x18>
 800de2a:	b508      	push	{r3, lr}
 800de2c:	460b      	mov	r3, r1
 800de2e:	b149      	cbz	r1, 800de44 <rmw_publisher_get_actual_qos+0x1c>
 800de30:	6841      	ldr	r1, [r0, #4]
 800de32:	2250      	movs	r2, #80	@ 0x50
 800de34:	3128      	adds	r1, #40	@ 0x28
 800de36:	4618      	mov	r0, r3
 800de38:	f009 ff87 	bl	8017d4a <memcpy>
 800de3c:	2000      	movs	r0, #0
 800de3e:	bd08      	pop	{r3, pc}
 800de40:	200b      	movs	r0, #11
 800de42:	4770      	bx	lr
 800de44:	200b      	movs	r0, #11
 800de46:	bd08      	pop	{r3, pc}

0800de48 <rmw_destroy_publisher>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	b128      	cbz	r0, 800de58 <rmw_destroy_publisher+0x10>
 800de4c:	4604      	mov	r4, r0
 800de4e:	6800      	ldr	r0, [r0, #0]
 800de50:	460d      	mov	r5, r1
 800de52:	f000 fc5f 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800de56:	b910      	cbnz	r0, 800de5e <rmw_destroy_publisher+0x16>
 800de58:	2401      	movs	r4, #1
 800de5a:	4620      	mov	r0, r4
 800de5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de5e:	6863      	ldr	r3, [r4, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d0f9      	beq.n	800de58 <rmw_destroy_publisher+0x10>
 800de64:	2d00      	cmp	r5, #0
 800de66:	d0f7      	beq.n	800de58 <rmw_destroy_publisher+0x10>
 800de68:	6828      	ldr	r0, [r5, #0]
 800de6a:	f000 fc53 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d0f2      	beq.n	800de58 <rmw_destroy_publisher+0x10>
 800de72:	686c      	ldr	r4, [r5, #4]
 800de74:	2c00      	cmp	r4, #0
 800de76:	d0ef      	beq.n	800de58 <rmw_destroy_publisher+0x10>
 800de78:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800de7a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800de7e:	f007 fc91 	bl	80157a4 <destroy_topic>
 800de82:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de86:	6962      	ldr	r2, [r4, #20]
 800de88:	6918      	ldr	r0, [r3, #16]
 800de8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800de8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de92:	6819      	ldr	r1, [r3, #0]
 800de94:	f000 fcbc 	bl	800e810 <uxr_buffer_delete_entity>
 800de98:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de9c:	6922      	ldr	r2, [r4, #16]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800dea4:	4604      	mov	r4, r0
 800dea6:	6809      	ldr	r1, [r1, #0]
 800dea8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800deac:	f000 fcb0 	bl	800e810 <uxr_buffer_delete_entity>
 800deb0:	693e      	ldr	r6, [r7, #16]
 800deb2:	4622      	mov	r2, r4
 800deb4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800deb8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800debc:	4604      	mov	r4, r0
 800debe:	4630      	mov	r0, r6
 800dec0:	f000 fba8 	bl	800e614 <run_xrce_session>
 800dec4:	693e      	ldr	r6, [r7, #16]
 800dec6:	4622      	mov	r2, r4
 800dec8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800decc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ded0:	4604      	mov	r4, r0
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 fb9e 	bl	800e614 <run_xrce_session>
 800ded8:	b12c      	cbz	r4, 800dee6 <rmw_destroy_publisher+0x9e>
 800deda:	b120      	cbz	r0, 800dee6 <rmw_destroy_publisher+0x9e>
 800dedc:	2400      	movs	r4, #0
 800dede:	4628      	mov	r0, r5
 800dee0:	f000 fa3e 	bl	800e360 <rmw_uxrce_fini_publisher_memory>
 800dee4:	e7b9      	b.n	800de5a <rmw_destroy_publisher+0x12>
 800dee6:	2402      	movs	r4, #2
 800dee8:	e7f9      	b.n	800dede <rmw_destroy_publisher+0x96>
 800deea:	bf00      	nop

0800deec <rmw_destroy_service>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	b128      	cbz	r0, 800defc <rmw_destroy_service+0x10>
 800def0:	4604      	mov	r4, r0
 800def2:	6800      	ldr	r0, [r0, #0]
 800def4:	460d      	mov	r5, r1
 800def6:	f000 fc0d 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800defa:	b910      	cbnz	r0, 800df02 <rmw_destroy_service+0x16>
 800defc:	2401      	movs	r4, #1
 800defe:	4620      	mov	r0, r4
 800df00:	bd70      	pop	{r4, r5, r6, pc}
 800df02:	6863      	ldr	r3, [r4, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d0f9      	beq.n	800defc <rmw_destroy_service+0x10>
 800df08:	2d00      	cmp	r5, #0
 800df0a:	d0f7      	beq.n	800defc <rmw_destroy_service+0x10>
 800df0c:	6828      	ldr	r0, [r5, #0]
 800df0e:	f000 fc01 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800df12:	2800      	cmp	r0, #0
 800df14:	d0f2      	beq.n	800defc <rmw_destroy_service+0x10>
 800df16:	686e      	ldr	r6, [r5, #4]
 800df18:	2e00      	cmp	r6, #0
 800df1a:	d0ef      	beq.n	800defc <rmw_destroy_service+0x10>
 800df1c:	6864      	ldr	r4, [r4, #4]
 800df1e:	6932      	ldr	r2, [r6, #16]
 800df20:	6920      	ldr	r0, [r4, #16]
 800df22:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df2a:	6819      	ldr	r1, [r3, #0]
 800df2c:	f000 febc 	bl	800eca8 <uxr_buffer_cancel_data>
 800df30:	4602      	mov	r2, r0
 800df32:	6920      	ldr	r0, [r4, #16]
 800df34:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df38:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df3c:	f000 fb6a 	bl	800e614 <run_xrce_session>
 800df40:	6920      	ldr	r0, [r4, #16]
 800df42:	6932      	ldr	r2, [r6, #16]
 800df44:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df4c:	6819      	ldr	r1, [r3, #0]
 800df4e:	f000 fc5f 	bl	800e810 <uxr_buffer_delete_entity>
 800df52:	4602      	mov	r2, r0
 800df54:	6920      	ldr	r0, [r4, #16]
 800df56:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df5a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df5e:	f000 fb59 	bl	800e614 <run_xrce_session>
 800df62:	2800      	cmp	r0, #0
 800df64:	4628      	mov	r0, r5
 800df66:	bf14      	ite	ne
 800df68:	2400      	movne	r4, #0
 800df6a:	2402      	moveq	r4, #2
 800df6c:	f000 fa24 	bl	800e3b8 <rmw_uxrce_fini_service_memory>
 800df70:	e7c5      	b.n	800defe <rmw_destroy_service+0x12>
 800df72:	bf00      	nop

0800df74 <rmw_destroy_subscription>:
 800df74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df76:	b128      	cbz	r0, 800df84 <rmw_destroy_subscription+0x10>
 800df78:	4604      	mov	r4, r0
 800df7a:	6800      	ldr	r0, [r0, #0]
 800df7c:	460d      	mov	r5, r1
 800df7e:	f000 fbc9 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800df82:	b910      	cbnz	r0, 800df8a <rmw_destroy_subscription+0x16>
 800df84:	2401      	movs	r4, #1
 800df86:	4620      	mov	r0, r4
 800df88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df8a:	6863      	ldr	r3, [r4, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d0f9      	beq.n	800df84 <rmw_destroy_subscription+0x10>
 800df90:	2d00      	cmp	r5, #0
 800df92:	d0f7      	beq.n	800df84 <rmw_destroy_subscription+0x10>
 800df94:	6828      	ldr	r0, [r5, #0]
 800df96:	f000 fbbd 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d0f2      	beq.n	800df84 <rmw_destroy_subscription+0x10>
 800df9e:	686c      	ldr	r4, [r5, #4]
 800dfa0:	2c00      	cmp	r4, #0
 800dfa2:	d0ef      	beq.n	800df84 <rmw_destroy_subscription+0x10>
 800dfa4:	6a26      	ldr	r6, [r4, #32]
 800dfa6:	6962      	ldr	r2, [r4, #20]
 800dfa8:	6930      	ldr	r0, [r6, #16]
 800dfaa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dfae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	f000 fe78 	bl	800eca8 <uxr_buffer_cancel_data>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	6930      	ldr	r0, [r6, #16]
 800dfbc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dfc0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dfc4:	f000 fb26 	bl	800e614 <run_xrce_session>
 800dfc8:	69e0      	ldr	r0, [r4, #28]
 800dfca:	f007 fbeb 	bl	80157a4 <destroy_topic>
 800dfce:	6a23      	ldr	r3, [r4, #32]
 800dfd0:	6962      	ldr	r2, [r4, #20]
 800dfd2:	6918      	ldr	r0, [r3, #16]
 800dfd4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dfd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfdc:	6819      	ldr	r1, [r3, #0]
 800dfde:	f000 fc17 	bl	800e810 <uxr_buffer_delete_entity>
 800dfe2:	6a23      	ldr	r3, [r4, #32]
 800dfe4:	6922      	ldr	r2, [r4, #16]
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800dfec:	4604      	mov	r4, r0
 800dfee:	6809      	ldr	r1, [r1, #0]
 800dff0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dff4:	f000 fc0c 	bl	800e810 <uxr_buffer_delete_entity>
 800dff8:	6937      	ldr	r7, [r6, #16]
 800dffa:	4622      	mov	r2, r4
 800dffc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e000:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e004:	4604      	mov	r4, r0
 800e006:	4638      	mov	r0, r7
 800e008:	f000 fb04 	bl	800e614 <run_xrce_session>
 800e00c:	6936      	ldr	r6, [r6, #16]
 800e00e:	4622      	mov	r2, r4
 800e010:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e014:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e018:	4604      	mov	r4, r0
 800e01a:	4630      	mov	r0, r6
 800e01c:	f000 fafa 	bl	800e614 <run_xrce_session>
 800e020:	b12c      	cbz	r4, 800e02e <rmw_destroy_subscription+0xba>
 800e022:	b120      	cbz	r0, 800e02e <rmw_destroy_subscription+0xba>
 800e024:	2400      	movs	r4, #0
 800e026:	4628      	mov	r0, r5
 800e028:	f000 f9b0 	bl	800e38c <rmw_uxrce_fini_subscription_memory>
 800e02c:	e7ab      	b.n	800df86 <rmw_destroy_subscription+0x12>
 800e02e:	2402      	movs	r4, #2
 800e030:	e7f9      	b.n	800e026 <rmw_destroy_subscription+0xb2>
 800e032:	bf00      	nop

0800e034 <rmw_uxrce_transport_init>:
 800e034:	b508      	push	{r3, lr}
 800e036:	b108      	cbz	r0, 800e03c <rmw_uxrce_transport_init+0x8>
 800e038:	f100 0210 	add.w	r2, r0, #16
 800e03c:	b139      	cbz	r1, 800e04e <rmw_uxrce_transport_init+0x1a>
 800e03e:	6949      	ldr	r1, [r1, #20]
 800e040:	4610      	mov	r0, r2
 800e042:	f000 fdc9 	bl	800ebd8 <uxr_init_custom_transport>
 800e046:	f080 0001 	eor.w	r0, r0, #1
 800e04a:	b2c0      	uxtb	r0, r0
 800e04c:	bd08      	pop	{r3, pc}
 800e04e:	4b04      	ldr	r3, [pc, #16]	@ (800e060 <rmw_uxrce_transport_init+0x2c>)
 800e050:	4610      	mov	r0, r2
 800e052:	6859      	ldr	r1, [r3, #4]
 800e054:	f000 fdc0 	bl	800ebd8 <uxr_init_custom_transport>
 800e058:	f080 0001 	eor.w	r0, r0, #1
 800e05c:	b2c0      	uxtb	r0, r0
 800e05e:	bd08      	pop	{r3, pc}
 800e060:	200064c4 	.word	0x200064c4

0800e064 <rmw_uxrce_init_service_memory>:
 800e064:	b1e2      	cbz	r2, 800e0a0 <rmw_uxrce_init_service_memory+0x3c>
 800e066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06a:	7b05      	ldrb	r5, [r0, #12]
 800e06c:	4606      	mov	r6, r0
 800e06e:	b9ad      	cbnz	r5, 800e09c <rmw_uxrce_init_service_memory+0x38>
 800e070:	23c8      	movs	r3, #200	@ 0xc8
 800e072:	e9c0 5500 	strd	r5, r5, [r0]
 800e076:	6083      	str	r3, [r0, #8]
 800e078:	f240 1301 	movw	r3, #257	@ 0x101
 800e07c:	4617      	mov	r7, r2
 800e07e:	8183      	strh	r3, [r0, #12]
 800e080:	460c      	mov	r4, r1
 800e082:	46a8      	mov	r8, r5
 800e084:	4621      	mov	r1, r4
 800e086:	4630      	mov	r0, r6
 800e088:	3501      	adds	r5, #1
 800e08a:	f007 fadd 	bl	8015648 <put_memory>
 800e08e:	42af      	cmp	r7, r5
 800e090:	60a4      	str	r4, [r4, #8]
 800e092:	f884 800c 	strb.w	r8, [r4, #12]
 800e096:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e09a:	d1f3      	bne.n	800e084 <rmw_uxrce_init_service_memory+0x20>
 800e09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop

0800e0a4 <rmw_uxrce_init_client_memory>:
 800e0a4:	b1e2      	cbz	r2, 800e0e0 <rmw_uxrce_init_client_memory+0x3c>
 800e0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0aa:	7b05      	ldrb	r5, [r0, #12]
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	b9ad      	cbnz	r5, 800e0dc <rmw_uxrce_init_client_memory+0x38>
 800e0b0:	23c8      	movs	r3, #200	@ 0xc8
 800e0b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e0b6:	6083      	str	r3, [r0, #8]
 800e0b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e0bc:	4617      	mov	r7, r2
 800e0be:	8183      	strh	r3, [r0, #12]
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	46a8      	mov	r8, r5
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	3501      	adds	r5, #1
 800e0ca:	f007 fabd 	bl	8015648 <put_memory>
 800e0ce:	42af      	cmp	r7, r5
 800e0d0:	60a4      	str	r4, [r4, #8]
 800e0d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e0d6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e0da:	d1f3      	bne.n	800e0c4 <rmw_uxrce_init_client_memory+0x20>
 800e0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop

0800e0e4 <rmw_uxrce_init_publisher_memory>:
 800e0e4:	b1e2      	cbz	r2, 800e120 <rmw_uxrce_init_publisher_memory+0x3c>
 800e0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ea:	7b05      	ldrb	r5, [r0, #12]
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	b9ad      	cbnz	r5, 800e11c <rmw_uxrce_init_publisher_memory+0x38>
 800e0f0:	23d8      	movs	r3, #216	@ 0xd8
 800e0f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e0f6:	6083      	str	r3, [r0, #8]
 800e0f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e0fc:	4617      	mov	r7, r2
 800e0fe:	8183      	strh	r3, [r0, #12]
 800e100:	460c      	mov	r4, r1
 800e102:	46a8      	mov	r8, r5
 800e104:	4621      	mov	r1, r4
 800e106:	4630      	mov	r0, r6
 800e108:	3501      	adds	r5, #1
 800e10a:	f007 fa9d 	bl	8015648 <put_memory>
 800e10e:	42af      	cmp	r7, r5
 800e110:	60a4      	str	r4, [r4, #8]
 800e112:	f884 800c 	strb.w	r8, [r4, #12]
 800e116:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e11a:	d1f3      	bne.n	800e104 <rmw_uxrce_init_publisher_memory+0x20>
 800e11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop

0800e124 <rmw_uxrce_init_subscription_memory>:
 800e124:	b1e2      	cbz	r2, 800e160 <rmw_uxrce_init_subscription_memory+0x3c>
 800e126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e12a:	7b05      	ldrb	r5, [r0, #12]
 800e12c:	4606      	mov	r6, r0
 800e12e:	b9ad      	cbnz	r5, 800e15c <rmw_uxrce_init_subscription_memory+0x38>
 800e130:	23d8      	movs	r3, #216	@ 0xd8
 800e132:	e9c0 5500 	strd	r5, r5, [r0]
 800e136:	6083      	str	r3, [r0, #8]
 800e138:	f240 1301 	movw	r3, #257	@ 0x101
 800e13c:	4617      	mov	r7, r2
 800e13e:	8183      	strh	r3, [r0, #12]
 800e140:	460c      	mov	r4, r1
 800e142:	46a8      	mov	r8, r5
 800e144:	4621      	mov	r1, r4
 800e146:	4630      	mov	r0, r6
 800e148:	3501      	adds	r5, #1
 800e14a:	f007 fa7d 	bl	8015648 <put_memory>
 800e14e:	42af      	cmp	r7, r5
 800e150:	60a4      	str	r4, [r4, #8]
 800e152:	f884 800c 	strb.w	r8, [r4, #12]
 800e156:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e15a:	d1f3      	bne.n	800e144 <rmw_uxrce_init_subscription_memory+0x20>
 800e15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop

0800e164 <rmw_uxrce_init_node_memory>:
 800e164:	b1e2      	cbz	r2, 800e1a0 <rmw_uxrce_init_node_memory+0x3c>
 800e166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16a:	7b05      	ldrb	r5, [r0, #12]
 800e16c:	4606      	mov	r6, r0
 800e16e:	b9ad      	cbnz	r5, 800e19c <rmw_uxrce_init_node_memory+0x38>
 800e170:	23a4      	movs	r3, #164	@ 0xa4
 800e172:	e9c0 5500 	strd	r5, r5, [r0]
 800e176:	6083      	str	r3, [r0, #8]
 800e178:	f240 1301 	movw	r3, #257	@ 0x101
 800e17c:	4617      	mov	r7, r2
 800e17e:	8183      	strh	r3, [r0, #12]
 800e180:	460c      	mov	r4, r1
 800e182:	46a8      	mov	r8, r5
 800e184:	4621      	mov	r1, r4
 800e186:	4630      	mov	r0, r6
 800e188:	3501      	adds	r5, #1
 800e18a:	f007 fa5d 	bl	8015648 <put_memory>
 800e18e:	42af      	cmp	r7, r5
 800e190:	60a4      	str	r4, [r4, #8]
 800e192:	f884 800c 	strb.w	r8, [r4, #12]
 800e196:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e19a:	d1f3      	bne.n	800e184 <rmw_uxrce_init_node_memory+0x20>
 800e19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop

0800e1a4 <rmw_uxrce_init_session_memory>:
 800e1a4:	b1ea      	cbz	r2, 800e1e2 <rmw_uxrce_init_session_memory+0x3e>
 800e1a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1aa:	7b05      	ldrb	r5, [r0, #12]
 800e1ac:	4606      	mov	r6, r0
 800e1ae:	b9b5      	cbnz	r5, 800e1de <rmw_uxrce_init_session_memory+0x3a>
 800e1b0:	e9c0 5500 	strd	r5, r5, [r0]
 800e1b4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e1b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e1bc:	4617      	mov	r7, r2
 800e1be:	f8c0 8008 	str.w	r8, [r0, #8]
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	8183      	strh	r3, [r0, #12]
 800e1c6:	46a9      	mov	r9, r5
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	3501      	adds	r5, #1
 800e1ce:	f007 fa3b 	bl	8015648 <put_memory>
 800e1d2:	42af      	cmp	r7, r5
 800e1d4:	60a4      	str	r4, [r4, #8]
 800e1d6:	f884 900c 	strb.w	r9, [r4, #12]
 800e1da:	4444      	add	r4, r8
 800e1dc:	d1f4      	bne.n	800e1c8 <rmw_uxrce_init_session_memory+0x24>
 800e1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e2:	4770      	bx	lr

0800e1e4 <rmw_uxrce_init_topic_memory>:
 800e1e4:	b1e2      	cbz	r2, 800e220 <rmw_uxrce_init_topic_memory+0x3c>
 800e1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ea:	7b05      	ldrb	r5, [r0, #12]
 800e1ec:	4606      	mov	r6, r0
 800e1ee:	b9ad      	cbnz	r5, 800e21c <rmw_uxrce_init_topic_memory+0x38>
 800e1f0:	231c      	movs	r3, #28
 800e1f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e1f6:	6083      	str	r3, [r0, #8]
 800e1f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e1fc:	4617      	mov	r7, r2
 800e1fe:	8183      	strh	r3, [r0, #12]
 800e200:	460c      	mov	r4, r1
 800e202:	46a8      	mov	r8, r5
 800e204:	4621      	mov	r1, r4
 800e206:	4630      	mov	r0, r6
 800e208:	3501      	adds	r5, #1
 800e20a:	f007 fa1d 	bl	8015648 <put_memory>
 800e20e:	42af      	cmp	r7, r5
 800e210:	60a4      	str	r4, [r4, #8]
 800e212:	f884 800c 	strb.w	r8, [r4, #12]
 800e216:	f104 041c 	add.w	r4, r4, #28
 800e21a:	d1f3      	bne.n	800e204 <rmw_uxrce_init_topic_memory+0x20>
 800e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop

0800e224 <rmw_uxrce_init_static_input_buffer_memory>:
 800e224:	b1ea      	cbz	r2, 800e262 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22a:	7b05      	ldrb	r5, [r0, #12]
 800e22c:	4606      	mov	r6, r0
 800e22e:	b9b5      	cbnz	r5, 800e25e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e230:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e234:	e9c0 5500 	strd	r5, r5, [r0]
 800e238:	6083      	str	r3, [r0, #8]
 800e23a:	f240 1301 	movw	r3, #257	@ 0x101
 800e23e:	4617      	mov	r7, r2
 800e240:	8183      	strh	r3, [r0, #12]
 800e242:	460c      	mov	r4, r1
 800e244:	46a8      	mov	r8, r5
 800e246:	4621      	mov	r1, r4
 800e248:	4630      	mov	r0, r6
 800e24a:	3501      	adds	r5, #1
 800e24c:	f007 f9fc 	bl	8015648 <put_memory>
 800e250:	42af      	cmp	r7, r5
 800e252:	60a4      	str	r4, [r4, #8]
 800e254:	f884 800c 	strb.w	r8, [r4, #12]
 800e258:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e25c:	d1f3      	bne.n	800e246 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e262:	4770      	bx	lr

0800e264 <rmw_uxrce_init_init_options_impl_memory>:
 800e264:	b1e2      	cbz	r2, 800e2a0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26a:	7b05      	ldrb	r5, [r0, #12]
 800e26c:	4606      	mov	r6, r0
 800e26e:	b9ad      	cbnz	r5, 800e29c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e270:	232c      	movs	r3, #44	@ 0x2c
 800e272:	e9c0 5500 	strd	r5, r5, [r0]
 800e276:	6083      	str	r3, [r0, #8]
 800e278:	f240 1301 	movw	r3, #257	@ 0x101
 800e27c:	4617      	mov	r7, r2
 800e27e:	8183      	strh	r3, [r0, #12]
 800e280:	460c      	mov	r4, r1
 800e282:	46a8      	mov	r8, r5
 800e284:	4621      	mov	r1, r4
 800e286:	4630      	mov	r0, r6
 800e288:	3501      	adds	r5, #1
 800e28a:	f007 f9dd 	bl	8015648 <put_memory>
 800e28e:	42af      	cmp	r7, r5
 800e290:	60a4      	str	r4, [r4, #8]
 800e292:	f884 800c 	strb.w	r8, [r4, #12]
 800e296:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e29a:	d1f3      	bne.n	800e284 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <rmw_uxrce_init_wait_set_memory>:
 800e2a4:	b1e2      	cbz	r2, 800e2e0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2aa:	7b05      	ldrb	r5, [r0, #12]
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	b9ad      	cbnz	r5, 800e2dc <rmw_uxrce_init_wait_set_memory+0x38>
 800e2b0:	231c      	movs	r3, #28
 800e2b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e2b6:	6083      	str	r3, [r0, #8]
 800e2b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e2bc:	4617      	mov	r7, r2
 800e2be:	8183      	strh	r3, [r0, #12]
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	46a8      	mov	r8, r5
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	f007 f9bd 	bl	8015648 <put_memory>
 800e2ce:	42af      	cmp	r7, r5
 800e2d0:	60a4      	str	r4, [r4, #8]
 800e2d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e2d6:	f104 041c 	add.w	r4, r4, #28
 800e2da:	d1f3      	bne.n	800e2c4 <rmw_uxrce_init_wait_set_memory+0x20>
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop

0800e2e4 <rmw_uxrce_init_guard_condition_memory>:
 800e2e4:	b1e2      	cbz	r2, 800e320 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ea:	7b05      	ldrb	r5, [r0, #12]
 800e2ec:	4606      	mov	r6, r0
 800e2ee:	b9ad      	cbnz	r5, 800e31c <rmw_uxrce_init_guard_condition_memory+0x38>
 800e2f0:	2320      	movs	r3, #32
 800e2f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e2f6:	6083      	str	r3, [r0, #8]
 800e2f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e2fc:	4617      	mov	r7, r2
 800e2fe:	8183      	strh	r3, [r0, #12]
 800e300:	460c      	mov	r4, r1
 800e302:	46a8      	mov	r8, r5
 800e304:	4621      	mov	r1, r4
 800e306:	4630      	mov	r0, r6
 800e308:	3501      	adds	r5, #1
 800e30a:	f007 f99d 	bl	8015648 <put_memory>
 800e30e:	42af      	cmp	r7, r5
 800e310:	60a4      	str	r4, [r4, #8]
 800e312:	f884 800c 	strb.w	r8, [r4, #12]
 800e316:	f104 0420 	add.w	r4, r4, #32
 800e31a:	d1f3      	bne.n	800e304 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <rmw_uxrce_fini_session_memory>:
 800e324:	4601      	mov	r1, r0
 800e326:	4801      	ldr	r0, [pc, #4]	@ (800e32c <rmw_uxrce_fini_session_memory+0x8>)
 800e328:	f007 b98e 	b.w	8015648 <put_memory>
 800e32c:	2000ae1c 	.word	0x2000ae1c

0800e330 <rmw_uxrce_fini_node_memory>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	6800      	ldr	r0, [r0, #0]
 800e336:	b128      	cbz	r0, 800e344 <rmw_uxrce_fini_node_memory+0x14>
 800e338:	4b07      	ldr	r3, [pc, #28]	@ (800e358 <rmw_uxrce_fini_node_memory+0x28>)
 800e33a:	6819      	ldr	r1, [r3, #0]
 800e33c:	f7f1 ff70 	bl	8000220 <strcmp>
 800e340:	b940      	cbnz	r0, 800e354 <rmw_uxrce_fini_node_memory+0x24>
 800e342:	6020      	str	r0, [r4, #0]
 800e344:	6861      	ldr	r1, [r4, #4]
 800e346:	b129      	cbz	r1, 800e354 <rmw_uxrce_fini_node_memory+0x24>
 800e348:	2500      	movs	r5, #0
 800e34a:	4804      	ldr	r0, [pc, #16]	@ (800e35c <rmw_uxrce_fini_node_memory+0x2c>)
 800e34c:	610d      	str	r5, [r1, #16]
 800e34e:	f007 f97b 	bl	8015648 <put_memory>
 800e352:	6065      	str	r5, [r4, #4]
 800e354:	bd38      	pop	{r3, r4, r5, pc}
 800e356:	bf00      	nop
 800e358:	080196a8 	.word	0x080196a8
 800e35c:	2000adec 	.word	0x2000adec

0800e360 <rmw_uxrce_fini_publisher_memory>:
 800e360:	b510      	push	{r4, lr}
 800e362:	4604      	mov	r4, r0
 800e364:	6800      	ldr	r0, [r0, #0]
 800e366:	b128      	cbz	r0, 800e374 <rmw_uxrce_fini_publisher_memory+0x14>
 800e368:	4b06      	ldr	r3, [pc, #24]	@ (800e384 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e36a:	6819      	ldr	r1, [r3, #0]
 800e36c:	f7f1 ff58 	bl	8000220 <strcmp>
 800e370:	b938      	cbnz	r0, 800e382 <rmw_uxrce_fini_publisher_memory+0x22>
 800e372:	6020      	str	r0, [r4, #0]
 800e374:	6861      	ldr	r1, [r4, #4]
 800e376:	b121      	cbz	r1, 800e382 <rmw_uxrce_fini_publisher_memory+0x22>
 800e378:	4803      	ldr	r0, [pc, #12]	@ (800e388 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e37a:	f007 f965 	bl	8015648 <put_memory>
 800e37e:	2300      	movs	r3, #0
 800e380:	6063      	str	r3, [r4, #4]
 800e382:	bd10      	pop	{r4, pc}
 800e384:	080196a8 	.word	0x080196a8
 800e388:	2000adfc 	.word	0x2000adfc

0800e38c <rmw_uxrce_fini_subscription_memory>:
 800e38c:	b510      	push	{r4, lr}
 800e38e:	4604      	mov	r4, r0
 800e390:	6800      	ldr	r0, [r0, #0]
 800e392:	b128      	cbz	r0, 800e3a0 <rmw_uxrce_fini_subscription_memory+0x14>
 800e394:	4b06      	ldr	r3, [pc, #24]	@ (800e3b0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e396:	6819      	ldr	r1, [r3, #0]
 800e398:	f7f1 ff42 	bl	8000220 <strcmp>
 800e39c:	b938      	cbnz	r0, 800e3ae <rmw_uxrce_fini_subscription_memory+0x22>
 800e39e:	6020      	str	r0, [r4, #0]
 800e3a0:	6861      	ldr	r1, [r4, #4]
 800e3a2:	b121      	cbz	r1, 800e3ae <rmw_uxrce_fini_subscription_memory+0x22>
 800e3a4:	4803      	ldr	r0, [pc, #12]	@ (800e3b4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e3a6:	f007 f94f 	bl	8015648 <put_memory>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	6063      	str	r3, [r4, #4]
 800e3ae:	bd10      	pop	{r4, pc}
 800e3b0:	080196a8 	.word	0x080196a8
 800e3b4:	2000ae3c 	.word	0x2000ae3c

0800e3b8 <rmw_uxrce_fini_service_memory>:
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	6800      	ldr	r0, [r0, #0]
 800e3be:	b128      	cbz	r0, 800e3cc <rmw_uxrce_fini_service_memory+0x14>
 800e3c0:	4b06      	ldr	r3, [pc, #24]	@ (800e3dc <rmw_uxrce_fini_service_memory+0x24>)
 800e3c2:	6819      	ldr	r1, [r3, #0]
 800e3c4:	f7f1 ff2c 	bl	8000220 <strcmp>
 800e3c8:	b938      	cbnz	r0, 800e3da <rmw_uxrce_fini_service_memory+0x22>
 800e3ca:	6020      	str	r0, [r4, #0]
 800e3cc:	6861      	ldr	r1, [r4, #4]
 800e3ce:	b121      	cbz	r1, 800e3da <rmw_uxrce_fini_service_memory+0x22>
 800e3d0:	4803      	ldr	r0, [pc, #12]	@ (800e3e0 <rmw_uxrce_fini_service_memory+0x28>)
 800e3d2:	f007 f939 	bl	8015648 <put_memory>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	6063      	str	r3, [r4, #4]
 800e3da:	bd10      	pop	{r4, pc}
 800e3dc:	080196a8 	.word	0x080196a8
 800e3e0:	2000ae0c 	.word	0x2000ae0c

0800e3e4 <rmw_uxrce_fini_client_memory>:
 800e3e4:	b510      	push	{r4, lr}
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	6800      	ldr	r0, [r0, #0]
 800e3ea:	b128      	cbz	r0, 800e3f8 <rmw_uxrce_fini_client_memory+0x14>
 800e3ec:	4b06      	ldr	r3, [pc, #24]	@ (800e408 <rmw_uxrce_fini_client_memory+0x24>)
 800e3ee:	6819      	ldr	r1, [r3, #0]
 800e3f0:	f7f1 ff16 	bl	8000220 <strcmp>
 800e3f4:	b938      	cbnz	r0, 800e406 <rmw_uxrce_fini_client_memory+0x22>
 800e3f6:	6020      	str	r0, [r4, #0]
 800e3f8:	6861      	ldr	r1, [r4, #4]
 800e3fa:	b121      	cbz	r1, 800e406 <rmw_uxrce_fini_client_memory+0x22>
 800e3fc:	4803      	ldr	r0, [pc, #12]	@ (800e40c <rmw_uxrce_fini_client_memory+0x28>)
 800e3fe:	f007 f923 	bl	8015648 <put_memory>
 800e402:	2300      	movs	r3, #0
 800e404:	6063      	str	r3, [r4, #4]
 800e406:	bd10      	pop	{r4, pc}
 800e408:	080196a8 	.word	0x080196a8
 800e40c:	2000651c 	.word	0x2000651c

0800e410 <rmw_uxrce_fini_topic_memory>:
 800e410:	b510      	push	{r4, lr}
 800e412:	4604      	mov	r4, r0
 800e414:	4621      	mov	r1, r4
 800e416:	4803      	ldr	r0, [pc, #12]	@ (800e424 <rmw_uxrce_fini_topic_memory+0x14>)
 800e418:	f007 f916 	bl	8015648 <put_memory>
 800e41c:	2300      	movs	r3, #0
 800e41e:	61a3      	str	r3, [r4, #24]
 800e420:	bd10      	pop	{r4, pc}
 800e422:	bf00      	nop
 800e424:	2000ae4c 	.word	0x2000ae4c

0800e428 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e428:	b082      	sub	sp, #8
 800e42a:	b530      	push	{r4, r5, lr}
 800e42c:	4925      	ldr	r1, [pc, #148]	@ (800e4c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e42e:	680d      	ldr	r5, [r1, #0]
 800e430:	ac03      	add	r4, sp, #12
 800e432:	e884 000c 	stmia.w	r4, {r2, r3}
 800e436:	461c      	mov	r4, r3
 800e438:	2d00      	cmp	r5, #0
 800e43a:	d041      	beq.n	800e4c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e43c:	462b      	mov	r3, r5
 800e43e:	2100      	movs	r1, #0
 800e440:	689a      	ldr	r2, [r3, #8]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e448:	4290      	cmp	r0, r2
 800e44a:	bf08      	it	eq
 800e44c:	3101      	addeq	r1, #1
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1f6      	bne.n	800e440 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e452:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e456:	2b02      	cmp	r3, #2
 800e458:	d029      	beq.n	800e4ae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e45a:	d907      	bls.n	800e46c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e45c:	2b03      	cmp	r3, #3
 800e45e:	d005      	beq.n	800e46c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e460:	2100      	movs	r1, #0
 800e462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e466:	4608      	mov	r0, r1
 800e468:	b002      	add	sp, #8
 800e46a:	4770      	bx	lr
 800e46c:	b314      	cbz	r4, 800e4b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e46e:	428c      	cmp	r4, r1
 800e470:	d820      	bhi.n	800e4b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e472:	2d00      	cmp	r5, #0
 800e474:	d0f4      	beq.n	800e460 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e476:	2100      	movs	r1, #0
 800e478:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e47c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e480:	e002      	b.n	800e488 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e482:	686d      	ldr	r5, [r5, #4]
 800e484:	2d00      	cmp	r5, #0
 800e486:	d0ec      	beq.n	800e462 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e488:	68ab      	ldr	r3, [r5, #8]
 800e48a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e48e:	4290      	cmp	r0, r2
 800e490:	d1f7      	bne.n	800e482 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e492:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e496:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e49a:	4562      	cmp	r2, ip
 800e49c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e4a0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e4a4:	daed      	bge.n	800e482 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e4a6:	4694      	mov	ip, r2
 800e4a8:	461c      	mov	r4, r3
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	e7e9      	b.n	800e482 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e4ae:	b10c      	cbz	r4, 800e4b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e4b0:	428c      	cmp	r4, r1
 800e4b2:	d9d5      	bls.n	800e460 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4b8:	4802      	ldr	r0, [pc, #8]	@ (800e4c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e4ba:	b002      	add	sp, #8
 800e4bc:	f007 b8b4 	b.w	8015628 <get_memory>
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	e7c6      	b.n	800e452 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e4c4:	2000ae2c 	.word	0x2000ae2c

0800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e4c8:	4b11      	ldr	r3, [pc, #68]	@ (800e510 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	b530      	push	{r4, r5, lr}
 800e4ce:	b1e3      	cbz	r3, 800e50a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e4d0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e4d4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e4d8:	2400      	movs	r4, #0
 800e4da:	e001      	b.n	800e4e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	b193      	cbz	r3, 800e506 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e4e0:	689a      	ldr	r2, [r3, #8]
 800e4e2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e4e6:	4288      	cmp	r0, r1
 800e4e8:	d1f8      	bne.n	800e4dc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e4ea:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e4ee:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e4f2:	4571      	cmp	r1, lr
 800e4f4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e4f8:	daf0      	bge.n	800e4dc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e4fa:	461c      	mov	r4, r3
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	468e      	mov	lr, r1
 800e500:	4694      	mov	ip, r2
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1ec      	bne.n	800e4e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e506:	4620      	mov	r0, r4
 800e508:	bd30      	pop	{r4, r5, pc}
 800e50a:	461c      	mov	r4, r3
 800e50c:	4620      	mov	r0, r4
 800e50e:	bd30      	pop	{r4, r5, pc}
 800e510:	2000ae2c 	.word	0x2000ae2c
 800e514:	00000000 	.word	0x00000000

0800e518 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	4b3c      	ldr	r3, [pc, #240]	@ (800e610 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e51e:	ed2d 8b06 	vpush	{d8-d10}
 800e522:	681f      	ldr	r7, [r3, #0]
 800e524:	b08d      	sub	sp, #52	@ 0x34
 800e526:	f007 fc9b 	bl	8015e60 <rmw_uros_epoch_nanos>
 800e52a:	2f00      	cmp	r7, #0
 800e52c:	d05d      	beq.n	800e5ea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e52e:	46b8      	mov	r8, r7
 800e530:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e5f8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e534:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e538:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e600 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e542:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e608 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e546:	4681      	mov	r9, r0
 800e548:	468a      	mov	sl, r1
 800e54a:	ac04      	add	r4, sp, #16
 800e54c:	d03f      	beq.n	800e5ce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e54e:	2b05      	cmp	r3, #5
 800e550:	d044      	beq.n	800e5dc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e552:	2b03      	cmp	r3, #3
 800e554:	d03b      	beq.n	800e5ce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e556:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e55a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e55e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e562:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e566:	ab08      	add	r3, sp, #32
 800e568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e56a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e56e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e572:	f006 fda5 	bl	80150c0 <rmw_time_equal>
 800e576:	b118      	cbz	r0, 800e580 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e578:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e57c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e580:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e584:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e588:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e58c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e590:	f006 fdea 	bl	8015168 <rmw_time_total_nsec>
 800e594:	1830      	adds	r0, r6, r0
 800e596:	eb47 0101 	adc.w	r1, r7, r1
 800e59a:	4548      	cmp	r0, r9
 800e59c:	eb71 030a 	sbcs.w	r3, r1, sl
 800e5a0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e5a4:	db05      	blt.n	800e5b2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e5a6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e5aa:	4591      	cmp	r9, r2
 800e5ac:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e5b0:	da03      	bge.n	800e5ba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e5b2:	4817      	ldr	r0, [pc, #92]	@ (800e610 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e5b4:	4641      	mov	r1, r8
 800e5b6:	f007 f847 	bl	8015648 <put_memory>
 800e5ba:	f1bb 0f00 	cmp.w	fp, #0
 800e5be:	d014      	beq.n	800e5ea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e5c0:	46d8      	mov	r8, fp
 800e5c2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e5c6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e5ca:	2b04      	cmp	r3, #4
 800e5cc:	d1bf      	bne.n	800e54e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e5ce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e5d2:	3340      	adds	r3, #64	@ 0x40
 800e5d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e5d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e5da:	e7c0      	b.n	800e55e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e5dc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e5e0:	3348      	adds	r3, #72	@ 0x48
 800e5e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e5e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e5e8:	e7b9      	b.n	800e55e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e5ea:	b00d      	add	sp, #52	@ 0x34
 800e5ec:	ecbd 8b06 	vpop	{d8-d10}
 800e5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f4:	f3af 8000 	nop.w
	...
 800e600:	00000001 	.word	0x00000001
 800e604:	00000000 	.word	0x00000000
 800e608:	0000001e 	.word	0x0000001e
 800e60c:	00000000 	.word	0x00000000
 800e610:	2000ae2c 	.word	0x2000ae2c

0800e614 <run_xrce_session>:
 800e614:	b510      	push	{r4, lr}
 800e616:	788c      	ldrb	r4, [r1, #2]
 800e618:	b086      	sub	sp, #24
 800e61a:	2c01      	cmp	r4, #1
 800e61c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e620:	d00c      	beq.n	800e63c <run_xrce_session+0x28>
 800e622:	4619      	mov	r1, r3
 800e624:	2301      	movs	r3, #1
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	f10d 020e 	add.w	r2, sp, #14
 800e62c:	f10d 0317 	add.w	r3, sp, #23
 800e630:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e634:	f001 f932 	bl	800f89c <uxr_run_session_until_all_status>
 800e638:	b006      	add	sp, #24
 800e63a:	bd10      	pop	{r4, pc}
 800e63c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e640:	f000 fd46 	bl	800f0d0 <uxr_flash_output_streams>
 800e644:	4620      	mov	r0, r4
 800e646:	b006      	add	sp, #24
 800e648:	bd10      	pop	{r4, pc}
 800e64a:	bf00      	nop

0800e64c <convert_qos_profile>:
 800e64c:	7a4a      	ldrb	r2, [r1, #9]
 800e64e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e652:	2a02      	cmp	r2, #2
 800e654:	bf18      	it	ne
 800e656:	2200      	movne	r2, #0
 800e658:	7002      	strb	r2, [r0, #0]
 800e65a:	780a      	ldrb	r2, [r1, #0]
 800e65c:	8889      	ldrh	r1, [r1, #4]
 800e65e:	8081      	strh	r1, [r0, #4]
 800e660:	f1ac 0c02 	sub.w	ip, ip, #2
 800e664:	f1a2 0202 	sub.w	r2, r2, #2
 800e668:	fabc fc8c 	clz	ip, ip
 800e66c:	fab2 f282 	clz	r2, r2
 800e670:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e674:	0952      	lsrs	r2, r2, #5
 800e676:	f880 c001 	strb.w	ip, [r0, #1]
 800e67a:	7082      	strb	r2, [r0, #2]
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop

0800e680 <generate_type_name>:
 800e680:	b530      	push	{r4, r5, lr}
 800e682:	2300      	movs	r3, #0
 800e684:	700b      	strb	r3, [r1, #0]
 800e686:	6803      	ldr	r3, [r0, #0]
 800e688:	b087      	sub	sp, #28
 800e68a:	4614      	mov	r4, r2
 800e68c:	b1d3      	cbz	r3, 800e6c4 <generate_type_name+0x44>
 800e68e:	4a0f      	ldr	r2, [pc, #60]	@ (800e6cc <generate_type_name+0x4c>)
 800e690:	4615      	mov	r5, r2
 800e692:	9203      	str	r2, [sp, #12]
 800e694:	9500      	str	r5, [sp, #0]
 800e696:	6842      	ldr	r2, [r0, #4]
 800e698:	480d      	ldr	r0, [pc, #52]	@ (800e6d0 <generate_type_name+0x50>)
 800e69a:	9001      	str	r0, [sp, #4]
 800e69c:	4608      	mov	r0, r1
 800e69e:	490d      	ldr	r1, [pc, #52]	@ (800e6d4 <generate_type_name+0x54>)
 800e6a0:	9204      	str	r2, [sp, #16]
 800e6a2:	9105      	str	r1, [sp, #20]
 800e6a4:	9102      	str	r1, [sp, #8]
 800e6a6:	4a0c      	ldr	r2, [pc, #48]	@ (800e6d8 <generate_type_name+0x58>)
 800e6a8:	4621      	mov	r1, r4
 800e6aa:	f009 f9ab 	bl	8017a04 <sniprintf>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	db05      	blt.n	800e6be <generate_type_name+0x3e>
 800e6b2:	4284      	cmp	r4, r0
 800e6b4:	bfd4      	ite	le
 800e6b6:	2000      	movle	r0, #0
 800e6b8:	2001      	movgt	r0, #1
 800e6ba:	b007      	add	sp, #28
 800e6bc:	bd30      	pop	{r4, r5, pc}
 800e6be:	2000      	movs	r0, #0
 800e6c0:	b007      	add	sp, #28
 800e6c2:	bd30      	pop	{r4, r5, pc}
 800e6c4:	4b05      	ldr	r3, [pc, #20]	@ (800e6dc <generate_type_name+0x5c>)
 800e6c6:	4a01      	ldr	r2, [pc, #4]	@ (800e6cc <generate_type_name+0x4c>)
 800e6c8:	461d      	mov	r5, r3
 800e6ca:	e7e2      	b.n	800e692 <generate_type_name+0x12>
 800e6cc:	08018f0c 	.word	0x08018f0c
 800e6d0:	08018f24 	.word	0x08018f24
 800e6d4:	08018f20 	.word	0x08018f20
 800e6d8:	08018f10 	.word	0x08018f10
 800e6dc:	08019480 	.word	0x08019480

0800e6e0 <generate_topic_name>:
 800e6e0:	b510      	push	{r4, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	4614      	mov	r4, r2
 800e6e6:	9000      	str	r0, [sp, #0]
 800e6e8:	4b08      	ldr	r3, [pc, #32]	@ (800e70c <generate_topic_name+0x2c>)
 800e6ea:	4a09      	ldr	r2, [pc, #36]	@ (800e710 <generate_topic_name+0x30>)
 800e6ec:	4608      	mov	r0, r1
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	f009 f988 	bl	8017a04 <sniprintf>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	db05      	blt.n	800e704 <generate_topic_name+0x24>
 800e6f8:	4284      	cmp	r4, r0
 800e6fa:	bfd4      	ite	le
 800e6fc:	2000      	movle	r0, #0
 800e6fe:	2001      	movgt	r0, #1
 800e700:	b002      	add	sp, #8
 800e702:	bd10      	pop	{r4, pc}
 800e704:	2000      	movs	r0, #0
 800e706:	b002      	add	sp, #8
 800e708:	bd10      	pop	{r4, pc}
 800e70a:	bf00      	nop
 800e70c:	08018f30 	.word	0x08018f30
 800e710:	08018f28 	.word	0x08018f28

0800e714 <is_uxrce_rmw_identifier_valid>:
 800e714:	b510      	push	{r4, lr}
 800e716:	4604      	mov	r4, r0
 800e718:	b140      	cbz	r0, 800e72c <is_uxrce_rmw_identifier_valid+0x18>
 800e71a:	f006 ffed 	bl	80156f8 <rmw_get_implementation_identifier>
 800e71e:	4601      	mov	r1, r0
 800e720:	4620      	mov	r0, r4
 800e722:	f7f1 fd7d 	bl	8000220 <strcmp>
 800e726:	fab0 f080 	clz	r0, r0
 800e72a:	0940      	lsrs	r0, r0, #5
 800e72c:	bd10      	pop	{r4, pc}
 800e72e:	bf00      	nop

0800e730 <get_message_typesupport_handle>:
 800e730:	6883      	ldr	r3, [r0, #8]
 800e732:	4718      	bx	r3

0800e734 <get_message_typesupport_handle_function>:
 800e734:	b510      	push	{r4, lr}
 800e736:	4604      	mov	r4, r0
 800e738:	6800      	ldr	r0, [r0, #0]
 800e73a:	f7f1 fd71 	bl	8000220 <strcmp>
 800e73e:	2800      	cmp	r0, #0
 800e740:	bf0c      	ite	eq
 800e742:	4620      	moveq	r0, r4
 800e744:	2000      	movne	r0, #0
 800e746:	bd10      	pop	{r4, pc}

0800e748 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	6805      	ldr	r5, [r0, #0]
 800e74e:	4604      	mov	r4, r0
 800e750:	4628      	mov	r0, r5
 800e752:	460e      	mov	r6, r1
 800e754:	f7f1 fd64 	bl	8000220 <strcmp>
 800e758:	b1c8      	cbz	r0, 800e78e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e75a:	4b11      	ldr	r3, [pc, #68]	@ (800e7a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	429d      	cmp	r5, r3
 800e760:	d112      	bne.n	800e788 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e762:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e766:	f8d8 4000 	ldr.w	r4, [r8]
 800e76a:	b16c      	cbz	r4, 800e788 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e76c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e770:	2700      	movs	r7, #0
 800e772:	3d04      	subs	r5, #4
 800e774:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e778:	4631      	mov	r1, r6
 800e77a:	f7f1 fd51 	bl	8000220 <strcmp>
 800e77e:	00bb      	lsls	r3, r7, #2
 800e780:	b140      	cbz	r0, 800e794 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e782:	3701      	adds	r7, #1
 800e784:	42bc      	cmp	r4, r7
 800e786:	d1f5      	bne.n	800e774 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e788:	2000      	movs	r0, #0
 800e78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e78e:	4620      	mov	r0, r4
 800e790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e794:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e79c:	58d3      	ldr	r3, [r2, r3]
 800e79e:	4718      	bx	r3
 800e7a0:	200001d0 	.word	0x200001d0

0800e7a4 <geometry_msgs__msg__Twist__init>:
 800e7a4:	b570      	push	{r4, r5, r6, lr}
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	b1a8      	cbz	r0, 800e7d6 <geometry_msgs__msg__Twist__init+0x32>
 800e7aa:	f000 f82b 	bl	800e804 <geometry_msgs__msg__Vector3__init>
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	b140      	cbz	r0, 800e7c4 <geometry_msgs__msg__Twist__init+0x20>
 800e7b2:	f105 0618 	add.w	r6, r5, #24
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f000 f824 	bl	800e804 <geometry_msgs__msg__Vector3__init>
 800e7bc:	4604      	mov	r4, r0
 800e7be:	b168      	cbz	r0, 800e7dc <geometry_msgs__msg__Twist__init+0x38>
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	bd70      	pop	{r4, r5, r6, pc}
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	f000 f821 	bl	800e80c <geometry_msgs__msg__Vector3__fini>
 800e7ca:	f105 0018 	add.w	r0, r5, #24
 800e7ce:	f000 f81d 	bl	800e80c <geometry_msgs__msg__Vector3__fini>
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	4620      	mov	r0, r4
 800e7da:	bd70      	pop	{r4, r5, r6, pc}
 800e7dc:	4628      	mov	r0, r5
 800e7de:	f000 f815 	bl	800e80c <geometry_msgs__msg__Vector3__fini>
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f000 f812 	bl	800e80c <geometry_msgs__msg__Vector3__fini>
 800e7e8:	e7ea      	b.n	800e7c0 <geometry_msgs__msg__Twist__init+0x1c>
 800e7ea:	bf00      	nop

0800e7ec <geometry_msgs__msg__Twist__fini>:
 800e7ec:	b148      	cbz	r0, 800e802 <geometry_msgs__msg__Twist__fini+0x16>
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	f000 f80b 	bl	800e80c <geometry_msgs__msg__Vector3__fini>
 800e7f6:	f104 0018 	add.w	r0, r4, #24
 800e7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7fe:	f000 b805 	b.w	800e80c <geometry_msgs__msg__Vector3__fini>
 800e802:	4770      	bx	lr

0800e804 <geometry_msgs__msg__Vector3__init>:
 800e804:	3800      	subs	r0, #0
 800e806:	bf18      	it	ne
 800e808:	2001      	movne	r0, #1
 800e80a:	4770      	bx	lr

0800e80c <geometry_msgs__msg__Vector3__fini>:
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop

0800e810 <uxr_buffer_delete_entity>:
 800e810:	b510      	push	{r4, lr}
 800e812:	2300      	movs	r3, #0
 800e814:	b08e      	sub	sp, #56	@ 0x38
 800e816:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e81a:	2303      	movs	r3, #3
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	2204      	movs	r2, #4
 800e820:	ab06      	add	r3, sp, #24
 800e822:	4604      	mov	r4, r0
 800e824:	9103      	str	r1, [sp, #12]
 800e826:	f001 fa61 	bl	800fcec <uxr_prepare_stream_to_write_submessage>
 800e82a:	b918      	cbnz	r0, 800e834 <uxr_buffer_delete_entity+0x24>
 800e82c:	4604      	mov	r4, r0
 800e82e:	4620      	mov	r0, r4
 800e830:	b00e      	add	sp, #56	@ 0x38
 800e832:	bd10      	pop	{r4, pc}
 800e834:	9902      	ldr	r1, [sp, #8]
 800e836:	aa05      	add	r2, sp, #20
 800e838:	4620      	mov	r0, r4
 800e83a:	f001 fb8d 	bl	800ff58 <uxr_init_base_object_request>
 800e83e:	a905      	add	r1, sp, #20
 800e840:	4604      	mov	r4, r0
 800e842:	a806      	add	r0, sp, #24
 800e844:	f003 f984 	bl	8011b50 <uxr_serialize_DELETE_Payload>
 800e848:	4620      	mov	r0, r4
 800e84a:	b00e      	add	sp, #56	@ 0x38
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	bf00      	nop

0800e850 <uxr_common_create_entity>:
 800e850:	b510      	push	{r4, lr}
 800e852:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e856:	b08c      	sub	sp, #48	@ 0x30
 800e858:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e85c:	f1bc 0f01 	cmp.w	ip, #1
 800e860:	bf0c      	ite	eq
 800e862:	f003 0201 	andeq.w	r2, r3, #1
 800e866:	2200      	movne	r2, #0
 800e868:	330e      	adds	r3, #14
 800e86a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e86e:	9101      	str	r1, [sp, #4]
 800e870:	441a      	add	r2, r3
 800e872:	2301      	movs	r3, #1
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	9903      	ldr	r1, [sp, #12]
 800e878:	ab04      	add	r3, sp, #16
 800e87a:	b292      	uxth	r2, r2
 800e87c:	4604      	mov	r4, r0
 800e87e:	f001 fa35 	bl	800fcec <uxr_prepare_stream_to_write_submessage>
 800e882:	b918      	cbnz	r0, 800e88c <uxr_common_create_entity+0x3c>
 800e884:	4604      	mov	r4, r0
 800e886:	4620      	mov	r0, r4
 800e888:	b00c      	add	sp, #48	@ 0x30
 800e88a:	bd10      	pop	{r4, pc}
 800e88c:	9902      	ldr	r1, [sp, #8]
 800e88e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e890:	4620      	mov	r0, r4
 800e892:	f001 fb61 	bl	800ff58 <uxr_init_base_object_request>
 800e896:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e898:	4604      	mov	r4, r0
 800e89a:	a804      	add	r0, sp, #16
 800e89c:	f003 f8b4 	bl	8011a08 <uxr_serialize_CREATE_Payload>
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	b00c      	add	sp, #48	@ 0x30
 800e8a4:	bd10      	pop	{r4, pc}
 800e8a6:	bf00      	nop

0800e8a8 <uxr_buffer_create_participant_bin>:
 800e8a8:	b570      	push	{r4, r5, r6, lr}
 800e8aa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e8ae:	ac11      	add	r4, sp, #68	@ 0x44
 800e8b0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e8ba:	7223      	strb	r3, [r4, #8]
 800e8bc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e8be:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	7122      	strb	r2, [r4, #4]
 800e8ca:	f88d 1014 	strb.w	r1, [sp, #20]
 800e8ce:	b1cb      	cbz	r3, 800e904 <uxr_buffer_create_participant_bin+0x5c>
 800e8d0:	f88d 201c 	strb.w	r2, [sp, #28]
 800e8d4:	9308      	str	r3, [sp, #32]
 800e8d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8da:	a915      	add	r1, sp, #84	@ 0x54
 800e8dc:	a809      	add	r0, sp, #36	@ 0x24
 800e8de:	f7fd fb77 	bl	800bfd0 <ucdr_init_buffer>
 800e8e2:	a905      	add	r1, sp, #20
 800e8e4:	a809      	add	r0, sp, #36	@ 0x24
 800e8e6:	f002 fd5d 	bl	80113a4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e8ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8ec:	9600      	str	r6, [sp, #0]
 800e8ee:	9401      	str	r4, [sp, #4]
 800e8f0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e8f4:	60e3      	str	r3, [r4, #12]
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	f7ff ffa9 	bl	800e850 <uxr_common_create_entity>
 800e8fe:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	f88d 301c 	strb.w	r3, [sp, #28]
 800e908:	e7e5      	b.n	800e8d6 <uxr_buffer_create_participant_bin+0x2e>
 800e90a:	bf00      	nop

0800e90c <uxr_buffer_create_topic_bin>:
 800e90c:	b570      	push	{r4, r5, r6, lr}
 800e90e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e912:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e916:	9105      	str	r1, [sp, #20]
 800e918:	4605      	mov	r5, r0
 800e91a:	a997      	add	r1, sp, #604	@ 0x25c
 800e91c:	4618      	mov	r0, r3
 800e91e:	2302      	movs	r3, #2
 800e920:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e924:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e928:	f000 f9b0 	bl	800ec8c <uxr_object_id_to_raw>
 800e92c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e92e:	9306      	str	r3, [sp, #24]
 800e930:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e932:	930a      	str	r3, [sp, #40]	@ 0x28
 800e934:	2303      	movs	r3, #3
 800e936:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e93a:	2301      	movs	r3, #1
 800e93c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e940:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e944:	a917      	add	r1, sp, #92	@ 0x5c
 800e946:	2300      	movs	r3, #0
 800e948:	a80b      	add	r0, sp, #44	@ 0x2c
 800e94a:	f88d 301c 	strb.w	r3, [sp, #28]
 800e94e:	f7fd fb3f 	bl	800bfd0 <ucdr_init_buffer>
 800e952:	a906      	add	r1, sp, #24
 800e954:	a80b      	add	r0, sp, #44	@ 0x2c
 800e956:	f002 fd47 	bl	80113e8 <uxr_serialize_OBJK_Topic_Binary>
 800e95a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e95c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e95e:	ac13      	add	r4, sp, #76	@ 0x4c
 800e960:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e964:	9600      	str	r6, [sp, #0]
 800e966:	9401      	str	r4, [sp, #4]
 800e968:	b29b      	uxth	r3, r3
 800e96a:	4628      	mov	r0, r5
 800e96c:	f7ff ff70 	bl	800e850 <uxr_common_create_entity>
 800e970:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e974:	bd70      	pop	{r4, r5, r6, pc}
 800e976:	bf00      	nop

0800e978 <uxr_buffer_create_publisher_bin>:
 800e978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e97a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e97e:	4605      	mov	r5, r0
 800e980:	9105      	str	r1, [sp, #20]
 800e982:	4618      	mov	r0, r3
 800e984:	2603      	movs	r6, #3
 800e986:	a992      	add	r1, sp, #584	@ 0x248
 800e988:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e98c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e990:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e994:	f000 f97a 	bl	800ec8c <uxr_object_id_to_raw>
 800e998:	2300      	movs	r3, #0
 800e99a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e99e:	a912      	add	r1, sp, #72	@ 0x48
 800e9a0:	a806      	add	r0, sp, #24
 800e9a2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e9a6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e9aa:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e9ae:	f7fd fb0f 	bl	800bfd0 <ucdr_init_buffer>
 800e9b2:	a993      	add	r1, sp, #588	@ 0x24c
 800e9b4:	a806      	add	r0, sp, #24
 800e9b6:	f002 fdcb 	bl	8011550 <uxr_serialize_OBJK_Publisher_Binary>
 800e9ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9bc:	9311      	str	r3, [sp, #68]	@ 0x44
 800e9be:	ac0e      	add	r4, sp, #56	@ 0x38
 800e9c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e9c4:	9700      	str	r7, [sp, #0]
 800e9c6:	9401      	str	r4, [sp, #4]
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f7ff ff40 	bl	800e850 <uxr_common_create_entity>
 800e9d0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d6:	bf00      	nop

0800e9d8 <uxr_buffer_create_datawriter_bin>:
 800e9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9dc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e9e0:	ac1d      	add	r4, sp, #116	@ 0x74
 800e9e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e9e6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e9ea:	9105      	str	r1, [sp, #20]
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	a9a1      	add	r1, sp, #644	@ 0x284
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	2305      	movs	r3, #5
 800e9f4:	7123      	strb	r3, [r4, #4]
 800e9f6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e9fa:	2703      	movs	r7, #3
 800e9fc:	f000 f946 	bl	800ec8c <uxr_object_id_to_raw>
 800ea00:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800ea02:	7227      	strb	r7, [r4, #8]
 800ea04:	a90e      	add	r1, sp, #56	@ 0x38
 800ea06:	f000 f941 	bl	800ec8c <uxr_object_id_to_raw>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ea10:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800ea14:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ea18:	3d00      	subs	r5, #0
 800ea1a:	bf18      	it	ne
 800ea1c:	2501      	movne	r5, #1
 800ea1e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ea22:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ea26:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ea2a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ea2e:	2301      	movs	r3, #1
 800ea30:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ea34:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ea38:	bb8a      	cbnz	r2, 800ea9e <uxr_buffer_create_datawriter_bin+0xc6>
 800ea3a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ea3e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ea42:	f04f 0c13 	mov.w	ip, #19
 800ea46:	250b      	movs	r5, #11
 800ea48:	2221      	movs	r2, #33	@ 0x21
 800ea4a:	2111      	movs	r1, #17
 800ea4c:	2009      	movs	r0, #9
 800ea4e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800ea52:	b923      	cbnz	r3, 800ea5e <uxr_buffer_create_datawriter_bin+0x86>
 800ea54:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ea58:	4672      	mov	r2, lr
 800ea5a:	4661      	mov	r1, ip
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d025      	beq.n	800eab2 <uxr_buffer_create_datawriter_bin+0xda>
 800ea66:	2b03      	cmp	r3, #3
 800ea68:	d029      	beq.n	800eabe <uxr_buffer_create_datawriter_bin+0xe6>
 800ea6a:	b32b      	cbz	r3, 800eab8 <uxr_buffer_create_datawriter_bin+0xe0>
 800ea6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea70:	a921      	add	r1, sp, #132	@ 0x84
 800ea72:	a806      	add	r0, sp, #24
 800ea74:	f7fd faac 	bl	800bfd0 <ucdr_init_buffer>
 800ea78:	a90e      	add	r1, sp, #56	@ 0x38
 800ea7a:	a806      	add	r0, sp, #24
 800ea7c:	f002 fdde 	bl	801163c <uxr_serialize_OBJK_DataWriter_Binary>
 800ea80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea82:	f8cd 8000 	str.w	r8, [sp]
 800ea86:	9401      	str	r4, [sp, #4]
 800ea88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ea8c:	60e3      	str	r3, [r4, #12]
 800ea8e:	4630      	mov	r0, r6
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	f7ff fedd 	bl	800e850 <uxr_common_create_entity>
 800ea96:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ea9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800eaa2:	f04f 0c12 	mov.w	ip, #18
 800eaa6:	250a      	movs	r5, #10
 800eaa8:	2220      	movs	r2, #32
 800eaaa:	2110      	movs	r1, #16
 800eaac:	2008      	movs	r0, #8
 800eaae:	2702      	movs	r7, #2
 800eab0:	e7cd      	b.n	800ea4e <uxr_buffer_create_datawriter_bin+0x76>
 800eab2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800eab6:	e7d9      	b.n	800ea6c <uxr_buffer_create_datawriter_bin+0x94>
 800eab8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800eabc:	e7d6      	b.n	800ea6c <uxr_buffer_create_datawriter_bin+0x94>
 800eabe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800eac2:	e7d3      	b.n	800ea6c <uxr_buffer_create_datawriter_bin+0x94>

0800eac4 <get_custom_error>:
 800eac4:	4b01      	ldr	r3, [pc, #4]	@ (800eacc <get_custom_error+0x8>)
 800eac6:	7818      	ldrb	r0, [r3, #0]
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	2000ae6c 	.word	0x2000ae6c

0800ead0 <recv_custom_msg>:
 800ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	4693      	mov	fp, r2
 800ead6:	b089      	sub	sp, #36	@ 0x24
 800ead8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800eadc:	9305      	str	r3, [sp, #20]
 800eade:	468a      	mov	sl, r1
 800eae0:	2100      	movs	r1, #0
 800eae2:	4604      	mov	r4, r0
 800eae4:	f88d 101e 	strb.w	r1, [sp, #30]
 800eae8:	b322      	cbz	r2, 800eb34 <recv_custom_msg+0x64>
 800eaea:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800eaee:	f10d 081f 	add.w	r8, sp, #31
 800eaf2:	af05      	add	r7, sp, #20
 800eaf4:	f10d 061e 	add.w	r6, sp, #30
 800eaf8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800eafc:	e002      	b.n	800eb04 <recv_custom_msg+0x34>
 800eafe:	9b05      	ldr	r3, [sp, #20]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dd0f      	ble.n	800eb24 <recv_custom_msg+0x54>
 800eb04:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800eb08:	4623      	mov	r3, r4
 800eb0a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800eb0e:	e9cd 5600 	strd	r5, r6, [sp]
 800eb12:	4622      	mov	r2, r4
 800eb14:	4648      	mov	r0, r9
 800eb16:	f001 fc4d 	bl	80103b4 <uxr_read_framed_msg>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d0ef      	beq.n	800eafe <recv_custom_msg+0x2e>
 800eb1e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eb22:	b1b3      	cbz	r3, 800eb52 <recv_custom_msg+0x82>
 800eb24:	4b0f      	ldr	r3, [pc, #60]	@ (800eb64 <recv_custom_msg+0x94>)
 800eb26:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800eb2a:	701a      	strb	r2, [r3, #0]
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	b009      	add	sp, #36	@ 0x24
 800eb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb34:	f10d 021f 	add.w	r2, sp, #31
 800eb38:	9200      	str	r2, [sp, #0]
 800eb3a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800eb3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb42:	4601      	mov	r1, r0
 800eb44:	47a8      	blx	r5
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d0ec      	beq.n	800eb24 <recv_custom_msg+0x54>
 800eb4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1e8      	bne.n	800eb24 <recv_custom_msg+0x54>
 800eb52:	f8cb 0000 	str.w	r0, [fp]
 800eb56:	2001      	movs	r0, #1
 800eb58:	f8ca 4000 	str.w	r4, [sl]
 800eb5c:	b009      	add	sp, #36	@ 0x24
 800eb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb62:	bf00      	nop
 800eb64:	2000ae6c 	.word	0x2000ae6c

0800eb68 <send_custom_msg>:
 800eb68:	b530      	push	{r4, r5, lr}
 800eb6a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800eb6e:	b087      	sub	sp, #28
 800eb70:	4615      	mov	r5, r2
 800eb72:	b974      	cbnz	r4, 800eb92 <send_custom_msg+0x2a>
 800eb74:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800eb78:	f10d 0317 	add.w	r3, sp, #23
 800eb7c:	47a0      	blx	r4
 800eb7e:	b108      	cbz	r0, 800eb84 <send_custom_msg+0x1c>
 800eb80:	42a8      	cmp	r0, r5
 800eb82:	d015      	beq.n	800ebb0 <send_custom_msg+0x48>
 800eb84:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb8 <send_custom_msg+0x50>)
 800eb86:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800eb8a:	701a      	strb	r2, [r3, #0]
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	b007      	add	sp, #28
 800eb90:	bd30      	pop	{r4, r5, pc}
 800eb92:	460b      	mov	r3, r1
 800eb94:	2200      	movs	r2, #0
 800eb96:	f10d 0117 	add.w	r1, sp, #23
 800eb9a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800eb9e:	4602      	mov	r2, r0
 800eba0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800eba4:	9500      	str	r5, [sp, #0]
 800eba6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800ebaa:	f001 fa0b 	bl	800ffc4 <uxr_write_framed_msg>
 800ebae:	e7e6      	b.n	800eb7e <send_custom_msg+0x16>
 800ebb0:	2001      	movs	r0, #1
 800ebb2:	b007      	add	sp, #28
 800ebb4:	bd30      	pop	{r4, r5, pc}
 800ebb6:	bf00      	nop
 800ebb8:	2000ae6c 	.word	0x2000ae6c

0800ebbc <uxr_set_custom_transport_callbacks>:
 800ebbc:	b410      	push	{r4}
 800ebbe:	9c01      	ldr	r4, [sp, #4]
 800ebc0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800ebc4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800ebc8:	9b02      	ldr	r3, [sp, #8]
 800ebca:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800ebce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebd2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800ebd6:	4770      	bx	lr

0800ebd8 <uxr_init_custom_transport>:
 800ebd8:	b538      	push	{r3, r4, r5, lr}
 800ebda:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800ebde:	b303      	cbz	r3, 800ec22 <uxr_init_custom_transport+0x4a>
 800ebe0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	b1e2      	cbz	r2, 800ec22 <uxr_init_custom_transport+0x4a>
 800ebe8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800ebec:	b1ca      	cbz	r2, 800ec22 <uxr_init_custom_transport+0x4a>
 800ebee:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800ebf2:	b1b2      	cbz	r2, 800ec22 <uxr_init_custom_transport+0x4a>
 800ebf4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800ebf8:	4798      	blx	r3
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	b188      	cbz	r0, 800ec22 <uxr_init_custom_transport+0x4a>
 800ebfe:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ec02:	b98b      	cbnz	r3, 800ec28 <uxr_init_custom_transport+0x50>
 800ec04:	490b      	ldr	r1, [pc, #44]	@ (800ec34 <uxr_init_custom_transport+0x5c>)
 800ec06:	4b0c      	ldr	r3, [pc, #48]	@ (800ec38 <uxr_init_custom_transport+0x60>)
 800ec08:	4a0c      	ldr	r2, [pc, #48]	@ (800ec3c <uxr_init_custom_transport+0x64>)
 800ec0a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800ec0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec12:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800ec16:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ec1a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800ec1e:	4628      	mov	r0, r5
 800ec20:	bd38      	pop	{r3, r4, r5, pc}
 800ec22:	2500      	movs	r5, #0
 800ec24:	4628      	mov	r0, r5
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	2100      	movs	r1, #0
 800ec2a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ec2e:	f001 f9c3 	bl	800ffb8 <uxr_init_framing_io>
 800ec32:	e7e7      	b.n	800ec04 <uxr_init_custom_transport+0x2c>
 800ec34:	0800eb69 	.word	0x0800eb69
 800ec38:	0800ead1 	.word	0x0800ead1
 800ec3c:	0800eac5 	.word	0x0800eac5

0800ec40 <uxr_close_custom_transport>:
 800ec40:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ec44:	4718      	bx	r3
 800ec46:	bf00      	nop

0800ec48 <uxr_object_id>:
 800ec48:	b082      	sub	sp, #8
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	f88d 1006 	strb.w	r1, [sp, #6]
 800ec50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec54:	f360 030f 	bfi	r3, r0, #0, #16
 800ec58:	f362 431f 	bfi	r3, r2, #16, #16
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	b002      	add	sp, #8
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop

0800ec64 <uxr_object_id_from_raw>:
 800ec64:	7843      	ldrb	r3, [r0, #1]
 800ec66:	7801      	ldrb	r1, [r0, #0]
 800ec68:	b082      	sub	sp, #8
 800ec6a:	f003 020f 	and.w	r2, r3, #15
 800ec6e:	f88d 2006 	strb.w	r2, [sp, #6]
 800ec72:	091b      	lsrs	r3, r3, #4
 800ec74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec78:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ec7c:	2000      	movs	r0, #0
 800ec7e:	f363 000f 	bfi	r0, r3, #0, #16
 800ec82:	f362 401f 	bfi	r0, r2, #16, #16
 800ec86:	b002      	add	sp, #8
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop

0800ec8c <uxr_object_id_to_raw>:
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ec92:	b082      	sub	sp, #8
 800ec94:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ec98:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ec9c:	f881 c000 	strb.w	ip, [r1]
 800eca0:	7048      	strb	r0, [r1, #1]
 800eca2:	b002      	add	sp, #8
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop

0800eca8 <uxr_buffer_cancel_data>:
 800eca8:	b510      	push	{r4, lr}
 800ecaa:	b094      	sub	sp, #80	@ 0x50
 800ecac:	2300      	movs	r3, #0
 800ecae:	9202      	str	r2, [sp, #8]
 800ecb0:	9205      	str	r2, [sp, #20]
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ecba:	f88d 301e 	strb.w	r3, [sp, #30]
 800ecbe:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ecc2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ecc6:	2308      	movs	r3, #8
 800ecc8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	2210      	movs	r2, #16
 800ecd0:	ab0c      	add	r3, sp, #48	@ 0x30
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	9103      	str	r1, [sp, #12]
 800ecd6:	f001 f809 	bl	800fcec <uxr_prepare_stream_to_write_submessage>
 800ecda:	b918      	cbnz	r0, 800ece4 <uxr_buffer_cancel_data+0x3c>
 800ecdc:	4604      	mov	r4, r0
 800ecde:	4620      	mov	r0, r4
 800ece0:	b014      	add	sp, #80	@ 0x50
 800ece2:	bd10      	pop	{r4, pc}
 800ece4:	9905      	ldr	r1, [sp, #20]
 800ece6:	aa06      	add	r2, sp, #24
 800ece8:	4620      	mov	r0, r4
 800ecea:	f001 f935 	bl	800ff58 <uxr_init_base_object_request>
 800ecee:	a906      	add	r1, sp, #24
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	a80c      	add	r0, sp, #48	@ 0x30
 800ecf4:	f002 ffd6 	bl	8011ca4 <uxr_serialize_READ_DATA_Payload>
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	b014      	add	sp, #80	@ 0x50
 800ecfc:	bd10      	pop	{r4, pc}
 800ecfe:	bf00      	nop

0800ed00 <read_submessage_format>:
 800ed00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed04:	b095      	sub	sp, #84	@ 0x54
 800ed06:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ed0a:	b113      	cbz	r3, 800ed12 <read_submessage_format+0x12>
 800ed0c:	b015      	add	sp, #84	@ 0x54
 800ed0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed12:	460c      	mov	r4, r1
 800ed14:	4615      	mov	r5, r2
 800ed16:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ed1a:	4607      	mov	r7, r0
 800ed1c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ed1e:	9004      	str	r0, [sp, #16]
 800ed20:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ed22:	9005      	str	r0, [sp, #20]
 800ed24:	1a52      	subs	r2, r2, r1
 800ed26:	a80c      	add	r0, sp, #48	@ 0x30
 800ed28:	4699      	mov	r9, r3
 800ed2a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800ed2e:	f7fd f94f 	bl	800bfd0 <ucdr_init_buffer>
 800ed32:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ed36:	a80c      	add	r0, sp, #48	@ 0x30
 800ed38:	f7fd f91e 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 800ed3c:	69e2      	ldr	r2, [r4, #28]
 800ed3e:	b19a      	cbz	r2, 800ed68 <read_submessage_format+0x68>
 800ed40:	f1b8 0f07 	cmp.w	r8, #7
 800ed44:	f882 9014 	strb.w	r9, [r2, #20]
 800ed48:	d040      	beq.n	800edcc <read_submessage_format+0xcc>
 800ed4a:	f1b8 0f08 	cmp.w	r8, #8
 800ed4e:	d02e      	beq.n	800edae <read_submessage_format+0xae>
 800ed50:	f1b8 0f06 	cmp.w	r8, #6
 800ed54:	d011      	beq.n	800ed7a <read_submessage_format+0x7a>
 800ed56:	2301      	movs	r3, #1
 800ed58:	7513      	strb	r3, [r2, #20]
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f7fd f987 	bl	800c070 <ucdr_advance_buffer>
 800ed62:	b015      	add	sp, #84	@ 0x54
 800ed64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed68:	f1b8 0f07 	cmp.w	r8, #7
 800ed6c:	d02e      	beq.n	800edcc <read_submessage_format+0xcc>
 800ed6e:	f1b8 0f08 	cmp.w	r8, #8
 800ed72:	d01c      	beq.n	800edae <read_submessage_format+0xae>
 800ed74:	f1b8 0f06 	cmp.w	r8, #6
 800ed78:	d1ef      	bne.n	800ed5a <read_submessage_format+0x5a>
 800ed7a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800ed7e:	f1b8 0f00 	cmp.w	r8, #0
 800ed82:	d011      	beq.n	800eda8 <read_submessage_format+0xa8>
 800ed84:	ab0c      	add	r3, sp, #48	@ 0x30
 800ed86:	e9cd 3500 	strd	r3, r5, [sp]
 800ed8a:	2306      	movs	r3, #6
 800ed8c:	f88d 3016 	strb.w	r3, [sp, #22]
 800ed90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ed94:	9302      	str	r3, [sp, #8]
 800ed96:	4632      	mov	r2, r6
 800ed98:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ed9c:	4638      	mov	r0, r7
 800ed9e:	47c0      	blx	r8
 800eda0:	2301      	movs	r3, #1
 800eda2:	69e2      	ldr	r2, [r4, #28]
 800eda4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	d1d4      	bne.n	800ed56 <read_submessage_format+0x56>
 800edac:	e7d5      	b.n	800ed5a <read_submessage_format+0x5a>
 800edae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d0f8      	beq.n	800eda8 <read_submessage_format+0xa8>
 800edb6:	a906      	add	r1, sp, #24
 800edb8:	a80c      	add	r0, sp, #48	@ 0x30
 800edba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800edbe:	f003 f837 	bl	8011e30 <uxr_deserialize_SampleIdentity>
 800edc2:	b9a0      	cbnz	r0, 800edee <read_submessage_format+0xee>
 800edc4:	69e2      	ldr	r2, [r4, #28]
 800edc6:	2a00      	cmp	r2, #0
 800edc8:	d1c5      	bne.n	800ed56 <read_submessage_format+0x56>
 800edca:	e7c6      	b.n	800ed5a <read_submessage_format+0x5a>
 800edcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800edd0:	b13b      	cbz	r3, 800ede2 <read_submessage_format+0xe2>
 800edd2:	a906      	add	r1, sp, #24
 800edd4:	a80c      	add	r0, sp, #48	@ 0x30
 800edd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800edda:	f002 fcfd 	bl	80117d8 <uxr_deserialize_BaseObjectRequest>
 800edde:	bb60      	cbnz	r0, 800ee3a <read_submessage_format+0x13a>
 800ede0:	69e2      	ldr	r2, [r4, #28]
 800ede2:	68a3      	ldr	r3, [r4, #8]
 800ede4:	442b      	add	r3, r5
 800ede6:	60a3      	str	r3, [r4, #8]
 800ede8:	2a00      	cmp	r2, #0
 800edea:	d1b4      	bne.n	800ed56 <read_submessage_format+0x56>
 800edec:	e7b5      	b.n	800ed5a <read_submessage_format+0x5a>
 800edee:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800edf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800edf4:	1a52      	subs	r2, r2, r1
 800edf6:	eba8 0803 	sub.w	r8, r8, r3
 800edfa:	a80c      	add	r0, sp, #48	@ 0x30
 800edfc:	f7fd f8e8 	bl	800bfd0 <ucdr_init_buffer>
 800ee00:	44a8      	add	r8, r5
 800ee02:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ee06:	a80c      	add	r0, sp, #48	@ 0x30
 800ee08:	f7fd f8b6 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 800ee0c:	fa1f f888 	uxth.w	r8, r8
 800ee10:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	f8cd 8004 	str.w	r8, [sp, #4]
 800ee18:	2108      	movs	r1, #8
 800ee1a:	f88d 1016 	strb.w	r1, [sp, #22]
 800ee1e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800ee22:	9102      	str	r1, [sp, #8]
 800ee24:	ab06      	add	r3, sp, #24
 800ee26:	4632      	mov	r2, r6
 800ee28:	9905      	ldr	r1, [sp, #20]
 800ee2a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800ee2e:	4638      	mov	r0, r7
 800ee30:	47b0      	blx	r6
 800ee32:	2301      	movs	r3, #1
 800ee34:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ee38:	e7c4      	b.n	800edc4 <read_submessage_format+0xc4>
 800ee3a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ee3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee40:	1a52      	subs	r2, r2, r1
 800ee42:	a80c      	add	r0, sp, #48	@ 0x30
 800ee44:	eba8 0803 	sub.w	r8, r8, r3
 800ee48:	f7fd f8c2 	bl	800bfd0 <ucdr_init_buffer>
 800ee4c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ee50:	a80c      	add	r0, sp, #48	@ 0x30
 800ee52:	f7fd f891 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 800ee56:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ee5e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ee62:	44a8      	add	r8, r5
 800ee64:	fa1f f888 	uxth.w	r8, r8
 800ee68:	f8cd 8004 	str.w	r8, [sp, #4]
 800ee6c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ee70:	2107      	movs	r1, #7
 800ee72:	f88d 1016 	strb.w	r1, [sp, #22]
 800ee76:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800ee7a:	9102      	str	r1, [sp, #8]
 800ee7c:	4632      	mov	r2, r6
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800ee84:	9905      	ldr	r1, [sp, #20]
 800ee86:	4638      	mov	r0, r7
 800ee88:	47b0      	blx	r6
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ee90:	e7a6      	b.n	800ede0 <read_submessage_format+0xe0>
 800ee92:	bf00      	nop

0800ee94 <on_get_fragmentation_info>:
 800ee94:	b500      	push	{lr}
 800ee96:	b08b      	sub	sp, #44	@ 0x2c
 800ee98:	4601      	mov	r1, r0
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	a802      	add	r0, sp, #8
 800ee9e:	f7fd f897 	bl	800bfd0 <ucdr_init_buffer>
 800eea2:	f10d 0305 	add.w	r3, sp, #5
 800eea6:	f10d 0206 	add.w	r2, sp, #6
 800eeaa:	a901      	add	r1, sp, #4
 800eeac:	a802      	add	r0, sp, #8
 800eeae:	f001 fe67 	bl	8010b80 <uxr_read_submessage_header>
 800eeb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eeb6:	2b0d      	cmp	r3, #13
 800eeb8:	d003      	beq.n	800eec2 <on_get_fragmentation_info+0x2e>
 800eeba:	2000      	movs	r0, #0
 800eebc:	b00b      	add	sp, #44	@ 0x2c
 800eebe:	f85d fb04 	ldr.w	pc, [sp], #4
 800eec2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eec6:	f013 0f02 	tst.w	r3, #2
 800eeca:	bf14      	ite	ne
 800eecc:	2002      	movne	r0, #2
 800eece:	2001      	moveq	r0, #1
 800eed0:	b00b      	add	sp, #44	@ 0x2c
 800eed2:	f85d fb04 	ldr.w	pc, [sp], #4
 800eed6:	bf00      	nop

0800eed8 <read_submessage_get_info>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	2500      	movs	r5, #0
 800eedc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800eee0:	4604      	mov	r4, r0
 800eee2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800eee6:	460e      	mov	r6, r1
 800eee8:	a810      	add	r0, sp, #64	@ 0x40
 800eeea:	4629      	mov	r1, r5
 800eeec:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800eef0:	f008 fe62 	bl	8017bb8 <memset>
 800eef4:	a903      	add	r1, sp, #12
 800eef6:	4630      	mov	r0, r6
 800eef8:	f002 fe16 	bl	8011b28 <uxr_deserialize_GET_INFO_Payload>
 800eefc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ef00:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ef04:	4620      	mov	r0, r4
 800ef06:	f001 f81f 	bl	800ff48 <uxr_session_header_offset>
 800ef0a:	462b      	mov	r3, r5
 800ef0c:	9000      	str	r0, [sp, #0]
 800ef0e:	220c      	movs	r2, #12
 800ef10:	a905      	add	r1, sp, #20
 800ef12:	a808      	add	r0, sp, #32
 800ef14:	f7fd f84a 	bl	800bfac <ucdr_init_buffer_origin_offset>
 800ef18:	a910      	add	r1, sp, #64	@ 0x40
 800ef1a:	a808      	add	r0, sp, #32
 800ef1c:	f002 fe76 	bl	8011c0c <uxr_serialize_INFO_Payload>
 800ef20:	9b08      	ldr	r3, [sp, #32]
 800ef22:	462a      	mov	r2, r5
 800ef24:	4629      	mov	r1, r5
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 ffb8 	bl	800fe9c <uxr_stamp_session_header>
 800ef2c:	a808      	add	r0, sp, #32
 800ef2e:	f7fd f87b 	bl	800c028 <ucdr_buffer_length>
 800ef32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ef34:	4602      	mov	r2, r0
 800ef36:	a905      	add	r1, sp, #20
 800ef38:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ef3c:	47a0      	blx	r4
 800ef3e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ef42:	bd70      	pop	{r4, r5, r6, pc}

0800ef44 <write_submessage_acknack.isra.0>:
 800ef44:	b570      	push	{r4, r5, r6, lr}
 800ef46:	b092      	sub	sp, #72	@ 0x48
 800ef48:	4605      	mov	r5, r0
 800ef4a:	460e      	mov	r6, r1
 800ef4c:	4614      	mov	r4, r2
 800ef4e:	f000 fffb 	bl	800ff48 <uxr_session_header_offset>
 800ef52:	a905      	add	r1, sp, #20
 800ef54:	9000      	str	r0, [sp, #0]
 800ef56:	2300      	movs	r3, #0
 800ef58:	a80a      	add	r0, sp, #40	@ 0x28
 800ef5a:	2211      	movs	r2, #17
 800ef5c:	f7fd f826 	bl	800bfac <ucdr_init_buffer_origin_offset>
 800ef60:	2218      	movs	r2, #24
 800ef62:	fb02 5404 	mla	r4, r2, r4, r5
 800ef66:	2300      	movs	r3, #0
 800ef68:	2205      	movs	r2, #5
 800ef6a:	3450      	adds	r4, #80	@ 0x50
 800ef6c:	210a      	movs	r1, #10
 800ef6e:	a80a      	add	r0, sp, #40	@ 0x28
 800ef70:	f001 fdec 	bl	8010b4c <uxr_buffer_submessage_header>
 800ef74:	a903      	add	r1, sp, #12
 800ef76:	4620      	mov	r0, r4
 800ef78:	f007 fabe 	bl	80164f8 <uxr_compute_acknack>
 800ef7c:	ba40      	rev16	r0, r0
 800ef7e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ef82:	a903      	add	r1, sp, #12
 800ef84:	a80a      	add	r0, sp, #40	@ 0x28
 800ef86:	f88d 6010 	strb.w	r6, [sp, #16]
 800ef8a:	f002 feaf 	bl	8011cec <uxr_serialize_ACKNACK_Payload>
 800ef8e:	2200      	movs	r2, #0
 800ef90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef92:	4611      	mov	r1, r2
 800ef94:	4628      	mov	r0, r5
 800ef96:	f000 ff81 	bl	800fe9c <uxr_stamp_session_header>
 800ef9a:	a80a      	add	r0, sp, #40	@ 0x28
 800ef9c:	f7fd f844 	bl	800c028 <ucdr_buffer_length>
 800efa0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800efa2:	4602      	mov	r2, r0
 800efa4:	a905      	add	r1, sp, #20
 800efa6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800efaa:	47a0      	blx	r4
 800efac:	b012      	add	sp, #72	@ 0x48
 800efae:	bd70      	pop	{r4, r5, r6, pc}

0800efb0 <uxr_init_session>:
 800efb0:	b510      	push	{r4, lr}
 800efb2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800efe8 <uxr_init_session+0x38>
 800efb6:	2300      	movs	r3, #0
 800efb8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800efbc:	4604      	mov	r4, r0
 800efbe:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800efc2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800efc6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800efca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800efce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800efd2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800efd6:	2181      	movs	r1, #129	@ 0x81
 800efd8:	f000 fecc 	bl	800fd74 <uxr_init_session_info>
 800efdc:	f104 0008 	add.w	r0, r4, #8
 800efe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efe4:	f001 bcce 	b.w	8010984 <uxr_init_stream_storage>
	...

0800eff0 <uxr_set_status_callback>:
 800eff0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop

0800eff8 <uxr_set_topic_callback>:
 800eff8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop

0800f000 <uxr_set_request_callback>:
 800f000:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop

0800f008 <uxr_set_reply_callback>:
 800f008:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop

0800f010 <uxr_create_output_best_effort_stream>:
 800f010:	b510      	push	{r4, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	e9cd 2100 	strd	r2, r1, [sp]
 800f018:	4604      	mov	r4, r0
 800f01a:	f000 ff95 	bl	800ff48 <uxr_session_header_offset>
 800f01e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f022:	4603      	mov	r3, r0
 800f024:	f104 0008 	add.w	r0, r4, #8
 800f028:	b004      	add	sp, #16
 800f02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f02e:	f001 bcf3 	b.w	8010a18 <uxr_add_output_best_effort_buffer>
 800f032:	bf00      	nop

0800f034 <uxr_create_output_reliable_stream>:
 800f034:	b510      	push	{r4, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f03c:	4604      	mov	r4, r0
 800f03e:	9303      	str	r3, [sp, #12]
 800f040:	f000 ff82 	bl	800ff48 <uxr_session_header_offset>
 800f044:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f048:	9000      	str	r0, [sp, #0]
 800f04a:	9905      	ldr	r1, [sp, #20]
 800f04c:	f104 0008 	add.w	r0, r4, #8
 800f050:	f001 fcf6 	bl	8010a40 <uxr_add_output_reliable_buffer>
 800f054:	2200      	movs	r2, #0
 800f056:	b2c3      	uxtb	r3, r0
 800f058:	f363 0207 	bfi	r2, r3, #0, #8
 800f05c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f060:	f363 220f 	bfi	r2, r3, #8, #8
 800f064:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f068:	f363 4217 	bfi	r2, r3, #16, #8
 800f06c:	0e03      	lsrs	r3, r0, #24
 800f06e:	f363 621f 	bfi	r2, r3, #24, #8
 800f072:	4610      	mov	r0, r2
 800f074:	b008      	add	sp, #32
 800f076:	bd10      	pop	{r4, pc}

0800f078 <uxr_create_input_best_effort_stream>:
 800f078:	b082      	sub	sp, #8
 800f07a:	3008      	adds	r0, #8
 800f07c:	b002      	add	sp, #8
 800f07e:	f001 bcf9 	b.w	8010a74 <uxr_add_input_best_effort_buffer>
 800f082:	bf00      	nop

0800f084 <uxr_create_input_reliable_stream>:
 800f084:	b510      	push	{r4, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	4c0b      	ldr	r4, [pc, #44]	@ (800f0b8 <uxr_create_input_reliable_stream+0x34>)
 800f08a:	9400      	str	r4, [sp, #0]
 800f08c:	3008      	adds	r0, #8
 800f08e:	f001 fd07 	bl	8010aa0 <uxr_add_input_reliable_buffer>
 800f092:	2200      	movs	r2, #0
 800f094:	b2c3      	uxtb	r3, r0
 800f096:	f363 0207 	bfi	r2, r3, #0, #8
 800f09a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f09e:	f363 220f 	bfi	r2, r3, #8, #8
 800f0a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f0a6:	f363 4217 	bfi	r2, r3, #16, #8
 800f0aa:	0e03      	lsrs	r3, r0, #24
 800f0ac:	f363 621f 	bfi	r2, r3, #24, #8
 800f0b0:	4610      	mov	r0, r2
 800f0b2:	b004      	add	sp, #16
 800f0b4:	bd10      	pop	{r4, pc}
 800f0b6:	bf00      	nop
 800f0b8:	0800ee95 	.word	0x0800ee95

0800f0bc <uxr_epoch_nanos>:
 800f0bc:	b510      	push	{r4, lr}
 800f0be:	4604      	mov	r4, r0
 800f0c0:	f001 fda4 	bl	8010c0c <uxr_nanos>
 800f0c4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f0c8:	1ac0      	subs	r0, r0, r3
 800f0ca:	eb61 0102 	sbc.w	r1, r1, r2
 800f0ce:	bd10      	pop	{r4, pc}

0800f0d0 <uxr_flash_output_streams>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	7e03      	ldrb	r3, [r0, #24]
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	4604      	mov	r4, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d035      	beq.n	800f14a <uxr_flash_output_streams+0x7a>
 800f0de:	f04f 0900 	mov.w	r9, #0
 800f0e2:	4648      	mov	r0, r9
 800f0e4:	f10d 0802 	add.w	r8, sp, #2
 800f0e8:	af03      	add	r7, sp, #12
 800f0ea:	ae02      	add	r6, sp, #8
 800f0ec:	e006      	b.n	800f0fc <uxr_flash_output_streams+0x2c>
 800f0ee:	7e23      	ldrb	r3, [r4, #24]
 800f0f0:	f109 0901 	add.w	r9, r9, #1
 800f0f4:	fa5f f089 	uxtb.w	r0, r9
 800f0f8:	4283      	cmp	r3, r0
 800f0fa:	d926      	bls.n	800f14a <uxr_flash_output_streams+0x7a>
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	4611      	mov	r1, r2
 800f100:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f104:	f001 fbea 	bl	80108dc <uxr_stream_id>
 800f108:	3508      	adds	r5, #8
 800f10a:	4684      	mov	ip, r0
 800f10c:	4643      	mov	r3, r8
 800f10e:	463a      	mov	r2, r7
 800f110:	4631      	mov	r1, r6
 800f112:	4628      	mov	r0, r5
 800f114:	f8cd c004 	str.w	ip, [sp, #4]
 800f118:	f007 fa74 	bl	8016604 <uxr_prepare_best_effort_buffer_to_send>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d0e6      	beq.n	800f0ee <uxr_flash_output_streams+0x1e>
 800f120:	9b02      	ldr	r3, [sp, #8]
 800f122:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f126:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f12a:	4620      	mov	r0, r4
 800f12c:	f000 feb6 	bl	800fe9c <uxr_stamp_session_header>
 800f130:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f132:	9a03      	ldr	r2, [sp, #12]
 800f134:	685d      	ldr	r5, [r3, #4]
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	9902      	ldr	r1, [sp, #8]
 800f13a:	47a8      	blx	r5
 800f13c:	f109 0901 	add.w	r9, r9, #1
 800f140:	7e23      	ldrb	r3, [r4, #24]
 800f142:	fa5f f089 	uxtb.w	r0, r9
 800f146:	4283      	cmp	r3, r0
 800f148:	d8d8      	bhi.n	800f0fc <uxr_flash_output_streams+0x2c>
 800f14a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f14e:	b38b      	cbz	r3, 800f1b4 <uxr_flash_output_streams+0xe4>
 800f150:	f04f 0900 	mov.w	r9, #0
 800f154:	f10d 0802 	add.w	r8, sp, #2
 800f158:	af03      	add	r7, sp, #12
 800f15a:	ae02      	add	r6, sp, #8
 800f15c:	4648      	mov	r0, r9
 800f15e:	2201      	movs	r2, #1
 800f160:	2102      	movs	r1, #2
 800f162:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f166:	f001 fbb9 	bl	80108dc <uxr_stream_id>
 800f16a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f16e:	3520      	adds	r5, #32
 800f170:	9001      	str	r0, [sp, #4]
 800f172:	e00d      	b.n	800f190 <uxr_flash_output_streams+0xc0>
 800f174:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f178:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f17c:	9b02      	ldr	r3, [sp, #8]
 800f17e:	f000 fe8d 	bl	800fe9c <uxr_stamp_session_header>
 800f182:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f184:	9a03      	ldr	r2, [sp, #12]
 800f186:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f18a:	9902      	ldr	r1, [sp, #8]
 800f18c:	6818      	ldr	r0, [r3, #0]
 800f18e:	47d0      	blx	sl
 800f190:	4643      	mov	r3, r8
 800f192:	463a      	mov	r2, r7
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	f007 fc52 	bl	8016a40 <uxr_prepare_next_reliable_buffer_to_send>
 800f19c:	4603      	mov	r3, r0
 800f19e:	4620      	mov	r0, r4
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1e7      	bne.n	800f174 <uxr_flash_output_streams+0xa4>
 800f1a4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f1a8:	f109 0901 	add.w	r9, r9, #1
 800f1ac:	fa5f f089 	uxtb.w	r0, r9
 800f1b0:	4283      	cmp	r3, r0
 800f1b2:	d8d4      	bhi.n	800f15e <uxr_flash_output_streams+0x8e>
 800f1b4:	b004      	add	sp, #16
 800f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ba:	bf00      	nop

0800f1bc <read_submessage_info>:
 800f1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c0:	460d      	mov	r5, r1
 800f1c2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f1c6:	4669      	mov	r1, sp
 800f1c8:	4607      	mov	r7, r0
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	f002 fbba 	bl	8011944 <uxr_deserialize_BaseObjectReply>
 800f1d0:	a902      	add	r1, sp, #8
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f1da:	f7fb fd9f 	bl	800ad1c <ucdr_deserialize_bool>
 800f1de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f1e2:	4004      	ands	r4, r0
 800f1e4:	b2e4      	uxtb	r4, r4
 800f1e6:	b95b      	cbnz	r3, 800f200 <read_submessage_info+0x44>
 800f1e8:	a987      	add	r1, sp, #540	@ 0x21c
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	f7fb fd96 	bl	800ad1c <ucdr_deserialize_bool>
 800f1f0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	b94b      	cbnz	r3, 800f20c <read_submessage_info+0x50>
 800f1f8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f200:	a903      	add	r1, sp, #12
 800f202:	4628      	mov	r0, r5
 800f204:	f002 fa46 	bl	8011694 <uxr_deserialize_ObjectVariant>
 800f208:	4004      	ands	r4, r0
 800f20a:	e7ed      	b.n	800f1e8 <read_submessage_info+0x2c>
 800f20c:	a988      	add	r1, sp, #544	@ 0x220
 800f20e:	4628      	mov	r0, r5
 800f210:	f7fb fdb2 	bl	800ad78 <ucdr_deserialize_uint8_t>
 800f214:	4234      	tst	r4, r6
 800f216:	d0ef      	beq.n	800f1f8 <read_submessage_info+0x3c>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d0ed      	beq.n	800f1f8 <read_submessage_info+0x3c>
 800f21c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f220:	2b0d      	cmp	r3, #13
 800f222:	d1e9      	bne.n	800f1f8 <read_submessage_info+0x3c>
 800f224:	a98a      	add	r1, sp, #552	@ 0x228
 800f226:	4628      	mov	r0, r5
 800f228:	f7fc fb4c 	bl	800b8c4 <ucdr_deserialize_int16_t>
 800f22c:	b140      	cbz	r0, 800f240 <read_submessage_info+0x84>
 800f22e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f232:	2b00      	cmp	r3, #0
 800f234:	dd07      	ble.n	800f246 <read_submessage_info+0x8a>
 800f236:	f1b8 0f00 	cmp.w	r8, #0
 800f23a:	bf14      	ite	ne
 800f23c:	2001      	movne	r0, #1
 800f23e:	2002      	moveq	r0, #2
 800f240:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f244:	e7d8      	b.n	800f1f8 <read_submessage_info+0x3c>
 800f246:	2000      	movs	r0, #0
 800f248:	e7fa      	b.n	800f240 <read_submessage_info+0x84>
 800f24a:	bf00      	nop

0800f24c <read_submessage_list>:
 800f24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f250:	b097      	sub	sp, #92	@ 0x5c
 800f252:	4ec1      	ldr	r6, [pc, #772]	@ (800f558 <read_submessage_list+0x30c>)
 800f254:	9209      	str	r2, [sp, #36]	@ 0x24
 800f256:	4604      	mov	r4, r0
 800f258:	460d      	mov	r5, r1
 800f25a:	f04f 0801 	mov.w	r8, #1
 800f25e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f262:	aa0c      	add	r2, sp, #48	@ 0x30
 800f264:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f268:	4628      	mov	r0, r5
 800f26a:	f001 fc89 	bl	8010b80 <uxr_read_submessage_header>
 800f26e:	2800      	cmp	r0, #0
 800f270:	f000 813e 	beq.w	800f4f0 <read_submessage_list+0x2a4>
 800f274:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f278:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f27c:	3b02      	subs	r3, #2
 800f27e:	2b0d      	cmp	r3, #13
 800f280:	d8ed      	bhi.n	800f25e <read_submessage_list+0x12>
 800f282:	a101      	add	r1, pc, #4	@ (adr r1, 800f288 <read_submessage_list+0x3c>)
 800f284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f288:	0800f4e7 	.word	0x0800f4e7
 800f28c:	0800f25f 	.word	0x0800f25f
 800f290:	0800f4d7 	.word	0x0800f4d7
 800f294:	0800f475 	.word	0x0800f475
 800f298:	0800f46b 	.word	0x0800f46b
 800f29c:	0800f25f 	.word	0x0800f25f
 800f2a0:	0800f25f 	.word	0x0800f25f
 800f2a4:	0800f3cb 	.word	0x0800f3cb
 800f2a8:	0800f35b 	.word	0x0800f35b
 800f2ac:	0800f31b 	.word	0x0800f31b
 800f2b0:	0800f25f 	.word	0x0800f25f
 800f2b4:	0800f25f 	.word	0x0800f25f
 800f2b8:	0800f25f 	.word	0x0800f25f
 800f2bc:	0800f2c1 	.word	0x0800f2c1
 800f2c0:	a910      	add	r1, sp, #64	@ 0x40
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f002 fd62 	bl	8011d8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f2c8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f2cc:	f1b9 0f00 	cmp.w	r9, #0
 800f2d0:	f000 8116 	beq.w	800f500 <read_submessage_list+0x2b4>
 800f2d4:	f001 fc9a 	bl	8010c0c <uxr_nanos>
 800f2d8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	468c      	mov	ip, r1
 800f2e4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f2e8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f2ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f2ee:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f2f0:	468c      	mov	ip, r1
 800f2f2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f2f6:	46e2      	mov	sl, ip
 800f2f8:	46bc      	mov	ip, r7
 800f2fa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f2fe:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f302:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f306:	e9cd 7100 	strd	r7, r1, [sp]
 800f30a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f30e:	9106      	str	r1, [sp, #24]
 800f310:	4620      	mov	r0, r4
 800f312:	47c8      	blx	r9
 800f314:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f318:	e7a1      	b.n	800f25e <read_submessage_list+0x12>
 800f31a:	a910      	add	r1, sp, #64	@ 0x40
 800f31c:	4628      	mov	r0, r5
 800f31e:	f002 fd23 	bl	8011d68 <uxr_deserialize_HEARTBEAT_Payload>
 800f322:	2100      	movs	r1, #0
 800f324:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f328:	f001 fb02 	bl	8010930 <uxr_stream_id_from_raw>
 800f32c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f330:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f332:	4639      	mov	r1, r7
 800f334:	f104 0008 	add.w	r0, r4, #8
 800f338:	f001 fbe8 	bl	8010b0c <uxr_get_input_reliable_stream>
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d08e      	beq.n	800f25e <read_submessage_list+0x12>
 800f340:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f344:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f348:	f007 f8ca 	bl	80164e0 <uxr_process_heartbeat>
 800f34c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f350:	463a      	mov	r2, r7
 800f352:	4620      	mov	r0, r4
 800f354:	f7ff fdf6 	bl	800ef44 <write_submessage_acknack.isra.0>
 800f358:	e781      	b.n	800f25e <read_submessage_list+0x12>
 800f35a:	a910      	add	r1, sp, #64	@ 0x40
 800f35c:	4628      	mov	r0, r5
 800f35e:	f002 fcdb 	bl	8011d18 <uxr_deserialize_ACKNACK_Payload>
 800f362:	2100      	movs	r1, #0
 800f364:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f368:	f001 fae2 	bl	8010930 <uxr_stream_id_from_raw>
 800f36c:	900d      	str	r0, [sp, #52]	@ 0x34
 800f36e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f372:	f104 0008 	add.w	r0, r4, #8
 800f376:	f001 fbb5 	bl	8010ae4 <uxr_get_output_reliable_stream>
 800f37a:	4607      	mov	r7, r0
 800f37c:	2800      	cmp	r0, #0
 800f37e:	f43f af6e 	beq.w	800f25e <read_submessage_list+0x12>
 800f382:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f386:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f38a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f38e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f392:	b289      	uxth	r1, r1
 800f394:	f007 fbfe 	bl	8016b94 <uxr_process_acknack>
 800f398:	4638      	mov	r0, r7
 800f39a:	f007 fbbb 	bl	8016b14 <uxr_begin_output_nack_buffer_it>
 800f39e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f3a2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f3a6:	e006      	b.n	800f3b6 <read_submessage_list+0x16a>
 800f3a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f3aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f3ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f3b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	47c8      	blx	r9
 800f3b6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f3ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f3bc:	4651      	mov	r1, sl
 800f3be:	4638      	mov	r0, r7
 800f3c0:	f007 fbaa 	bl	8016b18 <uxr_next_reliable_nack_buffer_to_send>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d1ef      	bne.n	800f3a8 <read_submessage_list+0x15c>
 800f3c8:	e749      	b.n	800f25e <read_submessage_list+0x12>
 800f3ca:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f3ce:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f3d2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f3d6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f3da:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f3de:	4651      	mov	r1, sl
 800f3e0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f3e4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800f3e8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800f3ec:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f3f6:	f002 f9ef 	bl	80117d8 <uxr_deserialize_BaseObjectRequest>
 800f3fa:	4650      	mov	r0, sl
 800f3fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800f3fe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f402:	f000 fdc7 	bl	800ff94 <uxr_parse_base_object_request>
 800f406:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800f40a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f40c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800f410:	9110      	str	r1, [sp, #64]	@ 0x40
 800f412:	3f04      	subs	r7, #4
 800f414:	f009 090e 	and.w	r9, r9, #14
 800f418:	b2bf      	uxth	r7, r7
 800f41a:	f1bb 0f00 	cmp.w	fp, #0
 800f41e:	d006      	beq.n	800f42e <read_submessage_list+0x1e2>
 800f420:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	4652      	mov	r2, sl
 800f428:	2300      	movs	r3, #0
 800f42a:	4620      	mov	r0, r4
 800f42c:	47d8      	blx	fp
 800f42e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f430:	b16a      	cbz	r2, 800f44e <read_submessage_list+0x202>
 800f432:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f434:	2100      	movs	r1, #0
 800f436:	3802      	subs	r0, #2
 800f438:	e002      	b.n	800f440 <read_submessage_list+0x1f4>
 800f43a:	3101      	adds	r1, #1
 800f43c:	4291      	cmp	r1, r2
 800f43e:	d006      	beq.n	800f44e <read_submessage_list+0x202>
 800f440:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f444:	4553      	cmp	r3, sl
 800f446:	d1f8      	bne.n	800f43a <read_submessage_list+0x1ee>
 800f448:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f44a:	2200      	movs	r2, #0
 800f44c:	545a      	strb	r2, [r3, r1]
 800f44e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f452:	9102      	str	r1, [sp, #8]
 800f454:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f456:	9101      	str	r1, [sp, #4]
 800f458:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f45a:	9100      	str	r1, [sp, #0]
 800f45c:	464b      	mov	r3, r9
 800f45e:	463a      	mov	r2, r7
 800f460:	4629      	mov	r1, r5
 800f462:	4620      	mov	r0, r4
 800f464:	f7ff fc4c 	bl	800ed00 <read_submessage_format>
 800f468:	e6f9      	b.n	800f25e <read_submessage_list+0x12>
 800f46a:	4629      	mov	r1, r5
 800f46c:	4620      	mov	r0, r4
 800f46e:	f7ff fea5 	bl	800f1bc <read_submessage_info>
 800f472:	e6f4      	b.n	800f25e <read_submessage_list+0x12>
 800f474:	2a00      	cmp	r2, #0
 800f476:	d03e      	beq.n	800f4f6 <read_submessage_list+0x2aa>
 800f478:	a910      	add	r1, sp, #64	@ 0x40
 800f47a:	4628      	mov	r0, r5
 800f47c:	f002 fba8 	bl	8011bd0 <uxr_deserialize_STATUS_Payload>
 800f480:	a90e      	add	r1, sp, #56	@ 0x38
 800f482:	aa0d      	add	r2, sp, #52	@ 0x34
 800f484:	a810      	add	r0, sp, #64	@ 0x40
 800f486:	f000 fd85 	bl	800ff94 <uxr_parse_base_object_request>
 800f48a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f48e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f490:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f494:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f498:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f49a:	f1ba 0f00 	cmp.w	sl, #0
 800f49e:	d006      	beq.n	800f4ae <read_submessage_list+0x262>
 800f4a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	463a      	mov	r2, r7
 800f4a8:	464b      	mov	r3, r9
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	47d0      	blx	sl
 800f4ae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f4b0:	2a00      	cmp	r2, #0
 800f4b2:	f43f aed4 	beq.w	800f25e <read_submessage_list+0x12>
 800f4b6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	3802      	subs	r0, #2
 800f4bc:	e003      	b.n	800f4c6 <read_submessage_list+0x27a>
 800f4be:	3101      	adds	r1, #1
 800f4c0:	4291      	cmp	r1, r2
 800f4c2:	f43f aecc 	beq.w	800f25e <read_submessage_list+0x12>
 800f4c6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f4ca:	42bb      	cmp	r3, r7
 800f4cc:	d1f7      	bne.n	800f4be <read_submessage_list+0x272>
 800f4ce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f4d0:	f803 9001 	strb.w	r9, [r3, r1]
 800f4d4:	e6c3      	b.n	800f25e <read_submessage_list+0x12>
 800f4d6:	2a00      	cmp	r2, #0
 800f4d8:	f47f aec1 	bne.w	800f25e <read_submessage_list+0x12>
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f000 fc9e 	bl	800fe20 <uxr_read_create_session_status>
 800f4e4:	e6bb      	b.n	800f25e <read_submessage_list+0x12>
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f7ff fcf5 	bl	800eed8 <read_submessage_get_info>
 800f4ee:	e6b6      	b.n	800f25e <read_submessage_list+0x12>
 800f4f0:	b017      	add	sp, #92	@ 0x5c
 800f4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f000 fc9d 	bl	800fe38 <uxr_read_delete_session_status>
 800f4fe:	e6ae      	b.n	800f25e <read_submessage_list+0x12>
 800f500:	f001 fb84 	bl	8010c0c <uxr_nanos>
 800f504:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f506:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f508:	464f      	mov	r7, r9
 800f50a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f50e:	1812      	adds	r2, r2, r0
 800f510:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f512:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f514:	eb47 0101 	adc.w	r1, r7, r1
 800f518:	464f      	mov	r7, r9
 800f51a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f51e:	463b      	mov	r3, r7
 800f520:	4684      	mov	ip, r0
 800f522:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f526:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f52a:	eb1c 0c00 	adds.w	ip, ip, r0
 800f52e:	464f      	mov	r7, r9
 800f530:	eb43 0307 	adc.w	r3, r3, r7
 800f534:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f538:	eb61 0303 	sbc.w	r3, r1, r3
 800f53c:	0fda      	lsrs	r2, r3, #31
 800f53e:	eb12 020c 	adds.w	r2, r2, ip
 800f542:	f143 0300 	adc.w	r3, r3, #0
 800f546:	0852      	lsrs	r2, r2, #1
 800f548:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f54c:	105b      	asrs	r3, r3, #1
 800f54e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f552:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f556:	e6dd      	b.n	800f314 <read_submessage_list+0xc8>
 800f558:	3b9aca00 	.word	0x3b9aca00

0800f55c <listen_message_reliably>:
 800f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	1e0b      	subs	r3, r1, #0
 800f562:	b09d      	sub	sp, #116	@ 0x74
 800f564:	bfb8      	it	lt
 800f566:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f56a:	4680      	mov	r8, r0
 800f56c:	9305      	str	r3, [sp, #20]
 800f56e:	f001 fb33 	bl	8010bd8 <uxr_millis>
 800f572:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f576:	4681      	mov	r9, r0
 800f578:	2a00      	cmp	r2, #0
 800f57a:	f000 80a1 	beq.w	800f6c0 <listen_message_reliably+0x164>
 800f57e:	2600      	movs	r6, #0
 800f580:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f584:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f588:	9303      	str	r3, [sp, #12]
 800f58a:	4630      	mov	r0, r6
 800f58c:	460f      	mov	r7, r1
 800f58e:	e00f      	b.n	800f5b0 <listen_message_reliably+0x54>
 800f590:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f594:	9903      	ldr	r1, [sp, #12]
 800f596:	455a      	cmp	r2, fp
 800f598:	f106 0601 	add.w	r6, r6, #1
 800f59c:	eb73 0101 	sbcs.w	r1, r3, r1
 800f5a0:	b2f0      	uxtb	r0, r6
 800f5a2:	da01      	bge.n	800f5a8 <listen_message_reliably+0x4c>
 800f5a4:	4693      	mov	fp, r2
 800f5a6:	9303      	str	r3, [sp, #12]
 800f5a8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f5ac:	4283      	cmp	r3, r0
 800f5ae:	d960      	bls.n	800f672 <listen_message_reliably+0x116>
 800f5b0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f5b4:	2102      	movs	r1, #2
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f001 f990 	bl	80108dc <uxr_stream_id>
 800f5bc:	00e4      	lsls	r4, r4, #3
 800f5be:	f104 0520 	add.w	r5, r4, #32
 800f5c2:	4445      	add	r5, r8
 800f5c4:	4601      	mov	r1, r0
 800f5c6:	463b      	mov	r3, r7
 800f5c8:	464a      	mov	r2, r9
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5ce:	f007 fa77 	bl	8016ac0 <uxr_update_output_stream_heartbeat_timestamp>
 800f5d2:	eb08 0304 	add.w	r3, r8, r4
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d0da      	beq.n	800f590 <listen_message_reliably+0x34>
 800f5da:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f5de:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f5e2:	9304      	str	r3, [sp, #16]
 800f5e4:	4640      	mov	r0, r8
 800f5e6:	f000 fcaf 	bl	800ff48 <uxr_session_header_offset>
 800f5ea:	3501      	adds	r5, #1
 800f5ec:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f5f0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f5f4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	2211      	movs	r2, #17
 800f5fc:	9000      	str	r0, [sp, #0]
 800f5fe:	a90c      	add	r1, sp, #48	@ 0x30
 800f600:	4650      	mov	r0, sl
 800f602:	f7fc fcd3 	bl	800bfac <ucdr_init_buffer_origin_offset>
 800f606:	2300      	movs	r3, #0
 800f608:	2205      	movs	r2, #5
 800f60a:	210b      	movs	r1, #11
 800f60c:	4650      	mov	r0, sl
 800f60e:	f001 fa9d 	bl	8010b4c <uxr_buffer_submessage_header>
 800f612:	8968      	ldrh	r0, [r5, #10]
 800f614:	2101      	movs	r1, #1
 800f616:	f007 fb15 	bl	8016c44 <uxr_seq_num_add>
 800f61a:	892b      	ldrh	r3, [r5, #8]
 800f61c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f620:	4602      	mov	r2, r0
 800f622:	9b04      	ldr	r3, [sp, #16]
 800f624:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f628:	a90a      	add	r1, sp, #40	@ 0x28
 800f62a:	4650      	mov	r0, sl
 800f62c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f630:	f002 fb86 	bl	8011d40 <uxr_serialize_HEARTBEAT_Payload>
 800f634:	2200      	movs	r2, #0
 800f636:	4611      	mov	r1, r2
 800f638:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f63a:	4640      	mov	r0, r8
 800f63c:	f000 fc2e 	bl	800fe9c <uxr_stamp_session_header>
 800f640:	4650      	mov	r0, sl
 800f642:	f7fc fcf1 	bl	800c028 <ucdr_buffer_length>
 800f646:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f64a:	4602      	mov	r2, r0
 800f64c:	a90c      	add	r1, sp, #48	@ 0x30
 800f64e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f652:	4444      	add	r4, r8
 800f654:	47a8      	blx	r5
 800f656:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f65a:	9903      	ldr	r1, [sp, #12]
 800f65c:	455a      	cmp	r2, fp
 800f65e:	f106 0601 	add.w	r6, r6, #1
 800f662:	eb73 0101 	sbcs.w	r1, r3, r1
 800f666:	b2f0      	uxtb	r0, r6
 800f668:	db9c      	blt.n	800f5a4 <listen_message_reliably+0x48>
 800f66a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f66e:	4283      	cmp	r3, r0
 800f670:	d89e      	bhi.n	800f5b0 <listen_message_reliably+0x54>
 800f672:	9a03      	ldr	r2, [sp, #12]
 800f674:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f678:	429a      	cmp	r2, r3
 800f67a:	bf08      	it	eq
 800f67c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f680:	d01e      	beq.n	800f6c0 <listen_message_reliably+0x164>
 800f682:	ebab 0309 	sub.w	r3, fp, r9
 800f686:	9905      	ldr	r1, [sp, #20]
 800f688:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	bf08      	it	eq
 800f690:	2301      	moveq	r3, #1
 800f692:	4299      	cmp	r1, r3
 800f694:	bfa8      	it	ge
 800f696:	4619      	movge	r1, r3
 800f698:	6894      	ldr	r4, [r2, #8]
 800f69a:	6810      	ldr	r0, [r2, #0]
 800f69c:	4689      	mov	r9, r1
 800f69e:	460b      	mov	r3, r1
 800f6a0:	aa08      	add	r2, sp, #32
 800f6a2:	a907      	add	r1, sp, #28
 800f6a4:	47a0      	blx	r4
 800f6a6:	b968      	cbnz	r0, 800f6c4 <listen_message_reliably+0x168>
 800f6a8:	9b05      	ldr	r3, [sp, #20]
 800f6aa:	eba3 0309 	sub.w	r3, r3, r9
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	9305      	str	r3, [sp, #20]
 800f6b2:	f73f af5c 	bgt.w	800f56e <listen_message_reliably+0x12>
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	b01d      	add	sp, #116	@ 0x74
 800f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c0:	9b05      	ldr	r3, [sp, #20]
 800f6c2:	e7e0      	b.n	800f686 <listen_message_reliably+0x12a>
 800f6c4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f6c8:	4604      	mov	r4, r0
 800f6ca:	a80c      	add	r0, sp, #48	@ 0x30
 800f6cc:	f7fc fc80 	bl	800bfd0 <ucdr_init_buffer>
 800f6d0:	2500      	movs	r5, #0
 800f6d2:	f10d 031a 	add.w	r3, sp, #26
 800f6d6:	aa06      	add	r2, sp, #24
 800f6d8:	a90c      	add	r1, sp, #48	@ 0x30
 800f6da:	4640      	mov	r0, r8
 800f6dc:	f88d 5018 	strb.w	r5, [sp, #24]
 800f6e0:	f000 fbf0 	bl	800fec4 <uxr_read_session_header>
 800f6e4:	b918      	cbnz	r0, 800f6ee <listen_message_reliably+0x192>
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	b01d      	add	sp, #116	@ 0x74
 800f6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f6f4:	f001 f91c 	bl	8010930 <uxr_stream_id_from_raw>
 800f6f8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f6fc:	2d01      	cmp	r5, #1
 800f6fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f702:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f706:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f70a:	d04b      	beq.n	800f7a4 <listen_message_reliably+0x248>
 800f70c:	2d02      	cmp	r5, #2
 800f70e:	d00f      	beq.n	800f730 <listen_message_reliably+0x1d4>
 800f710:	2d00      	cmp	r5, #0
 800f712:	d1e8      	bne.n	800f6e6 <listen_message_reliably+0x18a>
 800f714:	4629      	mov	r1, r5
 800f716:	4628      	mov	r0, r5
 800f718:	f001 f90a 	bl	8010930 <uxr_stream_id_from_raw>
 800f71c:	a90c      	add	r1, sp, #48	@ 0x30
 800f71e:	4602      	mov	r2, r0
 800f720:	4640      	mov	r0, r8
 800f722:	920a      	str	r2, [sp, #40]	@ 0x28
 800f724:	f7ff fd92 	bl	800f24c <read_submessage_list>
 800f728:	4620      	mov	r0, r4
 800f72a:	b01d      	add	sp, #116	@ 0x74
 800f72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f730:	4631      	mov	r1, r6
 800f732:	f108 0008 	add.w	r0, r8, #8
 800f736:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f73a:	f001 f9e7 	bl	8010b0c <uxr_get_input_reliable_stream>
 800f73e:	4607      	mov	r7, r0
 800f740:	b338      	cbz	r0, 800f792 <listen_message_reliably+0x236>
 800f742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f744:	9203      	str	r2, [sp, #12]
 800f746:	a80c      	add	r0, sp, #48	@ 0x30
 800f748:	f7fc fc72 	bl	800c030 <ucdr_buffer_remaining>
 800f74c:	4603      	mov	r3, r0
 800f74e:	f10d 0019 	add.w	r0, sp, #25
 800f752:	9000      	str	r0, [sp, #0]
 800f754:	9a03      	ldr	r2, [sp, #12]
 800f756:	4651      	mov	r1, sl
 800f758:	4638      	mov	r0, r7
 800f75a:	f006 fdc7 	bl	80162ec <uxr_receive_reliable_message>
 800f75e:	b1c0      	cbz	r0, 800f792 <listen_message_reliably+0x236>
 800f760:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f764:	b393      	cbz	r3, 800f7cc <listen_message_reliably+0x270>
 800f766:	ad14      	add	r5, sp, #80	@ 0x50
 800f768:	f04f 0a02 	mov.w	sl, #2
 800f76c:	e00a      	b.n	800f784 <listen_message_reliably+0x228>
 800f76e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f772:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f776:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f77a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f77c:	4629      	mov	r1, r5
 800f77e:	4640      	mov	r0, r8
 800f780:	f7ff fd64 	bl	800f24c <read_submessage_list>
 800f784:	2204      	movs	r2, #4
 800f786:	4629      	mov	r1, r5
 800f788:	4638      	mov	r0, r7
 800f78a:	f006 fe2f 	bl	80163ec <uxr_next_input_reliable_buffer_available>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d1ed      	bne.n	800f76e <listen_message_reliably+0x212>
 800f792:	4640      	mov	r0, r8
 800f794:	4632      	mov	r2, r6
 800f796:	4649      	mov	r1, r9
 800f798:	f7ff fbd4 	bl	800ef44 <write_submessage_acknack.isra.0>
 800f79c:	4620      	mov	r0, r4
 800f79e:	b01d      	add	sp, #116	@ 0x74
 800f7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a4:	4631      	mov	r1, r6
 800f7a6:	f108 0008 	add.w	r0, r8, #8
 800f7aa:	f001 f9a5 	bl	8010af8 <uxr_get_input_best_effort_stream>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d099      	beq.n	800f6e6 <listen_message_reliably+0x18a>
 800f7b2:	4651      	mov	r1, sl
 800f7b4:	f006 fd06 	bl	80161c4 <uxr_receive_best_effort_message>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d094      	beq.n	800f6e6 <listen_message_reliably+0x18a>
 800f7bc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f7c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7c2:	a90c      	add	r1, sp, #48	@ 0x30
 800f7c4:	4640      	mov	r0, r8
 800f7c6:	f7ff fd41 	bl	800f24c <read_submessage_list>
 800f7ca:	e78c      	b.n	800f6e6 <listen_message_reliably+0x18a>
 800f7cc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f7d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7d2:	a90c      	add	r1, sp, #48	@ 0x30
 800f7d4:	4640      	mov	r0, r8
 800f7d6:	f7ff fd39 	bl	800f24c <read_submessage_list>
 800f7da:	e7c4      	b.n	800f766 <listen_message_reliably+0x20a>

0800f7dc <uxr_run_session_timeout>:
 800f7dc:	b570      	push	{r4, r5, r6, lr}
 800f7de:	4604      	mov	r4, r0
 800f7e0:	460d      	mov	r5, r1
 800f7e2:	f001 f9f9 	bl	8010bd8 <uxr_millis>
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f7ff fc71 	bl	800f0d0 <uxr_flash_output_streams>
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f7ff feb3 	bl	800f55c <listen_message_reliably>
 800f7f6:	f001 f9ef 	bl	8010bd8 <uxr_millis>
 800f7fa:	1b83      	subs	r3, r0, r6
 800f7fc:	1ae9      	subs	r1, r5, r3
 800f7fe:	2900      	cmp	r1, #0
 800f800:	dcf6      	bgt.n	800f7f0 <uxr_run_session_timeout+0x14>
 800f802:	f104 0008 	add.w	r0, r4, #8
 800f806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f80a:	f001 b989 	b.w	8010b20 <uxr_output_streams_confirmed>
 800f80e:	bf00      	nop

0800f810 <uxr_run_session_until_data>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4604      	mov	r4, r0
 800f814:	460d      	mov	r5, r1
 800f816:	f001 f9df 	bl	8010bd8 <uxr_millis>
 800f81a:	4606      	mov	r6, r0
 800f81c:	4620      	mov	r0, r4
 800f81e:	f7ff fc57 	bl	800f0d0 <uxr_flash_output_streams>
 800f822:	2300      	movs	r3, #0
 800f824:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f828:	4629      	mov	r1, r5
 800f82a:	e005      	b.n	800f838 <uxr_run_session_until_data+0x28>
 800f82c:	f001 f9d4 	bl	8010bd8 <uxr_millis>
 800f830:	1b83      	subs	r3, r0, r6
 800f832:	1ae9      	subs	r1, r5, r3
 800f834:	2900      	cmp	r1, #0
 800f836:	dd07      	ble.n	800f848 <uxr_run_session_until_data+0x38>
 800f838:	4620      	mov	r0, r4
 800f83a:	f7ff fe8f 	bl	800f55c <listen_message_reliably>
 800f83e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f842:	2800      	cmp	r0, #0
 800f844:	d0f2      	beq.n	800f82c <uxr_run_session_until_data+0x1c>
 800f846:	bd70      	pop	{r4, r5, r6, pc}
 800f848:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f84c:	bd70      	pop	{r4, r5, r6, pc}
 800f84e:	bf00      	nop

0800f850 <uxr_run_session_until_confirm_delivery>:
 800f850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f854:	4606      	mov	r6, r0
 800f856:	460d      	mov	r5, r1
 800f858:	f001 f9be 	bl	8010bd8 <uxr_millis>
 800f85c:	4607      	mov	r7, r0
 800f85e:	4630      	mov	r0, r6
 800f860:	f7ff fc36 	bl	800f0d0 <uxr_flash_output_streams>
 800f864:	2d00      	cmp	r5, #0
 800f866:	f106 0808 	add.w	r8, r6, #8
 800f86a:	bfa8      	it	ge
 800f86c:	462c      	movge	r4, r5
 800f86e:	da07      	bge.n	800f880 <uxr_run_session_until_confirm_delivery+0x30>
 800f870:	e00e      	b.n	800f890 <uxr_run_session_until_confirm_delivery+0x40>
 800f872:	f7ff fe73 	bl	800f55c <listen_message_reliably>
 800f876:	f001 f9af 	bl	8010bd8 <uxr_millis>
 800f87a:	1bc3      	subs	r3, r0, r7
 800f87c:	1aec      	subs	r4, r5, r3
 800f87e:	d407      	bmi.n	800f890 <uxr_run_session_until_confirm_delivery+0x40>
 800f880:	4640      	mov	r0, r8
 800f882:	f001 f94d 	bl	8010b20 <uxr_output_streams_confirmed>
 800f886:	4603      	mov	r3, r0
 800f888:	4621      	mov	r1, r4
 800f88a:	4630      	mov	r0, r6
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d0f0      	beq.n	800f872 <uxr_run_session_until_confirm_delivery+0x22>
 800f890:	4640      	mov	r0, r8
 800f892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f896:	f001 b943 	b.w	8010b20 <uxr_output_streams_confirmed>
 800f89a:	bf00      	nop

0800f89c <uxr_run_session_until_all_status>:
 800f89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a0:	9c08      	ldr	r4, [sp, #32]
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	460f      	mov	r7, r1
 800f8a6:	4691      	mov	r9, r2
 800f8a8:	461d      	mov	r5, r3
 800f8aa:	f7ff fc11 	bl	800f0d0 <uxr_flash_output_streams>
 800f8ae:	b124      	cbz	r4, 800f8ba <uxr_run_session_until_all_status+0x1e>
 800f8b0:	4622      	mov	r2, r4
 800f8b2:	21ff      	movs	r1, #255	@ 0xff
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	f008 f97f 	bl	8017bb8 <memset>
 800f8ba:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f8be:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f8c0:	f001 f98a 	bl	8010bd8 <uxr_millis>
 800f8c4:	3d01      	subs	r5, #1
 800f8c6:	f1a9 0902 	sub.w	r9, r9, #2
 800f8ca:	4680      	mov	r8, r0
 800f8cc:	4639      	mov	r1, r7
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f7ff fe44 	bl	800f55c <listen_message_reliably>
 800f8d4:	f001 f980 	bl	8010bd8 <uxr_millis>
 800f8d8:	eba0 0008 	sub.w	r0, r0, r8
 800f8dc:	1a39      	subs	r1, r7, r0
 800f8de:	b344      	cbz	r4, 800f932 <uxr_run_session_until_all_status+0x96>
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	46ac      	mov	ip, r5
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	e002      	b.n	800f8ee <uxr_run_session_until_all_status+0x52>
 800f8e8:	42a3      	cmp	r3, r4
 800f8ea:	d20d      	bcs.n	800f908 <uxr_run_session_until_all_status+0x6c>
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f8f2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f8f6:	d1f7      	bne.n	800f8e8 <uxr_run_session_until_all_status+0x4c>
 800f8f8:	42a3      	cmp	r3, r4
 800f8fa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f8fe:	d213      	bcs.n	800f928 <uxr_run_session_until_all_status+0x8c>
 800f900:	2a00      	cmp	r2, #0
 800f902:	d0f3      	beq.n	800f8ec <uxr_run_session_until_all_status+0x50>
 800f904:	2900      	cmp	r1, #0
 800f906:	dce2      	bgt.n	800f8ce <uxr_run_session_until_all_status+0x32>
 800f908:	2300      	movs	r3, #0
 800f90a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f90c:	442c      	add	r4, r5
 800f90e:	e001      	b.n	800f914 <uxr_run_session_until_all_status+0x78>
 800f910:	2b01      	cmp	r3, #1
 800f912:	d812      	bhi.n	800f93a <uxr_run_session_until_all_status+0x9e>
 800f914:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f918:	4284      	cmp	r4, r0
 800f91a:	d1f9      	bne.n	800f910 <uxr_run_session_until_all_status+0x74>
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	bf8c      	ite	hi
 800f920:	2000      	movhi	r0, #0
 800f922:	2001      	movls	r0, #1
 800f924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f928:	2900      	cmp	r1, #0
 800f92a:	dded      	ble.n	800f908 <uxr_run_session_until_all_status+0x6c>
 800f92c:	2a00      	cmp	r2, #0
 800f92e:	d1ce      	bne.n	800f8ce <uxr_run_session_until_all_status+0x32>
 800f930:	e7ea      	b.n	800f908 <uxr_run_session_until_all_status+0x6c>
 800f932:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f934:	2001      	movs	r0, #1
 800f936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f93a:	2000      	movs	r0, #0
 800f93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f940 <wait_session_status>:
 800f940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f944:	4604      	mov	r4, r0
 800f946:	b09d      	sub	sp, #116	@ 0x74
 800f948:	20ff      	movs	r0, #255	@ 0xff
 800f94a:	7160      	strb	r0, [r4, #5]
 800f94c:	9303      	str	r3, [sp, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 80b6 	beq.w	800fac0 <wait_session_status+0x180>
 800f954:	468a      	mov	sl, r1
 800f956:	4691      	mov	r9, r2
 800f958:	f04f 0b00 	mov.w	fp, #0
 800f95c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f95e:	464a      	mov	r2, r9
 800f960:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f964:	4651      	mov	r1, sl
 800f966:	47a8      	blx	r5
 800f968:	f001 f936 	bl	8010bd8 <uxr_millis>
 800f96c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f970:	4605      	mov	r5, r0
 800f972:	e009      	b.n	800f988 <wait_session_status+0x48>
 800f974:	f001 f930 	bl	8010bd8 <uxr_millis>
 800f978:	1b40      	subs	r0, r0, r5
 800f97a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f97e:	2b00      	cmp	r3, #0
 800f980:	dd40      	ble.n	800fa04 <wait_session_status+0xc4>
 800f982:	7960      	ldrb	r0, [r4, #5]
 800f984:	28ff      	cmp	r0, #255	@ 0xff
 800f986:	d145      	bne.n	800fa14 <wait_session_status+0xd4>
 800f988:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f98a:	a908      	add	r1, sp, #32
 800f98c:	6896      	ldr	r6, [r2, #8]
 800f98e:	6810      	ldr	r0, [r2, #0]
 800f990:	aa09      	add	r2, sp, #36	@ 0x24
 800f992:	47b0      	blx	r6
 800f994:	2800      	cmp	r0, #0
 800f996:	d0ed      	beq.n	800f974 <wait_session_status+0x34>
 800f998:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f99c:	a80c      	add	r0, sp, #48	@ 0x30
 800f99e:	f7fc fb17 	bl	800bfd0 <ucdr_init_buffer>
 800f9a2:	2600      	movs	r6, #0
 800f9a4:	f10d 031e 	add.w	r3, sp, #30
 800f9a8:	aa07      	add	r2, sp, #28
 800f9aa:	a90c      	add	r1, sp, #48	@ 0x30
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f88d 601c 	strb.w	r6, [sp, #28]
 800f9b2:	f000 fa87 	bl	800fec4 <uxr_read_session_header>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d0dc      	beq.n	800f974 <wait_session_status+0x34>
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f9c0:	f000 ffb6 	bl	8010930 <uxr_stream_id_from_raw>
 800f9c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f9c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f9cc:	9302      	str	r3, [sp, #8]
 800f9ce:	2f01      	cmp	r7, #1
 800f9d0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f9d4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f9d8:	d05c      	beq.n	800fa94 <wait_session_status+0x154>
 800f9da:	2f02      	cmp	r7, #2
 800f9dc:	d020      	beq.n	800fa20 <wait_session_status+0xe0>
 800f9de:	2f00      	cmp	r7, #0
 800f9e0:	d1c8      	bne.n	800f974 <wait_session_status+0x34>
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	f000 ffa3 	bl	8010930 <uxr_stream_id_from_raw>
 800f9ea:	a90c      	add	r1, sp, #48	@ 0x30
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f7ff fc2b 	bl	800f24c <read_submessage_list>
 800f9f6:	f001 f8ef 	bl	8010bd8 <uxr_millis>
 800f9fa:	1b40      	subs	r0, r0, r5
 800f9fc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	dcbe      	bgt.n	800f982 <wait_session_status+0x42>
 800fa04:	9b03      	ldr	r3, [sp, #12]
 800fa06:	7960      	ldrb	r0, [r4, #5]
 800fa08:	f10b 0b01 	add.w	fp, fp, #1
 800fa0c:	455b      	cmp	r3, fp
 800fa0e:	d001      	beq.n	800fa14 <wait_session_status+0xd4>
 800fa10:	28ff      	cmp	r0, #255	@ 0xff
 800fa12:	d0a3      	beq.n	800f95c <wait_session_status+0x1c>
 800fa14:	38ff      	subs	r0, #255	@ 0xff
 800fa16:	bf18      	it	ne
 800fa18:	2001      	movne	r0, #1
 800fa1a:	b01d      	add	sp, #116	@ 0x74
 800fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa20:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800fa24:	9304      	str	r3, [sp, #16]
 800fa26:	4631      	mov	r1, r6
 800fa28:	f104 0008 	add.w	r0, r4, #8
 800fa2c:	f001 f86e 	bl	8010b0c <uxr_get_input_reliable_stream>
 800fa30:	4680      	mov	r8, r0
 800fa32:	b348      	cbz	r0, 800fa88 <wait_session_status+0x148>
 800fa34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa36:	9205      	str	r2, [sp, #20]
 800fa38:	a80c      	add	r0, sp, #48	@ 0x30
 800fa3a:	f7fc faf9 	bl	800c030 <ucdr_buffer_remaining>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f10d 001d 	add.w	r0, sp, #29
 800fa44:	9000      	str	r0, [sp, #0]
 800fa46:	9a05      	ldr	r2, [sp, #20]
 800fa48:	9902      	ldr	r1, [sp, #8]
 800fa4a:	4640      	mov	r0, r8
 800fa4c:	f006 fc4e 	bl	80162ec <uxr_receive_reliable_message>
 800fa50:	b1d0      	cbz	r0, 800fa88 <wait_session_status+0x148>
 800fa52:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d03a      	beq.n	800fad0 <wait_session_status+0x190>
 800fa5a:	9f04      	ldr	r7, [sp, #16]
 800fa5c:	e00a      	b.n	800fa74 <wait_session_status+0x134>
 800fa5e:	f04f 0302 	mov.w	r3, #2
 800fa62:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800fa66:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800fa6a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800fa6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fa70:	f7ff fbec 	bl	800f24c <read_submessage_list>
 800fa74:	a914      	add	r1, sp, #80	@ 0x50
 800fa76:	2204      	movs	r2, #4
 800fa78:	4640      	mov	r0, r8
 800fa7a:	f006 fcb7 	bl	80163ec <uxr_next_input_reliable_buffer_available>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	a914      	add	r1, sp, #80	@ 0x50
 800fa82:	4620      	mov	r0, r4
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1ea      	bne.n	800fa5e <wait_session_status+0x11e>
 800fa88:	9904      	ldr	r1, [sp, #16]
 800fa8a:	4632      	mov	r2, r6
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f7ff fa59 	bl	800ef44 <write_submessage_acknack.isra.0>
 800fa92:	e76f      	b.n	800f974 <wait_session_status+0x34>
 800fa94:	4631      	mov	r1, r6
 800fa96:	f104 0008 	add.w	r0, r4, #8
 800fa9a:	f001 f82d 	bl	8010af8 <uxr_get_input_best_effort_stream>
 800fa9e:	2800      	cmp	r0, #0
 800faa0:	f43f af68 	beq.w	800f974 <wait_session_status+0x34>
 800faa4:	9902      	ldr	r1, [sp, #8]
 800faa6:	f006 fb8d 	bl	80161c4 <uxr_receive_best_effort_message>
 800faaa:	2800      	cmp	r0, #0
 800faac:	f43f af62 	beq.w	800f974 <wait_session_status+0x34>
 800fab0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fab4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fab6:	a90c      	add	r1, sp, #48	@ 0x30
 800fab8:	4620      	mov	r0, r4
 800faba:	f7ff fbc7 	bl	800f24c <read_submessage_list>
 800fabe:	e759      	b.n	800f974 <wait_session_status+0x34>
 800fac0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fac2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fac6:	47a0      	blx	r4
 800fac8:	2001      	movs	r0, #1
 800faca:	b01d      	add	sp, #116	@ 0x74
 800facc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fad4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fad6:	a90c      	add	r1, sp, #48	@ 0x30
 800fad8:	4620      	mov	r0, r4
 800fada:	f7ff fbb7 	bl	800f24c <read_submessage_list>
 800fade:	e7bc      	b.n	800fa5a <wait_session_status+0x11a>

0800fae0 <uxr_delete_session_retries>:
 800fae0:	b530      	push	{r4, r5, lr}
 800fae2:	b08f      	sub	sp, #60	@ 0x3c
 800fae4:	4604      	mov	r4, r0
 800fae6:	460d      	mov	r5, r1
 800fae8:	f000 fa2e 	bl	800ff48 <uxr_session_header_offset>
 800faec:	2300      	movs	r3, #0
 800faee:	2210      	movs	r2, #16
 800faf0:	9000      	str	r0, [sp, #0]
 800faf2:	a902      	add	r1, sp, #8
 800faf4:	a806      	add	r0, sp, #24
 800faf6:	f7fc fa59 	bl	800bfac <ucdr_init_buffer_origin_offset>
 800fafa:	a906      	add	r1, sp, #24
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 f973 	bl	800fde8 <uxr_buffer_delete_session>
 800fb02:	2200      	movs	r2, #0
 800fb04:	4611      	mov	r1, r2
 800fb06:	9b06      	ldr	r3, [sp, #24]
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 f9c7 	bl	800fe9c <uxr_stamp_session_header>
 800fb0e:	a806      	add	r0, sp, #24
 800fb10:	f7fc fa8a 	bl	800c028 <ucdr_buffer_length>
 800fb14:	462b      	mov	r3, r5
 800fb16:	4602      	mov	r2, r0
 800fb18:	a902      	add	r1, sp, #8
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f7ff ff10 	bl	800f940 <wait_session_status>
 800fb20:	b118      	cbz	r0, 800fb2a <uxr_delete_session_retries+0x4a>
 800fb22:	7960      	ldrb	r0, [r4, #5]
 800fb24:	fab0 f080 	clz	r0, r0
 800fb28:	0940      	lsrs	r0, r0, #5
 800fb2a:	b00f      	add	sp, #60	@ 0x3c
 800fb2c:	bd30      	pop	{r4, r5, pc}
 800fb2e:	bf00      	nop

0800fb30 <uxr_create_session>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	f100 0b08 	add.w	fp, r0, #8
 800fb38:	b0ab      	sub	sp, #172	@ 0xac
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	4658      	mov	r0, fp
 800fb3e:	f000 ff2b 	bl	8010998 <uxr_reset_stream_storage>
 800fb42:	4620      	mov	r0, r4
 800fb44:	f000 fa00 	bl	800ff48 <uxr_session_header_offset>
 800fb48:	2300      	movs	r3, #0
 800fb4a:	9000      	str	r0, [sp, #0]
 800fb4c:	221c      	movs	r2, #28
 800fb4e:	a90b      	add	r1, sp, #44	@ 0x2c
 800fb50:	a812      	add	r0, sp, #72	@ 0x48
 800fb52:	f7fc fa2b 	bl	800bfac <ucdr_init_buffer_origin_offset>
 800fb56:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb58:	8a1a      	ldrh	r2, [r3, #16]
 800fb5a:	3a04      	subs	r2, #4
 800fb5c:	b292      	uxth	r2, r2
 800fb5e:	a912      	add	r1, sp, #72	@ 0x48
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 f917 	bl	800fd94 <uxr_buffer_create_session>
 800fb66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f000 f983 	bl	800fe74 <uxr_stamp_create_session_header>
 800fb6e:	a812      	add	r0, sp, #72	@ 0x48
 800fb70:	f7fc fa5a 	bl	800c028 <ucdr_buffer_length>
 800fb74:	23ff      	movs	r3, #255	@ 0xff
 800fb76:	7163      	strb	r3, [r4, #5]
 800fb78:	230a      	movs	r3, #10
 800fb7a:	46da      	mov	sl, fp
 800fb7c:	9303      	str	r3, [sp, #12]
 800fb7e:	4683      	mov	fp, r0
 800fb80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb82:	465a      	mov	r2, fp
 800fb84:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fb88:	a90b      	add	r1, sp, #44	@ 0x2c
 800fb8a:	47a8      	blx	r5
 800fb8c:	f001 f824 	bl	8010bd8 <uxr_millis>
 800fb90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb94:	4605      	mov	r5, r0
 800fb96:	e009      	b.n	800fbac <uxr_create_session+0x7c>
 800fb98:	f001 f81e 	bl	8010bd8 <uxr_millis>
 800fb9c:	1b40      	subs	r0, r0, r5
 800fb9e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	7962      	ldrb	r2, [r4, #5]
 800fba6:	dd38      	ble.n	800fc1a <uxr_create_session+0xea>
 800fba8:	2aff      	cmp	r2, #255	@ 0xff
 800fbaa:	d13c      	bne.n	800fc26 <uxr_create_session+0xf6>
 800fbac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fbae:	a907      	add	r1, sp, #28
 800fbb0:	6896      	ldr	r6, [r2, #8]
 800fbb2:	6810      	ldr	r0, [r2, #0]
 800fbb4:	aa08      	add	r2, sp, #32
 800fbb6:	47b0      	blx	r6
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d0ed      	beq.n	800fb98 <uxr_create_session+0x68>
 800fbbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fbc0:	a81a      	add	r0, sp, #104	@ 0x68
 800fbc2:	f7fc fa05 	bl	800bfd0 <ucdr_init_buffer>
 800fbc6:	2600      	movs	r6, #0
 800fbc8:	f10d 031a 	add.w	r3, sp, #26
 800fbcc:	aa06      	add	r2, sp, #24
 800fbce:	a91a      	add	r1, sp, #104	@ 0x68
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f88d 6018 	strb.w	r6, [sp, #24]
 800fbd6:	f000 f975 	bl	800fec4 <uxr_read_session_header>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d0dc      	beq.n	800fb98 <uxr_create_session+0x68>
 800fbde:	4631      	mov	r1, r6
 800fbe0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fbe4:	f000 fea4 	bl	8010930 <uxr_stream_id_from_raw>
 800fbe8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fbec:	2e01      	cmp	r6, #1
 800fbee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fbf2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800fbf6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fbfa:	d053      	beq.n	800fca4 <uxr_create_session+0x174>
 800fbfc:	2e02      	cmp	r6, #2
 800fbfe:	d018      	beq.n	800fc32 <uxr_create_session+0x102>
 800fc00:	2e00      	cmp	r6, #0
 800fc02:	d1c9      	bne.n	800fb98 <uxr_create_session+0x68>
 800fc04:	4631      	mov	r1, r6
 800fc06:	4630      	mov	r0, r6
 800fc08:	f000 fe92 	bl	8010930 <uxr_stream_id_from_raw>
 800fc0c:	a91a      	add	r1, sp, #104	@ 0x68
 800fc0e:	4602      	mov	r2, r0
 800fc10:	900a      	str	r0, [sp, #40]	@ 0x28
 800fc12:	4620      	mov	r0, r4
 800fc14:	f7ff fb1a 	bl	800f24c <read_submessage_list>
 800fc18:	e7be      	b.n	800fb98 <uxr_create_session+0x68>
 800fc1a:	9b03      	ldr	r3, [sp, #12]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	9303      	str	r3, [sp, #12]
 800fc20:	d001      	beq.n	800fc26 <uxr_create_session+0xf6>
 800fc22:	2aff      	cmp	r2, #255	@ 0xff
 800fc24:	d0ac      	beq.n	800fb80 <uxr_create_session+0x50>
 800fc26:	2a00      	cmp	r2, #0
 800fc28:	d051      	beq.n	800fcce <uxr_create_session+0x19e>
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	b02b      	add	sp, #172	@ 0xac
 800fc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc32:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fc36:	9304      	str	r3, [sp, #16]
 800fc38:	4639      	mov	r1, r7
 800fc3a:	4650      	mov	r0, sl
 800fc3c:	f000 ff66 	bl	8010b0c <uxr_get_input_reliable_stream>
 800fc40:	4680      	mov	r8, r0
 800fc42:	b348      	cbz	r0, 800fc98 <uxr_create_session+0x168>
 800fc44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fc46:	9205      	str	r2, [sp, #20]
 800fc48:	a81a      	add	r0, sp, #104	@ 0x68
 800fc4a:	f7fc f9f1 	bl	800c030 <ucdr_buffer_remaining>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	f10d 0019 	add.w	r0, sp, #25
 800fc54:	9000      	str	r0, [sp, #0]
 800fc56:	9a05      	ldr	r2, [sp, #20]
 800fc58:	4649      	mov	r1, r9
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	f006 fb46 	bl	80162ec <uxr_receive_reliable_message>
 800fc60:	b1d0      	cbz	r0, 800fc98 <uxr_create_session+0x168>
 800fc62:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d038      	beq.n	800fcdc <uxr_create_session+0x1ac>
 800fc6a:	9e04      	ldr	r6, [sp, #16]
 800fc6c:	e00a      	b.n	800fc84 <uxr_create_session+0x154>
 800fc6e:	f04f 0302 	mov.w	r3, #2
 800fc72:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800fc76:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800fc7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc80:	f7ff fae4 	bl	800f24c <read_submessage_list>
 800fc84:	a922      	add	r1, sp, #136	@ 0x88
 800fc86:	2204      	movs	r2, #4
 800fc88:	4640      	mov	r0, r8
 800fc8a:	f006 fbaf 	bl	80163ec <uxr_next_input_reliable_buffer_available>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	a922      	add	r1, sp, #136	@ 0x88
 800fc92:	4620      	mov	r0, r4
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1ea      	bne.n	800fc6e <uxr_create_session+0x13e>
 800fc98:	9904      	ldr	r1, [sp, #16]
 800fc9a:	463a      	mov	r2, r7
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f7ff f951 	bl	800ef44 <write_submessage_acknack.isra.0>
 800fca2:	e779      	b.n	800fb98 <uxr_create_session+0x68>
 800fca4:	4639      	mov	r1, r7
 800fca6:	4650      	mov	r0, sl
 800fca8:	f000 ff26 	bl	8010af8 <uxr_get_input_best_effort_stream>
 800fcac:	2800      	cmp	r0, #0
 800fcae:	f43f af73 	beq.w	800fb98 <uxr_create_session+0x68>
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	f006 fa86 	bl	80161c4 <uxr_receive_best_effort_message>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	f43f af6d 	beq.w	800fb98 <uxr_create_session+0x68>
 800fcbe:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fcc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fcc4:	a91a      	add	r1, sp, #104	@ 0x68
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	f7ff fac0 	bl	800f24c <read_submessage_list>
 800fccc:	e764      	b.n	800fb98 <uxr_create_session+0x68>
 800fcce:	4650      	mov	r0, sl
 800fcd0:	f000 fe62 	bl	8010998 <uxr_reset_stream_storage>
 800fcd4:	2001      	movs	r0, #1
 800fcd6:	b02b      	add	sp, #172	@ 0xac
 800fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcdc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fce0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fce2:	a91a      	add	r1, sp, #104	@ 0x68
 800fce4:	4620      	mov	r0, r4
 800fce6:	f7ff fab1 	bl	800f24c <read_submessage_list>
 800fcea:	e7be      	b.n	800fc6a <uxr_create_session+0x13a>

0800fcec <uxr_prepare_stream_to_write_submessage>:
 800fcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcf0:	b082      	sub	sp, #8
 800fcf2:	4682      	mov	sl, r0
 800fcf4:	4610      	mov	r0, r2
 800fcf6:	4615      	mov	r5, r2
 800fcf8:	461e      	mov	r6, r3
 800fcfa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800fcfe:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800fd02:	9101      	str	r1, [sp, #4]
 800fd04:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800fd08:	f000 ff60 	bl	8010bcc <uxr_submessage_padding>
 800fd0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd10:	f105 0904 	add.w	r9, r5, #4
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	4481      	add	r9, r0
 800fd18:	d01d      	beq.n	800fd56 <uxr_prepare_stream_to_write_submessage+0x6a>
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	d116      	bne.n	800fd4c <uxr_prepare_stream_to_write_submessage+0x60>
 800fd1e:	4621      	mov	r1, r4
 800fd20:	f10a 0008 	add.w	r0, sl, #8
 800fd24:	f000 fede 	bl	8010ae4 <uxr_get_output_reliable_stream>
 800fd28:	4604      	mov	r4, r0
 800fd2a:	b158      	cbz	r0, 800fd44 <uxr_prepare_stream_to_write_submessage+0x58>
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	4632      	mov	r2, r6
 800fd30:	f006 fd18 	bl	8016764 <uxr_prepare_reliable_buffer_to_write>
 800fd34:	4604      	mov	r4, r0
 800fd36:	b12c      	cbz	r4, 800fd44 <uxr_prepare_stream_to_write_submessage+0x58>
 800fd38:	4643      	mov	r3, r8
 800fd3a:	b2aa      	uxth	r2, r5
 800fd3c:	4639      	mov	r1, r7
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f000 ff04 	bl	8010b4c <uxr_buffer_submessage_header>
 800fd44:	4620      	mov	r0, r4
 800fd46:	b002      	add	sp, #8
 800fd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd4c:	2400      	movs	r4, #0
 800fd4e:	4620      	mov	r0, r4
 800fd50:	b002      	add	sp, #8
 800fd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd56:	4621      	mov	r1, r4
 800fd58:	f10a 0008 	add.w	r0, sl, #8
 800fd5c:	f000 feba 	bl	8010ad4 <uxr_get_output_best_effort_stream>
 800fd60:	4604      	mov	r4, r0
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d0ee      	beq.n	800fd44 <uxr_prepare_stream_to_write_submessage+0x58>
 800fd66:	4649      	mov	r1, r9
 800fd68:	4632      	mov	r2, r6
 800fd6a:	f006 fc2b 	bl	80165c4 <uxr_prepare_best_effort_buffer_to_write>
 800fd6e:	4604      	mov	r4, r0
 800fd70:	e7e1      	b.n	800fd36 <uxr_prepare_stream_to_write_submessage+0x4a>
 800fd72:	bf00      	nop

0800fd74 <uxr_init_session_info>:
 800fd74:	0e13      	lsrs	r3, r2, #24
 800fd76:	7043      	strb	r3, [r0, #1]
 800fd78:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800fd7c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fd80:	7001      	strb	r1, [r0, #0]
 800fd82:	70c3      	strb	r3, [r0, #3]
 800fd84:	2109      	movs	r1, #9
 800fd86:	23ff      	movs	r3, #255	@ 0xff
 800fd88:	f880 c002 	strb.w	ip, [r0, #2]
 800fd8c:	7102      	strb	r2, [r0, #4]
 800fd8e:	80c1      	strh	r1, [r0, #6]
 800fd90:	7143      	strb	r3, [r0, #5]
 800fd92:	4770      	bx	lr

0800fd94 <uxr_buffer_create_session>:
 800fd94:	b530      	push	{r4, r5, lr}
 800fd96:	b089      	sub	sp, #36	@ 0x24
 800fd98:	2300      	movs	r3, #0
 800fd9a:	4d12      	ldr	r5, [pc, #72]	@ (800fde4 <uxr_buffer_create_session+0x50>)
 800fd9c:	9307      	str	r3, [sp, #28]
 800fd9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fda2:	2201      	movs	r2, #1
 800fda4:	9301      	str	r3, [sp, #4]
 800fda6:	80c2      	strh	r2, [r0, #6]
 800fda8:	f88d 2004 	strb.w	r2, [sp, #4]
 800fdac:	682a      	ldr	r2, [r5, #0]
 800fdae:	9200      	str	r2, [sp, #0]
 800fdb0:	88aa      	ldrh	r2, [r5, #4]
 800fdb2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fdb6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800fdba:	9202      	str	r2, [sp, #8]
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	7802      	ldrb	r2, [r0, #0]
 800fdc0:	9303      	str	r3, [sp, #12]
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	f88d 200c 	strb.w	r2, [sp, #12]
 800fdc8:	4620      	mov	r0, r4
 800fdca:	2210      	movs	r2, #16
 800fdcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800fdd0:	9306      	str	r3, [sp, #24]
 800fdd2:	f000 febb 	bl	8010b4c <uxr_buffer_submessage_header>
 800fdd6:	4669      	mov	r1, sp
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f001 fe13 	bl	8011a04 <uxr_serialize_CREATE_CLIENT_Payload>
 800fdde:	b009      	add	sp, #36	@ 0x24
 800fde0:	bd30      	pop	{r4, r5, pc}
 800fde2:	bf00      	nop
 800fde4:	08018b78 	.word	0x08018b78

0800fde8 <uxr_buffer_delete_session>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	4b0c      	ldr	r3, [pc, #48]	@ (800fe1c <uxr_buffer_delete_session+0x34>)
 800fdec:	b082      	sub	sp, #8
 800fdee:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800fdf2:	f8ad c006 	strh.w	ip, [sp, #6]
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	2202      	movs	r2, #2
 800fdfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdfe:	80c2      	strh	r2, [r0, #6]
 800fe00:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fe04:	2204      	movs	r2, #4
 800fe06:	2300      	movs	r3, #0
 800fe08:	2103      	movs	r1, #3
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f000 fe9e 	bl	8010b4c <uxr_buffer_submessage_header>
 800fe10:	a901      	add	r1, sp, #4
 800fe12:	4620      	mov	r0, r4
 800fe14:	f001 fe9c 	bl	8011b50 <uxr_serialize_DELETE_Payload>
 800fe18:	b002      	add	sp, #8
 800fe1a:	bd10      	pop	{r4, pc}
 800fe1c:	08018b78 	.word	0x08018b78

0800fe20 <uxr_read_create_session_status>:
 800fe20:	b510      	push	{r4, lr}
 800fe22:	b088      	sub	sp, #32
 800fe24:	4604      	mov	r4, r0
 800fe26:	4608      	mov	r0, r1
 800fe28:	a901      	add	r1, sp, #4
 800fe2a:	f001 fea1 	bl	8011b70 <uxr_deserialize_STATUS_AGENT_Payload>
 800fe2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe32:	7163      	strb	r3, [r4, #5]
 800fe34:	b008      	add	sp, #32
 800fe36:	bd10      	pop	{r4, pc}

0800fe38 <uxr_read_delete_session_status>:
 800fe38:	b510      	push	{r4, lr}
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	4608      	mov	r0, r1
 800fe40:	a902      	add	r1, sp, #8
 800fe42:	f001 fec5 	bl	8011bd0 <uxr_deserialize_STATUS_Payload>
 800fe46:	88e3      	ldrh	r3, [r4, #6]
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	d001      	beq.n	800fe50 <uxr_read_delete_session_status+0x18>
 800fe4c:	b004      	add	sp, #16
 800fe4e:	bd10      	pop	{r4, pc}
 800fe50:	f10d 000a 	add.w	r0, sp, #10
 800fe54:	f7fe ff06 	bl	800ec64 <uxr_object_id_from_raw>
 800fe58:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800fe5c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800fe60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	bf04      	itt	eq
 800fe6a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800fe6e:	7163      	strbeq	r3, [r4, #5]
 800fe70:	b004      	add	sp, #16
 800fe72:	bd10      	pop	{r4, pc}

0800fe74 <uxr_stamp_create_session_header>:
 800fe74:	b510      	push	{r4, lr}
 800fe76:	2208      	movs	r2, #8
 800fe78:	b08a      	sub	sp, #40	@ 0x28
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	eb0d 0002 	add.w	r0, sp, r2
 800fe80:	f7fc f8a6 	bl	800bfd0 <ucdr_init_buffer>
 800fe84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe88:	9400      	str	r4, [sp, #0]
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800fe92:	a802      	add	r0, sp, #8
 800fe94:	f001 f854 	bl	8010f40 <uxr_serialize_message_header>
 800fe98:	b00a      	add	sp, #40	@ 0x28
 800fe9a:	bd10      	pop	{r4, pc}

0800fe9c <uxr_stamp_session_header>:
 800fe9c:	b530      	push	{r4, r5, lr}
 800fe9e:	b08d      	sub	sp, #52	@ 0x34
 800fea0:	4604      	mov	r4, r0
 800fea2:	460d      	mov	r5, r1
 800fea4:	9203      	str	r2, [sp, #12]
 800fea6:	4619      	mov	r1, r3
 800fea8:	a804      	add	r0, sp, #16
 800feaa:	2208      	movs	r2, #8
 800feac:	f7fc f890 	bl	800bfd0 <ucdr_init_buffer>
 800feb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feb4:	9b03      	ldr	r3, [sp, #12]
 800feb6:	9400      	str	r4, [sp, #0]
 800feb8:	462a      	mov	r2, r5
 800feba:	a804      	add	r0, sp, #16
 800febc:	f001 f840 	bl	8010f40 <uxr_serialize_message_header>
 800fec0:	b00d      	add	sp, #52	@ 0x34
 800fec2:	bd30      	pop	{r4, r5, pc}

0800fec4 <uxr_read_session_header>:
 800fec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec8:	4607      	mov	r7, r0
 800feca:	b084      	sub	sp, #16
 800fecc:	4608      	mov	r0, r1
 800fece:	460c      	mov	r4, r1
 800fed0:	4615      	mov	r5, r2
 800fed2:	461e      	mov	r6, r3
 800fed4:	f7fc f8ac 	bl	800c030 <ucdr_buffer_remaining>
 800fed8:	2808      	cmp	r0, #8
 800feda:	d803      	bhi.n	800fee4 <uxr_read_session_header+0x20>
 800fedc:	2000      	movs	r0, #0
 800fede:	b004      	add	sp, #16
 800fee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee4:	f10d 080c 	add.w	r8, sp, #12
 800fee8:	4633      	mov	r3, r6
 800feea:	462a      	mov	r2, r5
 800feec:	f8cd 8000 	str.w	r8, [sp]
 800fef0:	4620      	mov	r0, r4
 800fef2:	f10d 010b 	add.w	r1, sp, #11
 800fef6:	f001 f841 	bl	8010f7c <uxr_deserialize_message_header>
 800fefa:	783a      	ldrb	r2, [r7, #0]
 800fefc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d1eb      	bne.n	800fedc <uxr_read_session_header+0x18>
 800ff04:	061b      	lsls	r3, r3, #24
 800ff06:	d41c      	bmi.n	800ff42 <uxr_read_session_header+0x7e>
 800ff08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ff0c:	787b      	ldrb	r3, [r7, #1]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d003      	beq.n	800ff1a <uxr_read_session_header+0x56>
 800ff12:	2001      	movs	r0, #1
 800ff14:	f080 0001 	eor.w	r0, r0, #1
 800ff18:	e7e1      	b.n	800fede <uxr_read_session_header+0x1a>
 800ff1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ff1e:	78bb      	ldrb	r3, [r7, #2]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	f107 0102 	add.w	r1, r7, #2
 800ff26:	d1f4      	bne.n	800ff12 <uxr_read_session_header+0x4e>
 800ff28:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ff2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d1ee      	bne.n	800ff12 <uxr_read_session_header+0x4e>
 800ff34:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ff38:	784b      	ldrb	r3, [r1, #1]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d1e9      	bne.n	800ff12 <uxr_read_session_header+0x4e>
 800ff3e:	2000      	movs	r0, #0
 800ff40:	e7e8      	b.n	800ff14 <uxr_read_session_header+0x50>
 800ff42:	2001      	movs	r0, #1
 800ff44:	e7cb      	b.n	800fede <uxr_read_session_header+0x1a>
 800ff46:	bf00      	nop

0800ff48 <uxr_session_header_offset>:
 800ff48:	f990 3000 	ldrsb.w	r3, [r0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	bfac      	ite	ge
 800ff50:	2008      	movge	r0, #8
 800ff52:	2004      	movlt	r0, #4
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop

0800ff58 <uxr_init_base_object_request>:
 800ff58:	b510      	push	{r4, lr}
 800ff5a:	88c3      	ldrh	r3, [r0, #6]
 800ff5c:	b082      	sub	sp, #8
 800ff5e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ff62:	9101      	str	r1, [sp, #4]
 800ff64:	f1a3 010a 	sub.w	r1, r3, #10
 800ff68:	b289      	uxth	r1, r1
 800ff6a:	42a1      	cmp	r1, r4
 800ff6c:	d80e      	bhi.n	800ff8c <uxr_init_base_object_request+0x34>
 800ff6e:	3301      	adds	r3, #1
 800ff70:	b29c      	uxth	r4, r3
 800ff72:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	80c4      	strh	r4, [r0, #6]
 800ff7a:	9801      	ldr	r0, [sp, #4]
 800ff7c:	7011      	strb	r1, [r2, #0]
 800ff7e:	7053      	strb	r3, [r2, #1]
 800ff80:	1c91      	adds	r1, r2, #2
 800ff82:	f7fe fe83 	bl	800ec8c <uxr_object_id_to_raw>
 800ff86:	4620      	mov	r0, r4
 800ff88:	b002      	add	sp, #8
 800ff8a:	bd10      	pop	{r4, pc}
 800ff8c:	230a      	movs	r3, #10
 800ff8e:	2100      	movs	r1, #0
 800ff90:	461c      	mov	r4, r3
 800ff92:	e7f1      	b.n	800ff78 <uxr_init_base_object_request+0x20>

0800ff94 <uxr_parse_base_object_request>:
 800ff94:	b570      	push	{r4, r5, r6, lr}
 800ff96:	4604      	mov	r4, r0
 800ff98:	3002      	adds	r0, #2
 800ff9a:	460d      	mov	r5, r1
 800ff9c:	4616      	mov	r6, r2
 800ff9e:	f7fe fe61 	bl	800ec64 <uxr_object_id_from_raw>
 800ffa2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ffa6:	8028      	strh	r0, [r5, #0]
 800ffa8:	806b      	strh	r3, [r5, #2]
 800ffaa:	7822      	ldrb	r2, [r4, #0]
 800ffac:	7863      	ldrb	r3, [r4, #1]
 800ffae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ffb2:	8033      	strh	r3, [r6, #0]
 800ffb4:	bd70      	pop	{r4, r5, r6, pc}
 800ffb6:	bf00      	nop

0800ffb8 <uxr_init_framing_io>:
 800ffb8:	2300      	movs	r3, #0
 800ffba:	7041      	strb	r1, [r0, #1]
 800ffbc:	7003      	strb	r3, [r0, #0]
 800ffbe:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop

0800ffc4 <uxr_write_framed_msg>:
 800ffc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc8:	4617      	mov	r7, r2
 800ffca:	7842      	ldrb	r2, [r0, #1]
 800ffcc:	b083      	sub	sp, #12
 800ffce:	460e      	mov	r6, r1
 800ffd0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800ffd4:	469a      	mov	sl, r3
 800ffd6:	2901      	cmp	r1, #1
 800ffd8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800ffdc:	4604      	mov	r4, r0
 800ffde:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800ffe2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800ffe6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800ffea:	f240 8137 	bls.w	801025c <uxr_write_framed_msg+0x298>
 800ffee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fff2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800fff6:	2901      	cmp	r1, #1
 800fff8:	f04f 0202 	mov.w	r2, #2
 800fffc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010000:	f240 808f 	bls.w	8010122 <uxr_write_framed_msg+0x15e>
 8010004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010006:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801000a:	b2dd      	uxtb	r5, r3
 801000c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010010:	2203      	movs	r2, #3
 8010012:	2901      	cmp	r1, #1
 8010014:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010018:	f240 809a 	bls.w	8010150 <uxr_write_framed_msg+0x18c>
 801001c:	18a1      	adds	r1, r4, r2
 801001e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010020:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8010024:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010028:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801002c:	3201      	adds	r2, #1
 801002e:	2801      	cmp	r0, #1
 8010030:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010034:	f240 80a0 	bls.w	8010178 <uxr_write_framed_msg+0x1b4>
 8010038:	18a0      	adds	r0, r4, r2
 801003a:	3201      	adds	r2, #1
 801003c:	b2d2      	uxtb	r2, r2
 801003e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010042:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010046:	2b00      	cmp	r3, #0
 8010048:	f000 80a9 	beq.w	801019e <uxr_write_framed_msg+0x1da>
 801004c:	f04f 0900 	mov.w	r9, #0
 8010050:	46c8      	mov	r8, r9
 8010052:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010056:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801005a:	2901      	cmp	r1, #1
 801005c:	f240 80c3 	bls.w	80101e6 <uxr_write_framed_msg+0x222>
 8010060:	2a29      	cmp	r2, #41	@ 0x29
 8010062:	f200 809f 	bhi.w	80101a4 <uxr_write_framed_msg+0x1e0>
 8010066:	18a1      	adds	r1, r4, r2
 8010068:	3201      	adds	r2, #1
 801006a:	b2d2      	uxtb	r2, r2
 801006c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010070:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010074:	ea89 0303 	eor.w	r3, r9, r3
 8010078:	498c      	ldr	r1, [pc, #560]	@ (80102ac <uxr_write_framed_msg+0x2e8>)
 801007a:	b2db      	uxtb	r3, r3
 801007c:	f108 0801 	add.w	r8, r8, #1
 8010080:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010084:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8010088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801008a:	4543      	cmp	r3, r8
 801008c:	d8e1      	bhi.n	8010052 <uxr_write_framed_msg+0x8e>
 801008e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010092:	fa5f f889 	uxtb.w	r8, r9
 8010096:	9301      	str	r3, [sp, #4]
 8010098:	f04f 0900 	mov.w	r9, #0
 801009c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80100a0:	fa5f f18a 	uxtb.w	r1, sl
 80100a4:	2901      	cmp	r1, #1
 80100a6:	d921      	bls.n	80100ec <uxr_write_framed_msg+0x128>
 80100a8:	2a29      	cmp	r2, #41	@ 0x29
 80100aa:	f240 80af 	bls.w	801020c <uxr_write_framed_msg+0x248>
 80100ae:	2500      	movs	r5, #0
 80100b0:	e000      	b.n	80100b4 <uxr_write_framed_msg+0xf0>
 80100b2:	b160      	cbz	r0, 80100ce <uxr_write_framed_msg+0x10a>
 80100b4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80100b8:	1b52      	subs	r2, r2, r5
 80100ba:	465b      	mov	r3, fp
 80100bc:	4421      	add	r1, r4
 80100be:	4638      	mov	r0, r7
 80100c0:	47b0      	blx	r6
 80100c2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80100c6:	4405      	add	r5, r0
 80100c8:	4295      	cmp	r5, r2
 80100ca:	d3f2      	bcc.n	80100b2 <uxr_write_framed_msg+0xee>
 80100cc:	d003      	beq.n	80100d6 <uxr_write_framed_msg+0x112>
 80100ce:	2000      	movs	r0, #0
 80100d0:	b003      	add	sp, #12
 80100d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d6:	fa5f f18a 	uxtb.w	r1, sl
 80100da:	f04f 0300 	mov.w	r3, #0
 80100de:	2901      	cmp	r1, #1
 80100e0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80100e4:	f04f 0200 	mov.w	r2, #0
 80100e8:	f200 8090 	bhi.w	801020c <uxr_write_framed_msg+0x248>
 80100ec:	1c51      	adds	r1, r2, #1
 80100ee:	b2c9      	uxtb	r1, r1
 80100f0:	2929      	cmp	r1, #41	@ 0x29
 80100f2:	d8dc      	bhi.n	80100ae <uxr_write_framed_msg+0xea>
 80100f4:	18a5      	adds	r5, r4, r2
 80100f6:	4421      	add	r1, r4
 80100f8:	3202      	adds	r2, #2
 80100fa:	f088 0820 	eor.w	r8, r8, #32
 80100fe:	4648      	mov	r0, r9
 8010100:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010104:	b2d2      	uxtb	r2, r2
 8010106:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801010a:	f04f 0901 	mov.w	r9, #1
 801010e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010112:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010116:	2800      	cmp	r0, #0
 8010118:	f040 8085 	bne.w	8010226 <uxr_write_framed_msg+0x262>
 801011c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010120:	e7bc      	b.n	801009c <uxr_write_framed_msg+0xd8>
 8010122:	4611      	mov	r1, r2
 8010124:	f04f 0c03 	mov.w	ip, #3
 8010128:	2204      	movs	r2, #4
 801012a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801012c:	4421      	add	r1, r4
 801012e:	b2dd      	uxtb	r5, r3
 8010130:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8010134:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8010138:	44a4      	add	ip, r4
 801013a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801013e:	f080 0020 	eor.w	r0, r0, #32
 8010142:	2901      	cmp	r1, #1
 8010144:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8010148:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801014c:	f63f af66 	bhi.w	801001c <uxr_write_framed_msg+0x58>
 8010150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010152:	18a0      	adds	r0, r4, r2
 8010154:	f085 0520 	eor.w	r5, r5, #32
 8010158:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801015c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010160:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8010164:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8010168:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801016c:	3202      	adds	r2, #2
 801016e:	2801      	cmp	r0, #1
 8010170:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010174:	f63f af60 	bhi.w	8010038 <uxr_write_framed_msg+0x74>
 8010178:	1c50      	adds	r0, r2, #1
 801017a:	18a5      	adds	r5, r4, r2
 801017c:	fa54 f080 	uxtab	r0, r4, r0
 8010180:	3202      	adds	r2, #2
 8010182:	f081 0120 	eor.w	r1, r1, #32
 8010186:	b2d2      	uxtb	r2, r2
 8010188:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801018c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8010190:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010194:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010198:	2b00      	cmp	r3, #0
 801019a:	f47f af57 	bne.w	801004c <uxr_write_framed_msg+0x88>
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	4698      	mov	r8, r3
 80101a2:	e779      	b.n	8010098 <uxr_write_framed_msg+0xd4>
 80101a4:	2500      	movs	r5, #0
 80101a6:	e001      	b.n	80101ac <uxr_write_framed_msg+0x1e8>
 80101a8:	2800      	cmp	r0, #0
 80101aa:	d090      	beq.n	80100ce <uxr_write_framed_msg+0x10a>
 80101ac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80101b0:	1b52      	subs	r2, r2, r5
 80101b2:	465b      	mov	r3, fp
 80101b4:	4421      	add	r1, r4
 80101b6:	4638      	mov	r0, r7
 80101b8:	47b0      	blx	r6
 80101ba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80101be:	4405      	add	r5, r0
 80101c0:	4295      	cmp	r5, r2
 80101c2:	d3f1      	bcc.n	80101a8 <uxr_write_framed_msg+0x1e4>
 80101c4:	d183      	bne.n	80100ce <uxr_write_framed_msg+0x10a>
 80101c6:	f04f 0300 	mov.w	r3, #0
 80101ca:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80101ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101d0:	4543      	cmp	r3, r8
 80101d2:	d964      	bls.n	801029e <uxr_write_framed_msg+0x2da>
 80101d4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80101d8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80101dc:	2901      	cmp	r1, #1
 80101de:	f04f 0200 	mov.w	r2, #0
 80101e2:	f63f af3d 	bhi.w	8010060 <uxr_write_framed_msg+0x9c>
 80101e6:	1c51      	adds	r1, r2, #1
 80101e8:	b2c9      	uxtb	r1, r1
 80101ea:	2929      	cmp	r1, #41	@ 0x29
 80101ec:	d8da      	bhi.n	80101a4 <uxr_write_framed_msg+0x1e0>
 80101ee:	18a0      	adds	r0, r4, r2
 80101f0:	4421      	add	r1, r4
 80101f2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80101f6:	3202      	adds	r2, #2
 80101f8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80101fc:	b2d2      	uxtb	r2, r2
 80101fe:	f083 0020 	eor.w	r0, r3, #32
 8010202:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8010206:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801020a:	e733      	b.n	8010074 <uxr_write_framed_msg+0xb0>
 801020c:	18a1      	adds	r1, r4, r2
 801020e:	3201      	adds	r2, #1
 8010210:	4648      	mov	r0, r9
 8010212:	b2d2      	uxtb	r2, r2
 8010214:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010218:	f04f 0901 	mov.w	r9, #1
 801021c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010220:	2800      	cmp	r0, #0
 8010222:	f43f af7b 	beq.w	801011c <uxr_write_framed_msg+0x158>
 8010226:	2500      	movs	r5, #0
 8010228:	e002      	b.n	8010230 <uxr_write_framed_msg+0x26c>
 801022a:	2800      	cmp	r0, #0
 801022c:	f43f af4f 	beq.w	80100ce <uxr_write_framed_msg+0x10a>
 8010230:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010234:	1b52      	subs	r2, r2, r5
 8010236:	465b      	mov	r3, fp
 8010238:	4421      	add	r1, r4
 801023a:	4638      	mov	r0, r7
 801023c:	47b0      	blx	r6
 801023e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010242:	4405      	add	r5, r0
 8010244:	4295      	cmp	r5, r2
 8010246:	d3f0      	bcc.n	801022a <uxr_write_framed_msg+0x266>
 8010248:	f47f af41 	bne.w	80100ce <uxr_write_framed_msg+0x10a>
 801024c:	2300      	movs	r3, #0
 801024e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010254:	b298      	uxth	r0, r3
 8010256:	b003      	add	sp, #12
 8010258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025c:	217d      	movs	r1, #125	@ 0x7d
 801025e:	f082 0220 	eor.w	r2, r2, #32
 8010262:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8010266:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801026a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801026e:	2901      	cmp	r1, #1
 8010270:	f04f 0203 	mov.w	r2, #3
 8010274:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010278:	d804      	bhi.n	8010284 <uxr_write_framed_msg+0x2c0>
 801027a:	4611      	mov	r1, r2
 801027c:	f04f 0c04 	mov.w	ip, #4
 8010280:	2205      	movs	r2, #5
 8010282:	e752      	b.n	801012a <uxr_write_framed_msg+0x166>
 8010284:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010286:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801028a:	b2dd      	uxtb	r5, r3
 801028c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010290:	2204      	movs	r2, #4
 8010292:	2901      	cmp	r1, #1
 8010294:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010298:	f63f aec0 	bhi.w	801001c <uxr_write_framed_msg+0x58>
 801029c:	e758      	b.n	8010150 <uxr_write_framed_msg+0x18c>
 801029e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80102a2:	fa5f f889 	uxtb.w	r8, r9
 80102a6:	9301      	str	r3, [sp, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	e6f5      	b.n	8010098 <uxr_write_framed_msg+0xd4>
 80102ac:	08018f4c 	.word	0x08018f4c

080102b0 <uxr_framing_read_transport>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	4604      	mov	r4, r0
 80102b6:	b083      	sub	sp, #12
 80102b8:	461f      	mov	r7, r3
 80102ba:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80102be:	4689      	mov	r9, r1
 80102c0:	4692      	mov	sl, r2
 80102c2:	f000 fc89 	bl	8010bd8 <uxr_millis>
 80102c6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80102ca:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80102ce:	42b3      	cmp	r3, r6
 80102d0:	4680      	mov	r8, r0
 80102d2:	d061      	beq.n	8010398 <uxr_framing_read_transport+0xe8>
 80102d4:	d81c      	bhi.n	8010310 <uxr_framing_read_transport+0x60>
 80102d6:	1e75      	subs	r5, r6, #1
 80102d8:	1aed      	subs	r5, r5, r3
 80102da:	b2ed      	uxtb	r5, r5
 80102dc:	2600      	movs	r6, #0
 80102de:	455d      	cmp	r5, fp
 80102e0:	d81f      	bhi.n	8010322 <uxr_framing_read_transport+0x72>
 80102e2:	19ab      	adds	r3, r5, r6
 80102e4:	455b      	cmp	r3, fp
 80102e6:	bf84      	itt	hi
 80102e8:	ebab 0605 	subhi.w	r6, fp, r5
 80102ec:	b2f6      	uxtbhi	r6, r6
 80102ee:	b9ed      	cbnz	r5, 801032c <uxr_framing_read_transport+0x7c>
 80102f0:	f04f 0b00 	mov.w	fp, #0
 80102f4:	f000 fc70 	bl	8010bd8 <uxr_millis>
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	eba0 0808 	sub.w	r8, r0, r8
 80102fe:	eba3 0308 	sub.w	r3, r3, r8
 8010302:	4658      	mov	r0, fp
 8010304:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010308:	603b      	str	r3, [r7, #0]
 801030a:	b003      	add	sp, #12
 801030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010310:	2e00      	cmp	r6, #0
 8010312:	d049      	beq.n	80103a8 <uxr_framing_read_transport+0xf8>
 8010314:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8010318:	b2ed      	uxtb	r5, r5
 801031a:	3e01      	subs	r6, #1
 801031c:	455d      	cmp	r5, fp
 801031e:	b2f6      	uxtb	r6, r6
 8010320:	d9df      	bls.n	80102e2 <uxr_framing_read_transport+0x32>
 8010322:	fa5f f58b 	uxtb.w	r5, fp
 8010326:	2600      	movs	r6, #0
 8010328:	2d00      	cmp	r5, #0
 801032a:	d0e1      	beq.n	80102f0 <uxr_framing_read_transport+0x40>
 801032c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010330:	3102      	adds	r1, #2
 8010332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	4421      	add	r1, r4
 801033a:	462a      	mov	r2, r5
 801033c:	4650      	mov	r0, sl
 801033e:	47c8      	blx	r9
 8010340:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010344:	4a1a      	ldr	r2, [pc, #104]	@ (80103b0 <uxr_framing_read_transport+0x100>)
 8010346:	4403      	add	r3, r0
 8010348:	0859      	lsrs	r1, r3, #1
 801034a:	fba2 2101 	umull	r2, r1, r2, r1
 801034e:	0889      	lsrs	r1, r1, #2
 8010350:	222a      	movs	r2, #42	@ 0x2a
 8010352:	fb02 3111 	mls	r1, r2, r1, r3
 8010356:	4683      	mov	fp, r0
 8010358:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801035c:	2800      	cmp	r0, #0
 801035e:	d0c7      	beq.n	80102f0 <uxr_framing_read_transport+0x40>
 8010360:	42a8      	cmp	r0, r5
 8010362:	d1c7      	bne.n	80102f4 <uxr_framing_read_transport+0x44>
 8010364:	2e00      	cmp	r6, #0
 8010366:	d0c5      	beq.n	80102f4 <uxr_framing_read_transport+0x44>
 8010368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	3102      	adds	r1, #2
 801036e:	4632      	mov	r2, r6
 8010370:	4421      	add	r1, r4
 8010372:	2300      	movs	r3, #0
 8010374:	4650      	mov	r0, sl
 8010376:	47c8      	blx	r9
 8010378:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801037c:	4a0c      	ldr	r2, [pc, #48]	@ (80103b0 <uxr_framing_read_transport+0x100>)
 801037e:	180b      	adds	r3, r1, r0
 8010380:	0859      	lsrs	r1, r3, #1
 8010382:	fba2 1201 	umull	r1, r2, r2, r1
 8010386:	0892      	lsrs	r2, r2, #2
 8010388:	212a      	movs	r1, #42	@ 0x2a
 801038a:	fb01 3312 	mls	r3, r1, r2, r3
 801038e:	eb00 0b05 	add.w	fp, r0, r5
 8010392:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010396:	e7ad      	b.n	80102f4 <uxr_framing_read_transport+0x44>
 8010398:	2600      	movs	r6, #0
 801039a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801039e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80103a0:	d9bf      	bls.n	8010322 <uxr_framing_read_transport+0x72>
 80103a2:	2102      	movs	r1, #2
 80103a4:	2529      	movs	r5, #41	@ 0x29
 80103a6:	e7c4      	b.n	8010332 <uxr_framing_read_transport+0x82>
 80103a8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80103ac:	b2ed      	uxtb	r5, r5
 80103ae:	e796      	b.n	80102de <uxr_framing_read_transport+0x2e>
 80103b0:	30c30c31 	.word	0x30c30c31

080103b4 <uxr_read_framed_msg>:
 80103b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b8:	461e      	mov	r6, r3
 80103ba:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80103be:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80103c2:	429d      	cmp	r5, r3
 80103c4:	b083      	sub	sp, #12
 80103c6:	4604      	mov	r4, r0
 80103c8:	4688      	mov	r8, r1
 80103ca:	4691      	mov	r9, r2
 80103cc:	f000 8188 	beq.w	80106e0 <uxr_read_framed_msg+0x32c>
 80103d0:	7823      	ldrb	r3, [r4, #0]
 80103d2:	4dc1      	ldr	r5, [pc, #772]	@ (80106d8 <uxr_read_framed_msg+0x324>)
 80103d4:	4fc1      	ldr	r7, [pc, #772]	@ (80106dc <uxr_read_framed_msg+0x328>)
 80103d6:	2b07      	cmp	r3, #7
 80103d8:	d8fd      	bhi.n	80103d6 <uxr_read_framed_msg+0x22>
 80103da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80103de:	0115      	.short	0x0115
 80103e0:	00d600f6 	.word	0x00d600f6
 80103e4:	009000b9 	.word	0x009000b9
 80103e8:	0030004d 	.word	0x0030004d
 80103ec:	0008      	.short	0x0008
 80103ee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80103f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80103f6:	4299      	cmp	r1, r3
 80103f8:	f000 814a 	beq.w	8010690 <uxr_read_framed_msg+0x2dc>
 80103fc:	18e2      	adds	r2, r4, r3
 80103fe:	7892      	ldrb	r2, [r2, #2]
 8010400:	2a7d      	cmp	r2, #125	@ 0x7d
 8010402:	f000 8199 	beq.w	8010738 <uxr_read_framed_msg+0x384>
 8010406:	3301      	adds	r3, #1
 8010408:	0858      	lsrs	r0, r3, #1
 801040a:	fba5 1000 	umull	r1, r0, r5, r0
 801040e:	0880      	lsrs	r0, r0, #2
 8010410:	212a      	movs	r1, #42	@ 0x2a
 8010412:	fb01 3310 	mls	r3, r1, r0, r3
 8010416:	2a7e      	cmp	r2, #126	@ 0x7e
 8010418:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801041c:	f000 8252 	beq.w	80108c4 <uxr_read_framed_msg+0x510>
 8010420:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010422:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8010424:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010428:	b29b      	uxth	r3, r3
 801042a:	2200      	movs	r2, #0
 801042c:	4299      	cmp	r1, r3
 801042e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010430:	7022      	strb	r2, [r4, #0]
 8010432:	f000 8179 	beq.w	8010728 <uxr_read_framed_msg+0x374>
 8010436:	2000      	movs	r0, #0
 8010438:	b003      	add	sp, #12
 801043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010442:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010446:	4299      	cmp	r1, r3
 8010448:	f000 8131 	beq.w	80106ae <uxr_read_framed_msg+0x2fa>
 801044c:	18e2      	adds	r2, r4, r3
 801044e:	7890      	ldrb	r0, [r2, #2]
 8010450:	287d      	cmp	r0, #125	@ 0x7d
 8010452:	f000 8190 	beq.w	8010776 <uxr_read_framed_msg+0x3c2>
 8010456:	3301      	adds	r3, #1
 8010458:	085a      	lsrs	r2, r3, #1
 801045a:	fba5 1202 	umull	r1, r2, r5, r2
 801045e:	0892      	lsrs	r2, r2, #2
 8010460:	212a      	movs	r1, #42	@ 0x2a
 8010462:	fb01 3312 	mls	r3, r1, r2, r3
 8010466:	287e      	cmp	r0, #126	@ 0x7e
 8010468:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801046c:	f000 821a 	beq.w	80108a4 <uxr_read_framed_msg+0x4f0>
 8010470:	2307      	movs	r3, #7
 8010472:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8010474:	7023      	strb	r3, [r4, #0]
 8010476:	e7ae      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 8010478:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801047a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801047e:	459e      	cmp	lr, r3
 8010480:	d938      	bls.n	80104f4 <uxr_read_framed_msg+0x140>
 8010482:	ee07 8a90 	vmov	s15, r8
 8010486:	212a      	movs	r1, #42	@ 0x2a
 8010488:	e020      	b.n	80104cc <uxr_read_framed_msg+0x118>
 801048a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801048e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8010492:	f000 80d4 	beq.w	801063e <uxr_read_framed_msg+0x28a>
 8010496:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801049a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801049e:	f000 8219 	beq.w	80108d4 <uxr_read_framed_msg+0x520>
 80104a2:	f806 c003 	strb.w	ip, [r6, r3]
 80104a6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80104aa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80104ac:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80104b0:	ea8a 000c 	eor.w	r0, sl, ip
 80104b4:	b2c0      	uxtb	r0, r0
 80104b6:	3301      	adds	r3, #1
 80104b8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80104c2:	4573      	cmp	r3, lr
 80104c4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80104c6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80104c8:	f080 8120 	bcs.w	801070c <uxr_read_framed_msg+0x358>
 80104cc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80104d0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80104d4:	f100 0c01 	add.w	ip, r0, #1
 80104d8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80104dc:	fba5 8202 	umull	r8, r2, r5, r2
 80104e0:	0892      	lsrs	r2, r2, #2
 80104e2:	4582      	cmp	sl, r0
 80104e4:	eb04 0b00 	add.w	fp, r4, r0
 80104e8:	fb01 c212 	mls	r2, r1, r2, ip
 80104ec:	d1cd      	bne.n	801048a <uxr_read_framed_msg+0xd6>
 80104ee:	ee17 8a90 	vmov	r8, s15
 80104f2:	459e      	cmp	lr, r3
 80104f4:	f040 8111 	bne.w	801071a <uxr_read_framed_msg+0x366>
 80104f8:	2306      	movs	r3, #6
 80104fa:	7023      	strb	r3, [r4, #0]
 80104fc:	e76b      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 80104fe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010502:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010506:	4298      	cmp	r0, r3
 8010508:	f000 80c2 	beq.w	8010690 <uxr_read_framed_msg+0x2dc>
 801050c:	18e2      	adds	r2, r4, r3
 801050e:	7891      	ldrb	r1, [r2, #2]
 8010510:	297d      	cmp	r1, #125	@ 0x7d
 8010512:	f000 814c 	beq.w	80107ae <uxr_read_framed_msg+0x3fa>
 8010516:	3301      	adds	r3, #1
 8010518:	085a      	lsrs	r2, r3, #1
 801051a:	fba5 0202 	umull	r0, r2, r5, r2
 801051e:	0892      	lsrs	r2, r2, #2
 8010520:	202a      	movs	r0, #42	@ 0x2a
 8010522:	fb00 3312 	mls	r3, r0, r2, r3
 8010526:	297e      	cmp	r1, #126	@ 0x7e
 8010528:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801052c:	f000 81ca 	beq.w	80108c4 <uxr_read_framed_msg+0x510>
 8010530:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8010532:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010536:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010538:	b29b      	uxth	r3, r3
 801053a:	2000      	movs	r0, #0
 801053c:	428b      	cmp	r3, r1
 801053e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010540:	8660      	strh	r0, [r4, #50]	@ 0x32
 8010542:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8010544:	f240 80df 	bls.w	8010706 <uxr_read_framed_msg+0x352>
 8010548:	7020      	strb	r0, [r4, #0]
 801054a:	b003      	add	sp, #12
 801054c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010550:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010554:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010558:	4299      	cmp	r1, r3
 801055a:	f000 80a8 	beq.w	80106ae <uxr_read_framed_msg+0x2fa>
 801055e:	18e2      	adds	r2, r4, r3
 8010560:	7890      	ldrb	r0, [r2, #2]
 8010562:	287d      	cmp	r0, #125	@ 0x7d
 8010564:	f000 8164 	beq.w	8010830 <uxr_read_framed_msg+0x47c>
 8010568:	3301      	adds	r3, #1
 801056a:	085a      	lsrs	r2, r3, #1
 801056c:	fba5 1202 	umull	r1, r2, r5, r2
 8010570:	0892      	lsrs	r2, r2, #2
 8010572:	212a      	movs	r1, #42	@ 0x2a
 8010574:	fb01 3312 	mls	r3, r1, r2, r3
 8010578:	287e      	cmp	r0, #126	@ 0x7e
 801057a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801057e:	f000 8191 	beq.w	80108a4 <uxr_read_framed_msg+0x4f0>
 8010582:	2304      	movs	r3, #4
 8010584:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010586:	7023      	strb	r3, [r4, #0]
 8010588:	e725      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 801058a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801058e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010592:	4290      	cmp	r0, r2
 8010594:	f000 80b3 	beq.w	80106fe <uxr_read_framed_msg+0x34a>
 8010598:	18a3      	adds	r3, r4, r2
 801059a:	7899      	ldrb	r1, [r3, #2]
 801059c:	297d      	cmp	r1, #125	@ 0x7d
 801059e:	f000 8164 	beq.w	801086a <uxr_read_framed_msg+0x4b6>
 80105a2:	3201      	adds	r2, #1
 80105a4:	0850      	lsrs	r0, r2, #1
 80105a6:	fba5 3000 	umull	r3, r0, r5, r0
 80105aa:	0880      	lsrs	r0, r0, #2
 80105ac:	232a      	movs	r3, #42	@ 0x2a
 80105ae:	fb03 2210 	mls	r2, r3, r0, r2
 80105b2:	297e      	cmp	r1, #126	@ 0x7e
 80105b4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80105b8:	f000 8188 	beq.w	80108cc <uxr_read_framed_msg+0x518>
 80105bc:	7863      	ldrb	r3, [r4, #1]
 80105be:	428b      	cmp	r3, r1
 80105c0:	bf0c      	ite	eq
 80105c2:	2303      	moveq	r3, #3
 80105c4:	2300      	movne	r3, #0
 80105c6:	7023      	strb	r3, [r4, #0]
 80105c8:	e705      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 80105ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80105ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80105d2:	2200      	movs	r2, #0
 80105d4:	4299      	cmp	r1, r3
 80105d6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80105da:	d06c      	beq.n	80106b6 <uxr_read_framed_msg+0x302>
 80105dc:	18e2      	adds	r2, r4, r3
 80105de:	7890      	ldrb	r0, [r2, #2]
 80105e0:	287d      	cmp	r0, #125	@ 0x7d
 80105e2:	f000 8101 	beq.w	80107e8 <uxr_read_framed_msg+0x434>
 80105e6:	3301      	adds	r3, #1
 80105e8:	085a      	lsrs	r2, r3, #1
 80105ea:	fba5 1202 	umull	r1, r2, r5, r2
 80105ee:	0892      	lsrs	r2, r2, #2
 80105f0:	212a      	movs	r1, #42	@ 0x2a
 80105f2:	fb01 3312 	mls	r3, r1, r2, r3
 80105f6:	287e      	cmp	r0, #126	@ 0x7e
 80105f8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80105fc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010600:	d059      	beq.n	80106b6 <uxr_read_framed_msg+0x302>
 8010602:	2302      	movs	r3, #2
 8010604:	7023      	strb	r3, [r4, #0]
 8010606:	e6e6      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 8010608:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801060c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010610:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8010614:	1c51      	adds	r1, r2, #1
 8010616:	084b      	lsrs	r3, r1, #1
 8010618:	fba5 c303 	umull	ip, r3, r5, r3
 801061c:	089b      	lsrs	r3, r3, #2
 801061e:	fb0e 1313 	mls	r3, lr, r3, r1
 8010622:	4592      	cmp	sl, r2
 8010624:	eb04 0002 	add.w	r0, r4, r2
 8010628:	b2da      	uxtb	r2, r3
 801062a:	f43f af04 	beq.w	8010436 <uxr_read_framed_msg+0x82>
 801062e:	7883      	ldrb	r3, [r0, #2]
 8010630:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010634:	2b7e      	cmp	r3, #126	@ 0x7e
 8010636:	d1ed      	bne.n	8010614 <uxr_read_framed_msg+0x260>
 8010638:	2301      	movs	r3, #1
 801063a:	7023      	strb	r3, [r4, #0]
 801063c:	e6cb      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 801063e:	f100 0c01 	add.w	ip, r0, #1
 8010642:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010646:	fba5 8202 	umull	r8, r2, r5, r2
 801064a:	0892      	lsrs	r2, r2, #2
 801064c:	fb01 c212 	mls	r2, r1, r2, ip
 8010650:	eb04 0c02 	add.w	ip, r4, r2
 8010654:	b2d2      	uxtb	r2, r2
 8010656:	4592      	cmp	sl, r2
 8010658:	f100 0002 	add.w	r0, r0, #2
 801065c:	f43f af47 	beq.w	80104ee <uxr_read_framed_msg+0x13a>
 8010660:	0842      	lsrs	r2, r0, #1
 8010662:	f89c a002 	ldrb.w	sl, [ip, #2]
 8010666:	fba5 8202 	umull	r8, r2, r5, r2
 801066a:	0892      	lsrs	r2, r2, #2
 801066c:	fb01 0012 	mls	r0, r1, r2, r0
 8010670:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8010674:	f08a 0c20 	eor.w	ip, sl, #32
 8010678:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801067c:	f47f af11 	bne.w	80104a2 <uxr_read_framed_msg+0xee>
 8010680:	459e      	cmp	lr, r3
 8010682:	ee17 8a90 	vmov	r8, s15
 8010686:	f43f af37 	beq.w	80104f8 <uxr_read_framed_msg+0x144>
 801068a:	2301      	movs	r3, #1
 801068c:	7023      	strb	r3, [r4, #0]
 801068e:	e6a2      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 8010690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	2301      	movs	r3, #1
 8010696:	9301      	str	r3, [sp, #4]
 8010698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801069a:	464a      	mov	r2, r9
 801069c:	4641      	mov	r1, r8
 801069e:	4620      	mov	r0, r4
 80106a0:	f7ff fe06 	bl	80102b0 <uxr_framing_read_transport>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	f43f aec6 	beq.w	8010436 <uxr_read_framed_msg+0x82>
 80106aa:	7823      	ldrb	r3, [r4, #0]
 80106ac:	e693      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 80106ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	2302      	movs	r3, #2
 80106b4:	e7ef      	b.n	8010696 <uxr_read_framed_msg+0x2e2>
 80106b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	2304      	movs	r3, #4
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	464a      	mov	r2, r9
 80106c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106c2:	4641      	mov	r1, r8
 80106c4:	4620      	mov	r0, r4
 80106c6:	f7ff fdf3 	bl	80102b0 <uxr_framing_read_transport>
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d1ed      	bne.n	80106aa <uxr_read_framed_msg+0x2f6>
 80106ce:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80106d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80106d4:	d0e9      	beq.n	80106aa <uxr_read_framed_msg+0x2f6>
 80106d6:	e6ae      	b.n	8010436 <uxr_read_framed_msg+0x82>
 80106d8:	30c30c31 	.word	0x30c30c31
 80106dc:	08018f4c 	.word	0x08018f4c
 80106e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106e2:	9300      	str	r3, [sp, #0]
 80106e4:	2305      	movs	r3, #5
 80106e6:	9301      	str	r3, [sp, #4]
 80106e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106ea:	f7ff fde1 	bl	80102b0 <uxr_framing_read_transport>
 80106ee:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80106f2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80106f6:	429a      	cmp	r2, r3
 80106f8:	f43f ae9d 	beq.w	8010436 <uxr_read_framed_msg+0x82>
 80106fc:	e668      	b.n	80103d0 <uxr_read_framed_msg+0x1c>
 80106fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	2303      	movs	r3, #3
 8010704:	e7c7      	b.n	8010696 <uxr_read_framed_msg+0x2e2>
 8010706:	2305      	movs	r3, #5
 8010708:	7023      	strb	r3, [r4, #0]
 801070a:	e664      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 801070c:	ee17 8a90 	vmov	r8, s15
 8010710:	f43f aef2 	beq.w	80104f8 <uxr_read_framed_msg+0x144>
 8010714:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010718:	d08e      	beq.n	8010638 <uxr_read_framed_msg+0x284>
 801071a:	ebae 0303 	sub.w	r3, lr, r3
 801071e:	3302      	adds	r3, #2
 8010720:	9301      	str	r3, [sp, #4]
 8010722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	e7b7      	b.n	8010698 <uxr_read_framed_msg+0x2e4>
 8010728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801072a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801072e:	7013      	strb	r3, [r2, #0]
 8010730:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8010732:	b003      	add	sp, #12
 8010734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010738:	f103 0c01 	add.w	ip, r3, #1
 801073c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010740:	fba5 0202 	umull	r0, r2, r5, r2
 8010744:	0892      	lsrs	r2, r2, #2
 8010746:	202a      	movs	r0, #42	@ 0x2a
 8010748:	fb00 c212 	mls	r2, r0, r2, ip
 801074c:	fa5f fc82 	uxtb.w	ip, r2
 8010750:	4561      	cmp	r1, ip
 8010752:	d09d      	beq.n	8010690 <uxr_read_framed_msg+0x2dc>
 8010754:	3302      	adds	r3, #2
 8010756:	4422      	add	r2, r4
 8010758:	0859      	lsrs	r1, r3, #1
 801075a:	7892      	ldrb	r2, [r2, #2]
 801075c:	fba5 c101 	umull	ip, r1, r5, r1
 8010760:	0889      	lsrs	r1, r1, #2
 8010762:	fb00 3311 	mls	r3, r0, r1, r3
 8010766:	2a7e      	cmp	r2, #126	@ 0x7e
 8010768:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801076c:	f000 80aa 	beq.w	80108c4 <uxr_read_framed_msg+0x510>
 8010770:	f082 0220 	eor.w	r2, r2, #32
 8010774:	e654      	b.n	8010420 <uxr_read_framed_msg+0x6c>
 8010776:	1c58      	adds	r0, r3, #1
 8010778:	0842      	lsrs	r2, r0, #1
 801077a:	fba5 c202 	umull	ip, r2, r5, r2
 801077e:	0892      	lsrs	r2, r2, #2
 8010780:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010784:	fb0c 0212 	mls	r2, ip, r2, r0
 8010788:	b2d0      	uxtb	r0, r2
 801078a:	4281      	cmp	r1, r0
 801078c:	d08f      	beq.n	80106ae <uxr_read_framed_msg+0x2fa>
 801078e:	4422      	add	r2, r4
 8010790:	3302      	adds	r3, #2
 8010792:	7890      	ldrb	r0, [r2, #2]
 8010794:	085a      	lsrs	r2, r3, #1
 8010796:	fba5 1202 	umull	r1, r2, r5, r2
 801079a:	0892      	lsrs	r2, r2, #2
 801079c:	fb0c 3312 	mls	r3, ip, r2, r3
 80107a0:	287e      	cmp	r0, #126	@ 0x7e
 80107a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80107a6:	d07d      	beq.n	80108a4 <uxr_read_framed_msg+0x4f0>
 80107a8:	f080 0020 	eor.w	r0, r0, #32
 80107ac:	e660      	b.n	8010470 <uxr_read_framed_msg+0xbc>
 80107ae:	1c59      	adds	r1, r3, #1
 80107b0:	084a      	lsrs	r2, r1, #1
 80107b2:	fba5 c202 	umull	ip, r2, r5, r2
 80107b6:	0892      	lsrs	r2, r2, #2
 80107b8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80107bc:	fb0c 1212 	mls	r2, ip, r2, r1
 80107c0:	b2d1      	uxtb	r1, r2
 80107c2:	4288      	cmp	r0, r1
 80107c4:	f43f af64 	beq.w	8010690 <uxr_read_framed_msg+0x2dc>
 80107c8:	4422      	add	r2, r4
 80107ca:	3302      	adds	r3, #2
 80107cc:	7891      	ldrb	r1, [r2, #2]
 80107ce:	085a      	lsrs	r2, r3, #1
 80107d0:	fba5 0202 	umull	r0, r2, r5, r2
 80107d4:	0892      	lsrs	r2, r2, #2
 80107d6:	fb0c 3312 	mls	r3, ip, r2, r3
 80107da:	297e      	cmp	r1, #126	@ 0x7e
 80107dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80107e0:	d070      	beq.n	80108c4 <uxr_read_framed_msg+0x510>
 80107e2:	f081 0120 	eor.w	r1, r1, #32
 80107e6:	e6a3      	b.n	8010530 <uxr_read_framed_msg+0x17c>
 80107e8:	f103 0c01 	add.w	ip, r3, #1
 80107ec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80107f0:	fba5 0202 	umull	r0, r2, r5, r2
 80107f4:	0892      	lsrs	r2, r2, #2
 80107f6:	202a      	movs	r0, #42	@ 0x2a
 80107f8:	fb00 c212 	mls	r2, r0, r2, ip
 80107fc:	fa5f fc82 	uxtb.w	ip, r2
 8010800:	4561      	cmp	r1, ip
 8010802:	f43f af58 	beq.w	80106b6 <uxr_read_framed_msg+0x302>
 8010806:	4422      	add	r2, r4
 8010808:	3302      	adds	r3, #2
 801080a:	7891      	ldrb	r1, [r2, #2]
 801080c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010810:	085a      	lsrs	r2, r3, #1
 8010812:	fba5 c202 	umull	ip, r2, r5, r2
 8010816:	0892      	lsrs	r2, r2, #2
 8010818:	fb00 3312 	mls	r3, r0, r2, r3
 801081c:	297e      	cmp	r1, #126	@ 0x7e
 801081e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010822:	f43f af48 	beq.w	80106b6 <uxr_read_framed_msg+0x302>
 8010826:	f081 0120 	eor.w	r1, r1, #32
 801082a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801082e:	e6e8      	b.n	8010602 <uxr_read_framed_msg+0x24e>
 8010830:	1c58      	adds	r0, r3, #1
 8010832:	0842      	lsrs	r2, r0, #1
 8010834:	fba5 c202 	umull	ip, r2, r5, r2
 8010838:	0892      	lsrs	r2, r2, #2
 801083a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801083e:	fb0c 0212 	mls	r2, ip, r2, r0
 8010842:	b2d0      	uxtb	r0, r2
 8010844:	4281      	cmp	r1, r0
 8010846:	f43f af32 	beq.w	80106ae <uxr_read_framed_msg+0x2fa>
 801084a:	4422      	add	r2, r4
 801084c:	3302      	adds	r3, #2
 801084e:	7890      	ldrb	r0, [r2, #2]
 8010850:	085a      	lsrs	r2, r3, #1
 8010852:	fba5 1202 	umull	r1, r2, r5, r2
 8010856:	0892      	lsrs	r2, r2, #2
 8010858:	fb0c 3312 	mls	r3, ip, r2, r3
 801085c:	287e      	cmp	r0, #126	@ 0x7e
 801085e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010862:	d01f      	beq.n	80108a4 <uxr_read_framed_msg+0x4f0>
 8010864:	f080 0020 	eor.w	r0, r0, #32
 8010868:	e68b      	b.n	8010582 <uxr_read_framed_msg+0x1ce>
 801086a:	1c51      	adds	r1, r2, #1
 801086c:	084b      	lsrs	r3, r1, #1
 801086e:	fba5 c303 	umull	ip, r3, r5, r3
 8010872:	089b      	lsrs	r3, r3, #2
 8010874:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010878:	fb0c 1313 	mls	r3, ip, r3, r1
 801087c:	b2d9      	uxtb	r1, r3
 801087e:	4288      	cmp	r0, r1
 8010880:	f43f af3d 	beq.w	80106fe <uxr_read_framed_msg+0x34a>
 8010884:	3202      	adds	r2, #2
 8010886:	4423      	add	r3, r4
 8010888:	0850      	lsrs	r0, r2, #1
 801088a:	789b      	ldrb	r3, [r3, #2]
 801088c:	fba5 1000 	umull	r1, r0, r5, r0
 8010890:	0880      	lsrs	r0, r0, #2
 8010892:	fb0c 2210 	mls	r2, ip, r0, r2
 8010896:	2b7e      	cmp	r3, #126	@ 0x7e
 8010898:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801089c:	d016      	beq.n	80108cc <uxr_read_framed_msg+0x518>
 801089e:	f083 0120 	eor.w	r1, r3, #32
 80108a2:	e68b      	b.n	80105bc <uxr_read_framed_msg+0x208>
 80108a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	2302      	movs	r3, #2
 80108aa:	9301      	str	r3, [sp, #4]
 80108ac:	464a      	mov	r2, r9
 80108ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108b0:	4641      	mov	r1, r8
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7ff fcfc 	bl	80102b0 <uxr_framing_read_transport>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	f47f aef6 	bne.w	80106aa <uxr_read_framed_msg+0x2f6>
 80108be:	2301      	movs	r3, #1
 80108c0:	7023      	strb	r3, [r4, #0]
 80108c2:	e588      	b.n	80103d6 <uxr_read_framed_msg+0x22>
 80108c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	2301      	movs	r3, #1
 80108ca:	e7ee      	b.n	80108aa <uxr_read_framed_msg+0x4f6>
 80108cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	2303      	movs	r3, #3
 80108d2:	e7ea      	b.n	80108aa <uxr_read_framed_msg+0x4f6>
 80108d4:	ee17 8a90 	vmov	r8, s15
 80108d8:	e6ae      	b.n	8010638 <uxr_read_framed_msg+0x284>
 80108da:	bf00      	nop

080108dc <uxr_stream_id>:
 80108dc:	2901      	cmp	r1, #1
 80108de:	b082      	sub	sp, #8
 80108e0:	d01d      	beq.n	801091e <uxr_stream_id+0x42>
 80108e2:	2902      	cmp	r1, #2
 80108e4:	f04f 0c00 	mov.w	ip, #0
 80108e8:	d01e      	beq.n	8010928 <uxr_stream_id+0x4c>
 80108ea:	2300      	movs	r3, #0
 80108ec:	f36c 0307 	bfi	r3, ip, #0, #8
 80108f0:	f360 230f 	bfi	r3, r0, #8, #8
 80108f4:	f361 4317 	bfi	r3, r1, #16, #8
 80108f8:	f362 631f 	bfi	r3, r2, #24, #8
 80108fc:	b2da      	uxtb	r2, r3
 80108fe:	2000      	movs	r0, #0
 8010900:	f362 0007 	bfi	r0, r2, #0, #8
 8010904:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010908:	f362 200f 	bfi	r0, r2, #8, #8
 801090c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010910:	f362 4017 	bfi	r0, r2, #16, #8
 8010914:	0e1b      	lsrs	r3, r3, #24
 8010916:	f363 601f 	bfi	r0, r3, #24, #8
 801091a:	b002      	add	sp, #8
 801091c:	4770      	bx	lr
 801091e:	f100 0c01 	add.w	ip, r0, #1
 8010922:	fa5f fc8c 	uxtb.w	ip, ip
 8010926:	e7e0      	b.n	80108ea <uxr_stream_id+0xe>
 8010928:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 801092c:	e7dd      	b.n	80108ea <uxr_stream_id+0xe>
 801092e:	bf00      	nop

08010930 <uxr_stream_id_from_raw>:
 8010930:	b082      	sub	sp, #8
 8010932:	b130      	cbz	r0, 8010942 <uxr_stream_id_from_raw+0x12>
 8010934:	0603      	lsls	r3, r0, #24
 8010936:	d420      	bmi.n	801097a <uxr_stream_id_from_raw+0x4a>
 8010938:	1e42      	subs	r2, r0, #1
 801093a:	b2d2      	uxtb	r2, r2
 801093c:	f04f 0c01 	mov.w	ip, #1
 8010940:	e001      	b.n	8010946 <uxr_stream_id_from_raw+0x16>
 8010942:	4684      	mov	ip, r0
 8010944:	4602      	mov	r2, r0
 8010946:	2300      	movs	r3, #0
 8010948:	f360 0307 	bfi	r3, r0, #0, #8
 801094c:	f362 230f 	bfi	r3, r2, #8, #8
 8010950:	f36c 4317 	bfi	r3, ip, #16, #8
 8010954:	f361 631f 	bfi	r3, r1, #24, #8
 8010958:	b2da      	uxtb	r2, r3
 801095a:	2000      	movs	r0, #0
 801095c:	f362 0007 	bfi	r0, r2, #0, #8
 8010960:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010964:	f362 200f 	bfi	r0, r2, #8, #8
 8010968:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801096c:	f362 4017 	bfi	r0, r2, #16, #8
 8010970:	0e1b      	lsrs	r3, r3, #24
 8010972:	f363 601f 	bfi	r0, r3, #24, #8
 8010976:	b002      	add	sp, #8
 8010978:	4770      	bx	lr
 801097a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801097e:	f04f 0c02 	mov.w	ip, #2
 8010982:	e7e0      	b.n	8010946 <uxr_stream_id_from_raw+0x16>

08010984 <uxr_init_stream_storage>:
 8010984:	2300      	movs	r3, #0
 8010986:	7403      	strb	r3, [r0, #16]
 8010988:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801098c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010990:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop

08010998 <uxr_reset_stream_storage>:
 8010998:	b570      	push	{r4, r5, r6, lr}
 801099a:	7c03      	ldrb	r3, [r0, #16]
 801099c:	4604      	mov	r4, r0
 801099e:	b153      	cbz	r3, 80109b6 <uxr_reset_stream_storage+0x1e>
 80109a0:	4606      	mov	r6, r0
 80109a2:	2500      	movs	r5, #0
 80109a4:	4630      	mov	r0, r6
 80109a6:	f005 fe07 	bl	80165b8 <uxr_reset_output_best_effort_stream>
 80109aa:	7c23      	ldrb	r3, [r4, #16]
 80109ac:	3501      	adds	r5, #1
 80109ae:	42ab      	cmp	r3, r5
 80109b0:	f106 0610 	add.w	r6, r6, #16
 80109b4:	d8f6      	bhi.n	80109a4 <uxr_reset_stream_storage+0xc>
 80109b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80109ba:	b163      	cbz	r3, 80109d6 <uxr_reset_stream_storage+0x3e>
 80109bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109c0:	2500      	movs	r5, #0
 80109c2:	4630      	mov	r0, r6
 80109c4:	f005 fbfa 	bl	80161bc <uxr_reset_input_best_effort_stream>
 80109c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80109cc:	3501      	adds	r5, #1
 80109ce:	42ab      	cmp	r3, r5
 80109d0:	f106 0602 	add.w	r6, r6, #2
 80109d4:	d8f5      	bhi.n	80109c2 <uxr_reset_stream_storage+0x2a>
 80109d6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80109da:	b163      	cbz	r3, 80109f6 <uxr_reset_stream_storage+0x5e>
 80109dc:	f104 0618 	add.w	r6, r4, #24
 80109e0:	2500      	movs	r5, #0
 80109e2:	4630      	mov	r0, r6
 80109e4:	f005 fe94 	bl	8016710 <uxr_reset_output_reliable_stream>
 80109e8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80109ec:	3501      	adds	r5, #1
 80109ee:	42ab      	cmp	r3, r5
 80109f0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80109f4:	d8f5      	bhi.n	80109e2 <uxr_reset_stream_storage+0x4a>
 80109f6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80109fa:	b163      	cbz	r3, 8010a16 <uxr_reset_stream_storage+0x7e>
 80109fc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010a00:	2500      	movs	r5, #0
 8010a02:	4630      	mov	r0, r6
 8010a04:	f005 fc4e 	bl	80162a4 <uxr_reset_input_reliable_stream>
 8010a08:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010a0c:	3501      	adds	r5, #1
 8010a0e:	42ab      	cmp	r3, r5
 8010a10:	f106 0618 	add.w	r6, r6, #24
 8010a14:	d8f5      	bhi.n	8010a02 <uxr_reset_stream_storage+0x6a>
 8010a16:	bd70      	pop	{r4, r5, r6, pc}

08010a18 <uxr_add_output_best_effort_buffer>:
 8010a18:	b510      	push	{r4, lr}
 8010a1a:	7c04      	ldrb	r4, [r0, #16]
 8010a1c:	f104 0c01 	add.w	ip, r4, #1
 8010a20:	b082      	sub	sp, #8
 8010a22:	f880 c010 	strb.w	ip, [r0, #16]
 8010a26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010a2a:	f005 fdbb 	bl	80165a4 <uxr_init_output_best_effort_stream>
 8010a2e:	2201      	movs	r2, #1
 8010a30:	4611      	mov	r1, r2
 8010a32:	4620      	mov	r0, r4
 8010a34:	b002      	add	sp, #8
 8010a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a3a:	f7ff bf4f 	b.w	80108dc <uxr_stream_id>
 8010a3e:	bf00      	nop

08010a40 <uxr_add_output_reliable_buffer>:
 8010a40:	b510      	push	{r4, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	4684      	mov	ip, r0
 8010a46:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010a4a:	9000      	str	r0, [sp, #0]
 8010a4c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010a50:	2028      	movs	r0, #40	@ 0x28
 8010a52:	fb00 c004 	mla	r0, r0, r4, ip
 8010a56:	f104 0e01 	add.w	lr, r4, #1
 8010a5a:	3018      	adds	r0, #24
 8010a5c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010a60:	f005 fe1e 	bl	80166a0 <uxr_init_output_reliable_stream>
 8010a64:	2201      	movs	r2, #1
 8010a66:	2102      	movs	r1, #2
 8010a68:	4620      	mov	r0, r4
 8010a6a:	b004      	add	sp, #16
 8010a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a70:	f7ff bf34 	b.w	80108dc <uxr_stream_id>

08010a74 <uxr_add_input_best_effort_buffer>:
 8010a74:	b510      	push	{r4, lr}
 8010a76:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	1c62      	adds	r2, r4, #1
 8010a7e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010a82:	b082      	sub	sp, #8
 8010a84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a8c:	f005 fb92 	bl	80161b4 <uxr_init_input_best_effort_stream>
 8010a90:	2200      	movs	r2, #0
 8010a92:	2101      	movs	r1, #1
 8010a94:	4620      	mov	r0, r4
 8010a96:	b002      	add	sp, #8
 8010a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a9c:	f7ff bf1e 	b.w	80108dc <uxr_stream_id>

08010aa0 <uxr_add_input_reliable_buffer>:
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	4684      	mov	ip, r0
 8010aa6:	9806      	ldr	r0, [sp, #24]
 8010aa8:	9000      	str	r0, [sp, #0]
 8010aaa:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010aae:	2018      	movs	r0, #24
 8010ab0:	fb00 c004 	mla	r0, r0, r4, ip
 8010ab4:	f104 0e01 	add.w	lr, r4, #1
 8010ab8:	3048      	adds	r0, #72	@ 0x48
 8010aba:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010abe:	f005 fbc5 	bl	801624c <uxr_init_input_reliable_stream>
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	2102      	movs	r1, #2
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	b004      	add	sp, #16
 8010aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ace:	f7ff bf05 	b.w	80108dc <uxr_stream_id>
 8010ad2:	bf00      	nop

08010ad4 <uxr_get_output_best_effort_stream>:
 8010ad4:	7c03      	ldrb	r3, [r0, #16]
 8010ad6:	428b      	cmp	r3, r1
 8010ad8:	bf8c      	ite	hi
 8010ada:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010ade:	2000      	movls	r0, #0
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop

08010ae4 <uxr_get_output_reliable_stream>:
 8010ae4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010ae8:	428b      	cmp	r3, r1
 8010aea:	bf83      	ittte	hi
 8010aec:	2328      	movhi	r3, #40	@ 0x28
 8010aee:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010af2:	3018      	addhi	r0, #24
 8010af4:	2000      	movls	r0, #0
 8010af6:	4770      	bx	lr

08010af8 <uxr_get_input_best_effort_stream>:
 8010af8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010afc:	428b      	cmp	r3, r1
 8010afe:	bf86      	itte	hi
 8010b00:	3121      	addhi	r1, #33	@ 0x21
 8010b02:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010b06:	2000      	movls	r0, #0
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop

08010b0c <uxr_get_input_reliable_stream>:
 8010b0c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010b10:	428b      	cmp	r3, r1
 8010b12:	bf83      	ittte	hi
 8010b14:	2318      	movhi	r3, #24
 8010b16:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010b1a:	3048      	addhi	r0, #72	@ 0x48
 8010b1c:	2000      	movls	r0, #0
 8010b1e:	4770      	bx	lr

08010b20 <uxr_output_streams_confirmed>:
 8010b20:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010b24:	b183      	cbz	r3, 8010b48 <uxr_output_streams_confirmed+0x28>
 8010b26:	b570      	push	{r4, r5, r6, lr}
 8010b28:	4606      	mov	r6, r0
 8010b2a:	f100 0518 	add.w	r5, r0, #24
 8010b2e:	2400      	movs	r4, #0
 8010b30:	e001      	b.n	8010b36 <uxr_output_streams_confirmed+0x16>
 8010b32:	3528      	adds	r5, #40	@ 0x28
 8010b34:	b138      	cbz	r0, 8010b46 <uxr_output_streams_confirmed+0x26>
 8010b36:	4628      	mov	r0, r5
 8010b38:	f006 f85a 	bl	8016bf0 <uxr_is_output_up_to_date>
 8010b3c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010b40:	3401      	adds	r4, #1
 8010b42:	42a3      	cmp	r3, r4
 8010b44:	d8f5      	bhi.n	8010b32 <uxr_output_streams_confirmed+0x12>
 8010b46:	bd70      	pop	{r4, r5, r6, pc}
 8010b48:	2001      	movs	r0, #1
 8010b4a:	4770      	bx	lr

08010b4c <uxr_buffer_submessage_header>:
 8010b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4e:	4604      	mov	r4, r0
 8010b50:	460e      	mov	r6, r1
 8010b52:	2104      	movs	r1, #4
 8010b54:	4615      	mov	r5, r2
 8010b56:	461f      	mov	r7, r3
 8010b58:	f7fb fa54 	bl	800c004 <ucdr_align_to>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	ea47 0203 	orr.w	r2, r7, r3
 8010b62:	4631      	mov	r1, r6
 8010b64:	7523      	strb	r3, [r4, #20]
 8010b66:	4620      	mov	r0, r4
 8010b68:	462b      	mov	r3, r5
 8010b6a:	f000 fa27 	bl	8010fbc <uxr_serialize_submessage_header>
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7fb fa5e 	bl	800c030 <ucdr_buffer_remaining>
 8010b74:	42a8      	cmp	r0, r5
 8010b76:	bf34      	ite	cc
 8010b78:	2000      	movcc	r0, #0
 8010b7a:	2001      	movcs	r0, #1
 8010b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b7e:	bf00      	nop

08010b80 <uxr_read_submessage_header>:
 8010b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b84:	4604      	mov	r4, r0
 8010b86:	460d      	mov	r5, r1
 8010b88:	2104      	movs	r1, #4
 8010b8a:	4616      	mov	r6, r2
 8010b8c:	4698      	mov	r8, r3
 8010b8e:	f7fb fa39 	bl	800c004 <ucdr_align_to>
 8010b92:	4620      	mov	r0, r4
 8010b94:	f7fb fa4c 	bl	800c030 <ucdr_buffer_remaining>
 8010b98:	2803      	cmp	r0, #3
 8010b9a:	bf8c      	ite	hi
 8010b9c:	2701      	movhi	r7, #1
 8010b9e:	2700      	movls	r7, #0
 8010ba0:	d802      	bhi.n	8010ba8 <uxr_read_submessage_header+0x28>
 8010ba2:	4638      	mov	r0, r7
 8010ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ba8:	4633      	mov	r3, r6
 8010baa:	4642      	mov	r2, r8
 8010bac:	4620      	mov	r0, r4
 8010bae:	4629      	mov	r1, r5
 8010bb0:	f000 fa18 	bl	8010fe4 <uxr_deserialize_submessage_header>
 8010bb4:	f898 3000 	ldrb.w	r3, [r8]
 8010bb8:	f003 0201 	and.w	r2, r3, #1
 8010bbc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010bc0:	f888 3000 	strb.w	r3, [r8]
 8010bc4:	7522      	strb	r2, [r4, #20]
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010bcc <uxr_submessage_padding>:
 8010bcc:	f010 0003 	ands.w	r0, r0, #3
 8010bd0:	bf18      	it	ne
 8010bd2:	f1c0 0004 	rsbne	r0, r0, #4
 8010bd6:	4770      	bx	lr

08010bd8 <uxr_millis>:
 8010bd8:	b510      	push	{r4, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	4669      	mov	r1, sp
 8010bde:	2001      	movs	r0, #1
 8010be0:	f7f0 ff0e 	bl	8001a00 <clock_gettime>
 8010be4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010be8:	4906      	ldr	r1, [pc, #24]	@ (8010c04 <uxr_millis+0x2c>)
 8010bea:	fba0 0301 	umull	r0, r3, r0, r1
 8010bee:	1900      	adds	r0, r0, r4
 8010bf0:	fb01 3102 	mla	r1, r1, r2, r3
 8010bf4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010bf8:	4a03      	ldr	r2, [pc, #12]	@ (8010c08 <uxr_millis+0x30>)
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	f7ef fd34 	bl	8000668 <__aeabi_ldivmod>
 8010c00:	b004      	add	sp, #16
 8010c02:	bd10      	pop	{r4, pc}
 8010c04:	3b9aca00 	.word	0x3b9aca00
 8010c08:	000f4240 	.word	0x000f4240

08010c0c <uxr_nanos>:
 8010c0c:	b510      	push	{r4, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	4669      	mov	r1, sp
 8010c12:	2001      	movs	r0, #1
 8010c14:	f7f0 fef4 	bl	8001a00 <clock_gettime>
 8010c18:	4a06      	ldr	r2, [pc, #24]	@ (8010c34 <uxr_nanos+0x28>)
 8010c1a:	9800      	ldr	r0, [sp, #0]
 8010c1c:	9902      	ldr	r1, [sp, #8]
 8010c1e:	9c01      	ldr	r4, [sp, #4]
 8010c20:	fba0 0302 	umull	r0, r3, r0, r2
 8010c24:	1840      	adds	r0, r0, r1
 8010c26:	fb02 3304 	mla	r3, r2, r4, r3
 8010c2a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010c2e:	b004      	add	sp, #16
 8010c30:	bd10      	pop	{r4, pc}
 8010c32:	bf00      	nop
 8010c34:	3b9aca00 	.word	0x3b9aca00

08010c38 <on_full_output_buffer_fragmented>:
 8010c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c3c:	460c      	mov	r4, r1
 8010c3e:	b08a      	sub	sp, #40	@ 0x28
 8010c40:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010c44:	4606      	mov	r6, r0
 8010c46:	f104 0008 	add.w	r0, r4, #8
 8010c4a:	f7ff ff4b 	bl	8010ae4 <uxr_get_output_reliable_stream>
 8010c4e:	4605      	mov	r5, r0
 8010c50:	f005 ffd8 	bl	8016c04 <get_available_free_slots>
 8010c54:	b968      	cbnz	r0, 8010c72 <on_full_output_buffer_fragmented+0x3a>
 8010c56:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	4798      	blx	r3
 8010c5e:	b918      	cbnz	r0, 8010c68 <on_full_output_buffer_fragmented+0x30>
 8010c60:	2001      	movs	r0, #1
 8010c62:	b00a      	add	sp, #40	@ 0x28
 8010c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c68:	4628      	mov	r0, r5
 8010c6a:	f005 ffcb 	bl	8016c04 <get_available_free_slots>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d0f6      	beq.n	8010c60 <on_full_output_buffer_fragmented+0x28>
 8010c72:	8929      	ldrh	r1, [r5, #8]
 8010c74:	89eb      	ldrh	r3, [r5, #14]
 8010c76:	7b28      	ldrb	r0, [r5, #12]
 8010c78:	686a      	ldr	r2, [r5, #4]
 8010c7a:	fbb2 f8f1 	udiv	r8, r2, r1
 8010c7e:	fbb3 f2f1 	udiv	r2, r3, r1
 8010c82:	fb01 3112 	mls	r1, r1, r2, r3
 8010c86:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010c8a:	b289      	uxth	r1, r1
 8010c8c:	fb08 f101 	mul.w	r1, r8, r1
 8010c90:	30fc      	adds	r0, #252	@ 0xfc
 8010c92:	f1a8 0804 	sub.w	r8, r8, #4
 8010c96:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010c9a:	4440      	add	r0, r8
 8010c9c:	b287      	uxth	r7, r0
 8010c9e:	1bdb      	subs	r3, r3, r7
 8010ca0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010ca4:	682b      	ldr	r3, [r5, #0]
 8010ca6:	3104      	adds	r1, #4
 8010ca8:	4419      	add	r1, r3
 8010caa:	4642      	mov	r2, r8
 8010cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cb0:	9300      	str	r3, [sp, #0]
 8010cb2:	a802      	add	r0, sp, #8
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	f7fb f979 	bl	800bfac <ucdr_init_buffer_origin_offset>
 8010cba:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010cbe:	f102 0308 	add.w	r3, r2, #8
 8010cc2:	4543      	cmp	r3, r8
 8010cc4:	d928      	bls.n	8010d18 <on_full_output_buffer_fragmented+0xe0>
 8010cc6:	463a      	mov	r2, r7
 8010cc8:	2300      	movs	r3, #0
 8010cca:	210d      	movs	r1, #13
 8010ccc:	a802      	add	r0, sp, #8
 8010cce:	f7ff ff3d 	bl	8010b4c <uxr_buffer_submessage_header>
 8010cd2:	8929      	ldrh	r1, [r5, #8]
 8010cd4:	89eb      	ldrh	r3, [r5, #14]
 8010cd6:	fbb3 f2f1 	udiv	r2, r3, r1
 8010cda:	fb01 3312 	mls	r3, r1, r2, r3
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	686a      	ldr	r2, [r5, #4]
 8010ce2:	fbb2 f2f1 	udiv	r2, r2, r1
 8010ce6:	fb02 f303 	mul.w	r3, r2, r3
 8010cea:	682a      	ldr	r2, [r5, #0]
 8010cec:	f842 8003 	str.w	r8, [r2, r3]
 8010cf0:	89e8      	ldrh	r0, [r5, #14]
 8010cf2:	2101      	movs	r1, #1
 8010cf4:	f005 ffa6 	bl	8016c44 <uxr_seq_num_add>
 8010cf8:	9904      	ldr	r1, [sp, #16]
 8010cfa:	9a03      	ldr	r2, [sp, #12]
 8010cfc:	81e8      	strh	r0, [r5, #14]
 8010cfe:	1a52      	subs	r2, r2, r1
 8010d00:	4630      	mov	r0, r6
 8010d02:	f7fb f965 	bl	800bfd0 <ucdr_init_buffer>
 8010d06:	4630      	mov	r0, r6
 8010d08:	490f      	ldr	r1, [pc, #60]	@ (8010d48 <on_full_output_buffer_fragmented+0x110>)
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	f7fb f934 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 8010d10:	2000      	movs	r0, #0
 8010d12:	b00a      	add	sp, #40	@ 0x28
 8010d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d18:	b292      	uxth	r2, r2
 8010d1a:	2302      	movs	r3, #2
 8010d1c:	210d      	movs	r1, #13
 8010d1e:	a802      	add	r0, sp, #8
 8010d20:	f7ff ff14 	bl	8010b4c <uxr_buffer_submessage_header>
 8010d24:	8928      	ldrh	r0, [r5, #8]
 8010d26:	89eb      	ldrh	r3, [r5, #14]
 8010d28:	fbb3 f1f0 	udiv	r1, r3, r0
 8010d2c:	fb00 3311 	mls	r3, r0, r1, r3
 8010d30:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010d34:	6869      	ldr	r1, [r5, #4]
 8010d36:	fbb1 f1f0 	udiv	r1, r1, r0
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	fb01 f303 	mul.w	r3, r1, r3
 8010d40:	6829      	ldr	r1, [r5, #0]
 8010d42:	3208      	adds	r2, #8
 8010d44:	50ca      	str	r2, [r1, r3]
 8010d46:	e7d3      	b.n	8010cf0 <on_full_output_buffer_fragmented+0xb8>
 8010d48:	08010c39 	.word	0x08010c39

08010d4c <uxr_prepare_output_stream>:
 8010d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d4e:	b087      	sub	sp, #28
 8010d50:	2707      	movs	r7, #7
 8010d52:	9202      	str	r2, [sp, #8]
 8010d54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d56:	9103      	str	r1, [sp, #12]
 8010d58:	2500      	movs	r5, #0
 8010d5a:	3204      	adds	r2, #4
 8010d5c:	e9cd 7500 	strd	r7, r5, [sp]
 8010d60:	461c      	mov	r4, r3
 8010d62:	4606      	mov	r6, r0
 8010d64:	f7fe ffc2 	bl	800fcec <uxr_prepare_stream_to_write_submessage>
 8010d68:	f080 0201 	eor.w	r2, r0, #1
 8010d6c:	b2d2      	uxtb	r2, r2
 8010d6e:	75a2      	strb	r2, [r4, #22]
 8010d70:	b112      	cbz	r2, 8010d78 <uxr_prepare_output_stream+0x2c>
 8010d72:	4628      	mov	r0, r5
 8010d74:	b007      	add	sp, #28
 8010d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d78:	aa05      	add	r2, sp, #20
 8010d7a:	9902      	ldr	r1, [sp, #8]
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	f7ff f8eb 	bl	800ff58 <uxr_init_base_object_request>
 8010d82:	a905      	add	r1, sp, #20
 8010d84:	4605      	mov	r5, r0
 8010d86:	4620      	mov	r0, r4
 8010d88:	f000 ffa0 	bl	8011ccc <uxr_serialize_WRITE_DATA_Payload_Data>
 8010d8c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010d90:	69a6      	ldr	r6, [r4, #24]
 8010d92:	69e7      	ldr	r7, [r4, #28]
 8010d94:	1a52      	subs	r2, r2, r1
 8010d96:	4620      	mov	r0, r4
 8010d98:	f7fb f91a 	bl	800bfd0 <ucdr_init_buffer>
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	463a      	mov	r2, r7
 8010da0:	4631      	mov	r1, r6
 8010da2:	f7fb f8e9 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 8010da6:	4628      	mov	r0, r5
 8010da8:	b007      	add	sp, #28
 8010daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010dac <uxr_prepare_output_stream_fragmented>:
 8010dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db0:	b091      	sub	sp, #68	@ 0x44
 8010db2:	4605      	mov	r5, r0
 8010db4:	9105      	str	r1, [sp, #20]
 8010db6:	3008      	adds	r0, #8
 8010db8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010dbc:	461e      	mov	r6, r3
 8010dbe:	9204      	str	r2, [sp, #16]
 8010dc0:	f7ff fe90 	bl	8010ae4 <uxr_get_output_reliable_stream>
 8010dc4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	f000 8091 	beq.w	8010ef0 <uxr_prepare_output_stream_fragmented+0x144>
 8010dce:	4604      	mov	r4, r0
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	f000 808d 	beq.w	8010ef0 <uxr_prepare_output_stream_fragmented+0x144>
 8010dd6:	f005 ff15 	bl	8016c04 <get_available_free_slots>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	f000 8083 	beq.w	8010ee6 <uxr_prepare_output_stream_fragmented+0x13a>
 8010de0:	8922      	ldrh	r2, [r4, #8]
 8010de2:	89e7      	ldrh	r7, [r4, #14]
 8010de4:	fbb7 f9f2 	udiv	r9, r7, r2
 8010de8:	fb02 7919 	mls	r9, r2, r9, r7
 8010dec:	fa1f f989 	uxth.w	r9, r9
 8010df0:	6863      	ldr	r3, [r4, #4]
 8010df2:	fbb3 f2f2 	udiv	r2, r3, r2
 8010df6:	6823      	ldr	r3, [r4, #0]
 8010df8:	9203      	str	r2, [sp, #12]
 8010dfa:	fb02 f909 	mul.w	r9, r2, r9
 8010dfe:	f109 0904 	add.w	r9, r9, #4
 8010e02:	4499      	add	r9, r3
 8010e04:	7b23      	ldrb	r3, [r4, #12]
 8010e06:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010e0a:	4543      	cmp	r3, r8
 8010e0c:	f1a2 0b04 	sub.w	fp, r2, #4
 8010e10:	d37a      	bcc.n	8010f08 <uxr_prepare_output_stream_fragmented+0x15c>
 8010e12:	f1ab 0a04 	sub.w	sl, fp, #4
 8010e16:	ebaa 0a03 	sub.w	sl, sl, r3
 8010e1a:	465a      	mov	r2, fp
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	4649      	mov	r1, r9
 8010e20:	a808      	add	r0, sp, #32
 8010e22:	f8cd 8000 	str.w	r8, [sp]
 8010e26:	f7fb f8c1 	bl	800bfac <ucdr_init_buffer_origin_offset>
 8010e2a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010e2c:	fa1f fa8a 	uxth.w	sl, sl
 8010e30:	4652      	mov	r2, sl
 8010e32:	f103 0a08 	add.w	sl, r3, #8
 8010e36:	45da      	cmp	sl, fp
 8010e38:	bf34      	ite	cc
 8010e3a:	2302      	movcc	r3, #2
 8010e3c:	2300      	movcs	r3, #0
 8010e3e:	210d      	movs	r1, #13
 8010e40:	a808      	add	r0, sp, #32
 8010e42:	f7ff fe83 	bl	8010b4c <uxr_buffer_submessage_header>
 8010e46:	8921      	ldrh	r1, [r4, #8]
 8010e48:	fbb7 f2f1 	udiv	r2, r7, r1
 8010e4c:	fb01 7212 	mls	r2, r1, r2, r7
 8010e50:	b292      	uxth	r2, r2
 8010e52:	6863      	ldr	r3, [r4, #4]
 8010e54:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e58:	fb02 f303 	mul.w	r3, r2, r3
 8010e5c:	6822      	ldr	r2, [r4, #0]
 8010e5e:	4638      	mov	r0, r7
 8010e60:	f842 b003 	str.w	fp, [r2, r3]
 8010e64:	2101      	movs	r1, #1
 8010e66:	f005 feed 	bl	8016c44 <uxr_seq_num_add>
 8010e6a:	9b03      	ldr	r3, [sp, #12]
 8010e6c:	f108 0104 	add.w	r1, r8, #4
 8010e70:	f1a3 0208 	sub.w	r2, r3, #8
 8010e74:	eba2 0208 	sub.w	r2, r2, r8
 8010e78:	4449      	add	r1, r9
 8010e7a:	4607      	mov	r7, r0
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	f7fb f8a7 	bl	800bfd0 <ucdr_init_buffer>
 8010e82:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010e84:	81e7      	strh	r7, [r4, #14]
 8010e86:	1d1a      	adds	r2, r3, #4
 8010e88:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010e8c:	bf28      	it	cs
 8010e8e:	2200      	movcs	r2, #0
 8010e90:	2300      	movs	r3, #0
 8010e92:	b292      	uxth	r2, r2
 8010e94:	2107      	movs	r1, #7
 8010e96:	4630      	mov	r0, r6
 8010e98:	f7ff fe58 	bl	8010b4c <uxr_buffer_submessage_header>
 8010e9c:	9904      	ldr	r1, [sp, #16]
 8010e9e:	aa07      	add	r2, sp, #28
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	f7ff f859 	bl	800ff58 <uxr_init_base_object_request>
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	b318      	cbz	r0, 8010ef2 <uxr_prepare_output_stream_fragmented+0x146>
 8010eaa:	a907      	add	r1, sp, #28
 8010eac:	4630      	mov	r0, r6
 8010eae:	f000 ff0d 	bl	8011ccc <uxr_serialize_WRITE_DATA_Payload_Data>
 8010eb2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	1a52      	subs	r2, r2, r1
 8010eba:	f7fb f889 	bl	800bfd0 <ucdr_init_buffer>
 8010ebe:	9b05      	ldr	r3, [sp, #20]
 8010ec0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010ec4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010ec6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010eca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010ecc:	491b      	ldr	r1, [pc, #108]	@ (8010f3c <uxr_prepare_output_stream_fragmented+0x190>)
 8010ece:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010ed8:	462a      	mov	r2, r5
 8010eda:	f7fb f84d 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 8010ede:	4620      	mov	r0, r4
 8010ee0:	b011      	add	sp, #68	@ 0x44
 8010ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010ee8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010eea:	4628      	mov	r0, r5
 8010eec:	4798      	blx	r3
 8010eee:	b920      	cbnz	r0, 8010efa <uxr_prepare_output_stream_fragmented+0x14e>
 8010ef0:	2400      	movs	r4, #0
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	b011      	add	sp, #68	@ 0x44
 8010ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efa:	4620      	mov	r0, r4
 8010efc:	f005 fe82 	bl	8016c04 <get_available_free_slots>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	f47f af6d 	bne.w	8010de0 <uxr_prepare_output_stream_fragmented+0x34>
 8010f06:	e7f3      	b.n	8010ef0 <uxr_prepare_output_stream_fragmented+0x144>
 8010f08:	4638      	mov	r0, r7
 8010f0a:	2101      	movs	r1, #1
 8010f0c:	f005 fe9a 	bl	8016c44 <uxr_seq_num_add>
 8010f10:	8921      	ldrh	r1, [r4, #8]
 8010f12:	fbb0 f2f1 	udiv	r2, r0, r1
 8010f16:	fb01 0912 	mls	r9, r1, r2, r0
 8010f1a:	fa1f f289 	uxth.w	r2, r9
 8010f1e:	6863      	ldr	r3, [r4, #4]
 8010f20:	fbb3 f9f1 	udiv	r9, r3, r1
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	fb02 f909 	mul.w	r9, r2, r9
 8010f2a:	f109 0904 	add.w	r9, r9, #4
 8010f2e:	4499      	add	r9, r3
 8010f30:	4607      	mov	r7, r0
 8010f32:	7b23      	ldrb	r3, [r4, #12]
 8010f34:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010f38:	e76b      	b.n	8010e12 <uxr_prepare_output_stream_fragmented+0x66>
 8010f3a:	bf00      	nop
 8010f3c:	08010c39 	.word	0x08010c39

08010f40 <uxr_serialize_message_header>:
 8010f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f42:	b083      	sub	sp, #12
 8010f44:	4616      	mov	r6, r2
 8010f46:	4604      	mov	r4, r0
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	460d      	mov	r5, r1
 8010f4c:	9f08      	ldr	r7, [sp, #32]
 8010f4e:	f7f9 fefd 	bl	800ad4c <ucdr_serialize_uint8_t>
 8010f52:	4631      	mov	r1, r6
 8010f54:	4620      	mov	r0, r4
 8010f56:	f7f9 fef9 	bl	800ad4c <ucdr_serialize_uint8_t>
 8010f5a:	9a01      	ldr	r2, [sp, #4]
 8010f5c:	2101      	movs	r1, #1
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7f9 ffa0 	bl	800aea4 <ucdr_serialize_endian_uint16_t>
 8010f64:	062b      	lsls	r3, r5, #24
 8010f66:	d501      	bpl.n	8010f6c <uxr_serialize_message_header+0x2c>
 8010f68:	b003      	add	sp, #12
 8010f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f6c:	2204      	movs	r2, #4
 8010f6e:	4639      	mov	r1, r7
 8010f70:	4620      	mov	r0, r4
 8010f72:	b003      	add	sp, #12
 8010f74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f78:	f004 bfe4 	b.w	8015f44 <ucdr_serialize_array_uint8_t>

08010f7c <uxr_deserialize_message_header>:
 8010f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	4616      	mov	r6, r2
 8010f82:	4604      	mov	r4, r0
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	460d      	mov	r5, r1
 8010f88:	9f08      	ldr	r7, [sp, #32]
 8010f8a:	f7f9 fef5 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8010f8e:	4631      	mov	r1, r6
 8010f90:	4620      	mov	r0, r4
 8010f92:	f7f9 fef1 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8010f96:	9a01      	ldr	r2, [sp, #4]
 8010f98:	2101      	movs	r1, #1
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7fa f876 	bl	800b08c <ucdr_deserialize_endian_uint16_t>
 8010fa0:	f995 3000 	ldrsb.w	r3, [r5]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	da01      	bge.n	8010fac <uxr_deserialize_message_header+0x30>
 8010fa8:	b003      	add	sp, #12
 8010faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fac:	2204      	movs	r2, #4
 8010fae:	4639      	mov	r1, r7
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	b003      	add	sp, #12
 8010fb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fb8:	f005 b828 	b.w	801600c <ucdr_deserialize_array_uint8_t>

08010fbc <uxr_serialize_submessage_header>:
 8010fbc:	b530      	push	{r4, r5, lr}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	4615      	mov	r5, r2
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	9301      	str	r3, [sp, #4]
 8010fc6:	f7f9 fec1 	bl	800ad4c <ucdr_serialize_uint8_t>
 8010fca:	4629      	mov	r1, r5
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f7f9 febd 	bl	800ad4c <ucdr_serialize_uint8_t>
 8010fd2:	9a01      	ldr	r2, [sp, #4]
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	b003      	add	sp, #12
 8010fda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fde:	f7f9 bf61 	b.w	800aea4 <ucdr_serialize_endian_uint16_t>
 8010fe2:	bf00      	nop

08010fe4 <uxr_deserialize_submessage_header>:
 8010fe4:	b530      	push	{r4, r5, lr}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	4615      	mov	r5, r2
 8010fea:	4604      	mov	r4, r0
 8010fec:	9301      	str	r3, [sp, #4]
 8010fee:	f7f9 fec3 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8010ff2:	4629      	mov	r1, r5
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	f7f9 febf 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8010ffa:	9a01      	ldr	r2, [sp, #4]
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	4620      	mov	r0, r4
 8011000:	b003      	add	sp, #12
 8011002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011006:	f7fa b841 	b.w	800b08c <ucdr_deserialize_endian_uint16_t>
 801100a:	bf00      	nop

0801100c <uxr_serialize_CLIENT_Representation>:
 801100c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011010:	2204      	movs	r2, #4
 8011012:	460e      	mov	r6, r1
 8011014:	4605      	mov	r5, r0
 8011016:	f004 ff95 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 801101a:	2202      	movs	r2, #2
 801101c:	4607      	mov	r7, r0
 801101e:	1d31      	adds	r1, r6, #4
 8011020:	4628      	mov	r0, r5
 8011022:	f004 ff8f 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011026:	4038      	ands	r0, r7
 8011028:	2202      	movs	r2, #2
 801102a:	1db1      	adds	r1, r6, #6
 801102c:	b2c7      	uxtb	r7, r0
 801102e:	4628      	mov	r0, r5
 8011030:	f004 ff88 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011034:	2204      	movs	r2, #4
 8011036:	4007      	ands	r7, r0
 8011038:	f106 0108 	add.w	r1, r6, #8
 801103c:	4628      	mov	r0, r5
 801103e:	f004 ff81 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011042:	7b31      	ldrb	r1, [r6, #12]
 8011044:	4007      	ands	r7, r0
 8011046:	4628      	mov	r0, r5
 8011048:	f7f9 fe80 	bl	800ad4c <ucdr_serialize_uint8_t>
 801104c:	7b71      	ldrb	r1, [r6, #13]
 801104e:	4007      	ands	r7, r0
 8011050:	4628      	mov	r0, r5
 8011052:	f7f9 fe4d 	bl	800acf0 <ucdr_serialize_bool>
 8011056:	7b73      	ldrb	r3, [r6, #13]
 8011058:	ea07 0800 	and.w	r8, r7, r0
 801105c:	b93b      	cbnz	r3, 801106e <uxr_serialize_CLIENT_Representation+0x62>
 801105e:	8bb1      	ldrh	r1, [r6, #28]
 8011060:	4628      	mov	r0, r5
 8011062:	f7f9 fe9f 	bl	800ada4 <ucdr_serialize_uint16_t>
 8011066:	ea08 0000 	and.w	r0, r8, r0
 801106a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801106e:	6931      	ldr	r1, [r6, #16]
 8011070:	4628      	mov	r0, r5
 8011072:	f7fa f881 	bl	800b178 <ucdr_serialize_uint32_t>
 8011076:	6933      	ldr	r3, [r6, #16]
 8011078:	b1e3      	cbz	r3, 80110b4 <uxr_serialize_CLIENT_Representation+0xa8>
 801107a:	b1c0      	cbz	r0, 80110ae <uxr_serialize_CLIENT_Representation+0xa2>
 801107c:	4637      	mov	r7, r6
 801107e:	f04f 0900 	mov.w	r9, #0
 8011082:	e001      	b.n	8011088 <uxr_serialize_CLIENT_Representation+0x7c>
 8011084:	3708      	adds	r7, #8
 8011086:	b194      	cbz	r4, 80110ae <uxr_serialize_CLIENT_Representation+0xa2>
 8011088:	6979      	ldr	r1, [r7, #20]
 801108a:	4628      	mov	r0, r5
 801108c:	f005 f87a 	bl	8016184 <ucdr_serialize_string>
 8011090:	69b9      	ldr	r1, [r7, #24]
 8011092:	4604      	mov	r4, r0
 8011094:	4628      	mov	r0, r5
 8011096:	f005 f875 	bl	8016184 <ucdr_serialize_string>
 801109a:	6933      	ldr	r3, [r6, #16]
 801109c:	f109 0901 	add.w	r9, r9, #1
 80110a0:	4004      	ands	r4, r0
 80110a2:	4599      	cmp	r9, r3
 80110a4:	b2e4      	uxtb	r4, r4
 80110a6:	d3ed      	bcc.n	8011084 <uxr_serialize_CLIENT_Representation+0x78>
 80110a8:	ea08 0804 	and.w	r8, r8, r4
 80110ac:	e7d7      	b.n	801105e <uxr_serialize_CLIENT_Representation+0x52>
 80110ae:	f04f 0800 	mov.w	r8, #0
 80110b2:	e7d4      	b.n	801105e <uxr_serialize_CLIENT_Representation+0x52>
 80110b4:	ea08 0800 	and.w	r8, r8, r0
 80110b8:	e7d1      	b.n	801105e <uxr_serialize_CLIENT_Representation+0x52>
 80110ba:	bf00      	nop

080110bc <uxr_deserialize_CLIENT_Representation>:
 80110bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c0:	2204      	movs	r2, #4
 80110c2:	460c      	mov	r4, r1
 80110c4:	4605      	mov	r5, r0
 80110c6:	f004 ffa1 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80110ca:	2202      	movs	r2, #2
 80110cc:	4607      	mov	r7, r0
 80110ce:	1d21      	adds	r1, r4, #4
 80110d0:	4628      	mov	r0, r5
 80110d2:	f004 ff9b 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80110d6:	4038      	ands	r0, r7
 80110d8:	2202      	movs	r2, #2
 80110da:	1da1      	adds	r1, r4, #6
 80110dc:	b2c6      	uxtb	r6, r0
 80110de:	4628      	mov	r0, r5
 80110e0:	f004 ff94 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80110e4:	2204      	movs	r2, #4
 80110e6:	4006      	ands	r6, r0
 80110e8:	f104 0108 	add.w	r1, r4, #8
 80110ec:	4628      	mov	r0, r5
 80110ee:	f004 ff8d 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80110f2:	f104 010c 	add.w	r1, r4, #12
 80110f6:	4006      	ands	r6, r0
 80110f8:	4628      	mov	r0, r5
 80110fa:	f7f9 fe3d 	bl	800ad78 <ucdr_deserialize_uint8_t>
 80110fe:	f104 010d 	add.w	r1, r4, #13
 8011102:	ea06 0700 	and.w	r7, r6, r0
 8011106:	4628      	mov	r0, r5
 8011108:	f7f9 fe08 	bl	800ad1c <ucdr_deserialize_bool>
 801110c:	7b63      	ldrb	r3, [r4, #13]
 801110e:	4007      	ands	r7, r0
 8011110:	b93b      	cbnz	r3, 8011122 <uxr_deserialize_CLIENT_Representation+0x66>
 8011112:	f104 011c 	add.w	r1, r4, #28
 8011116:	4628      	mov	r0, r5
 8011118:	f7f9 ff44 	bl	800afa4 <ucdr_deserialize_uint16_t>
 801111c:	4038      	ands	r0, r7
 801111e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011122:	f104 0110 	add.w	r1, r4, #16
 8011126:	4628      	mov	r0, r5
 8011128:	f7fa f956 	bl	800b3d8 <ucdr_deserialize_uint32_t>
 801112c:	6923      	ldr	r3, [r4, #16]
 801112e:	2b01      	cmp	r3, #1
 8011130:	d903      	bls.n	801113a <uxr_deserialize_CLIENT_Representation+0x7e>
 8011132:	2301      	movs	r3, #1
 8011134:	75ab      	strb	r3, [r5, #22]
 8011136:	2700      	movs	r7, #0
 8011138:	e7eb      	b.n	8011112 <uxr_deserialize_CLIENT_Representation+0x56>
 801113a:	b30b      	cbz	r3, 8011180 <uxr_deserialize_CLIENT_Representation+0xc4>
 801113c:	2800      	cmp	r0, #0
 801113e:	d0fa      	beq.n	8011136 <uxr_deserialize_CLIENT_Representation+0x7a>
 8011140:	46a0      	mov	r8, r4
 8011142:	f04f 0900 	mov.w	r9, #0
 8011146:	e001      	b.n	801114c <uxr_deserialize_CLIENT_Representation+0x90>
 8011148:	2e00      	cmp	r6, #0
 801114a:	d0f4      	beq.n	8011136 <uxr_deserialize_CLIENT_Representation+0x7a>
 801114c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011154:	4628      	mov	r0, r5
 8011156:	f005 f825 	bl	80161a4 <ucdr_deserialize_string>
 801115a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801115e:	4606      	mov	r6, r0
 8011160:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011164:	4628      	mov	r0, r5
 8011166:	f005 f81d 	bl	80161a4 <ucdr_deserialize_string>
 801116a:	6923      	ldr	r3, [r4, #16]
 801116c:	f109 0901 	add.w	r9, r9, #1
 8011170:	4006      	ands	r6, r0
 8011172:	4599      	cmp	r9, r3
 8011174:	f108 0808 	add.w	r8, r8, #8
 8011178:	b2f6      	uxtb	r6, r6
 801117a:	d3e5      	bcc.n	8011148 <uxr_deserialize_CLIENT_Representation+0x8c>
 801117c:	4037      	ands	r7, r6
 801117e:	e7c8      	b.n	8011112 <uxr_deserialize_CLIENT_Representation+0x56>
 8011180:	4007      	ands	r7, r0
 8011182:	e7c6      	b.n	8011112 <uxr_deserialize_CLIENT_Representation+0x56>

08011184 <uxr_serialize_AGENT_Representation>:
 8011184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011188:	2204      	movs	r2, #4
 801118a:	460f      	mov	r7, r1
 801118c:	4605      	mov	r5, r0
 801118e:	f004 fed9 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011192:	2202      	movs	r2, #2
 8011194:	4604      	mov	r4, r0
 8011196:	1d39      	adds	r1, r7, #4
 8011198:	4628      	mov	r0, r5
 801119a:	f004 fed3 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 801119e:	4020      	ands	r0, r4
 80111a0:	2202      	movs	r2, #2
 80111a2:	1db9      	adds	r1, r7, #6
 80111a4:	b2c4      	uxtb	r4, r0
 80111a6:	4628      	mov	r0, r5
 80111a8:	f004 fecc 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 80111ac:	7a39      	ldrb	r1, [r7, #8]
 80111ae:	4004      	ands	r4, r0
 80111b0:	4628      	mov	r0, r5
 80111b2:	f7f9 fd9d 	bl	800acf0 <ucdr_serialize_bool>
 80111b6:	7a3b      	ldrb	r3, [r7, #8]
 80111b8:	ea00 0804 	and.w	r8, r0, r4
 80111bc:	b913      	cbnz	r3, 80111c4 <uxr_serialize_AGENT_Representation+0x40>
 80111be:	4640      	mov	r0, r8
 80111c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111c4:	68f9      	ldr	r1, [r7, #12]
 80111c6:	4628      	mov	r0, r5
 80111c8:	f7f9 ffd6 	bl	800b178 <ucdr_serialize_uint32_t>
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	b303      	cbz	r3, 8011212 <uxr_serialize_AGENT_Representation+0x8e>
 80111d0:	b1d0      	cbz	r0, 8011208 <uxr_serialize_AGENT_Representation+0x84>
 80111d2:	463e      	mov	r6, r7
 80111d4:	f04f 0900 	mov.w	r9, #0
 80111d8:	e001      	b.n	80111de <uxr_serialize_AGENT_Representation+0x5a>
 80111da:	3608      	adds	r6, #8
 80111dc:	b1a4      	cbz	r4, 8011208 <uxr_serialize_AGENT_Representation+0x84>
 80111de:	6931      	ldr	r1, [r6, #16]
 80111e0:	4628      	mov	r0, r5
 80111e2:	f004 ffcf 	bl	8016184 <ucdr_serialize_string>
 80111e6:	6971      	ldr	r1, [r6, #20]
 80111e8:	4604      	mov	r4, r0
 80111ea:	4628      	mov	r0, r5
 80111ec:	f004 ffca 	bl	8016184 <ucdr_serialize_string>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f109 0901 	add.w	r9, r9, #1
 80111f6:	4004      	ands	r4, r0
 80111f8:	4599      	cmp	r9, r3
 80111fa:	b2e4      	uxtb	r4, r4
 80111fc:	d3ed      	bcc.n	80111da <uxr_serialize_AGENT_Representation+0x56>
 80111fe:	ea08 0804 	and.w	r8, r8, r4
 8011202:	4640      	mov	r0, r8
 8011204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011208:	f04f 0800 	mov.w	r8, #0
 801120c:	4640      	mov	r0, r8
 801120e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011212:	ea08 0800 	and.w	r8, r8, r0
 8011216:	e7d2      	b.n	80111be <uxr_serialize_AGENT_Representation+0x3a>

08011218 <uxr_serialize_DATAWRITER_Representation>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	460d      	mov	r5, r1
 801121c:	7809      	ldrb	r1, [r1, #0]
 801121e:	4606      	mov	r6, r0
 8011220:	f7f9 fd94 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011224:	4604      	mov	r4, r0
 8011226:	b130      	cbz	r0, 8011236 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011228:	782b      	ldrb	r3, [r5, #0]
 801122a:	2b02      	cmp	r3, #2
 801122c:	d00c      	beq.n	8011248 <uxr_serialize_DATAWRITER_Representation+0x30>
 801122e:	2b03      	cmp	r3, #3
 8011230:	d010      	beq.n	8011254 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011232:	2b01      	cmp	r3, #1
 8011234:	d008      	beq.n	8011248 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011236:	2202      	movs	r2, #2
 8011238:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801123c:	4630      	mov	r0, r6
 801123e:	f004 fe81 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011242:	4020      	ands	r0, r4
 8011244:	b2c0      	uxtb	r0, r0
 8011246:	bd70      	pop	{r4, r5, r6, pc}
 8011248:	6869      	ldr	r1, [r5, #4]
 801124a:	4630      	mov	r0, r6
 801124c:	f004 ff9a 	bl	8016184 <ucdr_serialize_string>
 8011250:	4604      	mov	r4, r0
 8011252:	e7f0      	b.n	8011236 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011254:	4629      	mov	r1, r5
 8011256:	4630      	mov	r0, r6
 8011258:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801125c:	3104      	adds	r1, #4
 801125e:	f004 ff65 	bl	801612c <ucdr_serialize_sequence_uint8_t>
 8011262:	4604      	mov	r4, r0
 8011264:	e7e7      	b.n	8011236 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011266:	bf00      	nop

08011268 <uxr_serialize_ObjectVariant.part.0>:
 8011268:	b570      	push	{r4, r5, r6, lr}
 801126a:	780b      	ldrb	r3, [r1, #0]
 801126c:	3b01      	subs	r3, #1
 801126e:	460c      	mov	r4, r1
 8011270:	4605      	mov	r5, r0
 8011272:	2b0d      	cmp	r3, #13
 8011274:	d854      	bhi.n	8011320 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011276:	e8df f003 	tbb	[pc, r3]
 801127a:	0730      	.short	0x0730
 801127c:	07071b1b 	.word	0x07071b1b
 8011280:	0c530707 	.word	0x0c530707
 8011284:	494e0c0c 	.word	0x494e0c0c
 8011288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801128c:	3104      	adds	r1, #4
 801128e:	f7ff bfc3 	b.w	8011218 <uxr_serialize_DATAWRITER_Representation>
 8011292:	7909      	ldrb	r1, [r1, #4]
 8011294:	f7f9 fd5a 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011298:	b1e8      	cbz	r0, 80112d6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801129a:	7923      	ldrb	r3, [r4, #4]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d001      	beq.n	80112a4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80112a0:	2b02      	cmp	r3, #2
 80112a2:	d13d      	bne.n	8011320 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80112a4:	68a1      	ldr	r1, [r4, #8]
 80112a6:	4628      	mov	r0, r5
 80112a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112ac:	f004 bf6a 	b.w	8016184 <ucdr_serialize_string>
 80112b0:	7909      	ldrb	r1, [r1, #4]
 80112b2:	f7f9 fd4b 	bl	800ad4c <ucdr_serialize_uint8_t>
 80112b6:	4606      	mov	r6, r0
 80112b8:	b120      	cbz	r0, 80112c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80112ba:	7923      	ldrb	r3, [r4, #4]
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d039      	beq.n	8011334 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80112c0:	2b03      	cmp	r3, #3
 80112c2:	d02f      	beq.n	8011324 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80112c4:	2202      	movs	r2, #2
 80112c6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80112ca:	4628      	mov	r0, r5
 80112cc:	f004 fe3a 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 80112d0:	4030      	ands	r0, r6
 80112d2:	b2c0      	uxtb	r0, r0
 80112d4:	bd70      	pop	{r4, r5, r6, pc}
 80112d6:	2000      	movs	r0, #0
 80112d8:	bd70      	pop	{r4, r5, r6, pc}
 80112da:	7909      	ldrb	r1, [r1, #4]
 80112dc:	f7f9 fd36 	bl	800ad4c <ucdr_serialize_uint8_t>
 80112e0:	4606      	mov	r6, r0
 80112e2:	b158      	cbz	r0, 80112fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80112e4:	7923      	ldrb	r3, [r4, #4]
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	d003      	beq.n	80112f2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d028      	beq.n	8011340 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d104      	bne.n	80112fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80112f2:	68a1      	ldr	r1, [r4, #8]
 80112f4:	4628      	mov	r0, r5
 80112f6:	f004 ff45 	bl	8016184 <ucdr_serialize_string>
 80112fa:	4606      	mov	r6, r0
 80112fc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011300:	4628      	mov	r0, r5
 8011302:	f7fa fa5f 	bl	800b7c4 <ucdr_serialize_int16_t>
 8011306:	4030      	ands	r0, r6
 8011308:	b2c0      	uxtb	r0, r0
 801130a:	bd70      	pop	{r4, r5, r6, pc}
 801130c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011310:	3104      	adds	r1, #4
 8011312:	f7ff be7b 	b.w	801100c <uxr_serialize_CLIENT_Representation>
 8011316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801131a:	3104      	adds	r1, #4
 801131c:	f7ff bf32 	b.w	8011184 <uxr_serialize_AGENT_Representation>
 8011320:	2001      	movs	r0, #1
 8011322:	bd70      	pop	{r4, r5, r6, pc}
 8011324:	68a2      	ldr	r2, [r4, #8]
 8011326:	f104 010c 	add.w	r1, r4, #12
 801132a:	4628      	mov	r0, r5
 801132c:	f004 fefe 	bl	801612c <ucdr_serialize_sequence_uint8_t>
 8011330:	4606      	mov	r6, r0
 8011332:	e7c7      	b.n	80112c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011334:	68a1      	ldr	r1, [r4, #8]
 8011336:	4628      	mov	r0, r5
 8011338:	f004 ff24 	bl	8016184 <ucdr_serialize_string>
 801133c:	4606      	mov	r6, r0
 801133e:	e7c1      	b.n	80112c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011340:	68a2      	ldr	r2, [r4, #8]
 8011342:	f104 010c 	add.w	r1, r4, #12
 8011346:	4628      	mov	r0, r5
 8011348:	f004 fef0 	bl	801612c <ucdr_serialize_sequence_uint8_t>
 801134c:	4606      	mov	r6, r0
 801134e:	e7d5      	b.n	80112fc <uxr_serialize_ObjectVariant.part.0+0x94>

08011350 <uxr_deserialize_DATAWRITER_Representation>:
 8011350:	b570      	push	{r4, r5, r6, lr}
 8011352:	4606      	mov	r6, r0
 8011354:	460d      	mov	r5, r1
 8011356:	f7f9 fd0f 	bl	800ad78 <ucdr_deserialize_uint8_t>
 801135a:	4604      	mov	r4, r0
 801135c:	b130      	cbz	r0, 801136c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801135e:	782b      	ldrb	r3, [r5, #0]
 8011360:	2b02      	cmp	r3, #2
 8011362:	d00c      	beq.n	801137e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011364:	2b03      	cmp	r3, #3
 8011366:	d012      	beq.n	801138e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011368:	2b01      	cmp	r3, #1
 801136a:	d008      	beq.n	801137e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801136c:	2202      	movs	r2, #2
 801136e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011372:	4630      	mov	r0, r6
 8011374:	f004 fe4a 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011378:	4020      	ands	r0, r4
 801137a:	b2c0      	uxtb	r0, r0
 801137c:	bd70      	pop	{r4, r5, r6, pc}
 801137e:	6869      	ldr	r1, [r5, #4]
 8011380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011384:	4630      	mov	r0, r6
 8011386:	f004 ff0d 	bl	80161a4 <ucdr_deserialize_string>
 801138a:	4604      	mov	r4, r0
 801138c:	e7ee      	b.n	801136c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801138e:	1d2b      	adds	r3, r5, #4
 8011390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011394:	f105 0108 	add.w	r1, r5, #8
 8011398:	4630      	mov	r0, r6
 801139a:	f004 fed9 	bl	8016150 <ucdr_deserialize_sequence_uint8_t>
 801139e:	4604      	mov	r4, r0
 80113a0:	e7e4      	b.n	801136c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80113a2:	bf00      	nop

080113a4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	460d      	mov	r5, r1
 80113a8:	7809      	ldrb	r1, [r1, #0]
 80113aa:	4606      	mov	r6, r0
 80113ac:	f7f9 fca0 	bl	800acf0 <ucdr_serialize_bool>
 80113b0:	782b      	ldrb	r3, [r5, #0]
 80113b2:	4604      	mov	r4, r0
 80113b4:	b94b      	cbnz	r3, 80113ca <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80113b6:	7a29      	ldrb	r1, [r5, #8]
 80113b8:	4630      	mov	r0, r6
 80113ba:	f7f9 fc99 	bl	800acf0 <ucdr_serialize_bool>
 80113be:	7a2b      	ldrb	r3, [r5, #8]
 80113c0:	4004      	ands	r4, r0
 80113c2:	b2e4      	uxtb	r4, r4
 80113c4:	b943      	cbnz	r3, 80113d8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80113c6:	4620      	mov	r0, r4
 80113c8:	bd70      	pop	{r4, r5, r6, pc}
 80113ca:	6869      	ldr	r1, [r5, #4]
 80113cc:	4630      	mov	r0, r6
 80113ce:	f004 fed9 	bl	8016184 <ucdr_serialize_string>
 80113d2:	4004      	ands	r4, r0
 80113d4:	b2e4      	uxtb	r4, r4
 80113d6:	e7ee      	b.n	80113b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80113d8:	68e9      	ldr	r1, [r5, #12]
 80113da:	4630      	mov	r0, r6
 80113dc:	f004 fed2 	bl	8016184 <ucdr_serialize_string>
 80113e0:	4004      	ands	r4, r0
 80113e2:	4620      	mov	r0, r4
 80113e4:	bd70      	pop	{r4, r5, r6, pc}
 80113e6:	bf00      	nop

080113e8 <uxr_serialize_OBJK_Topic_Binary>:
 80113e8:	b570      	push	{r4, r5, r6, lr}
 80113ea:	460d      	mov	r5, r1
 80113ec:	6809      	ldr	r1, [r1, #0]
 80113ee:	4606      	mov	r6, r0
 80113f0:	f004 fec8 	bl	8016184 <ucdr_serialize_string>
 80113f4:	7929      	ldrb	r1, [r5, #4]
 80113f6:	4604      	mov	r4, r0
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7f9 fc79 	bl	800acf0 <ucdr_serialize_bool>
 80113fe:	792b      	ldrb	r3, [r5, #4]
 8011400:	4004      	ands	r4, r0
 8011402:	b2e4      	uxtb	r4, r4
 8011404:	b943      	cbnz	r3, 8011418 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011406:	7b29      	ldrb	r1, [r5, #12]
 8011408:	4630      	mov	r0, r6
 801140a:	f7f9 fc71 	bl	800acf0 <ucdr_serialize_bool>
 801140e:	7b2b      	ldrb	r3, [r5, #12]
 8011410:	4004      	ands	r4, r0
 8011412:	b93b      	cbnz	r3, 8011424 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011414:	4620      	mov	r0, r4
 8011416:	bd70      	pop	{r4, r5, r6, pc}
 8011418:	68a9      	ldr	r1, [r5, #8]
 801141a:	4630      	mov	r0, r6
 801141c:	f004 feb2 	bl	8016184 <ucdr_serialize_string>
 8011420:	4004      	ands	r4, r0
 8011422:	e7f0      	b.n	8011406 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011424:	6929      	ldr	r1, [r5, #16]
 8011426:	4630      	mov	r0, r6
 8011428:	f004 feac 	bl	8016184 <ucdr_serialize_string>
 801142c:	4004      	ands	r4, r0
 801142e:	b2e4      	uxtb	r4, r4
 8011430:	4620      	mov	r0, r4
 8011432:	bd70      	pop	{r4, r5, r6, pc}

08011434 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011438:	460c      	mov	r4, r1
 801143a:	7809      	ldrb	r1, [r1, #0]
 801143c:	4606      	mov	r6, r0
 801143e:	f7f9 fc57 	bl	800acf0 <ucdr_serialize_bool>
 8011442:	7823      	ldrb	r3, [r4, #0]
 8011444:	4605      	mov	r5, r0
 8011446:	b96b      	cbnz	r3, 8011464 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011448:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801144c:	4630      	mov	r0, r6
 801144e:	f7f9 fc4f 	bl	800acf0 <ucdr_serialize_bool>
 8011452:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011456:	4005      	ands	r5, r0
 8011458:	b2ed      	uxtb	r5, r5
 801145a:	2b00      	cmp	r3, #0
 801145c:	d169      	bne.n	8011532 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801145e:	4628      	mov	r0, r5
 8011460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011464:	6861      	ldr	r1, [r4, #4]
 8011466:	4630      	mov	r0, r6
 8011468:	f7f9 fe86 	bl	800b178 <ucdr_serialize_uint32_t>
 801146c:	6863      	ldr	r3, [r4, #4]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d06b      	beq.n	801154a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011472:	2800      	cmp	r0, #0
 8011474:	d067      	beq.n	8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011476:	68a1      	ldr	r1, [r4, #8]
 8011478:	4630      	mov	r0, r6
 801147a:	f004 fe83 	bl	8016184 <ucdr_serialize_string>
 801147e:	6863      	ldr	r3, [r4, #4]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d953      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011484:	2800      	cmp	r0, #0
 8011486:	d05e      	beq.n	8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011488:	68e1      	ldr	r1, [r4, #12]
 801148a:	4630      	mov	r0, r6
 801148c:	f004 fe7a 	bl	8016184 <ucdr_serialize_string>
 8011490:	6863      	ldr	r3, [r4, #4]
 8011492:	2b02      	cmp	r3, #2
 8011494:	d94a      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011496:	2800      	cmp	r0, #0
 8011498:	d055      	beq.n	8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801149a:	6921      	ldr	r1, [r4, #16]
 801149c:	4630      	mov	r0, r6
 801149e:	f004 fe71 	bl	8016184 <ucdr_serialize_string>
 80114a2:	6863      	ldr	r3, [r4, #4]
 80114a4:	2b03      	cmp	r3, #3
 80114a6:	d941      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114a8:	2800      	cmp	r0, #0
 80114aa:	d04c      	beq.n	8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114ac:	6961      	ldr	r1, [r4, #20]
 80114ae:	4630      	mov	r0, r6
 80114b0:	f004 fe68 	bl	8016184 <ucdr_serialize_string>
 80114b4:	6863      	ldr	r3, [r4, #4]
 80114b6:	2b04      	cmp	r3, #4
 80114b8:	d938      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d043      	beq.n	8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114be:	69a1      	ldr	r1, [r4, #24]
 80114c0:	4630      	mov	r0, r6
 80114c2:	f004 fe5f 	bl	8016184 <ucdr_serialize_string>
 80114c6:	6863      	ldr	r3, [r4, #4]
 80114c8:	2b05      	cmp	r3, #5
 80114ca:	d92f      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114cc:	2800      	cmp	r0, #0
 80114ce:	d03a      	beq.n	8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114d0:	69e1      	ldr	r1, [r4, #28]
 80114d2:	4630      	mov	r0, r6
 80114d4:	f004 fe56 	bl	8016184 <ucdr_serialize_string>
 80114d8:	6863      	ldr	r3, [r4, #4]
 80114da:	2b06      	cmp	r3, #6
 80114dc:	d926      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114de:	b390      	cbz	r0, 8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114e0:	6a21      	ldr	r1, [r4, #32]
 80114e2:	4630      	mov	r0, r6
 80114e4:	f004 fe4e 	bl	8016184 <ucdr_serialize_string>
 80114e8:	6863      	ldr	r3, [r4, #4]
 80114ea:	2b07      	cmp	r3, #7
 80114ec:	d91e      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114ee:	b350      	cbz	r0, 8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80114f2:	4630      	mov	r0, r6
 80114f4:	f004 fe46 	bl	8016184 <ucdr_serialize_string>
 80114f8:	6863      	ldr	r3, [r4, #4]
 80114fa:	2b08      	cmp	r3, #8
 80114fc:	d916      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114fe:	b310      	cbz	r0, 8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011500:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011502:	4630      	mov	r0, r6
 8011504:	f004 fe3e 	bl	8016184 <ucdr_serialize_string>
 8011508:	6863      	ldr	r3, [r4, #4]
 801150a:	2b09      	cmp	r3, #9
 801150c:	d90e      	bls.n	801152c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801150e:	b1d0      	cbz	r0, 8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011510:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011514:	2709      	movs	r7, #9
 8011516:	e000      	b.n	801151a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011518:	b1a8      	cbz	r0, 8011546 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801151a:	f858 1b04 	ldr.w	r1, [r8], #4
 801151e:	4630      	mov	r0, r6
 8011520:	f004 fe30 	bl	8016184 <ucdr_serialize_string>
 8011524:	6862      	ldr	r2, [r4, #4]
 8011526:	3701      	adds	r7, #1
 8011528:	4297      	cmp	r7, r2
 801152a:	d3f5      	bcc.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801152c:	4005      	ands	r5, r0
 801152e:	b2ed      	uxtb	r5, r5
 8011530:	e78a      	b.n	8011448 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011532:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011534:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011538:	4630      	mov	r0, r6
 801153a:	f004 fdf7 	bl	801612c <ucdr_serialize_sequence_uint8_t>
 801153e:	4005      	ands	r5, r0
 8011540:	4628      	mov	r0, r5
 8011542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011546:	2500      	movs	r5, #0
 8011548:	e77e      	b.n	8011448 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801154a:	4028      	ands	r0, r5
 801154c:	b2c5      	uxtb	r5, r0
 801154e:	e77b      	b.n	8011448 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011550 <uxr_serialize_OBJK_Publisher_Binary>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	460d      	mov	r5, r1
 8011554:	7809      	ldrb	r1, [r1, #0]
 8011556:	4606      	mov	r6, r0
 8011558:	f7f9 fbca 	bl	800acf0 <ucdr_serialize_bool>
 801155c:	782b      	ldrb	r3, [r5, #0]
 801155e:	4604      	mov	r4, r0
 8011560:	b94b      	cbnz	r3, 8011576 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011562:	7a29      	ldrb	r1, [r5, #8]
 8011564:	4630      	mov	r0, r6
 8011566:	f7f9 fbc3 	bl	800acf0 <ucdr_serialize_bool>
 801156a:	7a2b      	ldrb	r3, [r5, #8]
 801156c:	4004      	ands	r4, r0
 801156e:	b2e4      	uxtb	r4, r4
 8011570:	b943      	cbnz	r3, 8011584 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011572:	4620      	mov	r0, r4
 8011574:	bd70      	pop	{r4, r5, r6, pc}
 8011576:	6869      	ldr	r1, [r5, #4]
 8011578:	4630      	mov	r0, r6
 801157a:	f004 fe03 	bl	8016184 <ucdr_serialize_string>
 801157e:	4004      	ands	r4, r0
 8011580:	b2e4      	uxtb	r4, r4
 8011582:	e7ee      	b.n	8011562 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011584:	f105 010c 	add.w	r1, r5, #12
 8011588:	4630      	mov	r0, r6
 801158a:	f7ff ff53 	bl	8011434 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801158e:	4004      	ands	r4, r0
 8011590:	4620      	mov	r0, r4
 8011592:	bd70      	pop	{r4, r5, r6, pc}

08011594 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011594:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011598:	4688      	mov	r8, r1
 801159a:	8809      	ldrh	r1, [r1, #0]
 801159c:	4681      	mov	r9, r0
 801159e:	f7f9 fc01 	bl	800ada4 <ucdr_serialize_uint16_t>
 80115a2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80115a6:	4606      	mov	r6, r0
 80115a8:	4648      	mov	r0, r9
 80115aa:	f7f9 fba1 	bl	800acf0 <ucdr_serialize_bool>
 80115ae:	f898 3002 	ldrb.w	r3, [r8, #2]
 80115b2:	4006      	ands	r6, r0
 80115b4:	b2f5      	uxtb	r5, r6
 80115b6:	b9eb      	cbnz	r3, 80115f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80115b8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80115bc:	4648      	mov	r0, r9
 80115be:	f7f9 fb97 	bl	800acf0 <ucdr_serialize_bool>
 80115c2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80115c6:	4005      	ands	r5, r0
 80115c8:	bb7b      	cbnz	r3, 801162a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80115ca:	f898 100c 	ldrb.w	r1, [r8, #12]
 80115ce:	4648      	mov	r0, r9
 80115d0:	f7f9 fb8e 	bl	800acf0 <ucdr_serialize_bool>
 80115d4:	f898 300c 	ldrb.w	r3, [r8, #12]
 80115d8:	4005      	ands	r5, r0
 80115da:	b9f3      	cbnz	r3, 801161a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80115dc:	f898 1014 	ldrb.w	r1, [r8, #20]
 80115e0:	4648      	mov	r0, r9
 80115e2:	f7f9 fb85 	bl	800acf0 <ucdr_serialize_bool>
 80115e6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80115ea:	4005      	ands	r5, r0
 80115ec:	b94b      	cbnz	r3, 8011602 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80115ee:	4628      	mov	r0, r5
 80115f0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80115f4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80115f8:	4648      	mov	r0, r9
 80115fa:	f7f9 fbd3 	bl	800ada4 <ucdr_serialize_uint16_t>
 80115fe:	4005      	ands	r5, r0
 8011600:	e7da      	b.n	80115b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011602:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011606:	f108 011c 	add.w	r1, r8, #28
 801160a:	4648      	mov	r0, r9
 801160c:	f004 fd8e 	bl	801612c <ucdr_serialize_sequence_uint8_t>
 8011610:	4028      	ands	r0, r5
 8011612:	b2c5      	uxtb	r5, r0
 8011614:	4628      	mov	r0, r5
 8011616:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801161a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801161e:	4648      	mov	r0, r9
 8011620:	f7f9 fdaa 	bl	800b178 <ucdr_serialize_uint32_t>
 8011624:	4028      	ands	r0, r5
 8011626:	b2c5      	uxtb	r5, r0
 8011628:	e7d8      	b.n	80115dc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801162a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801162e:	4648      	mov	r0, r9
 8011630:	f7f9 fda2 	bl	800b178 <ucdr_serialize_uint32_t>
 8011634:	4028      	ands	r0, r5
 8011636:	b2c5      	uxtb	r5, r0
 8011638:	e7c7      	b.n	80115ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801163a:	bf00      	nop

0801163c <uxr_serialize_OBJK_DataWriter_Binary>:
 801163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163e:	2202      	movs	r2, #2
 8011640:	460d      	mov	r5, r1
 8011642:	4606      	mov	r6, r0
 8011644:	f004 fc7e 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011648:	78a9      	ldrb	r1, [r5, #2]
 801164a:	4604      	mov	r4, r0
 801164c:	4630      	mov	r0, r6
 801164e:	f7f9 fb4f 	bl	800acf0 <ucdr_serialize_bool>
 8011652:	78ab      	ldrb	r3, [r5, #2]
 8011654:	4004      	ands	r4, r0
 8011656:	b2e4      	uxtb	r4, r4
 8011658:	b90b      	cbnz	r3, 801165e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801165a:	4620      	mov	r0, r4
 801165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801165e:	f105 0108 	add.w	r1, r5, #8
 8011662:	4630      	mov	r0, r6
 8011664:	f7ff ff96 	bl	8011594 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011668:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801166c:	4607      	mov	r7, r0
 801166e:	4630      	mov	r0, r6
 8011670:	f7f9 fb3e 	bl	800acf0 <ucdr_serialize_bool>
 8011674:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011678:	4038      	ands	r0, r7
 801167a:	b2c7      	uxtb	r7, r0
 801167c:	b913      	cbnz	r3, 8011684 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801167e:	403c      	ands	r4, r7
 8011680:	4620      	mov	r0, r4
 8011682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011684:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011688:	4630      	mov	r0, r6
 801168a:	f7f9 ffcb 	bl	800b624 <ucdr_serialize_uint64_t>
 801168e:	4007      	ands	r7, r0
 8011690:	e7f5      	b.n	801167e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011692:	bf00      	nop

08011694 <uxr_deserialize_ObjectVariant>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	4605      	mov	r5, r0
 8011698:	460e      	mov	r6, r1
 801169a:	f7f9 fb6d 	bl	800ad78 <ucdr_deserialize_uint8_t>
 801169e:	b168      	cbz	r0, 80116bc <uxr_deserialize_ObjectVariant+0x28>
 80116a0:	7833      	ldrb	r3, [r6, #0]
 80116a2:	3b01      	subs	r3, #1
 80116a4:	4604      	mov	r4, r0
 80116a6:	2b0d      	cmp	r3, #13
 80116a8:	d809      	bhi.n	80116be <uxr_deserialize_ObjectVariant+0x2a>
 80116aa:	e8df f003 	tbb	[pc, r3]
 80116ae:	0a41      	.short	0x0a41
 80116b0:	0a0a2323 	.word	0x0a0a2323
 80116b4:	10080a0a 	.word	0x10080a0a
 80116b8:	565c1010 	.word	0x565c1010
 80116bc:	2400      	movs	r4, #0
 80116be:	4620      	mov	r0, r4
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
 80116c2:	1d31      	adds	r1, r6, #4
 80116c4:	4628      	mov	r0, r5
 80116c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116ca:	f7ff be41 	b.w	8011350 <uxr_deserialize_DATAWRITER_Representation>
 80116ce:	1d31      	adds	r1, r6, #4
 80116d0:	4628      	mov	r0, r5
 80116d2:	f7f9 fb51 	bl	800ad78 <ucdr_deserialize_uint8_t>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d0f0      	beq.n	80116bc <uxr_deserialize_ObjectVariant+0x28>
 80116da:	7933      	ldrb	r3, [r6, #4]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d001      	beq.n	80116e4 <uxr_deserialize_ObjectVariant+0x50>
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	d1ec      	bne.n	80116be <uxr_deserialize_ObjectVariant+0x2a>
 80116e4:	68b1      	ldr	r1, [r6, #8]
 80116e6:	4628      	mov	r0, r5
 80116e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116f0:	f004 bd58 	b.w	80161a4 <ucdr_deserialize_string>
 80116f4:	1d31      	adds	r1, r6, #4
 80116f6:	4628      	mov	r0, r5
 80116f8:	f7f9 fb3e 	bl	800ad78 <ucdr_deserialize_uint8_t>
 80116fc:	4604      	mov	r4, r0
 80116fe:	b170      	cbz	r0, 801171e <uxr_deserialize_ObjectVariant+0x8a>
 8011700:	7933      	ldrb	r3, [r6, #4]
 8011702:	2b02      	cmp	r3, #2
 8011704:	d04c      	beq.n	80117a0 <uxr_deserialize_ObjectVariant+0x10c>
 8011706:	2b03      	cmp	r3, #3
 8011708:	d109      	bne.n	801171e <uxr_deserialize_ObjectVariant+0x8a>
 801170a:	f106 0308 	add.w	r3, r6, #8
 801170e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011712:	f106 010c 	add.w	r1, r6, #12
 8011716:	4628      	mov	r0, r5
 8011718:	f004 fd1a 	bl	8016150 <ucdr_deserialize_sequence_uint8_t>
 801171c:	4604      	mov	r4, r0
 801171e:	2202      	movs	r2, #2
 8011720:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011724:	4628      	mov	r0, r5
 8011726:	f004 fc71 	bl	801600c <ucdr_deserialize_array_uint8_t>
 801172a:	4020      	ands	r0, r4
 801172c:	b2c4      	uxtb	r4, r0
 801172e:	e7c6      	b.n	80116be <uxr_deserialize_ObjectVariant+0x2a>
 8011730:	1d31      	adds	r1, r6, #4
 8011732:	4628      	mov	r0, r5
 8011734:	f7f9 fb20 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011738:	4604      	mov	r4, r0
 801173a:	b130      	cbz	r0, 801174a <uxr_deserialize_ObjectVariant+0xb6>
 801173c:	7933      	ldrb	r3, [r6, #4]
 801173e:	2b02      	cmp	r3, #2
 8011740:	d036      	beq.n	80117b0 <uxr_deserialize_ObjectVariant+0x11c>
 8011742:	2b03      	cmp	r3, #3
 8011744:	d03c      	beq.n	80117c0 <uxr_deserialize_ObjectVariant+0x12c>
 8011746:	2b01      	cmp	r3, #1
 8011748:	d032      	beq.n	80117b0 <uxr_deserialize_ObjectVariant+0x11c>
 801174a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801174e:	4628      	mov	r0, r5
 8011750:	f7fa f8b8 	bl	800b8c4 <ucdr_deserialize_int16_t>
 8011754:	4020      	ands	r0, r4
 8011756:	b2c4      	uxtb	r4, r0
 8011758:	e7b1      	b.n	80116be <uxr_deserialize_ObjectVariant+0x2a>
 801175a:	1d31      	adds	r1, r6, #4
 801175c:	4628      	mov	r0, r5
 801175e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011762:	f7ff bcab 	b.w	80110bc <uxr_deserialize_CLIENT_Representation>
 8011766:	2204      	movs	r2, #4
 8011768:	18b1      	adds	r1, r6, r2
 801176a:	4628      	mov	r0, r5
 801176c:	f004 fc4e 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011770:	2202      	movs	r2, #2
 8011772:	f106 0108 	add.w	r1, r6, #8
 8011776:	4604      	mov	r4, r0
 8011778:	4628      	mov	r0, r5
 801177a:	f004 fc47 	bl	801600c <ucdr_deserialize_array_uint8_t>
 801177e:	2202      	movs	r2, #2
 8011780:	4004      	ands	r4, r0
 8011782:	f106 010a 	add.w	r1, r6, #10
 8011786:	4628      	mov	r0, r5
 8011788:	f004 fc40 	bl	801600c <ucdr_deserialize_array_uint8_t>
 801178c:	b2e4      	uxtb	r4, r4
 801178e:	4603      	mov	r3, r0
 8011790:	f106 010c 	add.w	r1, r6, #12
 8011794:	4628      	mov	r0, r5
 8011796:	401c      	ands	r4, r3
 8011798:	f7f9 fac0 	bl	800ad1c <ucdr_deserialize_bool>
 801179c:	4004      	ands	r4, r0
 801179e:	e78e      	b.n	80116be <uxr_deserialize_ObjectVariant+0x2a>
 80117a0:	68b1      	ldr	r1, [r6, #8]
 80117a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80117a6:	4628      	mov	r0, r5
 80117a8:	f004 fcfc 	bl	80161a4 <ucdr_deserialize_string>
 80117ac:	4604      	mov	r4, r0
 80117ae:	e7b6      	b.n	801171e <uxr_deserialize_ObjectVariant+0x8a>
 80117b0:	68b1      	ldr	r1, [r6, #8]
 80117b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80117b6:	4628      	mov	r0, r5
 80117b8:	f004 fcf4 	bl	80161a4 <ucdr_deserialize_string>
 80117bc:	4604      	mov	r4, r0
 80117be:	e7c4      	b.n	801174a <uxr_deserialize_ObjectVariant+0xb6>
 80117c0:	f106 0308 	add.w	r3, r6, #8
 80117c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80117c8:	f106 010c 	add.w	r1, r6, #12
 80117cc:	4628      	mov	r0, r5
 80117ce:	f004 fcbf 	bl	8016150 <ucdr_deserialize_sequence_uint8_t>
 80117d2:	4604      	mov	r4, r0
 80117d4:	e7b9      	b.n	801174a <uxr_deserialize_ObjectVariant+0xb6>
 80117d6:	bf00      	nop

080117d8 <uxr_deserialize_BaseObjectRequest>:
 80117d8:	b570      	push	{r4, r5, r6, lr}
 80117da:	2202      	movs	r2, #2
 80117dc:	4605      	mov	r5, r0
 80117de:	460e      	mov	r6, r1
 80117e0:	f004 fc14 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80117e4:	2202      	movs	r2, #2
 80117e6:	4604      	mov	r4, r0
 80117e8:	18b1      	adds	r1, r6, r2
 80117ea:	4628      	mov	r0, r5
 80117ec:	f004 fc0e 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80117f0:	4020      	ands	r0, r4
 80117f2:	b2c0      	uxtb	r0, r0
 80117f4:	bd70      	pop	{r4, r5, r6, pc}
 80117f6:	bf00      	nop

080117f8 <uxr_serialize_ActivityInfoVariant>:
 80117f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117fc:	460d      	mov	r5, r1
 80117fe:	7809      	ldrb	r1, [r1, #0]
 8011800:	4607      	mov	r7, r0
 8011802:	f7f9 faa3 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011806:	4681      	mov	r9, r0
 8011808:	b138      	cbz	r0, 801181a <uxr_serialize_ActivityInfoVariant+0x22>
 801180a:	782b      	ldrb	r3, [r5, #0]
 801180c:	2b06      	cmp	r3, #6
 801180e:	f000 8082 	beq.w	8011916 <uxr_serialize_ActivityInfoVariant+0x11e>
 8011812:	2b0d      	cmp	r3, #13
 8011814:	d016      	beq.n	8011844 <uxr_serialize_ActivityInfoVariant+0x4c>
 8011816:	2b05      	cmp	r3, #5
 8011818:	d002      	beq.n	8011820 <uxr_serialize_ActivityInfoVariant+0x28>
 801181a:	4648      	mov	r0, r9
 801181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011820:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011824:	4638      	mov	r0, r7
 8011826:	f7f9 ffcd 	bl	800b7c4 <ucdr_serialize_int16_t>
 801182a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801182e:	4681      	mov	r9, r0
 8011830:	4638      	mov	r0, r7
 8011832:	f7f9 fef7 	bl	800b624 <ucdr_serialize_uint64_t>
 8011836:	ea09 0000 	and.w	r0, r9, r0
 801183a:	fa5f f980 	uxtb.w	r9, r0
 801183e:	4648      	mov	r0, r9
 8011840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011844:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011848:	4638      	mov	r0, r7
 801184a:	f7f9 ffbb 	bl	800b7c4 <ucdr_serialize_int16_t>
 801184e:	68e9      	ldr	r1, [r5, #12]
 8011850:	4681      	mov	r9, r0
 8011852:	4638      	mov	r0, r7
 8011854:	f7f9 fc90 	bl	800b178 <ucdr_serialize_uint32_t>
 8011858:	68eb      	ldr	r3, [r5, #12]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d0eb      	beq.n	8011836 <uxr_serialize_ActivityInfoVariant+0x3e>
 801185e:	b320      	cbz	r0, 80118aa <uxr_serialize_ActivityInfoVariant+0xb2>
 8011860:	f105 080c 	add.w	r8, r5, #12
 8011864:	2600      	movs	r6, #0
 8011866:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801186a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801186e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011872:	4638      	mov	r0, r7
 8011874:	f7f9 fa6a 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011878:	2800      	cmp	r0, #0
 801187a:	d053      	beq.n	8011924 <uxr_serialize_ActivityInfoVariant+0x12c>
 801187c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011880:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011884:	0074      	lsls	r4, r6, #1
 8011886:	00c9      	lsls	r1, r1, #3
 8011888:	2b03      	cmp	r3, #3
 801188a:	d854      	bhi.n	8011936 <uxr_serialize_ActivityInfoVariant+0x13e>
 801188c:	e8df f003 	tbb	[pc, r3]
 8011890:	02102132 	.word	0x02102132
 8011894:	4441      	add	r1, r8
 8011896:	4638      	mov	r0, r7
 8011898:	6889      	ldr	r1, [r1, #8]
 801189a:	f004 fc73 	bl	8016184 <ucdr_serialize_string>
 801189e:	68ea      	ldr	r2, [r5, #12]
 80118a0:	3601      	adds	r6, #1
 80118a2:	4296      	cmp	r6, r2
 80118a4:	d242      	bcs.n	801192c <uxr_serialize_ActivityInfoVariant+0x134>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d1dd      	bne.n	8011866 <uxr_serialize_ActivityInfoVariant+0x6e>
 80118aa:	f04f 0900 	mov.w	r9, #0
 80118ae:	e7b4      	b.n	801181a <uxr_serialize_ActivityInfoVariant+0x22>
 80118b0:	3108      	adds	r1, #8
 80118b2:	4441      	add	r1, r8
 80118b4:	2210      	movs	r2, #16
 80118b6:	4638      	mov	r0, r7
 80118b8:	f004 fb44 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 80118bc:	4434      	add	r4, r6
 80118be:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80118c2:	4604      	mov	r4, r0
 80118c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80118c6:	4638      	mov	r0, r7
 80118c8:	f7f9 fc56 	bl	800b178 <ucdr_serialize_uint32_t>
 80118cc:	4020      	ands	r0, r4
 80118ce:	b2c0      	uxtb	r0, r0
 80118d0:	e7e5      	b.n	801189e <uxr_serialize_ActivityInfoVariant+0xa6>
 80118d2:	3108      	adds	r1, #8
 80118d4:	4441      	add	r1, r8
 80118d6:	2204      	movs	r2, #4
 80118d8:	4638      	mov	r0, r7
 80118da:	f004 fb33 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 80118de:	4434      	add	r4, r6
 80118e0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80118e4:	4604      	mov	r4, r0
 80118e6:	8b19      	ldrh	r1, [r3, #24]
 80118e8:	4638      	mov	r0, r7
 80118ea:	f7f9 fa5b 	bl	800ada4 <ucdr_serialize_uint16_t>
 80118ee:	4020      	ands	r0, r4
 80118f0:	b2c0      	uxtb	r0, r0
 80118f2:	e7d4      	b.n	801189e <uxr_serialize_ActivityInfoVariant+0xa6>
 80118f4:	3108      	adds	r1, #8
 80118f6:	4441      	add	r1, r8
 80118f8:	2202      	movs	r2, #2
 80118fa:	4638      	mov	r0, r7
 80118fc:	f004 fb22 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011900:	4434      	add	r4, r6
 8011902:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011906:	4604      	mov	r4, r0
 8011908:	7d99      	ldrb	r1, [r3, #22]
 801190a:	4638      	mov	r0, r7
 801190c:	f7f9 fa1e 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011910:	4020      	ands	r0, r4
 8011912:	b2c0      	uxtb	r0, r0
 8011914:	e7c3      	b.n	801189e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011916:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801191a:	4638      	mov	r0, r7
 801191c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011920:	f7f9 bf50 	b.w	800b7c4 <ucdr_serialize_int16_t>
 8011924:	68ea      	ldr	r2, [r5, #12]
 8011926:	3601      	adds	r6, #1
 8011928:	42b2      	cmp	r2, r6
 801192a:	d8be      	bhi.n	80118aa <uxr_serialize_ActivityInfoVariant+0xb2>
 801192c:	ea09 0900 	and.w	r9, r9, r0
 8011930:	fa5f f989 	uxtb.w	r9, r9
 8011934:	e771      	b.n	801181a <uxr_serialize_ActivityInfoVariant+0x22>
 8011936:	68eb      	ldr	r3, [r5, #12]
 8011938:	3601      	adds	r6, #1
 801193a:	429e      	cmp	r6, r3
 801193c:	f10a 0a18 	add.w	sl, sl, #24
 8011940:	d395      	bcc.n	801186e <uxr_serialize_ActivityInfoVariant+0x76>
 8011942:	e76a      	b.n	801181a <uxr_serialize_ActivityInfoVariant+0x22>

08011944 <uxr_deserialize_BaseObjectReply>:
 8011944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011948:	2202      	movs	r2, #2
 801194a:	4606      	mov	r6, r0
 801194c:	460f      	mov	r7, r1
 801194e:	f004 fb5d 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011952:	2202      	movs	r2, #2
 8011954:	18b9      	adds	r1, r7, r2
 8011956:	4605      	mov	r5, r0
 8011958:	4630      	mov	r0, r6
 801195a:	f004 fb57 	bl	801600c <ucdr_deserialize_array_uint8_t>
 801195e:	1d39      	adds	r1, r7, #4
 8011960:	4680      	mov	r8, r0
 8011962:	4630      	mov	r0, r6
 8011964:	f7f9 fa08 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011968:	1d79      	adds	r1, r7, #5
 801196a:	4604      	mov	r4, r0
 801196c:	4630      	mov	r0, r6
 801196e:	f7f9 fa03 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011972:	ea05 0508 	and.w	r5, r5, r8
 8011976:	402c      	ands	r4, r5
 8011978:	4020      	ands	r0, r4
 801197a:	b2c0      	uxtb	r0, r0
 801197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011980 <uxr_serialize_ReadSpecification>:
 8011980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011984:	460e      	mov	r6, r1
 8011986:	7809      	ldrb	r1, [r1, #0]
 8011988:	4607      	mov	r7, r0
 801198a:	f7f9 f9df 	bl	800ad4c <ucdr_serialize_uint8_t>
 801198e:	7871      	ldrb	r1, [r6, #1]
 8011990:	4604      	mov	r4, r0
 8011992:	4638      	mov	r0, r7
 8011994:	f7f9 f9da 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011998:	78b1      	ldrb	r1, [r6, #2]
 801199a:	4004      	ands	r4, r0
 801199c:	4638      	mov	r0, r7
 801199e:	f7f9 f9a7 	bl	800acf0 <ucdr_serialize_bool>
 80119a2:	78b3      	ldrb	r3, [r6, #2]
 80119a4:	b2e4      	uxtb	r4, r4
 80119a6:	4004      	ands	r4, r0
 80119a8:	b94b      	cbnz	r3, 80119be <uxr_serialize_ReadSpecification+0x3e>
 80119aa:	7a31      	ldrb	r1, [r6, #8]
 80119ac:	4638      	mov	r0, r7
 80119ae:	f7f9 f99f 	bl	800acf0 <ucdr_serialize_bool>
 80119b2:	7a33      	ldrb	r3, [r6, #8]
 80119b4:	4004      	ands	r4, r0
 80119b6:	b943      	cbnz	r3, 80119ca <uxr_serialize_ReadSpecification+0x4a>
 80119b8:	4620      	mov	r0, r4
 80119ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119be:	6871      	ldr	r1, [r6, #4]
 80119c0:	4638      	mov	r0, r7
 80119c2:	f004 fbdf 	bl	8016184 <ucdr_serialize_string>
 80119c6:	4004      	ands	r4, r0
 80119c8:	e7ef      	b.n	80119aa <uxr_serialize_ReadSpecification+0x2a>
 80119ca:	8971      	ldrh	r1, [r6, #10]
 80119cc:	4638      	mov	r0, r7
 80119ce:	f7f9 f9e9 	bl	800ada4 <ucdr_serialize_uint16_t>
 80119d2:	89b1      	ldrh	r1, [r6, #12]
 80119d4:	4605      	mov	r5, r0
 80119d6:	4638      	mov	r0, r7
 80119d8:	f7f9 f9e4 	bl	800ada4 <ucdr_serialize_uint16_t>
 80119dc:	89f1      	ldrh	r1, [r6, #14]
 80119de:	4005      	ands	r5, r0
 80119e0:	4638      	mov	r0, r7
 80119e2:	f7f9 f9df 	bl	800ada4 <ucdr_serialize_uint16_t>
 80119e6:	8a31      	ldrh	r1, [r6, #16]
 80119e8:	4680      	mov	r8, r0
 80119ea:	4638      	mov	r0, r7
 80119ec:	f7f9 f9da 	bl	800ada4 <ucdr_serialize_uint16_t>
 80119f0:	b2ed      	uxtb	r5, r5
 80119f2:	4025      	ands	r5, r4
 80119f4:	ea08 0505 	and.w	r5, r8, r5
 80119f8:	ea00 0405 	and.w	r4, r0, r5
 80119fc:	4620      	mov	r0, r4
 80119fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a02:	bf00      	nop

08011a04 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011a04:	f7ff bb02 	b.w	801100c <uxr_serialize_CLIENT_Representation>

08011a08 <uxr_serialize_CREATE_Payload>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	2202      	movs	r2, #2
 8011a0c:	4607      	mov	r7, r0
 8011a0e:	460e      	mov	r6, r1
 8011a10:	f004 fa98 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011a14:	2202      	movs	r2, #2
 8011a16:	18b1      	adds	r1, r6, r2
 8011a18:	4605      	mov	r5, r0
 8011a1a:	4638      	mov	r0, r7
 8011a1c:	f004 fa92 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011a20:	7931      	ldrb	r1, [r6, #4]
 8011a22:	4604      	mov	r4, r0
 8011a24:	4638      	mov	r0, r7
 8011a26:	f7f9 f991 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011a2a:	b170      	cbz	r0, 8011a4a <uxr_serialize_CREATE_Payload+0x42>
 8011a2c:	7933      	ldrb	r3, [r6, #4]
 8011a2e:	402c      	ands	r4, r5
 8011a30:	3b01      	subs	r3, #1
 8011a32:	b2e4      	uxtb	r4, r4
 8011a34:	2b0d      	cmp	r3, #13
 8011a36:	d809      	bhi.n	8011a4c <uxr_serialize_CREATE_Payload+0x44>
 8011a38:	e8df f003 	tbb	[pc, r3]
 8011a3c:	23230a4c 	.word	0x23230a4c
 8011a40:	0a0a0a0a 	.word	0x0a0a0a0a
 8011a44:	12121208 	.word	0x12121208
 8011a48:	3e45      	.short	0x3e45
 8011a4a:	2400      	movs	r4, #0
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a50:	f106 0108 	add.w	r1, r6, #8
 8011a54:	4638      	mov	r0, r7
 8011a56:	f7ff fbdf 	bl	8011218 <uxr_serialize_DATAWRITER_Representation>
 8011a5a:	4004      	ands	r4, r0
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a60:	7a31      	ldrb	r1, [r6, #8]
 8011a62:	4638      	mov	r0, r7
 8011a64:	f7f9 f972 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	d0ee      	beq.n	8011a4a <uxr_serialize_CREATE_Payload+0x42>
 8011a6c:	7a33      	ldrb	r3, [r6, #8]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d001      	beq.n	8011a76 <uxr_serialize_CREATE_Payload+0x6e>
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	d1ea      	bne.n	8011a4c <uxr_serialize_CREATE_Payload+0x44>
 8011a76:	68f1      	ldr	r1, [r6, #12]
 8011a78:	4638      	mov	r0, r7
 8011a7a:	f004 fb83 	bl	8016184 <ucdr_serialize_string>
 8011a7e:	4004      	ands	r4, r0
 8011a80:	e7e4      	b.n	8011a4c <uxr_serialize_CREATE_Payload+0x44>
 8011a82:	7a31      	ldrb	r1, [r6, #8]
 8011a84:	4638      	mov	r0, r7
 8011a86:	f7f9 f961 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011a8a:	4605      	mov	r5, r0
 8011a8c:	b158      	cbz	r0, 8011aa6 <uxr_serialize_CREATE_Payload+0x9e>
 8011a8e:	7a33      	ldrb	r3, [r6, #8]
 8011a90:	2b02      	cmp	r3, #2
 8011a92:	d034      	beq.n	8011afe <uxr_serialize_CREATE_Payload+0xf6>
 8011a94:	2b03      	cmp	r3, #3
 8011a96:	d106      	bne.n	8011aa6 <uxr_serialize_CREATE_Payload+0x9e>
 8011a98:	68f2      	ldr	r2, [r6, #12]
 8011a9a:	f106 0110 	add.w	r1, r6, #16
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	f004 fb44 	bl	801612c <ucdr_serialize_sequence_uint8_t>
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	2202      	movs	r2, #2
 8011aa8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011aac:	4638      	mov	r0, r7
 8011aae:	f004 fa49 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011ab2:	4028      	ands	r0, r5
 8011ab4:	4004      	ands	r4, r0
 8011ab6:	e7c9      	b.n	8011a4c <uxr_serialize_CREATE_Payload+0x44>
 8011ab8:	f106 0108 	add.w	r1, r6, #8
 8011abc:	4638      	mov	r0, r7
 8011abe:	f7ff faa5 	bl	801100c <uxr_serialize_CLIENT_Representation>
 8011ac2:	4004      	ands	r4, r0
 8011ac4:	e7c2      	b.n	8011a4c <uxr_serialize_CREATE_Payload+0x44>
 8011ac6:	f106 0108 	add.w	r1, r6, #8
 8011aca:	4638      	mov	r0, r7
 8011acc:	f7ff fb5a 	bl	8011184 <uxr_serialize_AGENT_Representation>
 8011ad0:	4004      	ands	r4, r0
 8011ad2:	e7bb      	b.n	8011a4c <uxr_serialize_CREATE_Payload+0x44>
 8011ad4:	7a31      	ldrb	r1, [r6, #8]
 8011ad6:	4638      	mov	r0, r7
 8011ad8:	f7f9 f938 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011adc:	4605      	mov	r5, r0
 8011ade:	b130      	cbz	r0, 8011aee <uxr_serialize_CREATE_Payload+0xe6>
 8011ae0:	7a33      	ldrb	r3, [r6, #8]
 8011ae2:	2b02      	cmp	r3, #2
 8011ae4:	d011      	beq.n	8011b0a <uxr_serialize_CREATE_Payload+0x102>
 8011ae6:	2b03      	cmp	r3, #3
 8011ae8:	d015      	beq.n	8011b16 <uxr_serialize_CREATE_Payload+0x10e>
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d00d      	beq.n	8011b0a <uxr_serialize_CREATE_Payload+0x102>
 8011aee:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011af2:	4638      	mov	r0, r7
 8011af4:	f7f9 fe66 	bl	800b7c4 <ucdr_serialize_int16_t>
 8011af8:	4028      	ands	r0, r5
 8011afa:	4004      	ands	r4, r0
 8011afc:	e7a6      	b.n	8011a4c <uxr_serialize_CREATE_Payload+0x44>
 8011afe:	68f1      	ldr	r1, [r6, #12]
 8011b00:	4638      	mov	r0, r7
 8011b02:	f004 fb3f 	bl	8016184 <ucdr_serialize_string>
 8011b06:	4605      	mov	r5, r0
 8011b08:	e7cd      	b.n	8011aa6 <uxr_serialize_CREATE_Payload+0x9e>
 8011b0a:	68f1      	ldr	r1, [r6, #12]
 8011b0c:	4638      	mov	r0, r7
 8011b0e:	f004 fb39 	bl	8016184 <ucdr_serialize_string>
 8011b12:	4605      	mov	r5, r0
 8011b14:	e7eb      	b.n	8011aee <uxr_serialize_CREATE_Payload+0xe6>
 8011b16:	68f2      	ldr	r2, [r6, #12]
 8011b18:	f106 0110 	add.w	r1, r6, #16
 8011b1c:	4638      	mov	r0, r7
 8011b1e:	f004 fb05 	bl	801612c <ucdr_serialize_sequence_uint8_t>
 8011b22:	4605      	mov	r5, r0
 8011b24:	e7e3      	b.n	8011aee <uxr_serialize_CREATE_Payload+0xe6>
 8011b26:	bf00      	nop

08011b28 <uxr_deserialize_GET_INFO_Payload>:
 8011b28:	b570      	push	{r4, r5, r6, lr}
 8011b2a:	2202      	movs	r2, #2
 8011b2c:	4605      	mov	r5, r0
 8011b2e:	460e      	mov	r6, r1
 8011b30:	f004 fa6c 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011b34:	2202      	movs	r2, #2
 8011b36:	18b1      	adds	r1, r6, r2
 8011b38:	4604      	mov	r4, r0
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f004 fa66 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011b40:	1d31      	adds	r1, r6, #4
 8011b42:	4004      	ands	r4, r0
 8011b44:	4628      	mov	r0, r5
 8011b46:	f7f9 fc47 	bl	800b3d8 <ucdr_deserialize_uint32_t>
 8011b4a:	b2e4      	uxtb	r4, r4
 8011b4c:	4020      	ands	r0, r4
 8011b4e:	bd70      	pop	{r4, r5, r6, pc}

08011b50 <uxr_serialize_DELETE_Payload>:
 8011b50:	b570      	push	{r4, r5, r6, lr}
 8011b52:	2202      	movs	r2, #2
 8011b54:	4605      	mov	r5, r0
 8011b56:	460e      	mov	r6, r1
 8011b58:	f004 f9f4 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011b5c:	2202      	movs	r2, #2
 8011b5e:	4604      	mov	r4, r0
 8011b60:	18b1      	adds	r1, r6, r2
 8011b62:	4628      	mov	r0, r5
 8011b64:	f004 f9ee 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011b68:	4020      	ands	r0, r4
 8011b6a:	b2c0      	uxtb	r0, r0
 8011b6c:	bd70      	pop	{r4, r5, r6, pc}
 8011b6e:	bf00      	nop

08011b70 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b74:	4605      	mov	r5, r0
 8011b76:	460e      	mov	r6, r1
 8011b78:	f7f9 f8fe 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011b7c:	1c71      	adds	r1, r6, #1
 8011b7e:	4604      	mov	r4, r0
 8011b80:	4628      	mov	r0, r5
 8011b82:	f7f9 f8f9 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011b86:	2204      	movs	r2, #4
 8011b88:	18b1      	adds	r1, r6, r2
 8011b8a:	4680      	mov	r8, r0
 8011b8c:	4628      	mov	r0, r5
 8011b8e:	f004 fa3d 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011b92:	f106 0108 	add.w	r1, r6, #8
 8011b96:	4607      	mov	r7, r0
 8011b98:	2202      	movs	r2, #2
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	f004 fa36 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011ba0:	ea04 0308 	and.w	r3, r4, r8
 8011ba4:	b2db      	uxtb	r3, r3
 8011ba6:	ea03 0407 	and.w	r4, r3, r7
 8011baa:	2202      	movs	r2, #2
 8011bac:	4607      	mov	r7, r0
 8011bae:	f106 010a 	add.w	r1, r6, #10
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	f004 fa2a 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011bb8:	f106 010c 	add.w	r1, r6, #12
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	461d      	mov	r5, r3
 8011bc2:	f7f9 f8ab 	bl	800ad1c <ucdr_deserialize_bool>
 8011bc6:	403c      	ands	r4, r7
 8011bc8:	4025      	ands	r5, r4
 8011bca:	4028      	ands	r0, r5
 8011bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011bd0 <uxr_deserialize_STATUS_Payload>:
 8011bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd4:	2202      	movs	r2, #2
 8011bd6:	4606      	mov	r6, r0
 8011bd8:	460f      	mov	r7, r1
 8011bda:	f004 fa17 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011bde:	2202      	movs	r2, #2
 8011be0:	18b9      	adds	r1, r7, r2
 8011be2:	4605      	mov	r5, r0
 8011be4:	4630      	mov	r0, r6
 8011be6:	f004 fa11 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011bea:	1d39      	adds	r1, r7, #4
 8011bec:	4680      	mov	r8, r0
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f7f9 f8c2 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011bf4:	1d79      	adds	r1, r7, #5
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	f7f9 f8bd 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011bfe:	ea05 0508 	and.w	r5, r5, r8
 8011c02:	402c      	ands	r4, r5
 8011c04:	4020      	ands	r0, r4
 8011c06:	b2c0      	uxtb	r0, r0
 8011c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c0c <uxr_serialize_INFO_Payload>:
 8011c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c10:	2202      	movs	r2, #2
 8011c12:	460c      	mov	r4, r1
 8011c14:	4605      	mov	r5, r0
 8011c16:	f004 f995 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011c1a:	2202      	movs	r2, #2
 8011c1c:	18a1      	adds	r1, r4, r2
 8011c1e:	4680      	mov	r8, r0
 8011c20:	4628      	mov	r0, r5
 8011c22:	f004 f98f 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011c26:	7921      	ldrb	r1, [r4, #4]
 8011c28:	4607      	mov	r7, r0
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f7f9 f88e 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011c30:	7961      	ldrb	r1, [r4, #5]
 8011c32:	4606      	mov	r6, r0
 8011c34:	4628      	mov	r0, r5
 8011c36:	f7f9 f889 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011c3a:	ea08 0807 	and.w	r8, r8, r7
 8011c3e:	ea06 0608 	and.w	r6, r6, r8
 8011c42:	4006      	ands	r6, r0
 8011c44:	7a21      	ldrb	r1, [r4, #8]
 8011c46:	4628      	mov	r0, r5
 8011c48:	f7f9 f852 	bl	800acf0 <ucdr_serialize_bool>
 8011c4c:	7a23      	ldrb	r3, [r4, #8]
 8011c4e:	b2f7      	uxtb	r7, r6
 8011c50:	4606      	mov	r6, r0
 8011c52:	b96b      	cbnz	r3, 8011c70 <uxr_serialize_INFO_Payload+0x64>
 8011c54:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f7f9 f849 	bl	800acf0 <ucdr_serialize_bool>
 8011c5e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011c62:	4030      	ands	r0, r6
 8011c64:	b2c6      	uxtb	r6, r0
 8011c66:	b983      	cbnz	r3, 8011c8a <uxr_serialize_INFO_Payload+0x7e>
 8011c68:	ea06 0007 	and.w	r0, r6, r7
 8011c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c70:	7b21      	ldrb	r1, [r4, #12]
 8011c72:	4628      	mov	r0, r5
 8011c74:	f7f9 f86a 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011c78:	b188      	cbz	r0, 8011c9e <uxr_serialize_INFO_Payload+0x92>
 8011c7a:	f104 010c 	add.w	r1, r4, #12
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f7ff faf2 	bl	8011268 <uxr_serialize_ObjectVariant.part.0>
 8011c84:	4030      	ands	r0, r6
 8011c86:	b2c6      	uxtb	r6, r0
 8011c88:	e7e4      	b.n	8011c54 <uxr_serialize_INFO_Payload+0x48>
 8011c8a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011c8e:	4628      	mov	r0, r5
 8011c90:	f7ff fdb2 	bl	80117f8 <uxr_serialize_ActivityInfoVariant>
 8011c94:	4006      	ands	r6, r0
 8011c96:	ea06 0007 	and.w	r0, r6, r7
 8011c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	e7d8      	b.n	8011c54 <uxr_serialize_INFO_Payload+0x48>
 8011ca2:	bf00      	nop

08011ca4 <uxr_serialize_READ_DATA_Payload>:
 8011ca4:	b570      	push	{r4, r5, r6, lr}
 8011ca6:	2202      	movs	r2, #2
 8011ca8:	4605      	mov	r5, r0
 8011caa:	460e      	mov	r6, r1
 8011cac:	f004 f94a 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011cb0:	2202      	movs	r2, #2
 8011cb2:	18b1      	adds	r1, r6, r2
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f004 f944 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011cbc:	1d31      	adds	r1, r6, #4
 8011cbe:	4004      	ands	r4, r0
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	f7ff fe5d 	bl	8011980 <uxr_serialize_ReadSpecification>
 8011cc6:	b2e4      	uxtb	r4, r4
 8011cc8:	4020      	ands	r0, r4
 8011cca:	bd70      	pop	{r4, r5, r6, pc}

08011ccc <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011ccc:	b570      	push	{r4, r5, r6, lr}
 8011cce:	2202      	movs	r2, #2
 8011cd0:	4605      	mov	r5, r0
 8011cd2:	460e      	mov	r6, r1
 8011cd4:	f004 f936 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011cd8:	2202      	movs	r2, #2
 8011cda:	4604      	mov	r4, r0
 8011cdc:	18b1      	adds	r1, r6, r2
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f004 f930 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011ce4:	4020      	ands	r0, r4
 8011ce6:	b2c0      	uxtb	r0, r0
 8011ce8:	bd70      	pop	{r4, r5, r6, pc}
 8011cea:	bf00      	nop

08011cec <uxr_serialize_ACKNACK_Payload>:
 8011cec:	b570      	push	{r4, r5, r6, lr}
 8011cee:	460c      	mov	r4, r1
 8011cf0:	460e      	mov	r6, r1
 8011cf2:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011cf6:	4605      	mov	r5, r0
 8011cf8:	f7f9 f854 	bl	800ada4 <ucdr_serialize_uint16_t>
 8011cfc:	2202      	movs	r2, #2
 8011cfe:	4621      	mov	r1, r4
 8011d00:	4604      	mov	r4, r0
 8011d02:	4628      	mov	r0, r5
 8011d04:	f004 f91e 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011d08:	7931      	ldrb	r1, [r6, #4]
 8011d0a:	4004      	ands	r4, r0
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f7f9 f81d 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011d12:	b2e4      	uxtb	r4, r4
 8011d14:	4020      	ands	r0, r4
 8011d16:	bd70      	pop	{r4, r5, r6, pc}

08011d18 <uxr_deserialize_ACKNACK_Payload>:
 8011d18:	b570      	push	{r4, r5, r6, lr}
 8011d1a:	4605      	mov	r5, r0
 8011d1c:	460e      	mov	r6, r1
 8011d1e:	f7f9 f941 	bl	800afa4 <ucdr_deserialize_uint16_t>
 8011d22:	2202      	movs	r2, #2
 8011d24:	18b1      	adds	r1, r6, r2
 8011d26:	4604      	mov	r4, r0
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f004 f96f 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011d2e:	1d31      	adds	r1, r6, #4
 8011d30:	4004      	ands	r4, r0
 8011d32:	4628      	mov	r0, r5
 8011d34:	f7f9 f820 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011d38:	b2e4      	uxtb	r4, r4
 8011d3a:	4020      	ands	r0, r4
 8011d3c:	bd70      	pop	{r4, r5, r6, pc}
 8011d3e:	bf00      	nop

08011d40 <uxr_serialize_HEARTBEAT_Payload>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	460d      	mov	r5, r1
 8011d44:	8809      	ldrh	r1, [r1, #0]
 8011d46:	4606      	mov	r6, r0
 8011d48:	f7f9 f82c 	bl	800ada4 <ucdr_serialize_uint16_t>
 8011d4c:	8869      	ldrh	r1, [r5, #2]
 8011d4e:	4604      	mov	r4, r0
 8011d50:	4630      	mov	r0, r6
 8011d52:	f7f9 f827 	bl	800ada4 <ucdr_serialize_uint16_t>
 8011d56:	7929      	ldrb	r1, [r5, #4]
 8011d58:	4004      	ands	r4, r0
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f7f8 fff6 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011d60:	b2e4      	uxtb	r4, r4
 8011d62:	4020      	ands	r0, r4
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	bf00      	nop

08011d68 <uxr_deserialize_HEARTBEAT_Payload>:
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	4605      	mov	r5, r0
 8011d6c:	460e      	mov	r6, r1
 8011d6e:	f7f9 f919 	bl	800afa4 <ucdr_deserialize_uint16_t>
 8011d72:	1cb1      	adds	r1, r6, #2
 8011d74:	4604      	mov	r4, r0
 8011d76:	4628      	mov	r0, r5
 8011d78:	f7f9 f914 	bl	800afa4 <ucdr_deserialize_uint16_t>
 8011d7c:	1d31      	adds	r1, r6, #4
 8011d7e:	4004      	ands	r4, r0
 8011d80:	4628      	mov	r0, r5
 8011d82:	f7f8 fff9 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011d86:	b2e4      	uxtb	r4, r4
 8011d88:	4020      	ands	r0, r4
 8011d8a:	bd70      	pop	{r4, r5, r6, pc}

08011d8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d90:	4605      	mov	r5, r0
 8011d92:	460e      	mov	r6, r1
 8011d94:	f7f9 fea2 	bl	800badc <ucdr_deserialize_int32_t>
 8011d98:	1d31      	adds	r1, r6, #4
 8011d9a:	4607      	mov	r7, r0
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f7f9 fb1b 	bl	800b3d8 <ucdr_deserialize_uint32_t>
 8011da2:	f106 0108 	add.w	r1, r6, #8
 8011da6:	4680      	mov	r8, r0
 8011da8:	4628      	mov	r0, r5
 8011daa:	f7f9 fe97 	bl	800badc <ucdr_deserialize_int32_t>
 8011dae:	f106 010c 	add.w	r1, r6, #12
 8011db2:	4604      	mov	r4, r0
 8011db4:	4628      	mov	r0, r5
 8011db6:	f7f9 fb0f 	bl	800b3d8 <ucdr_deserialize_uint32_t>
 8011dba:	ea07 0708 	and.w	r7, r7, r8
 8011dbe:	403c      	ands	r4, r7
 8011dc0:	f106 0110 	add.w	r1, r6, #16
 8011dc4:	4004      	ands	r4, r0
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	f7f9 fe88 	bl	800badc <ucdr_deserialize_int32_t>
 8011dcc:	f106 0114 	add.w	r1, r6, #20
 8011dd0:	4607      	mov	r7, r0
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	f7f9 fb00 	bl	800b3d8 <ucdr_deserialize_uint32_t>
 8011dd8:	b2e4      	uxtb	r4, r4
 8011dda:	403c      	ands	r4, r7
 8011ddc:	4020      	ands	r0, r4
 8011dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de2:	bf00      	nop

08011de4 <uxr_serialize_SampleIdentity>:
 8011de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de8:	220c      	movs	r2, #12
 8011dea:	4604      	mov	r4, r0
 8011dec:	460d      	mov	r5, r1
 8011dee:	f004 f8a9 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011df2:	2203      	movs	r2, #3
 8011df4:	f105 010c 	add.w	r1, r5, #12
 8011df8:	4607      	mov	r7, r0
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f004 f8a2 	bl	8015f44 <ucdr_serialize_array_uint8_t>
 8011e00:	7be9      	ldrb	r1, [r5, #15]
 8011e02:	4680      	mov	r8, r0
 8011e04:	4620      	mov	r0, r4
 8011e06:	f7f8 ffa1 	bl	800ad4c <ucdr_serialize_uint8_t>
 8011e0a:	6929      	ldr	r1, [r5, #16]
 8011e0c:	4606      	mov	r6, r0
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f7f9 fdcc 	bl	800b9ac <ucdr_serialize_int32_t>
 8011e14:	6969      	ldr	r1, [r5, #20]
 8011e16:	4603      	mov	r3, r0
 8011e18:	4620      	mov	r0, r4
 8011e1a:	ea07 0708 	and.w	r7, r7, r8
 8011e1e:	461c      	mov	r4, r3
 8011e20:	f7f9 f9aa 	bl	800b178 <ucdr_serialize_uint32_t>
 8011e24:	403e      	ands	r6, r7
 8011e26:	4034      	ands	r4, r6
 8011e28:	4020      	ands	r0, r4
 8011e2a:	b2c0      	uxtb	r0, r0
 8011e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e30 <uxr_deserialize_SampleIdentity>:
 8011e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e34:	220c      	movs	r2, #12
 8011e36:	4604      	mov	r4, r0
 8011e38:	460d      	mov	r5, r1
 8011e3a:	f004 f8e7 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011e3e:	2203      	movs	r2, #3
 8011e40:	f105 010c 	add.w	r1, r5, #12
 8011e44:	4607      	mov	r7, r0
 8011e46:	4620      	mov	r0, r4
 8011e48:	f004 f8e0 	bl	801600c <ucdr_deserialize_array_uint8_t>
 8011e4c:	f105 010f 	add.w	r1, r5, #15
 8011e50:	4680      	mov	r8, r0
 8011e52:	4620      	mov	r0, r4
 8011e54:	f7f8 ff90 	bl	800ad78 <ucdr_deserialize_uint8_t>
 8011e58:	f105 0110 	add.w	r1, r5, #16
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f7f9 fe3c 	bl	800badc <ucdr_deserialize_int32_t>
 8011e64:	f105 0114 	add.w	r1, r5, #20
 8011e68:	4603      	mov	r3, r0
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	ea07 0708 	and.w	r7, r7, r8
 8011e70:	461c      	mov	r4, r3
 8011e72:	f7f9 fab1 	bl	800b3d8 <ucdr_deserialize_uint32_t>
 8011e76:	403e      	ands	r6, r7
 8011e78:	4034      	ands	r4, r6
 8011e7a:	4020      	ands	r0, r4
 8011e7c:	b2c0      	uxtb	r0, r0
 8011e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e82:	bf00      	nop

08011e84 <rcl_client_get_rmw_handle>:
 8011e84:	b118      	cbz	r0, 8011e8e <rcl_client_get_rmw_handle+0xa>
 8011e86:	6800      	ldr	r0, [r0, #0]
 8011e88:	b108      	cbz	r0, 8011e8e <rcl_client_get_rmw_handle+0xa>
 8011e8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011e8e:	4770      	bx	lr

08011e90 <rcl_send_request>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	b1e8      	cbz	r0, 8011ed2 <rcl_send_request+0x42>
 8011e96:	4604      	mov	r4, r0
 8011e98:	6800      	ldr	r0, [r0, #0]
 8011e9a:	b1d0      	cbz	r0, 8011ed2 <rcl_send_request+0x42>
 8011e9c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011ea0:	b1bb      	cbz	r3, 8011ed2 <rcl_send_request+0x42>
 8011ea2:	460e      	mov	r6, r1
 8011ea4:	b1d1      	cbz	r1, 8011edc <rcl_send_request+0x4c>
 8011ea6:	4615      	mov	r5, r2
 8011ea8:	b1c2      	cbz	r2, 8011edc <rcl_send_request+0x4c>
 8011eaa:	2105      	movs	r1, #5
 8011eac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011eb0:	f002 fda6 	bl	8014a00 <__atomic_load_8>
 8011eb4:	6823      	ldr	r3, [r4, #0]
 8011eb6:	e9c5 0100 	strd	r0, r1, [r5]
 8011eba:	462a      	mov	r2, r5
 8011ebc:	4631      	mov	r1, r6
 8011ebe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011ec2:	f003 fc91 	bl	80157e8 <rmw_send_request>
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	b160      	cbz	r0, 8011ee4 <rcl_send_request+0x54>
 8011eca:	2601      	movs	r6, #1
 8011ecc:	4630      	mov	r0, r6
 8011ece:	b002      	add	sp, #8
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	b002      	add	sp, #8
 8011eda:	bd70      	pop	{r4, r5, r6, pc}
 8011edc:	260b      	movs	r6, #11
 8011ede:	4630      	mov	r0, r6
 8011ee0:	b002      	add	sp, #8
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}
 8011ee4:	6820      	ldr	r0, [r4, #0]
 8011ee6:	2105      	movs	r1, #5
 8011ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011eec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011ef0:	9100      	str	r1, [sp, #0]
 8011ef2:	f002 fdf1 	bl	8014ad8 <__atomic_exchange_8>
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	b002      	add	sp, #8
 8011efa:	bd70      	pop	{r4, r5, r6, pc}
 8011efc:	0000      	movs	r0, r0
	...

08011f00 <rcl_take_response>:
 8011f00:	b570      	push	{r4, r5, r6, lr}
 8011f02:	468e      	mov	lr, r1
 8011f04:	460c      	mov	r4, r1
 8011f06:	4616      	mov	r6, r2
 8011f08:	4605      	mov	r5, r0
 8011f0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f0e:	b08c      	sub	sp, #48	@ 0x30
 8011f10:	f10d 0c18 	add.w	ip, sp, #24
 8011f14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011f1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011f20:	b35d      	cbz	r5, 8011f7a <rcl_take_response+0x7a>
 8011f22:	682b      	ldr	r3, [r5, #0]
 8011f24:	b34b      	cbz	r3, 8011f7a <rcl_take_response+0x7a>
 8011f26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011f2a:	b330      	cbz	r0, 8011f7a <rcl_take_response+0x7a>
 8011f2c:	b346      	cbz	r6, 8011f80 <rcl_take_response+0x80>
 8011f2e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011f88 <rcl_take_response+0x88>
 8011f32:	2300      	movs	r3, #0
 8011f34:	f88d 3007 	strb.w	r3, [sp, #7]
 8011f38:	4632      	mov	r2, r6
 8011f3a:	f10d 0307 	add.w	r3, sp, #7
 8011f3e:	a902      	add	r1, sp, #8
 8011f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f48:	f003 fd56 	bl	80159f8 <rmw_take_response>
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	b9c8      	cbnz	r0, 8011f84 <rcl_take_response+0x84>
 8011f50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f54:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011f58:	2a00      	cmp	r2, #0
 8011f5a:	bf08      	it	eq
 8011f5c:	461d      	moveq	r5, r3
 8011f5e:	f10d 0e18 	add.w	lr, sp, #24
 8011f62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f66:	46a4      	mov	ip, r4
 8011f68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011f70:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011f74:	4628      	mov	r0, r5
 8011f76:	b00c      	add	sp, #48	@ 0x30
 8011f78:	bd70      	pop	{r4, r5, r6, pc}
 8011f7a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011f7e:	e7ee      	b.n	8011f5e <rcl_take_response+0x5e>
 8011f80:	250b      	movs	r5, #11
 8011f82:	e7ec      	b.n	8011f5e <rcl_take_response+0x5e>
 8011f84:	2501      	movs	r5, #1
 8011f86:	e7ea      	b.n	8011f5e <rcl_take_response+0x5e>
	...

08011f90 <rcl_client_is_valid>:
 8011f90:	b130      	cbz	r0, 8011fa0 <rcl_client_is_valid+0x10>
 8011f92:	6800      	ldr	r0, [r0, #0]
 8011f94:	b120      	cbz	r0, 8011fa0 <rcl_client_is_valid+0x10>
 8011f96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011f9a:	3800      	subs	r0, #0
 8011f9c:	bf18      	it	ne
 8011f9e:	2001      	movne	r0, #1
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop

08011fa4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011fa4:	280b      	cmp	r0, #11
 8011fa6:	dc0d      	bgt.n	8011fc4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	db09      	blt.n	8011fc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011fac:	280b      	cmp	r0, #11
 8011fae:	d807      	bhi.n	8011fc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011fb0:	e8df f000 	tbb	[pc, r0]
 8011fb4:	07060607 	.word	0x07060607
 8011fb8:	06060606 	.word	0x06060606
 8011fbc:	07070606 	.word	0x07070606
 8011fc0:	2001      	movs	r0, #1
 8011fc2:	4770      	bx	lr
 8011fc4:	28cb      	cmp	r0, #203	@ 0xcb
 8011fc6:	bf18      	it	ne
 8011fc8:	2001      	movne	r0, #1
 8011fca:	4770      	bx	lr

08011fcc <rcl_get_zero_initialized_context>:
 8011fcc:	4a03      	ldr	r2, [pc, #12]	@ (8011fdc <rcl_get_zero_initialized_context+0x10>)
 8011fce:	4603      	mov	r3, r0
 8011fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	4770      	bx	lr
 8011fdc:	0801914c 	.word	0x0801914c

08011fe0 <rcl_context_is_valid>:
 8011fe0:	b118      	cbz	r0, 8011fea <rcl_context_is_valid+0xa>
 8011fe2:	6840      	ldr	r0, [r0, #4]
 8011fe4:	3800      	subs	r0, #0
 8011fe6:	bf18      	it	ne
 8011fe8:	2001      	movne	r0, #1
 8011fea:	4770      	bx	lr

08011fec <__cleanup_context>:
 8011fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	6800      	ldr	r0, [r0, #0]
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	6073      	str	r3, [r6, #4]
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	d049      	beq.n	8012090 <__cleanup_context+0xa4>
 8011ffc:	6947      	ldr	r7, [r0, #20]
 8011ffe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012002:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012006:	b137      	cbz	r7, 8012016 <__cleanup_context+0x2a>
 8012008:	3014      	adds	r0, #20
 801200a:	f7fa f8b9 	bl	800c180 <rcl_init_options_fini>
 801200e:	4607      	mov	r7, r0
 8012010:	2800      	cmp	r0, #0
 8012012:	d144      	bne.n	801209e <__cleanup_context+0xb2>
 8012014:	6830      	ldr	r0, [r6, #0]
 8012016:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012018:	b143      	cbz	r3, 801202c <__cleanup_context+0x40>
 801201a:	3028      	adds	r0, #40	@ 0x28
 801201c:	f7fb fc7c 	bl	800d918 <rmw_context_fini>
 8012020:	b118      	cbz	r0, 801202a <__cleanup_context+0x3e>
 8012022:	2f00      	cmp	r7, #0
 8012024:	d03e      	beq.n	80120a4 <__cleanup_context+0xb8>
 8012026:	f7fb f9af 	bl	800d388 <rcutils_reset_error>
 801202a:	6830      	ldr	r0, [r6, #0]
 801202c:	6a03      	ldr	r3, [r0, #32]
 801202e:	b1db      	cbz	r3, 8012068 <__cleanup_context+0x7c>
 8012030:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012034:	2a01      	cmp	r2, #1
 8012036:	f17c 0100 	sbcs.w	r1, ip, #0
 801203a:	db11      	blt.n	8012060 <__cleanup_context+0x74>
 801203c:	2400      	movs	r4, #0
 801203e:	4625      	mov	r5, r4
 8012040:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012044:	4649      	mov	r1, r9
 8012046:	b1b8      	cbz	r0, 8012078 <__cleanup_context+0x8c>
 8012048:	47c0      	blx	r8
 801204a:	6833      	ldr	r3, [r6, #0]
 801204c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012050:	3401      	adds	r4, #1
 8012052:	f145 0500 	adc.w	r5, r5, #0
 8012056:	4294      	cmp	r4, r2
 8012058:	eb75 010c 	sbcs.w	r1, r5, ip
 801205c:	6a1b      	ldr	r3, [r3, #32]
 801205e:	dbef      	blt.n	8012040 <__cleanup_context+0x54>
 8012060:	4618      	mov	r0, r3
 8012062:	4649      	mov	r1, r9
 8012064:	47c0      	blx	r8
 8012066:	6830      	ldr	r0, [r6, #0]
 8012068:	4649      	mov	r1, r9
 801206a:	47c0      	blx	r8
 801206c:	2300      	movs	r3, #0
 801206e:	e9c6 3300 	strd	r3, r3, [r6]
 8012072:	4638      	mov	r0, r7
 8012074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012078:	3401      	adds	r4, #1
 801207a:	f145 0500 	adc.w	r5, r5, #0
 801207e:	4294      	cmp	r4, r2
 8012080:	eb75 010c 	sbcs.w	r1, r5, ip
 8012084:	dbdc      	blt.n	8012040 <__cleanup_context+0x54>
 8012086:	4618      	mov	r0, r3
 8012088:	4649      	mov	r1, r9
 801208a:	47c0      	blx	r8
 801208c:	6830      	ldr	r0, [r6, #0]
 801208e:	e7eb      	b.n	8012068 <__cleanup_context+0x7c>
 8012090:	4607      	mov	r7, r0
 8012092:	2300      	movs	r3, #0
 8012094:	e9c6 3300 	strd	r3, r3, [r6]
 8012098:	4638      	mov	r0, r7
 801209a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801209e:	f7fb f973 	bl	800d388 <rcutils_reset_error>
 80120a2:	e7b7      	b.n	8012014 <__cleanup_context+0x28>
 80120a4:	f7ff ff7e 	bl	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 80120a8:	4607      	mov	r7, r0
 80120aa:	e7bc      	b.n	8012026 <__cleanup_context+0x3a>

080120ac <rcl_init>:
 80120ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120b0:	1e05      	subs	r5, r0, #0
 80120b2:	b09e      	sub	sp, #120	@ 0x78
 80120b4:	460e      	mov	r6, r1
 80120b6:	4690      	mov	r8, r2
 80120b8:	461f      	mov	r7, r3
 80120ba:	f340 809c 	ble.w	80121f6 <rcl_init+0x14a>
 80120be:	2900      	cmp	r1, #0
 80120c0:	f000 809c 	beq.w	80121fc <rcl_init+0x150>
 80120c4:	f1a1 0e04 	sub.w	lr, r1, #4
 80120c8:	f04f 0c00 	mov.w	ip, #0
 80120cc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80120d0:	f10c 0c01 	add.w	ip, ip, #1
 80120d4:	2c00      	cmp	r4, #0
 80120d6:	f000 8091 	beq.w	80121fc <rcl_init+0x150>
 80120da:	4565      	cmp	r5, ip
 80120dc:	d1f6      	bne.n	80120cc <rcl_init+0x20>
 80120de:	f1b8 0f00 	cmp.w	r8, #0
 80120e2:	f000 808b 	beq.w	80121fc <rcl_init+0x150>
 80120e6:	f8d8 4000 	ldr.w	r4, [r8]
 80120ea:	2c00      	cmp	r4, #0
 80120ec:	f000 8086 	beq.w	80121fc <rcl_init+0x150>
 80120f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120f2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80120f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120fa:	6823      	ldr	r3, [r4, #0]
 80120fc:	f8cc 3000 	str.w	r3, [ip]
 8012100:	a819      	add	r0, sp, #100	@ 0x64
 8012102:	f7fb f91b 	bl	800d33c <rcutils_allocator_is_valid>
 8012106:	2800      	cmp	r0, #0
 8012108:	d078      	beq.n	80121fc <rcl_init+0x150>
 801210a:	2f00      	cmp	r7, #0
 801210c:	d076      	beq.n	80121fc <rcl_init+0x150>
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d178      	bne.n	8012206 <rcl_init+0x15a>
 8012114:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012118:	2178      	movs	r1, #120	@ 0x78
 801211a:	2001      	movs	r0, #1
 801211c:	4798      	blx	r3
 801211e:	4604      	mov	r4, r0
 8012120:	6038      	str	r0, [r7, #0]
 8012122:	2800      	cmp	r0, #0
 8012124:	f000 80b6 	beq.w	8012294 <rcl_init+0x1e8>
 8012128:	a802      	add	r0, sp, #8
 801212a:	f002 ffb9 	bl	80150a0 <rmw_get_zero_initialized_context>
 801212e:	a902      	add	r1, sp, #8
 8012130:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012134:	2250      	movs	r2, #80	@ 0x50
 8012136:	ac19      	add	r4, sp, #100	@ 0x64
 8012138:	f005 fe07 	bl	8017d4a <memcpy>
 801213c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801213e:	f8d7 e000 	ldr.w	lr, [r7]
 8012142:	46f4      	mov	ip, lr
 8012144:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012148:	6823      	ldr	r3, [r4, #0]
 801214a:	f8cc 3000 	str.w	r3, [ip]
 801214e:	f10e 0114 	add.w	r1, lr, #20
 8012152:	4640      	mov	r0, r8
 8012154:	f7fa f83e 	bl	800c1d4 <rcl_init_options_copy>
 8012158:	4604      	mov	r4, r0
 801215a:	2800      	cmp	r0, #0
 801215c:	d144      	bne.n	80121e8 <rcl_init+0x13c>
 801215e:	f8d7 9000 	ldr.w	r9, [r7]
 8012162:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012166:	f8c9 0020 	str.w	r0, [r9, #32]
 801216a:	f8c9 5018 	str.w	r5, [r9, #24]
 801216e:	f8c9 801c 	str.w	r8, [r9, #28]
 8012172:	2d00      	cmp	r5, #0
 8012174:	d04e      	beq.n	8012214 <rcl_init+0x168>
 8012176:	2e00      	cmp	r6, #0
 8012178:	d04c      	beq.n	8012214 <rcl_init+0x168>
 801217a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801217e:	2104      	movs	r1, #4
 8012180:	4628      	mov	r0, r5
 8012182:	4798      	blx	r3
 8012184:	f8c9 0020 	str.w	r0, [r9, #32]
 8012188:	f8d7 9000 	ldr.w	r9, [r7]
 801218c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012190:	46ca      	mov	sl, r9
 8012192:	b343      	cbz	r3, 80121e6 <rcl_init+0x13a>
 8012194:	2d01      	cmp	r5, #1
 8012196:	f178 0300 	sbcs.w	r3, r8, #0
 801219a:	db3b      	blt.n	8012214 <rcl_init+0x168>
 801219c:	2400      	movs	r4, #0
 801219e:	3e04      	subs	r6, #4
 80121a0:	46a1      	mov	r9, r4
 80121a2:	e00b      	b.n	80121bc <rcl_init+0x110>
 80121a4:	6831      	ldr	r1, [r6, #0]
 80121a6:	f005 fdd0 	bl	8017d4a <memcpy>
 80121aa:	3401      	adds	r4, #1
 80121ac:	f149 0900 	adc.w	r9, r9, #0
 80121b0:	45c8      	cmp	r8, r9
 80121b2:	bf08      	it	eq
 80121b4:	42a5      	cmpeq	r5, r4
 80121b6:	d02b      	beq.n	8012210 <rcl_init+0x164>
 80121b8:	f8d7 a000 	ldr.w	sl, [r7]
 80121bc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80121c0:	f7ee f838 	bl	8000234 <strlen>
 80121c4:	1c42      	adds	r2, r0, #1
 80121c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80121c8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80121ca:	f8da a020 	ldr.w	sl, [sl, #32]
 80121ce:	9201      	str	r2, [sp, #4]
 80121d0:	4610      	mov	r0, r2
 80121d2:	4798      	blx	r3
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80121da:	6a1b      	ldr	r3, [r3, #32]
 80121dc:	9a01      	ldr	r2, [sp, #4]
 80121de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d1de      	bne.n	80121a4 <rcl_init+0xf8>
 80121e6:	240a      	movs	r4, #10
 80121e8:	4638      	mov	r0, r7
 80121ea:	f7ff feff 	bl	8011fec <__cleanup_context>
 80121ee:	4620      	mov	r0, r4
 80121f0:	b01e      	add	sp, #120	@ 0x78
 80121f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121f6:	2900      	cmp	r1, #0
 80121f8:	f43f af71 	beq.w	80120de <rcl_init+0x32>
 80121fc:	240b      	movs	r4, #11
 80121fe:	4620      	mov	r0, r4
 8012200:	b01e      	add	sp, #120	@ 0x78
 8012202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012206:	2464      	movs	r4, #100	@ 0x64
 8012208:	4620      	mov	r0, r4
 801220a:	b01e      	add	sp, #120	@ 0x78
 801220c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012210:	f8d7 9000 	ldr.w	r9, [r7]
 8012214:	4926      	ldr	r1, [pc, #152]	@ (80122b0 <rcl_init+0x204>)
 8012216:	680b      	ldr	r3, [r1, #0]
 8012218:	3301      	adds	r3, #1
 801221a:	d036      	beq.n	801228a <rcl_init+0x1de>
 801221c:	600b      	str	r3, [r1, #0]
 801221e:	461a      	mov	r2, r3
 8012220:	2400      	movs	r4, #0
 8012222:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012226:	607b      	str	r3, [r7, #4]
 8012228:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801222a:	3301      	adds	r3, #1
 801222c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012230:	d034      	beq.n	801229c <rcl_init+0x1f0>
 8012232:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012236:	b93b      	cbnz	r3, 8012248 <rcl_init+0x19c>
 8012238:	3030      	adds	r0, #48	@ 0x30
 801223a:	f000 f83b 	bl	80122b4 <rcl_get_localhost_only>
 801223e:	4604      	mov	r4, r0
 8012240:	2800      	cmp	r0, #0
 8012242:	d1d1      	bne.n	80121e8 <rcl_init+0x13c>
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	6958      	ldr	r0, [r3, #20]
 8012248:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801224a:	aa18      	add	r2, sp, #96	@ 0x60
 801224c:	a917      	add	r1, sp, #92	@ 0x5c
 801224e:	f001 f871 	bl	8013334 <rcl_validate_enclave_name>
 8012252:	4604      	mov	r4, r0
 8012254:	2800      	cmp	r0, #0
 8012256:	d1c7      	bne.n	80121e8 <rcl_init+0x13c>
 8012258:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801225a:	b9eb      	cbnz	r3, 8012298 <rcl_init+0x1ec>
 801225c:	6839      	ldr	r1, [r7, #0]
 801225e:	694b      	ldr	r3, [r1, #20]
 8012260:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012262:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012266:	f000 fb3f 	bl	80128e8 <rcl_get_security_options_from_environment>
 801226a:	4604      	mov	r4, r0
 801226c:	2800      	cmp	r0, #0
 801226e:	d1bb      	bne.n	80121e8 <rcl_init+0x13c>
 8012270:	6839      	ldr	r1, [r7, #0]
 8012272:	6948      	ldr	r0, [r1, #20]
 8012274:	3128      	adds	r1, #40	@ 0x28
 8012276:	3018      	adds	r0, #24
 8012278:	f7fb fa18 	bl	800d6ac <rmw_init>
 801227c:	4604      	mov	r4, r0
 801227e:	2800      	cmp	r0, #0
 8012280:	d0bd      	beq.n	80121fe <rcl_init+0x152>
 8012282:	f7ff fe8f 	bl	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012286:	4604      	mov	r4, r0
 8012288:	e7ae      	b.n	80121e8 <rcl_init+0x13c>
 801228a:	2201      	movs	r2, #1
 801228c:	461c      	mov	r4, r3
 801228e:	600a      	str	r2, [r1, #0]
 8012290:	4613      	mov	r3, r2
 8012292:	e7c6      	b.n	8012222 <rcl_init+0x176>
 8012294:	240a      	movs	r4, #10
 8012296:	e7b2      	b.n	80121fe <rcl_init+0x152>
 8012298:	2401      	movs	r4, #1
 801229a:	e7a5      	b.n	80121e8 <rcl_init+0x13c>
 801229c:	3024      	adds	r0, #36	@ 0x24
 801229e:	f004 fcf1 	bl	8016c84 <rcl_get_default_domain_id>
 80122a2:	4604      	mov	r4, r0
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d19f      	bne.n	80121e8 <rcl_init+0x13c>
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	6958      	ldr	r0, [r3, #20]
 80122ac:	e7c1      	b.n	8012232 <rcl_init+0x186>
 80122ae:	bf00      	nop
 80122b0:	2000ae70 	.word	0x2000ae70

080122b4 <rcl_get_localhost_only>:
 80122b4:	b510      	push	{r4, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	2300      	movs	r3, #0
 80122ba:	9301      	str	r3, [sp, #4]
 80122bc:	b1b8      	cbz	r0, 80122ee <rcl_get_localhost_only+0x3a>
 80122be:	4604      	mov	r4, r0
 80122c0:	a901      	add	r1, sp, #4
 80122c2:	480c      	ldr	r0, [pc, #48]	@ (80122f4 <rcl_get_localhost_only+0x40>)
 80122c4:	f002 fc40 	bl	8014b48 <rcutils_get_env>
 80122c8:	b110      	cbz	r0, 80122d0 <rcl_get_localhost_only+0x1c>
 80122ca:	2001      	movs	r0, #1
 80122cc:	b002      	add	sp, #8
 80122ce:	bd10      	pop	{r4, pc}
 80122d0:	9b01      	ldr	r3, [sp, #4]
 80122d2:	b113      	cbz	r3, 80122da <rcl_get_localhost_only+0x26>
 80122d4:	781a      	ldrb	r2, [r3, #0]
 80122d6:	2a31      	cmp	r2, #49	@ 0x31
 80122d8:	d004      	beq.n	80122e4 <rcl_get_localhost_only+0x30>
 80122da:	2302      	movs	r3, #2
 80122dc:	2000      	movs	r0, #0
 80122de:	7023      	strb	r3, [r4, #0]
 80122e0:	b002      	add	sp, #8
 80122e2:	bd10      	pop	{r4, pc}
 80122e4:	785b      	ldrb	r3, [r3, #1]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d1f7      	bne.n	80122da <rcl_get_localhost_only+0x26>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e7f6      	b.n	80122dc <rcl_get_localhost_only+0x28>
 80122ee:	200b      	movs	r0, #11
 80122f0:	b002      	add	sp, #8
 80122f2:	bd10      	pop	{r4, pc}
 80122f4:	08019154 	.word	0x08019154

080122f8 <rcl_get_zero_initialized_node>:
 80122f8:	4a03      	ldr	r2, [pc, #12]	@ (8012308 <rcl_get_zero_initialized_node+0x10>)
 80122fa:	4603      	mov	r3, r0
 80122fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012300:	e883 0003 	stmia.w	r3, {r0, r1}
 8012304:	4618      	mov	r0, r3
 8012306:	4770      	bx	lr
 8012308:	08019170 	.word	0x08019170

0801230c <rcl_node_init>:
 801230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012310:	b0a9      	sub	sp, #164	@ 0xa4
 8012312:	4604      	mov	r4, r0
 8012314:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012318:	a823      	add	r0, sp, #140	@ 0x8c
 801231a:	460e      	mov	r6, r1
 801231c:	4615      	mov	r5, r2
 801231e:	461f      	mov	r7, r3
 8012320:	f004 ff24 	bl	801716c <rcl_guard_condition_get_default_options>
 8012324:	f1b8 0f00 	cmp.w	r8, #0
 8012328:	f000 80e6 	beq.w	80124f8 <rcl_node_init+0x1ec>
 801232c:	4640      	mov	r0, r8
 801232e:	f7fb f805 	bl	800d33c <rcutils_allocator_is_valid>
 8012332:	2800      	cmp	r0, #0
 8012334:	f000 80e0 	beq.w	80124f8 <rcl_node_init+0x1ec>
 8012338:	2e00      	cmp	r6, #0
 801233a:	f000 80dd 	beq.w	80124f8 <rcl_node_init+0x1ec>
 801233e:	2d00      	cmp	r5, #0
 8012340:	f000 80da 	beq.w	80124f8 <rcl_node_init+0x1ec>
 8012344:	2c00      	cmp	r4, #0
 8012346:	f000 80d7 	beq.w	80124f8 <rcl_node_init+0x1ec>
 801234a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801234e:	f1b9 0f00 	cmp.w	r9, #0
 8012352:	f040 80fd 	bne.w	8012550 <rcl_node_init+0x244>
 8012356:	2f00      	cmp	r7, #0
 8012358:	f000 80ce 	beq.w	80124f8 <rcl_node_init+0x1ec>
 801235c:	4638      	mov	r0, r7
 801235e:	f7ff fe3f 	bl	8011fe0 <rcl_context_is_valid>
 8012362:	4682      	mov	sl, r0
 8012364:	2800      	cmp	r0, #0
 8012366:	f000 80cd 	beq.w	8012504 <rcl_node_init+0x1f8>
 801236a:	464a      	mov	r2, r9
 801236c:	a922      	add	r1, sp, #136	@ 0x88
 801236e:	4630      	mov	r0, r6
 8012370:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8012374:	f003 f812 	bl	801539c <rmw_validate_node_name>
 8012378:	4681      	mov	r9, r0
 801237a:	2800      	cmp	r0, #0
 801237c:	f040 80be 	bne.w	80124fc <rcl_node_init+0x1f0>
 8012380:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012382:	2800      	cmp	r0, #0
 8012384:	f040 80f0 	bne.w	8012568 <rcl_node_init+0x25c>
 8012388:	4628      	mov	r0, r5
 801238a:	f7ed ff53 	bl	8000234 <strlen>
 801238e:	2800      	cmp	r0, #0
 8012390:	f040 80bb 	bne.w	801250a <rcl_node_init+0x1fe>
 8012394:	4d7c      	ldr	r5, [pc, #496]	@ (8012588 <rcl_node_init+0x27c>)
 8012396:	a922      	add	r1, sp, #136	@ 0x88
 8012398:	2200      	movs	r2, #0
 801239a:	4628      	mov	r0, r5
 801239c:	f002 ffe0 	bl	8015360 <rmw_validate_namespace>
 80123a0:	4681      	mov	r9, r0
 80123a2:	2800      	cmp	r0, #0
 80123a4:	f040 80aa 	bne.w	80124fc <rcl_node_init+0x1f0>
 80123a8:	4682      	mov	sl, r0
 80123aa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80123ac:	2800      	cmp	r0, #0
 80123ae:	f040 80e0 	bne.w	8012572 <rcl_node_init+0x266>
 80123b2:	f8d8 3000 	ldr.w	r3, [r8]
 80123b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80123ba:	2078      	movs	r0, #120	@ 0x78
 80123bc:	4798      	blx	r3
 80123be:	4681      	mov	r9, r0
 80123c0:	6060      	str	r0, [r4, #4]
 80123c2:	2800      	cmp	r0, #0
 80123c4:	f000 80ca 	beq.w	801255c <rcl_node_init+0x250>
 80123c8:	2200      	movs	r2, #0
 80123ca:	2300      	movs	r3, #0
 80123cc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80123d0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80123d4:	a808      	add	r0, sp, #32
 80123d6:	f000 f907 	bl	80125e8 <rcl_node_get_default_options>
 80123da:	a908      	add	r1, sp, #32
 80123dc:	4648      	mov	r0, r9
 80123de:	2268      	movs	r2, #104	@ 0x68
 80123e0:	f005 fcb3 	bl	8017d4a <memcpy>
 80123e4:	6861      	ldr	r1, [r4, #4]
 80123e6:	6027      	str	r7, [r4, #0]
 80123e8:	4640      	mov	r0, r8
 80123ea:	f000 f90b 	bl	8012604 <rcl_node_options_copy>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	d158      	bne.n	80124a4 <rcl_node_init+0x198>
 80123f2:	4628      	mov	r0, r5
 80123f4:	f7ed ff1e 	bl	8000234 <strlen>
 80123f8:	4428      	add	r0, r5
 80123fa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80123fe:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012402:	2b2f      	cmp	r3, #47	@ 0x2f
 8012404:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012408:	9300      	str	r3, [sp, #0]
 801240a:	bf0c      	ite	eq
 801240c:	4b5f      	ldreq	r3, [pc, #380]	@ (801258c <rcl_node_init+0x280>)
 801240e:	4b60      	ldrne	r3, [pc, #384]	@ (8012590 <rcl_node_init+0x284>)
 8012410:	9302      	str	r3, [sp, #8]
 8012412:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012416:	9301      	str	r3, [sp, #4]
 8012418:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801241c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012420:	f002 fbba 	bl	8014b98 <rcutils_format_string_limit>
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801242a:	6818      	ldr	r0, [r3, #0]
 801242c:	4631      	mov	r1, r6
 801242e:	3028      	adds	r0, #40	@ 0x28
 8012430:	462a      	mov	r2, r5
 8012432:	6866      	ldr	r6, [r4, #4]
 8012434:	f7fb fb1c 	bl	800da70 <rmw_create_node>
 8012438:	6863      	ldr	r3, [r4, #4]
 801243a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801243c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801243e:	2800      	cmp	r0, #0
 8012440:	d032      	beq.n	80124a8 <rcl_node_init+0x19c>
 8012442:	f7fb fba9 	bl	800db98 <rmw_node_get_graph_guard_condition>
 8012446:	4681      	mov	r9, r0
 8012448:	b360      	cbz	r0, 80124a4 <rcl_node_init+0x198>
 801244a:	f8d8 3000 	ldr.w	r3, [r8]
 801244e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012452:	6866      	ldr	r6, [r4, #4]
 8012454:	2008      	movs	r0, #8
 8012456:	4798      	blx	r3
 8012458:	6863      	ldr	r3, [r4, #4]
 801245a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801245c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8012460:	f1bb 0f00 	cmp.w	fp, #0
 8012464:	d020      	beq.n	80124a8 <rcl_node_init+0x19c>
 8012466:	a806      	add	r0, sp, #24
 8012468:	f004 fda4 	bl	8016fb4 <rcl_get_zero_initialized_guard_condition>
 801246c:	a806      	add	r0, sp, #24
 801246e:	c803      	ldmia	r0, {r0, r1}
 8012470:	6863      	ldr	r3, [r4, #4]
 8012472:	46c4      	mov	ip, r8
 8012474:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012478:	e88b 0003 	stmia.w	fp, {r0, r1}
 801247c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012480:	ae23      	add	r6, sp, #140	@ 0x8c
 8012482:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012484:	f8dc 3000 	ldr.w	r3, [ip]
 8012488:	6033      	str	r3, [r6, #0]
 801248a:	ab28      	add	r3, sp, #160	@ 0xa0
 801248c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012490:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012494:	4649      	mov	r1, r9
 8012496:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012498:	463a      	mov	r2, r7
 801249a:	4670      	mov	r0, lr
 801249c:	f004 fde0 	bl	8017060 <rcl_guard_condition_init_from_rmw>
 80124a0:	4681      	mov	r9, r0
 80124a2:	b328      	cbz	r0, 80124f0 <rcl_node_init+0x1e4>
 80124a4:	6863      	ldr	r3, [r4, #4]
 80124a6:	b1f3      	cbz	r3, 80124e6 <rcl_node_init+0x1da>
 80124a8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80124aa:	b128      	cbz	r0, 80124b8 <rcl_node_init+0x1ac>
 80124ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80124b4:	4798      	blx	r3
 80124b6:	6863      	ldr	r3, [r4, #4]
 80124b8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80124ba:	b110      	cbz	r0, 80124c2 <rcl_node_init+0x1b6>
 80124bc:	f7fb faf0 	bl	800daa0 <rmw_destroy_node>
 80124c0:	6863      	ldr	r3, [r4, #4]
 80124c2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80124c4:	b148      	cbz	r0, 80124da <rcl_node_init+0x1ce>
 80124c6:	f004 fe2b 	bl	8017120 <rcl_guard_condition_fini>
 80124ca:	6863      	ldr	r3, [r4, #4]
 80124cc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80124d0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80124d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124d6:	4798      	blx	r3
 80124d8:	6863      	ldr	r3, [r4, #4]
 80124da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80124de:	4618      	mov	r0, r3
 80124e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124e4:	4798      	blx	r3
 80124e6:	2300      	movs	r3, #0
 80124e8:	e9c4 3300 	strd	r3, r3, [r4]
 80124ec:	f04f 0901 	mov.w	r9, #1
 80124f0:	f1ba 0f00 	cmp.w	sl, #0
 80124f4:	d125      	bne.n	8012542 <rcl_node_init+0x236>
 80124f6:	e001      	b.n	80124fc <rcl_node_init+0x1f0>
 80124f8:	f04f 090b 	mov.w	r9, #11
 80124fc:	4648      	mov	r0, r9
 80124fe:	b029      	add	sp, #164	@ 0xa4
 8012500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012504:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012508:	e7f8      	b.n	80124fc <rcl_node_init+0x1f0>
 801250a:	782b      	ldrb	r3, [r5, #0]
 801250c:	2b2f      	cmp	r3, #47	@ 0x2f
 801250e:	f43f af42 	beq.w	8012396 <rcl_node_init+0x8a>
 8012512:	9503      	str	r5, [sp, #12]
 8012514:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012518:	9300      	str	r3, [sp, #0]
 801251a:	4b1e      	ldr	r3, [pc, #120]	@ (8012594 <rcl_node_init+0x288>)
 801251c:	9302      	str	r3, [sp, #8]
 801251e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012522:	9301      	str	r3, [sp, #4]
 8012524:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012528:	f002 fb36 	bl	8014b98 <rcutils_format_string_limit>
 801252c:	4605      	mov	r5, r0
 801252e:	b340      	cbz	r0, 8012582 <rcl_node_init+0x276>
 8012530:	2200      	movs	r2, #0
 8012532:	a922      	add	r1, sp, #136	@ 0x88
 8012534:	9222      	str	r2, [sp, #136]	@ 0x88
 8012536:	f002 ff13 	bl	8015360 <rmw_validate_namespace>
 801253a:	4681      	mov	r9, r0
 801253c:	2800      	cmp	r0, #0
 801253e:	f43f af34 	beq.w	80123aa <rcl_node_init+0x9e>
 8012542:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012546:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801254a:	4628      	mov	r0, r5
 801254c:	4798      	blx	r3
 801254e:	e7d5      	b.n	80124fc <rcl_node_init+0x1f0>
 8012550:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012554:	4648      	mov	r0, r9
 8012556:	b029      	add	sp, #164	@ 0xa4
 8012558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255c:	f04f 090a 	mov.w	r9, #10
 8012560:	f1ba 0f00 	cmp.w	sl, #0
 8012564:	d1ed      	bne.n	8012542 <rcl_node_init+0x236>
 8012566:	e7c9      	b.n	80124fc <rcl_node_init+0x1f0>
 8012568:	f002 ff6a 	bl	8015440 <rmw_node_name_validation_result_string>
 801256c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8012570:	e7c4      	b.n	80124fc <rcl_node_init+0x1f0>
 8012572:	f002 ff07 	bl	8015384 <rmw_namespace_validation_result_string>
 8012576:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801257a:	f1ba 0f00 	cmp.w	sl, #0
 801257e:	d1e0      	bne.n	8012542 <rcl_node_init+0x236>
 8012580:	e7bc      	b.n	80124fc <rcl_node_init+0x1f0>
 8012582:	f04f 090a 	mov.w	r9, #10
 8012586:	e7b9      	b.n	80124fc <rcl_node_init+0x1f0>
 8012588:	08018f00 	.word	0x08018f00
 801258c:	08018f28 	.word	0x08018f28
 8012590:	08018f04 	.word	0x08018f04
 8012594:	0801916c 	.word	0x0801916c

08012598 <rcl_node_is_valid>:
 8012598:	b130      	cbz	r0, 80125a8 <rcl_node_is_valid+0x10>
 801259a:	6843      	ldr	r3, [r0, #4]
 801259c:	b123      	cbz	r3, 80125a8 <rcl_node_is_valid+0x10>
 801259e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80125a0:	b113      	cbz	r3, 80125a8 <rcl_node_is_valid+0x10>
 80125a2:	6800      	ldr	r0, [r0, #0]
 80125a4:	f7ff bd1c 	b.w	8011fe0 <rcl_context_is_valid>
 80125a8:	2000      	movs	r0, #0
 80125aa:	4770      	bx	lr

080125ac <rcl_node_get_name>:
 80125ac:	b120      	cbz	r0, 80125b8 <rcl_node_get_name+0xc>
 80125ae:	6840      	ldr	r0, [r0, #4]
 80125b0:	b110      	cbz	r0, 80125b8 <rcl_node_get_name+0xc>
 80125b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80125b4:	b100      	cbz	r0, 80125b8 <rcl_node_get_name+0xc>
 80125b6:	6880      	ldr	r0, [r0, #8]
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop

080125bc <rcl_node_get_namespace>:
 80125bc:	b120      	cbz	r0, 80125c8 <rcl_node_get_namespace+0xc>
 80125be:	6840      	ldr	r0, [r0, #4]
 80125c0:	b110      	cbz	r0, 80125c8 <rcl_node_get_namespace+0xc>
 80125c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80125c4:	b100      	cbz	r0, 80125c8 <rcl_node_get_namespace+0xc>
 80125c6:	68c0      	ldr	r0, [r0, #12]
 80125c8:	4770      	bx	lr
 80125ca:	bf00      	nop

080125cc <rcl_node_get_options>:
 80125cc:	b128      	cbz	r0, 80125da <rcl_node_get_options+0xe>
 80125ce:	6840      	ldr	r0, [r0, #4]
 80125d0:	b118      	cbz	r0, 80125da <rcl_node_get_options+0xe>
 80125d2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	bf08      	it	eq
 80125d8:	2000      	moveq	r0, #0
 80125da:	4770      	bx	lr

080125dc <rcl_node_get_rmw_handle>:
 80125dc:	b110      	cbz	r0, 80125e4 <rcl_node_get_rmw_handle+0x8>
 80125de:	6840      	ldr	r0, [r0, #4]
 80125e0:	b100      	cbz	r0, 80125e4 <rcl_node_get_rmw_handle+0x8>
 80125e2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop

080125e8 <rcl_node_get_default_options>:
 80125e8:	b510      	push	{r4, lr}
 80125ea:	2268      	movs	r2, #104	@ 0x68
 80125ec:	4604      	mov	r4, r0
 80125ee:	2100      	movs	r1, #0
 80125f0:	f005 fae2 	bl	8017bb8 <memset>
 80125f4:	4620      	mov	r0, r4
 80125f6:	f7fa fe93 	bl	800d320 <rcutils_get_default_allocator>
 80125fa:	2301      	movs	r3, #1
 80125fc:	7523      	strb	r3, [r4, #20]
 80125fe:	4620      	mov	r0, r4
 8012600:	bd10      	pop	{r4, pc}
 8012602:	bf00      	nop

08012604 <rcl_node_options_copy>:
 8012604:	b1d0      	cbz	r0, 801263c <rcl_node_options_copy+0x38>
 8012606:	b570      	push	{r4, r5, r6, lr}
 8012608:	460c      	mov	r4, r1
 801260a:	b1a9      	cbz	r1, 8012638 <rcl_node_options_copy+0x34>
 801260c:	4288      	cmp	r0, r1
 801260e:	4684      	mov	ip, r0
 8012610:	d012      	beq.n	8012638 <rcl_node_options_copy+0x34>
 8012612:	4605      	mov	r5, r0
 8012614:	8a86      	ldrh	r6, [r0, #20]
 8012616:	468e      	mov	lr, r1
 8012618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801261a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801261e:	682b      	ldr	r3, [r5, #0]
 8012620:	f8ce 3000 	str.w	r3, [lr]
 8012624:	f10c 0118 	add.w	r1, ip, #24
 8012628:	2250      	movs	r2, #80	@ 0x50
 801262a:	82a6      	strh	r6, [r4, #20]
 801262c:	f104 0018 	add.w	r0, r4, #24
 8012630:	f005 fb8b 	bl	8017d4a <memcpy>
 8012634:	2000      	movs	r0, #0
 8012636:	bd70      	pop	{r4, r5, r6, pc}
 8012638:	200b      	movs	r0, #11
 801263a:	bd70      	pop	{r4, r5, r6, pc}
 801263c:	200b      	movs	r0, #11
 801263e:	4770      	bx	lr

08012640 <rcl_node_resolve_name>:
 8012640:	b082      	sub	sp, #8
 8012642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012646:	b091      	sub	sp, #68	@ 0x44
 8012648:	ac1a      	add	r4, sp, #104	@ 0x68
 801264a:	e884 000c 	stmia.w	r4, {r2, r3}
 801264e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012652:	2800      	cmp	r0, #0
 8012654:	d03b      	beq.n	80126ce <rcl_node_resolve_name+0x8e>
 8012656:	460c      	mov	r4, r1
 8012658:	4605      	mov	r5, r0
 801265a:	f7ff ffb7 	bl	80125cc <rcl_node_get_options>
 801265e:	2800      	cmp	r0, #0
 8012660:	d037      	beq.n	80126d2 <rcl_node_resolve_name+0x92>
 8012662:	4628      	mov	r0, r5
 8012664:	f7ff ffa2 	bl	80125ac <rcl_node_get_name>
 8012668:	4606      	mov	r6, r0
 801266a:	4628      	mov	r0, r5
 801266c:	f7ff ffa6 	bl	80125bc <rcl_node_get_namespace>
 8012670:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012674:	4681      	mov	r9, r0
 8012676:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801267a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801267c:	46ac      	mov	ip, r5
 801267e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012682:	f8de 3000 	ldr.w	r3, [lr]
 8012686:	f8cc 3000 	str.w	r3, [ip]
 801268a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801268c:	b1fb      	cbz	r3, 80126ce <rcl_node_resolve_name+0x8e>
 801268e:	468a      	mov	sl, r1
 8012690:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012694:	f002 fbd8 	bl	8014e48 <rcutils_get_zero_initialized_string_map>
 8012698:	ab10      	add	r3, sp, #64	@ 0x40
 801269a:	9008      	str	r0, [sp, #32]
 801269c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80126a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80126a4:	2100      	movs	r1, #0
 80126a6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80126aa:	a808      	add	r0, sp, #32
 80126ac:	f002 fc44 	bl	8014f38 <rcutils_string_map_init>
 80126b0:	4607      	mov	r7, r0
 80126b2:	b180      	cbz	r0, 80126d6 <rcl_node_resolve_name+0x96>
 80126b4:	f7fa fe50 	bl	800d358 <rcutils_get_error_string>
 80126b8:	f7fa fe66 	bl	800d388 <rcutils_reset_error>
 80126bc:	2f0a      	cmp	r7, #10
 80126be:	bf18      	it	ne
 80126c0:	2701      	movne	r7, #1
 80126c2:	4638      	mov	r0, r7
 80126c4:	b011      	add	sp, #68	@ 0x44
 80126c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ca:	b002      	add	sp, #8
 80126cc:	4770      	bx	lr
 80126ce:	270b      	movs	r7, #11
 80126d0:	e7f7      	b.n	80126c2 <rcl_node_resolve_name+0x82>
 80126d2:	2701      	movs	r7, #1
 80126d4:	e7f5      	b.n	80126c2 <rcl_node_resolve_name+0x82>
 80126d6:	9009      	str	r0, [sp, #36]	@ 0x24
 80126d8:	9007      	str	r0, [sp, #28]
 80126da:	a808      	add	r0, sp, #32
 80126dc:	f004 fc64 	bl	8016fa8 <rcl_get_default_topic_name_substitutions>
 80126e0:	4607      	mov	r7, r0
 80126e2:	b1a8      	cbz	r0, 8012710 <rcl_node_resolve_name+0xd0>
 80126e4:	280a      	cmp	r0, #10
 80126e6:	9c07      	ldr	r4, [sp, #28]
 80126e8:	d000      	beq.n	80126ec <rcl_node_resolve_name+0xac>
 80126ea:	2701      	movs	r7, #1
 80126ec:	a808      	add	r0, sp, #32
 80126ee:	f002 fc63 	bl	8014fb8 <rcutils_string_map_fini>
 80126f2:	2800      	cmp	r0, #0
 80126f4:	d13d      	bne.n	8012772 <rcl_node_resolve_name+0x132>
 80126f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126f8:	4659      	mov	r1, fp
 80126fa:	47d0      	blx	sl
 80126fc:	4659      	mov	r1, fp
 80126fe:	4620      	mov	r0, r4
 8012700:	47d0      	blx	sl
 8012702:	f1b8 0f00 	cmp.w	r8, #0
 8012706:	d0dc      	beq.n	80126c2 <rcl_node_resolve_name+0x82>
 8012708:	2f67      	cmp	r7, #103	@ 0x67
 801270a:	bf08      	it	eq
 801270c:	2768      	moveq	r7, #104	@ 0x68
 801270e:	e7d8      	b.n	80126c2 <rcl_node_resolve_name+0x82>
 8012710:	ab09      	add	r3, sp, #36	@ 0x24
 8012712:	9305      	str	r3, [sp, #20]
 8012714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012716:	46ec      	mov	ip, sp
 8012718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801271c:	682b      	ldr	r3, [r5, #0]
 801271e:	f8cc 3000 	str.w	r3, [ip]
 8012722:	464a      	mov	r2, r9
 8012724:	4631      	mov	r1, r6
 8012726:	4620      	mov	r0, r4
 8012728:	ab08      	add	r3, sp, #32
 801272a:	f004 fadf 	bl	8016cec <rcl_expand_topic_name>
 801272e:	4607      	mov	r7, r0
 8012730:	b9b8      	cbnz	r0, 8012762 <rcl_node_resolve_name+0x122>
 8012732:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012734:	9009      	str	r0, [sp, #36]	@ 0x24
 8012736:	4602      	mov	r2, r0
 8012738:	a90a      	add	r1, sp, #40	@ 0x28
 801273a:	4620      	mov	r0, r4
 801273c:	f002 fd4c 	bl	80151d8 <rmw_validate_full_topic_name>
 8012740:	b988      	cbnz	r0, 8012766 <rcl_node_resolve_name+0x126>
 8012742:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012744:	b9d5      	cbnz	r5, 801277c <rcl_node_resolve_name+0x13c>
 8012746:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012748:	a808      	add	r0, sp, #32
 801274a:	601c      	str	r4, [r3, #0]
 801274c:	f002 fc34 	bl	8014fb8 <rcutils_string_map_fini>
 8012750:	4607      	mov	r7, r0
 8012752:	b1a8      	cbz	r0, 8012780 <rcl_node_resolve_name+0x140>
 8012754:	f7fa fe00 	bl	800d358 <rcutils_get_error_string>
 8012758:	462c      	mov	r4, r5
 801275a:	f7fa fe15 	bl	800d388 <rcutils_reset_error>
 801275e:	2701      	movs	r7, #1
 8012760:	e7c9      	b.n	80126f6 <rcl_node_resolve_name+0xb6>
 8012762:	9c07      	ldr	r4, [sp, #28]
 8012764:	e7c2      	b.n	80126ec <rcl_node_resolve_name+0xac>
 8012766:	f7fa fdf7 	bl	800d358 <rcutils_get_error_string>
 801276a:	2701      	movs	r7, #1
 801276c:	f7fa fe0c 	bl	800d388 <rcutils_reset_error>
 8012770:	e7bc      	b.n	80126ec <rcl_node_resolve_name+0xac>
 8012772:	f7fa fdf1 	bl	800d358 <rcutils_get_error_string>
 8012776:	f7fa fe07 	bl	800d388 <rcutils_reset_error>
 801277a:	e7bc      	b.n	80126f6 <rcl_node_resolve_name+0xb6>
 801277c:	2767      	movs	r7, #103	@ 0x67
 801277e:	e7b5      	b.n	80126ec <rcl_node_resolve_name+0xac>
 8012780:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012782:	4659      	mov	r1, fp
 8012784:	47d0      	blx	sl
 8012786:	4659      	mov	r1, fp
 8012788:	4638      	mov	r0, r7
 801278a:	47d0      	blx	sl
 801278c:	e799      	b.n	80126c2 <rcl_node_resolve_name+0x82>
 801278e:	bf00      	nop

08012790 <exact_match_lookup>:
 8012790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012792:	f102 0708 	add.w	r7, r2, #8
 8012796:	460b      	mov	r3, r1
 8012798:	4614      	mov	r4, r2
 801279a:	4606      	mov	r6, r0
 801279c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80127a0:	b085      	sub	sp, #20
 80127a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80127a6:	4618      	mov	r0, r3
 80127a8:	4919      	ldr	r1, [pc, #100]	@ (8012810 <exact_match_lookup+0x80>)
 80127aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80127ae:	f002 f9e5 	bl	8014b7c <rcutils_join_path>
 80127b2:	7833      	ldrb	r3, [r6, #0]
 80127b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80127b6:	4605      	mov	r5, r0
 80127b8:	d023      	beq.n	8012802 <exact_match_lookup+0x72>
 80127ba:	f104 030c 	add.w	r3, r4, #12
 80127be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80127c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80127c6:	1c70      	adds	r0, r6, #1
 80127c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80127cc:	f002 f9dc 	bl	8014b88 <rcutils_to_native_path>
 80127d0:	4606      	mov	r6, r0
 80127d2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80127d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80127da:	4631      	mov	r1, r6
 80127dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80127e0:	4628      	mov	r0, r5
 80127e2:	f002 f9cb 	bl	8014b7c <rcutils_join_path>
 80127e6:	6862      	ldr	r2, [r4, #4]
 80127e8:	6921      	ldr	r1, [r4, #16]
 80127ea:	4603      	mov	r3, r0
 80127ec:	4630      	mov	r0, r6
 80127ee:	461e      	mov	r6, r3
 80127f0:	4790      	blx	r2
 80127f2:	4628      	mov	r0, r5
 80127f4:	6863      	ldr	r3, [r4, #4]
 80127f6:	6921      	ldr	r1, [r4, #16]
 80127f8:	4798      	blx	r3
 80127fa:	4635      	mov	r5, r6
 80127fc:	4628      	mov	r0, r5
 80127fe:	b005      	add	sp, #20
 8012800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012802:	7873      	ldrb	r3, [r6, #1]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1d8      	bne.n	80127ba <exact_match_lookup+0x2a>
 8012808:	4628      	mov	r0, r5
 801280a:	b005      	add	sp, #20
 801280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801280e:	bf00      	nop
 8012810:	080191b4 	.word	0x080191b4

08012814 <rcl_get_secure_root>:
 8012814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012818:	b085      	sub	sp, #20
 801281a:	b168      	cbz	r0, 8012838 <rcl_get_secure_root+0x24>
 801281c:	4607      	mov	r7, r0
 801281e:	4608      	mov	r0, r1
 8012820:	460c      	mov	r4, r1
 8012822:	f7fa fd8b 	bl	800d33c <rcutils_allocator_is_valid>
 8012826:	b138      	cbz	r0, 8012838 <rcl_get_secure_root+0x24>
 8012828:	2300      	movs	r3, #0
 801282a:	482d      	ldr	r0, [pc, #180]	@ (80128e0 <rcl_get_secure_root+0xcc>)
 801282c:	9303      	str	r3, [sp, #12]
 801282e:	a903      	add	r1, sp, #12
 8012830:	f002 f98a 	bl	8014b48 <rcutils_get_env>
 8012834:	4605      	mov	r5, r0
 8012836:	b120      	cbz	r0, 8012842 <rcl_get_secure_root+0x2e>
 8012838:	2500      	movs	r5, #0
 801283a:	4628      	mov	r0, r5
 801283c:	b005      	add	sp, #20
 801283e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012842:	9b03      	ldr	r3, [sp, #12]
 8012844:	781a      	ldrb	r2, [r3, #0]
 8012846:	2a00      	cmp	r2, #0
 8012848:	d0f6      	beq.n	8012838 <rcl_get_secure_root+0x24>
 801284a:	f104 090c 	add.w	r9, r4, #12
 801284e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012852:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012856:	4618      	mov	r0, r3
 8012858:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801285c:	f002 fab6 	bl	8014dcc <rcutils_strdup>
 8012860:	4680      	mov	r8, r0
 8012862:	2800      	cmp	r0, #0
 8012864:	d0e8      	beq.n	8012838 <rcl_get_secure_root+0x24>
 8012866:	481f      	ldr	r0, [pc, #124]	@ (80128e4 <rcl_get_secure_root+0xd0>)
 8012868:	9503      	str	r5, [sp, #12]
 801286a:	a903      	add	r1, sp, #12
 801286c:	f002 f96c 	bl	8014b48 <rcutils_get_env>
 8012870:	b160      	cbz	r0, 801288c <rcl_get_secure_root+0x78>
 8012872:	2600      	movs	r6, #0
 8012874:	6863      	ldr	r3, [r4, #4]
 8012876:	6921      	ldr	r1, [r4, #16]
 8012878:	4630      	mov	r0, r6
 801287a:	4798      	blx	r3
 801287c:	4640      	mov	r0, r8
 801287e:	6863      	ldr	r3, [r4, #4]
 8012880:	6921      	ldr	r1, [r4, #16]
 8012882:	4798      	blx	r3
 8012884:	4628      	mov	r0, r5
 8012886:	b005      	add	sp, #20
 8012888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801288c:	9b03      	ldr	r3, [sp, #12]
 801288e:	781e      	ldrb	r6, [r3, #0]
 8012890:	b1f6      	cbz	r6, 80128d0 <rcl_get_secure_root+0xbc>
 8012892:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012896:	e88d 0003 	stmia.w	sp, {r0, r1}
 801289a:	4618      	mov	r0, r3
 801289c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80128a0:	f002 fa94 	bl	8014dcc <rcutils_strdup>
 80128a4:	4606      	mov	r6, r0
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d0e3      	beq.n	8012872 <rcl_get_secure_root+0x5e>
 80128aa:	4622      	mov	r2, r4
 80128ac:	4641      	mov	r1, r8
 80128ae:	f7ff ff6f 	bl	8012790 <exact_match_lookup>
 80128b2:	4605      	mov	r5, r0
 80128b4:	2d00      	cmp	r5, #0
 80128b6:	d0dd      	beq.n	8012874 <rcl_get_secure_root+0x60>
 80128b8:	4628      	mov	r0, r5
 80128ba:	f002 f95d 	bl	8014b78 <rcutils_is_directory>
 80128be:	4603      	mov	r3, r0
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d1d7      	bne.n	8012874 <rcl_get_secure_root+0x60>
 80128c4:	4628      	mov	r0, r5
 80128c6:	6921      	ldr	r1, [r4, #16]
 80128c8:	461d      	mov	r5, r3
 80128ca:	6863      	ldr	r3, [r4, #4]
 80128cc:	4798      	blx	r3
 80128ce:	e7d1      	b.n	8012874 <rcl_get_secure_root+0x60>
 80128d0:	4622      	mov	r2, r4
 80128d2:	4638      	mov	r0, r7
 80128d4:	4641      	mov	r1, r8
 80128d6:	f7ff ff5b 	bl	8012790 <exact_match_lookup>
 80128da:	4605      	mov	r5, r0
 80128dc:	e7ea      	b.n	80128b4 <rcl_get_secure_root+0xa0>
 80128de:	bf00      	nop
 80128e0:	080191c0 	.word	0x080191c0
 80128e4:	080191d8 	.word	0x080191d8

080128e8 <rcl_get_security_options_from_environment>:
 80128e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ec:	b082      	sub	sp, #8
 80128ee:	2300      	movs	r3, #0
 80128f0:	4606      	mov	r6, r0
 80128f2:	460f      	mov	r7, r1
 80128f4:	4820      	ldr	r0, [pc, #128]	@ (8012978 <rcl_get_security_options_from_environment+0x90>)
 80128f6:	9301      	str	r3, [sp, #4]
 80128f8:	a901      	add	r1, sp, #4
 80128fa:	4690      	mov	r8, r2
 80128fc:	f002 f924 	bl	8014b48 <rcutils_get_env>
 8012900:	b120      	cbz	r0, 801290c <rcl_get_security_options_from_environment+0x24>
 8012902:	2501      	movs	r5, #1
 8012904:	4628      	mov	r0, r5
 8012906:	b002      	add	sp, #8
 8012908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801290c:	491b      	ldr	r1, [pc, #108]	@ (801297c <rcl_get_security_options_from_environment+0x94>)
 801290e:	4604      	mov	r4, r0
 8012910:	9801      	ldr	r0, [sp, #4]
 8012912:	f7ed fc85 	bl	8000220 <strcmp>
 8012916:	4605      	mov	r5, r0
 8012918:	b9e8      	cbnz	r0, 8012956 <rcl_get_security_options_from_environment+0x6e>
 801291a:	9001      	str	r0, [sp, #4]
 801291c:	f1b8 0f00 	cmp.w	r8, #0
 8012920:	d020      	beq.n	8012964 <rcl_get_security_options_from_environment+0x7c>
 8012922:	4817      	ldr	r0, [pc, #92]	@ (8012980 <rcl_get_security_options_from_environment+0x98>)
 8012924:	a901      	add	r1, sp, #4
 8012926:	f002 f90f 	bl	8014b48 <rcutils_get_env>
 801292a:	2800      	cmp	r0, #0
 801292c:	d1e9      	bne.n	8012902 <rcl_get_security_options_from_environment+0x1a>
 801292e:	4915      	ldr	r1, [pc, #84]	@ (8012984 <rcl_get_security_options_from_environment+0x9c>)
 8012930:	9801      	ldr	r0, [sp, #4]
 8012932:	f7ed fc75 	bl	8000220 <strcmp>
 8012936:	fab0 f080 	clz	r0, r0
 801293a:	0940      	lsrs	r0, r0, #5
 801293c:	f888 0000 	strb.w	r0, [r8]
 8012940:	4639      	mov	r1, r7
 8012942:	4630      	mov	r0, r6
 8012944:	f7ff ff66 	bl	8012814 <rcl_get_secure_root>
 8012948:	b170      	cbz	r0, 8012968 <rcl_get_security_options_from_environment+0x80>
 801294a:	f8c8 0004 	str.w	r0, [r8, #4]
 801294e:	4628      	mov	r0, r5
 8012950:	b002      	add	sp, #8
 8012952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012956:	4625      	mov	r5, r4
 8012958:	4628      	mov	r0, r5
 801295a:	f888 4000 	strb.w	r4, [r8]
 801295e:	b002      	add	sp, #8
 8012960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012964:	250b      	movs	r5, #11
 8012966:	e7cd      	b.n	8012904 <rcl_get_security_options_from_environment+0x1c>
 8012968:	f898 5000 	ldrb.w	r5, [r8]
 801296c:	f1a5 0501 	sub.w	r5, r5, #1
 8012970:	fab5 f585 	clz	r5, r5
 8012974:	096d      	lsrs	r5, r5, #5
 8012976:	e7c5      	b.n	8012904 <rcl_get_security_options_from_environment+0x1c>
 8012978:	08019178 	.word	0x08019178
 801297c:	0801918c 	.word	0x0801918c
 8012980:	08019194 	.word	0x08019194
 8012984:	080191ac 	.word	0x080191ac

08012988 <rcl_service_get_rmw_handle>:
 8012988:	b118      	cbz	r0, 8012992 <rcl_service_get_rmw_handle+0xa>
 801298a:	6800      	ldr	r0, [r0, #0]
 801298c:	b108      	cbz	r0, 8012992 <rcl_service_get_rmw_handle+0xa>
 801298e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012992:	4770      	bx	lr

08012994 <rcl_take_request>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	468e      	mov	lr, r1
 8012998:	460c      	mov	r4, r1
 801299a:	4616      	mov	r6, r2
 801299c:	4605      	mov	r5, r0
 801299e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129a2:	b08c      	sub	sp, #48	@ 0x30
 80129a4:	f10d 0c18 	add.w	ip, sp, #24
 80129a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80129b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80129b4:	b30d      	cbz	r5, 80129fa <rcl_take_request+0x66>
 80129b6:	682b      	ldr	r3, [r5, #0]
 80129b8:	b1fb      	cbz	r3, 80129fa <rcl_take_request+0x66>
 80129ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80129be:	b1e0      	cbz	r0, 80129fa <rcl_take_request+0x66>
 80129c0:	b336      	cbz	r6, 8012a10 <rcl_take_request+0x7c>
 80129c2:	2300      	movs	r3, #0
 80129c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80129c8:	4632      	mov	r2, r6
 80129ca:	f10d 0307 	add.w	r3, sp, #7
 80129ce:	a902      	add	r1, sp, #8
 80129d0:	f002 ff58 	bl	8015884 <rmw_take_request>
 80129d4:	4605      	mov	r5, r0
 80129d6:	b198      	cbz	r0, 8012a00 <rcl_take_request+0x6c>
 80129d8:	280a      	cmp	r0, #10
 80129da:	bf18      	it	ne
 80129dc:	2501      	movne	r5, #1
 80129de:	f10d 0e18 	add.w	lr, sp, #24
 80129e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129e6:	46a4      	mov	ip, r4
 80129e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129ec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80129f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80129f4:	4628      	mov	r0, r5
 80129f6:	b00c      	add	sp, #48	@ 0x30
 80129f8:	bd70      	pop	{r4, r5, r6, pc}
 80129fa:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80129fe:	e7ee      	b.n	80129de <rcl_take_request+0x4a>
 8012a00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012a04:	f240 2359 	movw	r3, #601	@ 0x259
 8012a08:	2a00      	cmp	r2, #0
 8012a0a:	bf08      	it	eq
 8012a0c:	461d      	moveq	r5, r3
 8012a0e:	e7e6      	b.n	80129de <rcl_take_request+0x4a>
 8012a10:	250b      	movs	r5, #11
 8012a12:	e7e4      	b.n	80129de <rcl_take_request+0x4a>

08012a14 <rcl_send_response>:
 8012a14:	b170      	cbz	r0, 8012a34 <rcl_send_response+0x20>
 8012a16:	6800      	ldr	r0, [r0, #0]
 8012a18:	b160      	cbz	r0, 8012a34 <rcl_send_response+0x20>
 8012a1a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012a1e:	b148      	cbz	r0, 8012a34 <rcl_send_response+0x20>
 8012a20:	b159      	cbz	r1, 8012a3a <rcl_send_response+0x26>
 8012a22:	b510      	push	{r4, lr}
 8012a24:	b15a      	cbz	r2, 8012a3e <rcl_send_response+0x2a>
 8012a26:	f002 ff8b 	bl	8015940 <rmw_send_response>
 8012a2a:	b110      	cbz	r0, 8012a32 <rcl_send_response+0x1e>
 8012a2c:	2802      	cmp	r0, #2
 8012a2e:	bf18      	it	ne
 8012a30:	2001      	movne	r0, #1
 8012a32:	bd10      	pop	{r4, pc}
 8012a34:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012a38:	4770      	bx	lr
 8012a3a:	200b      	movs	r0, #11
 8012a3c:	4770      	bx	lr
 8012a3e:	200b      	movs	r0, #11
 8012a40:	bd10      	pop	{r4, pc}
 8012a42:	bf00      	nop

08012a44 <rcl_service_is_valid>:
 8012a44:	b130      	cbz	r0, 8012a54 <rcl_service_is_valid+0x10>
 8012a46:	6800      	ldr	r0, [r0, #0]
 8012a48:	b120      	cbz	r0, 8012a54 <rcl_service_is_valid+0x10>
 8012a4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012a4e:	3800      	subs	r0, #0
 8012a50:	bf18      	it	ne
 8012a52:	2001      	movne	r0, #1
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop

08012a58 <rcl_take>:
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	d04a      	beq.n	8012af2 <rcl_take+0x9a>
 8012a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a60:	4604      	mov	r4, r0
 8012a62:	6800      	ldr	r0, [r0, #0]
 8012a64:	b0a4      	sub	sp, #144	@ 0x90
 8012a66:	2800      	cmp	r0, #0
 8012a68:	d03b      	beq.n	8012ae2 <rcl_take+0x8a>
 8012a6a:	461f      	mov	r7, r3
 8012a6c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d036      	beq.n	8012ae2 <rcl_take+0x8a>
 8012a74:	460e      	mov	r6, r1
 8012a76:	2900      	cmp	r1, #0
 8012a78:	d039      	beq.n	8012aee <rcl_take+0x96>
 8012a7a:	4615      	mov	r5, r2
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	d03c      	beq.n	8012afa <rcl_take+0xa2>
 8012a80:	a802      	add	r0, sp, #8
 8012a82:	f002 fba1 	bl	80151c8 <rmw_get_zero_initialized_message_info>
 8012a86:	f10d 0c08 	add.w	ip, sp, #8
 8012a8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a8e:	46ae      	mov	lr, r5
 8012a90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012a94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012a9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012aa0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012aa4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012aa8:	f04f 0800 	mov.w	r8, #0
 8012aac:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012ab0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012ab4:	6822      	ldr	r2, [r4, #0]
 8012ab6:	462b      	mov	r3, r5
 8012ab8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012abc:	9700      	str	r7, [sp, #0]
 8012abe:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012ac2:	4631      	mov	r1, r6
 8012ac4:	f002 ffe2 	bl	8015a8c <rmw_take_with_info>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	b9c0      	cbnz	r0, 8012afe <rcl_take+0xa6>
 8012acc:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012ad0:	f240 1291 	movw	r2, #401	@ 0x191
 8012ad4:	2900      	cmp	r1, #0
 8012ad6:	bf08      	it	eq
 8012ad8:	4613      	moveq	r3, r2
 8012ada:	4618      	mov	r0, r3
 8012adc:	b024      	add	sp, #144	@ 0x90
 8012ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ae2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	b024      	add	sp, #144	@ 0x90
 8012aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aee:	230b      	movs	r3, #11
 8012af0:	e7f3      	b.n	8012ada <rcl_take+0x82>
 8012af2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012af6:	4618      	mov	r0, r3
 8012af8:	4770      	bx	lr
 8012afa:	ad14      	add	r5, sp, #80	@ 0x50
 8012afc:	e7c0      	b.n	8012a80 <rcl_take+0x28>
 8012afe:	f7ff fa51 	bl	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012b02:	4603      	mov	r3, r0
 8012b04:	e7e9      	b.n	8012ada <rcl_take+0x82>
 8012b06:	bf00      	nop

08012b08 <rcl_subscription_get_rmw_handle>:
 8012b08:	b118      	cbz	r0, 8012b12 <rcl_subscription_get_rmw_handle+0xa>
 8012b0a:	6800      	ldr	r0, [r0, #0]
 8012b0c:	b108      	cbz	r0, 8012b12 <rcl_subscription_get_rmw_handle+0xa>
 8012b0e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012b12:	4770      	bx	lr

08012b14 <rcl_subscription_is_valid>:
 8012b14:	b130      	cbz	r0, 8012b24 <rcl_subscription_is_valid+0x10>
 8012b16:	6800      	ldr	r0, [r0, #0]
 8012b18:	b120      	cbz	r0, 8012b24 <rcl_subscription_is_valid+0x10>
 8012b1a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012b1e:	3800      	subs	r0, #0
 8012b20:	bf18      	it	ne
 8012b22:	2001      	movne	r0, #1
 8012b24:	4770      	bx	lr
 8012b26:	bf00      	nop

08012b28 <rcl_get_system_time>:
 8012b28:	4608      	mov	r0, r1
 8012b2a:	f7fa bc49 	b.w	800d3c0 <rcutils_system_time_now>
 8012b2e:	bf00      	nop

08012b30 <rcl_get_steady_time>:
 8012b30:	4608      	mov	r0, r1
 8012b32:	f7fa bc6d 	b.w	800d410 <rcutils_steady_time_now>
 8012b36:	bf00      	nop

08012b38 <rcl_get_ros_time>:
 8012b38:	7a03      	ldrb	r3, [r0, #8]
 8012b3a:	b510      	push	{r4, lr}
 8012b3c:	460c      	mov	r4, r1
 8012b3e:	b133      	cbz	r3, 8012b4e <rcl_get_ros_time+0x16>
 8012b40:	2105      	movs	r1, #5
 8012b42:	f001 ff5d 	bl	8014a00 <__atomic_load_8>
 8012b46:	e9c4 0100 	strd	r0, r1, [r4]
 8012b4a:	2000      	movs	r0, #0
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b52:	4608      	mov	r0, r1
 8012b54:	f7fa bc34 	b.w	800d3c0 <rcutils_system_time_now>

08012b58 <rcl_clock_init>:
 8012b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	4614      	mov	r4, r2
 8012b60:	460e      	mov	r6, r1
 8012b62:	f7fa fbeb 	bl	800d33c <rcutils_allocator_is_valid>
 8012b66:	b128      	cbz	r0, 8012b74 <rcl_clock_init+0x1c>
 8012b68:	2d03      	cmp	r5, #3
 8012b6a:	d803      	bhi.n	8012b74 <rcl_clock_init+0x1c>
 8012b6c:	e8df f005 	tbb	[pc, r5]
 8012b70:	06532e1d 	.word	0x06532e1d
 8012b74:	f04f 0c0b 	mov.w	ip, #11
 8012b78:	4660      	mov	r0, ip
 8012b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b7c:	2e00      	cmp	r6, #0
 8012b7e:	d0f9      	beq.n	8012b74 <rcl_clock_init+0x1c>
 8012b80:	2c00      	cmp	r4, #0
 8012b82:	d0f7      	beq.n	8012b74 <rcl_clock_init+0x1c>
 8012b84:	2300      	movs	r3, #0
 8012b86:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012b8a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012c40 <rcl_clock_init+0xe8>
 8012b8e:	6133      	str	r3, [r6, #16]
 8012b90:	f106 0514 	add.w	r5, r6, #20
 8012b94:	469c      	mov	ip, r3
 8012b96:	2703      	movs	r7, #3
 8012b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b9c:	6823      	ldr	r3, [r4, #0]
 8012b9e:	602b      	str	r3, [r5, #0]
 8012ba0:	7037      	strb	r7, [r6, #0]
 8012ba2:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012ba6:	4660      	mov	r0, ip
 8012ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012baa:	2e00      	cmp	r6, #0
 8012bac:	d0e2      	beq.n	8012b74 <rcl_clock_init+0x1c>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	7033      	strb	r3, [r6, #0]
 8012bb2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012bb6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012bba:	469c      	mov	ip, r3
 8012bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bbe:	f106 0514 	add.w	r5, r6, #20
 8012bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012bc4:	6823      	ldr	r3, [r4, #0]
 8012bc6:	602b      	str	r3, [r5, #0]
 8012bc8:	4660      	mov	r0, ip
 8012bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bcc:	2e00      	cmp	r6, #0
 8012bce:	d0d1      	beq.n	8012b74 <rcl_clock_init+0x1c>
 8012bd0:	2c00      	cmp	r4, #0
 8012bd2:	d0cf      	beq.n	8012b74 <rcl_clock_init+0x1c>
 8012bd4:	2700      	movs	r7, #0
 8012bd6:	7037      	strb	r7, [r6, #0]
 8012bd8:	46a4      	mov	ip, r4
 8012bda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012bde:	f106 0514 	add.w	r5, r6, #20
 8012be2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012be6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012bec:	f8dc 3000 	ldr.w	r3, [ip]
 8012bf0:	602b      	str	r3, [r5, #0]
 8012bf2:	6921      	ldr	r1, [r4, #16]
 8012bf4:	6823      	ldr	r3, [r4, #0]
 8012bf6:	2010      	movs	r0, #16
 8012bf8:	4798      	blx	r3
 8012bfa:	6130      	str	r0, [r6, #16]
 8012bfc:	b1d0      	cbz	r0, 8012c34 <rcl_clock_init+0xdc>
 8012bfe:	2200      	movs	r2, #0
 8012c00:	2300      	movs	r3, #0
 8012c02:	e9c0 2300 	strd	r2, r3, [r0]
 8012c06:	2301      	movs	r3, #1
 8012c08:	7207      	strb	r7, [r0, #8]
 8012c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8012c3c <rcl_clock_init+0xe4>)
 8012c0c:	7033      	strb	r3, [r6, #0]
 8012c0e:	46bc      	mov	ip, r7
 8012c10:	60f2      	str	r2, [r6, #12]
 8012c12:	4660      	mov	r0, ip
 8012c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c16:	2e00      	cmp	r6, #0
 8012c18:	d0ac      	beq.n	8012b74 <rcl_clock_init+0x1c>
 8012c1a:	2c00      	cmp	r4, #0
 8012c1c:	d0aa      	beq.n	8012b74 <rcl_clock_init+0x1c>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012c24:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012c44 <rcl_clock_init+0xec>
 8012c28:	6133      	str	r3, [r6, #16]
 8012c2a:	f106 0514 	add.w	r5, r6, #20
 8012c2e:	469c      	mov	ip, r3
 8012c30:	2702      	movs	r7, #2
 8012c32:	e7b1      	b.n	8012b98 <rcl_clock_init+0x40>
 8012c34:	f04f 0c0a 	mov.w	ip, #10
 8012c38:	e79e      	b.n	8012b78 <rcl_clock_init+0x20>
 8012c3a:	bf00      	nop
 8012c3c:	08012b39 	.word	0x08012b39
 8012c40:	08012b31 	.word	0x08012b31
 8012c44:	08012b29 	.word	0x08012b29

08012c48 <rcl_clock_get_now>:
 8012c48:	b140      	cbz	r0, 8012c5c <rcl_clock_get_now+0x14>
 8012c4a:	b139      	cbz	r1, 8012c5c <rcl_clock_get_now+0x14>
 8012c4c:	7803      	ldrb	r3, [r0, #0]
 8012c4e:	b11b      	cbz	r3, 8012c58 <rcl_clock_get_now+0x10>
 8012c50:	68c3      	ldr	r3, [r0, #12]
 8012c52:	b10b      	cbz	r3, 8012c58 <rcl_clock_get_now+0x10>
 8012c54:	6900      	ldr	r0, [r0, #16]
 8012c56:	4718      	bx	r3
 8012c58:	2001      	movs	r0, #1
 8012c5a:	4770      	bx	lr
 8012c5c:	200b      	movs	r0, #11
 8012c5e:	4770      	bx	lr

08012c60 <rcl_clock_add_jump_callback>:
 8012c60:	b082      	sub	sp, #8
 8012c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c66:	a906      	add	r1, sp, #24
 8012c68:	e881 000c 	stmia.w	r1, {r2, r3}
 8012c6c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012c70:	b320      	cbz	r0, 8012cbc <rcl_clock_add_jump_callback+0x5c>
 8012c72:	4604      	mov	r4, r0
 8012c74:	3014      	adds	r0, #20
 8012c76:	f7fa fb61 	bl	800d33c <rcutils_allocator_is_valid>
 8012c7a:	b1f8      	cbz	r0, 8012cbc <rcl_clock_add_jump_callback+0x5c>
 8012c7c:	b1f6      	cbz	r6, 8012cbc <rcl_clock_add_jump_callback+0x5c>
 8012c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	db1b      	blt.n	8012cbc <rcl_clock_add_jump_callback+0x5c>
 8012c84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012c88:	2a01      	cmp	r2, #1
 8012c8a:	f173 0300 	sbcs.w	r3, r3, #0
 8012c8e:	da15      	bge.n	8012cbc <rcl_clock_add_jump_callback+0x5c>
 8012c90:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012c94:	2f00      	cmp	r7, #0
 8012c96:	d042      	beq.n	8012d1e <rcl_clock_add_jump_callback+0xbe>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	e003      	b.n	8012ca6 <rcl_clock_add_jump_callback+0x46>
 8012c9e:	42bb      	cmp	r3, r7
 8012ca0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012ca4:	d011      	beq.n	8012cca <rcl_clock_add_jump_callback+0x6a>
 8012ca6:	6811      	ldr	r1, [r2, #0]
 8012ca8:	42b1      	cmp	r1, r6
 8012caa:	f103 0301 	add.w	r3, r3, #1
 8012cae:	d1f6      	bne.n	8012c9e <rcl_clock_add_jump_callback+0x3e>
 8012cb0:	6a11      	ldr	r1, [r2, #32]
 8012cb2:	42a9      	cmp	r1, r5
 8012cb4:	d1f3      	bne.n	8012c9e <rcl_clock_add_jump_callback+0x3e>
 8012cb6:	f04f 0e01 	mov.w	lr, #1
 8012cba:	e001      	b.n	8012cc0 <rcl_clock_add_jump_callback+0x60>
 8012cbc:	f04f 0e0b 	mov.w	lr, #11
 8012cc0:	4670      	mov	r0, lr
 8012cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc6:	b002      	add	sp, #8
 8012cc8:	4770      	bx	lr
 8012cca:	3301      	adds	r3, #1
 8012ccc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012cd0:	00d9      	lsls	r1, r3, #3
 8012cd2:	69e3      	ldr	r3, [r4, #28]
 8012cd4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012cd6:	4798      	blx	r3
 8012cd8:	b1f0      	cbz	r0, 8012d18 <rcl_clock_add_jump_callback+0xb8>
 8012cda:	68a3      	ldr	r3, [r4, #8]
 8012cdc:	6060      	str	r0, [r4, #4]
 8012cde:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012ce2:	f10d 0c18 	add.w	ip, sp, #24
 8012ce6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012cea:	f103 0801 	add.w	r8, r3, #1
 8012cee:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012cf2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012cf6:	f106 0708 	add.w	r7, r6, #8
 8012cfa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012cfc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012d00:	f04f 0e00 	mov.w	lr, #0
 8012d04:	e887 0003 	stmia.w	r7, {r0, r1}
 8012d08:	6235      	str	r5, [r6, #32]
 8012d0a:	4670      	mov	r0, lr
 8012d0c:	f8c4 8008 	str.w	r8, [r4, #8]
 8012d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d14:	b002      	add	sp, #8
 8012d16:	4770      	bx	lr
 8012d18:	f04f 0e0a 	mov.w	lr, #10
 8012d1c:	e7d0      	b.n	8012cc0 <rcl_clock_add_jump_callback+0x60>
 8012d1e:	2128      	movs	r1, #40	@ 0x28
 8012d20:	e7d7      	b.n	8012cd2 <rcl_clock_add_jump_callback+0x72>
 8012d22:	bf00      	nop

08012d24 <rcl_clock_remove_jump_callback>:
 8012d24:	2800      	cmp	r0, #0
 8012d26:	d057      	beq.n	8012dd8 <rcl_clock_remove_jump_callback+0xb4>
 8012d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d2c:	4605      	mov	r5, r0
 8012d2e:	3014      	adds	r0, #20
 8012d30:	4688      	mov	r8, r1
 8012d32:	4692      	mov	sl, r2
 8012d34:	f7fa fb02 	bl	800d33c <rcutils_allocator_is_valid>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	d03b      	beq.n	8012db4 <rcl_clock_remove_jump_callback+0x90>
 8012d3c:	f1b8 0f00 	cmp.w	r8, #0
 8012d40:	d038      	beq.n	8012db4 <rcl_clock_remove_jump_callback+0x90>
 8012d42:	68ae      	ldr	r6, [r5, #8]
 8012d44:	b166      	cbz	r6, 8012d60 <rcl_clock_remove_jump_callback+0x3c>
 8012d46:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012d4a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012d4e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012d52:	464c      	mov	r4, r9
 8012d54:	6823      	ldr	r3, [r4, #0]
 8012d56:	4543      	cmp	r3, r8
 8012d58:	d005      	beq.n	8012d66 <rcl_clock_remove_jump_callback+0x42>
 8012d5a:	3428      	adds	r4, #40	@ 0x28
 8012d5c:	42a7      	cmp	r7, r4
 8012d5e:	d1f9      	bne.n	8012d54 <rcl_clock_remove_jump_callback+0x30>
 8012d60:	2001      	movs	r0, #1
 8012d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d66:	6a23      	ldr	r3, [r4, #32]
 8012d68:	3428      	adds	r4, #40	@ 0x28
 8012d6a:	42bc      	cmp	r4, r7
 8012d6c:	d02d      	beq.n	8012dca <rcl_clock_remove_jump_callback+0xa6>
 8012d6e:	4553      	cmp	r3, sl
 8012d70:	d1f0      	bne.n	8012d54 <rcl_clock_remove_jump_callback+0x30>
 8012d72:	46a6      	mov	lr, r4
 8012d74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d78:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012d7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012d8c:	3428      	adds	r4, #40	@ 0x28
 8012d8e:	42a7      	cmp	r7, r4
 8012d90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012d94:	d1ed      	bne.n	8012d72 <rcl_clock_remove_jump_callback+0x4e>
 8012d96:	3e01      	subs	r6, #1
 8012d98:	60ae      	str	r6, [r5, #8]
 8012d9a:	b176      	cbz	r6, 8012dba <rcl_clock_remove_jump_callback+0x96>
 8012d9c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012da0:	69eb      	ldr	r3, [r5, #28]
 8012da2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012da4:	00f1      	lsls	r1, r6, #3
 8012da6:	4648      	mov	r0, r9
 8012da8:	4798      	blx	r3
 8012daa:	b1b8      	cbz	r0, 8012ddc <rcl_clock_remove_jump_callback+0xb8>
 8012dac:	6068      	str	r0, [r5, #4]
 8012dae:	2000      	movs	r0, #0
 8012db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012db4:	200b      	movs	r0, #11
 8012db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dba:	4648      	mov	r0, r9
 8012dbc:	69ab      	ldr	r3, [r5, #24]
 8012dbe:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012dc0:	4798      	blx	r3
 8012dc2:	606e      	str	r6, [r5, #4]
 8012dc4:	4630      	mov	r0, r6
 8012dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dca:	4553      	cmp	r3, sl
 8012dcc:	d1c8      	bne.n	8012d60 <rcl_clock_remove_jump_callback+0x3c>
 8012dce:	3e01      	subs	r6, #1
 8012dd0:	60ae      	str	r6, [r5, #8]
 8012dd2:	2e00      	cmp	r6, #0
 8012dd4:	d1e2      	bne.n	8012d9c <rcl_clock_remove_jump_callback+0x78>
 8012dd6:	e7f0      	b.n	8012dba <rcl_clock_remove_jump_callback+0x96>
 8012dd8:	200b      	movs	r0, #11
 8012dda:	4770      	bx	lr
 8012ddc:	200a      	movs	r0, #10
 8012dde:	e7ea      	b.n	8012db6 <rcl_clock_remove_jump_callback+0x92>

08012de0 <_rcl_timer_time_jump>:
 8012de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012de4:	4605      	mov	r5, r0
 8012de6:	b084      	sub	sp, #16
 8012de8:	4614      	mov	r4, r2
 8012dea:	b131      	cbz	r1, 8012dfa <_rcl_timer_time_jump+0x1a>
 8012dec:	7803      	ldrb	r3, [r0, #0]
 8012dee:	3b02      	subs	r3, #2
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	d93f      	bls.n	8012e74 <_rcl_timer_time_jump+0x94>
 8012df4:	b004      	add	sp, #16
 8012df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dfa:	6813      	ldr	r3, [r2, #0]
 8012dfc:	a902      	add	r1, sp, #8
 8012dfe:	6818      	ldr	r0, [r3, #0]
 8012e00:	f7ff ff22 	bl	8012c48 <rcl_clock_get_now>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d1f5      	bne.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012e08:	6820      	ldr	r0, [r4, #0]
 8012e0a:	2105      	movs	r1, #5
 8012e0c:	3020      	adds	r0, #32
 8012e0e:	f001 fdf7 	bl	8014a00 <__atomic_load_8>
 8012e12:	6823      	ldr	r3, [r4, #0]
 8012e14:	4681      	mov	r9, r0
 8012e16:	4688      	mov	r8, r1
 8012e18:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012e1c:	2105      	movs	r1, #5
 8012e1e:	f001 fdef 	bl	8014a00 <__atomic_load_8>
 8012e22:	4607      	mov	r7, r0
 8012e24:	6820      	ldr	r0, [r4, #0]
 8012e26:	460e      	mov	r6, r1
 8012e28:	3018      	adds	r0, #24
 8012e2a:	2105      	movs	r1, #5
 8012e2c:	f001 fde8 	bl	8014a00 <__atomic_load_8>
 8012e30:	782b      	ldrb	r3, [r5, #0]
 8012e32:	9a02      	ldr	r2, [sp, #8]
 8012e34:	3b02      	subs	r3, #2
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	460d      	mov	r5, r1
 8012e3a:	9b03      	ldr	r3, [sp, #12]
 8012e3c:	4682      	mov	sl, r0
 8012e3e:	d937      	bls.n	8012eb0 <_rcl_timer_time_jump+0xd0>
 8012e40:	42ba      	cmp	r2, r7
 8012e42:	eb73 0106 	sbcs.w	r1, r3, r6
 8012e46:	da5f      	bge.n	8012f08 <_rcl_timer_time_jump+0x128>
 8012e48:	454a      	cmp	r2, r9
 8012e4a:	eb73 0108 	sbcs.w	r1, r3, r8
 8012e4e:	dad1      	bge.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012e50:	6820      	ldr	r0, [r4, #0]
 8012e52:	eb1a 0202 	adds.w	r2, sl, r2
 8012e56:	eb43 0305 	adc.w	r3, r3, r5
 8012e5a:	2505      	movs	r5, #5
 8012e5c:	3028      	adds	r0, #40	@ 0x28
 8012e5e:	9500      	str	r5, [sp, #0]
 8012e60:	f001 fe04 	bl	8014a6c <__atomic_store_8>
 8012e64:	6820      	ldr	r0, [r4, #0]
 8012e66:	9500      	str	r5, [sp, #0]
 8012e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e6c:	3020      	adds	r0, #32
 8012e6e:	f001 fdfd 	bl	8014a6c <__atomic_store_8>
 8012e72:	e7bf      	b.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012e74:	6813      	ldr	r3, [r2, #0]
 8012e76:	a902      	add	r1, sp, #8
 8012e78:	6818      	ldr	r0, [r3, #0]
 8012e7a:	f7ff fee5 	bl	8012c48 <rcl_clock_get_now>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d1b8      	bne.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012e82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e86:	4313      	orrs	r3, r2
 8012e88:	d0b4      	beq.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012e8a:	6820      	ldr	r0, [r4, #0]
 8012e8c:	2105      	movs	r1, #5
 8012e8e:	3028      	adds	r0, #40	@ 0x28
 8012e90:	f001 fdb6 	bl	8014a00 <__atomic_load_8>
 8012e94:	9d02      	ldr	r5, [sp, #8]
 8012e96:	9b03      	ldr	r3, [sp, #12]
 8012e98:	4602      	mov	r2, r0
 8012e9a:	6820      	ldr	r0, [r4, #0]
 8012e9c:	1b52      	subs	r2, r2, r5
 8012e9e:	f04f 0405 	mov.w	r4, #5
 8012ea2:	9400      	str	r4, [sp, #0]
 8012ea4:	eb61 0303 	sbc.w	r3, r1, r3
 8012ea8:	3030      	adds	r0, #48	@ 0x30
 8012eaa:	f001 fddf 	bl	8014a6c <__atomic_store_8>
 8012eae:	e7a1      	b.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012eb0:	4313      	orrs	r3, r2
 8012eb2:	d09f      	beq.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012eb4:	6820      	ldr	r0, [r4, #0]
 8012eb6:	f04f 0805 	mov.w	r8, #5
 8012eba:	2300      	movs	r3, #0
 8012ebc:	f8cd 8000 	str.w	r8, [sp]
 8012ec0:	3030      	adds	r0, #48	@ 0x30
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f001 fe08 	bl	8014ad8 <__atomic_exchange_8>
 8012ec8:	ea51 0300 	orrs.w	r3, r1, r0
 8012ecc:	4606      	mov	r6, r0
 8012ece:	460f      	mov	r7, r1
 8012ed0:	d090      	beq.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012ed2:	9a02      	ldr	r2, [sp, #8]
 8012ed4:	9b03      	ldr	r3, [sp, #12]
 8012ed6:	f8cd 8000 	str.w	r8, [sp]
 8012eda:	1a12      	subs	r2, r2, r0
 8012edc:	6820      	ldr	r0, [r4, #0]
 8012ede:	eb63 0301 	sbc.w	r3, r3, r1
 8012ee2:	eb12 020a 	adds.w	r2, r2, sl
 8012ee6:	eb43 0305 	adc.w	r3, r3, r5
 8012eea:	3028      	adds	r0, #40	@ 0x28
 8012eec:	f001 fdbe 	bl	8014a6c <__atomic_store_8>
 8012ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ef4:	f8cd 8000 	str.w	r8, [sp]
 8012ef8:	6820      	ldr	r0, [r4, #0]
 8012efa:	1b92      	subs	r2, r2, r6
 8012efc:	eb63 0307 	sbc.w	r3, r3, r7
 8012f00:	3020      	adds	r0, #32
 8012f02:	f001 fdb3 	bl	8014a6c <__atomic_store_8>
 8012f06:	e775      	b.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012f08:	6820      	ldr	r0, [r4, #0]
 8012f0a:	3008      	adds	r0, #8
 8012f0c:	f004 f94a 	bl	80171a4 <rcl_trigger_guard_condition>
 8012f10:	e770      	b.n	8012df4 <_rcl_timer_time_jump+0x14>
 8012f12:	bf00      	nop

08012f14 <rcl_get_zero_initialized_timer>:
 8012f14:	4b01      	ldr	r3, [pc, #4]	@ (8012f1c <rcl_get_zero_initialized_timer+0x8>)
 8012f16:	6818      	ldr	r0, [r3, #0]
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop
 8012f1c:	080191f8 	.word	0x080191f8

08012f20 <rcl_timer_init>:
 8012f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f24:	b0aa      	sub	sp, #168	@ 0xa8
 8012f26:	4604      	mov	r4, r0
 8012f28:	a835      	add	r0, sp, #212	@ 0xd4
 8012f2a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012f2e:	460d      	mov	r5, r1
 8012f30:	4692      	mov	sl, r2
 8012f32:	f7fa fa03 	bl	800d33c <rcutils_allocator_is_valid>
 8012f36:	2800      	cmp	r0, #0
 8012f38:	d064      	beq.n	8013004 <rcl_timer_init+0xe4>
 8012f3a:	2c00      	cmp	r4, #0
 8012f3c:	d062      	beq.n	8013004 <rcl_timer_init+0xe4>
 8012f3e:	2d00      	cmp	r5, #0
 8012f40:	d060      	beq.n	8013004 <rcl_timer_init+0xe4>
 8012f42:	2f00      	cmp	r7, #0
 8012f44:	db5e      	blt.n	8013004 <rcl_timer_init+0xe4>
 8012f46:	6823      	ldr	r3, [r4, #0]
 8012f48:	b123      	cbz	r3, 8012f54 <rcl_timer_init+0x34>
 8012f4a:	2664      	movs	r6, #100	@ 0x64
 8012f4c:	4630      	mov	r0, r6
 8012f4e:	b02a      	add	sp, #168	@ 0xa8
 8012f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f54:	a908      	add	r1, sp, #32
 8012f56:	4628      	mov	r0, r5
 8012f58:	f7ff fe76 	bl	8012c48 <rcl_clock_get_now>
 8012f5c:	4606      	mov	r6, r0
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d1f4      	bne.n	8012f4c <rcl_timer_init+0x2c>
 8012f62:	ae06      	add	r6, sp, #24
 8012f64:	4630      	mov	r0, r6
 8012f66:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012f6a:	f004 f823 	bl	8016fb4 <rcl_get_zero_initialized_guard_condition>
 8012f6e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012f72:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012f76:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012f78:	e889 0003 	stmia.w	r9, {r0, r1}
 8012f7c:	4630      	mov	r0, r6
 8012f7e:	f004 f8f5 	bl	801716c <rcl_guard_condition_get_default_options>
 8012f82:	ab0d      	add	r3, sp, #52	@ 0x34
 8012f84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f88:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012f8c:	4651      	mov	r1, sl
 8012f8e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f92:	4648      	mov	r0, r9
 8012f94:	f004 f818 	bl	8016fc8 <rcl_guard_condition_init>
 8012f98:	4606      	mov	r6, r0
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	d1d6      	bne.n	8012f4c <rcl_timer_init+0x2c>
 8012f9e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d033      	beq.n	801300e <rcl_timer_init+0xee>
 8012fa6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012fa8:	911a      	str	r1, [sp, #104]	@ 0x68
 8012faa:	4642      	mov	r2, r8
 8012fac:	463b      	mov	r3, r7
 8012fae:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012fb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012fb6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013068 <rcl_timer_init+0x148>
 8012fba:	eb12 0008 	adds.w	r0, r2, r8
 8012fbe:	eb47 0103 	adc.w	r1, r7, r3
 8012fc2:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012fc6:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012fca:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012fce:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012fd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012fd6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012fda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012fde:	f8de 3000 	ldr.w	r3, [lr]
 8012fe2:	f8cc 3000 	str.w	r3, [ip]
 8012fe6:	f04f 0a00 	mov.w	sl, #0
 8012fea:	4619      	mov	r1, r3
 8012fec:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012ff0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012ff2:	2050      	movs	r0, #80	@ 0x50
 8012ff4:	4798      	blx	r3
 8012ff6:	6020      	str	r0, [r4, #0]
 8012ff8:	b358      	cbz	r0, 8013052 <rcl_timer_init+0x132>
 8012ffa:	2250      	movs	r2, #80	@ 0x50
 8012ffc:	a916      	add	r1, sp, #88	@ 0x58
 8012ffe:	f004 fea4 	bl	8017d4a <memcpy>
 8013002:	e7a3      	b.n	8012f4c <rcl_timer_init+0x2c>
 8013004:	260b      	movs	r6, #11
 8013006:	4630      	mov	r0, r6
 8013008:	b02a      	add	sp, #168	@ 0xa8
 801300a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801300e:	2001      	movs	r0, #1
 8013010:	2100      	movs	r1, #0
 8013012:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8013016:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801301a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801301e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8013022:	4a13      	ldr	r2, [pc, #76]	@ (8013070 <rcl_timer_init+0x150>)
 8013024:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013028:	9405      	str	r4, [sp, #20]
 801302a:	9204      	str	r2, [sp, #16]
 801302c:	ab12      	add	r3, sp, #72	@ 0x48
 801302e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013030:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013034:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013038:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801303c:	4628      	mov	r0, r5
 801303e:	f7ff fe0f 	bl	8012c60 <rcl_clock_add_jump_callback>
 8013042:	4682      	mov	sl, r0
 8013044:	2800      	cmp	r0, #0
 8013046:	d0ae      	beq.n	8012fa6 <rcl_timer_init+0x86>
 8013048:	4648      	mov	r0, r9
 801304a:	f004 f869 	bl	8017120 <rcl_guard_condition_fini>
 801304e:	4656      	mov	r6, sl
 8013050:	e77c      	b.n	8012f4c <rcl_timer_init+0x2c>
 8013052:	4648      	mov	r0, r9
 8013054:	f004 f864 	bl	8017120 <rcl_guard_condition_fini>
 8013058:	4905      	ldr	r1, [pc, #20]	@ (8013070 <rcl_timer_init+0x150>)
 801305a:	4622      	mov	r2, r4
 801305c:	4628      	mov	r0, r5
 801305e:	f7ff fe61 	bl	8012d24 <rcl_clock_remove_jump_callback>
 8013062:	260a      	movs	r6, #10
 8013064:	e772      	b.n	8012f4c <rcl_timer_init+0x2c>
 8013066:	bf00      	nop
	...
 8013070:	08012de1 	.word	0x08012de1

08013074 <rcl_timer_call>:
 8013074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013078:	b087      	sub	sp, #28
 801307a:	2800      	cmp	r0, #0
 801307c:	d06d      	beq.n	801315a <rcl_timer_call+0xe6>
 801307e:	6803      	ldr	r3, [r0, #0]
 8013080:	4604      	mov	r4, r0
 8013082:	2b00      	cmp	r3, #0
 8013084:	d063      	beq.n	801314e <rcl_timer_call+0xda>
 8013086:	f3bf 8f5b 	dmb	ish
 801308a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801308e:	f3bf 8f5b 	dmb	ish
 8013092:	2b00      	cmp	r3, #0
 8013094:	d150      	bne.n	8013138 <rcl_timer_call+0xc4>
 8013096:	6803      	ldr	r3, [r0, #0]
 8013098:	a904      	add	r1, sp, #16
 801309a:	6818      	ldr	r0, [r3, #0]
 801309c:	f7ff fdd4 	bl	8012c48 <rcl_clock_get_now>
 80130a0:	4605      	mov	r5, r0
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d14a      	bne.n	801313c <rcl_timer_call+0xc8>
 80130a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	db4a      	blt.n	8013144 <rcl_timer_call+0xd0>
 80130ae:	6820      	ldr	r0, [r4, #0]
 80130b0:	f04f 0a05 	mov.w	sl, #5
 80130b4:	f8cd a000 	str.w	sl, [sp]
 80130b8:	3020      	adds	r0, #32
 80130ba:	f001 fd0d 	bl	8014ad8 <__atomic_exchange_8>
 80130be:	6823      	ldr	r3, [r4, #0]
 80130c0:	f3bf 8f5b 	dmb	ish
 80130c4:	4680      	mov	r8, r0
 80130c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80130ca:	f3bf 8f5b 	dmb	ish
 80130ce:	6820      	ldr	r0, [r4, #0]
 80130d0:	4689      	mov	r9, r1
 80130d2:	3028      	adds	r0, #40	@ 0x28
 80130d4:	4651      	mov	r1, sl
 80130d6:	f001 fc93 	bl	8014a00 <__atomic_load_8>
 80130da:	4606      	mov	r6, r0
 80130dc:	6820      	ldr	r0, [r4, #0]
 80130de:	460f      	mov	r7, r1
 80130e0:	3018      	adds	r0, #24
 80130e2:	4651      	mov	r1, sl
 80130e4:	f001 fc8c 	bl	8014a00 <__atomic_load_8>
 80130e8:	1836      	adds	r6, r6, r0
 80130ea:	4602      	mov	r2, r0
 80130ec:	4682      	mov	sl, r0
 80130ee:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80130f2:	eb47 0701 	adc.w	r7, r7, r1
 80130f6:	4286      	cmp	r6, r0
 80130f8:	460b      	mov	r3, r1
 80130fa:	eb77 010c 	sbcs.w	r1, r7, ip
 80130fe:	da04      	bge.n	801310a <rcl_timer_call+0x96>
 8013100:	ea53 0102 	orrs.w	r1, r3, r2
 8013104:	d12e      	bne.n	8013164 <rcl_timer_call+0xf0>
 8013106:	4606      	mov	r6, r0
 8013108:	4667      	mov	r7, ip
 801310a:	6820      	ldr	r0, [r4, #0]
 801310c:	2105      	movs	r1, #5
 801310e:	4632      	mov	r2, r6
 8013110:	463b      	mov	r3, r7
 8013112:	3028      	adds	r0, #40	@ 0x28
 8013114:	9100      	str	r1, [sp, #0]
 8013116:	f001 fca9 	bl	8014a6c <__atomic_store_8>
 801311a:	f1bb 0f00 	cmp.w	fp, #0
 801311e:	d00d      	beq.n	801313c <rcl_timer_call+0xc8>
 8013120:	9a04      	ldr	r2, [sp, #16]
 8013122:	9b05      	ldr	r3, [sp, #20]
 8013124:	ebb2 0208 	subs.w	r2, r2, r8
 8013128:	4620      	mov	r0, r4
 801312a:	eb63 0309 	sbc.w	r3, r3, r9
 801312e:	47d8      	blx	fp
 8013130:	4628      	mov	r0, r5
 8013132:	b007      	add	sp, #28
 8013134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013138:	f240 3521 	movw	r5, #801	@ 0x321
 801313c:	4628      	mov	r0, r5
 801313e:	b007      	add	sp, #28
 8013140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013144:	2501      	movs	r5, #1
 8013146:	4628      	mov	r0, r5
 8013148:	b007      	add	sp, #28
 801314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801314e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013152:	4628      	mov	r0, r5
 8013154:	b007      	add	sp, #28
 8013156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801315a:	250b      	movs	r5, #11
 801315c:	4628      	mov	r0, r5
 801315e:	b007      	add	sp, #28
 8013160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013164:	1b80      	subs	r0, r0, r6
 8013166:	eb6c 0107 	sbc.w	r1, ip, r7
 801316a:	3801      	subs	r0, #1
 801316c:	f161 0100 	sbc.w	r1, r1, #0
 8013170:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013174:	f7ed fa78 	bl	8000668 <__aeabi_ldivmod>
 8013178:	9b02      	ldr	r3, [sp, #8]
 801317a:	3001      	adds	r0, #1
 801317c:	f141 0100 	adc.w	r1, r1, #0
 8013180:	fb00 f303 	mul.w	r3, r0, r3
 8013184:	fb01 330a 	mla	r3, r1, sl, r3
 8013188:	fba0 0a0a 	umull	r0, sl, r0, sl
 801318c:	1986      	adds	r6, r0, r6
 801318e:	4453      	add	r3, sl
 8013190:	eb43 0707 	adc.w	r7, r3, r7
 8013194:	e7b9      	b.n	801310a <rcl_timer_call+0x96>
 8013196:	bf00      	nop

08013198 <rcl_timer_is_ready>:
 8013198:	b570      	push	{r4, r5, r6, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	b378      	cbz	r0, 80131fe <rcl_timer_is_ready+0x66>
 801319e:	6803      	ldr	r3, [r0, #0]
 80131a0:	4604      	mov	r4, r0
 80131a2:	b383      	cbz	r3, 8013206 <rcl_timer_is_ready+0x6e>
 80131a4:	460d      	mov	r5, r1
 80131a6:	b351      	cbz	r1, 80131fe <rcl_timer_is_ready+0x66>
 80131a8:	f3bf 8f5b 	dmb	ish
 80131ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80131b0:	f3bf 8f5b 	dmb	ish
 80131b4:	b953      	cbnz	r3, 80131cc <rcl_timer_is_ready+0x34>
 80131b6:	6803      	ldr	r3, [r0, #0]
 80131b8:	4669      	mov	r1, sp
 80131ba:	6818      	ldr	r0, [r3, #0]
 80131bc:	f7ff fd44 	bl	8012c48 <rcl_clock_get_now>
 80131c0:	4606      	mov	r6, r0
 80131c2:	b140      	cbz	r0, 80131d6 <rcl_timer_is_ready+0x3e>
 80131c4:	f240 3321 	movw	r3, #801	@ 0x321
 80131c8:	4298      	cmp	r0, r3
 80131ca:	d101      	bne.n	80131d0 <rcl_timer_is_ready+0x38>
 80131cc:	2600      	movs	r6, #0
 80131ce:	702e      	strb	r6, [r5, #0]
 80131d0:	4630      	mov	r0, r6
 80131d2:	b002      	add	sp, #8
 80131d4:	bd70      	pop	{r4, r5, r6, pc}
 80131d6:	6820      	ldr	r0, [r4, #0]
 80131d8:	2105      	movs	r1, #5
 80131da:	3028      	adds	r0, #40	@ 0x28
 80131dc:	f001 fc10 	bl	8014a00 <__atomic_load_8>
 80131e0:	9b00      	ldr	r3, [sp, #0]
 80131e2:	1ac0      	subs	r0, r0, r3
 80131e4:	9b01      	ldr	r3, [sp, #4]
 80131e6:	eb61 0103 	sbc.w	r1, r1, r3
 80131ea:	2801      	cmp	r0, #1
 80131ec:	f171 0300 	sbcs.w	r3, r1, #0
 80131f0:	bfb4      	ite	lt
 80131f2:	2301      	movlt	r3, #1
 80131f4:	2300      	movge	r3, #0
 80131f6:	4630      	mov	r0, r6
 80131f8:	702b      	strb	r3, [r5, #0]
 80131fa:	b002      	add	sp, #8
 80131fc:	bd70      	pop	{r4, r5, r6, pc}
 80131fe:	260b      	movs	r6, #11
 8013200:	4630      	mov	r0, r6
 8013202:	b002      	add	sp, #8
 8013204:	bd70      	pop	{r4, r5, r6, pc}
 8013206:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801320a:	e7e1      	b.n	80131d0 <rcl_timer_is_ready+0x38>

0801320c <rcl_timer_get_time_until_next_call>:
 801320c:	b570      	push	{r4, r5, r6, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	b330      	cbz	r0, 8013260 <rcl_timer_get_time_until_next_call+0x54>
 8013212:	6803      	ldr	r3, [r0, #0]
 8013214:	4604      	mov	r4, r0
 8013216:	b33b      	cbz	r3, 8013268 <rcl_timer_get_time_until_next_call+0x5c>
 8013218:	460d      	mov	r5, r1
 801321a:	b309      	cbz	r1, 8013260 <rcl_timer_get_time_until_next_call+0x54>
 801321c:	f3bf 8f5b 	dmb	ish
 8013220:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013224:	f3bf 8f5b 	dmb	ish
 8013228:	b9ab      	cbnz	r3, 8013256 <rcl_timer_get_time_until_next_call+0x4a>
 801322a:	6803      	ldr	r3, [r0, #0]
 801322c:	4669      	mov	r1, sp
 801322e:	6818      	ldr	r0, [r3, #0]
 8013230:	f7ff fd0a 	bl	8012c48 <rcl_clock_get_now>
 8013234:	4606      	mov	r6, r0
 8013236:	b958      	cbnz	r0, 8013250 <rcl_timer_get_time_until_next_call+0x44>
 8013238:	6820      	ldr	r0, [r4, #0]
 801323a:	2105      	movs	r1, #5
 801323c:	3028      	adds	r0, #40	@ 0x28
 801323e:	f001 fbdf 	bl	8014a00 <__atomic_load_8>
 8013242:	9b00      	ldr	r3, [sp, #0]
 8013244:	1ac0      	subs	r0, r0, r3
 8013246:	9b01      	ldr	r3, [sp, #4]
 8013248:	6028      	str	r0, [r5, #0]
 801324a:	eb61 0103 	sbc.w	r1, r1, r3
 801324e:	6069      	str	r1, [r5, #4]
 8013250:	4630      	mov	r0, r6
 8013252:	b002      	add	sp, #8
 8013254:	bd70      	pop	{r4, r5, r6, pc}
 8013256:	f240 3621 	movw	r6, #801	@ 0x321
 801325a:	4630      	mov	r0, r6
 801325c:	b002      	add	sp, #8
 801325e:	bd70      	pop	{r4, r5, r6, pc}
 8013260:	260b      	movs	r6, #11
 8013262:	4630      	mov	r0, r6
 8013264:	b002      	add	sp, #8
 8013266:	bd70      	pop	{r4, r5, r6, pc}
 8013268:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801326c:	e7f0      	b.n	8013250 <rcl_timer_get_time_until_next_call+0x44>
 801326e:	bf00      	nop

08013270 <rcl_timer_get_guard_condition>:
 8013270:	b130      	cbz	r0, 8013280 <rcl_timer_get_guard_condition+0x10>
 8013272:	6800      	ldr	r0, [r0, #0]
 8013274:	b120      	cbz	r0, 8013280 <rcl_timer_get_guard_condition+0x10>
 8013276:	68c3      	ldr	r3, [r0, #12]
 8013278:	b10b      	cbz	r3, 801327e <rcl_timer_get_guard_condition+0xe>
 801327a:	3008      	adds	r0, #8
 801327c:	4770      	bx	lr
 801327e:	4618      	mov	r0, r3
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop

08013284 <rcl_validate_enclave_name_with_size>:
 8013284:	b378      	cbz	r0, 80132e6 <rcl_validate_enclave_name_with_size+0x62>
 8013286:	b570      	push	{r4, r5, r6, lr}
 8013288:	4615      	mov	r5, r2
 801328a:	b0c2      	sub	sp, #264	@ 0x108
 801328c:	b302      	cbz	r2, 80132d0 <rcl_validate_enclave_name_with_size+0x4c>
 801328e:	461e      	mov	r6, r3
 8013290:	466a      	mov	r2, sp
 8013292:	ab01      	add	r3, sp, #4
 8013294:	460c      	mov	r4, r1
 8013296:	f002 f815 	bl	80152c4 <rmw_validate_namespace_with_size>
 801329a:	4684      	mov	ip, r0
 801329c:	b9e8      	cbnz	r0, 80132da <rcl_validate_enclave_name_with_size+0x56>
 801329e:	9b00      	ldr	r3, [sp, #0]
 80132a0:	b923      	cbnz	r3, 80132ac <rcl_validate_enclave_name_with_size+0x28>
 80132a2:	2300      	movs	r3, #0
 80132a4:	602b      	str	r3, [r5, #0]
 80132a6:	4660      	mov	r0, ip
 80132a8:	b042      	add	sp, #264	@ 0x108
 80132aa:	bd70      	pop	{r4, r5, r6, pc}
 80132ac:	2b07      	cmp	r3, #7
 80132ae:	d007      	beq.n	80132c0 <rcl_validate_enclave_name_with_size+0x3c>
 80132b0:	1e5a      	subs	r2, r3, #1
 80132b2:	2a05      	cmp	r2, #5
 80132b4:	d833      	bhi.n	801331e <rcl_validate_enclave_name_with_size+0x9a>
 80132b6:	e8df f002 	tbb	[pc, r2]
 80132ba:	2c2f      	.short	0x2c2f
 80132bc:	1a232629 	.word	0x1a232629
 80132c0:	2cff      	cmp	r4, #255	@ 0xff
 80132c2:	d9ee      	bls.n	80132a2 <rcl_validate_enclave_name_with_size+0x1e>
 80132c4:	602b      	str	r3, [r5, #0]
 80132c6:	2e00      	cmp	r6, #0
 80132c8:	d0ed      	beq.n	80132a6 <rcl_validate_enclave_name_with_size+0x22>
 80132ca:	23fe      	movs	r3, #254	@ 0xfe
 80132cc:	6033      	str	r3, [r6, #0]
 80132ce:	e7ea      	b.n	80132a6 <rcl_validate_enclave_name_with_size+0x22>
 80132d0:	f04f 0c0b 	mov.w	ip, #11
 80132d4:	4660      	mov	r0, ip
 80132d6:	b042      	add	sp, #264	@ 0x108
 80132d8:	bd70      	pop	{r4, r5, r6, pc}
 80132da:	f7fe fe63 	bl	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 80132de:	4684      	mov	ip, r0
 80132e0:	4660      	mov	r0, ip
 80132e2:	b042      	add	sp, #264	@ 0x108
 80132e4:	bd70      	pop	{r4, r5, r6, pc}
 80132e6:	f04f 0c0b 	mov.w	ip, #11
 80132ea:	4660      	mov	r0, ip
 80132ec:	4770      	bx	lr
 80132ee:	2306      	movs	r3, #6
 80132f0:	602b      	str	r3, [r5, #0]
 80132f2:	2e00      	cmp	r6, #0
 80132f4:	d0d7      	beq.n	80132a6 <rcl_validate_enclave_name_with_size+0x22>
 80132f6:	9b01      	ldr	r3, [sp, #4]
 80132f8:	6033      	str	r3, [r6, #0]
 80132fa:	4660      	mov	r0, ip
 80132fc:	b042      	add	sp, #264	@ 0x108
 80132fe:	bd70      	pop	{r4, r5, r6, pc}
 8013300:	2305      	movs	r3, #5
 8013302:	602b      	str	r3, [r5, #0]
 8013304:	e7f5      	b.n	80132f2 <rcl_validate_enclave_name_with_size+0x6e>
 8013306:	2304      	movs	r3, #4
 8013308:	602b      	str	r3, [r5, #0]
 801330a:	e7f2      	b.n	80132f2 <rcl_validate_enclave_name_with_size+0x6e>
 801330c:	2303      	movs	r3, #3
 801330e:	602b      	str	r3, [r5, #0]
 8013310:	e7ef      	b.n	80132f2 <rcl_validate_enclave_name_with_size+0x6e>
 8013312:	2302      	movs	r3, #2
 8013314:	602b      	str	r3, [r5, #0]
 8013316:	e7ec      	b.n	80132f2 <rcl_validate_enclave_name_with_size+0x6e>
 8013318:	2301      	movs	r3, #1
 801331a:	602b      	str	r3, [r5, #0]
 801331c:	e7e9      	b.n	80132f2 <rcl_validate_enclave_name_with_size+0x6e>
 801331e:	4a04      	ldr	r2, [pc, #16]	@ (8013330 <rcl_validate_enclave_name_with_size+0xac>)
 8013320:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013324:	a802      	add	r0, sp, #8
 8013326:	f001 fd25 	bl	8014d74 <rcutils_snprintf>
 801332a:	f04f 0c01 	mov.w	ip, #1
 801332e:	e7ba      	b.n	80132a6 <rcl_validate_enclave_name_with_size+0x22>
 8013330:	080191fc 	.word	0x080191fc

08013334 <rcl_validate_enclave_name>:
 8013334:	b168      	cbz	r0, 8013352 <rcl_validate_enclave_name+0x1e>
 8013336:	b570      	push	{r4, r5, r6, lr}
 8013338:	460d      	mov	r5, r1
 801333a:	4616      	mov	r6, r2
 801333c:	4604      	mov	r4, r0
 801333e:	f7ec ff79 	bl	8000234 <strlen>
 8013342:	4633      	mov	r3, r6
 8013344:	4601      	mov	r1, r0
 8013346:	462a      	mov	r2, r5
 8013348:	4620      	mov	r0, r4
 801334a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801334e:	f7ff bf99 	b.w	8013284 <rcl_validate_enclave_name_with_size>
 8013352:	200b      	movs	r0, #11
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop

08013358 <rcl_get_zero_initialized_wait_set>:
 8013358:	b510      	push	{r4, lr}
 801335a:	4c08      	ldr	r4, [pc, #32]	@ (801337c <rcl_get_zero_initialized_wait_set+0x24>)
 801335c:	4686      	mov	lr, r0
 801335e:	4684      	mov	ip, r0
 8013360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013368:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801336c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801336e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013372:	6823      	ldr	r3, [r4, #0]
 8013374:	f8cc 3000 	str.w	r3, [ip]
 8013378:	4670      	mov	r0, lr
 801337a:	bd10      	pop	{r4, pc}
 801337c:	0801925c 	.word	0x0801925c

08013380 <rcl_wait_set_is_valid>:
 8013380:	b118      	cbz	r0, 801338a <rcl_wait_set_is_valid+0xa>
 8013382:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013384:	3800      	subs	r0, #0
 8013386:	bf18      	it	ne
 8013388:	2001      	movne	r0, #1
 801338a:	4770      	bx	lr

0801338c <rcl_wait_set_fini>:
 801338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013390:	b082      	sub	sp, #8
 8013392:	2800      	cmp	r0, #0
 8013394:	f000 8095 	beq.w	80134c2 <rcl_wait_set_fini+0x136>
 8013398:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801339a:	4604      	mov	r4, r0
 801339c:	2e00      	cmp	r6, #0
 801339e:	f000 808c 	beq.w	80134ba <rcl_wait_set_fini+0x12e>
 80133a2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80133a4:	f002 fd48 	bl	8015e38 <rmw_destroy_wait_set>
 80133a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133aa:	1e06      	subs	r6, r0, #0
 80133ac:	bf18      	it	ne
 80133ae:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80133b2:	2d00      	cmp	r5, #0
 80133b4:	f000 8081 	beq.w	80134ba <rcl_wait_set_fini+0x12e>
 80133b8:	6820      	ldr	r0, [r4, #0]
 80133ba:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80133be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133c0:	2700      	movs	r7, #0
 80133c2:	6067      	str	r7, [r4, #4]
 80133c4:	602f      	str	r7, [r5, #0]
 80133c6:	b120      	cbz	r0, 80133d2 <rcl_wait_set_fini+0x46>
 80133c8:	9101      	str	r1, [sp, #4]
 80133ca:	47c0      	blx	r8
 80133cc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133ce:	9901      	ldr	r1, [sp, #4]
 80133d0:	6027      	str	r7, [r4, #0]
 80133d2:	68a8      	ldr	r0, [r5, #8]
 80133d4:	b120      	cbz	r0, 80133e0 <rcl_wait_set_fini+0x54>
 80133d6:	47c0      	blx	r8
 80133d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133da:	2300      	movs	r3, #0
 80133dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80133e0:	68a0      	ldr	r0, [r4, #8]
 80133e2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80133e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133e6:	f04f 0800 	mov.w	r8, #0
 80133ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80133ee:	f8c5 800c 	str.w	r8, [r5, #12]
 80133f2:	b128      	cbz	r0, 8013400 <rcl_wait_set_fini+0x74>
 80133f4:	47b8      	blx	r7
 80133f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133f8:	f8c4 8008 	str.w	r8, [r4, #8]
 80133fc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80133fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013400:	6968      	ldr	r0, [r5, #20]
 8013402:	f04f 0800 	mov.w	r8, #0
 8013406:	f8c5 8010 	str.w	r8, [r5, #16]
 801340a:	b128      	cbz	r0, 8013418 <rcl_wait_set_fini+0x8c>
 801340c:	47b8      	blx	r7
 801340e:	f8c5 8014 	str.w	r8, [r5, #20]
 8013412:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013414:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013416:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013418:	6920      	ldr	r0, [r4, #16]
 801341a:	f04f 0800 	mov.w	r8, #0
 801341e:	f8c4 8014 	str.w	r8, [r4, #20]
 8013422:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8013426:	b128      	cbz	r0, 8013434 <rcl_wait_set_fini+0xa8>
 8013428:	47b8      	blx	r7
 801342a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801342c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013430:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013432:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013434:	69a0      	ldr	r0, [r4, #24]
 8013436:	f04f 0800 	mov.w	r8, #0
 801343a:	f8c4 801c 	str.w	r8, [r4, #28]
 801343e:	f8c5 8018 	str.w	r8, [r5, #24]
 8013442:	b128      	cbz	r0, 8013450 <rcl_wait_set_fini+0xc4>
 8013444:	9101      	str	r1, [sp, #4]
 8013446:	47b8      	blx	r7
 8013448:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801344a:	9901      	ldr	r1, [sp, #4]
 801344c:	f8c4 8018 	str.w	r8, [r4, #24]
 8013450:	6a28      	ldr	r0, [r5, #32]
 8013452:	b120      	cbz	r0, 801345e <rcl_wait_set_fini+0xd2>
 8013454:	47b8      	blx	r7
 8013456:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013458:	2300      	movs	r3, #0
 801345a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801345e:	6a20      	ldr	r0, [r4, #32]
 8013460:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013464:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013466:	2700      	movs	r7, #0
 8013468:	6267      	str	r7, [r4, #36]	@ 0x24
 801346a:	626f      	str	r7, [r5, #36]	@ 0x24
 801346c:	b120      	cbz	r0, 8013478 <rcl_wait_set_fini+0xec>
 801346e:	9101      	str	r1, [sp, #4]
 8013470:	47c0      	blx	r8
 8013472:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013474:	9901      	ldr	r1, [sp, #4]
 8013476:	6227      	str	r7, [r4, #32]
 8013478:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801347a:	b120      	cbz	r0, 8013486 <rcl_wait_set_fini+0xfa>
 801347c:	47c0      	blx	r8
 801347e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013480:	2300      	movs	r3, #0
 8013482:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013486:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013488:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801348c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801348e:	2700      	movs	r7, #0
 8013490:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013492:	632f      	str	r7, [r5, #48]	@ 0x30
 8013494:	b120      	cbz	r0, 80134a0 <rcl_wait_set_fini+0x114>
 8013496:	9101      	str	r1, [sp, #4]
 8013498:	47c0      	blx	r8
 801349a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801349c:	9901      	ldr	r1, [sp, #4]
 801349e:	62a7      	str	r7, [r4, #40]	@ 0x28
 80134a0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80134a2:	b120      	cbz	r0, 80134ae <rcl_wait_set_fini+0x122>
 80134a4:	47c0      	blx	r8
 80134a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80134a8:	2300      	movs	r3, #0
 80134aa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80134ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80134b0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80134b2:	4628      	mov	r0, r5
 80134b4:	4798      	blx	r3
 80134b6:	2300      	movs	r3, #0
 80134b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80134ba:	4630      	mov	r0, r6
 80134bc:	b002      	add	sp, #8
 80134be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c2:	260b      	movs	r6, #11
 80134c4:	4630      	mov	r0, r6
 80134c6:	b002      	add	sp, #8
 80134c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134cc <rcl_wait_set_add_subscription>:
 80134cc:	b318      	cbz	r0, 8013516 <rcl_wait_set_add_subscription+0x4a>
 80134ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80134d0:	b570      	push	{r4, r5, r6, lr}
 80134d2:	4604      	mov	r4, r0
 80134d4:	b30b      	cbz	r3, 801351a <rcl_wait_set_add_subscription+0x4e>
 80134d6:	b319      	cbz	r1, 8013520 <rcl_wait_set_add_subscription+0x54>
 80134d8:	681d      	ldr	r5, [r3, #0]
 80134da:	6840      	ldr	r0, [r0, #4]
 80134dc:	4285      	cmp	r5, r0
 80134de:	d217      	bcs.n	8013510 <rcl_wait_set_add_subscription+0x44>
 80134e0:	6820      	ldr	r0, [r4, #0]
 80134e2:	1c6e      	adds	r6, r5, #1
 80134e4:	601e      	str	r6, [r3, #0]
 80134e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80134ea:	b102      	cbz	r2, 80134ee <rcl_wait_set_add_subscription+0x22>
 80134ec:	6015      	str	r5, [r2, #0]
 80134ee:	4608      	mov	r0, r1
 80134f0:	f7ff fb0a 	bl	8012b08 <rcl_subscription_get_rmw_handle>
 80134f4:	b150      	cbz	r0, 801350c <rcl_wait_set_add_subscription+0x40>
 80134f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134f8:	6842      	ldr	r2, [r0, #4]
 80134fa:	689b      	ldr	r3, [r3, #8]
 80134fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013500:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013502:	6853      	ldr	r3, [r2, #4]
 8013504:	3301      	adds	r3, #1
 8013506:	2000      	movs	r0, #0
 8013508:	6053      	str	r3, [r2, #4]
 801350a:	bd70      	pop	{r4, r5, r6, pc}
 801350c:	2001      	movs	r0, #1
 801350e:	bd70      	pop	{r4, r5, r6, pc}
 8013510:	f240 3086 	movw	r0, #902	@ 0x386
 8013514:	bd70      	pop	{r4, r5, r6, pc}
 8013516:	200b      	movs	r0, #11
 8013518:	4770      	bx	lr
 801351a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801351e:	bd70      	pop	{r4, r5, r6, pc}
 8013520:	200b      	movs	r0, #11
 8013522:	bd70      	pop	{r4, r5, r6, pc}

08013524 <rcl_wait_set_clear>:
 8013524:	2800      	cmp	r0, #0
 8013526:	d073      	beq.n	8013610 <rcl_wait_set_clear+0xec>
 8013528:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801352a:	b510      	push	{r4, lr}
 801352c:	4604      	mov	r4, r0
 801352e:	2b00      	cmp	r3, #0
 8013530:	d070      	beq.n	8013614 <rcl_wait_set_clear+0xf0>
 8013532:	6800      	ldr	r0, [r0, #0]
 8013534:	b138      	cbz	r0, 8013546 <rcl_wait_set_clear+0x22>
 8013536:	6862      	ldr	r2, [r4, #4]
 8013538:	2100      	movs	r1, #0
 801353a:	0092      	lsls	r2, r2, #2
 801353c:	f004 fb3c 	bl	8017bb8 <memset>
 8013540:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013542:	2200      	movs	r2, #0
 8013544:	601a      	str	r2, [r3, #0]
 8013546:	68a0      	ldr	r0, [r4, #8]
 8013548:	b138      	cbz	r0, 801355a <rcl_wait_set_clear+0x36>
 801354a:	68e2      	ldr	r2, [r4, #12]
 801354c:	2100      	movs	r1, #0
 801354e:	0092      	lsls	r2, r2, #2
 8013550:	f004 fb32 	bl	8017bb8 <memset>
 8013554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013556:	2200      	movs	r2, #0
 8013558:	60da      	str	r2, [r3, #12]
 801355a:	69a0      	ldr	r0, [r4, #24]
 801355c:	b138      	cbz	r0, 801356e <rcl_wait_set_clear+0x4a>
 801355e:	69e2      	ldr	r2, [r4, #28]
 8013560:	2100      	movs	r1, #0
 8013562:	0092      	lsls	r2, r2, #2
 8013564:	f004 fb28 	bl	8017bb8 <memset>
 8013568:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801356a:	2200      	movs	r2, #0
 801356c:	619a      	str	r2, [r3, #24]
 801356e:	6a20      	ldr	r0, [r4, #32]
 8013570:	b138      	cbz	r0, 8013582 <rcl_wait_set_clear+0x5e>
 8013572:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013574:	2100      	movs	r1, #0
 8013576:	0092      	lsls	r2, r2, #2
 8013578:	f004 fb1e 	bl	8017bb8 <memset>
 801357c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801357e:	2200      	movs	r2, #0
 8013580:	625a      	str	r2, [r3, #36]	@ 0x24
 8013582:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013584:	b138      	cbz	r0, 8013596 <rcl_wait_set_clear+0x72>
 8013586:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013588:	2100      	movs	r1, #0
 801358a:	0092      	lsls	r2, r2, #2
 801358c:	f004 fb14 	bl	8017bb8 <memset>
 8013590:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013592:	2200      	movs	r2, #0
 8013594:	631a      	str	r2, [r3, #48]	@ 0x30
 8013596:	6920      	ldr	r0, [r4, #16]
 8013598:	b138      	cbz	r0, 80135aa <rcl_wait_set_clear+0x86>
 801359a:	6962      	ldr	r2, [r4, #20]
 801359c:	2100      	movs	r1, #0
 801359e:	0092      	lsls	r2, r2, #2
 80135a0:	f004 fb0a 	bl	8017bb8 <memset>
 80135a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135a6:	2200      	movs	r2, #0
 80135a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80135aa:	6898      	ldr	r0, [r3, #8]
 80135ac:	b138      	cbz	r0, 80135be <rcl_wait_set_clear+0x9a>
 80135ae:	685a      	ldr	r2, [r3, #4]
 80135b0:	2100      	movs	r1, #0
 80135b2:	0092      	lsls	r2, r2, #2
 80135b4:	f004 fb00 	bl	8017bb8 <memset>
 80135b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135ba:	2200      	movs	r2, #0
 80135bc:	605a      	str	r2, [r3, #4]
 80135be:	6958      	ldr	r0, [r3, #20]
 80135c0:	b138      	cbz	r0, 80135d2 <rcl_wait_set_clear+0xae>
 80135c2:	691a      	ldr	r2, [r3, #16]
 80135c4:	2100      	movs	r1, #0
 80135c6:	0092      	lsls	r2, r2, #2
 80135c8:	f004 faf6 	bl	8017bb8 <memset>
 80135cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135ce:	2200      	movs	r2, #0
 80135d0:	611a      	str	r2, [r3, #16]
 80135d2:	6a18      	ldr	r0, [r3, #32]
 80135d4:	b138      	cbz	r0, 80135e6 <rcl_wait_set_clear+0xc2>
 80135d6:	69da      	ldr	r2, [r3, #28]
 80135d8:	2100      	movs	r1, #0
 80135da:	0092      	lsls	r2, r2, #2
 80135dc:	f004 faec 	bl	8017bb8 <memset>
 80135e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135e2:	2200      	movs	r2, #0
 80135e4:	61da      	str	r2, [r3, #28]
 80135e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80135e8:	b138      	cbz	r0, 80135fa <rcl_wait_set_clear+0xd6>
 80135ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80135ec:	2100      	movs	r1, #0
 80135ee:	0092      	lsls	r2, r2, #2
 80135f0:	f004 fae2 	bl	8017bb8 <memset>
 80135f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135f6:	2200      	movs	r2, #0
 80135f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80135fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80135fc:	b138      	cbz	r0, 801360e <rcl_wait_set_clear+0xea>
 80135fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013600:	2100      	movs	r1, #0
 8013602:	0092      	lsls	r2, r2, #2
 8013604:	f004 fad8 	bl	8017bb8 <memset>
 8013608:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801360a:	2000      	movs	r0, #0
 801360c:	6358      	str	r0, [r3, #52]	@ 0x34
 801360e:	bd10      	pop	{r4, pc}
 8013610:	200b      	movs	r0, #11
 8013612:	4770      	bx	lr
 8013614:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013618:	bd10      	pop	{r4, pc}
 801361a:	bf00      	nop

0801361c <rcl_wait_set_resize>:
 801361c:	2800      	cmp	r0, #0
 801361e:	f000 8185 	beq.w	801392c <rcl_wait_set_resize+0x310>
 8013622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013626:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013628:	b083      	sub	sp, #12
 801362a:	4605      	mov	r5, r0
 801362c:	2c00      	cmp	r4, #0
 801362e:	f000 817f 	beq.w	8013930 <rcl_wait_set_resize+0x314>
 8013632:	f04f 0900 	mov.w	r9, #0
 8013636:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801363a:	461f      	mov	r7, r3
 801363c:	4688      	mov	r8, r1
 801363e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013642:	4616      	mov	r6, r2
 8013644:	f8c0 9004 	str.w	r9, [r0, #4]
 8013648:	f8c4 9000 	str.w	r9, [r4]
 801364c:	2900      	cmp	r1, #0
 801364e:	f000 80bd 	beq.w	80137cc <rcl_wait_set_resize+0x1b0>
 8013652:	008c      	lsls	r4, r1, #2
 8013654:	6800      	ldr	r0, [r0, #0]
 8013656:	9301      	str	r3, [sp, #4]
 8013658:	4652      	mov	r2, sl
 801365a:	4621      	mov	r1, r4
 801365c:	4798      	blx	r3
 801365e:	9b01      	ldr	r3, [sp, #4]
 8013660:	6028      	str	r0, [r5, #0]
 8013662:	2800      	cmp	r0, #0
 8013664:	f000 80cb 	beq.w	80137fe <rcl_wait_set_resize+0x1e2>
 8013668:	4622      	mov	r2, r4
 801366a:	4649      	mov	r1, r9
 801366c:	9301      	str	r3, [sp, #4]
 801366e:	f004 faa3 	bl	8017bb8 <memset>
 8013672:	f8c5 8004 	str.w	r8, [r5, #4]
 8013676:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801367a:	9b01      	ldr	r3, [sp, #4]
 801367c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013680:	f8c8 9004 	str.w	r9, [r8, #4]
 8013684:	4652      	mov	r2, sl
 8013686:	4621      	mov	r1, r4
 8013688:	4798      	blx	r3
 801368a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801368c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013690:	689b      	ldr	r3, [r3, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 80ac 	beq.w	80137f0 <rcl_wait_set_resize+0x1d4>
 8013698:	4622      	mov	r2, r4
 801369a:	4649      	mov	r1, r9
 801369c:	4618      	mov	r0, r3
 801369e:	f004 fa8b 	bl	8017bb8 <memset>
 80136a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136a8:	f04f 0800 	mov.w	r8, #0
 80136ac:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80136b0:	f8c5 800c 	str.w	r8, [r5, #12]
 80136b4:	f8c4 800c 	str.w	r8, [r4, #12]
 80136b8:	2e00      	cmp	r6, #0
 80136ba:	f040 80a4 	bne.w	8013806 <rcl_wait_set_resize+0x1ea>
 80136be:	68a8      	ldr	r0, [r5, #8]
 80136c0:	b128      	cbz	r0, 80136ce <rcl_wait_set_resize+0xb2>
 80136c2:	4649      	mov	r1, r9
 80136c4:	4790      	blx	r2
 80136c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136c8:	60ae      	str	r6, [r5, #8]
 80136ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136ce:	f04f 0800 	mov.w	r8, #0
 80136d2:	19f6      	adds	r6, r6, r7
 80136d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80136d8:	f040 80ac 	bne.w	8013834 <rcl_wait_set_resize+0x218>
 80136dc:	6960      	ldr	r0, [r4, #20]
 80136de:	b130      	cbz	r0, 80136ee <rcl_wait_set_resize+0xd2>
 80136e0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80136e2:	4649      	mov	r1, r9
 80136e4:	4798      	blx	r3
 80136e6:	6166      	str	r6, [r4, #20]
 80136e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136ee:	2600      	movs	r6, #0
 80136f0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80136f4:	616e      	str	r6, [r5, #20]
 80136f6:	6426      	str	r6, [r4, #64]	@ 0x40
 80136f8:	2f00      	cmp	r7, #0
 80136fa:	f040 80ad 	bne.w	8013858 <rcl_wait_set_resize+0x23c>
 80136fe:	6928      	ldr	r0, [r5, #16]
 8013700:	b138      	cbz	r0, 8013712 <rcl_wait_set_resize+0xf6>
 8013702:	4649      	mov	r1, r9
 8013704:	47d0      	blx	sl
 8013706:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013708:	612f      	str	r7, [r5, #16]
 801370a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801370e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013712:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013714:	2600      	movs	r6, #0
 8013716:	61ee      	str	r6, [r5, #28]
 8013718:	61a6      	str	r6, [r4, #24]
 801371a:	2b00      	cmp	r3, #0
 801371c:	f040 80af 	bne.w	801387e <rcl_wait_set_resize+0x262>
 8013720:	69a8      	ldr	r0, [r5, #24]
 8013722:	b120      	cbz	r0, 801372e <rcl_wait_set_resize+0x112>
 8013724:	4649      	mov	r1, r9
 8013726:	47d0      	blx	sl
 8013728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801372a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801372c:	61ab      	str	r3, [r5, #24]
 801372e:	6a20      	ldr	r0, [r4, #32]
 8013730:	b128      	cbz	r0, 801373e <rcl_wait_set_resize+0x122>
 8013732:	4649      	mov	r1, r9
 8013734:	47d0      	blx	sl
 8013736:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013738:	2300      	movs	r3, #0
 801373a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801373e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013740:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013742:	2600      	movs	r6, #0
 8013744:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013748:	626e      	str	r6, [r5, #36]	@ 0x24
 801374a:	6266      	str	r6, [r4, #36]	@ 0x24
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 80b6 	beq.w	80138be <rcl_wait_set_resize+0x2a2>
 8013752:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013756:	6a28      	ldr	r0, [r5, #32]
 8013758:	463a      	mov	r2, r7
 801375a:	4651      	mov	r1, sl
 801375c:	47c8      	blx	r9
 801375e:	6228      	str	r0, [r5, #32]
 8013760:	2800      	cmp	r0, #0
 8013762:	d04c      	beq.n	80137fe <rcl_wait_set_resize+0x1e2>
 8013764:	4652      	mov	r2, sl
 8013766:	4631      	mov	r1, r6
 8013768:	f004 fa26 	bl	8017bb8 <memset>
 801376c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801376e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013770:	626b      	str	r3, [r5, #36]	@ 0x24
 8013772:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013774:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013776:	463a      	mov	r2, r7
 8013778:	4651      	mov	r1, sl
 801377a:	47c8      	blx	r9
 801377c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801377e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013780:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013782:	2c00      	cmp	r4, #0
 8013784:	f000 80f0 	beq.w	8013968 <rcl_wait_set_resize+0x34c>
 8013788:	4620      	mov	r0, r4
 801378a:	4652      	mov	r2, sl
 801378c:	4631      	mov	r1, r6
 801378e:	f004 fa13 	bl	8017bb8 <memset>
 8013792:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013796:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013798:	2600      	movs	r6, #0
 801379a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801379e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80137a0:	6326      	str	r6, [r4, #48]	@ 0x30
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f040 809d 	bne.w	80138e2 <rcl_wait_set_resize+0x2c6>
 80137a8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80137aa:	b120      	cbz	r0, 80137b6 <rcl_wait_set_resize+0x19a>
 80137ac:	4639      	mov	r1, r7
 80137ae:	47c0      	blx	r8
 80137b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137b4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80137b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80137b8:	b310      	cbz	r0, 8013800 <rcl_wait_set_resize+0x1e4>
 80137ba:	4639      	mov	r1, r7
 80137bc:	47c0      	blx	r8
 80137be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80137c0:	2000      	movs	r0, #0
 80137c2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80137c6:	b003      	add	sp, #12
 80137c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137cc:	6800      	ldr	r0, [r0, #0]
 80137ce:	b120      	cbz	r0, 80137da <rcl_wait_set_resize+0x1be>
 80137d0:	4651      	mov	r1, sl
 80137d2:	47d8      	blx	fp
 80137d4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137d6:	f8c5 8000 	str.w	r8, [r5]
 80137da:	68a0      	ldr	r0, [r4, #8]
 80137dc:	2800      	cmp	r0, #0
 80137de:	f43f af61 	beq.w	80136a4 <rcl_wait_set_resize+0x88>
 80137e2:	4651      	mov	r1, sl
 80137e4:	47d8      	blx	fp
 80137e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137e8:	2300      	movs	r3, #0
 80137ea:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80137ee:	e759      	b.n	80136a4 <rcl_wait_set_resize+0x88>
 80137f0:	6828      	ldr	r0, [r5, #0]
 80137f2:	9301      	str	r3, [sp, #4]
 80137f4:	4651      	mov	r1, sl
 80137f6:	47d8      	blx	fp
 80137f8:	9b01      	ldr	r3, [sp, #4]
 80137fa:	e9c5 3300 	strd	r3, r3, [r5]
 80137fe:	200a      	movs	r0, #10
 8013800:	b003      	add	sp, #12
 8013802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013806:	00b4      	lsls	r4, r6, #2
 8013808:	68a8      	ldr	r0, [r5, #8]
 801380a:	464a      	mov	r2, r9
 801380c:	4621      	mov	r1, r4
 801380e:	4798      	blx	r3
 8013810:	60a8      	str	r0, [r5, #8]
 8013812:	2800      	cmp	r0, #0
 8013814:	d0f3      	beq.n	80137fe <rcl_wait_set_resize+0x1e2>
 8013816:	4622      	mov	r2, r4
 8013818:	4641      	mov	r1, r8
 801381a:	f004 f9cd 	bl	8017bb8 <memset>
 801381e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013820:	60ee      	str	r6, [r5, #12]
 8013822:	f04f 0800 	mov.w	r8, #0
 8013826:	19f6      	adds	r6, r6, r7
 8013828:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801382c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013830:	f43f af54 	beq.w	80136dc <rcl_wait_set_resize+0xc0>
 8013834:	00b6      	lsls	r6, r6, #2
 8013836:	464a      	mov	r2, r9
 8013838:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801383a:	6960      	ldr	r0, [r4, #20]
 801383c:	4631      	mov	r1, r6
 801383e:	4798      	blx	r3
 8013840:	4681      	mov	r9, r0
 8013842:	6160      	str	r0, [r4, #20]
 8013844:	2800      	cmp	r0, #0
 8013846:	d076      	beq.n	8013936 <rcl_wait_set_resize+0x31a>
 8013848:	4632      	mov	r2, r6
 801384a:	4641      	mov	r1, r8
 801384c:	f004 f9b4 	bl	8017bb8 <memset>
 8013850:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013852:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013856:	e74a      	b.n	80136ee <rcl_wait_set_resize+0xd2>
 8013858:	00bc      	lsls	r4, r7, #2
 801385a:	6928      	ldr	r0, [r5, #16]
 801385c:	464a      	mov	r2, r9
 801385e:	4621      	mov	r1, r4
 8013860:	47c0      	blx	r8
 8013862:	6128      	str	r0, [r5, #16]
 8013864:	2800      	cmp	r0, #0
 8013866:	d0ca      	beq.n	80137fe <rcl_wait_set_resize+0x1e2>
 8013868:	4622      	mov	r2, r4
 801386a:	4631      	mov	r1, r6
 801386c:	f004 f9a4 	bl	8017bb8 <memset>
 8013870:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013872:	616f      	str	r7, [r5, #20]
 8013874:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013878:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801387c:	e749      	b.n	8013712 <rcl_wait_set_resize+0xf6>
 801387e:	009c      	lsls	r4, r3, #2
 8013880:	69a8      	ldr	r0, [r5, #24]
 8013882:	464a      	mov	r2, r9
 8013884:	4621      	mov	r1, r4
 8013886:	47c0      	blx	r8
 8013888:	61a8      	str	r0, [r5, #24]
 801388a:	2800      	cmp	r0, #0
 801388c:	d0b7      	beq.n	80137fe <rcl_wait_set_resize+0x1e2>
 801388e:	4622      	mov	r2, r4
 8013890:	4631      	mov	r1, r6
 8013892:	f004 f991 	bl	8017bb8 <memset>
 8013896:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801389a:	61eb      	str	r3, [r5, #28]
 801389c:	6a38      	ldr	r0, [r7, #32]
 801389e:	61fe      	str	r6, [r7, #28]
 80138a0:	464a      	mov	r2, r9
 80138a2:	4621      	mov	r1, r4
 80138a4:	47c0      	blx	r8
 80138a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138a8:	6238      	str	r0, [r7, #32]
 80138aa:	6a1f      	ldr	r7, [r3, #32]
 80138ac:	2f00      	cmp	r7, #0
 80138ae:	d054      	beq.n	801395a <rcl_wait_set_resize+0x33e>
 80138b0:	4622      	mov	r2, r4
 80138b2:	4631      	mov	r1, r6
 80138b4:	4638      	mov	r0, r7
 80138b6:	f004 f97f 	bl	8017bb8 <memset>
 80138ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138bc:	e73f      	b.n	801373e <rcl_wait_set_resize+0x122>
 80138be:	6a28      	ldr	r0, [r5, #32]
 80138c0:	b120      	cbz	r0, 80138cc <rcl_wait_set_resize+0x2b0>
 80138c2:	4639      	mov	r1, r7
 80138c4:	47c0      	blx	r8
 80138c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138ca:	622b      	str	r3, [r5, #32]
 80138cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80138ce:	2800      	cmp	r0, #0
 80138d0:	f43f af60 	beq.w	8013794 <rcl_wait_set_resize+0x178>
 80138d4:	4639      	mov	r1, r7
 80138d6:	47c0      	blx	r8
 80138d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138da:	2300      	movs	r3, #0
 80138dc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80138e0:	e758      	b.n	8013794 <rcl_wait_set_resize+0x178>
 80138e2:	009c      	lsls	r4, r3, #2
 80138e4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80138e6:	463a      	mov	r2, r7
 80138e8:	4621      	mov	r1, r4
 80138ea:	47c8      	blx	r9
 80138ec:	62a8      	str	r0, [r5, #40]	@ 0x28
 80138ee:	2800      	cmp	r0, #0
 80138f0:	d085      	beq.n	80137fe <rcl_wait_set_resize+0x1e2>
 80138f2:	4622      	mov	r2, r4
 80138f4:	4631      	mov	r1, r6
 80138f6:	f004 f95f 	bl	8017bb8 <memset>
 80138fa:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80138fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013900:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013902:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013906:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801390a:	463a      	mov	r2, r7
 801390c:	4621      	mov	r1, r4
 801390e:	47c8      	blx	r9
 8013910:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013912:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013918:	b36b      	cbz	r3, 8013976 <rcl_wait_set_resize+0x35a>
 801391a:	4622      	mov	r2, r4
 801391c:	4631      	mov	r1, r6
 801391e:	4618      	mov	r0, r3
 8013920:	f004 f94a 	bl	8017bb8 <memset>
 8013924:	4630      	mov	r0, r6
 8013926:	b003      	add	sp, #12
 8013928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801392c:	200b      	movs	r0, #11
 801392e:	4770      	bx	lr
 8013930:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013934:	e764      	b.n	8013800 <rcl_wait_set_resize+0x1e4>
 8013936:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013938:	68a8      	ldr	r0, [r5, #8]
 801393a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801393e:	4798      	blx	r3
 8013940:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013942:	6928      	ldr	r0, [r5, #16]
 8013944:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013946:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013948:	f8c5 900c 	str.w	r9, [r5, #12]
 801394c:	f8c5 9008 	str.w	r9, [r5, #8]
 8013950:	4790      	blx	r2
 8013952:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013956:	200a      	movs	r0, #10
 8013958:	e752      	b.n	8013800 <rcl_wait_set_resize+0x1e4>
 801395a:	69a8      	ldr	r0, [r5, #24]
 801395c:	4649      	mov	r1, r9
 801395e:	47d0      	blx	sl
 8013960:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013964:	200a      	movs	r0, #10
 8013966:	e74b      	b.n	8013800 <rcl_wait_set_resize+0x1e4>
 8013968:	6a28      	ldr	r0, [r5, #32]
 801396a:	4639      	mov	r1, r7
 801396c:	47c0      	blx	r8
 801396e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013972:	200a      	movs	r0, #10
 8013974:	e744      	b.n	8013800 <rcl_wait_set_resize+0x1e4>
 8013976:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	4639      	mov	r1, r7
 801397c:	47c0      	blx	r8
 801397e:	9b01      	ldr	r3, [sp, #4]
 8013980:	200a      	movs	r0, #10
 8013982:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013986:	e73b      	b.n	8013800 <rcl_wait_set_resize+0x1e4>

08013988 <rcl_wait_set_init>:
 8013988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801398c:	b084      	sub	sp, #16
 801398e:	4604      	mov	r4, r0
 8013990:	a810      	add	r0, sp, #64	@ 0x40
 8013992:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013996:	460f      	mov	r7, r1
 8013998:	4690      	mov	r8, r2
 801399a:	4699      	mov	r9, r3
 801399c:	f7f9 fcce 	bl	800d33c <rcutils_allocator_is_valid>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d06b      	beq.n	8013a7c <rcl_wait_set_init+0xf4>
 80139a4:	2c00      	cmp	r4, #0
 80139a6:	d069      	beq.n	8013a7c <rcl_wait_set_init+0xf4>
 80139a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80139aa:	b125      	cbz	r5, 80139b6 <rcl_wait_set_init+0x2e>
 80139ac:	2564      	movs	r5, #100	@ 0x64
 80139ae:	4628      	mov	r0, r5
 80139b0:	b004      	add	sp, #16
 80139b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139b6:	f1ba 0f00 	cmp.w	sl, #0
 80139ba:	d05f      	beq.n	8013a7c <rcl_wait_set_init+0xf4>
 80139bc:	4650      	mov	r0, sl
 80139be:	f7fe fb0f 	bl	8011fe0 <rcl_context_is_valid>
 80139c2:	2800      	cmp	r0, #0
 80139c4:	d067      	beq.n	8013a96 <rcl_wait_set_init+0x10e>
 80139c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139c8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80139ca:	205c      	movs	r0, #92	@ 0x5c
 80139cc:	4798      	blx	r3
 80139ce:	6320      	str	r0, [r4, #48]	@ 0x30
 80139d0:	2800      	cmp	r0, #0
 80139d2:	d062      	beq.n	8013a9a <rcl_wait_set_init+0x112>
 80139d4:	4629      	mov	r1, r5
 80139d6:	225c      	movs	r2, #92	@ 0x5c
 80139d8:	f004 f8ee 	bl	8017bb8 <memset>
 80139dc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80139e0:	eb03 0e02 	add.w	lr, r3, r2
 80139e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139e6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80139e8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80139ec:	449e      	add	lr, r3
 80139ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139f2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80139f6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80139fa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80139fe:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013a02:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013a06:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013a0a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013a0e:	f8da a000 	ldr.w	sl, [sl]
 8013a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a14:	44c6      	add	lr, r8
 8013a16:	f8dc 3000 	ldr.w	r3, [ip]
 8013a1a:	602b      	str	r3, [r5, #0]
 8013a1c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013a20:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013a24:	f002 f9fe 	bl	8015e24 <rmw_create_wait_set>
 8013a28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a2a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8013a2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013a2e:	b350      	cbz	r0, 8013a86 <rcl_wait_set_init+0xfe>
 8013a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a32:	9302      	str	r3, [sp, #8]
 8013a34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a36:	9301      	str	r3, [sp, #4]
 8013a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a3a:	9300      	str	r3, [sp, #0]
 8013a3c:	4642      	mov	r2, r8
 8013a3e:	464b      	mov	r3, r9
 8013a40:	4639      	mov	r1, r7
 8013a42:	4620      	mov	r0, r4
 8013a44:	f7ff fdea 	bl	801361c <rcl_wait_set_resize>
 8013a48:	4605      	mov	r5, r0
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d0af      	beq.n	80139ae <rcl_wait_set_init+0x26>
 8013a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a50:	bb2b      	cbnz	r3, 8013a9e <rcl_wait_set_init+0x116>
 8013a52:	2600      	movs	r6, #0
 8013a54:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013a58:	9600      	str	r6, [sp, #0]
 8013a5a:	4633      	mov	r3, r6
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	4631      	mov	r1, r6
 8013a60:	4620      	mov	r0, r4
 8013a62:	f7ff fddb 	bl	801361c <rcl_wait_set_resize>
 8013a66:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d0a0      	beq.n	80139ae <rcl_wait_set_init+0x26>
 8013a6c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013a6e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013a70:	4798      	blx	r3
 8013a72:	4628      	mov	r0, r5
 8013a74:	6326      	str	r6, [r4, #48]	@ 0x30
 8013a76:	b004      	add	sp, #16
 8013a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a7c:	250b      	movs	r5, #11
 8013a7e:	4628      	mov	r0, r5
 8013a80:	b004      	add	sp, #16
 8013a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a86:	2501      	movs	r5, #1
 8013a88:	f002 f9d6 	bl	8015e38 <rmw_destroy_wait_set>
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	bf18      	it	ne
 8013a90:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013a94:	e7dd      	b.n	8013a52 <rcl_wait_set_init+0xca>
 8013a96:	2565      	movs	r5, #101	@ 0x65
 8013a98:	e789      	b.n	80139ae <rcl_wait_set_init+0x26>
 8013a9a:	250a      	movs	r5, #10
 8013a9c:	e787      	b.n	80139ae <rcl_wait_set_init+0x26>
 8013a9e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013aa0:	e7f2      	b.n	8013a88 <rcl_wait_set_init+0x100>
 8013aa2:	bf00      	nop

08013aa4 <rcl_wait_set_add_guard_condition>:
 8013aa4:	b318      	cbz	r0, 8013aee <rcl_wait_set_add_guard_condition+0x4a>
 8013aa6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013aa8:	b570      	push	{r4, r5, r6, lr}
 8013aaa:	4604      	mov	r4, r0
 8013aac:	b30b      	cbz	r3, 8013af2 <rcl_wait_set_add_guard_condition+0x4e>
 8013aae:	b319      	cbz	r1, 8013af8 <rcl_wait_set_add_guard_condition+0x54>
 8013ab0:	68dd      	ldr	r5, [r3, #12]
 8013ab2:	68c0      	ldr	r0, [r0, #12]
 8013ab4:	4285      	cmp	r5, r0
 8013ab6:	d217      	bcs.n	8013ae8 <rcl_wait_set_add_guard_condition+0x44>
 8013ab8:	68a0      	ldr	r0, [r4, #8]
 8013aba:	1c6e      	adds	r6, r5, #1
 8013abc:	60de      	str	r6, [r3, #12]
 8013abe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013ac2:	b102      	cbz	r2, 8013ac6 <rcl_wait_set_add_guard_condition+0x22>
 8013ac4:	6015      	str	r5, [r2, #0]
 8013ac6:	4608      	mov	r0, r1
 8013ac8:	f003 fb7c 	bl	80171c4 <rcl_guard_condition_get_rmw_handle>
 8013acc:	b150      	cbz	r0, 8013ae4 <rcl_wait_set_add_guard_condition+0x40>
 8013ace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ad0:	6842      	ldr	r2, [r0, #4]
 8013ad2:	695b      	ldr	r3, [r3, #20]
 8013ad4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ad8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013ada:	6913      	ldr	r3, [r2, #16]
 8013adc:	3301      	adds	r3, #1
 8013ade:	2000      	movs	r0, #0
 8013ae0:	6113      	str	r3, [r2, #16]
 8013ae2:	bd70      	pop	{r4, r5, r6, pc}
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	bd70      	pop	{r4, r5, r6, pc}
 8013ae8:	f240 3086 	movw	r0, #902	@ 0x386
 8013aec:	bd70      	pop	{r4, r5, r6, pc}
 8013aee:	200b      	movs	r0, #11
 8013af0:	4770      	bx	lr
 8013af2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013af6:	bd70      	pop	{r4, r5, r6, pc}
 8013af8:	200b      	movs	r0, #11
 8013afa:	bd70      	pop	{r4, r5, r6, pc}

08013afc <rcl_wait_set_add_timer>:
 8013afc:	b328      	cbz	r0, 8013b4a <rcl_wait_set_add_timer+0x4e>
 8013afe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b00:	b570      	push	{r4, r5, r6, lr}
 8013b02:	4604      	mov	r4, r0
 8013b04:	b31b      	cbz	r3, 8013b4e <rcl_wait_set_add_timer+0x52>
 8013b06:	b329      	cbz	r1, 8013b54 <rcl_wait_set_add_timer+0x58>
 8013b08:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013b0a:	6965      	ldr	r5, [r4, #20]
 8013b0c:	42a8      	cmp	r0, r5
 8013b0e:	d219      	bcs.n	8013b44 <rcl_wait_set_add_timer+0x48>
 8013b10:	6925      	ldr	r5, [r4, #16]
 8013b12:	1c46      	adds	r6, r0, #1
 8013b14:	641e      	str	r6, [r3, #64]	@ 0x40
 8013b16:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013b1a:	b102      	cbz	r2, 8013b1e <rcl_wait_set_add_timer+0x22>
 8013b1c:	6010      	str	r0, [r2, #0]
 8013b1e:	4608      	mov	r0, r1
 8013b20:	f7ff fba6 	bl	8013270 <rcl_timer_get_guard_condition>
 8013b24:	b168      	cbz	r0, 8013b42 <rcl_wait_set_add_timer+0x46>
 8013b26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b28:	68e3      	ldr	r3, [r4, #12]
 8013b2a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013b2c:	3b01      	subs	r3, #1
 8013b2e:	441d      	add	r5, r3
 8013b30:	f003 fb48 	bl	80171c4 <rcl_guard_condition_get_rmw_handle>
 8013b34:	b180      	cbz	r0, 8013b58 <rcl_wait_set_add_timer+0x5c>
 8013b36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b38:	6842      	ldr	r2, [r0, #4]
 8013b3a:	695b      	ldr	r3, [r3, #20]
 8013b3c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b40:	2000      	movs	r0, #0
 8013b42:	bd70      	pop	{r4, r5, r6, pc}
 8013b44:	f240 3086 	movw	r0, #902	@ 0x386
 8013b48:	bd70      	pop	{r4, r5, r6, pc}
 8013b4a:	200b      	movs	r0, #11
 8013b4c:	4770      	bx	lr
 8013b4e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b52:	bd70      	pop	{r4, r5, r6, pc}
 8013b54:	200b      	movs	r0, #11
 8013b56:	bd70      	pop	{r4, r5, r6, pc}
 8013b58:	2001      	movs	r0, #1
 8013b5a:	bd70      	pop	{r4, r5, r6, pc}

08013b5c <rcl_wait_set_add_client>:
 8013b5c:	b318      	cbz	r0, 8013ba6 <rcl_wait_set_add_client+0x4a>
 8013b5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	4604      	mov	r4, r0
 8013b64:	b30b      	cbz	r3, 8013baa <rcl_wait_set_add_client+0x4e>
 8013b66:	b319      	cbz	r1, 8013bb0 <rcl_wait_set_add_client+0x54>
 8013b68:	699d      	ldr	r5, [r3, #24]
 8013b6a:	69c0      	ldr	r0, [r0, #28]
 8013b6c:	4285      	cmp	r5, r0
 8013b6e:	d217      	bcs.n	8013ba0 <rcl_wait_set_add_client+0x44>
 8013b70:	69a0      	ldr	r0, [r4, #24]
 8013b72:	1c6e      	adds	r6, r5, #1
 8013b74:	619e      	str	r6, [r3, #24]
 8013b76:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013b7a:	b102      	cbz	r2, 8013b7e <rcl_wait_set_add_client+0x22>
 8013b7c:	6015      	str	r5, [r2, #0]
 8013b7e:	4608      	mov	r0, r1
 8013b80:	f7fe f980 	bl	8011e84 <rcl_client_get_rmw_handle>
 8013b84:	b150      	cbz	r0, 8013b9c <rcl_wait_set_add_client+0x40>
 8013b86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b88:	6842      	ldr	r2, [r0, #4]
 8013b8a:	6a1b      	ldr	r3, [r3, #32]
 8013b8c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b90:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b92:	69d3      	ldr	r3, [r2, #28]
 8013b94:	3301      	adds	r3, #1
 8013b96:	2000      	movs	r0, #0
 8013b98:	61d3      	str	r3, [r2, #28]
 8013b9a:	bd70      	pop	{r4, r5, r6, pc}
 8013b9c:	2001      	movs	r0, #1
 8013b9e:	bd70      	pop	{r4, r5, r6, pc}
 8013ba0:	f240 3086 	movw	r0, #902	@ 0x386
 8013ba4:	bd70      	pop	{r4, r5, r6, pc}
 8013ba6:	200b      	movs	r0, #11
 8013ba8:	4770      	bx	lr
 8013baa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013bae:	bd70      	pop	{r4, r5, r6, pc}
 8013bb0:	200b      	movs	r0, #11
 8013bb2:	bd70      	pop	{r4, r5, r6, pc}

08013bb4 <rcl_wait_set_add_service>:
 8013bb4:	b318      	cbz	r0, 8013bfe <rcl_wait_set_add_service+0x4a>
 8013bb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013bb8:	b570      	push	{r4, r5, r6, lr}
 8013bba:	4604      	mov	r4, r0
 8013bbc:	b30b      	cbz	r3, 8013c02 <rcl_wait_set_add_service+0x4e>
 8013bbe:	b319      	cbz	r1, 8013c08 <rcl_wait_set_add_service+0x54>
 8013bc0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013bc2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013bc4:	4285      	cmp	r5, r0
 8013bc6:	d217      	bcs.n	8013bf8 <rcl_wait_set_add_service+0x44>
 8013bc8:	6a20      	ldr	r0, [r4, #32]
 8013bca:	1c6e      	adds	r6, r5, #1
 8013bcc:	625e      	str	r6, [r3, #36]	@ 0x24
 8013bce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013bd2:	b102      	cbz	r2, 8013bd6 <rcl_wait_set_add_service+0x22>
 8013bd4:	6015      	str	r5, [r2, #0]
 8013bd6:	4608      	mov	r0, r1
 8013bd8:	f7fe fed6 	bl	8012988 <rcl_service_get_rmw_handle>
 8013bdc:	b150      	cbz	r0, 8013bf4 <rcl_wait_set_add_service+0x40>
 8013bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013be0:	6842      	ldr	r2, [r0, #4]
 8013be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013be4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013be8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013bea:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013bec:	3301      	adds	r3, #1
 8013bee:	2000      	movs	r0, #0
 8013bf0:	6293      	str	r3, [r2, #40]	@ 0x28
 8013bf2:	bd70      	pop	{r4, r5, r6, pc}
 8013bf4:	2001      	movs	r0, #1
 8013bf6:	bd70      	pop	{r4, r5, r6, pc}
 8013bf8:	f240 3086 	movw	r0, #902	@ 0x386
 8013bfc:	bd70      	pop	{r4, r5, r6, pc}
 8013bfe:	200b      	movs	r0, #11
 8013c00:	4770      	bx	lr
 8013c02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013c06:	bd70      	pop	{r4, r5, r6, pc}
 8013c08:	200b      	movs	r0, #11
 8013c0a:	bd70      	pop	{r4, r5, r6, pc}
 8013c0c:	0000      	movs	r0, r0
	...

08013c10 <rcl_wait>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	ed2d 8b02 	vpush	{d8}
 8013c18:	b08d      	sub	sp, #52	@ 0x34
 8013c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	f000 8143 	beq.w	8013eaa <rcl_wait+0x29a>
 8013c24:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013c26:	4605      	mov	r5, r0
 8013c28:	2e00      	cmp	r6, #0
 8013c2a:	f000 8112 	beq.w	8013e52 <rcl_wait+0x242>
 8013c2e:	6843      	ldr	r3, [r0, #4]
 8013c30:	b983      	cbnz	r3, 8013c54 <rcl_wait+0x44>
 8013c32:	68eb      	ldr	r3, [r5, #12]
 8013c34:	b973      	cbnz	r3, 8013c54 <rcl_wait+0x44>
 8013c36:	696b      	ldr	r3, [r5, #20]
 8013c38:	b963      	cbnz	r3, 8013c54 <rcl_wait+0x44>
 8013c3a:	69eb      	ldr	r3, [r5, #28]
 8013c3c:	b953      	cbnz	r3, 8013c54 <rcl_wait+0x44>
 8013c3e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013c40:	b943      	cbnz	r3, 8013c54 <rcl_wait+0x44>
 8013c42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013c44:	b933      	cbnz	r3, 8013c54 <rcl_wait+0x44>
 8013c46:	f240 3085 	movw	r0, #901	@ 0x385
 8013c4a:	b00d      	add	sp, #52	@ 0x34
 8013c4c:	ecbd 8b02 	vpop	{d8}
 8013c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c54:	9b04      	ldr	r3, [sp, #16]
 8013c56:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	9b05      	ldr	r3, [sp, #20]
 8013c5c:	f173 0300 	sbcs.w	r3, r3, #0
 8013c60:	f2c0 80f0 	blt.w	8013e44 <rcl_wait+0x234>
 8013c64:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013c68:	4643      	mov	r3, r8
 8013c6a:	2a00      	cmp	r2, #0
 8013c6c:	f000 8133 	beq.w	8013ed6 <rcl_wait+0x2c6>
 8013c70:	2400      	movs	r4, #0
 8013c72:	4613      	mov	r3, r2
 8013c74:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013ee8 <rcl_wait+0x2d8>
 8013c78:	46a2      	mov	sl, r4
 8013c7a:	46a3      	mov	fp, r4
 8013c7c:	f240 3921 	movw	r9, #801	@ 0x321
 8013c80:	4632      	mov	r2, r6
 8013c82:	e014      	b.n	8013cae <rcl_wait+0x9e>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d1e0      	bne.n	8013c4a <rcl_wait+0x3a>
 8013c88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c8c:	4542      	cmp	r2, r8
 8013c8e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013c92:	da03      	bge.n	8013c9c <rcl_wait+0x8c>
 8013c94:	4690      	mov	r8, r2
 8013c96:	461f      	mov	r7, r3
 8013c98:	f04f 0b01 	mov.w	fp, #1
 8013c9c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013c9e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013ca0:	3401      	adds	r4, #1
 8013ca2:	f14a 0a00 	adc.w	sl, sl, #0
 8013ca6:	429c      	cmp	r4, r3
 8013ca8:	f17a 0100 	sbcs.w	r1, sl, #0
 8013cac:	d228      	bcs.n	8013d00 <rcl_wait+0xf0>
 8013cae:	6928      	ldr	r0, [r5, #16]
 8013cb0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013cb4:	a908      	add	r1, sp, #32
 8013cb6:	00a6      	lsls	r6, r4, #2
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d0f1      	beq.n	8013ca0 <rcl_wait+0x90>
 8013cbc:	68eb      	ldr	r3, [r5, #12]
 8013cbe:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013cc2:	4423      	add	r3, r4
 8013cc4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013cc8:	f1be 0f00 	cmp.w	lr, #0
 8013ccc:	d006      	beq.n	8013cdc <rcl_wait+0xcc>
 8013cce:	6913      	ldr	r3, [r2, #16]
 8013cd0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	6113      	str	r3, [r2, #16]
 8013cd8:	692b      	ldr	r3, [r5, #16]
 8013cda:	5998      	ldr	r0, [r3, r6]
 8013cdc:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013ce0:	f7ff fa94 	bl	801320c <rcl_timer_get_time_until_next_call>
 8013ce4:	4548      	cmp	r0, r9
 8013ce6:	d1cd      	bne.n	8013c84 <rcl_wait+0x74>
 8013ce8:	692b      	ldr	r3, [r5, #16]
 8013cea:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013cec:	2100      	movs	r1, #0
 8013cee:	5199      	str	r1, [r3, r6]
 8013cf0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013cf2:	3401      	adds	r4, #1
 8013cf4:	f14a 0a00 	adc.w	sl, sl, #0
 8013cf8:	429c      	cmp	r4, r3
 8013cfa:	f17a 0100 	sbcs.w	r1, sl, #0
 8013cfe:	d3d6      	bcc.n	8013cae <rcl_wait+0x9e>
 8013d00:	4616      	mov	r6, r2
 8013d02:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013d06:	4313      	orrs	r3, r2
 8013d08:	46d9      	mov	r9, fp
 8013d0a:	f040 80a9 	bne.w	8013e60 <rcl_wait+0x250>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	2200      	movs	r2, #0
 8013d12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013d16:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013d1a:	ab08      	add	r3, sp, #32
 8013d1c:	9302      	str	r3, [sp, #8]
 8013d1e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013d20:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013d24:	e9cd 3200 	strd	r3, r2, [sp]
 8013d28:	f106 0110 	add.w	r1, r6, #16
 8013d2c:	f106 031c 	add.w	r3, r6, #28
 8013d30:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013d34:	1d30      	adds	r0, r6, #4
 8013d36:	f001 fefd 	bl	8015b34 <rmw_wait>
 8013d3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013d3e:	4680      	mov	r8, r0
 8013d40:	b1ca      	cbz	r2, 8013d76 <rcl_wait+0x166>
 8013d42:	2400      	movs	r4, #0
 8013d44:	4627      	mov	r7, r4
 8013d46:	692a      	ldr	r2, [r5, #16]
 8013d48:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013d4c:	f10d 011f 	add.w	r1, sp, #31
 8013d50:	00a6      	lsls	r6, r4, #2
 8013d52:	b160      	cbz	r0, 8013d6e <rcl_wait+0x15e>
 8013d54:	f88d 701f 	strb.w	r7, [sp, #31]
 8013d58:	f7ff fa1e 	bl	8013198 <rcl_timer_is_ready>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f47f af74 	bne.w	8013c4a <rcl_wait+0x3a>
 8013d62:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013d66:	b90b      	cbnz	r3, 8013d6c <rcl_wait+0x15c>
 8013d68:	692a      	ldr	r2, [r5, #16]
 8013d6a:	5193      	str	r3, [r2, r6]
 8013d6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013d70:	3401      	adds	r4, #1
 8013d72:	42a2      	cmp	r2, r4
 8013d74:	d8e7      	bhi.n	8013d46 <rcl_wait+0x136>
 8013d76:	f038 0002 	bics.w	r0, r8, #2
 8013d7a:	f040 8090 	bne.w	8013e9e <rcl_wait+0x28e>
 8013d7e:	686e      	ldr	r6, [r5, #4]
 8013d80:	4602      	mov	r2, r0
 8013d82:	b91e      	cbnz	r6, 8013d8c <rcl_wait+0x17c>
 8013d84:	e00d      	b.n	8013da2 <rcl_wait+0x192>
 8013d86:	3201      	adds	r2, #1
 8013d88:	42b2      	cmp	r2, r6
 8013d8a:	d00a      	beq.n	8013da2 <rcl_wait+0x192>
 8013d8c:	6899      	ldr	r1, [r3, #8]
 8013d8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d92:	2900      	cmp	r1, #0
 8013d94:	d1f7      	bne.n	8013d86 <rcl_wait+0x176>
 8013d96:	682c      	ldr	r4, [r5, #0]
 8013d98:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d9c:	3201      	adds	r2, #1
 8013d9e:	42b2      	cmp	r2, r6
 8013da0:	d1f4      	bne.n	8013d8c <rcl_wait+0x17c>
 8013da2:	68ee      	ldr	r6, [r5, #12]
 8013da4:	2200      	movs	r2, #0
 8013da6:	b91e      	cbnz	r6, 8013db0 <rcl_wait+0x1a0>
 8013da8:	e00d      	b.n	8013dc6 <rcl_wait+0x1b6>
 8013daa:	3201      	adds	r2, #1
 8013dac:	42b2      	cmp	r2, r6
 8013dae:	d00a      	beq.n	8013dc6 <rcl_wait+0x1b6>
 8013db0:	6959      	ldr	r1, [r3, #20]
 8013db2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013db6:	2900      	cmp	r1, #0
 8013db8:	d1f7      	bne.n	8013daa <rcl_wait+0x19a>
 8013dba:	68ac      	ldr	r4, [r5, #8]
 8013dbc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013dc0:	3201      	adds	r2, #1
 8013dc2:	42b2      	cmp	r2, r6
 8013dc4:	d1f4      	bne.n	8013db0 <rcl_wait+0x1a0>
 8013dc6:	69ee      	ldr	r6, [r5, #28]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	b91e      	cbnz	r6, 8013dd4 <rcl_wait+0x1c4>
 8013dcc:	e00d      	b.n	8013dea <rcl_wait+0x1da>
 8013dce:	3201      	adds	r2, #1
 8013dd0:	42b2      	cmp	r2, r6
 8013dd2:	d00a      	beq.n	8013dea <rcl_wait+0x1da>
 8013dd4:	6a19      	ldr	r1, [r3, #32]
 8013dd6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013dda:	2900      	cmp	r1, #0
 8013ddc:	d1f7      	bne.n	8013dce <rcl_wait+0x1be>
 8013dde:	69ac      	ldr	r4, [r5, #24]
 8013de0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013de4:	3201      	adds	r2, #1
 8013de6:	42b2      	cmp	r2, r6
 8013de8:	d1f4      	bne.n	8013dd4 <rcl_wait+0x1c4>
 8013dea:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013dec:	2200      	movs	r2, #0
 8013dee:	b91e      	cbnz	r6, 8013df8 <rcl_wait+0x1e8>
 8013df0:	e00d      	b.n	8013e0e <rcl_wait+0x1fe>
 8013df2:	3201      	adds	r2, #1
 8013df4:	4296      	cmp	r6, r2
 8013df6:	d00a      	beq.n	8013e0e <rcl_wait+0x1fe>
 8013df8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013dfa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013dfe:	2900      	cmp	r1, #0
 8013e00:	d1f7      	bne.n	8013df2 <rcl_wait+0x1e2>
 8013e02:	6a2c      	ldr	r4, [r5, #32]
 8013e04:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013e08:	3201      	adds	r2, #1
 8013e0a:	4296      	cmp	r6, r2
 8013e0c:	d1f4      	bne.n	8013df8 <rcl_wait+0x1e8>
 8013e0e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013e10:	2200      	movs	r2, #0
 8013e12:	b91e      	cbnz	r6, 8013e1c <rcl_wait+0x20c>
 8013e14:	e00d      	b.n	8013e32 <rcl_wait+0x222>
 8013e16:	3201      	adds	r2, #1
 8013e18:	42b2      	cmp	r2, r6
 8013e1a:	d00a      	beq.n	8013e32 <rcl_wait+0x222>
 8013e1c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013e1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013e22:	2900      	cmp	r1, #0
 8013e24:	d1f7      	bne.n	8013e16 <rcl_wait+0x206>
 8013e26:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013e28:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013e2c:	3201      	adds	r2, #1
 8013e2e:	42b2      	cmp	r2, r6
 8013e30:	d1f4      	bne.n	8013e1c <rcl_wait+0x20c>
 8013e32:	f1b8 0f02 	cmp.w	r8, #2
 8013e36:	f47f af08 	bne.w	8013c4a <rcl_wait+0x3a>
 8013e3a:	464b      	mov	r3, r9
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	bf08      	it	eq
 8013e40:	2002      	moveq	r0, #2
 8013e42:	e702      	b.n	8013c4a <rcl_wait+0x3a>
 8013e44:	2a00      	cmp	r2, #0
 8013e46:	d03a      	beq.n	8013ebe <rcl_wait+0x2ae>
 8013e48:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013e4c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013e50:	e70e      	b.n	8013c70 <rcl_wait+0x60>
 8013e52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e56:	b00d      	add	sp, #52	@ 0x34
 8013e58:	ecbd 8b02 	vpop	{d8}
 8013e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e60:	9b04      	ldr	r3, [sp, #16]
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	9b05      	ldr	r3, [sp, #20]
 8013e66:	f173 0300 	sbcs.w	r3, r3, #0
 8013e6a:	db24      	blt.n	8013eb6 <rcl_wait+0x2a6>
 8013e6c:	2f00      	cmp	r7, #0
 8013e6e:	bfbc      	itt	lt
 8013e70:	f04f 0800 	movlt.w	r8, #0
 8013e74:	4647      	movlt	r7, r8
 8013e76:	a31e      	add	r3, pc, #120	@ (adr r3, 8013ef0 <rcl_wait+0x2e0>)
 8013e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7c:	4640      	mov	r0, r8
 8013e7e:	4639      	mov	r1, r7
 8013e80:	f7ec fbf2 	bl	8000668 <__aeabi_ldivmod>
 8013e84:	a31a      	add	r3, pc, #104	@ (adr r3, 8013ef0 <rcl_wait+0x2e0>)
 8013e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e8e:	4640      	mov	r0, r8
 8013e90:	4639      	mov	r1, r7
 8013e92:	f7ec fbe9 	bl	8000668 <__aeabi_ldivmod>
 8013e96:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013e9a:	ab08      	add	r3, sp, #32
 8013e9c:	e73e      	b.n	8013d1c <rcl_wait+0x10c>
 8013e9e:	2001      	movs	r0, #1
 8013ea0:	b00d      	add	sp, #52	@ 0x34
 8013ea2:	ecbd 8b02 	vpop	{d8}
 8013ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eaa:	200b      	movs	r0, #11
 8013eac:	b00d      	add	sp, #52	@ 0x34
 8013eae:	ecbd 8b02 	vpop	{d8}
 8013eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb6:	465b      	mov	r3, fp
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d1d7      	bne.n	8013e6c <rcl_wait+0x25c>
 8013ebc:	e72e      	b.n	8013d1c <rcl_wait+0x10c>
 8013ebe:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013ec2:	430b      	orrs	r3, r1
 8013ec4:	bf08      	it	eq
 8013ec6:	4691      	moveq	r9, r2
 8013ec8:	f43f af21 	beq.w	8013d0e <rcl_wait+0xfe>
 8013ecc:	9b04      	ldr	r3, [sp, #16]
 8013ece:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013ed2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013ed6:	2b01      	cmp	r3, #1
 8013ed8:	9b05      	ldr	r3, [sp, #20]
 8013eda:	f173 0300 	sbcs.w	r3, r3, #0
 8013ede:	f04f 0300 	mov.w	r3, #0
 8013ee2:	4699      	mov	r9, r3
 8013ee4:	dac2      	bge.n	8013e6c <rcl_wait+0x25c>
 8013ee6:	e719      	b.n	8013d1c <rcl_wait+0x10c>
 8013ee8:	ffffffff 	.word	0xffffffff
 8013eec:	7fffffff 	.word	0x7fffffff
 8013ef0:	3b9aca00 	.word	0x3b9aca00
 8013ef4:	00000000 	.word	0x00000000

08013ef8 <rcl_action_take_goal_response>:
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d039      	beq.n	8013f70 <rcl_action_take_goal_response+0x78>
 8013efc:	b570      	push	{r4, r5, r6, lr}
 8013efe:	4604      	mov	r4, r0
 8013f00:	6800      	ldr	r0, [r0, #0]
 8013f02:	b380      	cbz	r0, 8013f66 <rcl_action_take_goal_response+0x6e>
 8013f04:	460d      	mov	r5, r1
 8013f06:	4616      	mov	r6, r2
 8013f08:	f7fe f842 	bl	8011f90 <rcl_client_is_valid>
 8013f0c:	b330      	cbz	r0, 8013f5c <rcl_action_take_goal_response+0x64>
 8013f0e:	6820      	ldr	r0, [r4, #0]
 8013f10:	3004      	adds	r0, #4
 8013f12:	f7fe f83d 	bl	8011f90 <rcl_client_is_valid>
 8013f16:	b308      	cbz	r0, 8013f5c <rcl_action_take_goal_response+0x64>
 8013f18:	6820      	ldr	r0, [r4, #0]
 8013f1a:	3008      	adds	r0, #8
 8013f1c:	f7fe f838 	bl	8011f90 <rcl_client_is_valid>
 8013f20:	b1e0      	cbz	r0, 8013f5c <rcl_action_take_goal_response+0x64>
 8013f22:	6820      	ldr	r0, [r4, #0]
 8013f24:	300c      	adds	r0, #12
 8013f26:	f7fe fdf5 	bl	8012b14 <rcl_subscription_is_valid>
 8013f2a:	b1b8      	cbz	r0, 8013f5c <rcl_action_take_goal_response+0x64>
 8013f2c:	6820      	ldr	r0, [r4, #0]
 8013f2e:	3010      	adds	r0, #16
 8013f30:	f7fe fdf0 	bl	8012b14 <rcl_subscription_is_valid>
 8013f34:	b190      	cbz	r0, 8013f5c <rcl_action_take_goal_response+0x64>
 8013f36:	b1cd      	cbz	r5, 8013f6c <rcl_action_take_goal_response+0x74>
 8013f38:	b1c6      	cbz	r6, 8013f6c <rcl_action_take_goal_response+0x74>
 8013f3a:	6820      	ldr	r0, [r4, #0]
 8013f3c:	4632      	mov	r2, r6
 8013f3e:	4629      	mov	r1, r5
 8013f40:	f7fd ffde 	bl	8011f00 <rcl_take_response>
 8013f44:	b148      	cbz	r0, 8013f5a <rcl_action_take_goal_response+0x62>
 8013f46:	280a      	cmp	r0, #10
 8013f48:	d007      	beq.n	8013f5a <rcl_action_take_goal_response+0x62>
 8013f4a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013f4e:	f640 0337 	movw	r3, #2103	@ 0x837
 8013f52:	4290      	cmp	r0, r2
 8013f54:	bf0c      	ite	eq
 8013f56:	4618      	moveq	r0, r3
 8013f58:	2001      	movne	r0, #1
 8013f5a:	bd70      	pop	{r4, r5, r6, pc}
 8013f5c:	f7f9 fa14 	bl	800d388 <rcutils_reset_error>
 8013f60:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f64:	bd70      	pop	{r4, r5, r6, pc}
 8013f66:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f6a:	bd70      	pop	{r4, r5, r6, pc}
 8013f6c:	200b      	movs	r0, #11
 8013f6e:	bd70      	pop	{r4, r5, r6, pc}
 8013f70:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f74:	4770      	bx	lr
 8013f76:	bf00      	nop

08013f78 <rcl_action_send_result_request>:
 8013f78:	b390      	cbz	r0, 8013fe0 <rcl_action_send_result_request+0x68>
 8013f7a:	b570      	push	{r4, r5, r6, lr}
 8013f7c:	4604      	mov	r4, r0
 8013f7e:	6800      	ldr	r0, [r0, #0]
 8013f80:	b348      	cbz	r0, 8013fd6 <rcl_action_send_result_request+0x5e>
 8013f82:	460d      	mov	r5, r1
 8013f84:	4616      	mov	r6, r2
 8013f86:	f7fe f803 	bl	8011f90 <rcl_client_is_valid>
 8013f8a:	b1f8      	cbz	r0, 8013fcc <rcl_action_send_result_request+0x54>
 8013f8c:	6820      	ldr	r0, [r4, #0]
 8013f8e:	3004      	adds	r0, #4
 8013f90:	f7fd fffe 	bl	8011f90 <rcl_client_is_valid>
 8013f94:	b1d0      	cbz	r0, 8013fcc <rcl_action_send_result_request+0x54>
 8013f96:	6820      	ldr	r0, [r4, #0]
 8013f98:	3008      	adds	r0, #8
 8013f9a:	f7fd fff9 	bl	8011f90 <rcl_client_is_valid>
 8013f9e:	b1a8      	cbz	r0, 8013fcc <rcl_action_send_result_request+0x54>
 8013fa0:	6820      	ldr	r0, [r4, #0]
 8013fa2:	300c      	adds	r0, #12
 8013fa4:	f7fe fdb6 	bl	8012b14 <rcl_subscription_is_valid>
 8013fa8:	b180      	cbz	r0, 8013fcc <rcl_action_send_result_request+0x54>
 8013faa:	6820      	ldr	r0, [r4, #0]
 8013fac:	3010      	adds	r0, #16
 8013fae:	f7fe fdb1 	bl	8012b14 <rcl_subscription_is_valid>
 8013fb2:	b158      	cbz	r0, 8013fcc <rcl_action_send_result_request+0x54>
 8013fb4:	b195      	cbz	r5, 8013fdc <rcl_action_send_result_request+0x64>
 8013fb6:	b18e      	cbz	r6, 8013fdc <rcl_action_send_result_request+0x64>
 8013fb8:	6820      	ldr	r0, [r4, #0]
 8013fba:	4632      	mov	r2, r6
 8013fbc:	4629      	mov	r1, r5
 8013fbe:	3008      	adds	r0, #8
 8013fc0:	f7fd ff66 	bl	8011e90 <rcl_send_request>
 8013fc4:	3800      	subs	r0, #0
 8013fc6:	bf18      	it	ne
 8013fc8:	2001      	movne	r0, #1
 8013fca:	bd70      	pop	{r4, r5, r6, pc}
 8013fcc:	f7f9 f9dc 	bl	800d388 <rcutils_reset_error>
 8013fd0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fd4:	bd70      	pop	{r4, r5, r6, pc}
 8013fd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fda:	bd70      	pop	{r4, r5, r6, pc}
 8013fdc:	200b      	movs	r0, #11
 8013fde:	bd70      	pop	{r4, r5, r6, pc}
 8013fe0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop

08013fe8 <rcl_action_take_result_response>:
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d03a      	beq.n	8014062 <rcl_action_take_result_response+0x7a>
 8013fec:	b570      	push	{r4, r5, r6, lr}
 8013fee:	4604      	mov	r4, r0
 8013ff0:	6800      	ldr	r0, [r0, #0]
 8013ff2:	b388      	cbz	r0, 8014058 <rcl_action_take_result_response+0x70>
 8013ff4:	460d      	mov	r5, r1
 8013ff6:	4616      	mov	r6, r2
 8013ff8:	f7fd ffca 	bl	8011f90 <rcl_client_is_valid>
 8013ffc:	b338      	cbz	r0, 801404e <rcl_action_take_result_response+0x66>
 8013ffe:	6820      	ldr	r0, [r4, #0]
 8014000:	3004      	adds	r0, #4
 8014002:	f7fd ffc5 	bl	8011f90 <rcl_client_is_valid>
 8014006:	b310      	cbz	r0, 801404e <rcl_action_take_result_response+0x66>
 8014008:	6820      	ldr	r0, [r4, #0]
 801400a:	3008      	adds	r0, #8
 801400c:	f7fd ffc0 	bl	8011f90 <rcl_client_is_valid>
 8014010:	b1e8      	cbz	r0, 801404e <rcl_action_take_result_response+0x66>
 8014012:	6820      	ldr	r0, [r4, #0]
 8014014:	300c      	adds	r0, #12
 8014016:	f7fe fd7d 	bl	8012b14 <rcl_subscription_is_valid>
 801401a:	b1c0      	cbz	r0, 801404e <rcl_action_take_result_response+0x66>
 801401c:	6820      	ldr	r0, [r4, #0]
 801401e:	3010      	adds	r0, #16
 8014020:	f7fe fd78 	bl	8012b14 <rcl_subscription_is_valid>
 8014024:	b198      	cbz	r0, 801404e <rcl_action_take_result_response+0x66>
 8014026:	b1d5      	cbz	r5, 801405e <rcl_action_take_result_response+0x76>
 8014028:	b1ce      	cbz	r6, 801405e <rcl_action_take_result_response+0x76>
 801402a:	6820      	ldr	r0, [r4, #0]
 801402c:	4632      	mov	r2, r6
 801402e:	4629      	mov	r1, r5
 8014030:	3008      	adds	r0, #8
 8014032:	f7fd ff65 	bl	8011f00 <rcl_take_response>
 8014036:	b148      	cbz	r0, 801404c <rcl_action_take_result_response+0x64>
 8014038:	280a      	cmp	r0, #10
 801403a:	d007      	beq.n	801404c <rcl_action_take_result_response+0x64>
 801403c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014040:	f640 0337 	movw	r3, #2103	@ 0x837
 8014044:	4290      	cmp	r0, r2
 8014046:	bf0c      	ite	eq
 8014048:	4618      	moveq	r0, r3
 801404a:	2001      	movne	r0, #1
 801404c:	bd70      	pop	{r4, r5, r6, pc}
 801404e:	f7f9 f99b 	bl	800d388 <rcutils_reset_error>
 8014052:	f640 0036 	movw	r0, #2102	@ 0x836
 8014056:	bd70      	pop	{r4, r5, r6, pc}
 8014058:	f640 0036 	movw	r0, #2102	@ 0x836
 801405c:	bd70      	pop	{r4, r5, r6, pc}
 801405e:	200b      	movs	r0, #11
 8014060:	bd70      	pop	{r4, r5, r6, pc}
 8014062:	f640 0036 	movw	r0, #2102	@ 0x836
 8014066:	4770      	bx	lr

08014068 <rcl_action_take_cancel_response>:
 8014068:	2800      	cmp	r0, #0
 801406a:	d03a      	beq.n	80140e2 <rcl_action_take_cancel_response+0x7a>
 801406c:	b570      	push	{r4, r5, r6, lr}
 801406e:	4604      	mov	r4, r0
 8014070:	6800      	ldr	r0, [r0, #0]
 8014072:	b388      	cbz	r0, 80140d8 <rcl_action_take_cancel_response+0x70>
 8014074:	460d      	mov	r5, r1
 8014076:	4616      	mov	r6, r2
 8014078:	f7fd ff8a 	bl	8011f90 <rcl_client_is_valid>
 801407c:	b338      	cbz	r0, 80140ce <rcl_action_take_cancel_response+0x66>
 801407e:	6820      	ldr	r0, [r4, #0]
 8014080:	3004      	adds	r0, #4
 8014082:	f7fd ff85 	bl	8011f90 <rcl_client_is_valid>
 8014086:	b310      	cbz	r0, 80140ce <rcl_action_take_cancel_response+0x66>
 8014088:	6820      	ldr	r0, [r4, #0]
 801408a:	3008      	adds	r0, #8
 801408c:	f7fd ff80 	bl	8011f90 <rcl_client_is_valid>
 8014090:	b1e8      	cbz	r0, 80140ce <rcl_action_take_cancel_response+0x66>
 8014092:	6820      	ldr	r0, [r4, #0]
 8014094:	300c      	adds	r0, #12
 8014096:	f7fe fd3d 	bl	8012b14 <rcl_subscription_is_valid>
 801409a:	b1c0      	cbz	r0, 80140ce <rcl_action_take_cancel_response+0x66>
 801409c:	6820      	ldr	r0, [r4, #0]
 801409e:	3010      	adds	r0, #16
 80140a0:	f7fe fd38 	bl	8012b14 <rcl_subscription_is_valid>
 80140a4:	b198      	cbz	r0, 80140ce <rcl_action_take_cancel_response+0x66>
 80140a6:	b1d5      	cbz	r5, 80140de <rcl_action_take_cancel_response+0x76>
 80140a8:	b1ce      	cbz	r6, 80140de <rcl_action_take_cancel_response+0x76>
 80140aa:	6820      	ldr	r0, [r4, #0]
 80140ac:	4632      	mov	r2, r6
 80140ae:	4629      	mov	r1, r5
 80140b0:	3004      	adds	r0, #4
 80140b2:	f7fd ff25 	bl	8011f00 <rcl_take_response>
 80140b6:	b148      	cbz	r0, 80140cc <rcl_action_take_cancel_response+0x64>
 80140b8:	280a      	cmp	r0, #10
 80140ba:	d007      	beq.n	80140cc <rcl_action_take_cancel_response+0x64>
 80140bc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80140c0:	f640 0337 	movw	r3, #2103	@ 0x837
 80140c4:	4290      	cmp	r0, r2
 80140c6:	bf0c      	ite	eq
 80140c8:	4618      	moveq	r0, r3
 80140ca:	2001      	movne	r0, #1
 80140cc:	bd70      	pop	{r4, r5, r6, pc}
 80140ce:	f7f9 f95b 	bl	800d388 <rcutils_reset_error>
 80140d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80140d6:	bd70      	pop	{r4, r5, r6, pc}
 80140d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80140dc:	bd70      	pop	{r4, r5, r6, pc}
 80140de:	200b      	movs	r0, #11
 80140e0:	bd70      	pop	{r4, r5, r6, pc}
 80140e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80140e6:	4770      	bx	lr

080140e8 <rcl_action_take_feedback>:
 80140e8:	2800      	cmp	r0, #0
 80140ea:	d038      	beq.n	801415e <rcl_action_take_feedback+0x76>
 80140ec:	b530      	push	{r4, r5, lr}
 80140ee:	4604      	mov	r4, r0
 80140f0:	6800      	ldr	r0, [r0, #0]
 80140f2:	b091      	sub	sp, #68	@ 0x44
 80140f4:	b378      	cbz	r0, 8014156 <rcl_action_take_feedback+0x6e>
 80140f6:	460d      	mov	r5, r1
 80140f8:	f7fd ff4a 	bl	8011f90 <rcl_client_is_valid>
 80140fc:	b328      	cbz	r0, 801414a <rcl_action_take_feedback+0x62>
 80140fe:	6820      	ldr	r0, [r4, #0]
 8014100:	3004      	adds	r0, #4
 8014102:	f7fd ff45 	bl	8011f90 <rcl_client_is_valid>
 8014106:	b300      	cbz	r0, 801414a <rcl_action_take_feedback+0x62>
 8014108:	6820      	ldr	r0, [r4, #0]
 801410a:	3008      	adds	r0, #8
 801410c:	f7fd ff40 	bl	8011f90 <rcl_client_is_valid>
 8014110:	b1d8      	cbz	r0, 801414a <rcl_action_take_feedback+0x62>
 8014112:	6820      	ldr	r0, [r4, #0]
 8014114:	300c      	adds	r0, #12
 8014116:	f7fe fcfd 	bl	8012b14 <rcl_subscription_is_valid>
 801411a:	b1b0      	cbz	r0, 801414a <rcl_action_take_feedback+0x62>
 801411c:	6820      	ldr	r0, [r4, #0]
 801411e:	3010      	adds	r0, #16
 8014120:	f7fe fcf8 	bl	8012b14 <rcl_subscription_is_valid>
 8014124:	b188      	cbz	r0, 801414a <rcl_action_take_feedback+0x62>
 8014126:	b1ed      	cbz	r5, 8014164 <rcl_action_take_feedback+0x7c>
 8014128:	6820      	ldr	r0, [r4, #0]
 801412a:	2300      	movs	r3, #0
 801412c:	466a      	mov	r2, sp
 801412e:	4629      	mov	r1, r5
 8014130:	300c      	adds	r0, #12
 8014132:	f7fe fc91 	bl	8012a58 <rcl_take>
 8014136:	b160      	cbz	r0, 8014152 <rcl_action_take_feedback+0x6a>
 8014138:	f240 1391 	movw	r3, #401	@ 0x191
 801413c:	4298      	cmp	r0, r3
 801413e:	d014      	beq.n	801416a <rcl_action_take_feedback+0x82>
 8014140:	280a      	cmp	r0, #10
 8014142:	bf18      	it	ne
 8014144:	2001      	movne	r0, #1
 8014146:	b011      	add	sp, #68	@ 0x44
 8014148:	bd30      	pop	{r4, r5, pc}
 801414a:	f7f9 f91d 	bl	800d388 <rcutils_reset_error>
 801414e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014152:	b011      	add	sp, #68	@ 0x44
 8014154:	bd30      	pop	{r4, r5, pc}
 8014156:	f640 0036 	movw	r0, #2102	@ 0x836
 801415a:	b011      	add	sp, #68	@ 0x44
 801415c:	bd30      	pop	{r4, r5, pc}
 801415e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014162:	4770      	bx	lr
 8014164:	200b      	movs	r0, #11
 8014166:	b011      	add	sp, #68	@ 0x44
 8014168:	bd30      	pop	{r4, r5, pc}
 801416a:	f640 0037 	movw	r0, #2103	@ 0x837
 801416e:	e7f0      	b.n	8014152 <rcl_action_take_feedback+0x6a>

08014170 <rcl_action_wait_set_add_action_client>:
 8014170:	2800      	cmp	r0, #0
 8014172:	d048      	beq.n	8014206 <rcl_action_wait_set_add_action_client+0x96>
 8014174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014176:	460c      	mov	r4, r1
 8014178:	2900      	cmp	r1, #0
 801417a:	d03c      	beq.n	80141f6 <rcl_action_wait_set_add_action_client+0x86>
 801417c:	4605      	mov	r5, r0
 801417e:	6808      	ldr	r0, [r1, #0]
 8014180:	2800      	cmp	r0, #0
 8014182:	d038      	beq.n	80141f6 <rcl_action_wait_set_add_action_client+0x86>
 8014184:	4617      	mov	r7, r2
 8014186:	461e      	mov	r6, r3
 8014188:	f7fd ff02 	bl	8011f90 <rcl_client_is_valid>
 801418c:	b3b0      	cbz	r0, 80141fc <rcl_action_wait_set_add_action_client+0x8c>
 801418e:	6820      	ldr	r0, [r4, #0]
 8014190:	3004      	adds	r0, #4
 8014192:	f7fd fefd 	bl	8011f90 <rcl_client_is_valid>
 8014196:	b388      	cbz	r0, 80141fc <rcl_action_wait_set_add_action_client+0x8c>
 8014198:	6820      	ldr	r0, [r4, #0]
 801419a:	3008      	adds	r0, #8
 801419c:	f7fd fef8 	bl	8011f90 <rcl_client_is_valid>
 80141a0:	b360      	cbz	r0, 80141fc <rcl_action_wait_set_add_action_client+0x8c>
 80141a2:	6820      	ldr	r0, [r4, #0]
 80141a4:	300c      	adds	r0, #12
 80141a6:	f7fe fcb5 	bl	8012b14 <rcl_subscription_is_valid>
 80141aa:	b338      	cbz	r0, 80141fc <rcl_action_wait_set_add_action_client+0x8c>
 80141ac:	6820      	ldr	r0, [r4, #0]
 80141ae:	3010      	adds	r0, #16
 80141b0:	f7fe fcb0 	bl	8012b14 <rcl_subscription_is_valid>
 80141b4:	b310      	cbz	r0, 80141fc <rcl_action_wait_set_add_action_client+0x8c>
 80141b6:	6821      	ldr	r1, [r4, #0]
 80141b8:	4628      	mov	r0, r5
 80141ba:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80141be:	f7ff fccd 	bl	8013b5c <rcl_wait_set_add_client>
 80141c2:	b9b8      	cbnz	r0, 80141f4 <rcl_action_wait_set_add_action_client+0x84>
 80141c4:	6821      	ldr	r1, [r4, #0]
 80141c6:	4628      	mov	r0, r5
 80141c8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80141cc:	3104      	adds	r1, #4
 80141ce:	f7ff fcc5 	bl	8013b5c <rcl_wait_set_add_client>
 80141d2:	b978      	cbnz	r0, 80141f4 <rcl_action_wait_set_add_action_client+0x84>
 80141d4:	6821      	ldr	r1, [r4, #0]
 80141d6:	4628      	mov	r0, r5
 80141d8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80141dc:	3108      	adds	r1, #8
 80141de:	f7ff fcbd 	bl	8013b5c <rcl_wait_set_add_client>
 80141e2:	b938      	cbnz	r0, 80141f4 <rcl_action_wait_set_add_action_client+0x84>
 80141e4:	6821      	ldr	r1, [r4, #0]
 80141e6:	4628      	mov	r0, r5
 80141e8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80141ec:	310c      	adds	r1, #12
 80141ee:	f7ff f96d 	bl	80134cc <rcl_wait_set_add_subscription>
 80141f2:	b158      	cbz	r0, 801420c <rcl_action_wait_set_add_action_client+0x9c>
 80141f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80141fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141fc:	f7f9 f8c4 	bl	800d388 <rcutils_reset_error>
 8014200:	f640 0036 	movw	r0, #2102	@ 0x836
 8014204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014206:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801420a:	4770      	bx	lr
 801420c:	6821      	ldr	r1, [r4, #0]
 801420e:	4628      	mov	r0, r5
 8014210:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8014214:	3110      	adds	r1, #16
 8014216:	f7ff f959 	bl	80134cc <rcl_wait_set_add_subscription>
 801421a:	2800      	cmp	r0, #0
 801421c:	d1ea      	bne.n	80141f4 <rcl_action_wait_set_add_action_client+0x84>
 801421e:	b11f      	cbz	r7, 8014228 <rcl_action_wait_set_add_action_client+0xb8>
 8014220:	6823      	ldr	r3, [r4, #0]
 8014222:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014226:	603b      	str	r3, [r7, #0]
 8014228:	2e00      	cmp	r6, #0
 801422a:	d0e3      	beq.n	80141f4 <rcl_action_wait_set_add_action_client+0x84>
 801422c:	6823      	ldr	r3, [r4, #0]
 801422e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014232:	6033      	str	r3, [r6, #0]
 8014234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014236:	bf00      	nop

08014238 <rcl_action_client_wait_set_get_entities_ready>:
 8014238:	2800      	cmp	r0, #0
 801423a:	f000 808d 	beq.w	8014358 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014242:	460c      	mov	r4, r1
 8014244:	2900      	cmp	r1, #0
 8014246:	d077      	beq.n	8014338 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014248:	4605      	mov	r5, r0
 801424a:	6808      	ldr	r0, [r1, #0]
 801424c:	2800      	cmp	r0, #0
 801424e:	d073      	beq.n	8014338 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014250:	4616      	mov	r6, r2
 8014252:	461f      	mov	r7, r3
 8014254:	f7fd fe9c 	bl	8011f90 <rcl_client_is_valid>
 8014258:	2800      	cmp	r0, #0
 801425a:	d071      	beq.n	8014340 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801425c:	6820      	ldr	r0, [r4, #0]
 801425e:	3004      	adds	r0, #4
 8014260:	f7fd fe96 	bl	8011f90 <rcl_client_is_valid>
 8014264:	2800      	cmp	r0, #0
 8014266:	d06b      	beq.n	8014340 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014268:	6820      	ldr	r0, [r4, #0]
 801426a:	3008      	adds	r0, #8
 801426c:	f7fd fe90 	bl	8011f90 <rcl_client_is_valid>
 8014270:	2800      	cmp	r0, #0
 8014272:	d065      	beq.n	8014340 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014274:	6820      	ldr	r0, [r4, #0]
 8014276:	300c      	adds	r0, #12
 8014278:	f7fe fc4c 	bl	8012b14 <rcl_subscription_is_valid>
 801427c:	2800      	cmp	r0, #0
 801427e:	d05f      	beq.n	8014340 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014280:	6820      	ldr	r0, [r4, #0]
 8014282:	3010      	adds	r0, #16
 8014284:	f7fe fc46 	bl	8012b14 <rcl_subscription_is_valid>
 8014288:	2800      	cmp	r0, #0
 801428a:	d059      	beq.n	8014340 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801428c:	2e00      	cmp	r6, #0
 801428e:	d060      	beq.n	8014352 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014290:	2f00      	cmp	r7, #0
 8014292:	d05e      	beq.n	8014352 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014294:	9b06      	ldr	r3, [sp, #24]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d05b      	beq.n	8014352 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801429a:	9b07      	ldr	r3, [sp, #28]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d058      	beq.n	8014352 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80142a0:	9b08      	ldr	r3, [sp, #32]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d055      	beq.n	8014352 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80142a6:	6823      	ldr	r3, [r4, #0]
 80142a8:	686a      	ldr	r2, [r5, #4]
 80142aa:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80142ae:	428a      	cmp	r2, r1
 80142b0:	d94c      	bls.n	801434c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80142b2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80142b6:	4282      	cmp	r2, r0
 80142b8:	d948      	bls.n	801434c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80142ba:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80142be:	69ea      	ldr	r2, [r5, #28]
 80142c0:	42a2      	cmp	r2, r4
 80142c2:	d943      	bls.n	801434c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80142c4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80142c8:	4562      	cmp	r2, ip
 80142ca:	d93f      	bls.n	801434c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80142cc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80142d0:	4572      	cmp	r2, lr
 80142d2:	d93b      	bls.n	801434c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80142d4:	69aa      	ldr	r2, [r5, #24]
 80142d6:	682d      	ldr	r5, [r5, #0]
 80142d8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80142dc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80142e0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80142e4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80142e8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80142ec:	f103 0c0c 	add.w	ip, r3, #12
 80142f0:	eba5 050c 	sub.w	r5, r5, ip
 80142f4:	fab5 f585 	clz	r5, r5
 80142f8:	096d      	lsrs	r5, r5, #5
 80142fa:	7035      	strb	r5, [r6, #0]
 80142fc:	f103 0510 	add.w	r5, r3, #16
 8014300:	1b64      	subs	r4, r4, r5
 8014302:	fab4 f484 	clz	r4, r4
 8014306:	0964      	lsrs	r4, r4, #5
 8014308:	703c      	strb	r4, [r7, #0]
 801430a:	eba3 0008 	sub.w	r0, r3, r8
 801430e:	1d1c      	adds	r4, r3, #4
 8014310:	3308      	adds	r3, #8
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	fab0 f080 	clz	r0, r0
 8014318:	9a06      	ldr	r2, [sp, #24]
 801431a:	0940      	lsrs	r0, r0, #5
 801431c:	1b09      	subs	r1, r1, r4
 801431e:	7010      	strb	r0, [r2, #0]
 8014320:	fab1 f181 	clz	r1, r1
 8014324:	9a07      	ldr	r2, [sp, #28]
 8014326:	0949      	lsrs	r1, r1, #5
 8014328:	7011      	strb	r1, [r2, #0]
 801432a:	fab3 f383 	clz	r3, r3
 801432e:	9a08      	ldr	r2, [sp, #32]
 8014330:	095b      	lsrs	r3, r3, #5
 8014332:	2000      	movs	r0, #0
 8014334:	7013      	strb	r3, [r2, #0]
 8014336:	e001      	b.n	801433c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014338:	f640 0036 	movw	r0, #2102	@ 0x836
 801433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014340:	f7f9 f822 	bl	800d388 <rcutils_reset_error>
 8014344:	f640 0036 	movw	r0, #2102	@ 0x836
 8014348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801434c:	2001      	movs	r0, #1
 801434e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014352:	200b      	movs	r0, #11
 8014354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014358:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop

08014360 <rcl_action_take_goal_request>:
 8014360:	2800      	cmp	r0, #0
 8014362:	d039      	beq.n	80143d8 <rcl_action_take_goal_request+0x78>
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	4604      	mov	r4, r0
 8014368:	6800      	ldr	r0, [r0, #0]
 801436a:	b380      	cbz	r0, 80143ce <rcl_action_take_goal_request+0x6e>
 801436c:	460d      	mov	r5, r1
 801436e:	4616      	mov	r6, r2
 8014370:	f7fe fb68 	bl	8012a44 <rcl_service_is_valid>
 8014374:	b330      	cbz	r0, 80143c4 <rcl_action_take_goal_request+0x64>
 8014376:	6820      	ldr	r0, [r4, #0]
 8014378:	3004      	adds	r0, #4
 801437a:	f7fe fb63 	bl	8012a44 <rcl_service_is_valid>
 801437e:	b308      	cbz	r0, 80143c4 <rcl_action_take_goal_request+0x64>
 8014380:	6820      	ldr	r0, [r4, #0]
 8014382:	3008      	adds	r0, #8
 8014384:	f7fe fb5e 	bl	8012a44 <rcl_service_is_valid>
 8014388:	b1e0      	cbz	r0, 80143c4 <rcl_action_take_goal_request+0x64>
 801438a:	6820      	ldr	r0, [r4, #0]
 801438c:	300c      	adds	r0, #12
 801438e:	f7f8 f883 	bl	800c498 <rcl_publisher_is_valid>
 8014392:	b1b8      	cbz	r0, 80143c4 <rcl_action_take_goal_request+0x64>
 8014394:	6820      	ldr	r0, [r4, #0]
 8014396:	3010      	adds	r0, #16
 8014398:	f7f8 f87e 	bl	800c498 <rcl_publisher_is_valid>
 801439c:	b190      	cbz	r0, 80143c4 <rcl_action_take_goal_request+0x64>
 801439e:	b1cd      	cbz	r5, 80143d4 <rcl_action_take_goal_request+0x74>
 80143a0:	b1c6      	cbz	r6, 80143d4 <rcl_action_take_goal_request+0x74>
 80143a2:	6820      	ldr	r0, [r4, #0]
 80143a4:	4632      	mov	r2, r6
 80143a6:	4629      	mov	r1, r5
 80143a8:	f7fe faf4 	bl	8012994 <rcl_take_request>
 80143ac:	b148      	cbz	r0, 80143c2 <rcl_action_take_goal_request+0x62>
 80143ae:	280a      	cmp	r0, #10
 80143b0:	d007      	beq.n	80143c2 <rcl_action_take_goal_request+0x62>
 80143b2:	f240 2259 	movw	r2, #601	@ 0x259
 80143b6:	f640 0399 	movw	r3, #2201	@ 0x899
 80143ba:	4290      	cmp	r0, r2
 80143bc:	bf0c      	ite	eq
 80143be:	4618      	moveq	r0, r3
 80143c0:	2001      	movne	r0, #1
 80143c2:	bd70      	pop	{r4, r5, r6, pc}
 80143c4:	f7f8 ffe0 	bl	800d388 <rcutils_reset_error>
 80143c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80143cc:	bd70      	pop	{r4, r5, r6, pc}
 80143ce:	f640 0098 	movw	r0, #2200	@ 0x898
 80143d2:	bd70      	pop	{r4, r5, r6, pc}
 80143d4:	200b      	movs	r0, #11
 80143d6:	bd70      	pop	{r4, r5, r6, pc}
 80143d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80143dc:	4770      	bx	lr
 80143de:	bf00      	nop

080143e0 <rcl_action_send_goal_response>:
 80143e0:	b390      	cbz	r0, 8014448 <rcl_action_send_goal_response+0x68>
 80143e2:	b570      	push	{r4, r5, r6, lr}
 80143e4:	4604      	mov	r4, r0
 80143e6:	6800      	ldr	r0, [r0, #0]
 80143e8:	b348      	cbz	r0, 801443e <rcl_action_send_goal_response+0x5e>
 80143ea:	460d      	mov	r5, r1
 80143ec:	4616      	mov	r6, r2
 80143ee:	f7fe fb29 	bl	8012a44 <rcl_service_is_valid>
 80143f2:	b1f8      	cbz	r0, 8014434 <rcl_action_send_goal_response+0x54>
 80143f4:	6820      	ldr	r0, [r4, #0]
 80143f6:	3004      	adds	r0, #4
 80143f8:	f7fe fb24 	bl	8012a44 <rcl_service_is_valid>
 80143fc:	b1d0      	cbz	r0, 8014434 <rcl_action_send_goal_response+0x54>
 80143fe:	6820      	ldr	r0, [r4, #0]
 8014400:	3008      	adds	r0, #8
 8014402:	f7fe fb1f 	bl	8012a44 <rcl_service_is_valid>
 8014406:	b1a8      	cbz	r0, 8014434 <rcl_action_send_goal_response+0x54>
 8014408:	6820      	ldr	r0, [r4, #0]
 801440a:	300c      	adds	r0, #12
 801440c:	f7f8 f844 	bl	800c498 <rcl_publisher_is_valid>
 8014410:	b180      	cbz	r0, 8014434 <rcl_action_send_goal_response+0x54>
 8014412:	6820      	ldr	r0, [r4, #0]
 8014414:	3010      	adds	r0, #16
 8014416:	f7f8 f83f 	bl	800c498 <rcl_publisher_is_valid>
 801441a:	b158      	cbz	r0, 8014434 <rcl_action_send_goal_response+0x54>
 801441c:	b195      	cbz	r5, 8014444 <rcl_action_send_goal_response+0x64>
 801441e:	b18e      	cbz	r6, 8014444 <rcl_action_send_goal_response+0x64>
 8014420:	6820      	ldr	r0, [r4, #0]
 8014422:	4632      	mov	r2, r6
 8014424:	4629      	mov	r1, r5
 8014426:	f7fe faf5 	bl	8012a14 <rcl_send_response>
 801442a:	b110      	cbz	r0, 8014432 <rcl_action_send_goal_response+0x52>
 801442c:	2802      	cmp	r0, #2
 801442e:	bf18      	it	ne
 8014430:	2001      	movne	r0, #1
 8014432:	bd70      	pop	{r4, r5, r6, pc}
 8014434:	f7f8 ffa8 	bl	800d388 <rcutils_reset_error>
 8014438:	f640 0098 	movw	r0, #2200	@ 0x898
 801443c:	bd70      	pop	{r4, r5, r6, pc}
 801443e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014442:	bd70      	pop	{r4, r5, r6, pc}
 8014444:	200b      	movs	r0, #11
 8014446:	bd70      	pop	{r4, r5, r6, pc}
 8014448:	f640 0098 	movw	r0, #2200	@ 0x898
 801444c:	4770      	bx	lr
 801444e:	bf00      	nop

08014450 <rcl_action_take_result_request>:
 8014450:	2800      	cmp	r0, #0
 8014452:	d03a      	beq.n	80144ca <rcl_action_take_result_request+0x7a>
 8014454:	b570      	push	{r4, r5, r6, lr}
 8014456:	4604      	mov	r4, r0
 8014458:	6800      	ldr	r0, [r0, #0]
 801445a:	b388      	cbz	r0, 80144c0 <rcl_action_take_result_request+0x70>
 801445c:	460d      	mov	r5, r1
 801445e:	4616      	mov	r6, r2
 8014460:	f7fe faf0 	bl	8012a44 <rcl_service_is_valid>
 8014464:	b338      	cbz	r0, 80144b6 <rcl_action_take_result_request+0x66>
 8014466:	6820      	ldr	r0, [r4, #0]
 8014468:	3004      	adds	r0, #4
 801446a:	f7fe faeb 	bl	8012a44 <rcl_service_is_valid>
 801446e:	b310      	cbz	r0, 80144b6 <rcl_action_take_result_request+0x66>
 8014470:	6820      	ldr	r0, [r4, #0]
 8014472:	3008      	adds	r0, #8
 8014474:	f7fe fae6 	bl	8012a44 <rcl_service_is_valid>
 8014478:	b1e8      	cbz	r0, 80144b6 <rcl_action_take_result_request+0x66>
 801447a:	6820      	ldr	r0, [r4, #0]
 801447c:	300c      	adds	r0, #12
 801447e:	f7f8 f80b 	bl	800c498 <rcl_publisher_is_valid>
 8014482:	b1c0      	cbz	r0, 80144b6 <rcl_action_take_result_request+0x66>
 8014484:	6820      	ldr	r0, [r4, #0]
 8014486:	3010      	adds	r0, #16
 8014488:	f7f8 f806 	bl	800c498 <rcl_publisher_is_valid>
 801448c:	b198      	cbz	r0, 80144b6 <rcl_action_take_result_request+0x66>
 801448e:	b1d5      	cbz	r5, 80144c6 <rcl_action_take_result_request+0x76>
 8014490:	b1ce      	cbz	r6, 80144c6 <rcl_action_take_result_request+0x76>
 8014492:	6820      	ldr	r0, [r4, #0]
 8014494:	4632      	mov	r2, r6
 8014496:	4629      	mov	r1, r5
 8014498:	3008      	adds	r0, #8
 801449a:	f7fe fa7b 	bl	8012994 <rcl_take_request>
 801449e:	b148      	cbz	r0, 80144b4 <rcl_action_take_result_request+0x64>
 80144a0:	280a      	cmp	r0, #10
 80144a2:	d007      	beq.n	80144b4 <rcl_action_take_result_request+0x64>
 80144a4:	f240 2259 	movw	r2, #601	@ 0x259
 80144a8:	f640 0399 	movw	r3, #2201	@ 0x899
 80144ac:	4290      	cmp	r0, r2
 80144ae:	bf0c      	ite	eq
 80144b0:	4618      	moveq	r0, r3
 80144b2:	2001      	movne	r0, #1
 80144b4:	bd70      	pop	{r4, r5, r6, pc}
 80144b6:	f7f8 ff67 	bl	800d388 <rcutils_reset_error>
 80144ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80144be:	bd70      	pop	{r4, r5, r6, pc}
 80144c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80144c4:	bd70      	pop	{r4, r5, r6, pc}
 80144c6:	200b      	movs	r0, #11
 80144c8:	bd70      	pop	{r4, r5, r6, pc}
 80144ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80144ce:	4770      	bx	lr

080144d0 <rcl_action_take_cancel_request>:
 80144d0:	2800      	cmp	r0, #0
 80144d2:	d03a      	beq.n	801454a <rcl_action_take_cancel_request+0x7a>
 80144d4:	b570      	push	{r4, r5, r6, lr}
 80144d6:	4604      	mov	r4, r0
 80144d8:	6800      	ldr	r0, [r0, #0]
 80144da:	b388      	cbz	r0, 8014540 <rcl_action_take_cancel_request+0x70>
 80144dc:	460d      	mov	r5, r1
 80144de:	4616      	mov	r6, r2
 80144e0:	f7fe fab0 	bl	8012a44 <rcl_service_is_valid>
 80144e4:	b338      	cbz	r0, 8014536 <rcl_action_take_cancel_request+0x66>
 80144e6:	6820      	ldr	r0, [r4, #0]
 80144e8:	3004      	adds	r0, #4
 80144ea:	f7fe faab 	bl	8012a44 <rcl_service_is_valid>
 80144ee:	b310      	cbz	r0, 8014536 <rcl_action_take_cancel_request+0x66>
 80144f0:	6820      	ldr	r0, [r4, #0]
 80144f2:	3008      	adds	r0, #8
 80144f4:	f7fe faa6 	bl	8012a44 <rcl_service_is_valid>
 80144f8:	b1e8      	cbz	r0, 8014536 <rcl_action_take_cancel_request+0x66>
 80144fa:	6820      	ldr	r0, [r4, #0]
 80144fc:	300c      	adds	r0, #12
 80144fe:	f7f7 ffcb 	bl	800c498 <rcl_publisher_is_valid>
 8014502:	b1c0      	cbz	r0, 8014536 <rcl_action_take_cancel_request+0x66>
 8014504:	6820      	ldr	r0, [r4, #0]
 8014506:	3010      	adds	r0, #16
 8014508:	f7f7 ffc6 	bl	800c498 <rcl_publisher_is_valid>
 801450c:	b198      	cbz	r0, 8014536 <rcl_action_take_cancel_request+0x66>
 801450e:	b1d5      	cbz	r5, 8014546 <rcl_action_take_cancel_request+0x76>
 8014510:	b1ce      	cbz	r6, 8014546 <rcl_action_take_cancel_request+0x76>
 8014512:	6820      	ldr	r0, [r4, #0]
 8014514:	4632      	mov	r2, r6
 8014516:	4629      	mov	r1, r5
 8014518:	3004      	adds	r0, #4
 801451a:	f7fe fa3b 	bl	8012994 <rcl_take_request>
 801451e:	b148      	cbz	r0, 8014534 <rcl_action_take_cancel_request+0x64>
 8014520:	280a      	cmp	r0, #10
 8014522:	d007      	beq.n	8014534 <rcl_action_take_cancel_request+0x64>
 8014524:	f240 2259 	movw	r2, #601	@ 0x259
 8014528:	f640 0399 	movw	r3, #2201	@ 0x899
 801452c:	4290      	cmp	r0, r2
 801452e:	bf0c      	ite	eq
 8014530:	4618      	moveq	r0, r3
 8014532:	2001      	movne	r0, #1
 8014534:	bd70      	pop	{r4, r5, r6, pc}
 8014536:	f7f8 ff27 	bl	800d388 <rcutils_reset_error>
 801453a:	f640 0098 	movw	r0, #2200	@ 0x898
 801453e:	bd70      	pop	{r4, r5, r6, pc}
 8014540:	f640 0098 	movw	r0, #2200	@ 0x898
 8014544:	bd70      	pop	{r4, r5, r6, pc}
 8014546:	200b      	movs	r0, #11
 8014548:	bd70      	pop	{r4, r5, r6, pc}
 801454a:	f640 0098 	movw	r0, #2200	@ 0x898
 801454e:	4770      	bx	lr

08014550 <rcl_action_send_cancel_response>:
 8014550:	b398      	cbz	r0, 80145ba <rcl_action_send_cancel_response+0x6a>
 8014552:	b570      	push	{r4, r5, r6, lr}
 8014554:	4604      	mov	r4, r0
 8014556:	6800      	ldr	r0, [r0, #0]
 8014558:	b350      	cbz	r0, 80145b0 <rcl_action_send_cancel_response+0x60>
 801455a:	460d      	mov	r5, r1
 801455c:	4616      	mov	r6, r2
 801455e:	f7fe fa71 	bl	8012a44 <rcl_service_is_valid>
 8014562:	b300      	cbz	r0, 80145a6 <rcl_action_send_cancel_response+0x56>
 8014564:	6820      	ldr	r0, [r4, #0]
 8014566:	3004      	adds	r0, #4
 8014568:	f7fe fa6c 	bl	8012a44 <rcl_service_is_valid>
 801456c:	b1d8      	cbz	r0, 80145a6 <rcl_action_send_cancel_response+0x56>
 801456e:	6820      	ldr	r0, [r4, #0]
 8014570:	3008      	adds	r0, #8
 8014572:	f7fe fa67 	bl	8012a44 <rcl_service_is_valid>
 8014576:	b1b0      	cbz	r0, 80145a6 <rcl_action_send_cancel_response+0x56>
 8014578:	6820      	ldr	r0, [r4, #0]
 801457a:	300c      	adds	r0, #12
 801457c:	f7f7 ff8c 	bl	800c498 <rcl_publisher_is_valid>
 8014580:	b188      	cbz	r0, 80145a6 <rcl_action_send_cancel_response+0x56>
 8014582:	6820      	ldr	r0, [r4, #0]
 8014584:	3010      	adds	r0, #16
 8014586:	f7f7 ff87 	bl	800c498 <rcl_publisher_is_valid>
 801458a:	b160      	cbz	r0, 80145a6 <rcl_action_send_cancel_response+0x56>
 801458c:	b19d      	cbz	r5, 80145b6 <rcl_action_send_cancel_response+0x66>
 801458e:	b196      	cbz	r6, 80145b6 <rcl_action_send_cancel_response+0x66>
 8014590:	6820      	ldr	r0, [r4, #0]
 8014592:	4632      	mov	r2, r6
 8014594:	4629      	mov	r1, r5
 8014596:	3004      	adds	r0, #4
 8014598:	f7fe fa3c 	bl	8012a14 <rcl_send_response>
 801459c:	b110      	cbz	r0, 80145a4 <rcl_action_send_cancel_response+0x54>
 801459e:	2802      	cmp	r0, #2
 80145a0:	bf18      	it	ne
 80145a2:	2001      	movne	r0, #1
 80145a4:	bd70      	pop	{r4, r5, r6, pc}
 80145a6:	f7f8 feef 	bl	800d388 <rcutils_reset_error>
 80145aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80145ae:	bd70      	pop	{r4, r5, r6, pc}
 80145b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80145b4:	bd70      	pop	{r4, r5, r6, pc}
 80145b6:	200b      	movs	r0, #11
 80145b8:	bd70      	pop	{r4, r5, r6, pc}
 80145ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80145be:	4770      	bx	lr

080145c0 <rcl_action_wait_set_add_action_server>:
 80145c0:	2800      	cmp	r0, #0
 80145c2:	d04d      	beq.n	8014660 <rcl_action_wait_set_add_action_server+0xa0>
 80145c4:	b570      	push	{r4, r5, r6, lr}
 80145c6:	460c      	mov	r4, r1
 80145c8:	b159      	cbz	r1, 80145e2 <rcl_action_wait_set_add_action_server+0x22>
 80145ca:	4605      	mov	r5, r0
 80145cc:	6808      	ldr	r0, [r1, #0]
 80145ce:	b140      	cbz	r0, 80145e2 <rcl_action_wait_set_add_action_server+0x22>
 80145d0:	4616      	mov	r6, r2
 80145d2:	f7fe fa37 	bl	8012a44 <rcl_service_is_valid>
 80145d6:	b120      	cbz	r0, 80145e2 <rcl_action_wait_set_add_action_server+0x22>
 80145d8:	6820      	ldr	r0, [r4, #0]
 80145da:	3004      	adds	r0, #4
 80145dc:	f7fe fa32 	bl	8012a44 <rcl_service_is_valid>
 80145e0:	b910      	cbnz	r0, 80145e8 <rcl_action_wait_set_add_action_server+0x28>
 80145e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80145e6:	bd70      	pop	{r4, r5, r6, pc}
 80145e8:	6820      	ldr	r0, [r4, #0]
 80145ea:	3008      	adds	r0, #8
 80145ec:	f7fe fa2a 	bl	8012a44 <rcl_service_is_valid>
 80145f0:	2800      	cmp	r0, #0
 80145f2:	d0f6      	beq.n	80145e2 <rcl_action_wait_set_add_action_server+0x22>
 80145f4:	6820      	ldr	r0, [r4, #0]
 80145f6:	300c      	adds	r0, #12
 80145f8:	f7f7 ff66 	bl	800c4c8 <rcl_publisher_is_valid_except_context>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d0f0      	beq.n	80145e2 <rcl_action_wait_set_add_action_server+0x22>
 8014600:	6820      	ldr	r0, [r4, #0]
 8014602:	3010      	adds	r0, #16
 8014604:	f7f7 ff60 	bl	800c4c8 <rcl_publisher_is_valid_except_context>
 8014608:	2800      	cmp	r0, #0
 801460a:	d0ea      	beq.n	80145e2 <rcl_action_wait_set_add_action_server+0x22>
 801460c:	6821      	ldr	r1, [r4, #0]
 801460e:	4628      	mov	r0, r5
 8014610:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8014614:	f7ff face 	bl	8013bb4 <rcl_wait_set_add_service>
 8014618:	2800      	cmp	r0, #0
 801461a:	d1e4      	bne.n	80145e6 <rcl_action_wait_set_add_action_server+0x26>
 801461c:	6821      	ldr	r1, [r4, #0]
 801461e:	4628      	mov	r0, r5
 8014620:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8014624:	3104      	adds	r1, #4
 8014626:	f7ff fac5 	bl	8013bb4 <rcl_wait_set_add_service>
 801462a:	2800      	cmp	r0, #0
 801462c:	d1db      	bne.n	80145e6 <rcl_action_wait_set_add_action_server+0x26>
 801462e:	6821      	ldr	r1, [r4, #0]
 8014630:	4628      	mov	r0, r5
 8014632:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8014636:	3108      	adds	r1, #8
 8014638:	f7ff fabc 	bl	8013bb4 <rcl_wait_set_add_service>
 801463c:	2800      	cmp	r0, #0
 801463e:	d1d2      	bne.n	80145e6 <rcl_action_wait_set_add_action_server+0x26>
 8014640:	6821      	ldr	r1, [r4, #0]
 8014642:	4628      	mov	r0, r5
 8014644:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014648:	3114      	adds	r1, #20
 801464a:	f7ff fa57 	bl	8013afc <rcl_wait_set_add_timer>
 801464e:	2800      	cmp	r0, #0
 8014650:	d1c9      	bne.n	80145e6 <rcl_action_wait_set_add_action_server+0x26>
 8014652:	2e00      	cmp	r6, #0
 8014654:	d0c7      	beq.n	80145e6 <rcl_action_wait_set_add_action_server+0x26>
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801465c:	6033      	str	r3, [r6, #0]
 801465e:	bd70      	pop	{r4, r5, r6, pc}
 8014660:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014664:	4770      	bx	lr
 8014666:	bf00      	nop

08014668 <rcl_action_server_wait_set_get_entities_ready>:
 8014668:	2800      	cmp	r0, #0
 801466a:	d05a      	beq.n	8014722 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801466e:	460c      	mov	r4, r1
 8014670:	b161      	cbz	r1, 801468c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014672:	4605      	mov	r5, r0
 8014674:	6808      	ldr	r0, [r1, #0]
 8014676:	b148      	cbz	r0, 801468c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014678:	4616      	mov	r6, r2
 801467a:	461f      	mov	r7, r3
 801467c:	f7fe f9e2 	bl	8012a44 <rcl_service_is_valid>
 8014680:	b120      	cbz	r0, 801468c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014682:	6820      	ldr	r0, [r4, #0]
 8014684:	3004      	adds	r0, #4
 8014686:	f7fe f9dd 	bl	8012a44 <rcl_service_is_valid>
 801468a:	b910      	cbnz	r0, 8014692 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801468c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014692:	6820      	ldr	r0, [r4, #0]
 8014694:	3008      	adds	r0, #8
 8014696:	f7fe f9d5 	bl	8012a44 <rcl_service_is_valid>
 801469a:	2800      	cmp	r0, #0
 801469c:	d0f6      	beq.n	801468c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801469e:	6820      	ldr	r0, [r4, #0]
 80146a0:	300c      	adds	r0, #12
 80146a2:	f7f7 ff11 	bl	800c4c8 <rcl_publisher_is_valid_except_context>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	d0f0      	beq.n	801468c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80146aa:	6820      	ldr	r0, [r4, #0]
 80146ac:	3010      	adds	r0, #16
 80146ae:	f7f7 ff0b 	bl	800c4c8 <rcl_publisher_is_valid_except_context>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d0ea      	beq.n	801468c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80146b6:	b3be      	cbz	r6, 8014728 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80146b8:	b3b7      	cbz	r7, 8014728 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80146ba:	9b06      	ldr	r3, [sp, #24]
 80146bc:	b3a3      	cbz	r3, 8014728 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80146be:	9b07      	ldr	r3, [sp, #28]
 80146c0:	b393      	cbz	r3, 8014728 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80146c2:	6821      	ldr	r1, [r4, #0]
 80146c4:	692a      	ldr	r2, [r5, #16]
 80146c6:	6a2c      	ldr	r4, [r5, #32]
 80146c8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80146cc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80146d0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80146d4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80146d8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80146dc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80146e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80146e4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80146e8:	1a64      	subs	r4, r4, r1
 80146ea:	fab4 f484 	clz	r4, r4
 80146ee:	0964      	lsrs	r4, r4, #5
 80146f0:	7034      	strb	r4, [r6, #0]
 80146f2:	1d0c      	adds	r4, r1, #4
 80146f4:	1b1b      	subs	r3, r3, r4
 80146f6:	fab3 f383 	clz	r3, r3
 80146fa:	095b      	lsrs	r3, r3, #5
 80146fc:	f101 0408 	add.w	r4, r1, #8
 8014700:	703b      	strb	r3, [r7, #0]
 8014702:	f101 0314 	add.w	r3, r1, #20
 8014706:	1b01      	subs	r1, r0, r4
 8014708:	1ad3      	subs	r3, r2, r3
 801470a:	fab1 f181 	clz	r1, r1
 801470e:	9a06      	ldr	r2, [sp, #24]
 8014710:	0949      	lsrs	r1, r1, #5
 8014712:	7011      	strb	r1, [r2, #0]
 8014714:	fab3 f383 	clz	r3, r3
 8014718:	9a07      	ldr	r2, [sp, #28]
 801471a:	095b      	lsrs	r3, r3, #5
 801471c:	2000      	movs	r0, #0
 801471e:	7013      	strb	r3, [r2, #0]
 8014720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014722:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014726:	4770      	bx	lr
 8014728:	200b      	movs	r0, #11
 801472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801472c <_execute_event_handler>:
 801472c:	2002      	movs	r0, #2
 801472e:	4770      	bx	lr

08014730 <_cancel_goal_event_handler>:
 8014730:	2003      	movs	r0, #3
 8014732:	4770      	bx	lr

08014734 <_succeed_event_handler>:
 8014734:	2004      	movs	r0, #4
 8014736:	4770      	bx	lr

08014738 <_abort_event_handler>:
 8014738:	2006      	movs	r0, #6
 801473a:	4770      	bx	lr

0801473c <_canceled_event_handler>:
 801473c:	2005      	movs	r0, #5
 801473e:	4770      	bx	lr

08014740 <rcl_action_transition_goal_state>:
 8014740:	b2c2      	uxtb	r2, r0
 8014742:	2a06      	cmp	r2, #6
 8014744:	d80c      	bhi.n	8014760 <rcl_action_transition_goal_state+0x20>
 8014746:	2904      	cmp	r1, #4
 8014748:	d80a      	bhi.n	8014760 <rcl_action_transition_goal_state+0x20>
 801474a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801474e:	b410      	push	{r4}
 8014750:	1853      	adds	r3, r2, r1
 8014752:	4c06      	ldr	r4, [pc, #24]	@ (801476c <rcl_action_transition_goal_state+0x2c>)
 8014754:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014758:	b123      	cbz	r3, 8014764 <rcl_action_transition_goal_state+0x24>
 801475a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801475e:	4718      	bx	r3
 8014760:	2000      	movs	r0, #0
 8014762:	4770      	bx	lr
 8014764:	2000      	movs	r0, #0
 8014766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801476a:	4770      	bx	lr
 801476c:	08019290 	.word	0x08019290

08014770 <rcl_action_get_zero_initialized_cancel_response>:
 8014770:	b510      	push	{r4, lr}
 8014772:	4c07      	ldr	r4, [pc, #28]	@ (8014790 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014774:	4686      	mov	lr, r0
 8014776:	4684      	mov	ip, r0
 8014778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801477a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801477e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014780:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014784:	6823      	ldr	r3, [r4, #0]
 8014786:	f8cc 3000 	str.w	r3, [ip]
 801478a:	4670      	mov	r0, lr
 801478c:	bd10      	pop	{r4, pc}
 801478e:	bf00      	nop
 8014790:	0801931c 	.word	0x0801931c

08014794 <rclc_action_send_result_request>:
 8014794:	b1d0      	cbz	r0, 80147cc <rclc_action_send_result_request+0x38>
 8014796:	b500      	push	{lr}
 8014798:	4684      	mov	ip, r0
 801479a:	b087      	sub	sp, #28
 801479c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80147a0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80147a4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80147a8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80147ac:	f10d 0e08 	add.w	lr, sp, #8
 80147b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80147b4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80147b8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80147bc:	a902      	add	r1, sp, #8
 80147be:	3010      	adds	r0, #16
 80147c0:	f7ff fbda 	bl	8013f78 <rcl_action_send_result_request>
 80147c4:	b920      	cbnz	r0, 80147d0 <rclc_action_send_result_request+0x3c>
 80147c6:	b007      	add	sp, #28
 80147c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80147cc:	200b      	movs	r0, #11
 80147ce:	4770      	bx	lr
 80147d0:	9001      	str	r0, [sp, #4]
 80147d2:	f7f8 fdd9 	bl	800d388 <rcutils_reset_error>
 80147d6:	9801      	ldr	r0, [sp, #4]
 80147d8:	b007      	add	sp, #28
 80147da:	f85d fb04 	ldr.w	pc, [sp], #4
 80147de:	bf00      	nop

080147e0 <rclc_action_take_goal_handle>:
 80147e0:	b160      	cbz	r0, 80147fc <rclc_action_take_goal_handle+0x1c>
 80147e2:	6883      	ldr	r3, [r0, #8]
 80147e4:	b143      	cbz	r3, 80147f8 <rclc_action_take_goal_handle+0x18>
 80147e6:	6819      	ldr	r1, [r3, #0]
 80147e8:	6081      	str	r1, [r0, #8]
 80147ea:	2200      	movs	r2, #0
 80147ec:	721a      	strb	r2, [r3, #8]
 80147ee:	68c1      	ldr	r1, [r0, #12]
 80147f0:	6019      	str	r1, [r3, #0]
 80147f2:	621a      	str	r2, [r3, #32]
 80147f4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80147f6:	60c3      	str	r3, [r0, #12]
 80147f8:	4618      	mov	r0, r3
 80147fa:	4770      	bx	lr
 80147fc:	4603      	mov	r3, r0
 80147fe:	e7fb      	b.n	80147f8 <rclc_action_take_goal_handle+0x18>

08014800 <rclc_action_remove_used_goal_handle>:
 8014800:	b180      	cbz	r0, 8014824 <rclc_action_remove_used_goal_handle+0x24>
 8014802:	b179      	cbz	r1, 8014824 <rclc_action_remove_used_goal_handle+0x24>
 8014804:	68c3      	ldr	r3, [r0, #12]
 8014806:	4299      	cmp	r1, r3
 8014808:	d00d      	beq.n	8014826 <rclc_action_remove_used_goal_handle+0x26>
 801480a:	b12b      	cbz	r3, 8014818 <rclc_action_remove_used_goal_handle+0x18>
 801480c:	681a      	ldr	r2, [r3, #0]
 801480e:	4291      	cmp	r1, r2
 8014810:	d003      	beq.n	801481a <rclc_action_remove_used_goal_handle+0x1a>
 8014812:	4613      	mov	r3, r2
 8014814:	2b00      	cmp	r3, #0
 8014816:	d1f9      	bne.n	801480c <rclc_action_remove_used_goal_handle+0xc>
 8014818:	4770      	bx	lr
 801481a:	680a      	ldr	r2, [r1, #0]
 801481c:	601a      	str	r2, [r3, #0]
 801481e:	6883      	ldr	r3, [r0, #8]
 8014820:	600b      	str	r3, [r1, #0]
 8014822:	6081      	str	r1, [r0, #8]
 8014824:	4770      	bx	lr
 8014826:	680b      	ldr	r3, [r1, #0]
 8014828:	60c3      	str	r3, [r0, #12]
 801482a:	e7f8      	b.n	801481e <rclc_action_remove_used_goal_handle+0x1e>

0801482c <rclc_action_find_goal_handle_by_uuid>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	b180      	cbz	r0, 8014852 <rclc_action_find_goal_handle_by_uuid+0x26>
 8014830:	460d      	mov	r5, r1
 8014832:	b181      	cbz	r1, 8014856 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8014834:	68c4      	ldr	r4, [r0, #12]
 8014836:	b914      	cbnz	r4, 801483e <rclc_action_find_goal_handle_by_uuid+0x12>
 8014838:	e009      	b.n	801484e <rclc_action_find_goal_handle_by_uuid+0x22>
 801483a:	6824      	ldr	r4, [r4, #0]
 801483c:	b13c      	cbz	r4, 801484e <rclc_action_find_goal_handle_by_uuid+0x22>
 801483e:	f104 0009 	add.w	r0, r4, #9
 8014842:	2210      	movs	r2, #16
 8014844:	4629      	mov	r1, r5
 8014846:	f003 f98d 	bl	8017b64 <memcmp>
 801484a:	2800      	cmp	r0, #0
 801484c:	d1f5      	bne.n	801483a <rclc_action_find_goal_handle_by_uuid+0xe>
 801484e:	4620      	mov	r0, r4
 8014850:	bd38      	pop	{r3, r4, r5, pc}
 8014852:	4604      	mov	r4, r0
 8014854:	e7fb      	b.n	801484e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014856:	460c      	mov	r4, r1
 8014858:	e7f9      	b.n	801484e <rclc_action_find_goal_handle_by_uuid+0x22>
 801485a:	bf00      	nop

0801485c <rclc_action_find_first_handle_by_status>:
 801485c:	b140      	cbz	r0, 8014870 <rclc_action_find_first_handle_by_status+0x14>
 801485e:	68c0      	ldr	r0, [r0, #12]
 8014860:	b910      	cbnz	r0, 8014868 <rclc_action_find_first_handle_by_status+0xc>
 8014862:	e005      	b.n	8014870 <rclc_action_find_first_handle_by_status+0x14>
 8014864:	6800      	ldr	r0, [r0, #0]
 8014866:	b118      	cbz	r0, 8014870 <rclc_action_find_first_handle_by_status+0x14>
 8014868:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801486c:	428b      	cmp	r3, r1
 801486e:	d1f9      	bne.n	8014864 <rclc_action_find_first_handle_by_status+0x8>
 8014870:	4770      	bx	lr
 8014872:	bf00      	nop

08014874 <rclc_action_find_first_terminated_handle>:
 8014874:	b140      	cbz	r0, 8014888 <rclc_action_find_first_terminated_handle+0x14>
 8014876:	68c0      	ldr	r0, [r0, #12]
 8014878:	b910      	cbnz	r0, 8014880 <rclc_action_find_first_terminated_handle+0xc>
 801487a:	e005      	b.n	8014888 <rclc_action_find_first_terminated_handle+0x14>
 801487c:	6800      	ldr	r0, [r0, #0]
 801487e:	b118      	cbz	r0, 8014888 <rclc_action_find_first_terminated_handle+0x14>
 8014880:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014884:	2b03      	cmp	r3, #3
 8014886:	ddf9      	ble.n	801487c <rclc_action_find_first_terminated_handle+0x8>
 8014888:	4770      	bx	lr
 801488a:	bf00      	nop

0801488c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801488c:	b170      	cbz	r0, 80148ac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801488e:	68c0      	ldr	r0, [r0, #12]
 8014890:	b160      	cbz	r0, 80148ac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014892:	b410      	push	{r4}
 8014894:	e001      	b.n	801489a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014896:	6800      	ldr	r0, [r0, #0]
 8014898:	b128      	cbz	r0, 80148a6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801489a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801489e:	4299      	cmp	r1, r3
 80148a0:	bf08      	it	eq
 80148a2:	4294      	cmpeq	r4, r2
 80148a4:	d1f7      	bne.n	8014896 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80148a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148aa:	4770      	bx	lr
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop

080148b0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80148b0:	b170      	cbz	r0, 80148d0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80148b2:	68c0      	ldr	r0, [r0, #12]
 80148b4:	b160      	cbz	r0, 80148d0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80148b6:	b410      	push	{r4}
 80148b8:	e001      	b.n	80148be <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80148ba:	6800      	ldr	r0, [r0, #0]
 80148bc:	b128      	cbz	r0, 80148ca <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80148be:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80148c2:	4299      	cmp	r1, r3
 80148c4:	bf08      	it	eq
 80148c6:	4294      	cmpeq	r4, r2
 80148c8:	d1f7      	bne.n	80148ba <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80148ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148ce:	4770      	bx	lr
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop

080148d4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80148d4:	b170      	cbz	r0, 80148f4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80148d6:	68c0      	ldr	r0, [r0, #12]
 80148d8:	b160      	cbz	r0, 80148f4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80148da:	b410      	push	{r4}
 80148dc:	e001      	b.n	80148e2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80148de:	6800      	ldr	r0, [r0, #0]
 80148e0:	b128      	cbz	r0, 80148ee <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80148e2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80148e6:	4299      	cmp	r1, r3
 80148e8:	bf08      	it	eq
 80148ea:	4294      	cmpeq	r4, r2
 80148ec:	d1f7      	bne.n	80148de <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80148ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148f2:	4770      	bx	lr
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop

080148f8 <rclc_action_find_first_handle_with_goal_response>:
 80148f8:	b140      	cbz	r0, 801490c <rclc_action_find_first_handle_with_goal_response+0x14>
 80148fa:	68c0      	ldr	r0, [r0, #12]
 80148fc:	b910      	cbnz	r0, 8014904 <rclc_action_find_first_handle_with_goal_response+0xc>
 80148fe:	e005      	b.n	801490c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014900:	6800      	ldr	r0, [r0, #0]
 8014902:	b118      	cbz	r0, 801490c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014904:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d0f9      	beq.n	8014900 <rclc_action_find_first_handle_with_goal_response+0x8>
 801490c:	4770      	bx	lr
 801490e:	bf00      	nop

08014910 <rclc_action_find_first_handle_with_result_response>:
 8014910:	b140      	cbz	r0, 8014924 <rclc_action_find_first_handle_with_result_response+0x14>
 8014912:	68c0      	ldr	r0, [r0, #12]
 8014914:	b910      	cbnz	r0, 801491c <rclc_action_find_first_handle_with_result_response+0xc>
 8014916:	e005      	b.n	8014924 <rclc_action_find_first_handle_with_result_response+0x14>
 8014918:	6800      	ldr	r0, [r0, #0]
 801491a:	b118      	cbz	r0, 8014924 <rclc_action_find_first_handle_with_result_response+0x14>
 801491c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014920:	2b00      	cmp	r3, #0
 8014922:	d0f9      	beq.n	8014918 <rclc_action_find_first_handle_with_result_response+0x8>
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop

08014928 <rclc_action_server_response_goal_request>:
 8014928:	b198      	cbz	r0, 8014952 <rclc_action_server_response_goal_request+0x2a>
 801492a:	b510      	push	{r4, lr}
 801492c:	6844      	ldr	r4, [r0, #4]
 801492e:	b086      	sub	sp, #24
 8014930:	2200      	movs	r2, #0
 8014932:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014936:	460b      	mov	r3, r1
 8014938:	9205      	str	r2, [sp, #20]
 801493a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801493e:	aa03      	add	r2, sp, #12
 8014940:	f104 0010 	add.w	r0, r4, #16
 8014944:	f88d 300c 	strb.w	r3, [sp, #12]
 8014948:	f7ff fd4a 	bl	80143e0 <rcl_action_send_goal_response>
 801494c:	b918      	cbnz	r0, 8014956 <rclc_action_server_response_goal_request+0x2e>
 801494e:	b006      	add	sp, #24
 8014950:	bd10      	pop	{r4, pc}
 8014952:	200b      	movs	r0, #11
 8014954:	4770      	bx	lr
 8014956:	9001      	str	r0, [sp, #4]
 8014958:	f7f8 fd16 	bl	800d388 <rcutils_reset_error>
 801495c:	9801      	ldr	r0, [sp, #4]
 801495e:	b006      	add	sp, #24
 8014960:	bd10      	pop	{r4, pc}
 8014962:	bf00      	nop
 8014964:	0000      	movs	r0, r0
	...

08014968 <rclc_action_server_goal_cancel_accept>:
 8014968:	b310      	cbz	r0, 80149b0 <rclc_action_server_goal_cancel_accept+0x48>
 801496a:	b510      	push	{r4, lr}
 801496c:	b090      	sub	sp, #64	@ 0x40
 801496e:	4604      	mov	r4, r0
 8014970:	a806      	add	r0, sp, #24
 8014972:	f7ff fefd 	bl	8014770 <rcl_action_get_zero_initialized_cancel_response>
 8014976:	2300      	movs	r3, #0
 8014978:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801497c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014980:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014984:	f88d 3018 	strb.w	r3, [sp, #24]
 8014988:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801498c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014990:	46ec      	mov	ip, sp
 8014992:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014996:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80149b8 <rclc_action_server_goal_cancel_accept+0x50>
 801499a:	6860      	ldr	r0, [r4, #4]
 801499c:	aa06      	add	r2, sp, #24
 801499e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80149a2:	3010      	adds	r0, #16
 80149a4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80149a8:	f7ff fdd2 	bl	8014550 <rcl_action_send_cancel_response>
 80149ac:	b010      	add	sp, #64	@ 0x40
 80149ae:	bd10      	pop	{r4, pc}
 80149b0:	200b      	movs	r0, #11
 80149b2:	4770      	bx	lr
 80149b4:	f3af 8000 	nop.w
 80149b8:	00000001 	.word	0x00000001
 80149bc:	00000001 	.word	0x00000001

080149c0 <rclc_action_server_goal_cancel_reject>:
 80149c0:	b082      	sub	sp, #8
 80149c2:	b530      	push	{r4, r5, lr}
 80149c4:	b08b      	sub	sp, #44	@ 0x2c
 80149c6:	ac0e      	add	r4, sp, #56	@ 0x38
 80149c8:	e884 000c 	stmia.w	r4, {r2, r3}
 80149cc:	b188      	cbz	r0, 80149f2 <rclc_action_server_goal_cancel_reject+0x32>
 80149ce:	4604      	mov	r4, r0
 80149d0:	a801      	add	r0, sp, #4
 80149d2:	460d      	mov	r5, r1
 80149d4:	f7ff fecc 	bl	8014770 <rcl_action_get_zero_initialized_cancel_response>
 80149d8:	aa01      	add	r2, sp, #4
 80149da:	a90e      	add	r1, sp, #56	@ 0x38
 80149dc:	f104 0010 	add.w	r0, r4, #16
 80149e0:	f88d 5004 	strb.w	r5, [sp, #4]
 80149e4:	f7ff fdb4 	bl	8014550 <rcl_action_send_cancel_response>
 80149e8:	b00b      	add	sp, #44	@ 0x2c
 80149ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149ee:	b002      	add	sp, #8
 80149f0:	4770      	bx	lr
 80149f2:	200b      	movs	r0, #11
 80149f4:	b00b      	add	sp, #44	@ 0x2c
 80149f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149fa:	b002      	add	sp, #8
 80149fc:	4770      	bx	lr
 80149fe:	bf00      	nop

08014a00 <__atomic_load_8>:
 8014a00:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014a04:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014a08:	4a15      	ldr	r2, [pc, #84]	@ (8014a60 <__atomic_load_8+0x60>)
 8014a0a:	4b16      	ldr	r3, [pc, #88]	@ (8014a64 <__atomic_load_8+0x64>)
 8014a0c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014a10:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014a14:	fb02 f101 	mul.w	r1, r2, r1
 8014a18:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014a1c:	fba3 2301 	umull	r2, r3, r3, r1
 8014a20:	091b      	lsrs	r3, r3, #4
 8014a22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014a26:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014a2a:	b4d0      	push	{r4, r6, r7}
 8014a2c:	4c0e      	ldr	r4, [pc, #56]	@ (8014a68 <__atomic_load_8+0x68>)
 8014a2e:	1ac9      	subs	r1, r1, r3
 8014a30:	1862      	adds	r2, r4, r1
 8014a32:	f04f 0c01 	mov.w	ip, #1
 8014a36:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014a3a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014a3e:	2e00      	cmp	r6, #0
 8014a40:	d1f9      	bne.n	8014a36 <__atomic_load_8+0x36>
 8014a42:	f3bf 8f5b 	dmb	ish
 8014a46:	b2db      	uxtb	r3, r3
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d1f4      	bne.n	8014a36 <__atomic_load_8+0x36>
 8014a4c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014a50:	f3bf 8f5b 	dmb	ish
 8014a54:	5463      	strb	r3, [r4, r1]
 8014a56:	4630      	mov	r0, r6
 8014a58:	4639      	mov	r1, r7
 8014a5a:	bcd0      	pop	{r4, r6, r7}
 8014a5c:	4770      	bx	lr
 8014a5e:	bf00      	nop
 8014a60:	27d4eb2d 	.word	0x27d4eb2d
 8014a64:	b21642c9 	.word	0xb21642c9
 8014a68:	2000ae74 	.word	0x2000ae74

08014a6c <__atomic_store_8>:
 8014a6c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014a70:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014a74:	b570      	push	{r4, r5, r6, lr}
 8014a76:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014a7a:	4c14      	ldr	r4, [pc, #80]	@ (8014acc <__atomic_store_8+0x60>)
 8014a7c:	4d14      	ldr	r5, [pc, #80]	@ (8014ad0 <__atomic_store_8+0x64>)
 8014a7e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014a82:	fb04 f101 	mul.w	r1, r4, r1
 8014a86:	4c13      	ldr	r4, [pc, #76]	@ (8014ad4 <__atomic_store_8+0x68>)
 8014a88:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014a8c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014a90:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014a94:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014a98:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014a9c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014aa0:	eb05 0c0e 	add.w	ip, r5, lr
 8014aa4:	f04f 0401 	mov.w	r4, #1
 8014aa8:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014aac:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014ab0:	2e00      	cmp	r6, #0
 8014ab2:	d1f9      	bne.n	8014aa8 <__atomic_store_8+0x3c>
 8014ab4:	f3bf 8f5b 	dmb	ish
 8014ab8:	b2c9      	uxtb	r1, r1
 8014aba:	2900      	cmp	r1, #0
 8014abc:	d1f4      	bne.n	8014aa8 <__atomic_store_8+0x3c>
 8014abe:	e9c0 2300 	strd	r2, r3, [r0]
 8014ac2:	f3bf 8f5b 	dmb	ish
 8014ac6:	f805 100e 	strb.w	r1, [r5, lr]
 8014aca:	bd70      	pop	{r4, r5, r6, pc}
 8014acc:	27d4eb2d 	.word	0x27d4eb2d
 8014ad0:	2000ae74 	.word	0x2000ae74
 8014ad4:	b21642c9 	.word	0xb21642c9

08014ad8 <__atomic_exchange_8>:
 8014ad8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014adc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014ae0:	4916      	ldr	r1, [pc, #88]	@ (8014b3c <__atomic_exchange_8+0x64>)
 8014ae2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014ae6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014aea:	fb01 fc0c 	mul.w	ip, r1, ip
 8014aee:	4914      	ldr	r1, [pc, #80]	@ (8014b40 <__atomic_exchange_8+0x68>)
 8014af0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	4605      	mov	r5, r0
 8014af8:	fba1 010c 	umull	r0, r1, r1, ip
 8014afc:	0909      	lsrs	r1, r1, #4
 8014afe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014b02:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014b06:	4e0f      	ldr	r6, [pc, #60]	@ (8014b44 <__atomic_exchange_8+0x6c>)
 8014b08:	ebac 0c01 	sub.w	ip, ip, r1
 8014b0c:	eb06 010c 	add.w	r1, r6, ip
 8014b10:	f04f 0e01 	mov.w	lr, #1
 8014b14:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014b18:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014b1c:	2800      	cmp	r0, #0
 8014b1e:	d1f9      	bne.n	8014b14 <__atomic_exchange_8+0x3c>
 8014b20:	f3bf 8f5b 	dmb	ish
 8014b24:	b2e4      	uxtb	r4, r4
 8014b26:	2c00      	cmp	r4, #0
 8014b28:	d1f4      	bne.n	8014b14 <__atomic_exchange_8+0x3c>
 8014b2a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014b2e:	e9c5 2300 	strd	r2, r3, [r5]
 8014b32:	f3bf 8f5b 	dmb	ish
 8014b36:	f806 400c 	strb.w	r4, [r6, ip]
 8014b3a:	bd70      	pop	{r4, r5, r6, pc}
 8014b3c:	27d4eb2d 	.word	0x27d4eb2d
 8014b40:	b21642c9 	.word	0xb21642c9
 8014b44:	2000ae74 	.word	0x2000ae74

08014b48 <rcutils_get_env>:
 8014b48:	b168      	cbz	r0, 8014b66 <rcutils_get_env+0x1e>
 8014b4a:	b510      	push	{r4, lr}
 8014b4c:	460c      	mov	r4, r1
 8014b4e:	b129      	cbz	r1, 8014b5c <rcutils_get_env+0x14>
 8014b50:	f002 fc64 	bl	801741c <getenv>
 8014b54:	b120      	cbz	r0, 8014b60 <rcutils_get_env+0x18>
 8014b56:	6020      	str	r0, [r4, #0]
 8014b58:	2000      	movs	r0, #0
 8014b5a:	bd10      	pop	{r4, pc}
 8014b5c:	4803      	ldr	r0, [pc, #12]	@ (8014b6c <rcutils_get_env+0x24>)
 8014b5e:	bd10      	pop	{r4, pc}
 8014b60:	4b03      	ldr	r3, [pc, #12]	@ (8014b70 <rcutils_get_env+0x28>)
 8014b62:	6023      	str	r3, [r4, #0]
 8014b64:	bd10      	pop	{r4, pc}
 8014b66:	4803      	ldr	r0, [pc, #12]	@ (8014b74 <rcutils_get_env+0x2c>)
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop
 8014b6c:	0801935c 	.word	0x0801935c
 8014b70:	08019480 	.word	0x08019480
 8014b74:	08019340 	.word	0x08019340

08014b78 <rcutils_is_directory>:
 8014b78:	2000      	movs	r0, #0
 8014b7a:	4770      	bx	lr

08014b7c <rcutils_join_path>:
 8014b7c:	b082      	sub	sp, #8
 8014b7e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014b82:	2000      	movs	r0, #0
 8014b84:	b002      	add	sp, #8
 8014b86:	4770      	bx	lr

08014b88 <rcutils_to_native_path>:
 8014b88:	b084      	sub	sp, #16
 8014b8a:	a801      	add	r0, sp, #4
 8014b8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014b90:	b004      	add	sp, #16
 8014b92:	2000      	movs	r0, #0
 8014b94:	4770      	bx	lr
 8014b96:	bf00      	nop

08014b98 <rcutils_format_string_limit>:
 8014b98:	b40f      	push	{r0, r1, r2, r3}
 8014b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b9c:	b083      	sub	sp, #12
 8014b9e:	ac08      	add	r4, sp, #32
 8014ba0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ba6:	b34e      	cbz	r6, 8014bfc <rcutils_format_string_limit+0x64>
 8014ba8:	a808      	add	r0, sp, #32
 8014baa:	f7f8 fbc7 	bl	800d33c <rcutils_allocator_is_valid>
 8014bae:	b328      	cbz	r0, 8014bfc <rcutils_format_string_limit+0x64>
 8014bb0:	2100      	movs	r1, #0
 8014bb2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014bb4:	4632      	mov	r2, r6
 8014bb6:	4608      	mov	r0, r1
 8014bb8:	e9cd 3300 	strd	r3, r3, [sp]
 8014bbc:	f000 f8f4 	bl	8014da8 <rcutils_vsnprintf>
 8014bc0:	1c43      	adds	r3, r0, #1
 8014bc2:	4605      	mov	r5, r0
 8014bc4:	d01a      	beq.n	8014bfc <rcutils_format_string_limit+0x64>
 8014bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014bc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014bca:	1c47      	adds	r7, r0, #1
 8014bcc:	429f      	cmp	r7, r3
 8014bce:	bf84      	itt	hi
 8014bd0:	461f      	movhi	r7, r3
 8014bd2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014bd6:	4638      	mov	r0, r7
 8014bd8:	9b08      	ldr	r3, [sp, #32]
 8014bda:	4798      	blx	r3
 8014bdc:	4604      	mov	r4, r0
 8014bde:	b168      	cbz	r0, 8014bfc <rcutils_format_string_limit+0x64>
 8014be0:	9b01      	ldr	r3, [sp, #4]
 8014be2:	4632      	mov	r2, r6
 8014be4:	4639      	mov	r1, r7
 8014be6:	f000 f8df 	bl	8014da8 <rcutils_vsnprintf>
 8014bea:	2800      	cmp	r0, #0
 8014bec:	db02      	blt.n	8014bf4 <rcutils_format_string_limit+0x5c>
 8014bee:	2300      	movs	r3, #0
 8014bf0:	5563      	strb	r3, [r4, r5]
 8014bf2:	e004      	b.n	8014bfe <rcutils_format_string_limit+0x66>
 8014bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bf6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	4798      	blx	r3
 8014bfc:	2400      	movs	r4, #0
 8014bfe:	4620      	mov	r0, r4
 8014c00:	b003      	add	sp, #12
 8014c02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014c06:	b004      	add	sp, #16
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop

08014c0c <rcutils_repl_str>:
 8014c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c10:	ed2d 8b02 	vpush	{d8}
 8014c14:	b087      	sub	sp, #28
 8014c16:	4680      	mov	r8, r0
 8014c18:	4608      	mov	r0, r1
 8014c1a:	f8cd 8004 	str.w	r8, [sp, #4]
 8014c1e:	ee08 2a10 	vmov	s16, r2
 8014c22:	468a      	mov	sl, r1
 8014c24:	4699      	mov	r9, r3
 8014c26:	f7eb fb05 	bl	8000234 <strlen>
 8014c2a:	2600      	movs	r6, #0
 8014c2c:	4647      	mov	r7, r8
 8014c2e:	9002      	str	r0, [sp, #8]
 8014c30:	46b3      	mov	fp, r6
 8014c32:	2510      	movs	r5, #16
 8014c34:	46b0      	mov	r8, r6
 8014c36:	e01d      	b.n	8014c74 <rcutils_repl_str+0x68>
 8014c38:	f10b 0b01 	add.w	fp, fp, #1
 8014c3c:	455e      	cmp	r6, fp
 8014c3e:	d211      	bcs.n	8014c64 <rcutils_repl_str+0x58>
 8014c40:	442e      	add	r6, r5
 8014c42:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014c46:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014c4a:	00b1      	lsls	r1, r6, #2
 8014c4c:	4798      	blx	r3
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	f000 8088 	beq.w	8014d64 <rcutils_repl_str+0x158>
 8014c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c58:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014c5c:	4680      	mov	r8, r0
 8014c5e:	bf28      	it	cs
 8014c60:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014c64:	9a01      	ldr	r2, [sp, #4]
 8014c66:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014c6a:	1aa2      	subs	r2, r4, r2
 8014c6c:	f843 2c04 	str.w	r2, [r3, #-4]
 8014c70:	9b02      	ldr	r3, [sp, #8]
 8014c72:	18e7      	adds	r7, r4, r3
 8014c74:	4651      	mov	r1, sl
 8014c76:	4638      	mov	r0, r7
 8014c78:	f002 ffc5 	bl	8017c06 <strstr>
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	4640      	mov	r0, r8
 8014c80:	2c00      	cmp	r4, #0
 8014c82:	d1d9      	bne.n	8014c38 <rcutils_repl_str+0x2c>
 8014c84:	46b8      	mov	r8, r7
 8014c86:	4607      	mov	r7, r0
 8014c88:	4640      	mov	r0, r8
 8014c8a:	f7eb fad3 	bl	8000234 <strlen>
 8014c8e:	9b01      	ldr	r3, [sp, #4]
 8014c90:	eba8 0303 	sub.w	r3, r8, r3
 8014c94:	181c      	adds	r4, r3, r0
 8014c96:	9404      	str	r4, [sp, #16]
 8014c98:	f1bb 0f00 	cmp.w	fp, #0
 8014c9c:	d04a      	beq.n	8014d34 <rcutils_repl_str+0x128>
 8014c9e:	ee18 0a10 	vmov	r0, s16
 8014ca2:	f7eb fac7 	bl	8000234 <strlen>
 8014ca6:	9b02      	ldr	r3, [sp, #8]
 8014ca8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014cac:	1ac3      	subs	r3, r0, r3
 8014cae:	fb0b 4303 	mla	r3, fp, r3, r4
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	9305      	str	r3, [sp, #20]
 8014cb6:	4606      	mov	r6, r0
 8014cb8:	f8d9 3000 	ldr.w	r3, [r9]
 8014cbc:	1c50      	adds	r0, r2, #1
 8014cbe:	4798      	blx	r3
 8014cc0:	9003      	str	r0, [sp, #12]
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	d04f      	beq.n	8014d66 <rcutils_repl_str+0x15a>
 8014cc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014cca:	683a      	ldr	r2, [r7, #0]
 8014ccc:	4641      	mov	r1, r8
 8014cce:	f003 f83c 	bl	8017d4a <memcpy>
 8014cd2:	683d      	ldr	r5, [r7, #0]
 8014cd4:	9b03      	ldr	r3, [sp, #12]
 8014cd6:	9701      	str	r7, [sp, #4]
 8014cd8:	46ba      	mov	sl, r7
 8014cda:	441d      	add	r5, r3
 8014cdc:	9f02      	ldr	r7, [sp, #8]
 8014cde:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ce2:	2401      	movs	r4, #1
 8014ce4:	46d1      	mov	r9, sl
 8014ce6:	ee18 aa10 	vmov	sl, s16
 8014cea:	e00a      	b.n	8014d02 <rcutils_repl_str+0xf6>
 8014cec:	f8d9 5000 	ldr.w	r5, [r9]
 8014cf0:	1aaa      	subs	r2, r5, r2
 8014cf2:	1885      	adds	r5, r0, r2
 8014cf4:	f003 f829 	bl	8017d4a <memcpy>
 8014cf8:	45a3      	cmp	fp, r4
 8014cfa:	f104 0201 	add.w	r2, r4, #1
 8014cfe:	d935      	bls.n	8014d6c <rcutils_repl_str+0x160>
 8014d00:	4614      	mov	r4, r2
 8014d02:	4632      	mov	r2, r6
 8014d04:	4651      	mov	r1, sl
 8014d06:	4628      	mov	r0, r5
 8014d08:	f003 f81f 	bl	8017d4a <memcpy>
 8014d0c:	f859 2b04 	ldr.w	r2, [r9], #4
 8014d10:	45a3      	cmp	fp, r4
 8014d12:	443a      	add	r2, r7
 8014d14:	eb05 0006 	add.w	r0, r5, r6
 8014d18:	eb08 0102 	add.w	r1, r8, r2
 8014d1c:	d1e6      	bne.n	8014cec <rcutils_repl_str+0xe0>
 8014d1e:	9b04      	ldr	r3, [sp, #16]
 8014d20:	1a9a      	subs	r2, r3, r2
 8014d22:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014d26:	f003 f810 	bl	8017d4a <memcpy>
 8014d2a:	9a03      	ldr	r2, [sp, #12]
 8014d2c:	9905      	ldr	r1, [sp, #20]
 8014d2e:	2300      	movs	r3, #0
 8014d30:	5453      	strb	r3, [r2, r1]
 8014d32:	e00b      	b.n	8014d4c <rcutils_repl_str+0x140>
 8014d34:	4620      	mov	r0, r4
 8014d36:	f8d9 3000 	ldr.w	r3, [r9]
 8014d3a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014d3e:	3001      	adds	r0, #1
 8014d40:	4798      	blx	r3
 8014d42:	9003      	str	r0, [sp, #12]
 8014d44:	b110      	cbz	r0, 8014d4c <rcutils_repl_str+0x140>
 8014d46:	9901      	ldr	r1, [sp, #4]
 8014d48:	f002 fff7 	bl	8017d3a <strcpy>
 8014d4c:	4638      	mov	r0, r7
 8014d4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014d52:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014d56:	4798      	blx	r3
 8014d58:	9803      	ldr	r0, [sp, #12]
 8014d5a:	b007      	add	sp, #28
 8014d5c:	ecbd 8b02 	vpop	{d8}
 8014d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d64:	4647      	mov	r7, r8
 8014d66:	2300      	movs	r3, #0
 8014d68:	9303      	str	r3, [sp, #12]
 8014d6a:	e7ef      	b.n	8014d4c <rcutils_repl_str+0x140>
 8014d6c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014d70:	e7db      	b.n	8014d2a <rcutils_repl_str+0x11e>
 8014d72:	bf00      	nop

08014d74 <rcutils_snprintf>:
 8014d74:	b40c      	push	{r2, r3}
 8014d76:	b530      	push	{r4, r5, lr}
 8014d78:	b083      	sub	sp, #12
 8014d7a:	ab06      	add	r3, sp, #24
 8014d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d80:	9301      	str	r3, [sp, #4]
 8014d82:	b152      	cbz	r2, 8014d9a <rcutils_snprintf+0x26>
 8014d84:	b138      	cbz	r0, 8014d96 <rcutils_snprintf+0x22>
 8014d86:	b141      	cbz	r1, 8014d9a <rcutils_snprintf+0x26>
 8014d88:	f002 fede 	bl	8017b48 <vsniprintf>
 8014d8c:	b003      	add	sp, #12
 8014d8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d92:	b002      	add	sp, #8
 8014d94:	4770      	bx	lr
 8014d96:	2900      	cmp	r1, #0
 8014d98:	d0f6      	beq.n	8014d88 <rcutils_snprintf+0x14>
 8014d9a:	f002 ffa1 	bl	8017ce0 <__errno>
 8014d9e:	2316      	movs	r3, #22
 8014da0:	6003      	str	r3, [r0, #0]
 8014da2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014da6:	e7f1      	b.n	8014d8c <rcutils_snprintf+0x18>

08014da8 <rcutils_vsnprintf>:
 8014da8:	b570      	push	{r4, r5, r6, lr}
 8014daa:	b13a      	cbz	r2, 8014dbc <rcutils_vsnprintf+0x14>
 8014dac:	b120      	cbz	r0, 8014db8 <rcutils_vsnprintf+0x10>
 8014dae:	b129      	cbz	r1, 8014dbc <rcutils_vsnprintf+0x14>
 8014db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014db4:	f002 bec8 	b.w	8017b48 <vsniprintf>
 8014db8:	2900      	cmp	r1, #0
 8014dba:	d0f9      	beq.n	8014db0 <rcutils_vsnprintf+0x8>
 8014dbc:	f002 ff90 	bl	8017ce0 <__errno>
 8014dc0:	2316      	movs	r3, #22
 8014dc2:	6003      	str	r3, [r0, #0]
 8014dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014dc8:	bd70      	pop	{r4, r5, r6, pc}
 8014dca:	bf00      	nop

08014dcc <rcutils_strdup>:
 8014dcc:	b084      	sub	sp, #16
 8014dce:	b570      	push	{r4, r5, r6, lr}
 8014dd0:	b082      	sub	sp, #8
 8014dd2:	ac07      	add	r4, sp, #28
 8014dd4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014dd8:	4605      	mov	r5, r0
 8014dda:	b1b0      	cbz	r0, 8014e0a <rcutils_strdup+0x3e>
 8014ddc:	f7eb fa2a 	bl	8000234 <strlen>
 8014de0:	1c42      	adds	r2, r0, #1
 8014de2:	9b07      	ldr	r3, [sp, #28]
 8014de4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014de6:	9201      	str	r2, [sp, #4]
 8014de8:	4606      	mov	r6, r0
 8014dea:	4610      	mov	r0, r2
 8014dec:	4798      	blx	r3
 8014dee:	4604      	mov	r4, r0
 8014df0:	b128      	cbz	r0, 8014dfe <rcutils_strdup+0x32>
 8014df2:	9a01      	ldr	r2, [sp, #4]
 8014df4:	4629      	mov	r1, r5
 8014df6:	f002 ffa8 	bl	8017d4a <memcpy>
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	55a3      	strb	r3, [r4, r6]
 8014dfe:	4620      	mov	r0, r4
 8014e00:	b002      	add	sp, #8
 8014e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e06:	b004      	add	sp, #16
 8014e08:	4770      	bx	lr
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	e7f7      	b.n	8014dfe <rcutils_strdup+0x32>
 8014e0e:	bf00      	nop

08014e10 <rcutils_strndup>:
 8014e10:	b082      	sub	sp, #8
 8014e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e14:	ac06      	add	r4, sp, #24
 8014e16:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e1a:	4605      	mov	r5, r0
 8014e1c:	b188      	cbz	r0, 8014e42 <rcutils_strndup+0x32>
 8014e1e:	1c4f      	adds	r7, r1, #1
 8014e20:	460e      	mov	r6, r1
 8014e22:	4638      	mov	r0, r7
 8014e24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014e26:	4790      	blx	r2
 8014e28:	4604      	mov	r4, r0
 8014e2a:	b128      	cbz	r0, 8014e38 <rcutils_strndup+0x28>
 8014e2c:	463a      	mov	r2, r7
 8014e2e:	4629      	mov	r1, r5
 8014e30:	f002 ff8b 	bl	8017d4a <memcpy>
 8014e34:	2300      	movs	r3, #0
 8014e36:	55a3      	strb	r3, [r4, r6]
 8014e38:	4620      	mov	r0, r4
 8014e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014e3e:	b002      	add	sp, #8
 8014e40:	4770      	bx	lr
 8014e42:	4604      	mov	r4, r0
 8014e44:	e7f8      	b.n	8014e38 <rcutils_strndup+0x28>
 8014e46:	bf00      	nop

08014e48 <rcutils_get_zero_initialized_string_map>:
 8014e48:	4b01      	ldr	r3, [pc, #4]	@ (8014e50 <rcutils_get_zero_initialized_string_map+0x8>)
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	6018      	str	r0, [r3, #0]
 8014e4e:	4770      	bx	lr
 8014e50:	2000ae8c 	.word	0x2000ae8c

08014e54 <rcutils_string_map_reserve>:
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d05f      	beq.n	8014f18 <rcutils_string_map_reserve+0xc4>
 8014e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e5c:	460c      	mov	r4, r1
 8014e5e:	6801      	ldr	r1, [r0, #0]
 8014e60:	b082      	sub	sp, #8
 8014e62:	4605      	mov	r5, r0
 8014e64:	b129      	cbz	r1, 8014e72 <rcutils_string_map_reserve+0x1e>
 8014e66:	68cb      	ldr	r3, [r1, #12]
 8014e68:	42a3      	cmp	r3, r4
 8014e6a:	d906      	bls.n	8014e7a <rcutils_string_map_reserve+0x26>
 8014e6c:	461c      	mov	r4, r3
 8014e6e:	2900      	cmp	r1, #0
 8014e70:	d1f9      	bne.n	8014e66 <rcutils_string_map_reserve+0x12>
 8014e72:	201f      	movs	r0, #31
 8014e74:	b002      	add	sp, #8
 8014e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e7a:	688b      	ldr	r3, [r1, #8]
 8014e7c:	42a3      	cmp	r3, r4
 8014e7e:	d047      	beq.n	8014f10 <rcutils_string_map_reserve+0xbc>
 8014e80:	6a0e      	ldr	r6, [r1, #32]
 8014e82:	2c00      	cmp	r4, #0
 8014e84:	d034      	beq.n	8014ef0 <rcutils_string_map_reserve+0x9c>
 8014e86:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014e8a:	d243      	bcs.n	8014f14 <rcutils_string_map_reserve+0xc0>
 8014e8c:	00a7      	lsls	r7, r4, #2
 8014e8e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014e92:	6808      	ldr	r0, [r1, #0]
 8014e94:	4632      	mov	r2, r6
 8014e96:	4639      	mov	r1, r7
 8014e98:	47c0      	blx	r8
 8014e9a:	2800      	cmp	r0, #0
 8014e9c:	d03a      	beq.n	8014f14 <rcutils_string_map_reserve+0xc0>
 8014e9e:	682b      	ldr	r3, [r5, #0]
 8014ea0:	4632      	mov	r2, r6
 8014ea2:	6018      	str	r0, [r3, #0]
 8014ea4:	4639      	mov	r1, r7
 8014ea6:	6858      	ldr	r0, [r3, #4]
 8014ea8:	47c0      	blx	r8
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	d032      	beq.n	8014f14 <rcutils_string_map_reserve+0xc0>
 8014eae:	682d      	ldr	r5, [r5, #0]
 8014eb0:	68ab      	ldr	r3, [r5, #8]
 8014eb2:	6068      	str	r0, [r5, #4]
 8014eb4:	42a3      	cmp	r3, r4
 8014eb6:	d226      	bcs.n	8014f06 <rcutils_string_map_reserve+0xb2>
 8014eb8:	682a      	ldr	r2, [r5, #0]
 8014eba:	eb00 0c07 	add.w	ip, r0, r7
 8014ebe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014ec2:	45e6      	cmp	lr, ip
 8014ec4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014ec8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014ecc:	d203      	bcs.n	8014ed6 <rcutils_string_map_reserve+0x82>
 8014ece:	eb02 0c07 	add.w	ip, r2, r7
 8014ed2:	4566      	cmp	r6, ip
 8014ed4:	d322      	bcc.n	8014f1c <rcutils_string_map_reserve+0xc8>
 8014ed6:	1ae3      	subs	r3, r4, r3
 8014ed8:	009a      	lsls	r2, r3, #2
 8014eda:	4670      	mov	r0, lr
 8014edc:	2100      	movs	r1, #0
 8014ede:	9201      	str	r2, [sp, #4]
 8014ee0:	f002 fe6a 	bl	8017bb8 <memset>
 8014ee4:	9a01      	ldr	r2, [sp, #4]
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f002 fe65 	bl	8017bb8 <memset>
 8014eee:	e00a      	b.n	8014f06 <rcutils_string_map_reserve+0xb2>
 8014ef0:	694f      	ldr	r7, [r1, #20]
 8014ef2:	6808      	ldr	r0, [r1, #0]
 8014ef4:	4631      	mov	r1, r6
 8014ef6:	47b8      	blx	r7
 8014ef8:	682b      	ldr	r3, [r5, #0]
 8014efa:	4631      	mov	r1, r6
 8014efc:	6858      	ldr	r0, [r3, #4]
 8014efe:	601c      	str	r4, [r3, #0]
 8014f00:	47b8      	blx	r7
 8014f02:	682d      	ldr	r5, [r5, #0]
 8014f04:	606c      	str	r4, [r5, #4]
 8014f06:	2000      	movs	r0, #0
 8014f08:	60ac      	str	r4, [r5, #8]
 8014f0a:	b002      	add	sp, #8
 8014f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f10:	2000      	movs	r0, #0
 8014f12:	e7af      	b.n	8014e74 <rcutils_string_map_reserve+0x20>
 8014f14:	200a      	movs	r0, #10
 8014f16:	e7ad      	b.n	8014e74 <rcutils_string_map_reserve+0x20>
 8014f18:	200b      	movs	r0, #11
 8014f1a:	4770      	bx	lr
 8014f1c:	1f0b      	subs	r3, r1, #4
 8014f1e:	4418      	add	r0, r3
 8014f20:	4413      	add	r3, r2
 8014f22:	3a04      	subs	r2, #4
 8014f24:	4417      	add	r7, r2
 8014f26:	2200      	movs	r2, #0
 8014f28:	f843 2f04 	str.w	r2, [r3, #4]!
 8014f2c:	42bb      	cmp	r3, r7
 8014f2e:	f840 2f04 	str.w	r2, [r0, #4]!
 8014f32:	d1f9      	bne.n	8014f28 <rcutils_string_map_reserve+0xd4>
 8014f34:	e7e7      	b.n	8014f06 <rcutils_string_map_reserve+0xb2>
 8014f36:	bf00      	nop

08014f38 <rcutils_string_map_init>:
 8014f38:	b082      	sub	sp, #8
 8014f3a:	b570      	push	{r4, r5, r6, lr}
 8014f3c:	ac04      	add	r4, sp, #16
 8014f3e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014f42:	b380      	cbz	r0, 8014fa6 <rcutils_string_map_init+0x6e>
 8014f44:	6806      	ldr	r6, [r0, #0]
 8014f46:	4604      	mov	r4, r0
 8014f48:	b12e      	cbz	r6, 8014f56 <rcutils_string_map_init+0x1e>
 8014f4a:	251e      	movs	r5, #30
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f52:	b002      	add	sp, #8
 8014f54:	4770      	bx	lr
 8014f56:	a804      	add	r0, sp, #16
 8014f58:	460d      	mov	r5, r1
 8014f5a:	f7f8 f9ef 	bl	800d33c <rcutils_allocator_is_valid>
 8014f5e:	b310      	cbz	r0, 8014fa6 <rcutils_string_map_init+0x6e>
 8014f60:	9b04      	ldr	r3, [sp, #16]
 8014f62:	9908      	ldr	r1, [sp, #32]
 8014f64:	2024      	movs	r0, #36	@ 0x24
 8014f66:	4798      	blx	r3
 8014f68:	6020      	str	r0, [r4, #0]
 8014f6a:	b310      	cbz	r0, 8014fb2 <rcutils_string_map_init+0x7a>
 8014f6c:	f10d 0e10 	add.w	lr, sp, #16
 8014f70:	e9c0 6600 	strd	r6, r6, [r0]
 8014f74:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014f78:	f100 0c10 	add.w	ip, r0, #16
 8014f7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f84:	f8de 3000 	ldr.w	r3, [lr]
 8014f88:	f8cc 3000 	str.w	r3, [ip]
 8014f8c:	4629      	mov	r1, r5
 8014f8e:	4620      	mov	r0, r4
 8014f90:	f7ff ff60 	bl	8014e54 <rcutils_string_map_reserve>
 8014f94:	4605      	mov	r5, r0
 8014f96:	2800      	cmp	r0, #0
 8014f98:	d0d8      	beq.n	8014f4c <rcutils_string_map_init+0x14>
 8014f9a:	9b05      	ldr	r3, [sp, #20]
 8014f9c:	9908      	ldr	r1, [sp, #32]
 8014f9e:	6820      	ldr	r0, [r4, #0]
 8014fa0:	4798      	blx	r3
 8014fa2:	6026      	str	r6, [r4, #0]
 8014fa4:	e7d2      	b.n	8014f4c <rcutils_string_map_init+0x14>
 8014fa6:	250b      	movs	r5, #11
 8014fa8:	4628      	mov	r0, r5
 8014faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fae:	b002      	add	sp, #8
 8014fb0:	4770      	bx	lr
 8014fb2:	250a      	movs	r5, #10
 8014fb4:	e7ca      	b.n	8014f4c <rcutils_string_map_init+0x14>
 8014fb6:	bf00      	nop

08014fb8 <rcutils_string_map_fini>:
 8014fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fbc:	b082      	sub	sp, #8
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d03a      	beq.n	8015038 <rcutils_string_map_fini+0x80>
 8014fc2:	6804      	ldr	r4, [r0, #0]
 8014fc4:	4606      	mov	r6, r0
 8014fc6:	2c00      	cmp	r4, #0
 8014fc8:	d032      	beq.n	8015030 <rcutils_string_map_fini+0x78>
 8014fca:	68a3      	ldr	r3, [r4, #8]
 8014fcc:	b32b      	cbz	r3, 801501a <rcutils_string_map_fini+0x62>
 8014fce:	2500      	movs	r5, #0
 8014fd0:	6822      	ldr	r2, [r4, #0]
 8014fd2:	462f      	mov	r7, r5
 8014fd4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014fd8:	b1e0      	cbz	r0, 8015014 <rcutils_string_map_fini+0x5c>
 8014fda:	6a21      	ldr	r1, [r4, #32]
 8014fdc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014fe0:	9101      	str	r1, [sp, #4]
 8014fe2:	47c0      	blx	r8
 8014fe4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014fe8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014fec:	9901      	ldr	r1, [sp, #4]
 8014fee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014ff2:	47c0      	blx	r8
 8014ff4:	68e3      	ldr	r3, [r4, #12]
 8014ff6:	6862      	ldr	r2, [r4, #4]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014ffe:	60e3      	str	r3, [r4, #12]
 8015000:	6834      	ldr	r4, [r6, #0]
 8015002:	68a3      	ldr	r3, [r4, #8]
 8015004:	3501      	adds	r5, #1
 8015006:	429d      	cmp	r5, r3
 8015008:	d207      	bcs.n	801501a <rcutils_string_map_fini+0x62>
 801500a:	6822      	ldr	r2, [r4, #0]
 801500c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015010:	2800      	cmp	r0, #0
 8015012:	d1e2      	bne.n	8014fda <rcutils_string_map_fini+0x22>
 8015014:	3501      	adds	r5, #1
 8015016:	429d      	cmp	r5, r3
 8015018:	d3dc      	bcc.n	8014fd4 <rcutils_string_map_fini+0x1c>
 801501a:	2100      	movs	r1, #0
 801501c:	4630      	mov	r0, r6
 801501e:	f7ff ff19 	bl	8014e54 <rcutils_string_map_reserve>
 8015022:	4604      	mov	r4, r0
 8015024:	b920      	cbnz	r0, 8015030 <rcutils_string_map_fini+0x78>
 8015026:	6830      	ldr	r0, [r6, #0]
 8015028:	6943      	ldr	r3, [r0, #20]
 801502a:	6a01      	ldr	r1, [r0, #32]
 801502c:	4798      	blx	r3
 801502e:	6034      	str	r4, [r6, #0]
 8015030:	4620      	mov	r0, r4
 8015032:	b002      	add	sp, #8
 8015034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015038:	240b      	movs	r4, #11
 801503a:	4620      	mov	r0, r4
 801503c:	b002      	add	sp, #8
 801503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015042:	bf00      	nop

08015044 <rcutils_string_map_getn>:
 8015044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015048:	b300      	cbz	r0, 801508c <rcutils_string_map_getn+0x48>
 801504a:	6807      	ldr	r7, [r0, #0]
 801504c:	b1ff      	cbz	r7, 801508e <rcutils_string_map_getn+0x4a>
 801504e:	4688      	mov	r8, r1
 8015050:	b1e1      	cbz	r1, 801508c <rcutils_string_map_getn+0x48>
 8015052:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015056:	683e      	ldr	r6, [r7, #0]
 8015058:	f1ba 0f00 	cmp.w	sl, #0
 801505c:	d016      	beq.n	801508c <rcutils_string_map_getn+0x48>
 801505e:	4691      	mov	r9, r2
 8015060:	3e04      	subs	r6, #4
 8015062:	2400      	movs	r4, #0
 8015064:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015068:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801506c:	4628      	mov	r0, r5
 801506e:	3401      	adds	r4, #1
 8015070:	b155      	cbz	r5, 8015088 <rcutils_string_map_getn+0x44>
 8015072:	f7eb f8df 	bl	8000234 <strlen>
 8015076:	4548      	cmp	r0, r9
 8015078:	4602      	mov	r2, r0
 801507a:	4629      	mov	r1, r5
 801507c:	bf38      	it	cc
 801507e:	464a      	movcc	r2, r9
 8015080:	4640      	mov	r0, r8
 8015082:	f002 fdae 	bl	8017be2 <strncmp>
 8015086:	b128      	cbz	r0, 8015094 <rcutils_string_map_getn+0x50>
 8015088:	45a2      	cmp	sl, r4
 801508a:	d1eb      	bne.n	8015064 <rcutils_string_map_getn+0x20>
 801508c:	2700      	movs	r7, #0
 801508e:	4638      	mov	r0, r7
 8015090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f853 700b 	ldr.w	r7, [r3, fp]
 801509a:	4638      	mov	r0, r7
 801509c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150a0 <rmw_get_zero_initialized_context>:
 80150a0:	b510      	push	{r4, lr}
 80150a2:	4604      	mov	r4, r0
 80150a4:	3010      	adds	r0, #16
 80150a6:	f7f8 f9db 	bl	800d460 <rmw_get_zero_initialized_init_options>
 80150aa:	2300      	movs	r3, #0
 80150ac:	2000      	movs	r0, #0
 80150ae:	2100      	movs	r1, #0
 80150b0:	e9c4 0100 	strd	r0, r1, [r4]
 80150b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80150b8:	60a3      	str	r3, [r4, #8]
 80150ba:	4620      	mov	r0, r4
 80150bc:	bd10      	pop	{r4, pc}
 80150be:	bf00      	nop

080150c0 <rmw_time_equal>:
 80150c0:	b4f0      	push	{r4, r5, r6, r7}
 80150c2:	b084      	sub	sp, #16
 80150c4:	ac04      	add	r4, sp, #16
 80150c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80150ca:	4603      	mov	r3, r0
 80150cc:	4924      	ldr	r1, [pc, #144]	@ (8015160 <rmw_time_equal+0xa0>)
 80150ce:	9e03      	ldr	r6, [sp, #12]
 80150d0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80150d4:	2202      	movs	r2, #2
 80150d6:	4299      	cmp	r1, r3
 80150d8:	41aa      	sbcs	r2, r5
 80150da:	d330      	bcc.n	801513e <rmw_time_equal+0x7e>
 80150dc:	4c21      	ldr	r4, [pc, #132]	@ (8015164 <rmw_time_equal+0xa4>)
 80150de:	fba3 3204 	umull	r3, r2, r3, r4
 80150e2:	fb04 2205 	mla	r2, r4, r5, r2
 80150e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150ea:	43dd      	mvns	r5, r3
 80150ec:	1a8c      	subs	r4, r1, r2
 80150ee:	4285      	cmp	r5, r0
 80150f0:	41b4      	sbcs	r4, r6
 80150f2:	d332      	bcc.n	801515a <rmw_time_equal+0x9a>
 80150f4:	eb10 0c03 	adds.w	ip, r0, r3
 80150f8:	eb42 0106 	adc.w	r1, r2, r6
 80150fc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015100:	4817      	ldr	r0, [pc, #92]	@ (8015160 <rmw_time_equal+0xa0>)
 8015102:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015104:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015106:	2202      	movs	r2, #2
 8015108:	4298      	cmp	r0, r3
 801510a:	41b2      	sbcs	r2, r6
 801510c:	d31c      	bcc.n	8015148 <rmw_time_equal+0x88>
 801510e:	4c15      	ldr	r4, [pc, #84]	@ (8015164 <rmw_time_equal+0xa4>)
 8015110:	fba3 3204 	umull	r3, r2, r3, r4
 8015114:	fb04 2206 	mla	r2, r4, r6, r2
 8015118:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801511c:	43de      	mvns	r6, r3
 801511e:	1a84      	subs	r4, r0, r2
 8015120:	42ae      	cmp	r6, r5
 8015122:	41bc      	sbcs	r4, r7
 8015124:	d315      	bcc.n	8015152 <rmw_time_equal+0x92>
 8015126:	195b      	adds	r3, r3, r5
 8015128:	eb42 0207 	adc.w	r2, r2, r7
 801512c:	428a      	cmp	r2, r1
 801512e:	bf08      	it	eq
 8015130:	4563      	cmpeq	r3, ip
 8015132:	bf0c      	ite	eq
 8015134:	2001      	moveq	r0, #1
 8015136:	2000      	movne	r0, #0
 8015138:	b004      	add	sp, #16
 801513a:	bcf0      	pop	{r4, r5, r6, r7}
 801513c:	4770      	bx	lr
 801513e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015142:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015146:	e7d9      	b.n	80150fc <rmw_time_equal+0x3c>
 8015148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801514c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015150:	e7ec      	b.n	801512c <rmw_time_equal+0x6c>
 8015152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015156:	4602      	mov	r2, r0
 8015158:	e7e8      	b.n	801512c <rmw_time_equal+0x6c>
 801515a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801515e:	e7cd      	b.n	80150fc <rmw_time_equal+0x3c>
 8015160:	25c17d04 	.word	0x25c17d04
 8015164:	3b9aca00 	.word	0x3b9aca00

08015168 <rmw_time_total_nsec>:
 8015168:	b470      	push	{r4, r5, r6}
 801516a:	b085      	sub	sp, #20
 801516c:	ac04      	add	r4, sp, #16
 801516e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015172:	4603      	mov	r3, r0
 8015174:	4912      	ldr	r1, [pc, #72]	@ (80151c0 <rmw_time_total_nsec+0x58>)
 8015176:	9e03      	ldr	r6, [sp, #12]
 8015178:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801517c:	2202      	movs	r2, #2
 801517e:	4299      	cmp	r1, r3
 8015180:	41aa      	sbcs	r2, r5
 8015182:	d311      	bcc.n	80151a8 <rmw_time_total_nsec+0x40>
 8015184:	4c0f      	ldr	r4, [pc, #60]	@ (80151c4 <rmw_time_total_nsec+0x5c>)
 8015186:	fba3 3204 	umull	r3, r2, r3, r4
 801518a:	fb04 2205 	mla	r2, r4, r5, r2
 801518e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015192:	43dd      	mvns	r5, r3
 8015194:	1a8c      	subs	r4, r1, r2
 8015196:	4285      	cmp	r5, r0
 8015198:	41b4      	sbcs	r4, r6
 801519a:	d30c      	bcc.n	80151b6 <rmw_time_total_nsec+0x4e>
 801519c:	1818      	adds	r0, r3, r0
 801519e:	eb42 0106 	adc.w	r1, r2, r6
 80151a2:	b005      	add	sp, #20
 80151a4:	bc70      	pop	{r4, r5, r6}
 80151a6:	4770      	bx	lr
 80151a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80151b0:	b005      	add	sp, #20
 80151b2:	bc70      	pop	{r4, r5, r6}
 80151b4:	4770      	bx	lr
 80151b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151ba:	b005      	add	sp, #20
 80151bc:	bc70      	pop	{r4, r5, r6}
 80151be:	4770      	bx	lr
 80151c0:	25c17d04 	.word	0x25c17d04
 80151c4:	3b9aca00 	.word	0x3b9aca00

080151c8 <rmw_get_zero_initialized_message_info>:
 80151c8:	b510      	push	{r4, lr}
 80151ca:	2240      	movs	r2, #64	@ 0x40
 80151cc:	4604      	mov	r4, r0
 80151ce:	2100      	movs	r1, #0
 80151d0:	f002 fcf2 	bl	8017bb8 <memset>
 80151d4:	4620      	mov	r0, r4
 80151d6:	bd10      	pop	{r4, pc}

080151d8 <rmw_validate_full_topic_name>:
 80151d8:	2800      	cmp	r0, #0
 80151da:	d057      	beq.n	801528c <rmw_validate_full_topic_name+0xb4>
 80151dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151e0:	460d      	mov	r5, r1
 80151e2:	2900      	cmp	r1, #0
 80151e4:	d054      	beq.n	8015290 <rmw_validate_full_topic_name+0xb8>
 80151e6:	4616      	mov	r6, r2
 80151e8:	4604      	mov	r4, r0
 80151ea:	f7eb f823 	bl	8000234 <strlen>
 80151ee:	b148      	cbz	r0, 8015204 <rmw_validate_full_topic_name+0x2c>
 80151f0:	7823      	ldrb	r3, [r4, #0]
 80151f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80151f4:	d00d      	beq.n	8015212 <rmw_validate_full_topic_name+0x3a>
 80151f6:	2302      	movs	r3, #2
 80151f8:	602b      	str	r3, [r5, #0]
 80151fa:	b13e      	cbz	r6, 801520c <rmw_validate_full_topic_name+0x34>
 80151fc:	2000      	movs	r0, #0
 80151fe:	6030      	str	r0, [r6, #0]
 8015200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015204:	2301      	movs	r3, #1
 8015206:	602b      	str	r3, [r5, #0]
 8015208:	2e00      	cmp	r6, #0
 801520a:	d1f7      	bne.n	80151fc <rmw_validate_full_topic_name+0x24>
 801520c:	2000      	movs	r0, #0
 801520e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015212:	1e43      	subs	r3, r0, #1
 8015214:	5ce2      	ldrb	r2, [r4, r3]
 8015216:	2a2f      	cmp	r2, #47	@ 0x2f
 8015218:	d03c      	beq.n	8015294 <rmw_validate_full_topic_name+0xbc>
 801521a:	1e63      	subs	r3, r4, #1
 801521c:	eb03 0800 	add.w	r8, r3, r0
 8015220:	f1c4 0e01 	rsb	lr, r4, #1
 8015224:	eb0e 0703 	add.w	r7, lr, r3
 8015228:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801522c:	f021 0220 	bic.w	r2, r1, #32
 8015230:	3a41      	subs	r2, #65	@ 0x41
 8015232:	2a19      	cmp	r2, #25
 8015234:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015238:	d90b      	bls.n	8015252 <rmw_validate_full_topic_name+0x7a>
 801523a:	295f      	cmp	r1, #95	@ 0x5f
 801523c:	d009      	beq.n	8015252 <rmw_validate_full_topic_name+0x7a>
 801523e:	f1bc 0f0a 	cmp.w	ip, #10
 8015242:	d906      	bls.n	8015252 <rmw_validate_full_topic_name+0x7a>
 8015244:	2304      	movs	r3, #4
 8015246:	602b      	str	r3, [r5, #0]
 8015248:	2e00      	cmp	r6, #0
 801524a:	d0df      	beq.n	801520c <rmw_validate_full_topic_name+0x34>
 801524c:	6037      	str	r7, [r6, #0]
 801524e:	2000      	movs	r0, #0
 8015250:	e7d6      	b.n	8015200 <rmw_validate_full_topic_name+0x28>
 8015252:	4543      	cmp	r3, r8
 8015254:	d1e6      	bne.n	8015224 <rmw_validate_full_topic_name+0x4c>
 8015256:	4f1a      	ldr	r7, [pc, #104]	@ (80152c0 <rmw_validate_full_topic_name+0xe8>)
 8015258:	2301      	movs	r3, #1
 801525a:	e004      	b.n	8015266 <rmw_validate_full_topic_name+0x8e>
 801525c:	4298      	cmp	r0, r3
 801525e:	f104 0401 	add.w	r4, r4, #1
 8015262:	d91c      	bls.n	801529e <rmw_validate_full_topic_name+0xc6>
 8015264:	4613      	mov	r3, r2
 8015266:	4298      	cmp	r0, r3
 8015268:	f103 0201 	add.w	r2, r3, #1
 801526c:	d0f6      	beq.n	801525c <rmw_validate_full_topic_name+0x84>
 801526e:	7821      	ldrb	r1, [r4, #0]
 8015270:	292f      	cmp	r1, #47	@ 0x2f
 8015272:	d1f3      	bne.n	801525c <rmw_validate_full_topic_name+0x84>
 8015274:	7861      	ldrb	r1, [r4, #1]
 8015276:	292f      	cmp	r1, #47	@ 0x2f
 8015278:	d01c      	beq.n	80152b4 <rmw_validate_full_topic_name+0xdc>
 801527a:	5dc9      	ldrb	r1, [r1, r7]
 801527c:	0749      	lsls	r1, r1, #29
 801527e:	d5ed      	bpl.n	801525c <rmw_validate_full_topic_name+0x84>
 8015280:	2206      	movs	r2, #6
 8015282:	602a      	str	r2, [r5, #0]
 8015284:	2e00      	cmp	r6, #0
 8015286:	d0c1      	beq.n	801520c <rmw_validate_full_topic_name+0x34>
 8015288:	6033      	str	r3, [r6, #0]
 801528a:	e7bf      	b.n	801520c <rmw_validate_full_topic_name+0x34>
 801528c:	200b      	movs	r0, #11
 801528e:	4770      	bx	lr
 8015290:	200b      	movs	r0, #11
 8015292:	e7b5      	b.n	8015200 <rmw_validate_full_topic_name+0x28>
 8015294:	2203      	movs	r2, #3
 8015296:	602a      	str	r2, [r5, #0]
 8015298:	2e00      	cmp	r6, #0
 801529a:	d1f5      	bne.n	8015288 <rmw_validate_full_topic_name+0xb0>
 801529c:	e7b6      	b.n	801520c <rmw_validate_full_topic_name+0x34>
 801529e:	28f7      	cmp	r0, #247	@ 0xf7
 80152a0:	d802      	bhi.n	80152a8 <rmw_validate_full_topic_name+0xd0>
 80152a2:	2000      	movs	r0, #0
 80152a4:	6028      	str	r0, [r5, #0]
 80152a6:	e7ab      	b.n	8015200 <rmw_validate_full_topic_name+0x28>
 80152a8:	2307      	movs	r3, #7
 80152aa:	602b      	str	r3, [r5, #0]
 80152ac:	2e00      	cmp	r6, #0
 80152ae:	d0ad      	beq.n	801520c <rmw_validate_full_topic_name+0x34>
 80152b0:	23f6      	movs	r3, #246	@ 0xf6
 80152b2:	e7e9      	b.n	8015288 <rmw_validate_full_topic_name+0xb0>
 80152b4:	2205      	movs	r2, #5
 80152b6:	602a      	str	r2, [r5, #0]
 80152b8:	2e00      	cmp	r6, #0
 80152ba:	d1e5      	bne.n	8015288 <rmw_validate_full_topic_name+0xb0>
 80152bc:	e7a6      	b.n	801520c <rmw_validate_full_topic_name+0x34>
 80152be:	bf00      	nop
 80152c0:	08019758 	.word	0x08019758

080152c4 <rmw_validate_namespace_with_size>:
 80152c4:	b340      	cbz	r0, 8015318 <rmw_validate_namespace_with_size+0x54>
 80152c6:	b570      	push	{r4, r5, r6, lr}
 80152c8:	4614      	mov	r4, r2
 80152ca:	b0c2      	sub	sp, #264	@ 0x108
 80152cc:	b332      	cbz	r2, 801531c <rmw_validate_namespace_with_size+0x58>
 80152ce:	2901      	cmp	r1, #1
 80152d0:	460d      	mov	r5, r1
 80152d2:	461e      	mov	r6, r3
 80152d4:	d102      	bne.n	80152dc <rmw_validate_namespace_with_size+0x18>
 80152d6:	7803      	ldrb	r3, [r0, #0]
 80152d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80152da:	d012      	beq.n	8015302 <rmw_validate_namespace_with_size+0x3e>
 80152dc:	aa01      	add	r2, sp, #4
 80152de:	4669      	mov	r1, sp
 80152e0:	f7ff ff7a 	bl	80151d8 <rmw_validate_full_topic_name>
 80152e4:	b978      	cbnz	r0, 8015306 <rmw_validate_namespace_with_size+0x42>
 80152e6:	9b00      	ldr	r3, [sp, #0]
 80152e8:	b14b      	cbz	r3, 80152fe <rmw_validate_namespace_with_size+0x3a>
 80152ea:	2b07      	cmp	r3, #7
 80152ec:	d007      	beq.n	80152fe <rmw_validate_namespace_with_size+0x3a>
 80152ee:	1e5a      	subs	r2, r3, #1
 80152f0:	2a05      	cmp	r2, #5
 80152f2:	d82b      	bhi.n	801534c <rmw_validate_namespace_with_size+0x88>
 80152f4:	e8df f002 	tbb	[pc, r2]
 80152f8:	1e212427 	.word	0x1e212427
 80152fc:	141b      	.short	0x141b
 80152fe:	2df5      	cmp	r5, #245	@ 0xf5
 8015300:	d803      	bhi.n	801530a <rmw_validate_namespace_with_size+0x46>
 8015302:	2000      	movs	r0, #0
 8015304:	6020      	str	r0, [r4, #0]
 8015306:	b042      	add	sp, #264	@ 0x108
 8015308:	bd70      	pop	{r4, r5, r6, pc}
 801530a:	2307      	movs	r3, #7
 801530c:	6023      	str	r3, [r4, #0]
 801530e:	2e00      	cmp	r6, #0
 8015310:	d0f9      	beq.n	8015306 <rmw_validate_namespace_with_size+0x42>
 8015312:	23f4      	movs	r3, #244	@ 0xf4
 8015314:	6033      	str	r3, [r6, #0]
 8015316:	e7f6      	b.n	8015306 <rmw_validate_namespace_with_size+0x42>
 8015318:	200b      	movs	r0, #11
 801531a:	4770      	bx	lr
 801531c:	200b      	movs	r0, #11
 801531e:	e7f2      	b.n	8015306 <rmw_validate_namespace_with_size+0x42>
 8015320:	2306      	movs	r3, #6
 8015322:	6023      	str	r3, [r4, #0]
 8015324:	2e00      	cmp	r6, #0
 8015326:	d0ee      	beq.n	8015306 <rmw_validate_namespace_with_size+0x42>
 8015328:	9b01      	ldr	r3, [sp, #4]
 801532a:	6033      	str	r3, [r6, #0]
 801532c:	e7eb      	b.n	8015306 <rmw_validate_namespace_with_size+0x42>
 801532e:	2305      	movs	r3, #5
 8015330:	6023      	str	r3, [r4, #0]
 8015332:	e7f7      	b.n	8015324 <rmw_validate_namespace_with_size+0x60>
 8015334:	2304      	movs	r3, #4
 8015336:	6023      	str	r3, [r4, #0]
 8015338:	e7f4      	b.n	8015324 <rmw_validate_namespace_with_size+0x60>
 801533a:	2303      	movs	r3, #3
 801533c:	6023      	str	r3, [r4, #0]
 801533e:	e7f1      	b.n	8015324 <rmw_validate_namespace_with_size+0x60>
 8015340:	2302      	movs	r3, #2
 8015342:	6023      	str	r3, [r4, #0]
 8015344:	e7ee      	b.n	8015324 <rmw_validate_namespace_with_size+0x60>
 8015346:	2301      	movs	r3, #1
 8015348:	6023      	str	r3, [r4, #0]
 801534a:	e7eb      	b.n	8015324 <rmw_validate_namespace_with_size+0x60>
 801534c:	4a03      	ldr	r2, [pc, #12]	@ (801535c <rmw_validate_namespace_with_size+0x98>)
 801534e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015352:	a802      	add	r0, sp, #8
 8015354:	f7ff fd0e 	bl	8014d74 <rcutils_snprintf>
 8015358:	2001      	movs	r0, #1
 801535a:	e7d4      	b.n	8015306 <rmw_validate_namespace_with_size+0x42>
 801535c:	08019378 	.word	0x08019378

08015360 <rmw_validate_namespace>:
 8015360:	b168      	cbz	r0, 801537e <rmw_validate_namespace+0x1e>
 8015362:	b570      	push	{r4, r5, r6, lr}
 8015364:	460d      	mov	r5, r1
 8015366:	4616      	mov	r6, r2
 8015368:	4604      	mov	r4, r0
 801536a:	f7ea ff63 	bl	8000234 <strlen>
 801536e:	4633      	mov	r3, r6
 8015370:	4601      	mov	r1, r0
 8015372:	462a      	mov	r2, r5
 8015374:	4620      	mov	r0, r4
 8015376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801537a:	f7ff bfa3 	b.w	80152c4 <rmw_validate_namespace_with_size>
 801537e:	200b      	movs	r0, #11
 8015380:	4770      	bx	lr
 8015382:	bf00      	nop

08015384 <rmw_namespace_validation_result_string>:
 8015384:	2807      	cmp	r0, #7
 8015386:	bf9a      	itte	ls
 8015388:	4b02      	ldrls	r3, [pc, #8]	@ (8015394 <rmw_namespace_validation_result_string+0x10>)
 801538a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801538e:	4802      	ldrhi	r0, [pc, #8]	@ (8015398 <rmw_namespace_validation_result_string+0x14>)
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop
 8015394:	08019570 	.word	0x08019570
 8015398:	080193c8 	.word	0x080193c8

0801539c <rmw_validate_node_name>:
 801539c:	2800      	cmp	r0, #0
 801539e:	d03b      	beq.n	8015418 <rmw_validate_node_name+0x7c>
 80153a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a4:	460d      	mov	r5, r1
 80153a6:	2900      	cmp	r1, #0
 80153a8:	d038      	beq.n	801541c <rmw_validate_node_name+0x80>
 80153aa:	4616      	mov	r6, r2
 80153ac:	4604      	mov	r4, r0
 80153ae:	f7ea ff41 	bl	8000234 <strlen>
 80153b2:	b1e0      	cbz	r0, 80153ee <rmw_validate_node_name+0x52>
 80153b4:	1e63      	subs	r3, r4, #1
 80153b6:	eb03 0800 	add.w	r8, r3, r0
 80153ba:	f1c4 0101 	rsb	r1, r4, #1
 80153be:	18cf      	adds	r7, r1, r3
 80153c0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80153c4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80153c8:	f02e 0c20 	bic.w	ip, lr, #32
 80153cc:	2a09      	cmp	r2, #9
 80153ce:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80153d2:	d914      	bls.n	80153fe <rmw_validate_node_name+0x62>
 80153d4:	f1bc 0f19 	cmp.w	ip, #25
 80153d8:	d911      	bls.n	80153fe <rmw_validate_node_name+0x62>
 80153da:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80153de:	d00e      	beq.n	80153fe <rmw_validate_node_name+0x62>
 80153e0:	2302      	movs	r3, #2
 80153e2:	602b      	str	r3, [r5, #0]
 80153e4:	b106      	cbz	r6, 80153e8 <rmw_validate_node_name+0x4c>
 80153e6:	6037      	str	r7, [r6, #0]
 80153e8:	2000      	movs	r0, #0
 80153ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153ee:	2301      	movs	r3, #1
 80153f0:	602b      	str	r3, [r5, #0]
 80153f2:	2e00      	cmp	r6, #0
 80153f4:	d0f8      	beq.n	80153e8 <rmw_validate_node_name+0x4c>
 80153f6:	2000      	movs	r0, #0
 80153f8:	6030      	str	r0, [r6, #0]
 80153fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153fe:	4543      	cmp	r3, r8
 8015400:	d1dd      	bne.n	80153be <rmw_validate_node_name+0x22>
 8015402:	7822      	ldrb	r2, [r4, #0]
 8015404:	4b0d      	ldr	r3, [pc, #52]	@ (801543c <rmw_validate_node_name+0xa0>)
 8015406:	5cd3      	ldrb	r3, [r2, r3]
 8015408:	f013 0304 	ands.w	r3, r3, #4
 801540c:	d110      	bne.n	8015430 <rmw_validate_node_name+0x94>
 801540e:	28ff      	cmp	r0, #255	@ 0xff
 8015410:	d806      	bhi.n	8015420 <rmw_validate_node_name+0x84>
 8015412:	602b      	str	r3, [r5, #0]
 8015414:	4618      	mov	r0, r3
 8015416:	e7e8      	b.n	80153ea <rmw_validate_node_name+0x4e>
 8015418:	200b      	movs	r0, #11
 801541a:	4770      	bx	lr
 801541c:	200b      	movs	r0, #11
 801541e:	e7e4      	b.n	80153ea <rmw_validate_node_name+0x4e>
 8015420:	2204      	movs	r2, #4
 8015422:	602a      	str	r2, [r5, #0]
 8015424:	2e00      	cmp	r6, #0
 8015426:	d0df      	beq.n	80153e8 <rmw_validate_node_name+0x4c>
 8015428:	22fe      	movs	r2, #254	@ 0xfe
 801542a:	6032      	str	r2, [r6, #0]
 801542c:	4618      	mov	r0, r3
 801542e:	e7dc      	b.n	80153ea <rmw_validate_node_name+0x4e>
 8015430:	2303      	movs	r3, #3
 8015432:	602b      	str	r3, [r5, #0]
 8015434:	2e00      	cmp	r6, #0
 8015436:	d1de      	bne.n	80153f6 <rmw_validate_node_name+0x5a>
 8015438:	e7d6      	b.n	80153e8 <rmw_validate_node_name+0x4c>
 801543a:	bf00      	nop
 801543c:	08019758 	.word	0x08019758

08015440 <rmw_node_name_validation_result_string>:
 8015440:	2804      	cmp	r0, #4
 8015442:	bf9a      	itte	ls
 8015444:	4b02      	ldrls	r3, [pc, #8]	@ (8015450 <rmw_node_name_validation_result_string+0x10>)
 8015446:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801544a:	4802      	ldrhi	r0, [pc, #8]	@ (8015454 <rmw_node_name_validation_result_string+0x14>)
 801544c:	4770      	bx	lr
 801544e:	bf00      	nop
 8015450:	0801967c 	.word	0x0801967c
 8015454:	08019590 	.word	0x08019590

08015458 <on_status>:
 8015458:	b082      	sub	sp, #8
 801545a:	b002      	add	sp, #8
 801545c:	4770      	bx	lr
 801545e:	bf00      	nop

08015460 <on_topic>:
 8015460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015464:	4a22      	ldr	r2, [pc, #136]	@ (80154f0 <on_topic+0x90>)
 8015466:	b094      	sub	sp, #80	@ 0x50
 8015468:	6812      	ldr	r2, [r2, #0]
 801546a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801546c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015470:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015474:	b3c2      	cbz	r2, 80154e8 <on_topic+0x88>
 8015476:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801547a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801547e:	e001      	b.n	8015484 <on_topic+0x24>
 8015480:	6852      	ldr	r2, [r2, #4]
 8015482:	b38a      	cbz	r2, 80154e8 <on_topic+0x88>
 8015484:	6894      	ldr	r4, [r2, #8]
 8015486:	8aa3      	ldrh	r3, [r4, #20]
 8015488:	428b      	cmp	r3, r1
 801548a:	d1f9      	bne.n	8015480 <on_topic+0x20>
 801548c:	7da3      	ldrb	r3, [r4, #22]
 801548e:	4283      	cmp	r3, r0
 8015490:	d1f6      	bne.n	8015480 <on_topic+0x20>
 8015492:	2248      	movs	r2, #72	@ 0x48
 8015494:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015498:	4668      	mov	r0, sp
 801549a:	f002 fc56 	bl	8017d4a <memcpy>
 801549e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80154a2:	cb0c      	ldmia	r3, {r2, r3}
 80154a4:	4620      	mov	r0, r4
 80154a6:	f7f8 ffbf 	bl	800e428 <rmw_uxrce_get_static_input_buffer_for_entity>
 80154aa:	4607      	mov	r7, r0
 80154ac:	b1e0      	cbz	r0, 80154e8 <on_topic+0x88>
 80154ae:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80154b2:	4632      	mov	r2, r6
 80154b4:	4628      	mov	r0, r5
 80154b6:	f108 0110 	add.w	r1, r8, #16
 80154ba:	f000 fda7 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80154be:	b930      	cbnz	r0, 80154ce <on_topic+0x6e>
 80154c0:	480c      	ldr	r0, [pc, #48]	@ (80154f4 <on_topic+0x94>)
 80154c2:	4639      	mov	r1, r7
 80154c4:	b014      	add	sp, #80	@ 0x50
 80154c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154ca:	f000 b8bd 	b.w	8015648 <put_memory>
 80154ce:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80154d2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80154d6:	f000 fcc3 	bl	8015e60 <rmw_uros_epoch_nanos>
 80154da:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80154de:	2305      	movs	r3, #5
 80154e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80154e4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80154e8:	b014      	add	sp, #80	@ 0x50
 80154ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ee:	bf00      	nop
 80154f0:	2000ae3c 	.word	0x2000ae3c
 80154f4:	2000ae2c 	.word	0x2000ae2c

080154f8 <on_request>:
 80154f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fc:	4823      	ldr	r0, [pc, #140]	@ (801558c <on_request+0x94>)
 80154fe:	b094      	sub	sp, #80	@ 0x50
 8015500:	6800      	ldr	r0, [r0, #0]
 8015502:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015504:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015508:	9113      	str	r1, [sp, #76]	@ 0x4c
 801550a:	2800      	cmp	r0, #0
 801550c:	d03b      	beq.n	8015586 <on_request+0x8e>
 801550e:	461d      	mov	r5, r3
 8015510:	e001      	b.n	8015516 <on_request+0x1e>
 8015512:	6840      	ldr	r0, [r0, #4]
 8015514:	b3b8      	cbz	r0, 8015586 <on_request+0x8e>
 8015516:	6884      	ldr	r4, [r0, #8]
 8015518:	8b21      	ldrh	r1, [r4, #24]
 801551a:	4291      	cmp	r1, r2
 801551c:	d1f9      	bne.n	8015512 <on_request+0x1a>
 801551e:	2248      	movs	r2, #72	@ 0x48
 8015520:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015524:	4668      	mov	r0, sp
 8015526:	f002 fc10 	bl	8017d4a <memcpy>
 801552a:	f104 0320 	add.w	r3, r4, #32
 801552e:	cb0c      	ldmia	r3, {r2, r3}
 8015530:	4620      	mov	r0, r4
 8015532:	f7f8 ff79 	bl	800e428 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015536:	4680      	mov	r8, r0
 8015538:	b328      	cbz	r0, 8015586 <on_request+0x8e>
 801553a:	4638      	mov	r0, r7
 801553c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015540:	4632      	mov	r2, r6
 8015542:	f107 0110 	add.w	r1, r7, #16
 8015546:	f000 fd61 	bl	801600c <ucdr_deserialize_array_uint8_t>
 801554a:	b930      	cbnz	r0, 801555a <on_request+0x62>
 801554c:	4810      	ldr	r0, [pc, #64]	@ (8015590 <on_request+0x98>)
 801554e:	4641      	mov	r1, r8
 8015550:	b014      	add	sp, #80	@ 0x50
 8015552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015556:	f000 b877 	b.w	8015648 <put_memory>
 801555a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801555c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015560:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015564:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801556c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015570:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015574:	f000 fc74 	bl	8015e60 <rmw_uros_epoch_nanos>
 8015578:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801557c:	2303      	movs	r3, #3
 801557e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015582:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015586:	b014      	add	sp, #80	@ 0x50
 8015588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801558c:	2000ae0c 	.word	0x2000ae0c
 8015590:	2000ae2c 	.word	0x2000ae2c

08015594 <on_reply>:
 8015594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015598:	4821      	ldr	r0, [pc, #132]	@ (8015620 <on_reply+0x8c>)
 801559a:	b094      	sub	sp, #80	@ 0x50
 801559c:	6800      	ldr	r0, [r0, #0]
 801559e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80155a0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80155a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80155a6:	b3b8      	cbz	r0, 8015618 <on_reply+0x84>
 80155a8:	461d      	mov	r5, r3
 80155aa:	e001      	b.n	80155b0 <on_reply+0x1c>
 80155ac:	6840      	ldr	r0, [r0, #4]
 80155ae:	b398      	cbz	r0, 8015618 <on_reply+0x84>
 80155b0:	6884      	ldr	r4, [r0, #8]
 80155b2:	8b21      	ldrh	r1, [r4, #24]
 80155b4:	4291      	cmp	r1, r2
 80155b6:	d1f9      	bne.n	80155ac <on_reply+0x18>
 80155b8:	2248      	movs	r2, #72	@ 0x48
 80155ba:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80155be:	4668      	mov	r0, sp
 80155c0:	f002 fbc3 	bl	8017d4a <memcpy>
 80155c4:	f104 0320 	add.w	r3, r4, #32
 80155c8:	cb0c      	ldmia	r3, {r2, r3}
 80155ca:	4620      	mov	r0, r4
 80155cc:	f7f8 ff2c 	bl	800e428 <rmw_uxrce_get_static_input_buffer_for_entity>
 80155d0:	4680      	mov	r8, r0
 80155d2:	b308      	cbz	r0, 8015618 <on_reply+0x84>
 80155d4:	4638      	mov	r0, r7
 80155d6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80155da:	4632      	mov	r2, r6
 80155dc:	f107 0110 	add.w	r1, r7, #16
 80155e0:	f000 fd14 	bl	801600c <ucdr_deserialize_array_uint8_t>
 80155e4:	b930      	cbnz	r0, 80155f4 <on_reply+0x60>
 80155e6:	480f      	ldr	r0, [pc, #60]	@ (8015624 <on_reply+0x90>)
 80155e8:	4641      	mov	r1, r8
 80155ea:	b014      	add	sp, #80	@ 0x50
 80155ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155f0:	f000 b82a 	b.w	8015648 <put_memory>
 80155f4:	2200      	movs	r2, #0
 80155f6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80155fa:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80155fe:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015602:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015606:	f000 fc2b 	bl	8015e60 <rmw_uros_epoch_nanos>
 801560a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801560e:	2304      	movs	r3, #4
 8015610:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015614:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015618:	b014      	add	sp, #80	@ 0x50
 801561a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561e:	bf00      	nop
 8015620:	2000651c 	.word	0x2000651c
 8015624:	2000ae2c 	.word	0x2000ae2c

08015628 <get_memory>:
 8015628:	4603      	mov	r3, r0
 801562a:	6840      	ldr	r0, [r0, #4]
 801562c:	b158      	cbz	r0, 8015646 <get_memory+0x1e>
 801562e:	6842      	ldr	r2, [r0, #4]
 8015630:	605a      	str	r2, [r3, #4]
 8015632:	b10a      	cbz	r2, 8015638 <get_memory+0x10>
 8015634:	2100      	movs	r1, #0
 8015636:	6011      	str	r1, [r2, #0]
 8015638:	681a      	ldr	r2, [r3, #0]
 801563a:	6042      	str	r2, [r0, #4]
 801563c:	b102      	cbz	r2, 8015640 <get_memory+0x18>
 801563e:	6010      	str	r0, [r2, #0]
 8015640:	2200      	movs	r2, #0
 8015642:	6002      	str	r2, [r0, #0]
 8015644:	6018      	str	r0, [r3, #0]
 8015646:	4770      	bx	lr

08015648 <put_memory>:
 8015648:	680b      	ldr	r3, [r1, #0]
 801564a:	b10b      	cbz	r3, 8015650 <put_memory+0x8>
 801564c:	684a      	ldr	r2, [r1, #4]
 801564e:	605a      	str	r2, [r3, #4]
 8015650:	684a      	ldr	r2, [r1, #4]
 8015652:	b102      	cbz	r2, 8015656 <put_memory+0xe>
 8015654:	6013      	str	r3, [r2, #0]
 8015656:	6803      	ldr	r3, [r0, #0]
 8015658:	428b      	cmp	r3, r1
 801565a:	6843      	ldr	r3, [r0, #4]
 801565c:	bf08      	it	eq
 801565e:	6002      	streq	r2, [r0, #0]
 8015660:	604b      	str	r3, [r1, #4]
 8015662:	b103      	cbz	r3, 8015666 <put_memory+0x1e>
 8015664:	6019      	str	r1, [r3, #0]
 8015666:	2300      	movs	r3, #0
 8015668:	600b      	str	r3, [r1, #0]
 801566a:	6041      	str	r1, [r0, #4]
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop

08015670 <rmw_destroy_client>:
 8015670:	b570      	push	{r4, r5, r6, lr}
 8015672:	b128      	cbz	r0, 8015680 <rmw_destroy_client+0x10>
 8015674:	4604      	mov	r4, r0
 8015676:	6800      	ldr	r0, [r0, #0]
 8015678:	460d      	mov	r5, r1
 801567a:	f7f9 f84b 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 801567e:	b910      	cbnz	r0, 8015686 <rmw_destroy_client+0x16>
 8015680:	2401      	movs	r4, #1
 8015682:	4620      	mov	r0, r4
 8015684:	bd70      	pop	{r4, r5, r6, pc}
 8015686:	6863      	ldr	r3, [r4, #4]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d0f9      	beq.n	8015680 <rmw_destroy_client+0x10>
 801568c:	2d00      	cmp	r5, #0
 801568e:	d0f7      	beq.n	8015680 <rmw_destroy_client+0x10>
 8015690:	6828      	ldr	r0, [r5, #0]
 8015692:	f7f9 f83f 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 8015696:	2800      	cmp	r0, #0
 8015698:	d0f2      	beq.n	8015680 <rmw_destroy_client+0x10>
 801569a:	686e      	ldr	r6, [r5, #4]
 801569c:	2e00      	cmp	r6, #0
 801569e:	d0ef      	beq.n	8015680 <rmw_destroy_client+0x10>
 80156a0:	6864      	ldr	r4, [r4, #4]
 80156a2:	6932      	ldr	r2, [r6, #16]
 80156a4:	6920      	ldr	r0, [r4, #16]
 80156a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80156aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156ae:	6819      	ldr	r1, [r3, #0]
 80156b0:	f7f9 fafa 	bl	800eca8 <uxr_buffer_cancel_data>
 80156b4:	4602      	mov	r2, r0
 80156b6:	6920      	ldr	r0, [r4, #16]
 80156b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80156bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80156c0:	f7f8 ffa8 	bl	800e614 <run_xrce_session>
 80156c4:	6920      	ldr	r0, [r4, #16]
 80156c6:	6932      	ldr	r2, [r6, #16]
 80156c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80156cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156d0:	6819      	ldr	r1, [r3, #0]
 80156d2:	f7f9 f89d 	bl	800e810 <uxr_buffer_delete_entity>
 80156d6:	4602      	mov	r2, r0
 80156d8:	6920      	ldr	r0, [r4, #16]
 80156da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80156de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80156e2:	f7f8 ff97 	bl	800e614 <run_xrce_session>
 80156e6:	2800      	cmp	r0, #0
 80156e8:	4628      	mov	r0, r5
 80156ea:	bf14      	ite	ne
 80156ec:	2400      	movne	r4, #0
 80156ee:	2402      	moveq	r4, #2
 80156f0:	f7f8 fe78 	bl	800e3e4 <rmw_uxrce_fini_client_memory>
 80156f4:	e7c5      	b.n	8015682 <rmw_destroy_client+0x12>
 80156f6:	bf00      	nop

080156f8 <rmw_get_implementation_identifier>:
 80156f8:	4b01      	ldr	r3, [pc, #4]	@ (8015700 <rmw_get_implementation_identifier+0x8>)
 80156fa:	6818      	ldr	r0, [r3, #0]
 80156fc:	4770      	bx	lr
 80156fe:	bf00      	nop
 8015700:	080196a8 	.word	0x080196a8

08015704 <create_topic>:
 8015704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015708:	4605      	mov	r5, r0
 801570a:	b084      	sub	sp, #16
 801570c:	4822      	ldr	r0, [pc, #136]	@ (8015798 <create_topic+0x94>)
 801570e:	460f      	mov	r7, r1
 8015710:	4616      	mov	r6, r2
 8015712:	f7ff ff89 	bl	8015628 <get_memory>
 8015716:	4604      	mov	r4, r0
 8015718:	2800      	cmp	r0, #0
 801571a:	d039      	beq.n	8015790 <create_topic+0x8c>
 801571c:	692b      	ldr	r3, [r5, #16]
 801571e:	6884      	ldr	r4, [r0, #8]
 8015720:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80157a0 <create_topic+0x9c>
 8015724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015728:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801572c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015730:	1c42      	adds	r2, r0, #1
 8015732:	2102      	movs	r1, #2
 8015734:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015738:	f7f9 fa86 	bl	800ec48 <uxr_object_id>
 801573c:	223c      	movs	r2, #60	@ 0x3c
 801573e:	6120      	str	r0, [r4, #16]
 8015740:	4641      	mov	r1, r8
 8015742:	4638      	mov	r0, r7
 8015744:	f7f8 ffcc 	bl	800e6e0 <generate_topic_name>
 8015748:	b1f0      	cbz	r0, 8015788 <create_topic+0x84>
 801574a:	4f14      	ldr	r7, [pc, #80]	@ (801579c <create_topic+0x98>)
 801574c:	4630      	mov	r0, r6
 801574e:	2264      	movs	r2, #100	@ 0x64
 8015750:	4639      	mov	r1, r7
 8015752:	f7f8 ff95 	bl	800e680 <generate_type_name>
 8015756:	b1b8      	cbz	r0, 8015788 <create_topic+0x84>
 8015758:	6928      	ldr	r0, [r5, #16]
 801575a:	2306      	movs	r3, #6
 801575c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015760:	f8cd 8000 	str.w	r8, [sp]
 8015764:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015768:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801576c:	6811      	ldr	r1, [r2, #0]
 801576e:	696b      	ldr	r3, [r5, #20]
 8015770:	6922      	ldr	r2, [r4, #16]
 8015772:	f7f9 f8cb 	bl	800e90c <uxr_buffer_create_topic_bin>
 8015776:	4602      	mov	r2, r0
 8015778:	6928      	ldr	r0, [r5, #16]
 801577a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801577e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015782:	f7f8 ff47 	bl	800e614 <run_xrce_session>
 8015786:	b918      	cbnz	r0, 8015790 <create_topic+0x8c>
 8015788:	4620      	mov	r0, r4
 801578a:	f7f8 fe41 	bl	800e410 <rmw_uxrce_fini_topic_memory>
 801578e:	2400      	movs	r4, #0
 8015790:	4620      	mov	r0, r4
 8015792:	b004      	add	sp, #16
 8015794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015798:	2000ae4c 	.word	0x2000ae4c
 801579c:	2000aecc 	.word	0x2000aecc
 80157a0:	2000ae90 	.word	0x2000ae90

080157a4 <destroy_topic>:
 80157a4:	b538      	push	{r3, r4, r5, lr}
 80157a6:	6985      	ldr	r5, [r0, #24]
 80157a8:	b1d5      	cbz	r5, 80157e0 <destroy_topic+0x3c>
 80157aa:	4604      	mov	r4, r0
 80157ac:	6928      	ldr	r0, [r5, #16]
 80157ae:	6922      	ldr	r2, [r4, #16]
 80157b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80157b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157b8:	6819      	ldr	r1, [r3, #0]
 80157ba:	f7f9 f829 	bl	800e810 <uxr_buffer_delete_entity>
 80157be:	4602      	mov	r2, r0
 80157c0:	6928      	ldr	r0, [r5, #16]
 80157c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80157c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80157ca:	f7f8 ff23 	bl	800e614 <run_xrce_session>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	4620      	mov	r0, r4
 80157d2:	bf14      	ite	ne
 80157d4:	2400      	movne	r4, #0
 80157d6:	2402      	moveq	r4, #2
 80157d8:	f7f8 fe1a 	bl	800e410 <rmw_uxrce_fini_topic_memory>
 80157dc:	4620      	mov	r0, r4
 80157de:	bd38      	pop	{r3, r4, r5, pc}
 80157e0:	2401      	movs	r4, #1
 80157e2:	4620      	mov	r0, r4
 80157e4:	bd38      	pop	{r3, r4, r5, pc}
 80157e6:	bf00      	nop

080157e8 <rmw_send_request>:
 80157e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157ec:	4604      	mov	r4, r0
 80157ee:	6800      	ldr	r0, [r0, #0]
 80157f0:	b08b      	sub	sp, #44	@ 0x2c
 80157f2:	460e      	mov	r6, r1
 80157f4:	4615      	mov	r5, r2
 80157f6:	b128      	cbz	r0, 8015804 <rmw_send_request+0x1c>
 80157f8:	4b21      	ldr	r3, [pc, #132]	@ (8015880 <rmw_send_request+0x98>)
 80157fa:	6819      	ldr	r1, [r3, #0]
 80157fc:	f7ea fd10 	bl	8000220 <strcmp>
 8015800:	2800      	cmp	r0, #0
 8015802:	d139      	bne.n	8015878 <rmw_send_request+0x90>
 8015804:	6864      	ldr	r4, [r4, #4]
 8015806:	6963      	ldr	r3, [r4, #20]
 8015808:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801580c:	689b      	ldr	r3, [r3, #8]
 801580e:	4798      	blx	r3
 8015810:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015814:	4630      	mov	r0, r6
 8015816:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801581a:	4798      	blx	r3
 801581c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015820:	9000      	str	r0, [sp, #0]
 8015822:	6922      	ldr	r2, [r4, #16]
 8015824:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015826:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801582a:	ab02      	add	r3, sp, #8
 801582c:	f7fb fa8e 	bl	8010d4c <uxr_prepare_output_stream>
 8015830:	2700      	movs	r7, #0
 8015832:	6028      	str	r0, [r5, #0]
 8015834:	606f      	str	r7, [r5, #4]
 8015836:	b198      	cbz	r0, 8015860 <rmw_send_request+0x78>
 8015838:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801583c:	a902      	add	r1, sp, #8
 801583e:	4630      	mov	r0, r6
 8015840:	4798      	blx	r3
 8015842:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015846:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d00c      	beq.n	8015868 <rmw_send_request+0x80>
 801584e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015850:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015854:	f7f9 fffc 	bl	800f850 <uxr_run_session_until_confirm_delivery>
 8015858:	4638      	mov	r0, r7
 801585a:	b00b      	add	sp, #44	@ 0x2c
 801585c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015860:	2001      	movs	r0, #1
 8015862:	b00b      	add	sp, #44	@ 0x2c
 8015864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015868:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801586c:	f7f9 fc30 	bl	800f0d0 <uxr_flash_output_streams>
 8015870:	4638      	mov	r0, r7
 8015872:	b00b      	add	sp, #44	@ 0x2c
 8015874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015878:	200c      	movs	r0, #12
 801587a:	b00b      	add	sp, #44	@ 0x2c
 801587c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015880:	080196a8 	.word	0x080196a8

08015884 <rmw_take_request>:
 8015884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015888:	4605      	mov	r5, r0
 801588a:	6800      	ldr	r0, [r0, #0]
 801588c:	b089      	sub	sp, #36	@ 0x24
 801588e:	460c      	mov	r4, r1
 8015890:	4690      	mov	r8, r2
 8015892:	461e      	mov	r6, r3
 8015894:	b128      	cbz	r0, 80158a2 <rmw_take_request+0x1e>
 8015896:	4b28      	ldr	r3, [pc, #160]	@ (8015938 <rmw_take_request+0xb4>)
 8015898:	6819      	ldr	r1, [r3, #0]
 801589a:	f7ea fcc1 	bl	8000220 <strcmp>
 801589e:	2800      	cmp	r0, #0
 80158a0:	d146      	bne.n	8015930 <rmw_take_request+0xac>
 80158a2:	b10e      	cbz	r6, 80158a8 <rmw_take_request+0x24>
 80158a4:	2300      	movs	r3, #0
 80158a6:	7033      	strb	r3, [r6, #0]
 80158a8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80158ac:	f7f8 fe34 	bl	800e518 <rmw_uxrce_clean_expired_static_input_buffer>
 80158b0:	4648      	mov	r0, r9
 80158b2:	f7f8 fe09 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80158b6:	4607      	mov	r7, r0
 80158b8:	b3b0      	cbz	r0, 8015928 <rmw_take_request+0xa4>
 80158ba:	6885      	ldr	r5, [r0, #8]
 80158bc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80158c0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80158c4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80158c8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80158cc:	7423      	strb	r3, [r4, #16]
 80158ce:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80158d2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80158d6:	74e2      	strb	r2, [r4, #19]
 80158d8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80158dc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80158e0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80158e4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80158e8:	61e1      	str	r1, [r4, #28]
 80158ea:	6162      	str	r2, [r4, #20]
 80158ec:	61a3      	str	r3, [r4, #24]
 80158ee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80158f2:	689b      	ldr	r3, [r3, #8]
 80158f4:	4798      	blx	r3
 80158f6:	6844      	ldr	r4, [r0, #4]
 80158f8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80158fc:	f105 0110 	add.w	r1, r5, #16
 8015900:	4668      	mov	r0, sp
 8015902:	f7f6 fb65 	bl	800bfd0 <ucdr_init_buffer>
 8015906:	68e3      	ldr	r3, [r4, #12]
 8015908:	4641      	mov	r1, r8
 801590a:	4668      	mov	r0, sp
 801590c:	4798      	blx	r3
 801590e:	4639      	mov	r1, r7
 8015910:	4604      	mov	r4, r0
 8015912:	480a      	ldr	r0, [pc, #40]	@ (801593c <rmw_take_request+0xb8>)
 8015914:	f7ff fe98 	bl	8015648 <put_memory>
 8015918:	b106      	cbz	r6, 801591c <rmw_take_request+0x98>
 801591a:	7034      	strb	r4, [r6, #0]
 801591c:	f084 0001 	eor.w	r0, r4, #1
 8015920:	b2c0      	uxtb	r0, r0
 8015922:	b009      	add	sp, #36	@ 0x24
 8015924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015928:	2001      	movs	r0, #1
 801592a:	b009      	add	sp, #36	@ 0x24
 801592c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015930:	200c      	movs	r0, #12
 8015932:	b009      	add	sp, #36	@ 0x24
 8015934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015938:	080196a8 	.word	0x080196a8
 801593c:	2000ae2c 	.word	0x2000ae2c

08015940 <rmw_send_response>:
 8015940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015942:	4605      	mov	r5, r0
 8015944:	6800      	ldr	r0, [r0, #0]
 8015946:	b091      	sub	sp, #68	@ 0x44
 8015948:	460c      	mov	r4, r1
 801594a:	4616      	mov	r6, r2
 801594c:	b128      	cbz	r0, 801595a <rmw_send_response+0x1a>
 801594e:	4b29      	ldr	r3, [pc, #164]	@ (80159f4 <rmw_send_response+0xb4>)
 8015950:	6819      	ldr	r1, [r3, #0]
 8015952:	f7ea fc65 	bl	8000220 <strcmp>
 8015956:	2800      	cmp	r0, #0
 8015958:	d141      	bne.n	80159de <rmw_send_response+0x9e>
 801595a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801595e:	9306      	str	r3, [sp, #24]
 8015960:	4623      	mov	r3, r4
 8015962:	9207      	str	r2, [sp, #28]
 8015964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015968:	686d      	ldr	r5, [r5, #4]
 801596a:	789b      	ldrb	r3, [r3, #2]
 801596c:	68a1      	ldr	r1, [r4, #8]
 801596e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015972:	f88d 3016 	strb.w	r3, [sp, #22]
 8015976:	68e2      	ldr	r2, [r4, #12]
 8015978:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801597c:	6860      	ldr	r0, [r4, #4]
 801597e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015982:	ab02      	add	r3, sp, #8
 8015984:	c307      	stmia	r3!, {r0, r1, r2}
 8015986:	696b      	ldr	r3, [r5, #20]
 8015988:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	4798      	blx	r3
 801598e:	6844      	ldr	r4, [r0, #4]
 8015990:	4630      	mov	r0, r6
 8015992:	6923      	ldr	r3, [r4, #16]
 8015994:	4798      	blx	r3
 8015996:	f100 0318 	add.w	r3, r0, #24
 801599a:	6938      	ldr	r0, [r7, #16]
 801599c:	9300      	str	r3, [sp, #0]
 801599e:	692a      	ldr	r2, [r5, #16]
 80159a0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80159a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159a6:	ab08      	add	r3, sp, #32
 80159a8:	f7fb f9d0 	bl	8010d4c <uxr_prepare_output_stream>
 80159ac:	b910      	cbnz	r0, 80159b4 <rmw_send_response+0x74>
 80159ae:	2001      	movs	r0, #1
 80159b0:	b011      	add	sp, #68	@ 0x44
 80159b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b4:	a902      	add	r1, sp, #8
 80159b6:	a808      	add	r0, sp, #32
 80159b8:	f7fc fa14 	bl	8011de4 <uxr_serialize_SampleIdentity>
 80159bc:	68a3      	ldr	r3, [r4, #8]
 80159be:	a908      	add	r1, sp, #32
 80159c0:	4630      	mov	r0, r6
 80159c2:	4798      	blx	r3
 80159c4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80159c8:	6938      	ldr	r0, [r7, #16]
 80159ca:	2b01      	cmp	r3, #1
 80159cc:	d00a      	beq.n	80159e4 <rmw_send_response+0xa4>
 80159ce:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80159d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159d4:	f7f9 ff3c 	bl	800f850 <uxr_run_session_until_confirm_delivery>
 80159d8:	2000      	movs	r0, #0
 80159da:	b011      	add	sp, #68	@ 0x44
 80159dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159de:	200c      	movs	r0, #12
 80159e0:	b011      	add	sp, #68	@ 0x44
 80159e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159e8:	f7f9 fb72 	bl	800f0d0 <uxr_flash_output_streams>
 80159ec:	2000      	movs	r0, #0
 80159ee:	b011      	add	sp, #68	@ 0x44
 80159f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159f2:	bf00      	nop
 80159f4:	080196a8 	.word	0x080196a8

080159f8 <rmw_take_response>:
 80159f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159fc:	4604      	mov	r4, r0
 80159fe:	6800      	ldr	r0, [r0, #0]
 8015a00:	b088      	sub	sp, #32
 8015a02:	4688      	mov	r8, r1
 8015a04:	4617      	mov	r7, r2
 8015a06:	461d      	mov	r5, r3
 8015a08:	b120      	cbz	r0, 8015a14 <rmw_take_response+0x1c>
 8015a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8015a84 <rmw_take_response+0x8c>)
 8015a0c:	6819      	ldr	r1, [r3, #0]
 8015a0e:	f7ea fc07 	bl	8000220 <strcmp>
 8015a12:	bb78      	cbnz	r0, 8015a74 <rmw_take_response+0x7c>
 8015a14:	b10d      	cbz	r5, 8015a1a <rmw_take_response+0x22>
 8015a16:	2300      	movs	r3, #0
 8015a18:	702b      	strb	r3, [r5, #0]
 8015a1a:	6864      	ldr	r4, [r4, #4]
 8015a1c:	f7f8 fd7c 	bl	800e518 <rmw_uxrce_clean_expired_static_input_buffer>
 8015a20:	4620      	mov	r0, r4
 8015a22:	f7f8 fd51 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015a26:	4606      	mov	r6, r0
 8015a28:	b340      	cbz	r0, 8015a7c <rmw_take_response+0x84>
 8015a2a:	6963      	ldr	r3, [r4, #20]
 8015a2c:	6884      	ldr	r4, [r0, #8]
 8015a2e:	68db      	ldr	r3, [r3, #12]
 8015a30:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015a34:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015a38:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015a3c:	4798      	blx	r3
 8015a3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015a42:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015a46:	f104 0110 	add.w	r1, r4, #16
 8015a4a:	4668      	mov	r0, sp
 8015a4c:	f7f6 fac0 	bl	800bfd0 <ucdr_init_buffer>
 8015a50:	4639      	mov	r1, r7
 8015a52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a56:	4668      	mov	r0, sp
 8015a58:	4798      	blx	r3
 8015a5a:	4631      	mov	r1, r6
 8015a5c:	4604      	mov	r4, r0
 8015a5e:	480a      	ldr	r0, [pc, #40]	@ (8015a88 <rmw_take_response+0x90>)
 8015a60:	f7ff fdf2 	bl	8015648 <put_memory>
 8015a64:	b105      	cbz	r5, 8015a68 <rmw_take_response+0x70>
 8015a66:	702c      	strb	r4, [r5, #0]
 8015a68:	f084 0001 	eor.w	r0, r4, #1
 8015a6c:	b2c0      	uxtb	r0, r0
 8015a6e:	b008      	add	sp, #32
 8015a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a74:	200c      	movs	r0, #12
 8015a76:	b008      	add	sp, #32
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	2001      	movs	r0, #1
 8015a7e:	b008      	add	sp, #32
 8015a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a84:	080196a8 	.word	0x080196a8
 8015a88:	2000ae2c 	.word	0x2000ae2c

08015a8c <rmw_take_with_info>:
 8015a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a8e:	4604      	mov	r4, r0
 8015a90:	6800      	ldr	r0, [r0, #0]
 8015a92:	b089      	sub	sp, #36	@ 0x24
 8015a94:	460f      	mov	r7, r1
 8015a96:	4615      	mov	r5, r2
 8015a98:	b128      	cbz	r0, 8015aa6 <rmw_take_with_info+0x1a>
 8015a9a:	4b24      	ldr	r3, [pc, #144]	@ (8015b2c <rmw_take_with_info+0xa0>)
 8015a9c:	6819      	ldr	r1, [r3, #0]
 8015a9e:	f7ea fbbf 	bl	8000220 <strcmp>
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	d13e      	bne.n	8015b24 <rmw_take_with_info+0x98>
 8015aa6:	b305      	cbz	r5, 8015aea <rmw_take_with_info+0x5e>
 8015aa8:	6864      	ldr	r4, [r4, #4]
 8015aaa:	2300      	movs	r3, #0
 8015aac:	702b      	strb	r3, [r5, #0]
 8015aae:	f7f8 fd33 	bl	800e518 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ab2:	4620      	mov	r0, r4
 8015ab4:	f7f8 fd08 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ab8:	4606      	mov	r6, r0
 8015aba:	b1f0      	cbz	r0, 8015afa <rmw_take_with_info+0x6e>
 8015abc:	6881      	ldr	r1, [r0, #8]
 8015abe:	4668      	mov	r0, sp
 8015ac0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015ac4:	3110      	adds	r1, #16
 8015ac6:	f7f6 fa83 	bl	800bfd0 <ucdr_init_buffer>
 8015aca:	69a3      	ldr	r3, [r4, #24]
 8015acc:	4639      	mov	r1, r7
 8015ace:	68db      	ldr	r3, [r3, #12]
 8015ad0:	4668      	mov	r0, sp
 8015ad2:	4798      	blx	r3
 8015ad4:	4631      	mov	r1, r6
 8015ad6:	4604      	mov	r4, r0
 8015ad8:	4815      	ldr	r0, [pc, #84]	@ (8015b30 <rmw_take_with_info+0xa4>)
 8015ada:	f7ff fdb5 	bl	8015648 <put_memory>
 8015ade:	702c      	strb	r4, [r5, #0]
 8015ae0:	f084 0001 	eor.w	r0, r4, #1
 8015ae4:	b2c0      	uxtb	r0, r0
 8015ae6:	b009      	add	sp, #36	@ 0x24
 8015ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aea:	6864      	ldr	r4, [r4, #4]
 8015aec:	f7f8 fd14 	bl	800e518 <rmw_uxrce_clean_expired_static_input_buffer>
 8015af0:	4620      	mov	r0, r4
 8015af2:	f7f8 fce9 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015af6:	4605      	mov	r5, r0
 8015af8:	b910      	cbnz	r0, 8015b00 <rmw_take_with_info+0x74>
 8015afa:	2001      	movs	r0, #1
 8015afc:	b009      	add	sp, #36	@ 0x24
 8015afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b00:	68a9      	ldr	r1, [r5, #8]
 8015b02:	4668      	mov	r0, sp
 8015b04:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015b08:	3110      	adds	r1, #16
 8015b0a:	f7f6 fa61 	bl	800bfd0 <ucdr_init_buffer>
 8015b0e:	69a3      	ldr	r3, [r4, #24]
 8015b10:	4639      	mov	r1, r7
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	4668      	mov	r0, sp
 8015b16:	4798      	blx	r3
 8015b18:	4629      	mov	r1, r5
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	4804      	ldr	r0, [pc, #16]	@ (8015b30 <rmw_take_with_info+0xa4>)
 8015b1e:	f7ff fd93 	bl	8015648 <put_memory>
 8015b22:	e7dd      	b.n	8015ae0 <rmw_take_with_info+0x54>
 8015b24:	200c      	movs	r0, #12
 8015b26:	b009      	add	sp, #36	@ 0x24
 8015b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	080196a8 	.word	0x080196a8
 8015b30:	2000ae2c 	.word	0x2000ae2c

08015b34 <rmw_wait>:
 8015b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b38:	b089      	sub	sp, #36	@ 0x24
 8015b3a:	4605      	mov	r5, r0
 8015b3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015b3e:	460e      	mov	r6, r1
 8015b40:	4698      	mov	r8, r3
 8015b42:	4691      	mov	r9, r2
 8015b44:	2a00      	cmp	r2, #0
 8015b46:	f000 810a 	beq.w	8015d5e <rmw_wait+0x22a>
 8015b4a:	b16c      	cbz	r4, 8015b68 <rmw_wait+0x34>
 8015b4c:	4bae      	ldr	r3, [pc, #696]	@ (8015e08 <rmw_wait+0x2d4>)
 8015b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b50:	af04      	add	r7, sp, #16
 8015b52:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015b56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015b5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015b5e:	f7ff faaf 	bl	80150c0 <rmw_time_equal>
 8015b62:	2800      	cmp	r0, #0
 8015b64:	f000 8127 	beq.w	8015db6 <rmw_wait+0x282>
 8015b68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015b6c:	f7f8 fcd4 	bl	800e518 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b70:	4ba6      	ldr	r3, [pc, #664]	@ (8015e0c <rmw_wait+0x2d8>)
 8015b72:	681c      	ldr	r4, [r3, #0]
 8015b74:	b14c      	cbz	r4, 8015b8a <rmw_wait+0x56>
 8015b76:	4623      	mov	r3, r4
 8015b78:	2100      	movs	r1, #0
 8015b7a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015b7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015b82:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d1f7      	bne.n	8015b7a <rmw_wait+0x46>
 8015b8a:	f1b9 0f00 	cmp.w	r9, #0
 8015b8e:	d011      	beq.n	8015bb4 <rmw_wait+0x80>
 8015b90:	f8d9 1000 	ldr.w	r1, [r9]
 8015b94:	b171      	cbz	r1, 8015bb4 <rmw_wait+0x80>
 8015b96:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	2001      	movs	r0, #1
 8015b9e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015ba2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015ba4:	6912      	ldr	r2, [r2, #16]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015bac:	4299      	cmp	r1, r3
 8015bae:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015bb2:	d1f4      	bne.n	8015b9e <rmw_wait+0x6a>
 8015bb4:	f1b8 0f00 	cmp.w	r8, #0
 8015bb8:	d011      	beq.n	8015bde <rmw_wait+0xaa>
 8015bba:	f8d8 1000 	ldr.w	r1, [r8]
 8015bbe:	b171      	cbz	r1, 8015bde <rmw_wait+0xaa>
 8015bc0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	2001      	movs	r0, #1
 8015bc8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015bcc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015bce:	6912      	ldr	r2, [r2, #16]
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015bd6:	4299      	cmp	r1, r3
 8015bd8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015bdc:	d1f4      	bne.n	8015bc8 <rmw_wait+0x94>
 8015bde:	b185      	cbz	r5, 8015c02 <rmw_wait+0xce>
 8015be0:	6829      	ldr	r1, [r5, #0]
 8015be2:	b171      	cbz	r1, 8015c02 <rmw_wait+0xce>
 8015be4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015be8:	2300      	movs	r3, #0
 8015bea:	2001      	movs	r0, #1
 8015bec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015bf0:	6a12      	ldr	r2, [r2, #32]
 8015bf2:	6912      	ldr	r2, [r2, #16]
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015bfa:	4299      	cmp	r1, r3
 8015bfc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015c00:	d1f4      	bne.n	8015bec <rmw_wait+0xb8>
 8015c02:	b34c      	cbz	r4, 8015c58 <rmw_wait+0x124>
 8015c04:	4622      	mov	r2, r4
 8015c06:	2300      	movs	r3, #0
 8015c08:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015c0c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015c10:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015c14:	440b      	add	r3, r1
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	2a00      	cmp	r2, #0
 8015c1a:	d1f5      	bne.n	8015c08 <rmw_wait+0xd4>
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	f000 8084 	beq.w	8015d2a <rmw_wait+0x1f6>
 8015c22:	1c7a      	adds	r2, r7, #1
 8015c24:	d00d      	beq.n	8015c42 <rmw_wait+0x10e>
 8015c26:	ee07 7a90 	vmov	s15, r7
 8015c2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015c2e:	ee07 3a90 	vmov	s15, r3
 8015c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015c3a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015c3e:	ee17 7a90 	vmov	r7, s15
 8015c42:	68a0      	ldr	r0, [r4, #8]
 8015c44:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015c48:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	f040 8090 	bne.w	8015d72 <rmw_wait+0x23e>
 8015c52:	6864      	ldr	r4, [r4, #4]
 8015c54:	2c00      	cmp	r4, #0
 8015c56:	d1f4      	bne.n	8015c42 <rmw_wait+0x10e>
 8015c58:	f1b9 0f00 	cmp.w	r9, #0
 8015c5c:	f000 80bc 	beq.w	8015dd8 <rmw_wait+0x2a4>
 8015c60:	f8d9 7000 	ldr.w	r7, [r9]
 8015c64:	2f00      	cmp	r7, #0
 8015c66:	f000 808e 	beq.w	8015d86 <rmw_wait+0x252>
 8015c6a:	2400      	movs	r4, #0
 8015c6c:	4627      	mov	r7, r4
 8015c6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015c72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c76:	f7f8 fc27 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c7a:	2800      	cmp	r0, #0
 8015c7c:	d05f      	beq.n	8015d3e <rmw_wait+0x20a>
 8015c7e:	f8d9 3000 	ldr.w	r3, [r9]
 8015c82:	3401      	adds	r4, #1
 8015c84:	42a3      	cmp	r3, r4
 8015c86:	f04f 0701 	mov.w	r7, #1
 8015c8a:	d8f0      	bhi.n	8015c6e <rmw_wait+0x13a>
 8015c8c:	f1b8 0f00 	cmp.w	r8, #0
 8015c90:	d012      	beq.n	8015cb8 <rmw_wait+0x184>
 8015c92:	f8d8 3000 	ldr.w	r3, [r8]
 8015c96:	b17b      	cbz	r3, 8015cb8 <rmw_wait+0x184>
 8015c98:	2400      	movs	r4, #0
 8015c9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ca2:	f7f8 fc11 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d051      	beq.n	8015d4e <rmw_wait+0x21a>
 8015caa:	f8d8 3000 	ldr.w	r3, [r8]
 8015cae:	3401      	adds	r4, #1
 8015cb0:	42a3      	cmp	r3, r4
 8015cb2:	f04f 0701 	mov.w	r7, #1
 8015cb6:	d8f0      	bhi.n	8015c9a <rmw_wait+0x166>
 8015cb8:	b1dd      	cbz	r5, 8015cf2 <rmw_wait+0x1be>
 8015cba:	682b      	ldr	r3, [r5, #0]
 8015cbc:	b1cb      	cbz	r3, 8015cf2 <rmw_wait+0x1be>
 8015cbe:	2400      	movs	r4, #0
 8015cc0:	686b      	ldr	r3, [r5, #4]
 8015cc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015cc6:	f7f8 fbff 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015cca:	b158      	cbz	r0, 8015ce4 <rmw_wait+0x1b0>
 8015ccc:	682b      	ldr	r3, [r5, #0]
 8015cce:	3401      	adds	r4, #1
 8015cd0:	42a3      	cmp	r3, r4
 8015cd2:	d969      	bls.n	8015da8 <rmw_wait+0x274>
 8015cd4:	686b      	ldr	r3, [r5, #4]
 8015cd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015cda:	2701      	movs	r7, #1
 8015cdc:	f7f8 fbf4 	bl	800e4c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	d1f3      	bne.n	8015ccc <rmw_wait+0x198>
 8015ce4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015ce8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015cec:	3401      	adds	r4, #1
 8015cee:	42a3      	cmp	r3, r4
 8015cf0:	d8e6      	bhi.n	8015cc0 <rmw_wait+0x18c>
 8015cf2:	b1a6      	cbz	r6, 8015d1e <rmw_wait+0x1ea>
 8015cf4:	6834      	ldr	r4, [r6, #0]
 8015cf6:	b194      	cbz	r4, 8015d1e <rmw_wait+0x1ea>
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	461d      	mov	r5, r3
 8015cfc:	e004      	b.n	8015d08 <rmw_wait+0x1d4>
 8015cfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015d02:	3301      	adds	r3, #1
 8015d04:	42a3      	cmp	r3, r4
 8015d06:	d00a      	beq.n	8015d1e <rmw_wait+0x1ea>
 8015d08:	6870      	ldr	r0, [r6, #4]
 8015d0a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015d0e:	7c0a      	ldrb	r2, [r1, #16]
 8015d10:	2a00      	cmp	r2, #0
 8015d12:	d0f4      	beq.n	8015cfe <rmw_wait+0x1ca>
 8015d14:	3301      	adds	r3, #1
 8015d16:	42a3      	cmp	r3, r4
 8015d18:	740d      	strb	r5, [r1, #16]
 8015d1a:	4617      	mov	r7, r2
 8015d1c:	d1f4      	bne.n	8015d08 <rmw_wait+0x1d4>
 8015d1e:	2f00      	cmp	r7, #0
 8015d20:	d03e      	beq.n	8015da0 <rmw_wait+0x26c>
 8015d22:	2000      	movs	r0, #0
 8015d24:	b009      	add	sp, #36	@ 0x24
 8015d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d2a:	68a0      	ldr	r0, [r4, #8]
 8015d2c:	2100      	movs	r1, #0
 8015d2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d32:	f7f9 fd53 	bl	800f7dc <uxr_run_session_timeout>
 8015d36:	6864      	ldr	r4, [r4, #4]
 8015d38:	2c00      	cmp	r4, #0
 8015d3a:	d1f6      	bne.n	8015d2a <rmw_wait+0x1f6>
 8015d3c:	e78c      	b.n	8015c58 <rmw_wait+0x124>
 8015d3e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015d42:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d46:	3401      	adds	r4, #1
 8015d48:	42a3      	cmp	r3, r4
 8015d4a:	d890      	bhi.n	8015c6e <rmw_wait+0x13a>
 8015d4c:	e79e      	b.n	8015c8c <rmw_wait+0x158>
 8015d4e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015d52:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d56:	3401      	adds	r4, #1
 8015d58:	429c      	cmp	r4, r3
 8015d5a:	d39e      	bcc.n	8015c9a <rmw_wait+0x166>
 8015d5c:	e7ac      	b.n	8015cb8 <rmw_wait+0x184>
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	f47f aef3 	bne.w	8015b4a <rmw_wait+0x16>
 8015d64:	2800      	cmp	r0, #0
 8015d66:	f47f aef0 	bne.w	8015b4a <rmw_wait+0x16>
 8015d6a:	2900      	cmp	r1, #0
 8015d6c:	f47f aeed 	bne.w	8015b4a <rmw_wait+0x16>
 8015d70:	e7d7      	b.n	8015d22 <rmw_wait+0x1ee>
 8015d72:	4639      	mov	r1, r7
 8015d74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d78:	f7f9 fd4a 	bl	800f810 <uxr_run_session_until_data>
 8015d7c:	6864      	ldr	r4, [r4, #4]
 8015d7e:	2c00      	cmp	r4, #0
 8015d80:	f47f af5f 	bne.w	8015c42 <rmw_wait+0x10e>
 8015d84:	e768      	b.n	8015c58 <rmw_wait+0x124>
 8015d86:	f1b8 0f00 	cmp.w	r8, #0
 8015d8a:	d032      	beq.n	8015df2 <rmw_wait+0x2be>
 8015d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d181      	bne.n	8015c98 <rmw_wait+0x164>
 8015d94:	461f      	mov	r7, r3
 8015d96:	2d00      	cmp	r5, #0
 8015d98:	d18f      	bne.n	8015cba <rmw_wait+0x186>
 8015d9a:	462f      	mov	r7, r5
 8015d9c:	2e00      	cmp	r6, #0
 8015d9e:	d1a9      	bne.n	8015cf4 <rmw_wait+0x1c0>
 8015da0:	2002      	movs	r0, #2
 8015da2:	b009      	add	sp, #36	@ 0x24
 8015da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015da8:	2e00      	cmp	r6, #0
 8015daa:	d0ba      	beq.n	8015d22 <rmw_wait+0x1ee>
 8015dac:	6834      	ldr	r4, [r6, #0]
 8015dae:	2701      	movs	r7, #1
 8015db0:	2c00      	cmp	r4, #0
 8015db2:	d1a1      	bne.n	8015cf8 <rmw_wait+0x1c4>
 8015db4:	e7b5      	b.n	8015d22 <rmw_wait+0x1ee>
 8015db6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015dba:	f7ff f9d5 	bl	8015168 <rmw_time_total_nsec>
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	4a13      	ldr	r2, [pc, #76]	@ (8015e10 <rmw_wait+0x2dc>)
 8015dc2:	f7ea fca1 	bl	8000708 <__aeabi_uldivmod>
 8015dc6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015dca:	f171 0300 	sbcs.w	r3, r1, #0
 8015dce:	4607      	mov	r7, r0
 8015dd0:	bfa8      	it	ge
 8015dd2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015dd6:	e6c9      	b.n	8015b6c <rmw_wait+0x38>
 8015dd8:	f1b8 0f00 	cmp.w	r8, #0
 8015ddc:	d009      	beq.n	8015df2 <rmw_wait+0x2be>
 8015dde:	f8d8 3000 	ldr.w	r3, [r8]
 8015de2:	464f      	mov	r7, r9
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	f47f af57 	bne.w	8015c98 <rmw_wait+0x164>
 8015dea:	2d00      	cmp	r5, #0
 8015dec:	f47f af65 	bne.w	8015cba <rmw_wait+0x186>
 8015df0:	e7d3      	b.n	8015d9a <rmw_wait+0x266>
 8015df2:	b17d      	cbz	r5, 8015e14 <rmw_wait+0x2e0>
 8015df4:	682b      	ldr	r3, [r5, #0]
 8015df6:	4647      	mov	r7, r8
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	f47f af60 	bne.w	8015cbe <rmw_wait+0x18a>
 8015dfe:	2e00      	cmp	r6, #0
 8015e00:	f47f af78 	bne.w	8015cf4 <rmw_wait+0x1c0>
 8015e04:	e7cc      	b.n	8015da0 <rmw_wait+0x26c>
 8015e06:	bf00      	nop
 8015e08:	08018b88 	.word	0x08018b88
 8015e0c:	2000ae1c 	.word	0x2000ae1c
 8015e10:	000f4240 	.word	0x000f4240
 8015e14:	2e00      	cmp	r6, #0
 8015e16:	d0c3      	beq.n	8015da0 <rmw_wait+0x26c>
 8015e18:	6834      	ldr	r4, [r6, #0]
 8015e1a:	462f      	mov	r7, r5
 8015e1c:	2c00      	cmp	r4, #0
 8015e1e:	f47f af6b 	bne.w	8015cf8 <rmw_wait+0x1c4>
 8015e22:	e7bd      	b.n	8015da0 <rmw_wait+0x26c>

08015e24 <rmw_create_wait_set>:
 8015e24:	b508      	push	{r3, lr}
 8015e26:	4803      	ldr	r0, [pc, #12]	@ (8015e34 <rmw_create_wait_set+0x10>)
 8015e28:	f7ff fbfe 	bl	8015628 <get_memory>
 8015e2c:	b108      	cbz	r0, 8015e32 <rmw_create_wait_set+0xe>
 8015e2e:	6880      	ldr	r0, [r0, #8]
 8015e30:	3010      	adds	r0, #16
 8015e32:	bd08      	pop	{r3, pc}
 8015e34:	2000ae5c 	.word	0x2000ae5c

08015e38 <rmw_destroy_wait_set>:
 8015e38:	b508      	push	{r3, lr}
 8015e3a:	4b08      	ldr	r3, [pc, #32]	@ (8015e5c <rmw_destroy_wait_set+0x24>)
 8015e3c:	6819      	ldr	r1, [r3, #0]
 8015e3e:	b911      	cbnz	r1, 8015e46 <rmw_destroy_wait_set+0xe>
 8015e40:	e00a      	b.n	8015e58 <rmw_destroy_wait_set+0x20>
 8015e42:	6849      	ldr	r1, [r1, #4]
 8015e44:	b141      	cbz	r1, 8015e58 <rmw_destroy_wait_set+0x20>
 8015e46:	688b      	ldr	r3, [r1, #8]
 8015e48:	3310      	adds	r3, #16
 8015e4a:	4298      	cmp	r0, r3
 8015e4c:	d1f9      	bne.n	8015e42 <rmw_destroy_wait_set+0xa>
 8015e4e:	4803      	ldr	r0, [pc, #12]	@ (8015e5c <rmw_destroy_wait_set+0x24>)
 8015e50:	f7ff fbfa 	bl	8015648 <put_memory>
 8015e54:	2000      	movs	r0, #0
 8015e56:	bd08      	pop	{r3, pc}
 8015e58:	2001      	movs	r0, #1
 8015e5a:	bd08      	pop	{r3, pc}
 8015e5c:	2000ae5c 	.word	0x2000ae5c

08015e60 <rmw_uros_epoch_nanos>:
 8015e60:	4b05      	ldr	r3, [pc, #20]	@ (8015e78 <rmw_uros_epoch_nanos+0x18>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	b123      	cbz	r3, 8015e70 <rmw_uros_epoch_nanos+0x10>
 8015e66:	6898      	ldr	r0, [r3, #8]
 8015e68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e6c:	f7f9 b926 	b.w	800f0bc <uxr_epoch_nanos>
 8015e70:	2000      	movs	r0, #0
 8015e72:	2100      	movs	r1, #0
 8015e74:	4770      	bx	lr
 8015e76:	bf00      	nop
 8015e78:	2000ae1c 	.word	0x2000ae1c

08015e7c <ucdr_serialize_endian_array_char>:
 8015e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e80:	4619      	mov	r1, r3
 8015e82:	461f      	mov	r7, r3
 8015e84:	4605      	mov	r5, r0
 8015e86:	4690      	mov	r8, r2
 8015e88:	f7f6 f84e 	bl	800bf28 <ucdr_check_buffer_available_for>
 8015e8c:	b9e0      	cbnz	r0, 8015ec8 <ucdr_serialize_endian_array_char+0x4c>
 8015e8e:	463e      	mov	r6, r7
 8015e90:	e009      	b.n	8015ea6 <ucdr_serialize_endian_array_char+0x2a>
 8015e92:	68a8      	ldr	r0, [r5, #8]
 8015e94:	f001 ff59 	bl	8017d4a <memcpy>
 8015e98:	68ab      	ldr	r3, [r5, #8]
 8015e9a:	6928      	ldr	r0, [r5, #16]
 8015e9c:	4423      	add	r3, r4
 8015e9e:	4420      	add	r0, r4
 8015ea0:	1b36      	subs	r6, r6, r4
 8015ea2:	60ab      	str	r3, [r5, #8]
 8015ea4:	6128      	str	r0, [r5, #16]
 8015ea6:	4631      	mov	r1, r6
 8015ea8:	2201      	movs	r2, #1
 8015eaa:	4628      	mov	r0, r5
 8015eac:	f7f6 f8c4 	bl	800c038 <ucdr_check_final_buffer_behavior_array>
 8015eb0:	1bb9      	subs	r1, r7, r6
 8015eb2:	4441      	add	r1, r8
 8015eb4:	4604      	mov	r4, r0
 8015eb6:	4602      	mov	r2, r0
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d1ea      	bne.n	8015e92 <ucdr_serialize_endian_array_char+0x16>
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	7da8      	ldrb	r0, [r5, #22]
 8015ec0:	756b      	strb	r3, [r5, #21]
 8015ec2:	4058      	eors	r0, r3
 8015ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ec8:	463a      	mov	r2, r7
 8015eca:	68a8      	ldr	r0, [r5, #8]
 8015ecc:	4641      	mov	r1, r8
 8015ece:	f001 ff3c 	bl	8017d4a <memcpy>
 8015ed2:	68aa      	ldr	r2, [r5, #8]
 8015ed4:	692b      	ldr	r3, [r5, #16]
 8015ed6:	443a      	add	r2, r7
 8015ed8:	443b      	add	r3, r7
 8015eda:	60aa      	str	r2, [r5, #8]
 8015edc:	612b      	str	r3, [r5, #16]
 8015ede:	e7ed      	b.n	8015ebc <ucdr_serialize_endian_array_char+0x40>

08015ee0 <ucdr_deserialize_endian_array_char>:
 8015ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	461f      	mov	r7, r3
 8015ee8:	4605      	mov	r5, r0
 8015eea:	4690      	mov	r8, r2
 8015eec:	f7f6 f81c 	bl	800bf28 <ucdr_check_buffer_available_for>
 8015ef0:	b9e0      	cbnz	r0, 8015f2c <ucdr_deserialize_endian_array_char+0x4c>
 8015ef2:	463e      	mov	r6, r7
 8015ef4:	e009      	b.n	8015f0a <ucdr_deserialize_endian_array_char+0x2a>
 8015ef6:	68a9      	ldr	r1, [r5, #8]
 8015ef8:	f001 ff27 	bl	8017d4a <memcpy>
 8015efc:	68ab      	ldr	r3, [r5, #8]
 8015efe:	6928      	ldr	r0, [r5, #16]
 8015f00:	4423      	add	r3, r4
 8015f02:	4420      	add	r0, r4
 8015f04:	1b36      	subs	r6, r6, r4
 8015f06:	60ab      	str	r3, [r5, #8]
 8015f08:	6128      	str	r0, [r5, #16]
 8015f0a:	2201      	movs	r2, #1
 8015f0c:	4631      	mov	r1, r6
 8015f0e:	4628      	mov	r0, r5
 8015f10:	f7f6 f892 	bl	800c038 <ucdr_check_final_buffer_behavior_array>
 8015f14:	4604      	mov	r4, r0
 8015f16:	1bb8      	subs	r0, r7, r6
 8015f18:	4440      	add	r0, r8
 8015f1a:	4622      	mov	r2, r4
 8015f1c:	2c00      	cmp	r4, #0
 8015f1e:	d1ea      	bne.n	8015ef6 <ucdr_deserialize_endian_array_char+0x16>
 8015f20:	2301      	movs	r3, #1
 8015f22:	7da8      	ldrb	r0, [r5, #22]
 8015f24:	756b      	strb	r3, [r5, #21]
 8015f26:	4058      	eors	r0, r3
 8015f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f2c:	463a      	mov	r2, r7
 8015f2e:	68a9      	ldr	r1, [r5, #8]
 8015f30:	4640      	mov	r0, r8
 8015f32:	f001 ff0a 	bl	8017d4a <memcpy>
 8015f36:	68aa      	ldr	r2, [r5, #8]
 8015f38:	692b      	ldr	r3, [r5, #16]
 8015f3a:	443a      	add	r2, r7
 8015f3c:	443b      	add	r3, r7
 8015f3e:	60aa      	str	r2, [r5, #8]
 8015f40:	612b      	str	r3, [r5, #16]
 8015f42:	e7ed      	b.n	8015f20 <ucdr_deserialize_endian_array_char+0x40>

08015f44 <ucdr_serialize_array_uint8_t>:
 8015f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f48:	4688      	mov	r8, r1
 8015f4a:	4611      	mov	r1, r2
 8015f4c:	4617      	mov	r7, r2
 8015f4e:	4605      	mov	r5, r0
 8015f50:	f7f5 ffea 	bl	800bf28 <ucdr_check_buffer_available_for>
 8015f54:	b9e0      	cbnz	r0, 8015f90 <ucdr_serialize_array_uint8_t+0x4c>
 8015f56:	463e      	mov	r6, r7
 8015f58:	e009      	b.n	8015f6e <ucdr_serialize_array_uint8_t+0x2a>
 8015f5a:	68a8      	ldr	r0, [r5, #8]
 8015f5c:	f001 fef5 	bl	8017d4a <memcpy>
 8015f60:	68aa      	ldr	r2, [r5, #8]
 8015f62:	692b      	ldr	r3, [r5, #16]
 8015f64:	4422      	add	r2, r4
 8015f66:	4423      	add	r3, r4
 8015f68:	1b36      	subs	r6, r6, r4
 8015f6a:	60aa      	str	r2, [r5, #8]
 8015f6c:	612b      	str	r3, [r5, #16]
 8015f6e:	4631      	mov	r1, r6
 8015f70:	2201      	movs	r2, #1
 8015f72:	4628      	mov	r0, r5
 8015f74:	f7f6 f860 	bl	800c038 <ucdr_check_final_buffer_behavior_array>
 8015f78:	1bb9      	subs	r1, r7, r6
 8015f7a:	4441      	add	r1, r8
 8015f7c:	4604      	mov	r4, r0
 8015f7e:	4602      	mov	r2, r0
 8015f80:	2800      	cmp	r0, #0
 8015f82:	d1ea      	bne.n	8015f5a <ucdr_serialize_array_uint8_t+0x16>
 8015f84:	2301      	movs	r3, #1
 8015f86:	7da8      	ldrb	r0, [r5, #22]
 8015f88:	756b      	strb	r3, [r5, #21]
 8015f8a:	4058      	eors	r0, r3
 8015f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f90:	463a      	mov	r2, r7
 8015f92:	68a8      	ldr	r0, [r5, #8]
 8015f94:	4641      	mov	r1, r8
 8015f96:	f001 fed8 	bl	8017d4a <memcpy>
 8015f9a:	68aa      	ldr	r2, [r5, #8]
 8015f9c:	692b      	ldr	r3, [r5, #16]
 8015f9e:	443a      	add	r2, r7
 8015fa0:	443b      	add	r3, r7
 8015fa2:	60aa      	str	r2, [r5, #8]
 8015fa4:	612b      	str	r3, [r5, #16]
 8015fa6:	e7ed      	b.n	8015f84 <ucdr_serialize_array_uint8_t+0x40>

08015fa8 <ucdr_serialize_endian_array_uint8_t>:
 8015fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fac:	4619      	mov	r1, r3
 8015fae:	461f      	mov	r7, r3
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	4690      	mov	r8, r2
 8015fb4:	f7f5 ffb8 	bl	800bf28 <ucdr_check_buffer_available_for>
 8015fb8:	b9e0      	cbnz	r0, 8015ff4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015fba:	463e      	mov	r6, r7
 8015fbc:	e009      	b.n	8015fd2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015fbe:	68a8      	ldr	r0, [r5, #8]
 8015fc0:	f001 fec3 	bl	8017d4a <memcpy>
 8015fc4:	68ab      	ldr	r3, [r5, #8]
 8015fc6:	6928      	ldr	r0, [r5, #16]
 8015fc8:	4423      	add	r3, r4
 8015fca:	4420      	add	r0, r4
 8015fcc:	1b36      	subs	r6, r6, r4
 8015fce:	60ab      	str	r3, [r5, #8]
 8015fd0:	6128      	str	r0, [r5, #16]
 8015fd2:	4631      	mov	r1, r6
 8015fd4:	2201      	movs	r2, #1
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	f7f6 f82e 	bl	800c038 <ucdr_check_final_buffer_behavior_array>
 8015fdc:	1bb9      	subs	r1, r7, r6
 8015fde:	4441      	add	r1, r8
 8015fe0:	4604      	mov	r4, r0
 8015fe2:	4602      	mov	r2, r0
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d1ea      	bne.n	8015fbe <ucdr_serialize_endian_array_uint8_t+0x16>
 8015fe8:	2301      	movs	r3, #1
 8015fea:	7da8      	ldrb	r0, [r5, #22]
 8015fec:	756b      	strb	r3, [r5, #21]
 8015fee:	4058      	eors	r0, r3
 8015ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ff4:	463a      	mov	r2, r7
 8015ff6:	68a8      	ldr	r0, [r5, #8]
 8015ff8:	4641      	mov	r1, r8
 8015ffa:	f001 fea6 	bl	8017d4a <memcpy>
 8015ffe:	68aa      	ldr	r2, [r5, #8]
 8016000:	692b      	ldr	r3, [r5, #16]
 8016002:	443a      	add	r2, r7
 8016004:	443b      	add	r3, r7
 8016006:	60aa      	str	r2, [r5, #8]
 8016008:	612b      	str	r3, [r5, #16]
 801600a:	e7ed      	b.n	8015fe8 <ucdr_serialize_endian_array_uint8_t+0x40>

0801600c <ucdr_deserialize_array_uint8_t>:
 801600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016010:	4688      	mov	r8, r1
 8016012:	4611      	mov	r1, r2
 8016014:	4617      	mov	r7, r2
 8016016:	4605      	mov	r5, r0
 8016018:	f7f5 ff86 	bl	800bf28 <ucdr_check_buffer_available_for>
 801601c:	b9e0      	cbnz	r0, 8016058 <ucdr_deserialize_array_uint8_t+0x4c>
 801601e:	463e      	mov	r6, r7
 8016020:	e009      	b.n	8016036 <ucdr_deserialize_array_uint8_t+0x2a>
 8016022:	68a9      	ldr	r1, [r5, #8]
 8016024:	f001 fe91 	bl	8017d4a <memcpy>
 8016028:	68aa      	ldr	r2, [r5, #8]
 801602a:	692b      	ldr	r3, [r5, #16]
 801602c:	4422      	add	r2, r4
 801602e:	4423      	add	r3, r4
 8016030:	1b36      	subs	r6, r6, r4
 8016032:	60aa      	str	r2, [r5, #8]
 8016034:	612b      	str	r3, [r5, #16]
 8016036:	2201      	movs	r2, #1
 8016038:	4631      	mov	r1, r6
 801603a:	4628      	mov	r0, r5
 801603c:	f7f5 fffc 	bl	800c038 <ucdr_check_final_buffer_behavior_array>
 8016040:	4604      	mov	r4, r0
 8016042:	1bb8      	subs	r0, r7, r6
 8016044:	4440      	add	r0, r8
 8016046:	4622      	mov	r2, r4
 8016048:	2c00      	cmp	r4, #0
 801604a:	d1ea      	bne.n	8016022 <ucdr_deserialize_array_uint8_t+0x16>
 801604c:	2301      	movs	r3, #1
 801604e:	7da8      	ldrb	r0, [r5, #22]
 8016050:	756b      	strb	r3, [r5, #21]
 8016052:	4058      	eors	r0, r3
 8016054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016058:	463a      	mov	r2, r7
 801605a:	68a9      	ldr	r1, [r5, #8]
 801605c:	4640      	mov	r0, r8
 801605e:	f001 fe74 	bl	8017d4a <memcpy>
 8016062:	68aa      	ldr	r2, [r5, #8]
 8016064:	692b      	ldr	r3, [r5, #16]
 8016066:	443a      	add	r2, r7
 8016068:	443b      	add	r3, r7
 801606a:	60aa      	str	r2, [r5, #8]
 801606c:	612b      	str	r3, [r5, #16]
 801606e:	e7ed      	b.n	801604c <ucdr_deserialize_array_uint8_t+0x40>

08016070 <ucdr_deserialize_endian_array_uint8_t>:
 8016070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016074:	4619      	mov	r1, r3
 8016076:	461f      	mov	r7, r3
 8016078:	4605      	mov	r5, r0
 801607a:	4690      	mov	r8, r2
 801607c:	f7f5 ff54 	bl	800bf28 <ucdr_check_buffer_available_for>
 8016080:	b9e0      	cbnz	r0, 80160bc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8016082:	463e      	mov	r6, r7
 8016084:	e009      	b.n	801609a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016086:	68a9      	ldr	r1, [r5, #8]
 8016088:	f001 fe5f 	bl	8017d4a <memcpy>
 801608c:	68ab      	ldr	r3, [r5, #8]
 801608e:	6928      	ldr	r0, [r5, #16]
 8016090:	4423      	add	r3, r4
 8016092:	4420      	add	r0, r4
 8016094:	1b36      	subs	r6, r6, r4
 8016096:	60ab      	str	r3, [r5, #8]
 8016098:	6128      	str	r0, [r5, #16]
 801609a:	2201      	movs	r2, #1
 801609c:	4631      	mov	r1, r6
 801609e:	4628      	mov	r0, r5
 80160a0:	f7f5 ffca 	bl	800c038 <ucdr_check_final_buffer_behavior_array>
 80160a4:	4604      	mov	r4, r0
 80160a6:	1bb8      	subs	r0, r7, r6
 80160a8:	4440      	add	r0, r8
 80160aa:	4622      	mov	r2, r4
 80160ac:	2c00      	cmp	r4, #0
 80160ae:	d1ea      	bne.n	8016086 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80160b0:	2301      	movs	r3, #1
 80160b2:	7da8      	ldrb	r0, [r5, #22]
 80160b4:	756b      	strb	r3, [r5, #21]
 80160b6:	4058      	eors	r0, r3
 80160b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160bc:	463a      	mov	r2, r7
 80160be:	68a9      	ldr	r1, [r5, #8]
 80160c0:	4640      	mov	r0, r8
 80160c2:	f001 fe42 	bl	8017d4a <memcpy>
 80160c6:	68aa      	ldr	r2, [r5, #8]
 80160c8:	692b      	ldr	r3, [r5, #16]
 80160ca:	443a      	add	r2, r7
 80160cc:	443b      	add	r3, r7
 80160ce:	60aa      	str	r2, [r5, #8]
 80160d0:	612b      	str	r3, [r5, #16]
 80160d2:	e7ed      	b.n	80160b0 <ucdr_deserialize_endian_array_uint8_t+0x40>

080160d4 <ucdr_serialize_sequence_char>:
 80160d4:	b570      	push	{r4, r5, r6, lr}
 80160d6:	4615      	mov	r5, r2
 80160d8:	460e      	mov	r6, r1
 80160da:	7d01      	ldrb	r1, [r0, #20]
 80160dc:	4604      	mov	r4, r0
 80160de:	f7f5 f8e3 	bl	800b2a8 <ucdr_serialize_endian_uint32_t>
 80160e2:	b90d      	cbnz	r5, 80160e8 <ucdr_serialize_sequence_char+0x14>
 80160e4:	2001      	movs	r0, #1
 80160e6:	bd70      	pop	{r4, r5, r6, pc}
 80160e8:	7d21      	ldrb	r1, [r4, #20]
 80160ea:	462b      	mov	r3, r5
 80160ec:	4632      	mov	r2, r6
 80160ee:	4620      	mov	r0, r4
 80160f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160f4:	f7ff bec2 	b.w	8015e7c <ucdr_serialize_endian_array_char>

080160f8 <ucdr_deserialize_sequence_char>:
 80160f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160fc:	461d      	mov	r5, r3
 80160fe:	4616      	mov	r6, r2
 8016100:	460f      	mov	r7, r1
 8016102:	461a      	mov	r2, r3
 8016104:	7d01      	ldrb	r1, [r0, #20]
 8016106:	4604      	mov	r4, r0
 8016108:	f7f5 f9f6 	bl	800b4f8 <ucdr_deserialize_endian_uint32_t>
 801610c:	682b      	ldr	r3, [r5, #0]
 801610e:	429e      	cmp	r6, r3
 8016110:	bf3c      	itt	cc
 8016112:	2201      	movcc	r2, #1
 8016114:	75a2      	strbcc	r2, [r4, #22]
 8016116:	b913      	cbnz	r3, 801611e <ucdr_deserialize_sequence_char+0x26>
 8016118:	2001      	movs	r0, #1
 801611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801611e:	7d21      	ldrb	r1, [r4, #20]
 8016120:	463a      	mov	r2, r7
 8016122:	4620      	mov	r0, r4
 8016124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016128:	f7ff beda 	b.w	8015ee0 <ucdr_deserialize_endian_array_char>

0801612c <ucdr_serialize_sequence_uint8_t>:
 801612c:	b570      	push	{r4, r5, r6, lr}
 801612e:	4615      	mov	r5, r2
 8016130:	460e      	mov	r6, r1
 8016132:	7d01      	ldrb	r1, [r0, #20]
 8016134:	4604      	mov	r4, r0
 8016136:	f7f5 f8b7 	bl	800b2a8 <ucdr_serialize_endian_uint32_t>
 801613a:	b90d      	cbnz	r5, 8016140 <ucdr_serialize_sequence_uint8_t+0x14>
 801613c:	2001      	movs	r0, #1
 801613e:	bd70      	pop	{r4, r5, r6, pc}
 8016140:	7d21      	ldrb	r1, [r4, #20]
 8016142:	462b      	mov	r3, r5
 8016144:	4632      	mov	r2, r6
 8016146:	4620      	mov	r0, r4
 8016148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801614c:	f7ff bf2c 	b.w	8015fa8 <ucdr_serialize_endian_array_uint8_t>

08016150 <ucdr_deserialize_sequence_uint8_t>:
 8016150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016154:	461d      	mov	r5, r3
 8016156:	4616      	mov	r6, r2
 8016158:	460f      	mov	r7, r1
 801615a:	461a      	mov	r2, r3
 801615c:	7d01      	ldrb	r1, [r0, #20]
 801615e:	4604      	mov	r4, r0
 8016160:	f7f5 f9ca 	bl	800b4f8 <ucdr_deserialize_endian_uint32_t>
 8016164:	682b      	ldr	r3, [r5, #0]
 8016166:	429e      	cmp	r6, r3
 8016168:	bf3c      	itt	cc
 801616a:	2201      	movcc	r2, #1
 801616c:	75a2      	strbcc	r2, [r4, #22]
 801616e:	b913      	cbnz	r3, 8016176 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016170:	2001      	movs	r0, #1
 8016172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016176:	7d21      	ldrb	r1, [r4, #20]
 8016178:	463a      	mov	r2, r7
 801617a:	4620      	mov	r0, r4
 801617c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016180:	f7ff bf76 	b.w	8016070 <ucdr_deserialize_endian_array_uint8_t>

08016184 <ucdr_serialize_string>:
 8016184:	b510      	push	{r4, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	4604      	mov	r4, r0
 801618a:	4608      	mov	r0, r1
 801618c:	9101      	str	r1, [sp, #4]
 801618e:	f7ea f851 	bl	8000234 <strlen>
 8016192:	9901      	ldr	r1, [sp, #4]
 8016194:	1c42      	adds	r2, r0, #1
 8016196:	4620      	mov	r0, r4
 8016198:	b002      	add	sp, #8
 801619a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801619e:	f7ff bf99 	b.w	80160d4 <ucdr_serialize_sequence_char>
 80161a2:	bf00      	nop

080161a4 <ucdr_deserialize_string>:
 80161a4:	b500      	push	{lr}
 80161a6:	b083      	sub	sp, #12
 80161a8:	ab01      	add	r3, sp, #4
 80161aa:	f7ff ffa5 	bl	80160f8 <ucdr_deserialize_sequence_char>
 80161ae:	b003      	add	sp, #12
 80161b0:	f85d fb04 	ldr.w	pc, [sp], #4

080161b4 <uxr_init_input_best_effort_stream>:
 80161b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80161b8:	8003      	strh	r3, [r0, #0]
 80161ba:	4770      	bx	lr

080161bc <uxr_reset_input_best_effort_stream>:
 80161bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80161c0:	8003      	strh	r3, [r0, #0]
 80161c2:	4770      	bx	lr

080161c4 <uxr_receive_best_effort_message>:
 80161c4:	b538      	push	{r3, r4, r5, lr}
 80161c6:	4604      	mov	r4, r0
 80161c8:	8800      	ldrh	r0, [r0, #0]
 80161ca:	460d      	mov	r5, r1
 80161cc:	f000 fd42 	bl	8016c54 <uxr_seq_num_cmp>
 80161d0:	4603      	mov	r3, r0
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80161d8:	bfb8      	it	lt
 80161da:	8025      	strhlt	r5, [r4, #0]
 80161dc:	bd38      	pop	{r3, r4, r5, pc}
 80161de:	bf00      	nop

080161e0 <on_full_input_buffer>:
 80161e0:	b570      	push	{r4, r5, r6, lr}
 80161e2:	4605      	mov	r5, r0
 80161e4:	460c      	mov	r4, r1
 80161e6:	682b      	ldr	r3, [r5, #0]
 80161e8:	6809      	ldr	r1, [r1, #0]
 80161ea:	8920      	ldrh	r0, [r4, #8]
 80161ec:	6862      	ldr	r2, [r4, #4]
 80161ee:	fbb2 f2f0 	udiv	r2, r2, r0
 80161f2:	eba3 0c01 	sub.w	ip, r3, r1
 80161f6:	fbbc fcf2 	udiv	ip, ip, r2
 80161fa:	f10c 0c01 	add.w	ip, ip, #1
 80161fe:	fa1f f38c 	uxth.w	r3, ip
 8016202:	fbb3 f6f0 	udiv	r6, r3, r0
 8016206:	fb00 3316 	mls	r3, r0, r6, r3
 801620a:	b29b      	uxth	r3, r3
 801620c:	fb02 f303 	mul.w	r3, r2, r3
 8016210:	1d18      	adds	r0, r3, #4
 8016212:	4408      	add	r0, r1
 8016214:	7d26      	ldrb	r6, [r4, #20]
 8016216:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801621a:	b116      	cbz	r6, 8016222 <on_full_input_buffer+0x42>
 801621c:	2600      	movs	r6, #0
 801621e:	f840 6c04 	str.w	r6, [r0, #-4]
 8016222:	2a03      	cmp	r2, #3
 8016224:	d801      	bhi.n	801622a <on_full_input_buffer+0x4a>
 8016226:	2001      	movs	r0, #1
 8016228:	bd70      	pop	{r4, r5, r6, pc}
 801622a:	3308      	adds	r3, #8
 801622c:	4419      	add	r1, r3
 801622e:	4628      	mov	r0, r5
 8016230:	692b      	ldr	r3, [r5, #16]
 8016232:	3a04      	subs	r2, #4
 8016234:	f7f5 fec4 	bl	800bfc0 <ucdr_init_buffer_origin>
 8016238:	4628      	mov	r0, r5
 801623a:	4903      	ldr	r1, [pc, #12]	@ (8016248 <on_full_input_buffer+0x68>)
 801623c:	4622      	mov	r2, r4
 801623e:	f7f5 fe9b 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 8016242:	2000      	movs	r0, #0
 8016244:	bd70      	pop	{r4, r5, r6, pc}
 8016246:	bf00      	nop
 8016248:	080161e1 	.word	0x080161e1

0801624c <uxr_init_input_reliable_stream>:
 801624c:	b500      	push	{lr}
 801624e:	e9c0 1200 	strd	r1, r2, [r0]
 8016252:	f04f 0e00 	mov.w	lr, #0
 8016256:	9a01      	ldr	r2, [sp, #4]
 8016258:	8103      	strh	r3, [r0, #8]
 801625a:	6102      	str	r2, [r0, #16]
 801625c:	f880 e014 	strb.w	lr, [r0, #20]
 8016260:	b1d3      	cbz	r3, 8016298 <uxr_init_input_reliable_stream+0x4c>
 8016262:	f8c1 e000 	str.w	lr, [r1]
 8016266:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801626a:	f1bc 0f01 	cmp.w	ip, #1
 801626e:	d913      	bls.n	8016298 <uxr_init_input_reliable_stream+0x4c>
 8016270:	2301      	movs	r3, #1
 8016272:	fbb3 f1fc 	udiv	r1, r3, ip
 8016276:	fb0c 3111 	mls	r1, ip, r1, r3
 801627a:	b289      	uxth	r1, r1
 801627c:	6842      	ldr	r2, [r0, #4]
 801627e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016282:	fb01 f202 	mul.w	r2, r1, r2
 8016286:	6801      	ldr	r1, [r0, #0]
 8016288:	f841 e002 	str.w	lr, [r1, r2]
 801628c:	3301      	adds	r3, #1
 801628e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016292:	b29b      	uxth	r3, r3
 8016294:	459c      	cmp	ip, r3
 8016296:	d8ec      	bhi.n	8016272 <uxr_init_input_reliable_stream+0x26>
 8016298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801629c:	60c3      	str	r3, [r0, #12]
 801629e:	f85d fb04 	ldr.w	pc, [sp], #4
 80162a2:	bf00      	nop

080162a4 <uxr_reset_input_reliable_stream>:
 80162a4:	8901      	ldrh	r1, [r0, #8]
 80162a6:	b1e9      	cbz	r1, 80162e4 <uxr_reset_input_reliable_stream+0x40>
 80162a8:	f04f 0c00 	mov.w	ip, #0
 80162ac:	b500      	push	{lr}
 80162ae:	4663      	mov	r3, ip
 80162b0:	46e6      	mov	lr, ip
 80162b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80162b6:	fb01 3312 	mls	r3, r1, r2, r3
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	6842      	ldr	r2, [r0, #4]
 80162be:	fbb2 f2f1 	udiv	r2, r2, r1
 80162c2:	fb02 f303 	mul.w	r3, r2, r3
 80162c6:	6802      	ldr	r2, [r0, #0]
 80162c8:	f842 e003 	str.w	lr, [r2, r3]
 80162cc:	f10c 0c01 	add.w	ip, ip, #1
 80162d0:	8901      	ldrh	r1, [r0, #8]
 80162d2:	fa1f f38c 	uxth.w	r3, ip
 80162d6:	4299      	cmp	r1, r3
 80162d8:	d8eb      	bhi.n	80162b2 <uxr_reset_input_reliable_stream+0xe>
 80162da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162de:	60c3      	str	r3, [r0, #12]
 80162e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80162e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162e8:	60c3      	str	r3, [r0, #12]
 80162ea:	4770      	bx	lr

080162ec <uxr_receive_reliable_message>:
 80162ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162f0:	4604      	mov	r4, r0
 80162f2:	460d      	mov	r5, r1
 80162f4:	8901      	ldrh	r1, [r0, #8]
 80162f6:	8980      	ldrh	r0, [r0, #12]
 80162f8:	4690      	mov	r8, r2
 80162fa:	461f      	mov	r7, r3
 80162fc:	f000 fca2 	bl	8016c44 <uxr_seq_num_add>
 8016300:	4629      	mov	r1, r5
 8016302:	4606      	mov	r6, r0
 8016304:	89a0      	ldrh	r0, [r4, #12]
 8016306:	f000 fca5 	bl	8016c54 <uxr_seq_num_cmp>
 801630a:	2800      	cmp	r0, #0
 801630c:	db0a      	blt.n	8016324 <uxr_receive_reliable_message+0x38>
 801630e:	2600      	movs	r6, #0
 8016310:	89e0      	ldrh	r0, [r4, #14]
 8016312:	4629      	mov	r1, r5
 8016314:	f000 fc9e 	bl	8016c54 <uxr_seq_num_cmp>
 8016318:	2800      	cmp	r0, #0
 801631a:	da00      	bge.n	801631e <uxr_receive_reliable_message+0x32>
 801631c:	81e5      	strh	r5, [r4, #14]
 801631e:	4630      	mov	r0, r6
 8016320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016324:	4630      	mov	r0, r6
 8016326:	4629      	mov	r1, r5
 8016328:	f000 fc94 	bl	8016c54 <uxr_seq_num_cmp>
 801632c:	2800      	cmp	r0, #0
 801632e:	dbee      	blt.n	801630e <uxr_receive_reliable_message+0x22>
 8016330:	6923      	ldr	r3, [r4, #16]
 8016332:	4640      	mov	r0, r8
 8016334:	4798      	blx	r3
 8016336:	2101      	movs	r1, #1
 8016338:	4681      	mov	r9, r0
 801633a:	89a0      	ldrh	r0, [r4, #12]
 801633c:	f000 fc82 	bl	8016c44 <uxr_seq_num_add>
 8016340:	f1b9 0f00 	cmp.w	r9, #0
 8016344:	d101      	bne.n	801634a <uxr_receive_reliable_message+0x5e>
 8016346:	4285      	cmp	r5, r0
 8016348:	d047      	beq.n	80163da <uxr_receive_reliable_message+0xee>
 801634a:	8922      	ldrh	r2, [r4, #8]
 801634c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016350:	fb02 5010 	mls	r0, r2, r0, r5
 8016354:	b280      	uxth	r0, r0
 8016356:	6863      	ldr	r3, [r4, #4]
 8016358:	fbb3 f3f2 	udiv	r3, r3, r2
 801635c:	fb00 f303 	mul.w	r3, r0, r3
 8016360:	6820      	ldr	r0, [r4, #0]
 8016362:	3304      	adds	r3, #4
 8016364:	4418      	add	r0, r3
 8016366:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d1cf      	bne.n	801630e <uxr_receive_reliable_message+0x22>
 801636e:	4641      	mov	r1, r8
 8016370:	463a      	mov	r2, r7
 8016372:	f001 fcea 	bl	8017d4a <memcpy>
 8016376:	8921      	ldrh	r1, [r4, #8]
 8016378:	fbb5 f2f1 	udiv	r2, r5, r1
 801637c:	fb01 5212 	mls	r2, r1, r2, r5
 8016380:	b292      	uxth	r2, r2
 8016382:	6863      	ldr	r3, [r4, #4]
 8016384:	fbb3 f3f1 	udiv	r3, r3, r1
 8016388:	fb02 f303 	mul.w	r3, r2, r3
 801638c:	6822      	ldr	r2, [r4, #0]
 801638e:	50d7      	str	r7, [r2, r3]
 8016390:	9a08      	ldr	r2, [sp, #32]
 8016392:	2301      	movs	r3, #1
 8016394:	7013      	strb	r3, [r2, #0]
 8016396:	f1b9 0f00 	cmp.w	r9, #0
 801639a:	d0b8      	beq.n	801630e <uxr_receive_reliable_message+0x22>
 801639c:	89a6      	ldrh	r6, [r4, #12]
 801639e:	4630      	mov	r0, r6
 80163a0:	2101      	movs	r1, #1
 80163a2:	f000 fc4f 	bl	8016c44 <uxr_seq_num_add>
 80163a6:	8922      	ldrh	r2, [r4, #8]
 80163a8:	6863      	ldr	r3, [r4, #4]
 80163aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80163ae:	4606      	mov	r6, r0
 80163b0:	fbb0 f0f2 	udiv	r0, r0, r2
 80163b4:	fb02 6010 	mls	r0, r2, r0, r6
 80163b8:	b280      	uxth	r0, r0
 80163ba:	fb00 f303 	mul.w	r3, r0, r3
 80163be:	6820      	ldr	r0, [r4, #0]
 80163c0:	3304      	adds	r3, #4
 80163c2:	4418      	add	r0, r3
 80163c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d0a0      	beq.n	801630e <uxr_receive_reliable_message+0x22>
 80163cc:	6923      	ldr	r3, [r4, #16]
 80163ce:	4798      	blx	r3
 80163d0:	2802      	cmp	r0, #2
 80163d2:	d008      	beq.n	80163e6 <uxr_receive_reliable_message+0xfa>
 80163d4:	2801      	cmp	r0, #1
 80163d6:	d0e2      	beq.n	801639e <uxr_receive_reliable_message+0xb2>
 80163d8:	e799      	b.n	801630e <uxr_receive_reliable_message+0x22>
 80163da:	9b08      	ldr	r3, [sp, #32]
 80163dc:	81a5      	strh	r5, [r4, #12]
 80163de:	2601      	movs	r6, #1
 80163e0:	f883 9000 	strb.w	r9, [r3]
 80163e4:	e794      	b.n	8016310 <uxr_receive_reliable_message+0x24>
 80163e6:	2601      	movs	r6, #1
 80163e8:	e792      	b.n	8016310 <uxr_receive_reliable_message+0x24>
 80163ea:	bf00      	nop

080163ec <uxr_next_input_reliable_buffer_available>:
 80163ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f0:	4604      	mov	r4, r0
 80163f2:	460f      	mov	r7, r1
 80163f4:	8980      	ldrh	r0, [r0, #12]
 80163f6:	2101      	movs	r1, #1
 80163f8:	4690      	mov	r8, r2
 80163fa:	f000 fc23 	bl	8016c44 <uxr_seq_num_add>
 80163fe:	8922      	ldrh	r2, [r4, #8]
 8016400:	fbb0 f6f2 	udiv	r6, r0, r2
 8016404:	fb02 0616 	mls	r6, r2, r6, r0
 8016408:	b2b6      	uxth	r6, r6
 801640a:	6863      	ldr	r3, [r4, #4]
 801640c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016410:	fb06 f303 	mul.w	r3, r6, r3
 8016414:	6826      	ldr	r6, [r4, #0]
 8016416:	3304      	adds	r3, #4
 8016418:	441e      	add	r6, r3
 801641a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801641e:	f1b9 0f00 	cmp.w	r9, #0
 8016422:	d023      	beq.n	801646c <uxr_next_input_reliable_buffer_available+0x80>
 8016424:	6923      	ldr	r3, [r4, #16]
 8016426:	4605      	mov	r5, r0
 8016428:	4630      	mov	r0, r6
 801642a:	4798      	blx	r3
 801642c:	4682      	mov	sl, r0
 801642e:	b300      	cbz	r0, 8016472 <uxr_next_input_reliable_buffer_available+0x86>
 8016430:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016434:	2101      	movs	r1, #1
 8016436:	4650      	mov	r0, sl
 8016438:	f000 fc04 	bl	8016c44 <uxr_seq_num_add>
 801643c:	8921      	ldrh	r1, [r4, #8]
 801643e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016442:	4682      	mov	sl, r0
 8016444:	fb01 0212 	mls	r2, r1, r2, r0
 8016448:	e9d4 0300 	ldrd	r0, r3, [r4]
 801644c:	b292      	uxth	r2, r2
 801644e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016452:	fb02 f303 	mul.w	r3, r2, r3
 8016456:	3304      	adds	r3, #4
 8016458:	4418      	add	r0, r3
 801645a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801645e:	b12b      	cbz	r3, 801646c <uxr_next_input_reliable_buffer_available+0x80>
 8016460:	6923      	ldr	r3, [r4, #16]
 8016462:	4798      	blx	r3
 8016464:	2802      	cmp	r0, #2
 8016466:	d01b      	beq.n	80164a0 <uxr_next_input_reliable_buffer_available+0xb4>
 8016468:	2801      	cmp	r0, #1
 801646a:	d0e3      	beq.n	8016434 <uxr_next_input_reliable_buffer_available+0x48>
 801646c:	2000      	movs	r0, #0
 801646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016472:	464a      	mov	r2, r9
 8016474:	4631      	mov	r1, r6
 8016476:	4638      	mov	r0, r7
 8016478:	f7f5 fdaa 	bl	800bfd0 <ucdr_init_buffer>
 801647c:	8921      	ldrh	r1, [r4, #8]
 801647e:	fbb5 f2f1 	udiv	r2, r5, r1
 8016482:	fb01 5212 	mls	r2, r1, r2, r5
 8016486:	b292      	uxth	r2, r2
 8016488:	6863      	ldr	r3, [r4, #4]
 801648a:	fbb3 f3f1 	udiv	r3, r3, r1
 801648e:	fb02 f303 	mul.w	r3, r2, r3
 8016492:	6822      	ldr	r2, [r4, #0]
 8016494:	f842 a003 	str.w	sl, [r2, r3]
 8016498:	2001      	movs	r0, #1
 801649a:	81a5      	strh	r5, [r4, #12]
 801649c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164a0:	8920      	ldrh	r0, [r4, #8]
 80164a2:	fbb5 f3f0 	udiv	r3, r5, r0
 80164a6:	fb00 5513 	mls	r5, r0, r3, r5
 80164aa:	b2ad      	uxth	r5, r5
 80164ac:	6863      	ldr	r3, [r4, #4]
 80164ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80164b2:	fb03 f505 	mul.w	r5, r3, r5
 80164b6:	6823      	ldr	r3, [r4, #0]
 80164b8:	2000      	movs	r0, #0
 80164ba:	5158      	str	r0, [r3, r5]
 80164bc:	eb06 0108 	add.w	r1, r6, r8
 80164c0:	eba9 0208 	sub.w	r2, r9, r8
 80164c4:	4638      	mov	r0, r7
 80164c6:	f7f5 fd83 	bl	800bfd0 <ucdr_init_buffer>
 80164ca:	4638      	mov	r0, r7
 80164cc:	4903      	ldr	r1, [pc, #12]	@ (80164dc <uxr_next_input_reliable_buffer_available+0xf0>)
 80164ce:	4622      	mov	r2, r4
 80164d0:	f7f5 fd52 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 80164d4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80164d8:	2001      	movs	r0, #1
 80164da:	e7c8      	b.n	801646e <uxr_next_input_reliable_buffer_available+0x82>
 80164dc:	080161e1 	.word	0x080161e1

080164e0 <uxr_process_heartbeat>:
 80164e0:	b538      	push	{r3, r4, r5, lr}
 80164e2:	4611      	mov	r1, r2
 80164e4:	4604      	mov	r4, r0
 80164e6:	89c0      	ldrh	r0, [r0, #14]
 80164e8:	4615      	mov	r5, r2
 80164ea:	f000 fbb3 	bl	8016c54 <uxr_seq_num_cmp>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	bfb8      	it	lt
 80164f2:	81e5      	strhlt	r5, [r4, #14]
 80164f4:	bd38      	pop	{r3, r4, r5, pc}
 80164f6:	bf00      	nop

080164f8 <uxr_compute_acknack>:
 80164f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164fc:	8903      	ldrh	r3, [r0, #8]
 80164fe:	8985      	ldrh	r5, [r0, #12]
 8016500:	4604      	mov	r4, r0
 8016502:	460e      	mov	r6, r1
 8016504:	b1d3      	cbz	r3, 801653c <uxr_compute_acknack+0x44>
 8016506:	4628      	mov	r0, r5
 8016508:	2701      	movs	r7, #1
 801650a:	e003      	b.n	8016514 <uxr_compute_acknack+0x1c>
 801650c:	4567      	cmp	r7, ip
 801650e:	d215      	bcs.n	801653c <uxr_compute_acknack+0x44>
 8016510:	89a0      	ldrh	r0, [r4, #12]
 8016512:	3701      	adds	r7, #1
 8016514:	b2b9      	uxth	r1, r7
 8016516:	f000 fb95 	bl	8016c44 <uxr_seq_num_add>
 801651a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801651e:	fbb0 f3fc 	udiv	r3, r0, ip
 8016522:	fb0c 0313 	mls	r3, ip, r3, r0
 8016526:	b29a      	uxth	r2, r3
 8016528:	e9d4 1300 	ldrd	r1, r3, [r4]
 801652c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016530:	fb02 f303 	mul.w	r3, r2, r3
 8016534:	58cb      	ldr	r3, [r1, r3]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d1e8      	bne.n	801650c <uxr_compute_acknack+0x14>
 801653a:	4605      	mov	r5, r0
 801653c:	8035      	strh	r5, [r6, #0]
 801653e:	2101      	movs	r1, #1
 8016540:	4628      	mov	r0, r5
 8016542:	89e7      	ldrh	r7, [r4, #14]
 8016544:	f000 fb82 	bl	8016c4c <uxr_seq_num_sub>
 8016548:	4601      	mov	r1, r0
 801654a:	4638      	mov	r0, r7
 801654c:	f000 fb7e 	bl	8016c4c <uxr_seq_num_sub>
 8016550:	4605      	mov	r5, r0
 8016552:	b318      	cbz	r0, 801659c <uxr_compute_acknack+0xa4>
 8016554:	f04f 0900 	mov.w	r9, #0
 8016558:	464f      	mov	r7, r9
 801655a:	f04f 0801 	mov.w	r8, #1
 801655e:	fa1f f189 	uxth.w	r1, r9
 8016562:	8830      	ldrh	r0, [r6, #0]
 8016564:	f000 fb6e 	bl	8016c44 <uxr_seq_num_add>
 8016568:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801656c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016570:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016574:	fb03 001c 	mls	r0, r3, ip, r0
 8016578:	b283      	uxth	r3, r0
 801657a:	fbb2 f2fc 	udiv	r2, r2, ip
 801657e:	fb02 f303 	mul.w	r3, r2, r3
 8016582:	fa08 f209 	lsl.w	r2, r8, r9
 8016586:	58cb      	ldr	r3, [r1, r3]
 8016588:	f109 0901 	add.w	r9, r9, #1
 801658c:	b90b      	cbnz	r3, 8016592 <uxr_compute_acknack+0x9a>
 801658e:	4317      	orrs	r7, r2
 8016590:	b2bf      	uxth	r7, r7
 8016592:	454d      	cmp	r5, r9
 8016594:	d1e3      	bne.n	801655e <uxr_compute_acknack+0x66>
 8016596:	4638      	mov	r0, r7
 8016598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801659c:	4607      	mov	r7, r0
 801659e:	4638      	mov	r0, r7
 80165a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080165a4 <uxr_init_output_best_effort_stream>:
 80165a4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80165a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80165ac:	6001      	str	r1, [r0, #0]
 80165ae:	7303      	strb	r3, [r0, #12]
 80165b0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80165b4:	4770      	bx	lr
 80165b6:	bf00      	nop

080165b8 <uxr_reset_output_best_effort_stream>:
 80165b8:	7b02      	ldrb	r2, [r0, #12]
 80165ba:	6042      	str	r2, [r0, #4]
 80165bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80165c0:	81c3      	strh	r3, [r0, #14]
 80165c2:	4770      	bx	lr

080165c4 <uxr_prepare_best_effort_buffer_to_write>:
 80165c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165c6:	4604      	mov	r4, r0
 80165c8:	b083      	sub	sp, #12
 80165ca:	6840      	ldr	r0, [r0, #4]
 80165cc:	460d      	mov	r5, r1
 80165ce:	4616      	mov	r6, r2
 80165d0:	f7fa fafc 	bl	8010bcc <uxr_submessage_padding>
 80165d4:	6863      	ldr	r3, [r4, #4]
 80165d6:	4418      	add	r0, r3
 80165d8:	68a3      	ldr	r3, [r4, #8]
 80165da:	1942      	adds	r2, r0, r5
 80165dc:	4293      	cmp	r3, r2
 80165de:	bf2c      	ite	cs
 80165e0:	2701      	movcs	r7, #1
 80165e2:	2700      	movcc	r7, #0
 80165e4:	d202      	bcs.n	80165ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80165e6:	4638      	mov	r0, r7
 80165e8:	b003      	add	sp, #12
 80165ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ec:	9000      	str	r0, [sp, #0]
 80165ee:	6821      	ldr	r1, [r4, #0]
 80165f0:	4630      	mov	r0, r6
 80165f2:	2300      	movs	r3, #0
 80165f4:	f7f5 fcda 	bl	800bfac <ucdr_init_buffer_origin_offset>
 80165f8:	6861      	ldr	r1, [r4, #4]
 80165fa:	4638      	mov	r0, r7
 80165fc:	4429      	add	r1, r5
 80165fe:	6061      	str	r1, [r4, #4]
 8016600:	b003      	add	sp, #12
 8016602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016604 <uxr_prepare_best_effort_buffer_to_send>:
 8016604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016608:	4604      	mov	r4, r0
 801660a:	461d      	mov	r5, r3
 801660c:	6840      	ldr	r0, [r0, #4]
 801660e:	7b23      	ldrb	r3, [r4, #12]
 8016610:	4298      	cmp	r0, r3
 8016612:	bf8c      	ite	hi
 8016614:	2601      	movhi	r6, #1
 8016616:	2600      	movls	r6, #0
 8016618:	d802      	bhi.n	8016620 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801661a:	4630      	mov	r0, r6
 801661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016620:	4688      	mov	r8, r1
 8016622:	89e0      	ldrh	r0, [r4, #14]
 8016624:	2101      	movs	r1, #1
 8016626:	4617      	mov	r7, r2
 8016628:	f000 fb0c 	bl	8016c44 <uxr_seq_num_add>
 801662c:	6823      	ldr	r3, [r4, #0]
 801662e:	81e0      	strh	r0, [r4, #14]
 8016630:	8028      	strh	r0, [r5, #0]
 8016632:	f8c8 3000 	str.w	r3, [r8]
 8016636:	6863      	ldr	r3, [r4, #4]
 8016638:	603b      	str	r3, [r7, #0]
 801663a:	7b23      	ldrb	r3, [r4, #12]
 801663c:	6063      	str	r3, [r4, #4]
 801663e:	4630      	mov	r0, r6
 8016640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016644 <on_full_output_buffer>:
 8016644:	b538      	push	{r3, r4, r5, lr}
 8016646:	6802      	ldr	r2, [r0, #0]
 8016648:	460c      	mov	r4, r1
 801664a:	6809      	ldr	r1, [r1, #0]
 801664c:	8923      	ldrh	r3, [r4, #8]
 801664e:	eba2 0c01 	sub.w	ip, r2, r1
 8016652:	6862      	ldr	r2, [r4, #4]
 8016654:	fbb2 f2f3 	udiv	r2, r2, r3
 8016658:	fbbc fcf2 	udiv	ip, ip, r2
 801665c:	f10c 0c01 	add.w	ip, ip, #1
 8016660:	fa1f fc8c 	uxth.w	ip, ip
 8016664:	fbbc fef3 	udiv	lr, ip, r3
 8016668:	fb03 c31e 	mls	r3, r3, lr, ip
 801666c:	b29b      	uxth	r3, r3
 801666e:	fb02 f303 	mul.w	r3, r2, r3
 8016672:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016676:	58ca      	ldr	r2, [r1, r3]
 8016678:	4463      	add	r3, ip
 801667a:	eba2 020c 	sub.w	r2, r2, ip
 801667e:	3308      	adds	r3, #8
 8016680:	4605      	mov	r5, r0
 8016682:	4419      	add	r1, r3
 8016684:	3a04      	subs	r2, #4
 8016686:	6903      	ldr	r3, [r0, #16]
 8016688:	f7f5 fc9a 	bl	800bfc0 <ucdr_init_buffer_origin>
 801668c:	4628      	mov	r0, r5
 801668e:	4903      	ldr	r1, [pc, #12]	@ (801669c <on_full_output_buffer+0x58>)
 8016690:	4622      	mov	r2, r4
 8016692:	f7f5 fc71 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 8016696:	2000      	movs	r0, #0
 8016698:	bd38      	pop	{r3, r4, r5, pc}
 801669a:	bf00      	nop
 801669c:	08016645 	.word	0x08016645

080166a0 <uxr_init_output_reliable_stream>:
 80166a0:	b410      	push	{r4}
 80166a2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80166a6:	8103      	strh	r3, [r0, #8]
 80166a8:	e9c0 1200 	strd	r1, r2, [r0]
 80166ac:	f880 c00c 	strb.w	ip, [r0, #12]
 80166b0:	b1d3      	cbz	r3, 80166e8 <uxr_init_output_reliable_stream+0x48>
 80166b2:	f8c1 c000 	str.w	ip, [r1]
 80166b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80166ba:	f1bc 0f01 	cmp.w	ip, #1
 80166be:	d913      	bls.n	80166e8 <uxr_init_output_reliable_stream+0x48>
 80166c0:	2301      	movs	r3, #1
 80166c2:	fbb3 f1fc 	udiv	r1, r3, ip
 80166c6:	fb0c 3111 	mls	r1, ip, r1, r3
 80166ca:	b289      	uxth	r1, r1
 80166cc:	6842      	ldr	r2, [r0, #4]
 80166ce:	6804      	ldr	r4, [r0, #0]
 80166d0:	fbb2 f2fc 	udiv	r2, r2, ip
 80166d4:	fb01 f202 	mul.w	r2, r1, r2
 80166d8:	7b01      	ldrb	r1, [r0, #12]
 80166da:	50a1      	str	r1, [r4, r2]
 80166dc:	3301      	adds	r3, #1
 80166de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80166e2:	b29b      	uxth	r3, r3
 80166e4:	459c      	cmp	ip, r3
 80166e6:	d8ec      	bhi.n	80166c2 <uxr_init_output_reliable_stream+0x22>
 80166e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80166ec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80166f0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80166f4:	4905      	ldr	r1, [pc, #20]	@ (801670c <uxr_init_output_reliable_stream+0x6c>)
 80166f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166fa:	f8c0 100e 	str.w	r1, [r0, #14]
 80166fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016702:	2300      	movs	r3, #0
 8016704:	8242      	strh	r2, [r0, #18]
 8016706:	8403      	strh	r3, [r0, #32]
 8016708:	4770      	bx	lr
 801670a:	bf00      	nop
 801670c:	ffff0000 	.word	0xffff0000

08016710 <uxr_reset_output_reliable_stream>:
 8016710:	8901      	ldrh	r1, [r0, #8]
 8016712:	b1b1      	cbz	r1, 8016742 <uxr_reset_output_reliable_stream+0x32>
 8016714:	f04f 0c00 	mov.w	ip, #0
 8016718:	4663      	mov	r3, ip
 801671a:	fbb3 f2f1 	udiv	r2, r3, r1
 801671e:	fb01 3312 	mls	r3, r1, r2, r3
 8016722:	b29b      	uxth	r3, r3
 8016724:	6842      	ldr	r2, [r0, #4]
 8016726:	fbb2 f2f1 	udiv	r2, r2, r1
 801672a:	6801      	ldr	r1, [r0, #0]
 801672c:	fb02 f303 	mul.w	r3, r2, r3
 8016730:	7b02      	ldrb	r2, [r0, #12]
 8016732:	50ca      	str	r2, [r1, r3]
 8016734:	f10c 0c01 	add.w	ip, ip, #1
 8016738:	8901      	ldrh	r1, [r0, #8]
 801673a:	fa1f f38c 	uxth.w	r3, ip
 801673e:	4299      	cmp	r1, r3
 8016740:	d8eb      	bhi.n	801671a <uxr_reset_output_reliable_stream+0xa>
 8016742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016746:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801674a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801674e:	4904      	ldr	r1, [pc, #16]	@ (8016760 <uxr_reset_output_reliable_stream+0x50>)
 8016750:	f8c0 100e 	str.w	r1, [r0, #14]
 8016754:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016758:	2300      	movs	r3, #0
 801675a:	8242      	strh	r2, [r0, #18]
 801675c:	8403      	strh	r3, [r0, #32]
 801675e:	4770      	bx	lr
 8016760:	ffff0000 	.word	0xffff0000

08016764 <uxr_prepare_reliable_buffer_to_write>:
 8016764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016768:	4604      	mov	r4, r0
 801676a:	b091      	sub	sp, #68	@ 0x44
 801676c:	8900      	ldrh	r0, [r0, #8]
 801676e:	89e6      	ldrh	r6, [r4, #14]
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	9204      	str	r2, [sp, #16]
 8016774:	fbb6 f2f0 	udiv	r2, r6, r0
 8016778:	fb00 6212 	mls	r2, r0, r2, r6
 801677c:	b292      	uxth	r2, r2
 801677e:	6865      	ldr	r5, [r4, #4]
 8016780:	fbb5 f5f0 	udiv	r5, r5, r0
 8016784:	fb05 3202 	mla	r2, r5, r2, r3
 8016788:	3204      	adds	r2, #4
 801678a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801678e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016792:	9203      	str	r2, [sp, #12]
 8016794:	468b      	mov	fp, r1
 8016796:	1f2f      	subs	r7, r5, #4
 8016798:	2800      	cmp	r0, #0
 801679a:	f000 814c 	beq.w	8016a36 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801679e:	f04f 0c00 	mov.w	ip, #0
 80167a2:	46e2      	mov	sl, ip
 80167a4:	4661      	mov	r1, ip
 80167a6:	fbb1 f2f0 	udiv	r2, r1, r0
 80167aa:	fb00 1212 	mls	r2, r0, r2, r1
 80167ae:	b292      	uxth	r2, r2
 80167b0:	fb05 f202 	mul.w	r2, r5, r2
 80167b4:	f10c 0c01 	add.w	ip, ip, #1
 80167b8:	589a      	ldr	r2, [r3, r2]
 80167ba:	454a      	cmp	r2, r9
 80167bc:	bf08      	it	eq
 80167be:	f10a 0a01 	addeq.w	sl, sl, #1
 80167c2:	fa1f f18c 	uxth.w	r1, ip
 80167c6:	bf08      	it	eq
 80167c8:	fa1f fa8a 	uxtheq.w	sl, sl
 80167cc:	4281      	cmp	r1, r0
 80167ce:	d3ea      	bcc.n	80167a6 <uxr_prepare_reliable_buffer_to_write+0x42>
 80167d0:	4640      	mov	r0, r8
 80167d2:	2104      	movs	r1, #4
 80167d4:	f8cd a014 	str.w	sl, [sp, #20]
 80167d8:	f7f5 fbfe 	bl	800bfd8 <ucdr_alignment>
 80167dc:	4480      	add	r8, r0
 80167de:	eb08 020b 	add.w	r2, r8, fp
 80167e2:	42ba      	cmp	r2, r7
 80167e4:	f240 80cd 	bls.w	8016982 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80167e8:	7b22      	ldrb	r2, [r4, #12]
 80167ea:	445a      	add	r2, fp
 80167ec:	42ba      	cmp	r2, r7
 80167ee:	f240 80b5 	bls.w	801695c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80167f2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80167f6:	33fc      	adds	r3, #252	@ 0xfc
 80167f8:	b2ba      	uxth	r2, r7
 80167fa:	4413      	add	r3, r2
 80167fc:	b29b      	uxth	r3, r3
 80167fe:	fb0a f903 	mul.w	r9, sl, r3
 8016802:	45d9      	cmp	r9, fp
 8016804:	9305      	str	r3, [sp, #20]
 8016806:	9306      	str	r3, [sp, #24]
 8016808:	f0c0 80b7 	bcc.w	801697a <uxr_prepare_reliable_buffer_to_write+0x216>
 801680c:	f108 0304 	add.w	r3, r8, #4
 8016810:	42bb      	cmp	r3, r7
 8016812:	f080 80db 	bcs.w	80169cc <uxr_prepare_reliable_buffer_to_write+0x268>
 8016816:	f1a2 0904 	sub.w	r9, r2, #4
 801681a:	eba9 0908 	sub.w	r9, r9, r8
 801681e:	9b05      	ldr	r3, [sp, #20]
 8016820:	fa1f f989 	uxth.w	r9, r9
 8016824:	ebab 0b09 	sub.w	fp, fp, r9
 8016828:	fbbb f2f3 	udiv	r2, fp, r3
 801682c:	fb03 b312 	mls	r3, r3, r2, fp
 8016830:	2b00      	cmp	r3, #0
 8016832:	f000 80c8 	beq.w	80169c6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016836:	3201      	adds	r2, #1
 8016838:	b292      	uxth	r2, r2
 801683a:	9306      	str	r3, [sp, #24]
 801683c:	4552      	cmp	r2, sl
 801683e:	f200 809c 	bhi.w	801697a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016842:	f10d 0b20 	add.w	fp, sp, #32
 8016846:	2a00      	cmp	r2, #0
 8016848:	d042      	beq.n	80168d0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801684a:	f8cd 801c 	str.w	r8, [sp, #28]
 801684e:	f04f 0a00 	mov.w	sl, #0
 8016852:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016856:	9505      	str	r5, [sp, #20]
 8016858:	f10d 0b20 	add.w	fp, sp, #32
 801685c:	4615      	mov	r5, r2
 801685e:	e000      	b.n	8016862 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016860:	46c1      	mov	r9, r8
 8016862:	8920      	ldrh	r0, [r4, #8]
 8016864:	fbb6 f2f0 	udiv	r2, r6, r0
 8016868:	fb00 6112 	mls	r1, r0, r2, r6
 801686c:	b28a      	uxth	r2, r1
 801686e:	6863      	ldr	r3, [r4, #4]
 8016870:	fbb3 f1f0 	udiv	r1, r3, r0
 8016874:	6823      	ldr	r3, [r4, #0]
 8016876:	fb02 f101 	mul.w	r1, r2, r1
 801687a:	3104      	adds	r1, #4
 801687c:	4419      	add	r1, r3
 801687e:	4658      	mov	r0, fp
 8016880:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016884:	9200      	str	r2, [sp, #0]
 8016886:	2300      	movs	r3, #0
 8016888:	463a      	mov	r2, r7
 801688a:	f7f5 fb8f 	bl	800bfac <ucdr_init_buffer_origin_offset>
 801688e:	464a      	mov	r2, r9
 8016890:	2300      	movs	r3, #0
 8016892:	210d      	movs	r1, #13
 8016894:	4658      	mov	r0, fp
 8016896:	f7fa f959 	bl	8010b4c <uxr_buffer_submessage_header>
 801689a:	8921      	ldrh	r1, [r4, #8]
 801689c:	fbb6 f2f1 	udiv	r2, r6, r1
 80168a0:	fb01 6212 	mls	r2, r1, r2, r6
 80168a4:	b292      	uxth	r2, r2
 80168a6:	6863      	ldr	r3, [r4, #4]
 80168a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80168ac:	fb02 f303 	mul.w	r3, r2, r3
 80168b0:	6822      	ldr	r2, [r4, #0]
 80168b2:	4630      	mov	r0, r6
 80168b4:	50d7      	str	r7, [r2, r3]
 80168b6:	2101      	movs	r1, #1
 80168b8:	f000 f9c4 	bl	8016c44 <uxr_seq_num_add>
 80168bc:	f10a 0a01 	add.w	sl, sl, #1
 80168c0:	fa1f f38a 	uxth.w	r3, sl
 80168c4:	429d      	cmp	r5, r3
 80168c6:	4606      	mov	r6, r0
 80168c8:	d8ca      	bhi.n	8016860 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80168ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80168ce:	9d05      	ldr	r5, [sp, #20]
 80168d0:	8920      	ldrh	r0, [r4, #8]
 80168d2:	fbb6 f3f0 	udiv	r3, r6, r0
 80168d6:	fb00 6313 	mls	r3, r0, r3, r6
 80168da:	b299      	uxth	r1, r3
 80168dc:	6863      	ldr	r3, [r4, #4]
 80168de:	fbb3 f3f0 	udiv	r3, r3, r0
 80168e2:	fb01 f303 	mul.w	r3, r1, r3
 80168e6:	6821      	ldr	r1, [r4, #0]
 80168e8:	3304      	adds	r3, #4
 80168ea:	4419      	add	r1, r3
 80168ec:	463a      	mov	r2, r7
 80168ee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80168f2:	9000      	str	r0, [sp, #0]
 80168f4:	2300      	movs	r3, #0
 80168f6:	4658      	mov	r0, fp
 80168f8:	f7f5 fb58 	bl	800bfac <ucdr_init_buffer_origin_offset>
 80168fc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016900:	4658      	mov	r0, fp
 8016902:	fa1f f289 	uxth.w	r2, r9
 8016906:	2302      	movs	r3, #2
 8016908:	210d      	movs	r1, #13
 801690a:	f7fa f91f 	bl	8010b4c <uxr_buffer_submessage_header>
 801690e:	9b03      	ldr	r3, [sp, #12]
 8016910:	8927      	ldrh	r7, [r4, #8]
 8016912:	7b20      	ldrb	r0, [r4, #12]
 8016914:	f108 0104 	add.w	r1, r8, #4
 8016918:	440b      	add	r3, r1
 801691a:	4619      	mov	r1, r3
 801691c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016920:	fb07 6313 	mls	r3, r7, r3, r6
 8016924:	f1a5 0208 	sub.w	r2, r5, #8
 8016928:	b29d      	uxth	r5, r3
 801692a:	3004      	adds	r0, #4
 801692c:	6863      	ldr	r3, [r4, #4]
 801692e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016932:	fb05 f303 	mul.w	r3, r5, r3
 8016936:	6825      	ldr	r5, [r4, #0]
 8016938:	4448      	add	r0, r9
 801693a:	50e8      	str	r0, [r5, r3]
 801693c:	9d04      	ldr	r5, [sp, #16]
 801693e:	eba2 0208 	sub.w	r2, r2, r8
 8016942:	4628      	mov	r0, r5
 8016944:	f7f5 fb44 	bl	800bfd0 <ucdr_init_buffer>
 8016948:	4628      	mov	r0, r5
 801694a:	493c      	ldr	r1, [pc, #240]	@ (8016a3c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801694c:	4622      	mov	r2, r4
 801694e:	f7f5 fb13 	bl	800bf78 <ucdr_set_on_full_buffer_callback>
 8016952:	2001      	movs	r0, #1
 8016954:	81e6      	strh	r6, [r4, #14]
 8016956:	b011      	add	sp, #68	@ 0x44
 8016958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801695c:	2101      	movs	r1, #1
 801695e:	89e0      	ldrh	r0, [r4, #14]
 8016960:	f000 f970 	bl	8016c44 <uxr_seq_num_add>
 8016964:	8921      	ldrh	r1, [r4, #8]
 8016966:	4605      	mov	r5, r0
 8016968:	8a60      	ldrh	r0, [r4, #18]
 801696a:	f000 f96b 	bl	8016c44 <uxr_seq_num_add>
 801696e:	4601      	mov	r1, r0
 8016970:	4628      	mov	r0, r5
 8016972:	f000 f96f 	bl	8016c54 <uxr_seq_num_cmp>
 8016976:	2800      	cmp	r0, #0
 8016978:	dd42      	ble.n	8016a00 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801697a:	2000      	movs	r0, #0
 801697c:	b011      	add	sp, #68	@ 0x44
 801697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016982:	8921      	ldrh	r1, [r4, #8]
 8016984:	8a60      	ldrh	r0, [r4, #18]
 8016986:	9205      	str	r2, [sp, #20]
 8016988:	f000 f95c 	bl	8016c44 <uxr_seq_num_add>
 801698c:	4601      	mov	r1, r0
 801698e:	4630      	mov	r0, r6
 8016990:	f000 f960 	bl	8016c54 <uxr_seq_num_cmp>
 8016994:	2800      	cmp	r0, #0
 8016996:	9a05      	ldr	r2, [sp, #20]
 8016998:	dcef      	bgt.n	801697a <uxr_prepare_reliable_buffer_to_write+0x216>
 801699a:	8927      	ldrh	r7, [r4, #8]
 801699c:	fbb6 f3f7 	udiv	r3, r6, r7
 80169a0:	fb07 6313 	mls	r3, r7, r3, r6
 80169a4:	b29d      	uxth	r5, r3
 80169a6:	6863      	ldr	r3, [r4, #4]
 80169a8:	6824      	ldr	r4, [r4, #0]
 80169aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80169ae:	fb05 f303 	mul.w	r3, r5, r3
 80169b2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80169b6:	50e2      	str	r2, [r4, r3]
 80169b8:	2300      	movs	r3, #0
 80169ba:	f8cd 8000 	str.w	r8, [sp]
 80169be:	f7f5 faf5 	bl	800bfac <ucdr_init_buffer_origin_offset>
 80169c2:	2001      	movs	r0, #1
 80169c4:	e7da      	b.n	801697c <uxr_prepare_reliable_buffer_to_write+0x218>
 80169c6:	b293      	uxth	r3, r2
 80169c8:	461a      	mov	r2, r3
 80169ca:	e737      	b.n	801683c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80169cc:	4630      	mov	r0, r6
 80169ce:	2101      	movs	r1, #1
 80169d0:	9207      	str	r2, [sp, #28]
 80169d2:	f000 f937 	bl	8016c44 <uxr_seq_num_add>
 80169d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80169da:	fbb0 f1fc 	udiv	r1, r0, ip
 80169de:	fb0c 0111 	mls	r1, ip, r1, r0
 80169e2:	4606      	mov	r6, r0
 80169e4:	b288      	uxth	r0, r1
 80169e6:	6863      	ldr	r3, [r4, #4]
 80169e8:	fbb3 f1fc 	udiv	r1, r3, ip
 80169ec:	6823      	ldr	r3, [r4, #0]
 80169ee:	9a07      	ldr	r2, [sp, #28]
 80169f0:	fb00 f101 	mul.w	r1, r0, r1
 80169f4:	3104      	adds	r1, #4
 80169f6:	440b      	add	r3, r1
 80169f8:	9303      	str	r3, [sp, #12]
 80169fa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80169fe:	e70a      	b.n	8016816 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016a00:	8921      	ldrh	r1, [r4, #8]
 8016a02:	fbb5 f3f1 	udiv	r3, r5, r1
 8016a06:	fb01 5313 	mls	r3, r1, r3, r5
 8016a0a:	b29a      	uxth	r2, r3
 8016a0c:	6863      	ldr	r3, [r4, #4]
 8016a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016a12:	6821      	ldr	r1, [r4, #0]
 8016a14:	9804      	ldr	r0, [sp, #16]
 8016a16:	fb02 f303 	mul.w	r3, r2, r3
 8016a1a:	3304      	adds	r3, #4
 8016a1c:	7b22      	ldrb	r2, [r4, #12]
 8016a1e:	4419      	add	r1, r3
 8016a20:	445a      	add	r2, fp
 8016a22:	f841 2c04 	str.w	r2, [r1, #-4]
 8016a26:	7b23      	ldrb	r3, [r4, #12]
 8016a28:	9300      	str	r3, [sp, #0]
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	f7f5 fabe 	bl	800bfac <ucdr_init_buffer_origin_offset>
 8016a30:	81e5      	strh	r5, [r4, #14]
 8016a32:	2001      	movs	r0, #1
 8016a34:	e7a2      	b.n	801697c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016a36:	4682      	mov	sl, r0
 8016a38:	e6ca      	b.n	80167d0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016a3a:	bf00      	nop
 8016a3c:	08016645 	.word	0x08016645

08016a40 <uxr_prepare_next_reliable_buffer_to_send>:
 8016a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a42:	4604      	mov	r4, r0
 8016a44:	460f      	mov	r7, r1
 8016a46:	8a00      	ldrh	r0, [r0, #16]
 8016a48:	2101      	movs	r1, #1
 8016a4a:	4616      	mov	r6, r2
 8016a4c:	461d      	mov	r5, r3
 8016a4e:	f000 f8f9 	bl	8016c44 <uxr_seq_num_add>
 8016a52:	8028      	strh	r0, [r5, #0]
 8016a54:	8922      	ldrh	r2, [r4, #8]
 8016a56:	fbb0 f3f2 	udiv	r3, r0, r2
 8016a5a:	fb02 0c13 	mls	ip, r2, r3, r0
 8016a5e:	fa1f fc8c 	uxth.w	ip, ip
 8016a62:	6863      	ldr	r3, [r4, #4]
 8016a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a68:	fb0c fc03 	mul.w	ip, ip, r3
 8016a6c:	6823      	ldr	r3, [r4, #0]
 8016a6e:	89e1      	ldrh	r1, [r4, #14]
 8016a70:	f10c 0c04 	add.w	ip, ip, #4
 8016a74:	4463      	add	r3, ip
 8016a76:	603b      	str	r3, [r7, #0]
 8016a78:	6823      	ldr	r3, [r4, #0]
 8016a7a:	449c      	add	ip, r3
 8016a7c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016a80:	6033      	str	r3, [r6, #0]
 8016a82:	f000 f8e7 	bl	8016c54 <uxr_seq_num_cmp>
 8016a86:	2800      	cmp	r0, #0
 8016a88:	dd01      	ble.n	8016a8e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016a8a:	2000      	movs	r0, #0
 8016a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a8e:	7b23      	ldrb	r3, [r4, #12]
 8016a90:	6832      	ldr	r2, [r6, #0]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d9f9      	bls.n	8016a8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016a96:	8a61      	ldrh	r1, [r4, #18]
 8016a98:	8a20      	ldrh	r0, [r4, #16]
 8016a9a:	f000 f8d7 	bl	8016c4c <uxr_seq_num_sub>
 8016a9e:	8923      	ldrh	r3, [r4, #8]
 8016aa0:	4283      	cmp	r3, r0
 8016aa2:	d0f2      	beq.n	8016a8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016aa4:	8828      	ldrh	r0, [r5, #0]
 8016aa6:	89e3      	ldrh	r3, [r4, #14]
 8016aa8:	8220      	strh	r0, [r4, #16]
 8016aaa:	4298      	cmp	r0, r3
 8016aac:	d001      	beq.n	8016ab2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016aae:	2001      	movs	r0, #1
 8016ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ab2:	2101      	movs	r1, #1
 8016ab4:	f000 f8c6 	bl	8016c44 <uxr_seq_num_add>
 8016ab8:	81e0      	strh	r0, [r4, #14]
 8016aba:	2001      	movs	r0, #1
 8016abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016abe:	bf00      	nop

08016ac0 <uxr_update_output_stream_heartbeat_timestamp>:
 8016ac0:	b570      	push	{r4, r5, r6, lr}
 8016ac2:	8a01      	ldrh	r1, [r0, #16]
 8016ac4:	4604      	mov	r4, r0
 8016ac6:	8a40      	ldrh	r0, [r0, #18]
 8016ac8:	4615      	mov	r5, r2
 8016aca:	461e      	mov	r6, r3
 8016acc:	f000 f8c2 	bl	8016c54 <uxr_seq_num_cmp>
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	db07      	blt.n	8016ae4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016ad8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016adc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016ae0:	2000      	movs	r0, #0
 8016ae2:	bd70      	pop	{r4, r5, r6, pc}
 8016ae4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016ae8:	b940      	cbnz	r0, 8016afc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016aea:	2301      	movs	r3, #1
 8016aec:	f884 3020 	strb.w	r3, [r4, #32]
 8016af0:	3564      	adds	r5, #100	@ 0x64
 8016af2:	f146 0600 	adc.w	r6, r6, #0
 8016af6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016afa:	bd70      	pop	{r4, r5, r6, pc}
 8016afc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016b00:	4295      	cmp	r5, r2
 8016b02:	eb76 0303 	sbcs.w	r3, r6, r3
 8016b06:	bfa5      	ittet	ge
 8016b08:	3001      	addge	r0, #1
 8016b0a:	f884 0020 	strbge.w	r0, [r4, #32]
 8016b0e:	2000      	movlt	r0, #0
 8016b10:	2001      	movge	r0, #1
 8016b12:	e7ed      	b.n	8016af0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016b14 <uxr_begin_output_nack_buffer_it>:
 8016b14:	8a40      	ldrh	r0, [r0, #18]
 8016b16:	4770      	bx	lr

08016b18 <uxr_next_reliable_nack_buffer_to_send>:
 8016b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b1c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016b20:	b082      	sub	sp, #8
 8016b22:	f1b8 0f00 	cmp.w	r8, #0
 8016b26:	d011      	beq.n	8016b4c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016b28:	4604      	mov	r4, r0
 8016b2a:	8818      	ldrh	r0, [r3, #0]
 8016b2c:	460e      	mov	r6, r1
 8016b2e:	4617      	mov	r7, r2
 8016b30:	461d      	mov	r5, r3
 8016b32:	2101      	movs	r1, #1
 8016b34:	f000 f886 	bl	8016c44 <uxr_seq_num_add>
 8016b38:	8028      	strh	r0, [r5, #0]
 8016b3a:	8a21      	ldrh	r1, [r4, #16]
 8016b3c:	f000 f88a 	bl	8016c54 <uxr_seq_num_cmp>
 8016b40:	2800      	cmp	r0, #0
 8016b42:	dd07      	ble.n	8016b54 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016b44:	f04f 0800 	mov.w	r8, #0
 8016b48:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016b4c:	4640      	mov	r0, r8
 8016b4e:	b002      	add	sp, #8
 8016b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b54:	8921      	ldrh	r1, [r4, #8]
 8016b56:	8828      	ldrh	r0, [r5, #0]
 8016b58:	6823      	ldr	r3, [r4, #0]
 8016b5a:	fbb0 f2f1 	udiv	r2, r0, r1
 8016b5e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016b62:	fa1f f28c 	uxth.w	r2, ip
 8016b66:	9301      	str	r3, [sp, #4]
 8016b68:	6863      	ldr	r3, [r4, #4]
 8016b6a:	fbb3 fcf1 	udiv	ip, r3, r1
 8016b6e:	9b01      	ldr	r3, [sp, #4]
 8016b70:	fb02 fc0c 	mul.w	ip, r2, ip
 8016b74:	f10c 0c04 	add.w	ip, ip, #4
 8016b78:	4463      	add	r3, ip
 8016b7a:	6033      	str	r3, [r6, #0]
 8016b7c:	6823      	ldr	r3, [r4, #0]
 8016b7e:	4463      	add	r3, ip
 8016b80:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016b84:	603b      	str	r3, [r7, #0]
 8016b86:	7b22      	ldrb	r2, [r4, #12]
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d0d2      	beq.n	8016b32 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016b8c:	4640      	mov	r0, r8
 8016b8e:	b002      	add	sp, #8
 8016b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b94 <uxr_process_acknack>:
 8016b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b96:	4604      	mov	r4, r0
 8016b98:	460e      	mov	r6, r1
 8016b9a:	4610      	mov	r0, r2
 8016b9c:	2101      	movs	r1, #1
 8016b9e:	f000 f855 	bl	8016c4c <uxr_seq_num_sub>
 8016ba2:	8a61      	ldrh	r1, [r4, #18]
 8016ba4:	f000 f852 	bl	8016c4c <uxr_seq_num_sub>
 8016ba8:	b1c0      	cbz	r0, 8016bdc <uxr_process_acknack+0x48>
 8016baa:	4605      	mov	r5, r0
 8016bac:	2700      	movs	r7, #0
 8016bae:	2101      	movs	r1, #1
 8016bb0:	8a60      	ldrh	r0, [r4, #18]
 8016bb2:	f000 f847 	bl	8016c44 <uxr_seq_num_add>
 8016bb6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016bba:	fbb0 f1fc 	udiv	r1, r0, ip
 8016bbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016bc2:	fb0c 0111 	mls	r1, ip, r1, r0
 8016bc6:	b289      	uxth	r1, r1
 8016bc8:	3701      	adds	r7, #1
 8016bca:	fbb3 f3fc 	udiv	r3, r3, ip
 8016bce:	fb01 f303 	mul.w	r3, r1, r3
 8016bd2:	42bd      	cmp	r5, r7
 8016bd4:	7b21      	ldrb	r1, [r4, #12]
 8016bd6:	8260      	strh	r0, [r4, #18]
 8016bd8:	50d1      	str	r1, [r2, r3]
 8016bda:	d1e8      	bne.n	8016bae <uxr_process_acknack+0x1a>
 8016bdc:	3e00      	subs	r6, #0
 8016bde:	f04f 0300 	mov.w	r3, #0
 8016be2:	bf18      	it	ne
 8016be4:	2601      	movne	r6, #1
 8016be6:	f884 3020 	strb.w	r3, [r4, #32]
 8016bea:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016bf0 <uxr_is_output_up_to_date>:
 8016bf0:	8a01      	ldrh	r1, [r0, #16]
 8016bf2:	8a40      	ldrh	r0, [r0, #18]
 8016bf4:	b508      	push	{r3, lr}
 8016bf6:	f000 f82d 	bl	8016c54 <uxr_seq_num_cmp>
 8016bfa:	fab0 f080 	clz	r0, r0
 8016bfe:	0940      	lsrs	r0, r0, #5
 8016c00:	bd08      	pop	{r3, pc}
 8016c02:	bf00      	nop

08016c04 <get_available_free_slots>:
 8016c04:	8902      	ldrh	r2, [r0, #8]
 8016c06:	b1da      	cbz	r2, 8016c40 <get_available_free_slots+0x3c>
 8016c08:	b530      	push	{r4, r5, lr}
 8016c0a:	2100      	movs	r1, #0
 8016c0c:	6843      	ldr	r3, [r0, #4]
 8016c0e:	6805      	ldr	r5, [r0, #0]
 8016c10:	7b04      	ldrb	r4, [r0, #12]
 8016c12:	fbb3 fef2 	udiv	lr, r3, r2
 8016c16:	4608      	mov	r0, r1
 8016c18:	460b      	mov	r3, r1
 8016c1a:	fbb3 fcf2 	udiv	ip, r3, r2
 8016c1e:	fb02 331c 	mls	r3, r2, ip, r3
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	fb0e f303 	mul.w	r3, lr, r3
 8016c28:	3101      	adds	r1, #1
 8016c2a:	f855 c003 	ldr.w	ip, [r5, r3]
 8016c2e:	4564      	cmp	r4, ip
 8016c30:	bf08      	it	eq
 8016c32:	3001      	addeq	r0, #1
 8016c34:	b28b      	uxth	r3, r1
 8016c36:	bf08      	it	eq
 8016c38:	b280      	uxtheq	r0, r0
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d3ed      	bcc.n	8016c1a <get_available_free_slots+0x16>
 8016c3e:	bd30      	pop	{r4, r5, pc}
 8016c40:	4610      	mov	r0, r2
 8016c42:	4770      	bx	lr

08016c44 <uxr_seq_num_add>:
 8016c44:	4408      	add	r0, r1
 8016c46:	b280      	uxth	r0, r0
 8016c48:	4770      	bx	lr
 8016c4a:	bf00      	nop

08016c4c <uxr_seq_num_sub>:
 8016c4c:	1a40      	subs	r0, r0, r1
 8016c4e:	b280      	uxth	r0, r0
 8016c50:	4770      	bx	lr
 8016c52:	bf00      	nop

08016c54 <uxr_seq_num_cmp>:
 8016c54:	4288      	cmp	r0, r1
 8016c56:	d011      	beq.n	8016c7c <uxr_seq_num_cmp+0x28>
 8016c58:	d309      	bcc.n	8016c6e <uxr_seq_num_cmp+0x1a>
 8016c5a:	4288      	cmp	r0, r1
 8016c5c:	d910      	bls.n	8016c80 <uxr_seq_num_cmp+0x2c>
 8016c5e:	1a40      	subs	r0, r0, r1
 8016c60:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016c64:	bfd4      	ite	le
 8016c66:	2001      	movle	r0, #1
 8016c68:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016c6c:	4770      	bx	lr
 8016c6e:	1a0b      	subs	r3, r1, r0
 8016c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016c74:	daf1      	bge.n	8016c5a <uxr_seq_num_cmp+0x6>
 8016c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c7a:	4770      	bx	lr
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	4770      	bx	lr
 8016c80:	2001      	movs	r0, #1
 8016c82:	4770      	bx	lr

08016c84 <rcl_get_default_domain_id>:
 8016c84:	b530      	push	{r4, r5, lr}
 8016c86:	b083      	sub	sp, #12
 8016c88:	2300      	movs	r3, #0
 8016c8a:	9300      	str	r3, [sp, #0]
 8016c8c:	b1d0      	cbz	r0, 8016cc4 <rcl_get_default_domain_id+0x40>
 8016c8e:	4604      	mov	r4, r0
 8016c90:	4669      	mov	r1, sp
 8016c92:	4815      	ldr	r0, [pc, #84]	@ (8016ce8 <rcl_get_default_domain_id+0x64>)
 8016c94:	f7fd ff58 	bl	8014b48 <rcutils_get_env>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	b110      	cbz	r0, 8016ca2 <rcl_get_default_domain_id+0x1e>
 8016c9c:	2001      	movs	r0, #1
 8016c9e:	b003      	add	sp, #12
 8016ca0:	bd30      	pop	{r4, r5, pc}
 8016ca2:	9b00      	ldr	r3, [sp, #0]
 8016ca4:	b18b      	cbz	r3, 8016cca <rcl_get_default_domain_id+0x46>
 8016ca6:	7818      	ldrb	r0, [r3, #0]
 8016ca8:	2800      	cmp	r0, #0
 8016caa:	d0f8      	beq.n	8016c9e <rcl_get_default_domain_id+0x1a>
 8016cac:	a901      	add	r1, sp, #4
 8016cae:	4618      	mov	r0, r3
 8016cb0:	9201      	str	r2, [sp, #4]
 8016cb2:	f000 fdc9 	bl	8017848 <strtoul>
 8016cb6:	4605      	mov	r5, r0
 8016cb8:	b150      	cbz	r0, 8016cd0 <rcl_get_default_domain_id+0x4c>
 8016cba:	1c43      	adds	r3, r0, #1
 8016cbc:	d00d      	beq.n	8016cda <rcl_get_default_domain_id+0x56>
 8016cbe:	6025      	str	r5, [r4, #0]
 8016cc0:	2000      	movs	r0, #0
 8016cc2:	e7ec      	b.n	8016c9e <rcl_get_default_domain_id+0x1a>
 8016cc4:	200b      	movs	r0, #11
 8016cc6:	b003      	add	sp, #12
 8016cc8:	bd30      	pop	{r4, r5, pc}
 8016cca:	4618      	mov	r0, r3
 8016ccc:	b003      	add	sp, #12
 8016cce:	bd30      	pop	{r4, r5, pc}
 8016cd0:	9b01      	ldr	r3, [sp, #4]
 8016cd2:	781b      	ldrb	r3, [r3, #0]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d0f2      	beq.n	8016cbe <rcl_get_default_domain_id+0x3a>
 8016cd8:	e7e0      	b.n	8016c9c <rcl_get_default_domain_id+0x18>
 8016cda:	f001 f801 	bl	8017ce0 <__errno>
 8016cde:	6803      	ldr	r3, [r0, #0]
 8016ce0:	2b22      	cmp	r3, #34	@ 0x22
 8016ce2:	d1ec      	bne.n	8016cbe <rcl_get_default_domain_id+0x3a>
 8016ce4:	e7da      	b.n	8016c9c <rcl_get_default_domain_id+0x18>
 8016ce6:	bf00      	nop
 8016ce8:	080196ac 	.word	0x080196ac

08016cec <rcl_expand_topic_name>:
 8016cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cf0:	b08b      	sub	sp, #44	@ 0x2c
 8016cf2:	9306      	str	r3, [sp, #24]
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	f000 80ad 	beq.w	8016e54 <rcl_expand_topic_name+0x168>
 8016cfa:	460e      	mov	r6, r1
 8016cfc:	2900      	cmp	r1, #0
 8016cfe:	f000 80a9 	beq.w	8016e54 <rcl_expand_topic_name+0x168>
 8016d02:	4617      	mov	r7, r2
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	f000 80a5 	beq.w	8016e54 <rcl_expand_topic_name+0x168>
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	f000 80a2 	beq.w	8016e54 <rcl_expand_topic_name+0x168>
 8016d10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	f000 809e 	beq.w	8016e54 <rcl_expand_topic_name+0x168>
 8016d18:	2200      	movs	r2, #0
 8016d1a:	a909      	add	r1, sp, #36	@ 0x24
 8016d1c:	4680      	mov	r8, r0
 8016d1e:	f000 fa57 	bl	80171d0 <rcl_validate_topic_name>
 8016d22:	4604      	mov	r4, r0
 8016d24:	2800      	cmp	r0, #0
 8016d26:	f040 8096 	bne.w	8016e56 <rcl_expand_topic_name+0x16a>
 8016d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	f040 809a 	bne.w	8016e66 <rcl_expand_topic_name+0x17a>
 8016d32:	4602      	mov	r2, r0
 8016d34:	a909      	add	r1, sp, #36	@ 0x24
 8016d36:	4630      	mov	r0, r6
 8016d38:	f7fe fb30 	bl	801539c <rmw_validate_node_name>
 8016d3c:	2800      	cmp	r0, #0
 8016d3e:	f040 808e 	bne.w	8016e5e <rcl_expand_topic_name+0x172>
 8016d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d44:	2a00      	cmp	r2, #0
 8016d46:	f040 8093 	bne.w	8016e70 <rcl_expand_topic_name+0x184>
 8016d4a:	a909      	add	r1, sp, #36	@ 0x24
 8016d4c:	4638      	mov	r0, r7
 8016d4e:	f7fe fb07 	bl	8015360 <rmw_validate_namespace>
 8016d52:	2800      	cmp	r0, #0
 8016d54:	f040 8083 	bne.w	8016e5e <rcl_expand_topic_name+0x172>
 8016d58:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016d5a:	2c00      	cmp	r4, #0
 8016d5c:	f040 80ed 	bne.w	8016f3a <rcl_expand_topic_name+0x24e>
 8016d60:	217b      	movs	r1, #123	@ 0x7b
 8016d62:	4640      	mov	r0, r8
 8016d64:	f000 ff30 	bl	8017bc8 <strchr>
 8016d68:	f898 3000 	ldrb.w	r3, [r8]
 8016d6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d6e:	4605      	mov	r5, r0
 8016d70:	f000 809e 	beq.w	8016eb0 <rcl_expand_topic_name+0x1c4>
 8016d74:	2b7e      	cmp	r3, #126	@ 0x7e
 8016d76:	f040 80a2 	bne.w	8016ebe <rcl_expand_topic_name+0x1d2>
 8016d7a:	4638      	mov	r0, r7
 8016d7c:	f7e9 fa5a 	bl	8000234 <strlen>
 8016d80:	4a82      	ldr	r2, [pc, #520]	@ (8016f8c <rcl_expand_topic_name+0x2a0>)
 8016d82:	4b83      	ldr	r3, [pc, #524]	@ (8016f90 <rcl_expand_topic_name+0x2a4>)
 8016d84:	2801      	cmp	r0, #1
 8016d86:	bf18      	it	ne
 8016d88:	4613      	movne	r3, r2
 8016d8a:	9302      	str	r3, [sp, #8]
 8016d8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016d8e:	9300      	str	r3, [sp, #0]
 8016d90:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016d94:	f108 0301 	add.w	r3, r8, #1
 8016d98:	9305      	str	r3, [sp, #20]
 8016d9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d9e:	9301      	str	r3, [sp, #4]
 8016da0:	ab14      	add	r3, sp, #80	@ 0x50
 8016da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016da4:	f7fd fef8 	bl	8014b98 <rcutils_format_string_limit>
 8016da8:	4682      	mov	sl, r0
 8016daa:	2800      	cmp	r0, #0
 8016dac:	f000 80c7 	beq.w	8016f3e <rcl_expand_topic_name+0x252>
 8016db0:	2d00      	cmp	r5, #0
 8016db2:	f000 80a2 	beq.w	8016efa <rcl_expand_topic_name+0x20e>
 8016db6:	217b      	movs	r1, #123	@ 0x7b
 8016db8:	f000 ff06 	bl	8017bc8 <strchr>
 8016dbc:	46d1      	mov	r9, sl
 8016dbe:	4605      	mov	r5, r0
 8016dc0:	9407      	str	r4, [sp, #28]
 8016dc2:	46d3      	mov	fp, sl
 8016dc4:	464c      	mov	r4, r9
 8016dc6:	2d00      	cmp	r5, #0
 8016dc8:	f000 80be 	beq.w	8016f48 <rcl_expand_topic_name+0x25c>
 8016dcc:	217d      	movs	r1, #125	@ 0x7d
 8016dce:	4620      	mov	r0, r4
 8016dd0:	f000 fefa 	bl	8017bc8 <strchr>
 8016dd4:	eba0 0905 	sub.w	r9, r0, r5
 8016dd8:	f109 0a01 	add.w	sl, r9, #1
 8016ddc:	486d      	ldr	r0, [pc, #436]	@ (8016f94 <rcl_expand_topic_name+0x2a8>)
 8016dde:	4652      	mov	r2, sl
 8016de0:	4629      	mov	r1, r5
 8016de2:	f000 fefe 	bl	8017be2 <strncmp>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	d067      	beq.n	8016eba <rcl_expand_topic_name+0x1ce>
 8016dea:	486b      	ldr	r0, [pc, #428]	@ (8016f98 <rcl_expand_topic_name+0x2ac>)
 8016dec:	4652      	mov	r2, sl
 8016dee:	4629      	mov	r1, r5
 8016df0:	f000 fef7 	bl	8017be2 <strncmp>
 8016df4:	b130      	cbz	r0, 8016e04 <rcl_expand_topic_name+0x118>
 8016df6:	4869      	ldr	r0, [pc, #420]	@ (8016f9c <rcl_expand_topic_name+0x2b0>)
 8016df8:	4652      	mov	r2, sl
 8016dfa:	4629      	mov	r1, r5
 8016dfc:	f000 fef1 	bl	8017be2 <strncmp>
 8016e00:	2800      	cmp	r0, #0
 8016e02:	d137      	bne.n	8016e74 <rcl_expand_topic_name+0x188>
 8016e04:	46b9      	mov	r9, r7
 8016e06:	ab16      	add	r3, sp, #88	@ 0x58
 8016e08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016e0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016e10:	ab14      	add	r3, sp, #80	@ 0x50
 8016e12:	4628      	mov	r0, r5
 8016e14:	cb0c      	ldmia	r3, {r2, r3}
 8016e16:	4651      	mov	r1, sl
 8016e18:	f7fd fffa 	bl	8014e10 <rcutils_strndup>
 8016e1c:	4605      	mov	r5, r0
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	f000 809c 	beq.w	8016f5c <rcl_expand_topic_name+0x270>
 8016e24:	464a      	mov	r2, r9
 8016e26:	4620      	mov	r0, r4
 8016e28:	ab14      	add	r3, sp, #80	@ 0x50
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	f7fd feee 	bl	8014c0c <rcutils_repl_str>
 8016e30:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e34:	4604      	mov	r4, r0
 8016e36:	4628      	mov	r0, r5
 8016e38:	4798      	blx	r3
 8016e3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e3c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e3e:	4658      	mov	r0, fp
 8016e40:	4798      	blx	r3
 8016e42:	2c00      	cmp	r4, #0
 8016e44:	d07b      	beq.n	8016f3e <rcl_expand_topic_name+0x252>
 8016e46:	217b      	movs	r1, #123	@ 0x7b
 8016e48:	4620      	mov	r0, r4
 8016e4a:	f000 febd 	bl	8017bc8 <strchr>
 8016e4e:	46a3      	mov	fp, r4
 8016e50:	4605      	mov	r5, r0
 8016e52:	e7b8      	b.n	8016dc6 <rcl_expand_topic_name+0xda>
 8016e54:	240b      	movs	r4, #11
 8016e56:	4620      	mov	r0, r4
 8016e58:	b00b      	add	sp, #44	@ 0x2c
 8016e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e5e:	f7fb f8a1 	bl	8011fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 8016e62:	4604      	mov	r4, r0
 8016e64:	e7f7      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016e66:	2467      	movs	r4, #103	@ 0x67
 8016e68:	4620      	mov	r0, r4
 8016e6a:	b00b      	add	sp, #44	@ 0x2c
 8016e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e70:	24c9      	movs	r4, #201	@ 0xc9
 8016e72:	e7f0      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016e74:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016e78:	9806      	ldr	r0, [sp, #24]
 8016e7a:	1c69      	adds	r1, r5, #1
 8016e7c:	f7fe f8e2 	bl	8015044 <rcutils_string_map_getn>
 8016e80:	4681      	mov	r9, r0
 8016e82:	2800      	cmp	r0, #0
 8016e84:	d1bf      	bne.n	8016e06 <rcl_expand_topic_name+0x11a>
 8016e86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e88:	aa16      	add	r2, sp, #88	@ 0x58
 8016e8a:	6018      	str	r0, [r3, #0]
 8016e8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e8e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016e92:	ab14      	add	r3, sp, #80	@ 0x50
 8016e94:	cb0c      	ldmia	r3, {r2, r3}
 8016e96:	4651      	mov	r1, sl
 8016e98:	4628      	mov	r0, r5
 8016e9a:	f7fd ffb9 	bl	8014e10 <rcutils_strndup>
 8016e9e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016ea0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016ea2:	4798      	blx	r3
 8016ea4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016ea6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016ea8:	4658      	mov	r0, fp
 8016eaa:	2469      	movs	r4, #105	@ 0x69
 8016eac:	4798      	blx	r3
 8016eae:	e7d2      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	d05b      	beq.n	8016f6c <rcl_expand_topic_name+0x280>
 8016eb4:	46c1      	mov	r9, r8
 8016eb6:	46a2      	mov	sl, r4
 8016eb8:	e782      	b.n	8016dc0 <rcl_expand_topic_name+0xd4>
 8016eba:	46b1      	mov	r9, r6
 8016ebc:	e7a3      	b.n	8016e06 <rcl_expand_topic_name+0x11a>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	d1f8      	bne.n	8016eb4 <rcl_expand_topic_name+0x1c8>
 8016ec2:	4638      	mov	r0, r7
 8016ec4:	f7e9 f9b6 	bl	8000234 <strlen>
 8016ec8:	4a35      	ldr	r2, [pc, #212]	@ (8016fa0 <rcl_expand_topic_name+0x2b4>)
 8016eca:	4b36      	ldr	r3, [pc, #216]	@ (8016fa4 <rcl_expand_topic_name+0x2b8>)
 8016ecc:	f8cd 8010 	str.w	r8, [sp, #16]
 8016ed0:	2801      	cmp	r0, #1
 8016ed2:	bf18      	it	ne
 8016ed4:	4613      	movne	r3, r2
 8016ed6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016eda:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016ede:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016ee0:	9703      	str	r7, [sp, #12]
 8016ee2:	9200      	str	r2, [sp, #0]
 8016ee4:	ab14      	add	r3, sp, #80	@ 0x50
 8016ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ee8:	f7fd fe56 	bl	8014b98 <rcutils_format_string_limit>
 8016eec:	4682      	mov	sl, r0
 8016eee:	4653      	mov	r3, sl
 8016ef0:	b32b      	cbz	r3, 8016f3e <rcl_expand_topic_name+0x252>
 8016ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ef4:	f8c3 a000 	str.w	sl, [r3]
 8016ef8:	e7ad      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016efa:	f89a 3000 	ldrb.w	r3, [sl]
 8016efe:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f00:	d0f7      	beq.n	8016ef2 <rcl_expand_topic_name+0x206>
 8016f02:	4638      	mov	r0, r7
 8016f04:	f7e9 f996 	bl	8000234 <strlen>
 8016f08:	4a25      	ldr	r2, [pc, #148]	@ (8016fa0 <rcl_expand_topic_name+0x2b4>)
 8016f0a:	4b26      	ldr	r3, [pc, #152]	@ (8016fa4 <rcl_expand_topic_name+0x2b8>)
 8016f0c:	f8cd a010 	str.w	sl, [sp, #16]
 8016f10:	2801      	cmp	r0, #1
 8016f12:	bf18      	it	ne
 8016f14:	4613      	movne	r3, r2
 8016f16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016f1a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016f1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016f20:	9703      	str	r7, [sp, #12]
 8016f22:	9200      	str	r2, [sp, #0]
 8016f24:	ab14      	add	r3, sp, #80	@ 0x50
 8016f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f28:	f7fd fe36 	bl	8014b98 <rcutils_format_string_limit>
 8016f2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f2e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016f30:	4605      	mov	r5, r0
 8016f32:	4650      	mov	r0, sl
 8016f34:	4798      	blx	r3
 8016f36:	46aa      	mov	sl, r5
 8016f38:	e7d9      	b.n	8016eee <rcl_expand_topic_name+0x202>
 8016f3a:	24ca      	movs	r4, #202	@ 0xca
 8016f3c:	e78b      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016f3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016f40:	2300      	movs	r3, #0
 8016f42:	6013      	str	r3, [r2, #0]
 8016f44:	240a      	movs	r4, #10
 8016f46:	e786      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016f48:	465b      	mov	r3, fp
 8016f4a:	9c07      	ldr	r4, [sp, #28]
 8016f4c:	46da      	mov	sl, fp
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1d3      	bne.n	8016efa <rcl_expand_topic_name+0x20e>
 8016f52:	f898 3000 	ldrb.w	r3, [r8]
 8016f56:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f58:	d0cb      	beq.n	8016ef2 <rcl_expand_topic_name+0x206>
 8016f5a:	e7b2      	b.n	8016ec2 <rcl_expand_topic_name+0x1d6>
 8016f5c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016f60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f62:	6015      	str	r5, [r2, #0]
 8016f64:	4658      	mov	r0, fp
 8016f66:	4798      	blx	r3
 8016f68:	240a      	movs	r4, #10
 8016f6a:	e774      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016f6c:	ab17      	add	r3, sp, #92	@ 0x5c
 8016f6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f72:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016f76:	ab14      	add	r3, sp, #80	@ 0x50
 8016f78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016f7a:	4640      	mov	r0, r8
 8016f7c:	f7fd ff26 	bl	8014dcc <rcutils_strdup>
 8016f80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f82:	2800      	cmp	r0, #0
 8016f84:	6018      	str	r0, [r3, #0]
 8016f86:	bf08      	it	eq
 8016f88:	240a      	moveq	r4, #10
 8016f8a:	e764      	b.n	8016e56 <rcl_expand_topic_name+0x16a>
 8016f8c:	080196bc 	.word	0x080196bc
 8016f90:	08018f18 	.word	0x08018f18
 8016f94:	080196c4 	.word	0x080196c4
 8016f98:	080196cc 	.word	0x080196cc
 8016f9c:	080196d4 	.word	0x080196d4
 8016fa0:	08018f04 	.word	0x08018f04
 8016fa4:	08018f28 	.word	0x08018f28

08016fa8 <rcl_get_default_topic_name_substitutions>:
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	bf0c      	ite	eq
 8016fac:	200b      	moveq	r0, #11
 8016fae:	2000      	movne	r0, #0
 8016fb0:	4770      	bx	lr
 8016fb2:	bf00      	nop

08016fb4 <rcl_get_zero_initialized_guard_condition>:
 8016fb4:	4a03      	ldr	r2, [pc, #12]	@ (8016fc4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	4770      	bx	lr
 8016fc4:	080196e0 	.word	0x080196e0

08016fc8 <rcl_guard_condition_init>:
 8016fc8:	b082      	sub	sp, #8
 8016fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fcc:	b087      	sub	sp, #28
 8016fce:	ac0c      	add	r4, sp, #48	@ 0x30
 8016fd0:	e884 000c 	stmia.w	r4, {r2, r3}
 8016fd4:	46a6      	mov	lr, r4
 8016fd6:	460d      	mov	r5, r1
 8016fd8:	4604      	mov	r4, r0
 8016fda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fde:	f10d 0c04 	add.w	ip, sp, #4
 8016fe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fe6:	f8de 3000 	ldr.w	r3, [lr]
 8016fea:	f8cc 3000 	str.w	r3, [ip]
 8016fee:	a801      	add	r0, sp, #4
 8016ff0:	f7f6 f9a4 	bl	800d33c <rcutils_allocator_is_valid>
 8016ff4:	b338      	cbz	r0, 8017046 <rcl_guard_condition_init+0x7e>
 8016ff6:	b334      	cbz	r4, 8017046 <rcl_guard_condition_init+0x7e>
 8016ff8:	6866      	ldr	r6, [r4, #4]
 8016ffa:	b9ee      	cbnz	r6, 8017038 <rcl_guard_condition_init+0x70>
 8016ffc:	b31d      	cbz	r5, 8017046 <rcl_guard_condition_init+0x7e>
 8016ffe:	4628      	mov	r0, r5
 8017000:	f7fa ffee 	bl	8011fe0 <rcl_context_is_valid>
 8017004:	b308      	cbz	r0, 801704a <rcl_guard_condition_init+0x82>
 8017006:	9b01      	ldr	r3, [sp, #4]
 8017008:	9905      	ldr	r1, [sp, #20]
 801700a:	201c      	movs	r0, #28
 801700c:	4798      	blx	r3
 801700e:	4607      	mov	r7, r0
 8017010:	6060      	str	r0, [r4, #4]
 8017012:	b310      	cbz	r0, 801705a <rcl_guard_condition_init+0x92>
 8017014:	6828      	ldr	r0, [r5, #0]
 8017016:	3028      	adds	r0, #40	@ 0x28
 8017018:	f000 f9ac 	bl	8017374 <rmw_create_guard_condition>
 801701c:	6038      	str	r0, [r7, #0]
 801701e:	6860      	ldr	r0, [r4, #4]
 8017020:	6805      	ldr	r5, [r0, #0]
 8017022:	b1a5      	cbz	r5, 801704e <rcl_guard_condition_init+0x86>
 8017024:	2301      	movs	r3, #1
 8017026:	ac01      	add	r4, sp, #4
 8017028:	7103      	strb	r3, [r0, #4]
 801702a:	f100 0708 	add.w	r7, r0, #8
 801702e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017030:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	603b      	str	r3, [r7, #0]
 8017036:	e000      	b.n	801703a <rcl_guard_condition_init+0x72>
 8017038:	2664      	movs	r6, #100	@ 0x64
 801703a:	4630      	mov	r0, r6
 801703c:	b007      	add	sp, #28
 801703e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017042:	b002      	add	sp, #8
 8017044:	4770      	bx	lr
 8017046:	260b      	movs	r6, #11
 8017048:	e7f7      	b.n	801703a <rcl_guard_condition_init+0x72>
 801704a:	2665      	movs	r6, #101	@ 0x65
 801704c:	e7f5      	b.n	801703a <rcl_guard_condition_init+0x72>
 801704e:	9b02      	ldr	r3, [sp, #8]
 8017050:	9905      	ldr	r1, [sp, #20]
 8017052:	4798      	blx	r3
 8017054:	2601      	movs	r6, #1
 8017056:	6065      	str	r5, [r4, #4]
 8017058:	e7ef      	b.n	801703a <rcl_guard_condition_init+0x72>
 801705a:	260a      	movs	r6, #10
 801705c:	e7ed      	b.n	801703a <rcl_guard_condition_init+0x72>
 801705e:	bf00      	nop

08017060 <rcl_guard_condition_init_from_rmw>:
 8017060:	b082      	sub	sp, #8
 8017062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017066:	b086      	sub	sp, #24
 8017068:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801706c:	4604      	mov	r4, r0
 801706e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017072:	460e      	mov	r6, r1
 8017074:	4617      	mov	r7, r2
 8017076:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801707a:	f10d 0e04 	add.w	lr, sp, #4
 801707e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017082:	f8dc 3000 	ldr.w	r3, [ip]
 8017086:	f8ce 3000 	str.w	r3, [lr]
 801708a:	a801      	add	r0, sp, #4
 801708c:	f7f6 f956 	bl	800d33c <rcutils_allocator_is_valid>
 8017090:	b350      	cbz	r0, 80170e8 <rcl_guard_condition_init_from_rmw+0x88>
 8017092:	b34c      	cbz	r4, 80170e8 <rcl_guard_condition_init_from_rmw+0x88>
 8017094:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017098:	f1b8 0f00 	cmp.w	r8, #0
 801709c:	d11e      	bne.n	80170dc <rcl_guard_condition_init_from_rmw+0x7c>
 801709e:	b31f      	cbz	r7, 80170e8 <rcl_guard_condition_init_from_rmw+0x88>
 80170a0:	4638      	mov	r0, r7
 80170a2:	f7fa ff9d 	bl	8011fe0 <rcl_context_is_valid>
 80170a6:	b328      	cbz	r0, 80170f4 <rcl_guard_condition_init_from_rmw+0x94>
 80170a8:	9b01      	ldr	r3, [sp, #4]
 80170aa:	9905      	ldr	r1, [sp, #20]
 80170ac:	201c      	movs	r0, #28
 80170ae:	4798      	blx	r3
 80170b0:	4605      	mov	r5, r0
 80170b2:	6060      	str	r0, [r4, #4]
 80170b4:	b358      	cbz	r0, 801710e <rcl_guard_condition_init_from_rmw+0xae>
 80170b6:	b1fe      	cbz	r6, 80170f8 <rcl_guard_condition_init_from_rmw+0x98>
 80170b8:	6006      	str	r6, [r0, #0]
 80170ba:	f880 8004 	strb.w	r8, [r0, #4]
 80170be:	ac01      	add	r4, sp, #4
 80170c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170c2:	f105 0c08 	add.w	ip, r5, #8
 80170c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	f8cc 3000 	str.w	r3, [ip]
 80170d0:	2000      	movs	r0, #0
 80170d2:	b006      	add	sp, #24
 80170d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170d8:	b002      	add	sp, #8
 80170da:	4770      	bx	lr
 80170dc:	2064      	movs	r0, #100	@ 0x64
 80170de:	b006      	add	sp, #24
 80170e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170e4:	b002      	add	sp, #8
 80170e6:	4770      	bx	lr
 80170e8:	200b      	movs	r0, #11
 80170ea:	b006      	add	sp, #24
 80170ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170f0:	b002      	add	sp, #8
 80170f2:	4770      	bx	lr
 80170f4:	2065      	movs	r0, #101	@ 0x65
 80170f6:	e7f2      	b.n	80170de <rcl_guard_condition_init_from_rmw+0x7e>
 80170f8:	6838      	ldr	r0, [r7, #0]
 80170fa:	3028      	adds	r0, #40	@ 0x28
 80170fc:	f000 f93a 	bl	8017374 <rmw_create_guard_condition>
 8017100:	6028      	str	r0, [r5, #0]
 8017102:	6865      	ldr	r5, [r4, #4]
 8017104:	682e      	ldr	r6, [r5, #0]
 8017106:	b126      	cbz	r6, 8017112 <rcl_guard_condition_init_from_rmw+0xb2>
 8017108:	2301      	movs	r3, #1
 801710a:	712b      	strb	r3, [r5, #4]
 801710c:	e7d7      	b.n	80170be <rcl_guard_condition_init_from_rmw+0x5e>
 801710e:	200a      	movs	r0, #10
 8017110:	e7e5      	b.n	80170de <rcl_guard_condition_init_from_rmw+0x7e>
 8017112:	4628      	mov	r0, r5
 8017114:	9b02      	ldr	r3, [sp, #8]
 8017116:	9905      	ldr	r1, [sp, #20]
 8017118:	4798      	blx	r3
 801711a:	6066      	str	r6, [r4, #4]
 801711c:	2001      	movs	r0, #1
 801711e:	e7de      	b.n	80170de <rcl_guard_condition_init_from_rmw+0x7e>

08017120 <rcl_guard_condition_fini>:
 8017120:	b570      	push	{r4, r5, r6, lr}
 8017122:	b082      	sub	sp, #8
 8017124:	b1f0      	cbz	r0, 8017164 <rcl_guard_condition_fini+0x44>
 8017126:	6843      	ldr	r3, [r0, #4]
 8017128:	4604      	mov	r4, r0
 801712a:	b163      	cbz	r3, 8017146 <rcl_guard_condition_fini+0x26>
 801712c:	6818      	ldr	r0, [r3, #0]
 801712e:	68de      	ldr	r6, [r3, #12]
 8017130:	6999      	ldr	r1, [r3, #24]
 8017132:	b160      	cbz	r0, 801714e <rcl_guard_condition_fini+0x2e>
 8017134:	791d      	ldrb	r5, [r3, #4]
 8017136:	b965      	cbnz	r5, 8017152 <rcl_guard_condition_fini+0x32>
 8017138:	4618      	mov	r0, r3
 801713a:	47b0      	blx	r6
 801713c:	2300      	movs	r3, #0
 801713e:	4628      	mov	r0, r5
 8017140:	6063      	str	r3, [r4, #4]
 8017142:	b002      	add	sp, #8
 8017144:	bd70      	pop	{r4, r5, r6, pc}
 8017146:	461d      	mov	r5, r3
 8017148:	4628      	mov	r0, r5
 801714a:	b002      	add	sp, #8
 801714c:	bd70      	pop	{r4, r5, r6, pc}
 801714e:	4605      	mov	r5, r0
 8017150:	e7f2      	b.n	8017138 <rcl_guard_condition_fini+0x18>
 8017152:	9101      	str	r1, [sp, #4]
 8017154:	f000 f922 	bl	801739c <rmw_destroy_guard_condition>
 8017158:	1e05      	subs	r5, r0, #0
 801715a:	6863      	ldr	r3, [r4, #4]
 801715c:	9901      	ldr	r1, [sp, #4]
 801715e:	bf18      	it	ne
 8017160:	2501      	movne	r5, #1
 8017162:	e7e9      	b.n	8017138 <rcl_guard_condition_fini+0x18>
 8017164:	250b      	movs	r5, #11
 8017166:	4628      	mov	r0, r5
 8017168:	b002      	add	sp, #8
 801716a:	bd70      	pop	{r4, r5, r6, pc}

0801716c <rcl_guard_condition_get_default_options>:
 801716c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801716e:	b087      	sub	sp, #28
 8017170:	4606      	mov	r6, r0
 8017172:	4668      	mov	r0, sp
 8017174:	f7f6 f8d4 	bl	800d320 <rcutils_get_default_allocator>
 8017178:	4b09      	ldr	r3, [pc, #36]	@ (80171a0 <rcl_guard_condition_get_default_options+0x34>)
 801717a:	46ee      	mov	lr, sp
 801717c:	469c      	mov	ip, r3
 801717e:	461d      	mov	r5, r3
 8017180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801718a:	4634      	mov	r4, r6
 801718c:	f8de 7000 	ldr.w	r7, [lr]
 8017190:	f8cc 7000 	str.w	r7, [ip]
 8017194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017196:	4630      	mov	r0, r6
 8017198:	6027      	str	r7, [r4, #0]
 801719a:	b007      	add	sp, #28
 801719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801719e:	bf00      	nop
 80171a0:	2000af30 	.word	0x2000af30

080171a4 <rcl_trigger_guard_condition>:
 80171a4:	b148      	cbz	r0, 80171ba <rcl_trigger_guard_condition+0x16>
 80171a6:	b508      	push	{r3, lr}
 80171a8:	6843      	ldr	r3, [r0, #4]
 80171aa:	b143      	cbz	r3, 80171be <rcl_trigger_guard_condition+0x1a>
 80171ac:	6818      	ldr	r0, [r3, #0]
 80171ae:	f000 f909 	bl	80173c4 <rmw_trigger_guard_condition>
 80171b2:	3800      	subs	r0, #0
 80171b4:	bf18      	it	ne
 80171b6:	2001      	movne	r0, #1
 80171b8:	bd08      	pop	{r3, pc}
 80171ba:	200b      	movs	r0, #11
 80171bc:	4770      	bx	lr
 80171be:	200b      	movs	r0, #11
 80171c0:	bd08      	pop	{r3, pc}
 80171c2:	bf00      	nop

080171c4 <rcl_guard_condition_get_rmw_handle>:
 80171c4:	b110      	cbz	r0, 80171cc <rcl_guard_condition_get_rmw_handle+0x8>
 80171c6:	6840      	ldr	r0, [r0, #4]
 80171c8:	b100      	cbz	r0, 80171cc <rcl_guard_condition_get_rmw_handle+0x8>
 80171ca:	6800      	ldr	r0, [r0, #0]
 80171cc:	4770      	bx	lr
 80171ce:	bf00      	nop

080171d0 <rcl_validate_topic_name>:
 80171d0:	2800      	cmp	r0, #0
 80171d2:	d07a      	beq.n	80172ca <rcl_validate_topic_name+0xfa>
 80171d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171d8:	460e      	mov	r6, r1
 80171da:	2900      	cmp	r1, #0
 80171dc:	d07c      	beq.n	80172d8 <rcl_validate_topic_name+0x108>
 80171de:	4617      	mov	r7, r2
 80171e0:	4605      	mov	r5, r0
 80171e2:	f7e9 f827 	bl	8000234 <strlen>
 80171e6:	b1b0      	cbz	r0, 8017216 <rcl_validate_topic_name+0x46>
 80171e8:	f895 9000 	ldrb.w	r9, [r5]
 80171ec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017370 <rcl_validate_topic_name+0x1a0>
 80171f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80171f4:	f013 0304 	ands.w	r3, r3, #4
 80171f8:	d169      	bne.n	80172ce <rcl_validate_topic_name+0xfe>
 80171fa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80171fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017202:	2a2f      	cmp	r2, #47	@ 0x2f
 8017204:	d10e      	bne.n	8017224 <rcl_validate_topic_name+0x54>
 8017206:	2202      	movs	r2, #2
 8017208:	6032      	str	r2, [r6, #0]
 801720a:	b36f      	cbz	r7, 8017268 <rcl_validate_topic_name+0x98>
 801720c:	f8c7 8000 	str.w	r8, [r7]
 8017210:	4618      	mov	r0, r3
 8017212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017216:	2301      	movs	r3, #1
 8017218:	6033      	str	r3, [r6, #0]
 801721a:	b32f      	cbz	r7, 8017268 <rcl_validate_topic_name+0x98>
 801721c:	2000      	movs	r0, #0
 801721e:	6038      	str	r0, [r7, #0]
 8017220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017224:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017228:	461c      	mov	r4, r3
 801722a:	4619      	mov	r1, r3
 801722c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017230:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017234:	f1be 0f09 	cmp.w	lr, #9
 8017238:	d919      	bls.n	801726e <rcl_validate_topic_name+0x9e>
 801723a:	f022 0e20 	bic.w	lr, r2, #32
 801723e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017242:	f1be 0f19 	cmp.w	lr, #25
 8017246:	d912      	bls.n	801726e <rcl_validate_topic_name+0x9e>
 8017248:	2a5f      	cmp	r2, #95	@ 0x5f
 801724a:	d019      	beq.n	8017280 <rcl_validate_topic_name+0xb0>
 801724c:	2a2f      	cmp	r2, #47	@ 0x2f
 801724e:	d051      	beq.n	80172f4 <rcl_validate_topic_name+0x124>
 8017250:	2a7e      	cmp	r2, #126	@ 0x7e
 8017252:	d048      	beq.n	80172e6 <rcl_validate_topic_name+0x116>
 8017254:	2a7b      	cmp	r2, #123	@ 0x7b
 8017256:	d054      	beq.n	8017302 <rcl_validate_topic_name+0x132>
 8017258:	2a7d      	cmp	r2, #125	@ 0x7d
 801725a:	d161      	bne.n	8017320 <rcl_validate_topic_name+0x150>
 801725c:	2c00      	cmp	r4, #0
 801725e:	d155      	bne.n	801730c <rcl_validate_topic_name+0x13c>
 8017260:	2305      	movs	r3, #5
 8017262:	6033      	str	r3, [r6, #0]
 8017264:	b107      	cbz	r7, 8017268 <rcl_validate_topic_name+0x98>
 8017266:	6039      	str	r1, [r7, #0]
 8017268:	2000      	movs	r0, #0
 801726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801726e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017272:	0752      	lsls	r2, r2, #29
 8017274:	d504      	bpl.n	8017280 <rcl_validate_topic_name+0xb0>
 8017276:	b11c      	cbz	r4, 8017280 <rcl_validate_topic_name+0xb0>
 8017278:	b111      	cbz	r1, 8017280 <rcl_validate_topic_name+0xb0>
 801727a:	1e4a      	subs	r2, r1, #1
 801727c:	429a      	cmp	r2, r3
 801727e:	d02d      	beq.n	80172dc <rcl_validate_topic_name+0x10c>
 8017280:	3101      	adds	r1, #1
 8017282:	4288      	cmp	r0, r1
 8017284:	d1d2      	bne.n	801722c <rcl_validate_topic_name+0x5c>
 8017286:	2c00      	cmp	r4, #0
 8017288:	d145      	bne.n	8017316 <rcl_validate_topic_name+0x146>
 801728a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801728e:	d04f      	beq.n	8017330 <rcl_validate_topic_name+0x160>
 8017290:	4620      	mov	r0, r4
 8017292:	2301      	movs	r3, #1
 8017294:	e006      	b.n	80172a4 <rcl_validate_topic_name+0xd4>
 8017296:	428b      	cmp	r3, r1
 8017298:	f105 0501 	add.w	r5, r5, #1
 801729c:	f103 0201 	add.w	r2, r3, #1
 80172a0:	d236      	bcs.n	8017310 <rcl_validate_topic_name+0x140>
 80172a2:	4613      	mov	r3, r2
 80172a4:	4580      	cmp	r8, r0
 80172a6:	f100 0001 	add.w	r0, r0, #1
 80172aa:	d0f4      	beq.n	8017296 <rcl_validate_topic_name+0xc6>
 80172ac:	782a      	ldrb	r2, [r5, #0]
 80172ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80172b0:	d1f1      	bne.n	8017296 <rcl_validate_topic_name+0xc6>
 80172b2:	786a      	ldrb	r2, [r5, #1]
 80172b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80172b8:	0754      	lsls	r4, r2, #29
 80172ba:	d5ec      	bpl.n	8017296 <rcl_validate_topic_name+0xc6>
 80172bc:	2204      	movs	r2, #4
 80172be:	6032      	str	r2, [r6, #0]
 80172c0:	2f00      	cmp	r7, #0
 80172c2:	d0d1      	beq.n	8017268 <rcl_validate_topic_name+0x98>
 80172c4:	603b      	str	r3, [r7, #0]
 80172c6:	2000      	movs	r0, #0
 80172c8:	e7aa      	b.n	8017220 <rcl_validate_topic_name+0x50>
 80172ca:	200b      	movs	r0, #11
 80172cc:	4770      	bx	lr
 80172ce:	2304      	movs	r3, #4
 80172d0:	6033      	str	r3, [r6, #0]
 80172d2:	2f00      	cmp	r7, #0
 80172d4:	d1a2      	bne.n	801721c <rcl_validate_topic_name+0x4c>
 80172d6:	e7c7      	b.n	8017268 <rcl_validate_topic_name+0x98>
 80172d8:	200b      	movs	r0, #11
 80172da:	e7a1      	b.n	8017220 <rcl_validate_topic_name+0x50>
 80172dc:	2309      	movs	r3, #9
 80172de:	6033      	str	r3, [r6, #0]
 80172e0:	2f00      	cmp	r7, #0
 80172e2:	d1c0      	bne.n	8017266 <rcl_validate_topic_name+0x96>
 80172e4:	e7c0      	b.n	8017268 <rcl_validate_topic_name+0x98>
 80172e6:	2900      	cmp	r1, #0
 80172e8:	d0ca      	beq.n	8017280 <rcl_validate_topic_name+0xb0>
 80172ea:	2306      	movs	r3, #6
 80172ec:	6033      	str	r3, [r6, #0]
 80172ee:	2f00      	cmp	r7, #0
 80172f0:	d1b9      	bne.n	8017266 <rcl_validate_topic_name+0x96>
 80172f2:	e7b9      	b.n	8017268 <rcl_validate_topic_name+0x98>
 80172f4:	2c00      	cmp	r4, #0
 80172f6:	d0c3      	beq.n	8017280 <rcl_validate_topic_name+0xb0>
 80172f8:	2308      	movs	r3, #8
 80172fa:	6033      	str	r3, [r6, #0]
 80172fc:	2f00      	cmp	r7, #0
 80172fe:	d1b2      	bne.n	8017266 <rcl_validate_topic_name+0x96>
 8017300:	e7b2      	b.n	8017268 <rcl_validate_topic_name+0x98>
 8017302:	2c00      	cmp	r4, #0
 8017304:	d1f8      	bne.n	80172f8 <rcl_validate_topic_name+0x128>
 8017306:	460b      	mov	r3, r1
 8017308:	2401      	movs	r4, #1
 801730a:	e7b9      	b.n	8017280 <rcl_validate_topic_name+0xb0>
 801730c:	2400      	movs	r4, #0
 801730e:	e7b7      	b.n	8017280 <rcl_validate_topic_name+0xb0>
 8017310:	2000      	movs	r0, #0
 8017312:	6030      	str	r0, [r6, #0]
 8017314:	e784      	b.n	8017220 <rcl_validate_topic_name+0x50>
 8017316:	2205      	movs	r2, #5
 8017318:	6032      	str	r2, [r6, #0]
 801731a:	2f00      	cmp	r7, #0
 801731c:	d1d2      	bne.n	80172c4 <rcl_validate_topic_name+0xf4>
 801731e:	e7a3      	b.n	8017268 <rcl_validate_topic_name+0x98>
 8017320:	2c00      	cmp	r4, #0
 8017322:	bf14      	ite	ne
 8017324:	2308      	movne	r3, #8
 8017326:	2303      	moveq	r3, #3
 8017328:	6033      	str	r3, [r6, #0]
 801732a:	2f00      	cmp	r7, #0
 801732c:	d19b      	bne.n	8017266 <rcl_validate_topic_name+0x96>
 801732e:	e79b      	b.n	8017268 <rcl_validate_topic_name+0x98>
 8017330:	2301      	movs	r3, #1
 8017332:	e00a      	b.n	801734a <rcl_validate_topic_name+0x17a>
 8017334:	2c01      	cmp	r4, #1
 8017336:	d013      	beq.n	8017360 <rcl_validate_topic_name+0x190>
 8017338:	4299      	cmp	r1, r3
 801733a:	f104 0401 	add.w	r4, r4, #1
 801733e:	f105 0501 	add.w	r5, r5, #1
 8017342:	f103 0201 	add.w	r2, r3, #1
 8017346:	d9e3      	bls.n	8017310 <rcl_validate_topic_name+0x140>
 8017348:	4613      	mov	r3, r2
 801734a:	45a0      	cmp	r8, r4
 801734c:	d0f4      	beq.n	8017338 <rcl_validate_topic_name+0x168>
 801734e:	782a      	ldrb	r2, [r5, #0]
 8017350:	2a2f      	cmp	r2, #47	@ 0x2f
 8017352:	d1ef      	bne.n	8017334 <rcl_validate_topic_name+0x164>
 8017354:	786a      	ldrb	r2, [r5, #1]
 8017356:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801735a:	0752      	lsls	r2, r2, #29
 801735c:	d5ec      	bpl.n	8017338 <rcl_validate_topic_name+0x168>
 801735e:	e7ad      	b.n	80172bc <rcl_validate_topic_name+0xec>
 8017360:	2307      	movs	r3, #7
 8017362:	6033      	str	r3, [r6, #0]
 8017364:	2f00      	cmp	r7, #0
 8017366:	f43f af7f 	beq.w	8017268 <rcl_validate_topic_name+0x98>
 801736a:	603c      	str	r4, [r7, #0]
 801736c:	2000      	movs	r0, #0
 801736e:	e757      	b.n	8017220 <rcl_validate_topic_name+0x50>
 8017370:	08019758 	.word	0x08019758

08017374 <rmw_create_guard_condition>:
 8017374:	b538      	push	{r3, r4, r5, lr}
 8017376:	4605      	mov	r5, r0
 8017378:	4807      	ldr	r0, [pc, #28]	@ (8017398 <rmw_create_guard_condition+0x24>)
 801737a:	f7fe f955 	bl	8015628 <get_memory>
 801737e:	b148      	cbz	r0, 8017394 <rmw_create_guard_condition+0x20>
 8017380:	6884      	ldr	r4, [r0, #8]
 8017382:	2300      	movs	r3, #0
 8017384:	7423      	strb	r3, [r4, #16]
 8017386:	61e5      	str	r5, [r4, #28]
 8017388:	f7fe f9b6 	bl	80156f8 <rmw_get_implementation_identifier>
 801738c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017390:	f104 0014 	add.w	r0, r4, #20
 8017394:	bd38      	pop	{r3, r4, r5, pc}
 8017396:	bf00      	nop
 8017398:	2000adcc 	.word	0x2000adcc

0801739c <rmw_destroy_guard_condition>:
 801739c:	b508      	push	{r3, lr}
 801739e:	4b08      	ldr	r3, [pc, #32]	@ (80173c0 <rmw_destroy_guard_condition+0x24>)
 80173a0:	6819      	ldr	r1, [r3, #0]
 80173a2:	b911      	cbnz	r1, 80173aa <rmw_destroy_guard_condition+0xe>
 80173a4:	e00a      	b.n	80173bc <rmw_destroy_guard_condition+0x20>
 80173a6:	6849      	ldr	r1, [r1, #4]
 80173a8:	b141      	cbz	r1, 80173bc <rmw_destroy_guard_condition+0x20>
 80173aa:	688b      	ldr	r3, [r1, #8]
 80173ac:	3314      	adds	r3, #20
 80173ae:	4298      	cmp	r0, r3
 80173b0:	d1f9      	bne.n	80173a6 <rmw_destroy_guard_condition+0xa>
 80173b2:	4803      	ldr	r0, [pc, #12]	@ (80173c0 <rmw_destroy_guard_condition+0x24>)
 80173b4:	f7fe f948 	bl	8015648 <put_memory>
 80173b8:	2000      	movs	r0, #0
 80173ba:	bd08      	pop	{r3, pc}
 80173bc:	2001      	movs	r0, #1
 80173be:	bd08      	pop	{r3, pc}
 80173c0:	2000adcc 	.word	0x2000adcc

080173c4 <rmw_trigger_guard_condition>:
 80173c4:	b160      	cbz	r0, 80173e0 <rmw_trigger_guard_condition+0x1c>
 80173c6:	b510      	push	{r4, lr}
 80173c8:	4604      	mov	r4, r0
 80173ca:	6800      	ldr	r0, [r0, #0]
 80173cc:	f7f7 f9a2 	bl	800e714 <is_uxrce_rmw_identifier_valid>
 80173d0:	b908      	cbnz	r0, 80173d6 <rmw_trigger_guard_condition+0x12>
 80173d2:	2001      	movs	r0, #1
 80173d4:	bd10      	pop	{r4, pc}
 80173d6:	6863      	ldr	r3, [r4, #4]
 80173d8:	2201      	movs	r2, #1
 80173da:	741a      	strb	r2, [r3, #16]
 80173dc:	2000      	movs	r0, #0
 80173de:	bd10      	pop	{r4, pc}
 80173e0:	2001      	movs	r0, #1
 80173e2:	4770      	bx	lr

080173e4 <calloc>:
 80173e4:	4b02      	ldr	r3, [pc, #8]	@ (80173f0 <calloc+0xc>)
 80173e6:	460a      	mov	r2, r1
 80173e8:	4601      	mov	r1, r0
 80173ea:	6818      	ldr	r0, [r3, #0]
 80173ec:	f000 b802 	b.w	80173f4 <_calloc_r>
 80173f0:	200001e4 	.word	0x200001e4

080173f4 <_calloc_r>:
 80173f4:	b570      	push	{r4, r5, r6, lr}
 80173f6:	fba1 5402 	umull	r5, r4, r1, r2
 80173fa:	b93c      	cbnz	r4, 801740c <_calloc_r+0x18>
 80173fc:	4629      	mov	r1, r5
 80173fe:	f000 f887 	bl	8017510 <_malloc_r>
 8017402:	4606      	mov	r6, r0
 8017404:	b928      	cbnz	r0, 8017412 <_calloc_r+0x1e>
 8017406:	2600      	movs	r6, #0
 8017408:	4630      	mov	r0, r6
 801740a:	bd70      	pop	{r4, r5, r6, pc}
 801740c:	220c      	movs	r2, #12
 801740e:	6002      	str	r2, [r0, #0]
 8017410:	e7f9      	b.n	8017406 <_calloc_r+0x12>
 8017412:	462a      	mov	r2, r5
 8017414:	4621      	mov	r1, r4
 8017416:	f000 fbcf 	bl	8017bb8 <memset>
 801741a:	e7f5      	b.n	8017408 <_calloc_r+0x14>

0801741c <getenv>:
 801741c:	b507      	push	{r0, r1, r2, lr}
 801741e:	4b04      	ldr	r3, [pc, #16]	@ (8017430 <getenv+0x14>)
 8017420:	4601      	mov	r1, r0
 8017422:	aa01      	add	r2, sp, #4
 8017424:	6818      	ldr	r0, [r3, #0]
 8017426:	f000 f805 	bl	8017434 <_findenv_r>
 801742a:	b003      	add	sp, #12
 801742c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017430:	200001e4 	.word	0x200001e4

08017434 <_findenv_r>:
 8017434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017438:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80174a8 <_findenv_r+0x74>
 801743c:	4606      	mov	r6, r0
 801743e:	4689      	mov	r9, r1
 8017440:	4617      	mov	r7, r2
 8017442:	f000 fcaf 	bl	8017da4 <__env_lock>
 8017446:	f8da 4000 	ldr.w	r4, [sl]
 801744a:	b134      	cbz	r4, 801745a <_findenv_r+0x26>
 801744c:	464b      	mov	r3, r9
 801744e:	4698      	mov	r8, r3
 8017450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017454:	b13a      	cbz	r2, 8017466 <_findenv_r+0x32>
 8017456:	2a3d      	cmp	r2, #61	@ 0x3d
 8017458:	d1f9      	bne.n	801744e <_findenv_r+0x1a>
 801745a:	4630      	mov	r0, r6
 801745c:	f000 fca8 	bl	8017db0 <__env_unlock>
 8017460:	2000      	movs	r0, #0
 8017462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017466:	eba8 0809 	sub.w	r8, r8, r9
 801746a:	46a3      	mov	fp, r4
 801746c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017470:	2800      	cmp	r0, #0
 8017472:	d0f2      	beq.n	801745a <_findenv_r+0x26>
 8017474:	4642      	mov	r2, r8
 8017476:	4649      	mov	r1, r9
 8017478:	f000 fbb3 	bl	8017be2 <strncmp>
 801747c:	2800      	cmp	r0, #0
 801747e:	d1f4      	bne.n	801746a <_findenv_r+0x36>
 8017480:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017484:	eb03 0508 	add.w	r5, r3, r8
 8017488:	f813 3008 	ldrb.w	r3, [r3, r8]
 801748c:	2b3d      	cmp	r3, #61	@ 0x3d
 801748e:	d1ec      	bne.n	801746a <_findenv_r+0x36>
 8017490:	f8da 3000 	ldr.w	r3, [sl]
 8017494:	ebab 0303 	sub.w	r3, fp, r3
 8017498:	109b      	asrs	r3, r3, #2
 801749a:	4630      	mov	r0, r6
 801749c:	603b      	str	r3, [r7, #0]
 801749e:	f000 fc87 	bl	8017db0 <__env_unlock>
 80174a2:	1c68      	adds	r0, r5, #1
 80174a4:	e7dd      	b.n	8017462 <_findenv_r+0x2e>
 80174a6:	bf00      	nop
 80174a8:	20000000 	.word	0x20000000

080174ac <malloc>:
 80174ac:	4b02      	ldr	r3, [pc, #8]	@ (80174b8 <malloc+0xc>)
 80174ae:	4601      	mov	r1, r0
 80174b0:	6818      	ldr	r0, [r3, #0]
 80174b2:	f000 b82d 	b.w	8017510 <_malloc_r>
 80174b6:	bf00      	nop
 80174b8:	200001e4 	.word	0x200001e4

080174bc <free>:
 80174bc:	4b02      	ldr	r3, [pc, #8]	@ (80174c8 <free+0xc>)
 80174be:	4601      	mov	r1, r0
 80174c0:	6818      	ldr	r0, [r3, #0]
 80174c2:	f000 bc7b 	b.w	8017dbc <_free_r>
 80174c6:	bf00      	nop
 80174c8:	200001e4 	.word	0x200001e4

080174cc <sbrk_aligned>:
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	4e0f      	ldr	r6, [pc, #60]	@ (801750c <sbrk_aligned+0x40>)
 80174d0:	460c      	mov	r4, r1
 80174d2:	6831      	ldr	r1, [r6, #0]
 80174d4:	4605      	mov	r5, r0
 80174d6:	b911      	cbnz	r1, 80174de <sbrk_aligned+0x12>
 80174d8:	f000 fbe0 	bl	8017c9c <_sbrk_r>
 80174dc:	6030      	str	r0, [r6, #0]
 80174de:	4621      	mov	r1, r4
 80174e0:	4628      	mov	r0, r5
 80174e2:	f000 fbdb 	bl	8017c9c <_sbrk_r>
 80174e6:	1c43      	adds	r3, r0, #1
 80174e8:	d103      	bne.n	80174f2 <sbrk_aligned+0x26>
 80174ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80174ee:	4620      	mov	r0, r4
 80174f0:	bd70      	pop	{r4, r5, r6, pc}
 80174f2:	1cc4      	adds	r4, r0, #3
 80174f4:	f024 0403 	bic.w	r4, r4, #3
 80174f8:	42a0      	cmp	r0, r4
 80174fa:	d0f8      	beq.n	80174ee <sbrk_aligned+0x22>
 80174fc:	1a21      	subs	r1, r4, r0
 80174fe:	4628      	mov	r0, r5
 8017500:	f000 fbcc 	bl	8017c9c <_sbrk_r>
 8017504:	3001      	adds	r0, #1
 8017506:	d1f2      	bne.n	80174ee <sbrk_aligned+0x22>
 8017508:	e7ef      	b.n	80174ea <sbrk_aligned+0x1e>
 801750a:	bf00      	nop
 801750c:	2000af44 	.word	0x2000af44

08017510 <_malloc_r>:
 8017510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017514:	1ccd      	adds	r5, r1, #3
 8017516:	f025 0503 	bic.w	r5, r5, #3
 801751a:	3508      	adds	r5, #8
 801751c:	2d0c      	cmp	r5, #12
 801751e:	bf38      	it	cc
 8017520:	250c      	movcc	r5, #12
 8017522:	2d00      	cmp	r5, #0
 8017524:	4606      	mov	r6, r0
 8017526:	db01      	blt.n	801752c <_malloc_r+0x1c>
 8017528:	42a9      	cmp	r1, r5
 801752a:	d904      	bls.n	8017536 <_malloc_r+0x26>
 801752c:	230c      	movs	r3, #12
 801752e:	6033      	str	r3, [r6, #0]
 8017530:	2000      	movs	r0, #0
 8017532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801760c <_malloc_r+0xfc>
 801753a:	f000 f869 	bl	8017610 <__malloc_lock>
 801753e:	f8d8 3000 	ldr.w	r3, [r8]
 8017542:	461c      	mov	r4, r3
 8017544:	bb44      	cbnz	r4, 8017598 <_malloc_r+0x88>
 8017546:	4629      	mov	r1, r5
 8017548:	4630      	mov	r0, r6
 801754a:	f7ff ffbf 	bl	80174cc <sbrk_aligned>
 801754e:	1c43      	adds	r3, r0, #1
 8017550:	4604      	mov	r4, r0
 8017552:	d158      	bne.n	8017606 <_malloc_r+0xf6>
 8017554:	f8d8 4000 	ldr.w	r4, [r8]
 8017558:	4627      	mov	r7, r4
 801755a:	2f00      	cmp	r7, #0
 801755c:	d143      	bne.n	80175e6 <_malloc_r+0xd6>
 801755e:	2c00      	cmp	r4, #0
 8017560:	d04b      	beq.n	80175fa <_malloc_r+0xea>
 8017562:	6823      	ldr	r3, [r4, #0]
 8017564:	4639      	mov	r1, r7
 8017566:	4630      	mov	r0, r6
 8017568:	eb04 0903 	add.w	r9, r4, r3
 801756c:	f000 fb96 	bl	8017c9c <_sbrk_r>
 8017570:	4581      	cmp	r9, r0
 8017572:	d142      	bne.n	80175fa <_malloc_r+0xea>
 8017574:	6821      	ldr	r1, [r4, #0]
 8017576:	1a6d      	subs	r5, r5, r1
 8017578:	4629      	mov	r1, r5
 801757a:	4630      	mov	r0, r6
 801757c:	f7ff ffa6 	bl	80174cc <sbrk_aligned>
 8017580:	3001      	adds	r0, #1
 8017582:	d03a      	beq.n	80175fa <_malloc_r+0xea>
 8017584:	6823      	ldr	r3, [r4, #0]
 8017586:	442b      	add	r3, r5
 8017588:	6023      	str	r3, [r4, #0]
 801758a:	f8d8 3000 	ldr.w	r3, [r8]
 801758e:	685a      	ldr	r2, [r3, #4]
 8017590:	bb62      	cbnz	r2, 80175ec <_malloc_r+0xdc>
 8017592:	f8c8 7000 	str.w	r7, [r8]
 8017596:	e00f      	b.n	80175b8 <_malloc_r+0xa8>
 8017598:	6822      	ldr	r2, [r4, #0]
 801759a:	1b52      	subs	r2, r2, r5
 801759c:	d420      	bmi.n	80175e0 <_malloc_r+0xd0>
 801759e:	2a0b      	cmp	r2, #11
 80175a0:	d917      	bls.n	80175d2 <_malloc_r+0xc2>
 80175a2:	1961      	adds	r1, r4, r5
 80175a4:	42a3      	cmp	r3, r4
 80175a6:	6025      	str	r5, [r4, #0]
 80175a8:	bf18      	it	ne
 80175aa:	6059      	strne	r1, [r3, #4]
 80175ac:	6863      	ldr	r3, [r4, #4]
 80175ae:	bf08      	it	eq
 80175b0:	f8c8 1000 	streq.w	r1, [r8]
 80175b4:	5162      	str	r2, [r4, r5]
 80175b6:	604b      	str	r3, [r1, #4]
 80175b8:	4630      	mov	r0, r6
 80175ba:	f000 f82f 	bl	801761c <__malloc_unlock>
 80175be:	f104 000b 	add.w	r0, r4, #11
 80175c2:	1d23      	adds	r3, r4, #4
 80175c4:	f020 0007 	bic.w	r0, r0, #7
 80175c8:	1ac2      	subs	r2, r0, r3
 80175ca:	bf1c      	itt	ne
 80175cc:	1a1b      	subne	r3, r3, r0
 80175ce:	50a3      	strne	r3, [r4, r2]
 80175d0:	e7af      	b.n	8017532 <_malloc_r+0x22>
 80175d2:	6862      	ldr	r2, [r4, #4]
 80175d4:	42a3      	cmp	r3, r4
 80175d6:	bf0c      	ite	eq
 80175d8:	f8c8 2000 	streq.w	r2, [r8]
 80175dc:	605a      	strne	r2, [r3, #4]
 80175de:	e7eb      	b.n	80175b8 <_malloc_r+0xa8>
 80175e0:	4623      	mov	r3, r4
 80175e2:	6864      	ldr	r4, [r4, #4]
 80175e4:	e7ae      	b.n	8017544 <_malloc_r+0x34>
 80175e6:	463c      	mov	r4, r7
 80175e8:	687f      	ldr	r7, [r7, #4]
 80175ea:	e7b6      	b.n	801755a <_malloc_r+0x4a>
 80175ec:	461a      	mov	r2, r3
 80175ee:	685b      	ldr	r3, [r3, #4]
 80175f0:	42a3      	cmp	r3, r4
 80175f2:	d1fb      	bne.n	80175ec <_malloc_r+0xdc>
 80175f4:	2300      	movs	r3, #0
 80175f6:	6053      	str	r3, [r2, #4]
 80175f8:	e7de      	b.n	80175b8 <_malloc_r+0xa8>
 80175fa:	230c      	movs	r3, #12
 80175fc:	6033      	str	r3, [r6, #0]
 80175fe:	4630      	mov	r0, r6
 8017600:	f000 f80c 	bl	801761c <__malloc_unlock>
 8017604:	e794      	b.n	8017530 <_malloc_r+0x20>
 8017606:	6005      	str	r5, [r0, #0]
 8017608:	e7d6      	b.n	80175b8 <_malloc_r+0xa8>
 801760a:	bf00      	nop
 801760c:	2000af48 	.word	0x2000af48

08017610 <__malloc_lock>:
 8017610:	4801      	ldr	r0, [pc, #4]	@ (8017618 <__malloc_lock+0x8>)
 8017612:	f000 bb90 	b.w	8017d36 <__retarget_lock_acquire_recursive>
 8017616:	bf00      	nop
 8017618:	2000b08d 	.word	0x2000b08d

0801761c <__malloc_unlock>:
 801761c:	4801      	ldr	r0, [pc, #4]	@ (8017624 <__malloc_unlock+0x8>)
 801761e:	f000 bb8b 	b.w	8017d38 <__retarget_lock_release_recursive>
 8017622:	bf00      	nop
 8017624:	2000b08d 	.word	0x2000b08d

08017628 <srand>:
 8017628:	b538      	push	{r3, r4, r5, lr}
 801762a:	4b10      	ldr	r3, [pc, #64]	@ (801766c <srand+0x44>)
 801762c:	681d      	ldr	r5, [r3, #0]
 801762e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017630:	4604      	mov	r4, r0
 8017632:	b9b3      	cbnz	r3, 8017662 <srand+0x3a>
 8017634:	2018      	movs	r0, #24
 8017636:	f7ff ff39 	bl	80174ac <malloc>
 801763a:	4602      	mov	r2, r0
 801763c:	6328      	str	r0, [r5, #48]	@ 0x30
 801763e:	b920      	cbnz	r0, 801764a <srand+0x22>
 8017640:	4b0b      	ldr	r3, [pc, #44]	@ (8017670 <srand+0x48>)
 8017642:	480c      	ldr	r0, [pc, #48]	@ (8017674 <srand+0x4c>)
 8017644:	2146      	movs	r1, #70	@ 0x46
 8017646:	f000 fb8f 	bl	8017d68 <__assert_func>
 801764a:	490b      	ldr	r1, [pc, #44]	@ (8017678 <srand+0x50>)
 801764c:	4b0b      	ldr	r3, [pc, #44]	@ (801767c <srand+0x54>)
 801764e:	e9c0 1300 	strd	r1, r3, [r0]
 8017652:	4b0b      	ldr	r3, [pc, #44]	@ (8017680 <srand+0x58>)
 8017654:	6083      	str	r3, [r0, #8]
 8017656:	230b      	movs	r3, #11
 8017658:	8183      	strh	r3, [r0, #12]
 801765a:	2100      	movs	r1, #0
 801765c:	2001      	movs	r0, #1
 801765e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017662:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017664:	2200      	movs	r2, #0
 8017666:	611c      	str	r4, [r3, #16]
 8017668:	615a      	str	r2, [r3, #20]
 801766a:	bd38      	pop	{r3, r4, r5, pc}
 801766c:	200001e4 	.word	0x200001e4
 8017670:	080196e8 	.word	0x080196e8
 8017674:	080196ff 	.word	0x080196ff
 8017678:	abcd330e 	.word	0xabcd330e
 801767c:	e66d1234 	.word	0xe66d1234
 8017680:	0005deec 	.word	0x0005deec

08017684 <rand>:
 8017684:	4b16      	ldr	r3, [pc, #88]	@ (80176e0 <rand+0x5c>)
 8017686:	b510      	push	{r4, lr}
 8017688:	681c      	ldr	r4, [r3, #0]
 801768a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801768c:	b9b3      	cbnz	r3, 80176bc <rand+0x38>
 801768e:	2018      	movs	r0, #24
 8017690:	f7ff ff0c 	bl	80174ac <malloc>
 8017694:	4602      	mov	r2, r0
 8017696:	6320      	str	r0, [r4, #48]	@ 0x30
 8017698:	b920      	cbnz	r0, 80176a4 <rand+0x20>
 801769a:	4b12      	ldr	r3, [pc, #72]	@ (80176e4 <rand+0x60>)
 801769c:	4812      	ldr	r0, [pc, #72]	@ (80176e8 <rand+0x64>)
 801769e:	2152      	movs	r1, #82	@ 0x52
 80176a0:	f000 fb62 	bl	8017d68 <__assert_func>
 80176a4:	4911      	ldr	r1, [pc, #68]	@ (80176ec <rand+0x68>)
 80176a6:	4b12      	ldr	r3, [pc, #72]	@ (80176f0 <rand+0x6c>)
 80176a8:	e9c0 1300 	strd	r1, r3, [r0]
 80176ac:	4b11      	ldr	r3, [pc, #68]	@ (80176f4 <rand+0x70>)
 80176ae:	6083      	str	r3, [r0, #8]
 80176b0:	230b      	movs	r3, #11
 80176b2:	8183      	strh	r3, [r0, #12]
 80176b4:	2100      	movs	r1, #0
 80176b6:	2001      	movs	r0, #1
 80176b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80176bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80176be:	480e      	ldr	r0, [pc, #56]	@ (80176f8 <rand+0x74>)
 80176c0:	690b      	ldr	r3, [r1, #16]
 80176c2:	694c      	ldr	r4, [r1, #20]
 80176c4:	4a0d      	ldr	r2, [pc, #52]	@ (80176fc <rand+0x78>)
 80176c6:	4358      	muls	r0, r3
 80176c8:	fb02 0004 	mla	r0, r2, r4, r0
 80176cc:	fba3 3202 	umull	r3, r2, r3, r2
 80176d0:	3301      	adds	r3, #1
 80176d2:	eb40 0002 	adc.w	r0, r0, r2
 80176d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80176da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80176de:	bd10      	pop	{r4, pc}
 80176e0:	200001e4 	.word	0x200001e4
 80176e4:	080196e8 	.word	0x080196e8
 80176e8:	080196ff 	.word	0x080196ff
 80176ec:	abcd330e 	.word	0xabcd330e
 80176f0:	e66d1234 	.word	0xe66d1234
 80176f4:	0005deec 	.word	0x0005deec
 80176f8:	5851f42d 	.word	0x5851f42d
 80176fc:	4c957f2d 	.word	0x4c957f2d

08017700 <realloc>:
 8017700:	4b02      	ldr	r3, [pc, #8]	@ (801770c <realloc+0xc>)
 8017702:	460a      	mov	r2, r1
 8017704:	4601      	mov	r1, r0
 8017706:	6818      	ldr	r0, [r3, #0]
 8017708:	f000 b802 	b.w	8017710 <_realloc_r>
 801770c:	200001e4 	.word	0x200001e4

08017710 <_realloc_r>:
 8017710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017714:	4680      	mov	r8, r0
 8017716:	4615      	mov	r5, r2
 8017718:	460c      	mov	r4, r1
 801771a:	b921      	cbnz	r1, 8017726 <_realloc_r+0x16>
 801771c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017720:	4611      	mov	r1, r2
 8017722:	f7ff bef5 	b.w	8017510 <_malloc_r>
 8017726:	b92a      	cbnz	r2, 8017734 <_realloc_r+0x24>
 8017728:	f000 fb48 	bl	8017dbc <_free_r>
 801772c:	2400      	movs	r4, #0
 801772e:	4620      	mov	r0, r4
 8017730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017734:	f000 fb8c 	bl	8017e50 <_malloc_usable_size_r>
 8017738:	4285      	cmp	r5, r0
 801773a:	4606      	mov	r6, r0
 801773c:	d802      	bhi.n	8017744 <_realloc_r+0x34>
 801773e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017742:	d8f4      	bhi.n	801772e <_realloc_r+0x1e>
 8017744:	4629      	mov	r1, r5
 8017746:	4640      	mov	r0, r8
 8017748:	f7ff fee2 	bl	8017510 <_malloc_r>
 801774c:	4607      	mov	r7, r0
 801774e:	2800      	cmp	r0, #0
 8017750:	d0ec      	beq.n	801772c <_realloc_r+0x1c>
 8017752:	42b5      	cmp	r5, r6
 8017754:	462a      	mov	r2, r5
 8017756:	4621      	mov	r1, r4
 8017758:	bf28      	it	cs
 801775a:	4632      	movcs	r2, r6
 801775c:	f000 faf5 	bl	8017d4a <memcpy>
 8017760:	4621      	mov	r1, r4
 8017762:	4640      	mov	r0, r8
 8017764:	f000 fb2a 	bl	8017dbc <_free_r>
 8017768:	463c      	mov	r4, r7
 801776a:	e7e0      	b.n	801772e <_realloc_r+0x1e>

0801776c <_strtoul_l.constprop.0>:
 801776c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017770:	4e34      	ldr	r6, [pc, #208]	@ (8017844 <_strtoul_l.constprop.0+0xd8>)
 8017772:	4686      	mov	lr, r0
 8017774:	460d      	mov	r5, r1
 8017776:	4628      	mov	r0, r5
 8017778:	f815 4b01 	ldrb.w	r4, [r5], #1
 801777c:	5d37      	ldrb	r7, [r6, r4]
 801777e:	f017 0708 	ands.w	r7, r7, #8
 8017782:	d1f8      	bne.n	8017776 <_strtoul_l.constprop.0+0xa>
 8017784:	2c2d      	cmp	r4, #45	@ 0x2d
 8017786:	d12f      	bne.n	80177e8 <_strtoul_l.constprop.0+0x7c>
 8017788:	782c      	ldrb	r4, [r5, #0]
 801778a:	2701      	movs	r7, #1
 801778c:	1c85      	adds	r5, r0, #2
 801778e:	f033 0010 	bics.w	r0, r3, #16
 8017792:	d109      	bne.n	80177a8 <_strtoul_l.constprop.0+0x3c>
 8017794:	2c30      	cmp	r4, #48	@ 0x30
 8017796:	d12c      	bne.n	80177f2 <_strtoul_l.constprop.0+0x86>
 8017798:	7828      	ldrb	r0, [r5, #0]
 801779a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801779e:	2858      	cmp	r0, #88	@ 0x58
 80177a0:	d127      	bne.n	80177f2 <_strtoul_l.constprop.0+0x86>
 80177a2:	786c      	ldrb	r4, [r5, #1]
 80177a4:	2310      	movs	r3, #16
 80177a6:	3502      	adds	r5, #2
 80177a8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80177ac:	2600      	movs	r6, #0
 80177ae:	fbb8 f8f3 	udiv	r8, r8, r3
 80177b2:	fb03 f908 	mul.w	r9, r3, r8
 80177b6:	ea6f 0909 	mvn.w	r9, r9
 80177ba:	4630      	mov	r0, r6
 80177bc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80177c0:	f1bc 0f09 	cmp.w	ip, #9
 80177c4:	d81c      	bhi.n	8017800 <_strtoul_l.constprop.0+0x94>
 80177c6:	4664      	mov	r4, ip
 80177c8:	42a3      	cmp	r3, r4
 80177ca:	dd2a      	ble.n	8017822 <_strtoul_l.constprop.0+0xb6>
 80177cc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80177d0:	d007      	beq.n	80177e2 <_strtoul_l.constprop.0+0x76>
 80177d2:	4580      	cmp	r8, r0
 80177d4:	d322      	bcc.n	801781c <_strtoul_l.constprop.0+0xb0>
 80177d6:	d101      	bne.n	80177dc <_strtoul_l.constprop.0+0x70>
 80177d8:	45a1      	cmp	r9, r4
 80177da:	db1f      	blt.n	801781c <_strtoul_l.constprop.0+0xb0>
 80177dc:	fb00 4003 	mla	r0, r0, r3, r4
 80177e0:	2601      	movs	r6, #1
 80177e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177e6:	e7e9      	b.n	80177bc <_strtoul_l.constprop.0+0x50>
 80177e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80177ea:	bf04      	itt	eq
 80177ec:	782c      	ldrbeq	r4, [r5, #0]
 80177ee:	1c85      	addeq	r5, r0, #2
 80177f0:	e7cd      	b.n	801778e <_strtoul_l.constprop.0+0x22>
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d1d8      	bne.n	80177a8 <_strtoul_l.constprop.0+0x3c>
 80177f6:	2c30      	cmp	r4, #48	@ 0x30
 80177f8:	bf0c      	ite	eq
 80177fa:	2308      	moveq	r3, #8
 80177fc:	230a      	movne	r3, #10
 80177fe:	e7d3      	b.n	80177a8 <_strtoul_l.constprop.0+0x3c>
 8017800:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017804:	f1bc 0f19 	cmp.w	ip, #25
 8017808:	d801      	bhi.n	801780e <_strtoul_l.constprop.0+0xa2>
 801780a:	3c37      	subs	r4, #55	@ 0x37
 801780c:	e7dc      	b.n	80177c8 <_strtoul_l.constprop.0+0x5c>
 801780e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017812:	f1bc 0f19 	cmp.w	ip, #25
 8017816:	d804      	bhi.n	8017822 <_strtoul_l.constprop.0+0xb6>
 8017818:	3c57      	subs	r4, #87	@ 0x57
 801781a:	e7d5      	b.n	80177c8 <_strtoul_l.constprop.0+0x5c>
 801781c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017820:	e7df      	b.n	80177e2 <_strtoul_l.constprop.0+0x76>
 8017822:	1c73      	adds	r3, r6, #1
 8017824:	d106      	bne.n	8017834 <_strtoul_l.constprop.0+0xc8>
 8017826:	2322      	movs	r3, #34	@ 0x22
 8017828:	f8ce 3000 	str.w	r3, [lr]
 801782c:	4630      	mov	r0, r6
 801782e:	b932      	cbnz	r2, 801783e <_strtoul_l.constprop.0+0xd2>
 8017830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017834:	b107      	cbz	r7, 8017838 <_strtoul_l.constprop.0+0xcc>
 8017836:	4240      	negs	r0, r0
 8017838:	2a00      	cmp	r2, #0
 801783a:	d0f9      	beq.n	8017830 <_strtoul_l.constprop.0+0xc4>
 801783c:	b106      	cbz	r6, 8017840 <_strtoul_l.constprop.0+0xd4>
 801783e:	1e69      	subs	r1, r5, #1
 8017840:	6011      	str	r1, [r2, #0]
 8017842:	e7f5      	b.n	8017830 <_strtoul_l.constprop.0+0xc4>
 8017844:	08019758 	.word	0x08019758

08017848 <strtoul>:
 8017848:	4613      	mov	r3, r2
 801784a:	460a      	mov	r2, r1
 801784c:	4601      	mov	r1, r0
 801784e:	4802      	ldr	r0, [pc, #8]	@ (8017858 <strtoul+0x10>)
 8017850:	6800      	ldr	r0, [r0, #0]
 8017852:	f7ff bf8b 	b.w	801776c <_strtoul_l.constprop.0>
 8017856:	bf00      	nop
 8017858:	200001e4 	.word	0x200001e4

0801785c <std>:
 801785c:	2300      	movs	r3, #0
 801785e:	b510      	push	{r4, lr}
 8017860:	4604      	mov	r4, r0
 8017862:	e9c0 3300 	strd	r3, r3, [r0]
 8017866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801786a:	6083      	str	r3, [r0, #8]
 801786c:	8181      	strh	r1, [r0, #12]
 801786e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017870:	81c2      	strh	r2, [r0, #14]
 8017872:	6183      	str	r3, [r0, #24]
 8017874:	4619      	mov	r1, r3
 8017876:	2208      	movs	r2, #8
 8017878:	305c      	adds	r0, #92	@ 0x5c
 801787a:	f000 f99d 	bl	8017bb8 <memset>
 801787e:	4b0d      	ldr	r3, [pc, #52]	@ (80178b4 <std+0x58>)
 8017880:	6263      	str	r3, [r4, #36]	@ 0x24
 8017882:	4b0d      	ldr	r3, [pc, #52]	@ (80178b8 <std+0x5c>)
 8017884:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017886:	4b0d      	ldr	r3, [pc, #52]	@ (80178bc <std+0x60>)
 8017888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801788a:	4b0d      	ldr	r3, [pc, #52]	@ (80178c0 <std+0x64>)
 801788c:	6323      	str	r3, [r4, #48]	@ 0x30
 801788e:	4b0d      	ldr	r3, [pc, #52]	@ (80178c4 <std+0x68>)
 8017890:	6224      	str	r4, [r4, #32]
 8017892:	429c      	cmp	r4, r3
 8017894:	d006      	beq.n	80178a4 <std+0x48>
 8017896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801789a:	4294      	cmp	r4, r2
 801789c:	d002      	beq.n	80178a4 <std+0x48>
 801789e:	33d0      	adds	r3, #208	@ 0xd0
 80178a0:	429c      	cmp	r4, r3
 80178a2:	d105      	bne.n	80178b0 <std+0x54>
 80178a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80178a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178ac:	f000 ba42 	b.w	8017d34 <__retarget_lock_init_recursive>
 80178b0:	bd10      	pop	{r4, pc}
 80178b2:	bf00      	nop
 80178b4:	08017a6d 	.word	0x08017a6d
 80178b8:	08017a8f 	.word	0x08017a8f
 80178bc:	08017ac7 	.word	0x08017ac7
 80178c0:	08017aeb 	.word	0x08017aeb
 80178c4:	2000af4c 	.word	0x2000af4c

080178c8 <stdio_exit_handler>:
 80178c8:	4a02      	ldr	r2, [pc, #8]	@ (80178d4 <stdio_exit_handler+0xc>)
 80178ca:	4903      	ldr	r1, [pc, #12]	@ (80178d8 <stdio_exit_handler+0x10>)
 80178cc:	4803      	ldr	r0, [pc, #12]	@ (80178dc <stdio_exit_handler+0x14>)
 80178ce:	f000 b869 	b.w	80179a4 <_fwalk_sglue>
 80178d2:	bf00      	nop
 80178d4:	200001d8 	.word	0x200001d8
 80178d8:	080187b9 	.word	0x080187b9
 80178dc:	200001e8 	.word	0x200001e8

080178e0 <cleanup_stdio>:
 80178e0:	6841      	ldr	r1, [r0, #4]
 80178e2:	4b0c      	ldr	r3, [pc, #48]	@ (8017914 <cleanup_stdio+0x34>)
 80178e4:	4299      	cmp	r1, r3
 80178e6:	b510      	push	{r4, lr}
 80178e8:	4604      	mov	r4, r0
 80178ea:	d001      	beq.n	80178f0 <cleanup_stdio+0x10>
 80178ec:	f000 ff64 	bl	80187b8 <_fflush_r>
 80178f0:	68a1      	ldr	r1, [r4, #8]
 80178f2:	4b09      	ldr	r3, [pc, #36]	@ (8017918 <cleanup_stdio+0x38>)
 80178f4:	4299      	cmp	r1, r3
 80178f6:	d002      	beq.n	80178fe <cleanup_stdio+0x1e>
 80178f8:	4620      	mov	r0, r4
 80178fa:	f000 ff5d 	bl	80187b8 <_fflush_r>
 80178fe:	68e1      	ldr	r1, [r4, #12]
 8017900:	4b06      	ldr	r3, [pc, #24]	@ (801791c <cleanup_stdio+0x3c>)
 8017902:	4299      	cmp	r1, r3
 8017904:	d004      	beq.n	8017910 <cleanup_stdio+0x30>
 8017906:	4620      	mov	r0, r4
 8017908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801790c:	f000 bf54 	b.w	80187b8 <_fflush_r>
 8017910:	bd10      	pop	{r4, pc}
 8017912:	bf00      	nop
 8017914:	2000af4c 	.word	0x2000af4c
 8017918:	2000afb4 	.word	0x2000afb4
 801791c:	2000b01c 	.word	0x2000b01c

08017920 <global_stdio_init.part.0>:
 8017920:	b510      	push	{r4, lr}
 8017922:	4b0b      	ldr	r3, [pc, #44]	@ (8017950 <global_stdio_init.part.0+0x30>)
 8017924:	4c0b      	ldr	r4, [pc, #44]	@ (8017954 <global_stdio_init.part.0+0x34>)
 8017926:	4a0c      	ldr	r2, [pc, #48]	@ (8017958 <global_stdio_init.part.0+0x38>)
 8017928:	601a      	str	r2, [r3, #0]
 801792a:	4620      	mov	r0, r4
 801792c:	2200      	movs	r2, #0
 801792e:	2104      	movs	r1, #4
 8017930:	f7ff ff94 	bl	801785c <std>
 8017934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017938:	2201      	movs	r2, #1
 801793a:	2109      	movs	r1, #9
 801793c:	f7ff ff8e 	bl	801785c <std>
 8017940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017944:	2202      	movs	r2, #2
 8017946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801794a:	2112      	movs	r1, #18
 801794c:	f7ff bf86 	b.w	801785c <std>
 8017950:	2000b084 	.word	0x2000b084
 8017954:	2000af4c 	.word	0x2000af4c
 8017958:	080178c9 	.word	0x080178c9

0801795c <__sfp_lock_acquire>:
 801795c:	4801      	ldr	r0, [pc, #4]	@ (8017964 <__sfp_lock_acquire+0x8>)
 801795e:	f000 b9ea 	b.w	8017d36 <__retarget_lock_acquire_recursive>
 8017962:	bf00      	nop
 8017964:	2000b08e 	.word	0x2000b08e

08017968 <__sfp_lock_release>:
 8017968:	4801      	ldr	r0, [pc, #4]	@ (8017970 <__sfp_lock_release+0x8>)
 801796a:	f000 b9e5 	b.w	8017d38 <__retarget_lock_release_recursive>
 801796e:	bf00      	nop
 8017970:	2000b08e 	.word	0x2000b08e

08017974 <__sinit>:
 8017974:	b510      	push	{r4, lr}
 8017976:	4604      	mov	r4, r0
 8017978:	f7ff fff0 	bl	801795c <__sfp_lock_acquire>
 801797c:	6a23      	ldr	r3, [r4, #32]
 801797e:	b11b      	cbz	r3, 8017988 <__sinit+0x14>
 8017980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017984:	f7ff bff0 	b.w	8017968 <__sfp_lock_release>
 8017988:	4b04      	ldr	r3, [pc, #16]	@ (801799c <__sinit+0x28>)
 801798a:	6223      	str	r3, [r4, #32]
 801798c:	4b04      	ldr	r3, [pc, #16]	@ (80179a0 <__sinit+0x2c>)
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d1f5      	bne.n	8017980 <__sinit+0xc>
 8017994:	f7ff ffc4 	bl	8017920 <global_stdio_init.part.0>
 8017998:	e7f2      	b.n	8017980 <__sinit+0xc>
 801799a:	bf00      	nop
 801799c:	080178e1 	.word	0x080178e1
 80179a0:	2000b084 	.word	0x2000b084

080179a4 <_fwalk_sglue>:
 80179a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179a8:	4607      	mov	r7, r0
 80179aa:	4688      	mov	r8, r1
 80179ac:	4614      	mov	r4, r2
 80179ae:	2600      	movs	r6, #0
 80179b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80179b4:	f1b9 0901 	subs.w	r9, r9, #1
 80179b8:	d505      	bpl.n	80179c6 <_fwalk_sglue+0x22>
 80179ba:	6824      	ldr	r4, [r4, #0]
 80179bc:	2c00      	cmp	r4, #0
 80179be:	d1f7      	bne.n	80179b0 <_fwalk_sglue+0xc>
 80179c0:	4630      	mov	r0, r6
 80179c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179c6:	89ab      	ldrh	r3, [r5, #12]
 80179c8:	2b01      	cmp	r3, #1
 80179ca:	d907      	bls.n	80179dc <_fwalk_sglue+0x38>
 80179cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179d0:	3301      	adds	r3, #1
 80179d2:	d003      	beq.n	80179dc <_fwalk_sglue+0x38>
 80179d4:	4629      	mov	r1, r5
 80179d6:	4638      	mov	r0, r7
 80179d8:	47c0      	blx	r8
 80179da:	4306      	orrs	r6, r0
 80179dc:	3568      	adds	r5, #104	@ 0x68
 80179de:	e7e9      	b.n	80179b4 <_fwalk_sglue+0x10>

080179e0 <iprintf>:
 80179e0:	b40f      	push	{r0, r1, r2, r3}
 80179e2:	b507      	push	{r0, r1, r2, lr}
 80179e4:	4906      	ldr	r1, [pc, #24]	@ (8017a00 <iprintf+0x20>)
 80179e6:	ab04      	add	r3, sp, #16
 80179e8:	6808      	ldr	r0, [r1, #0]
 80179ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80179ee:	6881      	ldr	r1, [r0, #8]
 80179f0:	9301      	str	r3, [sp, #4]
 80179f2:	f000 fbb7 	bl	8018164 <_vfiprintf_r>
 80179f6:	b003      	add	sp, #12
 80179f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80179fc:	b004      	add	sp, #16
 80179fe:	4770      	bx	lr
 8017a00:	200001e4 	.word	0x200001e4

08017a04 <sniprintf>:
 8017a04:	b40c      	push	{r2, r3}
 8017a06:	b530      	push	{r4, r5, lr}
 8017a08:	4b17      	ldr	r3, [pc, #92]	@ (8017a68 <sniprintf+0x64>)
 8017a0a:	1e0c      	subs	r4, r1, #0
 8017a0c:	681d      	ldr	r5, [r3, #0]
 8017a0e:	b09d      	sub	sp, #116	@ 0x74
 8017a10:	da08      	bge.n	8017a24 <sniprintf+0x20>
 8017a12:	238b      	movs	r3, #139	@ 0x8b
 8017a14:	602b      	str	r3, [r5, #0]
 8017a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a1a:	b01d      	add	sp, #116	@ 0x74
 8017a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a20:	b002      	add	sp, #8
 8017a22:	4770      	bx	lr
 8017a24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017a28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017a2c:	bf14      	ite	ne
 8017a2e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017a32:	4623      	moveq	r3, r4
 8017a34:	9304      	str	r3, [sp, #16]
 8017a36:	9307      	str	r3, [sp, #28]
 8017a38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017a3c:	9002      	str	r0, [sp, #8]
 8017a3e:	9006      	str	r0, [sp, #24]
 8017a40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017a46:	ab21      	add	r3, sp, #132	@ 0x84
 8017a48:	a902      	add	r1, sp, #8
 8017a4a:	4628      	mov	r0, r5
 8017a4c:	9301      	str	r3, [sp, #4]
 8017a4e:	f000 fa63 	bl	8017f18 <_svfiprintf_r>
 8017a52:	1c43      	adds	r3, r0, #1
 8017a54:	bfbc      	itt	lt
 8017a56:	238b      	movlt	r3, #139	@ 0x8b
 8017a58:	602b      	strlt	r3, [r5, #0]
 8017a5a:	2c00      	cmp	r4, #0
 8017a5c:	d0dd      	beq.n	8017a1a <sniprintf+0x16>
 8017a5e:	9b02      	ldr	r3, [sp, #8]
 8017a60:	2200      	movs	r2, #0
 8017a62:	701a      	strb	r2, [r3, #0]
 8017a64:	e7d9      	b.n	8017a1a <sniprintf+0x16>
 8017a66:	bf00      	nop
 8017a68:	200001e4 	.word	0x200001e4

08017a6c <__sread>:
 8017a6c:	b510      	push	{r4, lr}
 8017a6e:	460c      	mov	r4, r1
 8017a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a74:	f000 f900 	bl	8017c78 <_read_r>
 8017a78:	2800      	cmp	r0, #0
 8017a7a:	bfab      	itete	ge
 8017a7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8017a80:	181b      	addge	r3, r3, r0
 8017a82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017a86:	bfac      	ite	ge
 8017a88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017a8a:	81a3      	strhlt	r3, [r4, #12]
 8017a8c:	bd10      	pop	{r4, pc}

08017a8e <__swrite>:
 8017a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a92:	461f      	mov	r7, r3
 8017a94:	898b      	ldrh	r3, [r1, #12]
 8017a96:	05db      	lsls	r3, r3, #23
 8017a98:	4605      	mov	r5, r0
 8017a9a:	460c      	mov	r4, r1
 8017a9c:	4616      	mov	r6, r2
 8017a9e:	d505      	bpl.n	8017aac <__swrite+0x1e>
 8017aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aa4:	2302      	movs	r3, #2
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	f000 f8d4 	bl	8017c54 <_lseek_r>
 8017aac:	89a3      	ldrh	r3, [r4, #12]
 8017aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017ab6:	81a3      	strh	r3, [r4, #12]
 8017ab8:	4632      	mov	r2, r6
 8017aba:	463b      	mov	r3, r7
 8017abc:	4628      	mov	r0, r5
 8017abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ac2:	f000 b8fb 	b.w	8017cbc <_write_r>

08017ac6 <__sseek>:
 8017ac6:	b510      	push	{r4, lr}
 8017ac8:	460c      	mov	r4, r1
 8017aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ace:	f000 f8c1 	bl	8017c54 <_lseek_r>
 8017ad2:	1c43      	adds	r3, r0, #1
 8017ad4:	89a3      	ldrh	r3, [r4, #12]
 8017ad6:	bf15      	itete	ne
 8017ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017ae2:	81a3      	strheq	r3, [r4, #12]
 8017ae4:	bf18      	it	ne
 8017ae6:	81a3      	strhne	r3, [r4, #12]
 8017ae8:	bd10      	pop	{r4, pc}

08017aea <__sclose>:
 8017aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aee:	f000 b8a1 	b.w	8017c34 <_close_r>

08017af2 <_vsniprintf_r>:
 8017af2:	b530      	push	{r4, r5, lr}
 8017af4:	4614      	mov	r4, r2
 8017af6:	2c00      	cmp	r4, #0
 8017af8:	b09b      	sub	sp, #108	@ 0x6c
 8017afa:	4605      	mov	r5, r0
 8017afc:	461a      	mov	r2, r3
 8017afe:	da05      	bge.n	8017b0c <_vsniprintf_r+0x1a>
 8017b00:	238b      	movs	r3, #139	@ 0x8b
 8017b02:	6003      	str	r3, [r0, #0]
 8017b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b08:	b01b      	add	sp, #108	@ 0x6c
 8017b0a:	bd30      	pop	{r4, r5, pc}
 8017b0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017b10:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b14:	bf14      	ite	ne
 8017b16:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017b1a:	4623      	moveq	r3, r4
 8017b1c:	9302      	str	r3, [sp, #8]
 8017b1e:	9305      	str	r3, [sp, #20]
 8017b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017b24:	9100      	str	r1, [sp, #0]
 8017b26:	9104      	str	r1, [sp, #16]
 8017b28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b2c:	4669      	mov	r1, sp
 8017b2e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017b30:	f000 f9f2 	bl	8017f18 <_svfiprintf_r>
 8017b34:	1c43      	adds	r3, r0, #1
 8017b36:	bfbc      	itt	lt
 8017b38:	238b      	movlt	r3, #139	@ 0x8b
 8017b3a:	602b      	strlt	r3, [r5, #0]
 8017b3c:	2c00      	cmp	r4, #0
 8017b3e:	d0e3      	beq.n	8017b08 <_vsniprintf_r+0x16>
 8017b40:	9b00      	ldr	r3, [sp, #0]
 8017b42:	2200      	movs	r2, #0
 8017b44:	701a      	strb	r2, [r3, #0]
 8017b46:	e7df      	b.n	8017b08 <_vsniprintf_r+0x16>

08017b48 <vsniprintf>:
 8017b48:	b507      	push	{r0, r1, r2, lr}
 8017b4a:	9300      	str	r3, [sp, #0]
 8017b4c:	4613      	mov	r3, r2
 8017b4e:	460a      	mov	r2, r1
 8017b50:	4601      	mov	r1, r0
 8017b52:	4803      	ldr	r0, [pc, #12]	@ (8017b60 <vsniprintf+0x18>)
 8017b54:	6800      	ldr	r0, [r0, #0]
 8017b56:	f7ff ffcc 	bl	8017af2 <_vsniprintf_r>
 8017b5a:	b003      	add	sp, #12
 8017b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b60:	200001e4 	.word	0x200001e4

08017b64 <memcmp>:
 8017b64:	b510      	push	{r4, lr}
 8017b66:	3901      	subs	r1, #1
 8017b68:	4402      	add	r2, r0
 8017b6a:	4290      	cmp	r0, r2
 8017b6c:	d101      	bne.n	8017b72 <memcmp+0xe>
 8017b6e:	2000      	movs	r0, #0
 8017b70:	e005      	b.n	8017b7e <memcmp+0x1a>
 8017b72:	7803      	ldrb	r3, [r0, #0]
 8017b74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017b78:	42a3      	cmp	r3, r4
 8017b7a:	d001      	beq.n	8017b80 <memcmp+0x1c>
 8017b7c:	1b18      	subs	r0, r3, r4
 8017b7e:	bd10      	pop	{r4, pc}
 8017b80:	3001      	adds	r0, #1
 8017b82:	e7f2      	b.n	8017b6a <memcmp+0x6>

08017b84 <memmove>:
 8017b84:	4288      	cmp	r0, r1
 8017b86:	b510      	push	{r4, lr}
 8017b88:	eb01 0402 	add.w	r4, r1, r2
 8017b8c:	d902      	bls.n	8017b94 <memmove+0x10>
 8017b8e:	4284      	cmp	r4, r0
 8017b90:	4623      	mov	r3, r4
 8017b92:	d807      	bhi.n	8017ba4 <memmove+0x20>
 8017b94:	1e43      	subs	r3, r0, #1
 8017b96:	42a1      	cmp	r1, r4
 8017b98:	d008      	beq.n	8017bac <memmove+0x28>
 8017b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017ba2:	e7f8      	b.n	8017b96 <memmove+0x12>
 8017ba4:	4402      	add	r2, r0
 8017ba6:	4601      	mov	r1, r0
 8017ba8:	428a      	cmp	r2, r1
 8017baa:	d100      	bne.n	8017bae <memmove+0x2a>
 8017bac:	bd10      	pop	{r4, pc}
 8017bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017bb6:	e7f7      	b.n	8017ba8 <memmove+0x24>

08017bb8 <memset>:
 8017bb8:	4402      	add	r2, r0
 8017bba:	4603      	mov	r3, r0
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	d100      	bne.n	8017bc2 <memset+0xa>
 8017bc0:	4770      	bx	lr
 8017bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8017bc6:	e7f9      	b.n	8017bbc <memset+0x4>

08017bc8 <strchr>:
 8017bc8:	b2c9      	uxtb	r1, r1
 8017bca:	4603      	mov	r3, r0
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bd2:	b112      	cbz	r2, 8017bda <strchr+0x12>
 8017bd4:	428a      	cmp	r2, r1
 8017bd6:	d1f9      	bne.n	8017bcc <strchr+0x4>
 8017bd8:	4770      	bx	lr
 8017bda:	2900      	cmp	r1, #0
 8017bdc:	bf18      	it	ne
 8017bde:	2000      	movne	r0, #0
 8017be0:	4770      	bx	lr

08017be2 <strncmp>:
 8017be2:	b510      	push	{r4, lr}
 8017be4:	b16a      	cbz	r2, 8017c02 <strncmp+0x20>
 8017be6:	3901      	subs	r1, #1
 8017be8:	1884      	adds	r4, r0, r2
 8017bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d103      	bne.n	8017bfe <strncmp+0x1c>
 8017bf6:	42a0      	cmp	r0, r4
 8017bf8:	d001      	beq.n	8017bfe <strncmp+0x1c>
 8017bfa:	2a00      	cmp	r2, #0
 8017bfc:	d1f5      	bne.n	8017bea <strncmp+0x8>
 8017bfe:	1ad0      	subs	r0, r2, r3
 8017c00:	bd10      	pop	{r4, pc}
 8017c02:	4610      	mov	r0, r2
 8017c04:	e7fc      	b.n	8017c00 <strncmp+0x1e>

08017c06 <strstr>:
 8017c06:	780a      	ldrb	r2, [r1, #0]
 8017c08:	b570      	push	{r4, r5, r6, lr}
 8017c0a:	b96a      	cbnz	r2, 8017c28 <strstr+0x22>
 8017c0c:	bd70      	pop	{r4, r5, r6, pc}
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d109      	bne.n	8017c26 <strstr+0x20>
 8017c12:	460c      	mov	r4, r1
 8017c14:	4605      	mov	r5, r0
 8017c16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d0f6      	beq.n	8017c0c <strstr+0x6>
 8017c1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017c22:	429e      	cmp	r6, r3
 8017c24:	d0f7      	beq.n	8017c16 <strstr+0x10>
 8017c26:	3001      	adds	r0, #1
 8017c28:	7803      	ldrb	r3, [r0, #0]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d1ef      	bne.n	8017c0e <strstr+0x8>
 8017c2e:	4618      	mov	r0, r3
 8017c30:	e7ec      	b.n	8017c0c <strstr+0x6>
	...

08017c34 <_close_r>:
 8017c34:	b538      	push	{r3, r4, r5, lr}
 8017c36:	4d06      	ldr	r5, [pc, #24]	@ (8017c50 <_close_r+0x1c>)
 8017c38:	2300      	movs	r3, #0
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	4608      	mov	r0, r1
 8017c3e:	602b      	str	r3, [r5, #0]
 8017c40:	f7ea f8a8 	bl	8001d94 <_close>
 8017c44:	1c43      	adds	r3, r0, #1
 8017c46:	d102      	bne.n	8017c4e <_close_r+0x1a>
 8017c48:	682b      	ldr	r3, [r5, #0]
 8017c4a:	b103      	cbz	r3, 8017c4e <_close_r+0x1a>
 8017c4c:	6023      	str	r3, [r4, #0]
 8017c4e:	bd38      	pop	{r3, r4, r5, pc}
 8017c50:	2000b088 	.word	0x2000b088

08017c54 <_lseek_r>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4d07      	ldr	r5, [pc, #28]	@ (8017c74 <_lseek_r+0x20>)
 8017c58:	4604      	mov	r4, r0
 8017c5a:	4608      	mov	r0, r1
 8017c5c:	4611      	mov	r1, r2
 8017c5e:	2200      	movs	r2, #0
 8017c60:	602a      	str	r2, [r5, #0]
 8017c62:	461a      	mov	r2, r3
 8017c64:	f7ea f8bd 	bl	8001de2 <_lseek>
 8017c68:	1c43      	adds	r3, r0, #1
 8017c6a:	d102      	bne.n	8017c72 <_lseek_r+0x1e>
 8017c6c:	682b      	ldr	r3, [r5, #0]
 8017c6e:	b103      	cbz	r3, 8017c72 <_lseek_r+0x1e>
 8017c70:	6023      	str	r3, [r4, #0]
 8017c72:	bd38      	pop	{r3, r4, r5, pc}
 8017c74:	2000b088 	.word	0x2000b088

08017c78 <_read_r>:
 8017c78:	b538      	push	{r3, r4, r5, lr}
 8017c7a:	4d07      	ldr	r5, [pc, #28]	@ (8017c98 <_read_r+0x20>)
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	4608      	mov	r0, r1
 8017c80:	4611      	mov	r1, r2
 8017c82:	2200      	movs	r2, #0
 8017c84:	602a      	str	r2, [r5, #0]
 8017c86:	461a      	mov	r2, r3
 8017c88:	f7ea f84b 	bl	8001d22 <_read>
 8017c8c:	1c43      	adds	r3, r0, #1
 8017c8e:	d102      	bne.n	8017c96 <_read_r+0x1e>
 8017c90:	682b      	ldr	r3, [r5, #0]
 8017c92:	b103      	cbz	r3, 8017c96 <_read_r+0x1e>
 8017c94:	6023      	str	r3, [r4, #0]
 8017c96:	bd38      	pop	{r3, r4, r5, pc}
 8017c98:	2000b088 	.word	0x2000b088

08017c9c <_sbrk_r>:
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	4d06      	ldr	r5, [pc, #24]	@ (8017cb8 <_sbrk_r+0x1c>)
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	4608      	mov	r0, r1
 8017ca6:	602b      	str	r3, [r5, #0]
 8017ca8:	f7ea f8a8 	bl	8001dfc <_sbrk>
 8017cac:	1c43      	adds	r3, r0, #1
 8017cae:	d102      	bne.n	8017cb6 <_sbrk_r+0x1a>
 8017cb0:	682b      	ldr	r3, [r5, #0]
 8017cb2:	b103      	cbz	r3, 8017cb6 <_sbrk_r+0x1a>
 8017cb4:	6023      	str	r3, [r4, #0]
 8017cb6:	bd38      	pop	{r3, r4, r5, pc}
 8017cb8:	2000b088 	.word	0x2000b088

08017cbc <_write_r>:
 8017cbc:	b538      	push	{r3, r4, r5, lr}
 8017cbe:	4d07      	ldr	r5, [pc, #28]	@ (8017cdc <_write_r+0x20>)
 8017cc0:	4604      	mov	r4, r0
 8017cc2:	4608      	mov	r0, r1
 8017cc4:	4611      	mov	r1, r2
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	602a      	str	r2, [r5, #0]
 8017cca:	461a      	mov	r2, r3
 8017ccc:	f7ea f846 	bl	8001d5c <_write>
 8017cd0:	1c43      	adds	r3, r0, #1
 8017cd2:	d102      	bne.n	8017cda <_write_r+0x1e>
 8017cd4:	682b      	ldr	r3, [r5, #0]
 8017cd6:	b103      	cbz	r3, 8017cda <_write_r+0x1e>
 8017cd8:	6023      	str	r3, [r4, #0]
 8017cda:	bd38      	pop	{r3, r4, r5, pc}
 8017cdc:	2000b088 	.word	0x2000b088

08017ce0 <__errno>:
 8017ce0:	4b01      	ldr	r3, [pc, #4]	@ (8017ce8 <__errno+0x8>)
 8017ce2:	6818      	ldr	r0, [r3, #0]
 8017ce4:	4770      	bx	lr
 8017ce6:	bf00      	nop
 8017ce8:	200001e4 	.word	0x200001e4

08017cec <__libc_init_array>:
 8017cec:	b570      	push	{r4, r5, r6, lr}
 8017cee:	4d0d      	ldr	r5, [pc, #52]	@ (8017d24 <__libc_init_array+0x38>)
 8017cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8017d28 <__libc_init_array+0x3c>)
 8017cf2:	1b64      	subs	r4, r4, r5
 8017cf4:	10a4      	asrs	r4, r4, #2
 8017cf6:	2600      	movs	r6, #0
 8017cf8:	42a6      	cmp	r6, r4
 8017cfa:	d109      	bne.n	8017d10 <__libc_init_array+0x24>
 8017cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8017d2c <__libc_init_array+0x40>)
 8017cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8017d30 <__libc_init_array+0x44>)
 8017d00:	f000 fef8 	bl	8018af4 <_init>
 8017d04:	1b64      	subs	r4, r4, r5
 8017d06:	10a4      	asrs	r4, r4, #2
 8017d08:	2600      	movs	r6, #0
 8017d0a:	42a6      	cmp	r6, r4
 8017d0c:	d105      	bne.n	8017d1a <__libc_init_array+0x2e>
 8017d0e:	bd70      	pop	{r4, r5, r6, pc}
 8017d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d14:	4798      	blx	r3
 8017d16:	3601      	adds	r6, #1
 8017d18:	e7ee      	b.n	8017cf8 <__libc_init_array+0xc>
 8017d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d1e:	4798      	blx	r3
 8017d20:	3601      	adds	r6, #1
 8017d22:	e7f2      	b.n	8017d0a <__libc_init_array+0x1e>
 8017d24:	080198d0 	.word	0x080198d0
 8017d28:	080198d0 	.word	0x080198d0
 8017d2c:	080198d0 	.word	0x080198d0
 8017d30:	080198d8 	.word	0x080198d8

08017d34 <__retarget_lock_init_recursive>:
 8017d34:	4770      	bx	lr

08017d36 <__retarget_lock_acquire_recursive>:
 8017d36:	4770      	bx	lr

08017d38 <__retarget_lock_release_recursive>:
 8017d38:	4770      	bx	lr

08017d3a <strcpy>:
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d40:	f803 2b01 	strb.w	r2, [r3], #1
 8017d44:	2a00      	cmp	r2, #0
 8017d46:	d1f9      	bne.n	8017d3c <strcpy+0x2>
 8017d48:	4770      	bx	lr

08017d4a <memcpy>:
 8017d4a:	440a      	add	r2, r1
 8017d4c:	4291      	cmp	r1, r2
 8017d4e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017d52:	d100      	bne.n	8017d56 <memcpy+0xc>
 8017d54:	4770      	bx	lr
 8017d56:	b510      	push	{r4, lr}
 8017d58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d60:	4291      	cmp	r1, r2
 8017d62:	d1f9      	bne.n	8017d58 <memcpy+0xe>
 8017d64:	bd10      	pop	{r4, pc}
	...

08017d68 <__assert_func>:
 8017d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d6a:	4614      	mov	r4, r2
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	4b09      	ldr	r3, [pc, #36]	@ (8017d94 <__assert_func+0x2c>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	4605      	mov	r5, r0
 8017d74:	68d8      	ldr	r0, [r3, #12]
 8017d76:	b954      	cbnz	r4, 8017d8e <__assert_func+0x26>
 8017d78:	4b07      	ldr	r3, [pc, #28]	@ (8017d98 <__assert_func+0x30>)
 8017d7a:	461c      	mov	r4, r3
 8017d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d80:	9100      	str	r1, [sp, #0]
 8017d82:	462b      	mov	r3, r5
 8017d84:	4905      	ldr	r1, [pc, #20]	@ (8017d9c <__assert_func+0x34>)
 8017d86:	f000 fd3f 	bl	8018808 <fiprintf>
 8017d8a:	f000 fde3 	bl	8018954 <abort>
 8017d8e:	4b04      	ldr	r3, [pc, #16]	@ (8017da0 <__assert_func+0x38>)
 8017d90:	e7f4      	b.n	8017d7c <__assert_func+0x14>
 8017d92:	bf00      	nop
 8017d94:	200001e4 	.word	0x200001e4
 8017d98:	08019893 	.word	0x08019893
 8017d9c:	08019865 	.word	0x08019865
 8017da0:	08019858 	.word	0x08019858

08017da4 <__env_lock>:
 8017da4:	4801      	ldr	r0, [pc, #4]	@ (8017dac <__env_lock+0x8>)
 8017da6:	f7ff bfc6 	b.w	8017d36 <__retarget_lock_acquire_recursive>
 8017daa:	bf00      	nop
 8017dac:	2000b08c 	.word	0x2000b08c

08017db0 <__env_unlock>:
 8017db0:	4801      	ldr	r0, [pc, #4]	@ (8017db8 <__env_unlock+0x8>)
 8017db2:	f7ff bfc1 	b.w	8017d38 <__retarget_lock_release_recursive>
 8017db6:	bf00      	nop
 8017db8:	2000b08c 	.word	0x2000b08c

08017dbc <_free_r>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	4605      	mov	r5, r0
 8017dc0:	2900      	cmp	r1, #0
 8017dc2:	d041      	beq.n	8017e48 <_free_r+0x8c>
 8017dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dc8:	1f0c      	subs	r4, r1, #4
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	bfb8      	it	lt
 8017dce:	18e4      	addlt	r4, r4, r3
 8017dd0:	f7ff fc1e 	bl	8017610 <__malloc_lock>
 8017dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8017e4c <_free_r+0x90>)
 8017dd6:	6813      	ldr	r3, [r2, #0]
 8017dd8:	b933      	cbnz	r3, 8017de8 <_free_r+0x2c>
 8017dda:	6063      	str	r3, [r4, #4]
 8017ddc:	6014      	str	r4, [r2, #0]
 8017dde:	4628      	mov	r0, r5
 8017de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017de4:	f7ff bc1a 	b.w	801761c <__malloc_unlock>
 8017de8:	42a3      	cmp	r3, r4
 8017dea:	d908      	bls.n	8017dfe <_free_r+0x42>
 8017dec:	6820      	ldr	r0, [r4, #0]
 8017dee:	1821      	adds	r1, r4, r0
 8017df0:	428b      	cmp	r3, r1
 8017df2:	bf01      	itttt	eq
 8017df4:	6819      	ldreq	r1, [r3, #0]
 8017df6:	685b      	ldreq	r3, [r3, #4]
 8017df8:	1809      	addeq	r1, r1, r0
 8017dfa:	6021      	streq	r1, [r4, #0]
 8017dfc:	e7ed      	b.n	8017dda <_free_r+0x1e>
 8017dfe:	461a      	mov	r2, r3
 8017e00:	685b      	ldr	r3, [r3, #4]
 8017e02:	b10b      	cbz	r3, 8017e08 <_free_r+0x4c>
 8017e04:	42a3      	cmp	r3, r4
 8017e06:	d9fa      	bls.n	8017dfe <_free_r+0x42>
 8017e08:	6811      	ldr	r1, [r2, #0]
 8017e0a:	1850      	adds	r0, r2, r1
 8017e0c:	42a0      	cmp	r0, r4
 8017e0e:	d10b      	bne.n	8017e28 <_free_r+0x6c>
 8017e10:	6820      	ldr	r0, [r4, #0]
 8017e12:	4401      	add	r1, r0
 8017e14:	1850      	adds	r0, r2, r1
 8017e16:	4283      	cmp	r3, r0
 8017e18:	6011      	str	r1, [r2, #0]
 8017e1a:	d1e0      	bne.n	8017dde <_free_r+0x22>
 8017e1c:	6818      	ldr	r0, [r3, #0]
 8017e1e:	685b      	ldr	r3, [r3, #4]
 8017e20:	6053      	str	r3, [r2, #4]
 8017e22:	4408      	add	r0, r1
 8017e24:	6010      	str	r0, [r2, #0]
 8017e26:	e7da      	b.n	8017dde <_free_r+0x22>
 8017e28:	d902      	bls.n	8017e30 <_free_r+0x74>
 8017e2a:	230c      	movs	r3, #12
 8017e2c:	602b      	str	r3, [r5, #0]
 8017e2e:	e7d6      	b.n	8017dde <_free_r+0x22>
 8017e30:	6820      	ldr	r0, [r4, #0]
 8017e32:	1821      	adds	r1, r4, r0
 8017e34:	428b      	cmp	r3, r1
 8017e36:	bf04      	itt	eq
 8017e38:	6819      	ldreq	r1, [r3, #0]
 8017e3a:	685b      	ldreq	r3, [r3, #4]
 8017e3c:	6063      	str	r3, [r4, #4]
 8017e3e:	bf04      	itt	eq
 8017e40:	1809      	addeq	r1, r1, r0
 8017e42:	6021      	streq	r1, [r4, #0]
 8017e44:	6054      	str	r4, [r2, #4]
 8017e46:	e7ca      	b.n	8017dde <_free_r+0x22>
 8017e48:	bd38      	pop	{r3, r4, r5, pc}
 8017e4a:	bf00      	nop
 8017e4c:	2000af48 	.word	0x2000af48

08017e50 <_malloc_usable_size_r>:
 8017e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e54:	1f18      	subs	r0, r3, #4
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	bfbc      	itt	lt
 8017e5a:	580b      	ldrlt	r3, [r1, r0]
 8017e5c:	18c0      	addlt	r0, r0, r3
 8017e5e:	4770      	bx	lr

08017e60 <__ssputs_r>:
 8017e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e64:	688e      	ldr	r6, [r1, #8]
 8017e66:	461f      	mov	r7, r3
 8017e68:	42be      	cmp	r6, r7
 8017e6a:	680b      	ldr	r3, [r1, #0]
 8017e6c:	4682      	mov	sl, r0
 8017e6e:	460c      	mov	r4, r1
 8017e70:	4690      	mov	r8, r2
 8017e72:	d82d      	bhi.n	8017ed0 <__ssputs_r+0x70>
 8017e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017e7c:	d026      	beq.n	8017ecc <__ssputs_r+0x6c>
 8017e7e:	6965      	ldr	r5, [r4, #20]
 8017e80:	6909      	ldr	r1, [r1, #16]
 8017e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e86:	eba3 0901 	sub.w	r9, r3, r1
 8017e8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e8e:	1c7b      	adds	r3, r7, #1
 8017e90:	444b      	add	r3, r9
 8017e92:	106d      	asrs	r5, r5, #1
 8017e94:	429d      	cmp	r5, r3
 8017e96:	bf38      	it	cc
 8017e98:	461d      	movcc	r5, r3
 8017e9a:	0553      	lsls	r3, r2, #21
 8017e9c:	d527      	bpl.n	8017eee <__ssputs_r+0x8e>
 8017e9e:	4629      	mov	r1, r5
 8017ea0:	f7ff fb36 	bl	8017510 <_malloc_r>
 8017ea4:	4606      	mov	r6, r0
 8017ea6:	b360      	cbz	r0, 8017f02 <__ssputs_r+0xa2>
 8017ea8:	6921      	ldr	r1, [r4, #16]
 8017eaa:	464a      	mov	r2, r9
 8017eac:	f7ff ff4d 	bl	8017d4a <memcpy>
 8017eb0:	89a3      	ldrh	r3, [r4, #12]
 8017eb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017eba:	81a3      	strh	r3, [r4, #12]
 8017ebc:	6126      	str	r6, [r4, #16]
 8017ebe:	6165      	str	r5, [r4, #20]
 8017ec0:	444e      	add	r6, r9
 8017ec2:	eba5 0509 	sub.w	r5, r5, r9
 8017ec6:	6026      	str	r6, [r4, #0]
 8017ec8:	60a5      	str	r5, [r4, #8]
 8017eca:	463e      	mov	r6, r7
 8017ecc:	42be      	cmp	r6, r7
 8017ece:	d900      	bls.n	8017ed2 <__ssputs_r+0x72>
 8017ed0:	463e      	mov	r6, r7
 8017ed2:	6820      	ldr	r0, [r4, #0]
 8017ed4:	4632      	mov	r2, r6
 8017ed6:	4641      	mov	r1, r8
 8017ed8:	f7ff fe54 	bl	8017b84 <memmove>
 8017edc:	68a3      	ldr	r3, [r4, #8]
 8017ede:	1b9b      	subs	r3, r3, r6
 8017ee0:	60a3      	str	r3, [r4, #8]
 8017ee2:	6823      	ldr	r3, [r4, #0]
 8017ee4:	4433      	add	r3, r6
 8017ee6:	6023      	str	r3, [r4, #0]
 8017ee8:	2000      	movs	r0, #0
 8017eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eee:	462a      	mov	r2, r5
 8017ef0:	f7ff fc0e 	bl	8017710 <_realloc_r>
 8017ef4:	4606      	mov	r6, r0
 8017ef6:	2800      	cmp	r0, #0
 8017ef8:	d1e0      	bne.n	8017ebc <__ssputs_r+0x5c>
 8017efa:	6921      	ldr	r1, [r4, #16]
 8017efc:	4650      	mov	r0, sl
 8017efe:	f7ff ff5d 	bl	8017dbc <_free_r>
 8017f02:	230c      	movs	r3, #12
 8017f04:	f8ca 3000 	str.w	r3, [sl]
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f0e:	81a3      	strh	r3, [r4, #12]
 8017f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f14:	e7e9      	b.n	8017eea <__ssputs_r+0x8a>
	...

08017f18 <_svfiprintf_r>:
 8017f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f1c:	4698      	mov	r8, r3
 8017f1e:	898b      	ldrh	r3, [r1, #12]
 8017f20:	061b      	lsls	r3, r3, #24
 8017f22:	b09d      	sub	sp, #116	@ 0x74
 8017f24:	4607      	mov	r7, r0
 8017f26:	460d      	mov	r5, r1
 8017f28:	4614      	mov	r4, r2
 8017f2a:	d510      	bpl.n	8017f4e <_svfiprintf_r+0x36>
 8017f2c:	690b      	ldr	r3, [r1, #16]
 8017f2e:	b973      	cbnz	r3, 8017f4e <_svfiprintf_r+0x36>
 8017f30:	2140      	movs	r1, #64	@ 0x40
 8017f32:	f7ff faed 	bl	8017510 <_malloc_r>
 8017f36:	6028      	str	r0, [r5, #0]
 8017f38:	6128      	str	r0, [r5, #16]
 8017f3a:	b930      	cbnz	r0, 8017f4a <_svfiprintf_r+0x32>
 8017f3c:	230c      	movs	r3, #12
 8017f3e:	603b      	str	r3, [r7, #0]
 8017f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f44:	b01d      	add	sp, #116	@ 0x74
 8017f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4a:	2340      	movs	r3, #64	@ 0x40
 8017f4c:	616b      	str	r3, [r5, #20]
 8017f4e:	2300      	movs	r3, #0
 8017f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f52:	2320      	movs	r3, #32
 8017f54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f5c:	2330      	movs	r3, #48	@ 0x30
 8017f5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80180fc <_svfiprintf_r+0x1e4>
 8017f62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f66:	f04f 0901 	mov.w	r9, #1
 8017f6a:	4623      	mov	r3, r4
 8017f6c:	469a      	mov	sl, r3
 8017f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f72:	b10a      	cbz	r2, 8017f78 <_svfiprintf_r+0x60>
 8017f74:	2a25      	cmp	r2, #37	@ 0x25
 8017f76:	d1f9      	bne.n	8017f6c <_svfiprintf_r+0x54>
 8017f78:	ebba 0b04 	subs.w	fp, sl, r4
 8017f7c:	d00b      	beq.n	8017f96 <_svfiprintf_r+0x7e>
 8017f7e:	465b      	mov	r3, fp
 8017f80:	4622      	mov	r2, r4
 8017f82:	4629      	mov	r1, r5
 8017f84:	4638      	mov	r0, r7
 8017f86:	f7ff ff6b 	bl	8017e60 <__ssputs_r>
 8017f8a:	3001      	adds	r0, #1
 8017f8c:	f000 80a7 	beq.w	80180de <_svfiprintf_r+0x1c6>
 8017f90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f92:	445a      	add	r2, fp
 8017f94:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f96:	f89a 3000 	ldrb.w	r3, [sl]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	f000 809f 	beq.w	80180de <_svfiprintf_r+0x1c6>
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017faa:	f10a 0a01 	add.w	sl, sl, #1
 8017fae:	9304      	str	r3, [sp, #16]
 8017fb0:	9307      	str	r3, [sp, #28]
 8017fb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017fb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8017fb8:	4654      	mov	r4, sl
 8017fba:	2205      	movs	r2, #5
 8017fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fc0:	484e      	ldr	r0, [pc, #312]	@ (80180fc <_svfiprintf_r+0x1e4>)
 8017fc2:	f7e8 f945 	bl	8000250 <memchr>
 8017fc6:	9a04      	ldr	r2, [sp, #16]
 8017fc8:	b9d8      	cbnz	r0, 8018002 <_svfiprintf_r+0xea>
 8017fca:	06d0      	lsls	r0, r2, #27
 8017fcc:	bf44      	itt	mi
 8017fce:	2320      	movmi	r3, #32
 8017fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fd4:	0711      	lsls	r1, r2, #28
 8017fd6:	bf44      	itt	mi
 8017fd8:	232b      	movmi	r3, #43	@ 0x2b
 8017fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fde:	f89a 3000 	ldrb.w	r3, [sl]
 8017fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fe4:	d015      	beq.n	8018012 <_svfiprintf_r+0xfa>
 8017fe6:	9a07      	ldr	r2, [sp, #28]
 8017fe8:	4654      	mov	r4, sl
 8017fea:	2000      	movs	r0, #0
 8017fec:	f04f 0c0a 	mov.w	ip, #10
 8017ff0:	4621      	mov	r1, r4
 8017ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ff6:	3b30      	subs	r3, #48	@ 0x30
 8017ff8:	2b09      	cmp	r3, #9
 8017ffa:	d94b      	bls.n	8018094 <_svfiprintf_r+0x17c>
 8017ffc:	b1b0      	cbz	r0, 801802c <_svfiprintf_r+0x114>
 8017ffe:	9207      	str	r2, [sp, #28]
 8018000:	e014      	b.n	801802c <_svfiprintf_r+0x114>
 8018002:	eba0 0308 	sub.w	r3, r0, r8
 8018006:	fa09 f303 	lsl.w	r3, r9, r3
 801800a:	4313      	orrs	r3, r2
 801800c:	9304      	str	r3, [sp, #16]
 801800e:	46a2      	mov	sl, r4
 8018010:	e7d2      	b.n	8017fb8 <_svfiprintf_r+0xa0>
 8018012:	9b03      	ldr	r3, [sp, #12]
 8018014:	1d19      	adds	r1, r3, #4
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	9103      	str	r1, [sp, #12]
 801801a:	2b00      	cmp	r3, #0
 801801c:	bfbb      	ittet	lt
 801801e:	425b      	neglt	r3, r3
 8018020:	f042 0202 	orrlt.w	r2, r2, #2
 8018024:	9307      	strge	r3, [sp, #28]
 8018026:	9307      	strlt	r3, [sp, #28]
 8018028:	bfb8      	it	lt
 801802a:	9204      	strlt	r2, [sp, #16]
 801802c:	7823      	ldrb	r3, [r4, #0]
 801802e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018030:	d10a      	bne.n	8018048 <_svfiprintf_r+0x130>
 8018032:	7863      	ldrb	r3, [r4, #1]
 8018034:	2b2a      	cmp	r3, #42	@ 0x2a
 8018036:	d132      	bne.n	801809e <_svfiprintf_r+0x186>
 8018038:	9b03      	ldr	r3, [sp, #12]
 801803a:	1d1a      	adds	r2, r3, #4
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	9203      	str	r2, [sp, #12]
 8018040:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018044:	3402      	adds	r4, #2
 8018046:	9305      	str	r3, [sp, #20]
 8018048:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801810c <_svfiprintf_r+0x1f4>
 801804c:	7821      	ldrb	r1, [r4, #0]
 801804e:	2203      	movs	r2, #3
 8018050:	4650      	mov	r0, sl
 8018052:	f7e8 f8fd 	bl	8000250 <memchr>
 8018056:	b138      	cbz	r0, 8018068 <_svfiprintf_r+0x150>
 8018058:	9b04      	ldr	r3, [sp, #16]
 801805a:	eba0 000a 	sub.w	r0, r0, sl
 801805e:	2240      	movs	r2, #64	@ 0x40
 8018060:	4082      	lsls	r2, r0
 8018062:	4313      	orrs	r3, r2
 8018064:	3401      	adds	r4, #1
 8018066:	9304      	str	r3, [sp, #16]
 8018068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801806c:	4824      	ldr	r0, [pc, #144]	@ (8018100 <_svfiprintf_r+0x1e8>)
 801806e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018072:	2206      	movs	r2, #6
 8018074:	f7e8 f8ec 	bl	8000250 <memchr>
 8018078:	2800      	cmp	r0, #0
 801807a:	d036      	beq.n	80180ea <_svfiprintf_r+0x1d2>
 801807c:	4b21      	ldr	r3, [pc, #132]	@ (8018104 <_svfiprintf_r+0x1ec>)
 801807e:	bb1b      	cbnz	r3, 80180c8 <_svfiprintf_r+0x1b0>
 8018080:	9b03      	ldr	r3, [sp, #12]
 8018082:	3307      	adds	r3, #7
 8018084:	f023 0307 	bic.w	r3, r3, #7
 8018088:	3308      	adds	r3, #8
 801808a:	9303      	str	r3, [sp, #12]
 801808c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801808e:	4433      	add	r3, r6
 8018090:	9309      	str	r3, [sp, #36]	@ 0x24
 8018092:	e76a      	b.n	8017f6a <_svfiprintf_r+0x52>
 8018094:	fb0c 3202 	mla	r2, ip, r2, r3
 8018098:	460c      	mov	r4, r1
 801809a:	2001      	movs	r0, #1
 801809c:	e7a8      	b.n	8017ff0 <_svfiprintf_r+0xd8>
 801809e:	2300      	movs	r3, #0
 80180a0:	3401      	adds	r4, #1
 80180a2:	9305      	str	r3, [sp, #20]
 80180a4:	4619      	mov	r1, r3
 80180a6:	f04f 0c0a 	mov.w	ip, #10
 80180aa:	4620      	mov	r0, r4
 80180ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180b0:	3a30      	subs	r2, #48	@ 0x30
 80180b2:	2a09      	cmp	r2, #9
 80180b4:	d903      	bls.n	80180be <_svfiprintf_r+0x1a6>
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d0c6      	beq.n	8018048 <_svfiprintf_r+0x130>
 80180ba:	9105      	str	r1, [sp, #20]
 80180bc:	e7c4      	b.n	8018048 <_svfiprintf_r+0x130>
 80180be:	fb0c 2101 	mla	r1, ip, r1, r2
 80180c2:	4604      	mov	r4, r0
 80180c4:	2301      	movs	r3, #1
 80180c6:	e7f0      	b.n	80180aa <_svfiprintf_r+0x192>
 80180c8:	ab03      	add	r3, sp, #12
 80180ca:	9300      	str	r3, [sp, #0]
 80180cc:	462a      	mov	r2, r5
 80180ce:	4b0e      	ldr	r3, [pc, #56]	@ (8018108 <_svfiprintf_r+0x1f0>)
 80180d0:	a904      	add	r1, sp, #16
 80180d2:	4638      	mov	r0, r7
 80180d4:	f3af 8000 	nop.w
 80180d8:	1c42      	adds	r2, r0, #1
 80180da:	4606      	mov	r6, r0
 80180dc:	d1d6      	bne.n	801808c <_svfiprintf_r+0x174>
 80180de:	89ab      	ldrh	r3, [r5, #12]
 80180e0:	065b      	lsls	r3, r3, #25
 80180e2:	f53f af2d 	bmi.w	8017f40 <_svfiprintf_r+0x28>
 80180e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180e8:	e72c      	b.n	8017f44 <_svfiprintf_r+0x2c>
 80180ea:	ab03      	add	r3, sp, #12
 80180ec:	9300      	str	r3, [sp, #0]
 80180ee:	462a      	mov	r2, r5
 80180f0:	4b05      	ldr	r3, [pc, #20]	@ (8018108 <_svfiprintf_r+0x1f0>)
 80180f2:	a904      	add	r1, sp, #16
 80180f4:	4638      	mov	r0, r7
 80180f6:	f000 f9bb 	bl	8018470 <_printf_i>
 80180fa:	e7ed      	b.n	80180d8 <_svfiprintf_r+0x1c0>
 80180fc:	08019894 	.word	0x08019894
 8018100:	0801989e 	.word	0x0801989e
 8018104:	00000000 	.word	0x00000000
 8018108:	08017e61 	.word	0x08017e61
 801810c:	0801989a 	.word	0x0801989a

08018110 <__sfputc_r>:
 8018110:	6893      	ldr	r3, [r2, #8]
 8018112:	3b01      	subs	r3, #1
 8018114:	2b00      	cmp	r3, #0
 8018116:	b410      	push	{r4}
 8018118:	6093      	str	r3, [r2, #8]
 801811a:	da08      	bge.n	801812e <__sfputc_r+0x1e>
 801811c:	6994      	ldr	r4, [r2, #24]
 801811e:	42a3      	cmp	r3, r4
 8018120:	db01      	blt.n	8018126 <__sfputc_r+0x16>
 8018122:	290a      	cmp	r1, #10
 8018124:	d103      	bne.n	801812e <__sfputc_r+0x1e>
 8018126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801812a:	f000 bb7f 	b.w	801882c <__swbuf_r>
 801812e:	6813      	ldr	r3, [r2, #0]
 8018130:	1c58      	adds	r0, r3, #1
 8018132:	6010      	str	r0, [r2, #0]
 8018134:	7019      	strb	r1, [r3, #0]
 8018136:	4608      	mov	r0, r1
 8018138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801813c:	4770      	bx	lr

0801813e <__sfputs_r>:
 801813e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018140:	4606      	mov	r6, r0
 8018142:	460f      	mov	r7, r1
 8018144:	4614      	mov	r4, r2
 8018146:	18d5      	adds	r5, r2, r3
 8018148:	42ac      	cmp	r4, r5
 801814a:	d101      	bne.n	8018150 <__sfputs_r+0x12>
 801814c:	2000      	movs	r0, #0
 801814e:	e007      	b.n	8018160 <__sfputs_r+0x22>
 8018150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018154:	463a      	mov	r2, r7
 8018156:	4630      	mov	r0, r6
 8018158:	f7ff ffda 	bl	8018110 <__sfputc_r>
 801815c:	1c43      	adds	r3, r0, #1
 801815e:	d1f3      	bne.n	8018148 <__sfputs_r+0xa>
 8018160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018164 <_vfiprintf_r>:
 8018164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018168:	460d      	mov	r5, r1
 801816a:	b09d      	sub	sp, #116	@ 0x74
 801816c:	4614      	mov	r4, r2
 801816e:	4698      	mov	r8, r3
 8018170:	4606      	mov	r6, r0
 8018172:	b118      	cbz	r0, 801817c <_vfiprintf_r+0x18>
 8018174:	6a03      	ldr	r3, [r0, #32]
 8018176:	b90b      	cbnz	r3, 801817c <_vfiprintf_r+0x18>
 8018178:	f7ff fbfc 	bl	8017974 <__sinit>
 801817c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801817e:	07d9      	lsls	r1, r3, #31
 8018180:	d405      	bmi.n	801818e <_vfiprintf_r+0x2a>
 8018182:	89ab      	ldrh	r3, [r5, #12]
 8018184:	059a      	lsls	r2, r3, #22
 8018186:	d402      	bmi.n	801818e <_vfiprintf_r+0x2a>
 8018188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801818a:	f7ff fdd4 	bl	8017d36 <__retarget_lock_acquire_recursive>
 801818e:	89ab      	ldrh	r3, [r5, #12]
 8018190:	071b      	lsls	r3, r3, #28
 8018192:	d501      	bpl.n	8018198 <_vfiprintf_r+0x34>
 8018194:	692b      	ldr	r3, [r5, #16]
 8018196:	b99b      	cbnz	r3, 80181c0 <_vfiprintf_r+0x5c>
 8018198:	4629      	mov	r1, r5
 801819a:	4630      	mov	r0, r6
 801819c:	f000 fb84 	bl	80188a8 <__swsetup_r>
 80181a0:	b170      	cbz	r0, 80181c0 <_vfiprintf_r+0x5c>
 80181a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181a4:	07dc      	lsls	r4, r3, #31
 80181a6:	d504      	bpl.n	80181b2 <_vfiprintf_r+0x4e>
 80181a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181ac:	b01d      	add	sp, #116	@ 0x74
 80181ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181b2:	89ab      	ldrh	r3, [r5, #12]
 80181b4:	0598      	lsls	r0, r3, #22
 80181b6:	d4f7      	bmi.n	80181a8 <_vfiprintf_r+0x44>
 80181b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181ba:	f7ff fdbd 	bl	8017d38 <__retarget_lock_release_recursive>
 80181be:	e7f3      	b.n	80181a8 <_vfiprintf_r+0x44>
 80181c0:	2300      	movs	r3, #0
 80181c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80181c4:	2320      	movs	r3, #32
 80181c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80181ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80181ce:	2330      	movs	r3, #48	@ 0x30
 80181d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018380 <_vfiprintf_r+0x21c>
 80181d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80181d8:	f04f 0901 	mov.w	r9, #1
 80181dc:	4623      	mov	r3, r4
 80181de:	469a      	mov	sl, r3
 80181e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181e4:	b10a      	cbz	r2, 80181ea <_vfiprintf_r+0x86>
 80181e6:	2a25      	cmp	r2, #37	@ 0x25
 80181e8:	d1f9      	bne.n	80181de <_vfiprintf_r+0x7a>
 80181ea:	ebba 0b04 	subs.w	fp, sl, r4
 80181ee:	d00b      	beq.n	8018208 <_vfiprintf_r+0xa4>
 80181f0:	465b      	mov	r3, fp
 80181f2:	4622      	mov	r2, r4
 80181f4:	4629      	mov	r1, r5
 80181f6:	4630      	mov	r0, r6
 80181f8:	f7ff ffa1 	bl	801813e <__sfputs_r>
 80181fc:	3001      	adds	r0, #1
 80181fe:	f000 80a7 	beq.w	8018350 <_vfiprintf_r+0x1ec>
 8018202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018204:	445a      	add	r2, fp
 8018206:	9209      	str	r2, [sp, #36]	@ 0x24
 8018208:	f89a 3000 	ldrb.w	r3, [sl]
 801820c:	2b00      	cmp	r3, #0
 801820e:	f000 809f 	beq.w	8018350 <_vfiprintf_r+0x1ec>
 8018212:	2300      	movs	r3, #0
 8018214:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801821c:	f10a 0a01 	add.w	sl, sl, #1
 8018220:	9304      	str	r3, [sp, #16]
 8018222:	9307      	str	r3, [sp, #28]
 8018224:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018228:	931a      	str	r3, [sp, #104]	@ 0x68
 801822a:	4654      	mov	r4, sl
 801822c:	2205      	movs	r2, #5
 801822e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018232:	4853      	ldr	r0, [pc, #332]	@ (8018380 <_vfiprintf_r+0x21c>)
 8018234:	f7e8 f80c 	bl	8000250 <memchr>
 8018238:	9a04      	ldr	r2, [sp, #16]
 801823a:	b9d8      	cbnz	r0, 8018274 <_vfiprintf_r+0x110>
 801823c:	06d1      	lsls	r1, r2, #27
 801823e:	bf44      	itt	mi
 8018240:	2320      	movmi	r3, #32
 8018242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018246:	0713      	lsls	r3, r2, #28
 8018248:	bf44      	itt	mi
 801824a:	232b      	movmi	r3, #43	@ 0x2b
 801824c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018250:	f89a 3000 	ldrb.w	r3, [sl]
 8018254:	2b2a      	cmp	r3, #42	@ 0x2a
 8018256:	d015      	beq.n	8018284 <_vfiprintf_r+0x120>
 8018258:	9a07      	ldr	r2, [sp, #28]
 801825a:	4654      	mov	r4, sl
 801825c:	2000      	movs	r0, #0
 801825e:	f04f 0c0a 	mov.w	ip, #10
 8018262:	4621      	mov	r1, r4
 8018264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018268:	3b30      	subs	r3, #48	@ 0x30
 801826a:	2b09      	cmp	r3, #9
 801826c:	d94b      	bls.n	8018306 <_vfiprintf_r+0x1a2>
 801826e:	b1b0      	cbz	r0, 801829e <_vfiprintf_r+0x13a>
 8018270:	9207      	str	r2, [sp, #28]
 8018272:	e014      	b.n	801829e <_vfiprintf_r+0x13a>
 8018274:	eba0 0308 	sub.w	r3, r0, r8
 8018278:	fa09 f303 	lsl.w	r3, r9, r3
 801827c:	4313      	orrs	r3, r2
 801827e:	9304      	str	r3, [sp, #16]
 8018280:	46a2      	mov	sl, r4
 8018282:	e7d2      	b.n	801822a <_vfiprintf_r+0xc6>
 8018284:	9b03      	ldr	r3, [sp, #12]
 8018286:	1d19      	adds	r1, r3, #4
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	9103      	str	r1, [sp, #12]
 801828c:	2b00      	cmp	r3, #0
 801828e:	bfbb      	ittet	lt
 8018290:	425b      	neglt	r3, r3
 8018292:	f042 0202 	orrlt.w	r2, r2, #2
 8018296:	9307      	strge	r3, [sp, #28]
 8018298:	9307      	strlt	r3, [sp, #28]
 801829a:	bfb8      	it	lt
 801829c:	9204      	strlt	r2, [sp, #16]
 801829e:	7823      	ldrb	r3, [r4, #0]
 80182a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80182a2:	d10a      	bne.n	80182ba <_vfiprintf_r+0x156>
 80182a4:	7863      	ldrb	r3, [r4, #1]
 80182a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80182a8:	d132      	bne.n	8018310 <_vfiprintf_r+0x1ac>
 80182aa:	9b03      	ldr	r3, [sp, #12]
 80182ac:	1d1a      	adds	r2, r3, #4
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	9203      	str	r2, [sp, #12]
 80182b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182b6:	3402      	adds	r4, #2
 80182b8:	9305      	str	r3, [sp, #20]
 80182ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018390 <_vfiprintf_r+0x22c>
 80182be:	7821      	ldrb	r1, [r4, #0]
 80182c0:	2203      	movs	r2, #3
 80182c2:	4650      	mov	r0, sl
 80182c4:	f7e7 ffc4 	bl	8000250 <memchr>
 80182c8:	b138      	cbz	r0, 80182da <_vfiprintf_r+0x176>
 80182ca:	9b04      	ldr	r3, [sp, #16]
 80182cc:	eba0 000a 	sub.w	r0, r0, sl
 80182d0:	2240      	movs	r2, #64	@ 0x40
 80182d2:	4082      	lsls	r2, r0
 80182d4:	4313      	orrs	r3, r2
 80182d6:	3401      	adds	r4, #1
 80182d8:	9304      	str	r3, [sp, #16]
 80182da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182de:	4829      	ldr	r0, [pc, #164]	@ (8018384 <_vfiprintf_r+0x220>)
 80182e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80182e4:	2206      	movs	r2, #6
 80182e6:	f7e7 ffb3 	bl	8000250 <memchr>
 80182ea:	2800      	cmp	r0, #0
 80182ec:	d03f      	beq.n	801836e <_vfiprintf_r+0x20a>
 80182ee:	4b26      	ldr	r3, [pc, #152]	@ (8018388 <_vfiprintf_r+0x224>)
 80182f0:	bb1b      	cbnz	r3, 801833a <_vfiprintf_r+0x1d6>
 80182f2:	9b03      	ldr	r3, [sp, #12]
 80182f4:	3307      	adds	r3, #7
 80182f6:	f023 0307 	bic.w	r3, r3, #7
 80182fa:	3308      	adds	r3, #8
 80182fc:	9303      	str	r3, [sp, #12]
 80182fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018300:	443b      	add	r3, r7
 8018302:	9309      	str	r3, [sp, #36]	@ 0x24
 8018304:	e76a      	b.n	80181dc <_vfiprintf_r+0x78>
 8018306:	fb0c 3202 	mla	r2, ip, r2, r3
 801830a:	460c      	mov	r4, r1
 801830c:	2001      	movs	r0, #1
 801830e:	e7a8      	b.n	8018262 <_vfiprintf_r+0xfe>
 8018310:	2300      	movs	r3, #0
 8018312:	3401      	adds	r4, #1
 8018314:	9305      	str	r3, [sp, #20]
 8018316:	4619      	mov	r1, r3
 8018318:	f04f 0c0a 	mov.w	ip, #10
 801831c:	4620      	mov	r0, r4
 801831e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018322:	3a30      	subs	r2, #48	@ 0x30
 8018324:	2a09      	cmp	r2, #9
 8018326:	d903      	bls.n	8018330 <_vfiprintf_r+0x1cc>
 8018328:	2b00      	cmp	r3, #0
 801832a:	d0c6      	beq.n	80182ba <_vfiprintf_r+0x156>
 801832c:	9105      	str	r1, [sp, #20]
 801832e:	e7c4      	b.n	80182ba <_vfiprintf_r+0x156>
 8018330:	fb0c 2101 	mla	r1, ip, r1, r2
 8018334:	4604      	mov	r4, r0
 8018336:	2301      	movs	r3, #1
 8018338:	e7f0      	b.n	801831c <_vfiprintf_r+0x1b8>
 801833a:	ab03      	add	r3, sp, #12
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	462a      	mov	r2, r5
 8018340:	4b12      	ldr	r3, [pc, #72]	@ (801838c <_vfiprintf_r+0x228>)
 8018342:	a904      	add	r1, sp, #16
 8018344:	4630      	mov	r0, r6
 8018346:	f3af 8000 	nop.w
 801834a:	4607      	mov	r7, r0
 801834c:	1c78      	adds	r0, r7, #1
 801834e:	d1d6      	bne.n	80182fe <_vfiprintf_r+0x19a>
 8018350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018352:	07d9      	lsls	r1, r3, #31
 8018354:	d405      	bmi.n	8018362 <_vfiprintf_r+0x1fe>
 8018356:	89ab      	ldrh	r3, [r5, #12]
 8018358:	059a      	lsls	r2, r3, #22
 801835a:	d402      	bmi.n	8018362 <_vfiprintf_r+0x1fe>
 801835c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801835e:	f7ff fceb 	bl	8017d38 <__retarget_lock_release_recursive>
 8018362:	89ab      	ldrh	r3, [r5, #12]
 8018364:	065b      	lsls	r3, r3, #25
 8018366:	f53f af1f 	bmi.w	80181a8 <_vfiprintf_r+0x44>
 801836a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801836c:	e71e      	b.n	80181ac <_vfiprintf_r+0x48>
 801836e:	ab03      	add	r3, sp, #12
 8018370:	9300      	str	r3, [sp, #0]
 8018372:	462a      	mov	r2, r5
 8018374:	4b05      	ldr	r3, [pc, #20]	@ (801838c <_vfiprintf_r+0x228>)
 8018376:	a904      	add	r1, sp, #16
 8018378:	4630      	mov	r0, r6
 801837a:	f000 f879 	bl	8018470 <_printf_i>
 801837e:	e7e4      	b.n	801834a <_vfiprintf_r+0x1e6>
 8018380:	08019894 	.word	0x08019894
 8018384:	0801989e 	.word	0x0801989e
 8018388:	00000000 	.word	0x00000000
 801838c:	0801813f 	.word	0x0801813f
 8018390:	0801989a 	.word	0x0801989a

08018394 <_printf_common>:
 8018394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018398:	4616      	mov	r6, r2
 801839a:	4698      	mov	r8, r3
 801839c:	688a      	ldr	r2, [r1, #8]
 801839e:	690b      	ldr	r3, [r1, #16]
 80183a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80183a4:	4293      	cmp	r3, r2
 80183a6:	bfb8      	it	lt
 80183a8:	4613      	movlt	r3, r2
 80183aa:	6033      	str	r3, [r6, #0]
 80183ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80183b0:	4607      	mov	r7, r0
 80183b2:	460c      	mov	r4, r1
 80183b4:	b10a      	cbz	r2, 80183ba <_printf_common+0x26>
 80183b6:	3301      	adds	r3, #1
 80183b8:	6033      	str	r3, [r6, #0]
 80183ba:	6823      	ldr	r3, [r4, #0]
 80183bc:	0699      	lsls	r1, r3, #26
 80183be:	bf42      	ittt	mi
 80183c0:	6833      	ldrmi	r3, [r6, #0]
 80183c2:	3302      	addmi	r3, #2
 80183c4:	6033      	strmi	r3, [r6, #0]
 80183c6:	6825      	ldr	r5, [r4, #0]
 80183c8:	f015 0506 	ands.w	r5, r5, #6
 80183cc:	d106      	bne.n	80183dc <_printf_common+0x48>
 80183ce:	f104 0a19 	add.w	sl, r4, #25
 80183d2:	68e3      	ldr	r3, [r4, #12]
 80183d4:	6832      	ldr	r2, [r6, #0]
 80183d6:	1a9b      	subs	r3, r3, r2
 80183d8:	42ab      	cmp	r3, r5
 80183da:	dc26      	bgt.n	801842a <_printf_common+0x96>
 80183dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80183e0:	6822      	ldr	r2, [r4, #0]
 80183e2:	3b00      	subs	r3, #0
 80183e4:	bf18      	it	ne
 80183e6:	2301      	movne	r3, #1
 80183e8:	0692      	lsls	r2, r2, #26
 80183ea:	d42b      	bmi.n	8018444 <_printf_common+0xb0>
 80183ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80183f0:	4641      	mov	r1, r8
 80183f2:	4638      	mov	r0, r7
 80183f4:	47c8      	blx	r9
 80183f6:	3001      	adds	r0, #1
 80183f8:	d01e      	beq.n	8018438 <_printf_common+0xa4>
 80183fa:	6823      	ldr	r3, [r4, #0]
 80183fc:	6922      	ldr	r2, [r4, #16]
 80183fe:	f003 0306 	and.w	r3, r3, #6
 8018402:	2b04      	cmp	r3, #4
 8018404:	bf02      	ittt	eq
 8018406:	68e5      	ldreq	r5, [r4, #12]
 8018408:	6833      	ldreq	r3, [r6, #0]
 801840a:	1aed      	subeq	r5, r5, r3
 801840c:	68a3      	ldr	r3, [r4, #8]
 801840e:	bf0c      	ite	eq
 8018410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018414:	2500      	movne	r5, #0
 8018416:	4293      	cmp	r3, r2
 8018418:	bfc4      	itt	gt
 801841a:	1a9b      	subgt	r3, r3, r2
 801841c:	18ed      	addgt	r5, r5, r3
 801841e:	2600      	movs	r6, #0
 8018420:	341a      	adds	r4, #26
 8018422:	42b5      	cmp	r5, r6
 8018424:	d11a      	bne.n	801845c <_printf_common+0xc8>
 8018426:	2000      	movs	r0, #0
 8018428:	e008      	b.n	801843c <_printf_common+0xa8>
 801842a:	2301      	movs	r3, #1
 801842c:	4652      	mov	r2, sl
 801842e:	4641      	mov	r1, r8
 8018430:	4638      	mov	r0, r7
 8018432:	47c8      	blx	r9
 8018434:	3001      	adds	r0, #1
 8018436:	d103      	bne.n	8018440 <_printf_common+0xac>
 8018438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018440:	3501      	adds	r5, #1
 8018442:	e7c6      	b.n	80183d2 <_printf_common+0x3e>
 8018444:	18e1      	adds	r1, r4, r3
 8018446:	1c5a      	adds	r2, r3, #1
 8018448:	2030      	movs	r0, #48	@ 0x30
 801844a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801844e:	4422      	add	r2, r4
 8018450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018458:	3302      	adds	r3, #2
 801845a:	e7c7      	b.n	80183ec <_printf_common+0x58>
 801845c:	2301      	movs	r3, #1
 801845e:	4622      	mov	r2, r4
 8018460:	4641      	mov	r1, r8
 8018462:	4638      	mov	r0, r7
 8018464:	47c8      	blx	r9
 8018466:	3001      	adds	r0, #1
 8018468:	d0e6      	beq.n	8018438 <_printf_common+0xa4>
 801846a:	3601      	adds	r6, #1
 801846c:	e7d9      	b.n	8018422 <_printf_common+0x8e>
	...

08018470 <_printf_i>:
 8018470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018474:	7e0f      	ldrb	r7, [r1, #24]
 8018476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018478:	2f78      	cmp	r7, #120	@ 0x78
 801847a:	4691      	mov	r9, r2
 801847c:	4680      	mov	r8, r0
 801847e:	460c      	mov	r4, r1
 8018480:	469a      	mov	sl, r3
 8018482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018486:	d807      	bhi.n	8018498 <_printf_i+0x28>
 8018488:	2f62      	cmp	r7, #98	@ 0x62
 801848a:	d80a      	bhi.n	80184a2 <_printf_i+0x32>
 801848c:	2f00      	cmp	r7, #0
 801848e:	f000 80d2 	beq.w	8018636 <_printf_i+0x1c6>
 8018492:	2f58      	cmp	r7, #88	@ 0x58
 8018494:	f000 80b9 	beq.w	801860a <_printf_i+0x19a>
 8018498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801849c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80184a0:	e03a      	b.n	8018518 <_printf_i+0xa8>
 80184a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80184a6:	2b15      	cmp	r3, #21
 80184a8:	d8f6      	bhi.n	8018498 <_printf_i+0x28>
 80184aa:	a101      	add	r1, pc, #4	@ (adr r1, 80184b0 <_printf_i+0x40>)
 80184ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184b0:	08018509 	.word	0x08018509
 80184b4:	0801851d 	.word	0x0801851d
 80184b8:	08018499 	.word	0x08018499
 80184bc:	08018499 	.word	0x08018499
 80184c0:	08018499 	.word	0x08018499
 80184c4:	08018499 	.word	0x08018499
 80184c8:	0801851d 	.word	0x0801851d
 80184cc:	08018499 	.word	0x08018499
 80184d0:	08018499 	.word	0x08018499
 80184d4:	08018499 	.word	0x08018499
 80184d8:	08018499 	.word	0x08018499
 80184dc:	0801861d 	.word	0x0801861d
 80184e0:	08018547 	.word	0x08018547
 80184e4:	080185d7 	.word	0x080185d7
 80184e8:	08018499 	.word	0x08018499
 80184ec:	08018499 	.word	0x08018499
 80184f0:	0801863f 	.word	0x0801863f
 80184f4:	08018499 	.word	0x08018499
 80184f8:	08018547 	.word	0x08018547
 80184fc:	08018499 	.word	0x08018499
 8018500:	08018499 	.word	0x08018499
 8018504:	080185df 	.word	0x080185df
 8018508:	6833      	ldr	r3, [r6, #0]
 801850a:	1d1a      	adds	r2, r3, #4
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	6032      	str	r2, [r6, #0]
 8018510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018518:	2301      	movs	r3, #1
 801851a:	e09d      	b.n	8018658 <_printf_i+0x1e8>
 801851c:	6833      	ldr	r3, [r6, #0]
 801851e:	6820      	ldr	r0, [r4, #0]
 8018520:	1d19      	adds	r1, r3, #4
 8018522:	6031      	str	r1, [r6, #0]
 8018524:	0606      	lsls	r6, r0, #24
 8018526:	d501      	bpl.n	801852c <_printf_i+0xbc>
 8018528:	681d      	ldr	r5, [r3, #0]
 801852a:	e003      	b.n	8018534 <_printf_i+0xc4>
 801852c:	0645      	lsls	r5, r0, #25
 801852e:	d5fb      	bpl.n	8018528 <_printf_i+0xb8>
 8018530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018534:	2d00      	cmp	r5, #0
 8018536:	da03      	bge.n	8018540 <_printf_i+0xd0>
 8018538:	232d      	movs	r3, #45	@ 0x2d
 801853a:	426d      	negs	r5, r5
 801853c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018540:	4859      	ldr	r0, [pc, #356]	@ (80186a8 <_printf_i+0x238>)
 8018542:	230a      	movs	r3, #10
 8018544:	e011      	b.n	801856a <_printf_i+0xfa>
 8018546:	6821      	ldr	r1, [r4, #0]
 8018548:	6833      	ldr	r3, [r6, #0]
 801854a:	0608      	lsls	r0, r1, #24
 801854c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018550:	d402      	bmi.n	8018558 <_printf_i+0xe8>
 8018552:	0649      	lsls	r1, r1, #25
 8018554:	bf48      	it	mi
 8018556:	b2ad      	uxthmi	r5, r5
 8018558:	2f6f      	cmp	r7, #111	@ 0x6f
 801855a:	4853      	ldr	r0, [pc, #332]	@ (80186a8 <_printf_i+0x238>)
 801855c:	6033      	str	r3, [r6, #0]
 801855e:	bf14      	ite	ne
 8018560:	230a      	movne	r3, #10
 8018562:	2308      	moveq	r3, #8
 8018564:	2100      	movs	r1, #0
 8018566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801856a:	6866      	ldr	r6, [r4, #4]
 801856c:	60a6      	str	r6, [r4, #8]
 801856e:	2e00      	cmp	r6, #0
 8018570:	bfa2      	ittt	ge
 8018572:	6821      	ldrge	r1, [r4, #0]
 8018574:	f021 0104 	bicge.w	r1, r1, #4
 8018578:	6021      	strge	r1, [r4, #0]
 801857a:	b90d      	cbnz	r5, 8018580 <_printf_i+0x110>
 801857c:	2e00      	cmp	r6, #0
 801857e:	d04b      	beq.n	8018618 <_printf_i+0x1a8>
 8018580:	4616      	mov	r6, r2
 8018582:	fbb5 f1f3 	udiv	r1, r5, r3
 8018586:	fb03 5711 	mls	r7, r3, r1, r5
 801858a:	5dc7      	ldrb	r7, [r0, r7]
 801858c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018590:	462f      	mov	r7, r5
 8018592:	42bb      	cmp	r3, r7
 8018594:	460d      	mov	r5, r1
 8018596:	d9f4      	bls.n	8018582 <_printf_i+0x112>
 8018598:	2b08      	cmp	r3, #8
 801859a:	d10b      	bne.n	80185b4 <_printf_i+0x144>
 801859c:	6823      	ldr	r3, [r4, #0]
 801859e:	07df      	lsls	r7, r3, #31
 80185a0:	d508      	bpl.n	80185b4 <_printf_i+0x144>
 80185a2:	6923      	ldr	r3, [r4, #16]
 80185a4:	6861      	ldr	r1, [r4, #4]
 80185a6:	4299      	cmp	r1, r3
 80185a8:	bfde      	ittt	le
 80185aa:	2330      	movle	r3, #48	@ 0x30
 80185ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80185b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80185b4:	1b92      	subs	r2, r2, r6
 80185b6:	6122      	str	r2, [r4, #16]
 80185b8:	f8cd a000 	str.w	sl, [sp]
 80185bc:	464b      	mov	r3, r9
 80185be:	aa03      	add	r2, sp, #12
 80185c0:	4621      	mov	r1, r4
 80185c2:	4640      	mov	r0, r8
 80185c4:	f7ff fee6 	bl	8018394 <_printf_common>
 80185c8:	3001      	adds	r0, #1
 80185ca:	d14a      	bne.n	8018662 <_printf_i+0x1f2>
 80185cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80185d0:	b004      	add	sp, #16
 80185d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185d6:	6823      	ldr	r3, [r4, #0]
 80185d8:	f043 0320 	orr.w	r3, r3, #32
 80185dc:	6023      	str	r3, [r4, #0]
 80185de:	4833      	ldr	r0, [pc, #204]	@ (80186ac <_printf_i+0x23c>)
 80185e0:	2778      	movs	r7, #120	@ 0x78
 80185e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80185e6:	6823      	ldr	r3, [r4, #0]
 80185e8:	6831      	ldr	r1, [r6, #0]
 80185ea:	061f      	lsls	r7, r3, #24
 80185ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80185f0:	d402      	bmi.n	80185f8 <_printf_i+0x188>
 80185f2:	065f      	lsls	r7, r3, #25
 80185f4:	bf48      	it	mi
 80185f6:	b2ad      	uxthmi	r5, r5
 80185f8:	6031      	str	r1, [r6, #0]
 80185fa:	07d9      	lsls	r1, r3, #31
 80185fc:	bf44      	itt	mi
 80185fe:	f043 0320 	orrmi.w	r3, r3, #32
 8018602:	6023      	strmi	r3, [r4, #0]
 8018604:	b11d      	cbz	r5, 801860e <_printf_i+0x19e>
 8018606:	2310      	movs	r3, #16
 8018608:	e7ac      	b.n	8018564 <_printf_i+0xf4>
 801860a:	4827      	ldr	r0, [pc, #156]	@ (80186a8 <_printf_i+0x238>)
 801860c:	e7e9      	b.n	80185e2 <_printf_i+0x172>
 801860e:	6823      	ldr	r3, [r4, #0]
 8018610:	f023 0320 	bic.w	r3, r3, #32
 8018614:	6023      	str	r3, [r4, #0]
 8018616:	e7f6      	b.n	8018606 <_printf_i+0x196>
 8018618:	4616      	mov	r6, r2
 801861a:	e7bd      	b.n	8018598 <_printf_i+0x128>
 801861c:	6833      	ldr	r3, [r6, #0]
 801861e:	6825      	ldr	r5, [r4, #0]
 8018620:	6961      	ldr	r1, [r4, #20]
 8018622:	1d18      	adds	r0, r3, #4
 8018624:	6030      	str	r0, [r6, #0]
 8018626:	062e      	lsls	r6, r5, #24
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	d501      	bpl.n	8018630 <_printf_i+0x1c0>
 801862c:	6019      	str	r1, [r3, #0]
 801862e:	e002      	b.n	8018636 <_printf_i+0x1c6>
 8018630:	0668      	lsls	r0, r5, #25
 8018632:	d5fb      	bpl.n	801862c <_printf_i+0x1bc>
 8018634:	8019      	strh	r1, [r3, #0]
 8018636:	2300      	movs	r3, #0
 8018638:	6123      	str	r3, [r4, #16]
 801863a:	4616      	mov	r6, r2
 801863c:	e7bc      	b.n	80185b8 <_printf_i+0x148>
 801863e:	6833      	ldr	r3, [r6, #0]
 8018640:	1d1a      	adds	r2, r3, #4
 8018642:	6032      	str	r2, [r6, #0]
 8018644:	681e      	ldr	r6, [r3, #0]
 8018646:	6862      	ldr	r2, [r4, #4]
 8018648:	2100      	movs	r1, #0
 801864a:	4630      	mov	r0, r6
 801864c:	f7e7 fe00 	bl	8000250 <memchr>
 8018650:	b108      	cbz	r0, 8018656 <_printf_i+0x1e6>
 8018652:	1b80      	subs	r0, r0, r6
 8018654:	6060      	str	r0, [r4, #4]
 8018656:	6863      	ldr	r3, [r4, #4]
 8018658:	6123      	str	r3, [r4, #16]
 801865a:	2300      	movs	r3, #0
 801865c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018660:	e7aa      	b.n	80185b8 <_printf_i+0x148>
 8018662:	6923      	ldr	r3, [r4, #16]
 8018664:	4632      	mov	r2, r6
 8018666:	4649      	mov	r1, r9
 8018668:	4640      	mov	r0, r8
 801866a:	47d0      	blx	sl
 801866c:	3001      	adds	r0, #1
 801866e:	d0ad      	beq.n	80185cc <_printf_i+0x15c>
 8018670:	6823      	ldr	r3, [r4, #0]
 8018672:	079b      	lsls	r3, r3, #30
 8018674:	d413      	bmi.n	801869e <_printf_i+0x22e>
 8018676:	68e0      	ldr	r0, [r4, #12]
 8018678:	9b03      	ldr	r3, [sp, #12]
 801867a:	4298      	cmp	r0, r3
 801867c:	bfb8      	it	lt
 801867e:	4618      	movlt	r0, r3
 8018680:	e7a6      	b.n	80185d0 <_printf_i+0x160>
 8018682:	2301      	movs	r3, #1
 8018684:	4632      	mov	r2, r6
 8018686:	4649      	mov	r1, r9
 8018688:	4640      	mov	r0, r8
 801868a:	47d0      	blx	sl
 801868c:	3001      	adds	r0, #1
 801868e:	d09d      	beq.n	80185cc <_printf_i+0x15c>
 8018690:	3501      	adds	r5, #1
 8018692:	68e3      	ldr	r3, [r4, #12]
 8018694:	9903      	ldr	r1, [sp, #12]
 8018696:	1a5b      	subs	r3, r3, r1
 8018698:	42ab      	cmp	r3, r5
 801869a:	dcf2      	bgt.n	8018682 <_printf_i+0x212>
 801869c:	e7eb      	b.n	8018676 <_printf_i+0x206>
 801869e:	2500      	movs	r5, #0
 80186a0:	f104 0619 	add.w	r6, r4, #25
 80186a4:	e7f5      	b.n	8018692 <_printf_i+0x222>
 80186a6:	bf00      	nop
 80186a8:	080198a5 	.word	0x080198a5
 80186ac:	080198b6 	.word	0x080198b6

080186b0 <__sflush_r>:
 80186b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80186b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186b8:	0716      	lsls	r6, r2, #28
 80186ba:	4605      	mov	r5, r0
 80186bc:	460c      	mov	r4, r1
 80186be:	d454      	bmi.n	801876a <__sflush_r+0xba>
 80186c0:	684b      	ldr	r3, [r1, #4]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	dc02      	bgt.n	80186cc <__sflush_r+0x1c>
 80186c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	dd48      	ble.n	801875e <__sflush_r+0xae>
 80186cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80186ce:	2e00      	cmp	r6, #0
 80186d0:	d045      	beq.n	801875e <__sflush_r+0xae>
 80186d2:	2300      	movs	r3, #0
 80186d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80186d8:	682f      	ldr	r7, [r5, #0]
 80186da:	6a21      	ldr	r1, [r4, #32]
 80186dc:	602b      	str	r3, [r5, #0]
 80186de:	d030      	beq.n	8018742 <__sflush_r+0x92>
 80186e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80186e2:	89a3      	ldrh	r3, [r4, #12]
 80186e4:	0759      	lsls	r1, r3, #29
 80186e6:	d505      	bpl.n	80186f4 <__sflush_r+0x44>
 80186e8:	6863      	ldr	r3, [r4, #4]
 80186ea:	1ad2      	subs	r2, r2, r3
 80186ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80186ee:	b10b      	cbz	r3, 80186f4 <__sflush_r+0x44>
 80186f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80186f2:	1ad2      	subs	r2, r2, r3
 80186f4:	2300      	movs	r3, #0
 80186f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80186f8:	6a21      	ldr	r1, [r4, #32]
 80186fa:	4628      	mov	r0, r5
 80186fc:	47b0      	blx	r6
 80186fe:	1c43      	adds	r3, r0, #1
 8018700:	89a3      	ldrh	r3, [r4, #12]
 8018702:	d106      	bne.n	8018712 <__sflush_r+0x62>
 8018704:	6829      	ldr	r1, [r5, #0]
 8018706:	291d      	cmp	r1, #29
 8018708:	d82b      	bhi.n	8018762 <__sflush_r+0xb2>
 801870a:	4a2a      	ldr	r2, [pc, #168]	@ (80187b4 <__sflush_r+0x104>)
 801870c:	410a      	asrs	r2, r1
 801870e:	07d6      	lsls	r6, r2, #31
 8018710:	d427      	bmi.n	8018762 <__sflush_r+0xb2>
 8018712:	2200      	movs	r2, #0
 8018714:	6062      	str	r2, [r4, #4]
 8018716:	04d9      	lsls	r1, r3, #19
 8018718:	6922      	ldr	r2, [r4, #16]
 801871a:	6022      	str	r2, [r4, #0]
 801871c:	d504      	bpl.n	8018728 <__sflush_r+0x78>
 801871e:	1c42      	adds	r2, r0, #1
 8018720:	d101      	bne.n	8018726 <__sflush_r+0x76>
 8018722:	682b      	ldr	r3, [r5, #0]
 8018724:	b903      	cbnz	r3, 8018728 <__sflush_r+0x78>
 8018726:	6560      	str	r0, [r4, #84]	@ 0x54
 8018728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801872a:	602f      	str	r7, [r5, #0]
 801872c:	b1b9      	cbz	r1, 801875e <__sflush_r+0xae>
 801872e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018732:	4299      	cmp	r1, r3
 8018734:	d002      	beq.n	801873c <__sflush_r+0x8c>
 8018736:	4628      	mov	r0, r5
 8018738:	f7ff fb40 	bl	8017dbc <_free_r>
 801873c:	2300      	movs	r3, #0
 801873e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018740:	e00d      	b.n	801875e <__sflush_r+0xae>
 8018742:	2301      	movs	r3, #1
 8018744:	4628      	mov	r0, r5
 8018746:	47b0      	blx	r6
 8018748:	4602      	mov	r2, r0
 801874a:	1c50      	adds	r0, r2, #1
 801874c:	d1c9      	bne.n	80186e2 <__sflush_r+0x32>
 801874e:	682b      	ldr	r3, [r5, #0]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d0c6      	beq.n	80186e2 <__sflush_r+0x32>
 8018754:	2b1d      	cmp	r3, #29
 8018756:	d001      	beq.n	801875c <__sflush_r+0xac>
 8018758:	2b16      	cmp	r3, #22
 801875a:	d11e      	bne.n	801879a <__sflush_r+0xea>
 801875c:	602f      	str	r7, [r5, #0]
 801875e:	2000      	movs	r0, #0
 8018760:	e022      	b.n	80187a8 <__sflush_r+0xf8>
 8018762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018766:	b21b      	sxth	r3, r3
 8018768:	e01b      	b.n	80187a2 <__sflush_r+0xf2>
 801876a:	690f      	ldr	r7, [r1, #16]
 801876c:	2f00      	cmp	r7, #0
 801876e:	d0f6      	beq.n	801875e <__sflush_r+0xae>
 8018770:	0793      	lsls	r3, r2, #30
 8018772:	680e      	ldr	r6, [r1, #0]
 8018774:	bf08      	it	eq
 8018776:	694b      	ldreq	r3, [r1, #20]
 8018778:	600f      	str	r7, [r1, #0]
 801877a:	bf18      	it	ne
 801877c:	2300      	movne	r3, #0
 801877e:	eba6 0807 	sub.w	r8, r6, r7
 8018782:	608b      	str	r3, [r1, #8]
 8018784:	f1b8 0f00 	cmp.w	r8, #0
 8018788:	dde9      	ble.n	801875e <__sflush_r+0xae>
 801878a:	6a21      	ldr	r1, [r4, #32]
 801878c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801878e:	4643      	mov	r3, r8
 8018790:	463a      	mov	r2, r7
 8018792:	4628      	mov	r0, r5
 8018794:	47b0      	blx	r6
 8018796:	2800      	cmp	r0, #0
 8018798:	dc08      	bgt.n	80187ac <__sflush_r+0xfc>
 801879a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801879e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187a2:	81a3      	strh	r3, [r4, #12]
 80187a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187ac:	4407      	add	r7, r0
 80187ae:	eba8 0800 	sub.w	r8, r8, r0
 80187b2:	e7e7      	b.n	8018784 <__sflush_r+0xd4>
 80187b4:	dfbffffe 	.word	0xdfbffffe

080187b8 <_fflush_r>:
 80187b8:	b538      	push	{r3, r4, r5, lr}
 80187ba:	690b      	ldr	r3, [r1, #16]
 80187bc:	4605      	mov	r5, r0
 80187be:	460c      	mov	r4, r1
 80187c0:	b913      	cbnz	r3, 80187c8 <_fflush_r+0x10>
 80187c2:	2500      	movs	r5, #0
 80187c4:	4628      	mov	r0, r5
 80187c6:	bd38      	pop	{r3, r4, r5, pc}
 80187c8:	b118      	cbz	r0, 80187d2 <_fflush_r+0x1a>
 80187ca:	6a03      	ldr	r3, [r0, #32]
 80187cc:	b90b      	cbnz	r3, 80187d2 <_fflush_r+0x1a>
 80187ce:	f7ff f8d1 	bl	8017974 <__sinit>
 80187d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d0f3      	beq.n	80187c2 <_fflush_r+0xa>
 80187da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80187dc:	07d0      	lsls	r0, r2, #31
 80187de:	d404      	bmi.n	80187ea <_fflush_r+0x32>
 80187e0:	0599      	lsls	r1, r3, #22
 80187e2:	d402      	bmi.n	80187ea <_fflush_r+0x32>
 80187e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80187e6:	f7ff faa6 	bl	8017d36 <__retarget_lock_acquire_recursive>
 80187ea:	4628      	mov	r0, r5
 80187ec:	4621      	mov	r1, r4
 80187ee:	f7ff ff5f 	bl	80186b0 <__sflush_r>
 80187f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80187f4:	07da      	lsls	r2, r3, #31
 80187f6:	4605      	mov	r5, r0
 80187f8:	d4e4      	bmi.n	80187c4 <_fflush_r+0xc>
 80187fa:	89a3      	ldrh	r3, [r4, #12]
 80187fc:	059b      	lsls	r3, r3, #22
 80187fe:	d4e1      	bmi.n	80187c4 <_fflush_r+0xc>
 8018800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018802:	f7ff fa99 	bl	8017d38 <__retarget_lock_release_recursive>
 8018806:	e7dd      	b.n	80187c4 <_fflush_r+0xc>

08018808 <fiprintf>:
 8018808:	b40e      	push	{r1, r2, r3}
 801880a:	b503      	push	{r0, r1, lr}
 801880c:	4601      	mov	r1, r0
 801880e:	ab03      	add	r3, sp, #12
 8018810:	4805      	ldr	r0, [pc, #20]	@ (8018828 <fiprintf+0x20>)
 8018812:	f853 2b04 	ldr.w	r2, [r3], #4
 8018816:	6800      	ldr	r0, [r0, #0]
 8018818:	9301      	str	r3, [sp, #4]
 801881a:	f7ff fca3 	bl	8018164 <_vfiprintf_r>
 801881e:	b002      	add	sp, #8
 8018820:	f85d eb04 	ldr.w	lr, [sp], #4
 8018824:	b003      	add	sp, #12
 8018826:	4770      	bx	lr
 8018828:	200001e4 	.word	0x200001e4

0801882c <__swbuf_r>:
 801882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801882e:	460e      	mov	r6, r1
 8018830:	4614      	mov	r4, r2
 8018832:	4605      	mov	r5, r0
 8018834:	b118      	cbz	r0, 801883e <__swbuf_r+0x12>
 8018836:	6a03      	ldr	r3, [r0, #32]
 8018838:	b90b      	cbnz	r3, 801883e <__swbuf_r+0x12>
 801883a:	f7ff f89b 	bl	8017974 <__sinit>
 801883e:	69a3      	ldr	r3, [r4, #24]
 8018840:	60a3      	str	r3, [r4, #8]
 8018842:	89a3      	ldrh	r3, [r4, #12]
 8018844:	071a      	lsls	r2, r3, #28
 8018846:	d501      	bpl.n	801884c <__swbuf_r+0x20>
 8018848:	6923      	ldr	r3, [r4, #16]
 801884a:	b943      	cbnz	r3, 801885e <__swbuf_r+0x32>
 801884c:	4621      	mov	r1, r4
 801884e:	4628      	mov	r0, r5
 8018850:	f000 f82a 	bl	80188a8 <__swsetup_r>
 8018854:	b118      	cbz	r0, 801885e <__swbuf_r+0x32>
 8018856:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801885a:	4638      	mov	r0, r7
 801885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801885e:	6823      	ldr	r3, [r4, #0]
 8018860:	6922      	ldr	r2, [r4, #16]
 8018862:	1a98      	subs	r0, r3, r2
 8018864:	6963      	ldr	r3, [r4, #20]
 8018866:	b2f6      	uxtb	r6, r6
 8018868:	4283      	cmp	r3, r0
 801886a:	4637      	mov	r7, r6
 801886c:	dc05      	bgt.n	801887a <__swbuf_r+0x4e>
 801886e:	4621      	mov	r1, r4
 8018870:	4628      	mov	r0, r5
 8018872:	f7ff ffa1 	bl	80187b8 <_fflush_r>
 8018876:	2800      	cmp	r0, #0
 8018878:	d1ed      	bne.n	8018856 <__swbuf_r+0x2a>
 801887a:	68a3      	ldr	r3, [r4, #8]
 801887c:	3b01      	subs	r3, #1
 801887e:	60a3      	str	r3, [r4, #8]
 8018880:	6823      	ldr	r3, [r4, #0]
 8018882:	1c5a      	adds	r2, r3, #1
 8018884:	6022      	str	r2, [r4, #0]
 8018886:	701e      	strb	r6, [r3, #0]
 8018888:	6962      	ldr	r2, [r4, #20]
 801888a:	1c43      	adds	r3, r0, #1
 801888c:	429a      	cmp	r2, r3
 801888e:	d004      	beq.n	801889a <__swbuf_r+0x6e>
 8018890:	89a3      	ldrh	r3, [r4, #12]
 8018892:	07db      	lsls	r3, r3, #31
 8018894:	d5e1      	bpl.n	801885a <__swbuf_r+0x2e>
 8018896:	2e0a      	cmp	r6, #10
 8018898:	d1df      	bne.n	801885a <__swbuf_r+0x2e>
 801889a:	4621      	mov	r1, r4
 801889c:	4628      	mov	r0, r5
 801889e:	f7ff ff8b 	bl	80187b8 <_fflush_r>
 80188a2:	2800      	cmp	r0, #0
 80188a4:	d0d9      	beq.n	801885a <__swbuf_r+0x2e>
 80188a6:	e7d6      	b.n	8018856 <__swbuf_r+0x2a>

080188a8 <__swsetup_r>:
 80188a8:	b538      	push	{r3, r4, r5, lr}
 80188aa:	4b29      	ldr	r3, [pc, #164]	@ (8018950 <__swsetup_r+0xa8>)
 80188ac:	4605      	mov	r5, r0
 80188ae:	6818      	ldr	r0, [r3, #0]
 80188b0:	460c      	mov	r4, r1
 80188b2:	b118      	cbz	r0, 80188bc <__swsetup_r+0x14>
 80188b4:	6a03      	ldr	r3, [r0, #32]
 80188b6:	b90b      	cbnz	r3, 80188bc <__swsetup_r+0x14>
 80188b8:	f7ff f85c 	bl	8017974 <__sinit>
 80188bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188c0:	0719      	lsls	r1, r3, #28
 80188c2:	d422      	bmi.n	801890a <__swsetup_r+0x62>
 80188c4:	06da      	lsls	r2, r3, #27
 80188c6:	d407      	bmi.n	80188d8 <__swsetup_r+0x30>
 80188c8:	2209      	movs	r2, #9
 80188ca:	602a      	str	r2, [r5, #0]
 80188cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188d0:	81a3      	strh	r3, [r4, #12]
 80188d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188d6:	e033      	b.n	8018940 <__swsetup_r+0x98>
 80188d8:	0758      	lsls	r0, r3, #29
 80188da:	d512      	bpl.n	8018902 <__swsetup_r+0x5a>
 80188dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80188de:	b141      	cbz	r1, 80188f2 <__swsetup_r+0x4a>
 80188e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80188e4:	4299      	cmp	r1, r3
 80188e6:	d002      	beq.n	80188ee <__swsetup_r+0x46>
 80188e8:	4628      	mov	r0, r5
 80188ea:	f7ff fa67 	bl	8017dbc <_free_r>
 80188ee:	2300      	movs	r3, #0
 80188f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80188f2:	89a3      	ldrh	r3, [r4, #12]
 80188f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80188f8:	81a3      	strh	r3, [r4, #12]
 80188fa:	2300      	movs	r3, #0
 80188fc:	6063      	str	r3, [r4, #4]
 80188fe:	6923      	ldr	r3, [r4, #16]
 8018900:	6023      	str	r3, [r4, #0]
 8018902:	89a3      	ldrh	r3, [r4, #12]
 8018904:	f043 0308 	orr.w	r3, r3, #8
 8018908:	81a3      	strh	r3, [r4, #12]
 801890a:	6923      	ldr	r3, [r4, #16]
 801890c:	b94b      	cbnz	r3, 8018922 <__swsetup_r+0x7a>
 801890e:	89a3      	ldrh	r3, [r4, #12]
 8018910:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018918:	d003      	beq.n	8018922 <__swsetup_r+0x7a>
 801891a:	4621      	mov	r1, r4
 801891c:	4628      	mov	r0, r5
 801891e:	f000 f846 	bl	80189ae <__smakebuf_r>
 8018922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018926:	f013 0201 	ands.w	r2, r3, #1
 801892a:	d00a      	beq.n	8018942 <__swsetup_r+0x9a>
 801892c:	2200      	movs	r2, #0
 801892e:	60a2      	str	r2, [r4, #8]
 8018930:	6962      	ldr	r2, [r4, #20]
 8018932:	4252      	negs	r2, r2
 8018934:	61a2      	str	r2, [r4, #24]
 8018936:	6922      	ldr	r2, [r4, #16]
 8018938:	b942      	cbnz	r2, 801894c <__swsetup_r+0xa4>
 801893a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801893e:	d1c5      	bne.n	80188cc <__swsetup_r+0x24>
 8018940:	bd38      	pop	{r3, r4, r5, pc}
 8018942:	0799      	lsls	r1, r3, #30
 8018944:	bf58      	it	pl
 8018946:	6962      	ldrpl	r2, [r4, #20]
 8018948:	60a2      	str	r2, [r4, #8]
 801894a:	e7f4      	b.n	8018936 <__swsetup_r+0x8e>
 801894c:	2000      	movs	r0, #0
 801894e:	e7f7      	b.n	8018940 <__swsetup_r+0x98>
 8018950:	200001e4 	.word	0x200001e4

08018954 <abort>:
 8018954:	b508      	push	{r3, lr}
 8018956:	2006      	movs	r0, #6
 8018958:	f000 f88e 	bl	8018a78 <raise>
 801895c:	2001      	movs	r0, #1
 801895e:	f7e9 f9d5 	bl	8001d0c <_exit>

08018962 <__swhatbuf_r>:
 8018962:	b570      	push	{r4, r5, r6, lr}
 8018964:	460c      	mov	r4, r1
 8018966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801896a:	2900      	cmp	r1, #0
 801896c:	b096      	sub	sp, #88	@ 0x58
 801896e:	4615      	mov	r5, r2
 8018970:	461e      	mov	r6, r3
 8018972:	da0d      	bge.n	8018990 <__swhatbuf_r+0x2e>
 8018974:	89a3      	ldrh	r3, [r4, #12]
 8018976:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801897a:	f04f 0100 	mov.w	r1, #0
 801897e:	bf14      	ite	ne
 8018980:	2340      	movne	r3, #64	@ 0x40
 8018982:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018986:	2000      	movs	r0, #0
 8018988:	6031      	str	r1, [r6, #0]
 801898a:	602b      	str	r3, [r5, #0]
 801898c:	b016      	add	sp, #88	@ 0x58
 801898e:	bd70      	pop	{r4, r5, r6, pc}
 8018990:	466a      	mov	r2, sp
 8018992:	f000 f879 	bl	8018a88 <_fstat_r>
 8018996:	2800      	cmp	r0, #0
 8018998:	dbec      	blt.n	8018974 <__swhatbuf_r+0x12>
 801899a:	9901      	ldr	r1, [sp, #4]
 801899c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80189a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80189a4:	4259      	negs	r1, r3
 80189a6:	4159      	adcs	r1, r3
 80189a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80189ac:	e7eb      	b.n	8018986 <__swhatbuf_r+0x24>

080189ae <__smakebuf_r>:
 80189ae:	898b      	ldrh	r3, [r1, #12]
 80189b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80189b2:	079d      	lsls	r5, r3, #30
 80189b4:	4606      	mov	r6, r0
 80189b6:	460c      	mov	r4, r1
 80189b8:	d507      	bpl.n	80189ca <__smakebuf_r+0x1c>
 80189ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80189be:	6023      	str	r3, [r4, #0]
 80189c0:	6123      	str	r3, [r4, #16]
 80189c2:	2301      	movs	r3, #1
 80189c4:	6163      	str	r3, [r4, #20]
 80189c6:	b003      	add	sp, #12
 80189c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ca:	ab01      	add	r3, sp, #4
 80189cc:	466a      	mov	r2, sp
 80189ce:	f7ff ffc8 	bl	8018962 <__swhatbuf_r>
 80189d2:	9f00      	ldr	r7, [sp, #0]
 80189d4:	4605      	mov	r5, r0
 80189d6:	4639      	mov	r1, r7
 80189d8:	4630      	mov	r0, r6
 80189da:	f7fe fd99 	bl	8017510 <_malloc_r>
 80189de:	b948      	cbnz	r0, 80189f4 <__smakebuf_r+0x46>
 80189e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189e4:	059a      	lsls	r2, r3, #22
 80189e6:	d4ee      	bmi.n	80189c6 <__smakebuf_r+0x18>
 80189e8:	f023 0303 	bic.w	r3, r3, #3
 80189ec:	f043 0302 	orr.w	r3, r3, #2
 80189f0:	81a3      	strh	r3, [r4, #12]
 80189f2:	e7e2      	b.n	80189ba <__smakebuf_r+0xc>
 80189f4:	89a3      	ldrh	r3, [r4, #12]
 80189f6:	6020      	str	r0, [r4, #0]
 80189f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189fc:	81a3      	strh	r3, [r4, #12]
 80189fe:	9b01      	ldr	r3, [sp, #4]
 8018a00:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018a04:	b15b      	cbz	r3, 8018a1e <__smakebuf_r+0x70>
 8018a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a0a:	4630      	mov	r0, r6
 8018a0c:	f000 f84e 	bl	8018aac <_isatty_r>
 8018a10:	b128      	cbz	r0, 8018a1e <__smakebuf_r+0x70>
 8018a12:	89a3      	ldrh	r3, [r4, #12]
 8018a14:	f023 0303 	bic.w	r3, r3, #3
 8018a18:	f043 0301 	orr.w	r3, r3, #1
 8018a1c:	81a3      	strh	r3, [r4, #12]
 8018a1e:	89a3      	ldrh	r3, [r4, #12]
 8018a20:	431d      	orrs	r5, r3
 8018a22:	81a5      	strh	r5, [r4, #12]
 8018a24:	e7cf      	b.n	80189c6 <__smakebuf_r+0x18>

08018a26 <_raise_r>:
 8018a26:	291f      	cmp	r1, #31
 8018a28:	b538      	push	{r3, r4, r5, lr}
 8018a2a:	4605      	mov	r5, r0
 8018a2c:	460c      	mov	r4, r1
 8018a2e:	d904      	bls.n	8018a3a <_raise_r+0x14>
 8018a30:	2316      	movs	r3, #22
 8018a32:	6003      	str	r3, [r0, #0]
 8018a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a38:	bd38      	pop	{r3, r4, r5, pc}
 8018a3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018a3c:	b112      	cbz	r2, 8018a44 <_raise_r+0x1e>
 8018a3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a42:	b94b      	cbnz	r3, 8018a58 <_raise_r+0x32>
 8018a44:	4628      	mov	r0, r5
 8018a46:	f000 f853 	bl	8018af0 <_getpid_r>
 8018a4a:	4622      	mov	r2, r4
 8018a4c:	4601      	mov	r1, r0
 8018a4e:	4628      	mov	r0, r5
 8018a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a54:	f000 b83a 	b.w	8018acc <_kill_r>
 8018a58:	2b01      	cmp	r3, #1
 8018a5a:	d00a      	beq.n	8018a72 <_raise_r+0x4c>
 8018a5c:	1c59      	adds	r1, r3, #1
 8018a5e:	d103      	bne.n	8018a68 <_raise_r+0x42>
 8018a60:	2316      	movs	r3, #22
 8018a62:	6003      	str	r3, [r0, #0]
 8018a64:	2001      	movs	r0, #1
 8018a66:	e7e7      	b.n	8018a38 <_raise_r+0x12>
 8018a68:	2100      	movs	r1, #0
 8018a6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018a6e:	4620      	mov	r0, r4
 8018a70:	4798      	blx	r3
 8018a72:	2000      	movs	r0, #0
 8018a74:	e7e0      	b.n	8018a38 <_raise_r+0x12>
	...

08018a78 <raise>:
 8018a78:	4b02      	ldr	r3, [pc, #8]	@ (8018a84 <raise+0xc>)
 8018a7a:	4601      	mov	r1, r0
 8018a7c:	6818      	ldr	r0, [r3, #0]
 8018a7e:	f7ff bfd2 	b.w	8018a26 <_raise_r>
 8018a82:	bf00      	nop
 8018a84:	200001e4 	.word	0x200001e4

08018a88 <_fstat_r>:
 8018a88:	b538      	push	{r3, r4, r5, lr}
 8018a8a:	4d07      	ldr	r5, [pc, #28]	@ (8018aa8 <_fstat_r+0x20>)
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	4604      	mov	r4, r0
 8018a90:	4608      	mov	r0, r1
 8018a92:	4611      	mov	r1, r2
 8018a94:	602b      	str	r3, [r5, #0]
 8018a96:	f7e9 f989 	bl	8001dac <_fstat>
 8018a9a:	1c43      	adds	r3, r0, #1
 8018a9c:	d102      	bne.n	8018aa4 <_fstat_r+0x1c>
 8018a9e:	682b      	ldr	r3, [r5, #0]
 8018aa0:	b103      	cbz	r3, 8018aa4 <_fstat_r+0x1c>
 8018aa2:	6023      	str	r3, [r4, #0]
 8018aa4:	bd38      	pop	{r3, r4, r5, pc}
 8018aa6:	bf00      	nop
 8018aa8:	2000b088 	.word	0x2000b088

08018aac <_isatty_r>:
 8018aac:	b538      	push	{r3, r4, r5, lr}
 8018aae:	4d06      	ldr	r5, [pc, #24]	@ (8018ac8 <_isatty_r+0x1c>)
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	4604      	mov	r4, r0
 8018ab4:	4608      	mov	r0, r1
 8018ab6:	602b      	str	r3, [r5, #0]
 8018ab8:	f7e9 f988 	bl	8001dcc <_isatty>
 8018abc:	1c43      	adds	r3, r0, #1
 8018abe:	d102      	bne.n	8018ac6 <_isatty_r+0x1a>
 8018ac0:	682b      	ldr	r3, [r5, #0]
 8018ac2:	b103      	cbz	r3, 8018ac6 <_isatty_r+0x1a>
 8018ac4:	6023      	str	r3, [r4, #0]
 8018ac6:	bd38      	pop	{r3, r4, r5, pc}
 8018ac8:	2000b088 	.word	0x2000b088

08018acc <_kill_r>:
 8018acc:	b538      	push	{r3, r4, r5, lr}
 8018ace:	4d07      	ldr	r5, [pc, #28]	@ (8018aec <_kill_r+0x20>)
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	4608      	mov	r0, r1
 8018ad6:	4611      	mov	r1, r2
 8018ad8:	602b      	str	r3, [r5, #0]
 8018ada:	f7e9 f907 	bl	8001cec <_kill>
 8018ade:	1c43      	adds	r3, r0, #1
 8018ae0:	d102      	bne.n	8018ae8 <_kill_r+0x1c>
 8018ae2:	682b      	ldr	r3, [r5, #0]
 8018ae4:	b103      	cbz	r3, 8018ae8 <_kill_r+0x1c>
 8018ae6:	6023      	str	r3, [r4, #0]
 8018ae8:	bd38      	pop	{r3, r4, r5, pc}
 8018aea:	bf00      	nop
 8018aec:	2000b088 	.word	0x2000b088

08018af0 <_getpid_r>:
 8018af0:	f7e9 b8f4 	b.w	8001cdc <_getpid>

08018af4 <_init>:
 8018af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018af6:	bf00      	nop
 8018af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018afa:	bc08      	pop	{r3}
 8018afc:	469e      	mov	lr, r3
 8018afe:	4770      	bx	lr

08018b00 <_fini>:
 8018b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b02:	bf00      	nop
 8018b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b06:	bc08      	pop	{r3}
 8018b08:	469e      	mov	lr, r3
 8018b0a:	4770      	bx	lr
