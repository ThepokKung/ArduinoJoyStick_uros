
ArduinoJoyStick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010980  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08010b60  08010b60  00011b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114d0  080114d0  00013084  2**0
                  CONTENTS
  4 .ARM          00000008  080114d0  080114d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114d8  080114d8  00013084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114d8  080114d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080114dc  080114dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080114e0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aa14  20000088  08011564  00013088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000aa9c  08011564  00013a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208e9  00000000  00000000  000130b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004975  00000000  00000000  0003399d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  00038318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001493  00000000  00000000  00039dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5fc  00000000  00000000  0003b263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020cb4  00000000  00000000  0006785f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110d75  00000000  00000000  00088513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00199288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c5c  00000000  00000000  00199300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a0f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000088 	.word	0x20000088
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010b48 	.word	0x08010b48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000008c 	.word	0x2000008c
 800021c:	08010b48 	.word	0x08010b48

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <MX_FREERTOS_Init+0x18>)
 8000686:	2100      	movs	r1, #0
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_FREERTOS_Init+0x1c>)
 800068a:	f005 f91f 	bl	80058cc <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <MX_FREERTOS_Init+0x20>)
 8000692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08010bc8 	.word	0x08010bc8
 800069c:	08000ddd 	.word	0x08000ddd
 80006a0:	200000a4 	.word	0x200000a4

080006a4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b0:	f006 f9e0 	bl	8006a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006b4:	4b5a      	ldr	r3, [pc, #360]	@ (8000820 <pvPortMallocMicroROS+0x17c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006bc:	f000 f986 	bl	80009cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c0:	4b58      	ldr	r3, [pc, #352]	@ (8000824 <pvPortMallocMicroROS+0x180>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4013      	ands	r3, r2
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f040 8090 	bne.w	80007ee <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d01e      	beq.n	8000712 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006d4:	2208      	movs	r2, #8
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d015      	beq.n	8000712 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	3308      	adds	r3, #8
 80006ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00b      	beq.n	8000712 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006fe:	f383 8811 	msr	BASEPRI, r3
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	e7fd      	b.n	800070e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d06a      	beq.n	80007ee <pvPortMallocMicroROS+0x14a>
 8000718:	4b43      	ldr	r3, [pc, #268]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d865      	bhi.n	80007ee <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000722:	4b42      	ldr	r3, [pc, #264]	@ (800082c <pvPortMallocMicroROS+0x188>)
 8000724:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000726:	4b41      	ldr	r3, [pc, #260]	@ (800082c <pvPortMallocMicroROS+0x188>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800072c:	e004      	b.n	8000738 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d903      	bls.n	800074a <pvPortMallocMicroROS+0xa6>
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f1      	bne.n	800072e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800074a:	4b35      	ldr	r3, [pc, #212]	@ (8000820 <pvPortMallocMicroROS+0x17c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000750:	429a      	cmp	r2, r3
 8000752:	d04c      	beq.n	80007ee <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2208      	movs	r2, #8
 800075a:	4413      	add	r3, r2
 800075c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	2308      	movs	r3, #8
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	429a      	cmp	r2, r3
 8000774:	d920      	bls.n	80007b8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	613b      	str	r3, [r7, #16]
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007b2:	69b8      	ldr	r0, [r7, #24]
 80007b4:	f000 f96c 	bl	8000a90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x18c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d203      	bcs.n	80007da <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a16      	ldr	r2, [pc, #88]	@ (8000830 <pvPortMallocMicroROS+0x18c>)
 80007d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <pvPortMallocMicroROS+0x180>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	431a      	orrs	r2, r3
 80007e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007ee:	f006 f94f 	bl	8006a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00b      	beq.n	8000814 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80007fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000800:	f383 8811 	msr	BASEPRI, r3
 8000804:	f3bf 8f6f 	isb	sy
 8000808:	f3bf 8f4f 	dsb	sy
 800080c:	60fb      	str	r3, [r7, #12]
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000814:	69fb      	ldr	r3, [r7, #28]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3728      	adds	r7, #40	@ 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20003bec 	.word	0x20003bec
 8000824:	20003bf8 	.word	0x20003bf8
 8000828:	20003bf0 	.word	0x20003bf0
 800082c:	20003be4 	.word	0x20003be4
 8000830:	20003bf4 	.word	0x20003bf4

08000834 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d04a      	beq.n	80008dc <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000846:	2308      	movs	r3, #8
 8000848:	425b      	negs	r3, r3
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <vPortFreeMicroROS+0xb0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4013      	ands	r3, r2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10b      	bne.n	800087a <vPortFreeMicroROS+0x46>
	__asm volatile
 8000862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	60fb      	str	r3, [r7, #12]
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00b      	beq.n	800089a <vPortFreeMicroROS+0x66>
	__asm volatile
 8000882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000886:	f383 8811 	msr	BASEPRI, r3
 800088a:	f3bf 8f6f 	isb	sy
 800088e:	f3bf 8f4f 	dsb	sy
 8000892:	60bb      	str	r3, [r7, #8]
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	e7fd      	b.n	8000896 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <vPortFreeMicroROS+0xb0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4013      	ands	r3, r2
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d019      	beq.n	80008dc <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d115      	bne.n	80008dc <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <vPortFreeMicroROS+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	43db      	mvns	r3, r3
 80008ba:	401a      	ands	r2, r3
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008c0:	f006 f8d8 	bl	8006a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <vPortFreeMicroROS+0xb4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a06      	ldr	r2, [pc, #24]	@ (80008e8 <vPortFreeMicroROS+0xb4>)
 80008d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008d2:	6938      	ldr	r0, [r7, #16]
 80008d4:	f000 f8dc 	bl	8000a90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008d8:	f006 f8da 	bl	8006a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008dc:	bf00      	nop
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20003bf8 	.word	0x20003bf8
 80008e8:	20003bf0 	.word	0x20003bf0

080008ec <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008f8:	2308      	movs	r3, #8
 80008fa:	425b      	negs	r3, r3
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	4413      	add	r3, r2
 8000900:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <getBlockSize+0x38>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	43db      	mvns	r3, r3
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

	return count;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	4618      	mov	r0, r3
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20003bf8 	.word	0x20003bf8

08000928 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000932:	f006 f89f 	bl	8006a74 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000936:	6838      	ldr	r0, [r7, #0]
 8000938:	f7ff feb4 	bl	80006a4 <pvPortMallocMicroROS>
 800093c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d017      	beq.n	8000974 <pvPortReallocMicroROS+0x4c>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d014      	beq.n	8000974 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffce 	bl	80008ec <getBlockSize>
 8000950:	4603      	mov	r3, r0
 8000952:	2208      	movs	r2, #8
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d201      	bcs.n	8000964 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f00f f9fe 	bl	800fd6a <memcpy>

		vPortFreeMicroROS(pv);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff60 	bl	8000834 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000974:	f006 f88c 	bl	8006a90 <xTaskResumeAll>

	return newmem;
 8000978:	68bb      	ldr	r3, [r7, #8]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800098c:	f006 f872 	bl	8006a74 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff fe82 	bl	80006a4 <pvPortMallocMicroROS>
 80009a0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009a6:	e004      	b.n	80009b2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	613a      	str	r2, [r7, #16]
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	617a      	str	r2, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f5      	bne.n	80009a8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009bc:	f006 f868 	bl	8006a90 <xTaskResumeAll>
  	return mem;
 80009c0:	68fb      	ldr	r3, [r7, #12]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <prvHeapInit+0xac>)
 80009da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00c      	beq.n	8000a00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3307      	adds	r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 0307 	bic.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <prvHeapInit+0xac>)
 80009fc:	4413      	add	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a04:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <prvHeapInit+0xb0>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <prvHeapInit+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4413      	add	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a18:	2208      	movs	r2, #8
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f023 0307 	bic.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	1ad2      	subs	r2, r2, r3
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <prvHeapInit+0xb8>)
 8000a5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <prvHeapInit+0xbc>)
 8000a62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <prvHeapInit+0xc0>)
 8000a66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	20002fe4 	.word	0x20002fe4
 8000a7c:	20003be4 	.word	0x20003be4
 8000a80:	20003bec 	.word	0x20003bec
 8000a84:	20003bf4 	.word	0x20003bf4
 8000a88:	20003bf0 	.word	0x20003bf0
 8000a8c:	20003bf8 	.word	0x20003bf8

08000a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <prvInsertBlockIntoFreeList+0xac>)
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e002      	b.n	8000aa4 <prvInsertBlockIntoFreeList+0x14>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d8f7      	bhi.n	8000a9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d108      	bne.n	8000ad2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	441a      	add	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	441a      	add	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d118      	bne.n	8000b18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <prvInsertBlockIntoFreeList+0xb0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d00d      	beq.n	8000b0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	441a      	add	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e008      	b.n	8000b20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <prvInsertBlockIntoFreeList+0xb0>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e003      	b.n	8000b20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d002      	beq.n	8000b2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20003be4 	.word	0x20003be4
 8000b40:	20003bec 	.word	0x20003bec

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	200b      	movs	r0, #11
 8000b80:	f000 ff60 	bl	8001a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b84:	200b      	movs	r0, #11
 8000b86:	f000 ff77 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	200c      	movs	r0, #12
 8000b90:	f000 ff58 	bl	8001a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b94:	200c      	movs	r0, #12
 8000b96:	f000 ff6f 	bl	8001a78 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bb6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bbc:	4904      	ldr	r1, [pc, #16]	@ (8000bd0 <cubemx_transport_open+0x28>)
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f003 f8e2 	bl	8003d88 <HAL_UART_Receive_DMA>
    return true;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20003bfc 	.word	0x20003bfc

08000bd4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000be2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f003 f91b 	bl	8003e20 <HAL_UART_DMAStop>
    return true;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c08:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c10:	2b20      	cmp	r3, #32
 8000c12:	d11b      	bne.n	8000c4c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	6978      	ldr	r0, [r7, #20]
 8000c1e:	f003 f833 	bl	8003c88 <HAL_UART_Transmit_DMA>
 8000c22:	4603      	mov	r3, r0
 8000c24:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c26:	e002      	b.n	8000c2e <cubemx_transport_write+0x3a>
            osDelay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f004 fee1 	bl	80059f0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c2e:	7cfb      	ldrb	r3, [r7, #19]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <cubemx_transport_write+0x4a>
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	2b20      	cmp	r3, #32
 8000c3c:	d1f4      	bne.n	8000c28 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c3e:	7cfb      	ldrb	r3, [r7, #19]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <cubemx_transport_write+0x54>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	e002      	b.n	8000c4e <cubemx_transport_write+0x5a>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e000      	b.n	8000c4e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000c4c:	2300      	movs	r3, #0
    }
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c6c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i
}
 8000c74:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <cubemx_transport_read+0x9c>)
 8000c86:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c88:	b662      	cpsie	i
}
 8000c8a:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f004 feac 	bl	80059f0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <cubemx_transport_read+0x9c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d103      	bne.n	8000cac <cubemx_transport_read+0x54>
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbe2      	blt.n	8000c72 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cb0:	e011      	b.n	8000cd6 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	440b      	add	r3, r1
 8000cbc:	490f      	ldr	r1, [pc, #60]	@ (8000cfc <cubemx_transport_read+0xa4>)
 8000cbe:	5c8a      	ldrb	r2, [r1, r2]
 8000cc0:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cce:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <cubemx_transport_read+0x9c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d003      	beq.n	8000cea <cubemx_transport_read+0x92>
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3e3      	bcc.n	8000cb2 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8000cea:	69bb      	ldr	r3, [r7, #24]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20004400 	.word	0x20004400
 8000cf8:	200043fc 	.word	0x200043fc
 8000cfc:	20003bfc 	.word	0x20003bfc

08000d00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2e:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a28      	ldr	r2, [pc, #160]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2120      	movs	r1, #32
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7e:	f001 fb49 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d9a:	f001 f9b9 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d9e:	2320      	movs	r3, #32
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f001 f9aa 	bl	8002110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	2028      	movs	r0, #40	@ 0x28
 8000dc2:	f000 fe3f 	bl	8001a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc6:	2028      	movs	r0, #40	@ 0x28
 8000dc8:	f000 fe56 	bl	8001a78 <HAL_NVIC_EnableIRQ>

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	@ 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000800 	.word	0x48000800

08000ddc <StartDefaultTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b090      	sub	sp, #64	@ 0x40
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration
  rmw_uros_set_custom_transport(
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <StartDefaultTask+0xb8>)
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e98 <StartDefaultTask+0xbc>)
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <StartDefaultTask+0xc0>)
 8000dee:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea0 <StartDefaultTask+0xc4>)
 8000df0:	492c      	ldr	r1, [pc, #176]	@ (8000ea4 <StartDefaultTask+0xc8>)
 8000df2:	2001      	movs	r0, #1
 8000df4:	f007 fcd4 	bl	80087a0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fc41 	bl	8008684 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000e02:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <StartDefaultTask+0xcc>)
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000e06:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <StartDefaultTask+0xd0>)
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000e0a:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <StartDefaultTask+0xd4>)
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000e0e:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <StartDefaultTask+0xd8>)
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 fc42 	bl	80086a0 <rcutils_set_default_allocator>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f083 0301 	eor.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <StartDefaultTask+0x54>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8000e28:	216a      	movs	r1, #106	@ 0x6a
 8000e2a:	4823      	ldr	r0, [pc, #140]	@ (8000eb8 <StartDefaultTask+0xdc>)
 8000e2c:	f00e fe3e 	bl	800faac <iprintf>
  }

  // micro-ROS app
  allocator = rcl_get_default_allocator();
 8000e30:	4c22      	ldr	r4, [pc, #136]	@ (8000ebc <StartDefaultTask+0xe0>)
 8000e32:	463b      	mov	r3, r7
 8000e34:	4618      	mov	r0, r3
 8000e36:	f007 fc51 	bl	80086dc <rcutils_get_default_allocator>
 8000e3a:	4625      	mov	r5, r4
 8000e3c:	463c      	mov	r4, r7
 8000e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	602b      	str	r3, [r5, #0]

  //create init_options
  init_options = rcl_get_zero_initialized_init_options();
 8000e46:	f007 fa9f 	bl	8008388 <rcl_get_zero_initialized_init_options>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <StartDefaultTask+0xe4>)
 8000e4e:	6013      	str	r3, [r2, #0]
  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <StartDefaultTask+0xe0>)
 8000e52:	466c      	mov	r4, sp
 8000e54:	f103 020c 	add.w	r2, r3, #12
 8000e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e5c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e62:	4817      	ldr	r0, [pc, #92]	@ (8000ec0 <StartDefaultTask+0xe4>)
 8000e64:	f007 fa92 	bl	800838c <rcl_init_options_init>
  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 26)); //Set Domain ID
 8000e68:	211a      	movs	r1, #26
 8000e6a:	4815      	ldr	r0, [pc, #84]	@ (8000ec0 <StartDefaultTask+0xe4>)
 8000e6c:	f007 fb8a 	bl	8008584 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <StartDefaultTask+0xe0>)
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <StartDefaultTask+0xe4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4812      	ldr	r0, [pc, #72]	@ (8000ec4 <StartDefaultTask+0xe8>)
 8000e7c:	f007 fb8a 	bl	8008594 <rclc_support_init_with_options>
	&init_options,
	&allocator
  );

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support); //Node name
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <StartDefaultTask+0xe8>)
 8000e82:	4a11      	ldr	r2, [pc, #68]	@ (8000ec8 <StartDefaultTask+0xec>)
 8000e84:	4911      	ldr	r1, [pc, #68]	@ (8000ecc <StartDefaultTask+0xf0>)
 8000e86:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <StartDefaultTask+0xf4>)
 8000e88:	f007 fbb8 	bl	80085fc <rclc_node_init_default>


  for(;;)
  {
    osDelay(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f004 fdaf 	bl	80059f0 <osDelay>
 8000e92:	e7fb      	b.n	8000e8c <StartDefaultTask+0xb0>
 8000e94:	08000c59 	.word	0x08000c59
 8000e98:	08000bf5 	.word	0x08000bf5
 8000e9c:	08000bd5 	.word	0x08000bd5
 8000ea0:	08000ba9 	.word	0x08000ba9
 8000ea4:	200044b4 	.word	0x200044b4
 8000ea8:	08000fc5 	.word	0x08000fc5
 8000eac:	08001009 	.word	0x08001009
 8000eb0:	08001041 	.word	0x08001041
 8000eb4:	080010ad 	.word	0x080010ad
 8000eb8:	08010b6c 	.word	0x08010b6c
 8000ebc:	2000443c 	.word	0x2000443c
 8000ec0:	20004404 	.word	0x20004404
 8000ec4:	20004408 	.word	0x20004408
 8000ec8:	08010b94 	.word	0x08010b94
 8000ecc:	08010b98 	.word	0x08010b98
 8000ed0:	20004450 	.word	0x20004450

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fcc5 	bl	8001866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f80e 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f7ff ff0e 	bl	8000d00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee4:	f7ff fe2e 	bl	8000b44 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000ee8:	f000 fb8c 	bl	8001604 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eec:	f004 fca4 	bl	8005838 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ef0:	f7ff fbc6 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ef4:	f004 fcc4 	bl	8005880 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <main+0x24>

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	@ 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	2238      	movs	r2, #56	@ 0x38
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00e fe90 	bl	800fc30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f001 fab4 	bl	800248c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2e:	2340      	movs	r3, #64	@ 0x40
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2302      	movs	r3, #2
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f3e:	2355      	movs	r3, #85	@ 0x55
 8000f40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fb4e 	bl	80025f4 <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f5e:	f000 f82b 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2303      	movs	r3, #3
 8000f68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fe4c 	bl	8002c18 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f86:	f000 f817 	bl	8000fb8 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	@ 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fa6:	f000 fc77 	bl	8001898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40012c00 	.word	0x40012c00

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <Error_Handler+0x8>

08000fc4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <microros_allocate+0x3c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <microros_allocate+0x3c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <microros_allocate+0x40>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <microros_allocate+0x40>)
 8000fec:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fb58 	bl	80006a4 <pvPortMallocMicroROS>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20004458 	.word	0x20004458
 8001004:	2000445c 	.word	0x2000445c

08001008 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00c      	beq.n	8001032 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fc67 	bl	80008ec <getBlockSize>
 800101e:	4603      	mov	r3, r0
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <microros_deallocate+0x34>)
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	461a      	mov	r2, r3
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <microros_deallocate+0x34>)
 800102a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fc01 	bl	8000834 <vPortFreeMicroROS>
  }
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000445c 	.word	0x2000445c

08001040 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <microros_reallocate+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <microros_reallocate+0x64>)
 800105a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <microros_reallocate+0x68>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	461a      	mov	r2, r3
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <microros_reallocate+0x68>)
 800106a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d104      	bne.n	800107c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f7ff fb16 	bl	80006a4 <pvPortMallocMicroROS>
 8001078:	4603      	mov	r3, r0
 800107a:	e00e      	b.n	800109a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff fc35 	bl	80008ec <getBlockSize>
 8001082:	4603      	mov	r3, r0
 8001084:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <microros_reallocate+0x68>)
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	461a      	mov	r2, r3
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <microros_reallocate+0x68>)
 800108e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff fc48 	bl	8000928 <pvPortReallocMicroROS>
 8001098:	4603      	mov	r3, r0
  }
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20004458 	.word	0x20004458
 80010a8:	2000445c 	.word	0x2000445c

080010ac <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <microros_zero_allocate+0x48>)
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <microros_zero_allocate+0x48>)
 80010ca:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <microros_zero_allocate+0x4c>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <microros_zero_allocate+0x4c>)
 80010de:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fc4d 	bl	8000982 <pvPortCallocMicroROS>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20004458 	.word	0x20004458
 80010f8:	2000445c 	.word	0x2000445c
 80010fc:	00000000 	.word	0x00000000

08001100 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001116:	a320      	add	r3, pc, #128	@ (adr r3, 8001198 <UTILS_NanosecondsToTimespec+0x98>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff f8e8 	bl	80002f0 <__aeabi_ldivmod>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800112a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001198 <UTILS_NanosecondsToTimespec+0x98>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff f8dc 	bl	80002f0 <__aeabi_ldivmod>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	da20      	bge.n	8001186 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a11      	ldr	r2, [pc, #68]	@ (8001190 <UTILS_NanosecondsToTimespec+0x90>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1712      	asrs	r2, r2, #28
 8001150:	17db      	asrs	r3, r3, #31
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	17c8      	asrs	r0, r1, #31
 8001162:	460c      	mov	r4, r1
 8001164:	4605      	mov	r5, r0
 8001166:	ebb2 0804 	subs.w	r8, r2, r4
 800116a:	eb63 0905 	sbc.w	r9, r3, r5
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4906      	ldr	r1, [pc, #24]	@ (8001194 <UTILS_NanosecondsToTimespec+0x94>)
 800117c:	fb01 f303 	mul.w	r3, r1, r3
 8001180:	441a      	add	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]
    }
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001190:	44b82fa1 	.word	0x44b82fa1
 8001194:	3b9aca00 	.word	0x3b9aca00
 8001198:	3b9aca00 	.word	0x3b9aca00
 800119c:	00000000 	.word	0x00000000

080011a0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80011a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a4:	b08e      	sub	sp, #56	@ 0x38
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80011aa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80011ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011b0:	2300      	movs	r3, #0
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80011c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c6:	4618      	mov	r0, r3
 80011c8:	f005 fede 	bl	8006f88 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80011cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ce:	17da      	asrs	r2, r3, #31
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	61fa      	str	r2, [r7, #28]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	69b9      	ldr	r1, [r7, #24]
 80011de:	000b      	movs	r3, r1
 80011e0:	2200      	movs	r2, #0
 80011e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80011e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e8:	2200      	movs	r2, #0
 80011ea:	461c      	mov	r4, r3
 80011ec:	4615      	mov	r5, r2
 80011ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80011f2:	1911      	adds	r1, r2, r4
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	416b      	adcs	r3, r5
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001202:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	f04f 0400 	mov.w	r4, #0
 800120e:	f04f 0500 	mov.w	r5, #0
 8001212:	015d      	lsls	r5, r3, #5
 8001214:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001218:	0154      	lsls	r4, r2, #5
 800121a:	4622      	mov	r2, r4
 800121c:	462b      	mov	r3, r5
 800121e:	ebb2 0800 	subs.w	r8, r2, r0
 8001222:	eb63 0901 	sbc.w	r9, r3, r1
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001232:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001236:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800123a:	4690      	mov	r8, r2
 800123c:	4699      	mov	r9, r3
 800123e:	eb18 0a00 	adds.w	sl, r8, r0
 8001242:	eb49 0b01 	adc.w	fp, r9, r1
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001252:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001256:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800125a:	ebb2 040a 	subs.w	r4, r2, sl
 800125e:	603c      	str	r4, [r7, #0]
 8001260:	eb63 030b 	sbc.w	r3, r3, fp
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800126a:	4623      	mov	r3, r4
 800126c:	181b      	adds	r3, r3, r0
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	462b      	mov	r3, r5
 8001272:	eb41 0303 	adc.w	r3, r1, r3
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	6a3a      	ldr	r2, [r7, #32]
 800127a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800127e:	f7ff ff3f 	bl	8001100 <UTILS_NanosecondsToTimespec>

    return 0;
 8001282:	2300      	movs	r3, #0
 8001284:	4618      	mov	r0, r3
 8001286:	3738      	adds	r7, #56	@ 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_MspInit+0x50>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <HAL_MspInit+0x50>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_MspInit+0x50>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <HAL_MspInit+0x50>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <HAL_MspInit+0x50>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_MspInit+0x50>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	210f      	movs	r1, #15
 80012ca:	f06f 0001 	mvn.w	r0, #1
 80012ce:	f000 fbb9 	bl	8001a44 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012d2:	f001 f97f 	bl	80025d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	@ 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012f4:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <HAL_InitTick+0xc4>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f8:	4a2b      	ldr	r2, [pc, #172]	@ (80013a8 <HAL_InitTick+0xc4>)
 80012fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <HAL_InitTick+0xc4>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800130c:	f107 020c 	add.w	r2, r7, #12
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fe54 	bl	8002fc4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800131c:	f001 fe3c 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8001320:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001324:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <HAL_InitTick+0xc8>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	3b01      	subs	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <HAL_InitTick+0xcc>)
 8001332:	4a20      	ldr	r2, [pc, #128]	@ (80013b4 <HAL_InitTick+0xd0>)
 8001334:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_InitTick+0xcc>)
 8001338:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800133c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800133e:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <HAL_InitTick+0xcc>)
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <HAL_InitTick+0xcc>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_InitTick+0xcc>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001350:	4817      	ldr	r0, [pc, #92]	@ (80013b0 <HAL_InitTick+0xcc>)
 8001352:	f002 f8fd 	bl	8003550 <HAL_TIM_Base_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800135c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11b      	bne.n	800139c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001364:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <HAL_InitTick+0xcc>)
 8001366:	f002 f955 	bl	8003614 <HAL_TIM_Base_Start_IT>
 800136a:	4603      	mov	r3, r0
 800136c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001378:	2019      	movs	r0, #25
 800137a:	f000 fb7d 	bl	8001a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d808      	bhi.n	8001396 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	2019      	movs	r0, #25
 800138a:	f000 fb5b 	bl	8001a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_InitTick+0xd4>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e002      	b.n	800139c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800139c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3730      	adds	r7, #48	@ 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	431bde83 	.word	0x431bde83
 80013b0:	20004460 	.word	0x20004460
 80013b4:	40012c00 	.word	0x40012c00
 80013b8:	20000008 	.word	0x20000008

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <NMI_Handler+0x4>

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Channel1_IRQHandler+0x10>)
 80013fa:	f000 fd2e 	bl	8001e5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20004548 	.word	0x20004548

08001408 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <DMA1_Channel2_IRQHandler+0x10>)
 800140e:	f000 fd24 	bl	8001e5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200045a8 	.word	0x200045a8

0800141c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001422:	f002 f96f 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20004460 	.word	0x20004460

08001430 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001434:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001438:	f001 f804 	bl	8002444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <LPUART1_IRQHandler+0x10>)
 8001446:	f002 fd81 	bl	8003f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200044b4 	.word	0x200044b4

08001454 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_kill>:

int _kill(int pid, int sig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800146e:	f00e fc4f 	bl	800fd10 <__errno>
 8001472:	4603      	mov	r3, r0
 8001474:	2216      	movs	r2, #22
 8001476:	601a      	str	r2, [r3, #0]
  return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_exit>:

void _exit (int status)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800148c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe7 	bl	8001464 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <_exit+0x12>

0800149a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e00a      	b.n	80014c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ac:	f3af 8000 	nop.w
 80014b0:	4601      	mov	r1, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	60ba      	str	r2, [r7, #8]
 80014b8:	b2ca      	uxtb	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbf0      	blt.n	80014ac <_read+0x12>
  }

  return len;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e009      	b.n	80014fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	60ba      	str	r2, [r7, #8]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbf1      	blt.n	80014e6 <_write+0x12>
  }
  return len;
 8001502:	687b      	ldr	r3, [r7, #4]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_close>:

int _close(int file)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001534:	605a      	str	r2, [r3, #4]
  return 0;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_isatty>:

int _isatty(int file)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154c:	2301      	movs	r3, #1
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f00e fbb4 	bl	800fd10 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	200044b0 	.word	0x200044b0
 80015dc:	2000aaa0 	.word	0x2000aaa0

080015e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 800160a:	4a22      	ldr	r2, [pc, #136]	@ (8001694 <MX_LPUART1_UART_Init+0x90>)
 800160c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001634:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001646:	4812      	ldr	r0, [pc, #72]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 8001648:	f002 face 	bl	8003be8 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001652:	f7ff fcb1 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	480d      	ldr	r0, [pc, #52]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 800165a:	f003 ffde 	bl	800561a <HAL_UARTEx_SetTxFifoThreshold>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001664:	f7ff fca8 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4809      	ldr	r0, [pc, #36]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 800166c:	f004 f813 	bl	8005696 <HAL_UARTEx_SetRxFifoThreshold>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001676:	f7ff fc9f 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_LPUART1_UART_Init+0x8c>)
 800167c:	f003 ff94 	bl	80055a8 <HAL_UARTEx_DisableFifoMode>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001686:	f7ff fc97 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200044b4 	.word	0x200044b4
 8001694:	40008000 	.word	0x40008000

08001698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b09e      	sub	sp, #120	@ 0x78
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2254      	movs	r2, #84	@ 0x54
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00e fab9 	bl	800fc30 <memset>
  if(uartHandle->Instance==LPUART1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a4e      	ldr	r2, [pc, #312]	@ (80017fc <HAL_UART_MspInit+0x164>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	f040 8094 	bne.w	80017f2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016ca:	2320      	movs	r3, #32
 80016cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fcec 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016e2:	f7ff fc69 	bl	8000fb8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016e6:	4b46      	ldr	r3, [pc, #280]	@ (8001800 <HAL_UART_MspInit+0x168>)
 80016e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ea:	4a45      	ldr	r2, [pc, #276]	@ (8001800 <HAL_UART_MspInit+0x168>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80016f2:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <HAL_UART_MspInit+0x168>)
 80016f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <HAL_UART_MspInit+0x168>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <HAL_UART_MspInit+0x168>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170a:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <HAL_UART_MspInit+0x168>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001716:	230c      	movs	r3, #12
 8001718:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001726:	230c      	movs	r3, #12
 8001728:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001734:	f000 fcec 	bl	8002110 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001738:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 800173a:	4a33      	ldr	r2, [pc, #204]	@ (8001808 <HAL_UART_MspInit+0x170>)
 800173c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 8001740:	2222      	movs	r2, #34	@ 0x22
 8001742:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001744:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800174a:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001750:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001756:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001762:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 8001764:	2220      	movs	r2, #32
 8001766:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 800176a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800176e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001770:	4824      	ldr	r0, [pc, #144]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 8001772:	f000 f98f 	bl	8001a94 <HAL_DMA_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800177c:	f7ff fc1c 	bl	8000fb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a20      	ldr	r2, [pc, #128]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 8001784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001788:	4a1e      	ldr	r2, [pc, #120]	@ (8001804 <HAL_UART_MspInit+0x16c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <HAL_UART_MspInit+0x174>)
 8001790:	4a1f      	ldr	r2, [pc, #124]	@ (8001810 <HAL_UART_MspInit+0x178>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001794:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <HAL_UART_MspInit+0x174>)
 8001796:	2223      	movs	r2, #35	@ 0x23
 8001798:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <HAL_UART_MspInit+0x174>)
 800179c:	2210      	movs	r2, #16
 800179e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017a8:	2280      	movs	r2, #128	@ 0x80
 80017aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ac:	4b17      	ldr	r3, [pc, #92]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017c0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80017c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80017c6:	4811      	ldr	r0, [pc, #68]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017c8:	f000 f964 	bl	8001a94 <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80017d2:	f7ff fbf1 	bl	8000fb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80017dc:	4a0b      	ldr	r2, [pc, #44]	@ (800180c <HAL_UART_MspInit+0x174>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2105      	movs	r1, #5
 80017e6:	205b      	movs	r0, #91	@ 0x5b
 80017e8:	f000 f92c 	bl	8001a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80017ec:	205b      	movs	r0, #91	@ 0x5b
 80017ee:	f000 f943 	bl	8001a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80017f2:	bf00      	nop
 80017f4:	3778      	adds	r7, #120	@ 0x78
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40008000 	.word	0x40008000
 8001800:	40021000 	.word	0x40021000
 8001804:	20004548 	.word	0x20004548
 8001808:	40020008 	.word	0x40020008
 800180c:	200045a8 	.word	0x200045a8
 8001810:	4002001c 	.word	0x4002001c

08001814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001814:	480d      	ldr	r0, [pc, #52]	@ (800184c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001816:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001818:	f7ff fee2 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <LoopForever+0x6>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <LoopForever+0xe>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	@ (8001860 <LoopForever+0x16>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001842:	f00e fa6b 	bl	800fd1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001846:	f7ff fb45 	bl	8000ed4 <main>

0800184a <LoopForever>:

LoopForever:
    b LoopForever
 800184a:	e7fe      	b.n	800184a <LoopForever>
  ldr   r0, =_estack
 800184c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001858:	080114e0 	.word	0x080114e0
  ldr r2, =_sbss
 800185c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001860:	2000aa9c 	.word	0x2000aa9c

08001864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC1_2_IRQHandler>

08001866 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f8dc 	bl	8001a2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001876:	200f      	movs	r0, #15
 8001878:	f7ff fd34 	bl	80012e4 <HAL_InitTick>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	e001      	b.n	800188c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001888:	f7ff fd02 	bl	8001290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800188c:	79fb      	ldrb	r3, [r7, #7]

}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x1c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_IncTick+0x20>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a03      	ldr	r2, [pc, #12]	@ (80018b4 <HAL_IncTick+0x1c>)
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20004608 	.word	0x20004608
 80018b8:	2000000c 	.word	0x2000000c

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20004608 	.word	0x20004608

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	@ (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	@ (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	@ (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff4c 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a52:	f7ff ff63 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7ff ffb3 	bl	80019c8 <NVIC_EncodePriority>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff82 	bl	8001974 <__NVIC_SetPriority>
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff56 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e08d      	b.n	8001bc2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_DMA_Init+0x138>)
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d80f      	bhi.n	8001ad2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <HAL_DMA_Init+0x13c>)
 8001aba:	4413      	add	r3, r2
 8001abc:	4a45      	ldr	r2, [pc, #276]	@ (8001bd4 <HAL_DMA_Init+0x140>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	009a      	lsls	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a42      	ldr	r2, [pc, #264]	@ (8001bd8 <HAL_DMA_Init+0x144>)
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ad0:	e00e      	b.n	8001af0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b40      	ldr	r3, [pc, #256]	@ (8001bdc <HAL_DMA_Init+0x148>)
 8001ada:	4413      	add	r3, r2
 8001adc:	4a3d      	ldr	r2, [pc, #244]	@ (8001bd4 <HAL_DMA_Init+0x140>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	009a      	lsls	r2, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a3c      	ldr	r2, [pc, #240]	@ (8001be0 <HAL_DMA_Init+0x14c>)
 8001aee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fa82 	bl	800204c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b50:	d102      	bne.n	8001b58 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b6c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d010      	beq.n	8001b98 <HAL_DMA_Init+0x104>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d80c      	bhi.n	8001b98 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 faa2 	bl	80020c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e008      	b.n	8001baa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40020407 	.word	0x40020407
 8001bd0:	bffdfff8 	.word	0xbffdfff8
 8001bd4:	cccccccd 	.word	0xcccccccd
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	bffdfbf8 	.word	0xbffdfbf8
 8001be0:	40020400 	.word	0x40020400

08001be4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_DMA_Start_IT+0x20>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e066      	b.n	8001cd2 <HAL_DMA_Start_IT+0xee>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d155      	bne.n	8001cc4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f9c7 	bl	8001fd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 020e 	orr.w	r2, r2, #14
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e00f      	b.n	8001c7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 020a 	orr.w	r2, r2, #10
 8001c7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c98:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e005      	b.n	8001cd0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d005      	beq.n	8001cfe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e037      	b.n	8001d6e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 020e 	bic.w	r2, r2, #14
 8001d0c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d1c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f003 021f 	and.w	r2, r3, #31
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d4a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d62:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d6c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d00d      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2204      	movs	r2, #4
 8001da8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e047      	b.n	8001e50 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 020e 	bic.w	r2, r2, #14
 8001dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
    }
  }
  return status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d026      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x7a>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d021      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0204 	bic.w	r2, r2, #4
 8001eac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f003 021f 	and.w	r2, r3, #31
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	2104      	movs	r1, #4
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d071      	beq.n	8001fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ed2:	e06c      	b.n	8001fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2202      	movs	r2, #2
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d02e      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d029      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 020a 	bic.w	r2, r2, #10
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	2102      	movs	r1, #2
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d038      	beq.n	8001fae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f44:	e033      	b.n	8001fae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2208      	movs	r2, #8
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d02a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d025      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 020e 	bic.w	r2, r2, #14
 8001f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
}
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fe6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ff8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f003 021f 	and.w	r2, r3, #31
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	2101      	movs	r1, #1
 8002008:	fa01 f202 	lsl.w	r2, r1, r2
 800200c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b10      	cmp	r3, #16
 800201c:	d108      	bne.n	8002030 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800202e:	e007      	b.n	8002040 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800205c:	429a      	cmp	r2, r3
 800205e:	d802      	bhi.n	8002066 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e001      	b.n	800206a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002068:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3b08      	subs	r3, #8
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	461a      	mov	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a0b      	ldr	r2, [pc, #44]	@ (80020c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002096:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40020407 	.word	0x40020407
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020820 	.word	0x40020820
 80020c0:	cccccccd 	.word	0xcccccccd
 80020c4:	40020880 	.word	0x40020880

080020c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a08      	ldr	r2, [pc, #32]	@ (800210c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2201      	movs	r2, #1
 80020f6:	409a      	lsls	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	1000823f 	.word	0x1000823f
 800210c:	40020940 	.word	0x40020940

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800211e:	e15a      	b.n	80023d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 814c 	beq.w	80023d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d017      	beq.n	80021ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d123      	bne.n	8002242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	6939      	ldr	r1, [r7, #16]
 800223e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0203 	and.w	r2, r3, #3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80a6 	beq.w	80023d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b5b      	ldr	r3, [pc, #364]	@ (80023f4 <HAL_GPIO_Init+0x2e4>)
 8002286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002288:	4a5a      	ldr	r2, [pc, #360]	@ (80023f4 <HAL_GPIO_Init+0x2e4>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002290:	4b58      	ldr	r3, [pc, #352]	@ (80023f4 <HAL_GPIO_Init+0x2e4>)
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229c:	4a56      	ldr	r2, [pc, #344]	@ (80023f8 <HAL_GPIO_Init+0x2e8>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022c6:	d01f      	beq.n	8002308 <HAL_GPIO_Init+0x1f8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a4c      	ldr	r2, [pc, #304]	@ (80023fc <HAL_GPIO_Init+0x2ec>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d019      	beq.n	8002304 <HAL_GPIO_Init+0x1f4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <HAL_GPIO_Init+0x2f0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_GPIO_Init+0x1f0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a4a      	ldr	r2, [pc, #296]	@ (8002404 <HAL_GPIO_Init+0x2f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00d      	beq.n	80022fc <HAL_GPIO_Init+0x1ec>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a49      	ldr	r2, [pc, #292]	@ (8002408 <HAL_GPIO_Init+0x2f8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <HAL_GPIO_Init+0x1e8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a48      	ldr	r2, [pc, #288]	@ (800240c <HAL_GPIO_Init+0x2fc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_GPIO_Init+0x1e4>
 80022f0:	2305      	movs	r3, #5
 80022f2:	e00a      	b.n	800230a <HAL_GPIO_Init+0x1fa>
 80022f4:	2306      	movs	r3, #6
 80022f6:	e008      	b.n	800230a <HAL_GPIO_Init+0x1fa>
 80022f8:	2304      	movs	r3, #4
 80022fa:	e006      	b.n	800230a <HAL_GPIO_Init+0x1fa>
 80022fc:	2303      	movs	r3, #3
 80022fe:	e004      	b.n	800230a <HAL_GPIO_Init+0x1fa>
 8002300:	2302      	movs	r3, #2
 8002302:	e002      	b.n	800230a <HAL_GPIO_Init+0x1fa>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_GPIO_Init+0x1fa>
 8002308:	2300      	movs	r3, #0
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	f002 0203 	and.w	r2, r2, #3
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	4093      	lsls	r3, r2
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231a:	4937      	ldr	r1, [pc, #220]	@ (80023f8 <HAL_GPIO_Init+0x2e8>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002328:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <HAL_GPIO_Init+0x300>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800234c:	4a30      	ldr	r2, [pc, #192]	@ (8002410 <HAL_GPIO_Init+0x300>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002352:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_GPIO_Init+0x300>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002376:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <HAL_GPIO_Init+0x300>)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800237c:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <HAL_GPIO_Init+0x300>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002410 <HAL_GPIO_Init+0x300>)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <HAL_GPIO_Init+0x300>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023ca:	4a11      	ldr	r2, [pc, #68]	@ (8002410 <HAL_GPIO_Init+0x300>)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f47f ae9d 	bne.w	8002120 <HAL_GPIO_Init+0x10>
  }
}
 80023e6:	bf00      	nop
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	48000400 	.word	0x48000400
 8002400:	48000800 	.word	0x48000800
 8002404:	48000c00 	.word	0x48000c00
 8002408:	48001000 	.word	0x48001000
 800240c:	48001400 	.word	0x48001400
 8002410:	40010400 	.word	0x40010400

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002430:	e002      	b.n	8002438 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f806 	bl	8002474 <HAL_GPIO_EXTI_Callback>
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d141      	bne.n	800251e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800249a:	4b4b      	ldr	r3, [pc, #300]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a6:	d131      	bne.n	800250c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024a8:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ae:	4a46      	ldr	r2, [pc, #280]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b8:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024c0:	4a41      	ldr	r2, [pc, #260]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024c8:	4b40      	ldr	r3, [pc, #256]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2232      	movs	r2, #50	@ 0x32
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	4a3f      	ldr	r2, [pc, #252]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	0c9b      	lsrs	r3, r3, #18
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024de:	e002      	b.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e6:	4b38      	ldr	r3, [pc, #224]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f2:	d102      	bne.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f2      	bne.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024fa:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002506:	d158      	bne.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e057      	b.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002512:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002518:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800251c:	e04d      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002524:	d141      	bne.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002526:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800252e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002532:	d131      	bne.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002534:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800253a:	4a23      	ldr	r2, [pc, #140]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002540:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002544:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800254c:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002552:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002554:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2232      	movs	r2, #50	@ 0x32
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	0c9b      	lsrs	r3, r3, #18
 8002566:	3301      	adds	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800256a:	e002      	b.n	8002572 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3b01      	subs	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257e:	d102      	bne.n	8002586 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f2      	bne.n	800256c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002592:	d112      	bne.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e011      	b.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025a8:	e007      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40007000 	.word	0x40007000
 80025cc:	20000004 	.word	0x20000004
 80025d0:	431bde83 	.word	0x431bde83

080025d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e2:	6093      	str	r3, [r2, #8]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e2fe      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d075      	beq.n	80026fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4b97      	ldr	r3, [pc, #604]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261c:	4b94      	ldr	r3, [pc, #592]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0x3e>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b03      	cmp	r3, #3
 8002630:	d002      	beq.n	8002638 <HAL_RCC_OscConfig+0x44>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b8d      	ldr	r3, [pc, #564]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05b      	beq.n	80026fc <HAL_RCC_OscConfig+0x108>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d157      	bne.n	80026fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e2d9      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x74>
 800265a:	4b85      	ldr	r3, [pc, #532]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a84      	ldr	r2, [pc, #528]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7f      	ldr	r3, [pc, #508]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7e      	ldr	r2, [pc, #504]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b7c      	ldr	r3, [pc, #496]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7b      	ldr	r2, [pc, #492]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 800268c:	4b78      	ldr	r3, [pc, #480]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a77      	ldr	r2, [pc, #476]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b75      	ldr	r3, [pc, #468]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a74      	ldr	r2, [pc, #464]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff f906 	bl	80018bc <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff f902 	bl	80018bc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	@ 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e29e      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xc0>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff f8f2 	bl	80018bc <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f8ee 	bl	80018bc <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	@ 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e28a      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ee:	4b60      	ldr	r3, [pc, #384]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0xe8>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d075      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b59      	ldr	r3, [pc, #356]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4b56      	ldr	r3, [pc, #344]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d102      	bne.n	800272a <HAL_RCC_OscConfig+0x136>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d002      	beq.n	8002730 <HAL_RCC_OscConfig+0x13c>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d11f      	bne.n	8002770 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002730:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x154>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e25d      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b49      	ldr	r3, [pc, #292]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4946      	ldr	r1, [pc, #280]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800275c:	4b45      	ldr	r3, [pc, #276]	@ (8002874 <HAL_RCC_OscConfig+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fdbf 	bl	80012e4 <HAL_InitTick>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d043      	beq.n	80027f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e249      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b3d      	ldr	r3, [pc, #244]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3c      	ldr	r2, [pc, #240]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff f89a 	bl	80018bc <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff f896 	bl	80018bc <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e232      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279e:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	492d      	ldr	r1, [pc, #180]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
 80027be:	e01a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f876 	bl	80018bc <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7ff f872 	bl	80018bc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e20e      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e6:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1e0>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d041      	beq.n	8002886 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01c      	beq.n	8002844 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002810:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7ff f84f 	bl	80018bc <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7ff f84b 	bl	80018bc <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1e7      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ef      	beq.n	8002822 <HAL_RCC_OscConfig+0x22e>
 8002842:	e020      	b.n	8002886 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 8002846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff f832 	bl	80018bc <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800285a:	e00d      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff f82e 	bl	80018bc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d906      	bls.n	8002878 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1ca      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002878:	4b8c      	ldr	r3, [pc, #560]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ea      	bne.n	800285c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a6 	beq.w	80029e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002898:	4b84      	ldr	r3, [pc, #528]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x2b4>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x2b6>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	4b7f      	ldr	r3, [pc, #508]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	4a7e      	ldr	r2, [pc, #504]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ca:	4b79      	ldr	r3, [pc, #484]	@ (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d118      	bne.n	8002908 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d6:	4b76      	ldr	r3, [pc, #472]	@ (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a75      	ldr	r2, [pc, #468]	@ (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e2:	f7fe ffeb 	bl	80018bc <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7fe ffe7 	bl	80018bc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e183      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab0 <HAL_RCC_OscConfig+0x4bc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_RCC_OscConfig+0x32e>
 8002910:	4b66      	ldr	r3, [pc, #408]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	4a65      	ldr	r2, [pc, #404]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002920:	e024      	b.n	800296c <HAL_RCC_OscConfig+0x378>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d110      	bne.n	800294c <HAL_RCC_OscConfig+0x358>
 800292a:	4b60      	ldr	r3, [pc, #384]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002930:	4a5e      	ldr	r2, [pc, #376]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800293a:	4b5c      	ldr	r3, [pc, #368]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002940:	4a5a      	ldr	r2, [pc, #360]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800294a:	e00f      	b.n	800296c <HAL_RCC_OscConfig+0x378>
 800294c:	4b57      	ldr	r3, [pc, #348]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	4a56      	ldr	r2, [pc, #344]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002962:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe ffa2 	bl	80018bc <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe ff9e 	bl	80018bc <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e138      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002992:	4b46      	ldr	r3, [pc, #280]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ed      	beq.n	800297c <HAL_RCC_OscConfig+0x388>
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe ff8b 	bl	80018bc <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe ff87 	bl	80018bc <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e121      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c0:	4b3a      	ldr	r3, [pc, #232]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ed      	bne.n	80029aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	4b35      	ldr	r3, [pc, #212]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d8:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f4:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029fa:	4a2c      	ldr	r2, [pc, #176]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe ff5a 	bl	80018bc <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0c:	f7fe ff56 	bl	80018bc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0f2      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a1e:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <HAL_RCC_OscConfig+0x418>
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a34:	4a1d      	ldr	r2, [pc, #116]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe ff3d 	bl	80018bc <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a46:	f7fe ff39 	bl	80018bc <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0d5      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a58:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ef      	bne.n	8002a46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80c9 	beq.w	8002c02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a70:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	f000 8083 	beq.w	8002b84 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d15e      	bne.n	8002b44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <HAL_RCC_OscConfig+0x4b8>)
 8002a8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fe ff13 	bl	80018bc <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a98:	e00c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe ff0f 	bl	80018bc <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d905      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0ab      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab4:	4b55      	ldr	r3, [pc, #340]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ec      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b52      	ldr	r3, [pc, #328]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4b52      	ldr	r3, [pc, #328]	@ (8002c10 <HAL_RCC_OscConfig+0x61c>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6a11      	ldr	r1, [r2, #32]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002ada:	0212      	lsls	r2, r2, #8
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0552      	lsls	r2, r2, #21
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aee:	0852      	lsrs	r2, r2, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0652      	lsls	r2, r2, #25
 8002af4:	4311      	orrs	r1, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002afa:	06d2      	lsls	r2, r2, #27
 8002afc:	430a      	orrs	r2, r1
 8002afe:	4943      	ldr	r1, [pc, #268]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b04:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a40      	ldr	r2, [pc, #256]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b10:	4b3e      	ldr	r3, [pc, #248]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a3d      	ldr	r2, [pc, #244]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fece 	bl	80018bc <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe feca 	bl	80018bc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e066      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	4b35      	ldr	r3, [pc, #212]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x530>
 8002b42:	e05e      	b.n	8002c02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b31      	ldr	r3, [pc, #196]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a30      	ldr	r2, [pc, #192]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe feb4 	bl	80018bc <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe feb0 	bl	80018bc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e04c      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6a:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b76:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	4924      	ldr	r1, [pc, #144]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <HAL_RCC_OscConfig+0x620>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60cb      	str	r3, [r1, #12]
 8002b82:	e03e      	b.n	8002c02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e039      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b90:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <HAL_RCC_OscConfig+0x618>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d12c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d123      	bne.n	8002bfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d11b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d113      	bne.n	8002bfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d109      	bne.n	8002bfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	019f800c 	.word	0x019f800c
 8002c14:	feeefffc 	.word	0xfeeefffc

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e11e      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b91      	ldr	r3, [pc, #580]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b8e      	ldr	r3, [pc, #568]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	498c      	ldr	r1, [pc, #560]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b8a      	ldr	r3, [pc, #552]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e106      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d073      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d129      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c74:	4b81      	ldr	r3, [pc, #516]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0f4      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c84:	f000 f9d0 	bl	8003028 <RCC_GetSysClockFreqFromPLLSource>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4a7c      	ldr	r2, [pc, #496]	@ (8002e80 <HAL_RCC_ClockConfig+0x268>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d93f      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c92:	4b7a      	ldr	r3, [pc, #488]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d033      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12f      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cb2:	4b72      	ldr	r3, [pc, #456]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cba:	4a70      	ldr	r2, [pc, #448]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e024      	b.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0c6      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce0:	4b66      	ldr	r3, [pc, #408]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0be      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cf0:	f000 f8ce 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4a61      	ldr	r2, [pc, #388]	@ (8002e80 <HAL_RCC_ClockConfig+0x268>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d909      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d06:	4a5d      	ldr	r2, [pc, #372]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b5a      	ldr	r3, [pc, #360]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4957      	ldr	r1, [pc, #348]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d24:	f7fe fdca 	bl	80018bc <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe fdc6 	bl	80018bc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e095      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b4e      	ldr	r3, [pc, #312]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b43      	ldr	r3, [pc, #268]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a42      	ldr	r2, [pc, #264]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d84:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4936      	ldr	r1, [pc, #216]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
 8002da6:	e008      	b.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b80      	cmp	r3, #128	@ 0x80
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dae:	4b33      	ldr	r3, [pc, #204]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a32      	ldr	r2, [pc, #200]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002db4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002db8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dba:	4b2f      	ldr	r3, [pc, #188]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d21d      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 020f 	bic.w	r2, r3, #15
 8002dd0:	4929      	ldr	r1, [pc, #164]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dd8:	f7fe fd70 	bl	80018bc <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7fe fd6c 	bl	80018bc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e03b      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	@ (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1ed      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4917      	ldr	r1, [pc, #92]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490f      	ldr	r1, [pc, #60]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e42:	f000 f825 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490c      	ldr	r1, [pc, #48]	@ (8002e84 <HAL_RCC_ClockConfig+0x26c>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_RCC_ClockConfig+0x270>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e62:	4b0a      	ldr	r3, [pc, #40]	@ (8002e8c <HAL_RCC_ClockConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fa3c 	bl	80012e4 <HAL_InitTick>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	04c4b400 	.word	0x04c4b400
 8002e84:	08010bec 	.word	0x08010bec
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	20000008 	.word	0x20000008

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e96:	4b2c      	ldr	r3, [pc, #176]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e047      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ea8:	4b27      	ldr	r3, [pc, #156]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb4:	4b26      	ldr	r3, [pc, #152]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e03e      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002eba:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d136      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3301      	adds	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	4a16      	ldr	r2, [pc, #88]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eee:	68d2      	ldr	r2, [r2, #12]
 8002ef0:	0a12      	lsrs	r2, r2, #8
 8002ef2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002efe:	4a13      	ldr	r2, [pc, #76]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	4a10      	ldr	r2, [pc, #64]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	0a12      	lsrs	r2, r2, #8
 8002f0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
      break;
 8002f16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	0e5b      	lsrs	r3, r3, #25
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e001      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f38:	693b      	ldr	r3, [r7, #16]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	016e3600 	.word	0x016e3600

08002f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4904      	ldr	r1, [pc, #16]	@ (8002f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08010bfc 	.word	0x08010bfc

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f9c:	f7ff ffda 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0adb      	lsrs	r3, r3, #11
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4904      	ldr	r1, [pc, #16]	@ (8002fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	08010bfc 	.word	0x08010bfc

08002fc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <HAL_RCC_GetClockConfig+0x60>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 020f 	and.w	r2, r3, #15
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	40022000 	.word	0x40022000

08003028 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302e:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d10c      	bne.n	8003066 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800304c:	4a17      	ldr	r2, [pc, #92]	@ (80030ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	4a14      	ldr	r2, [pc, #80]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003056:	68d2      	ldr	r2, [r2, #12]
 8003058:	0a12      	lsrs	r2, r2, #8
 800305a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
    break;
 8003064:	e00c      	b.n	8003080 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003066:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	0a12      	lsrs	r2, r2, #8
 8003074:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    break;
 800307e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003080:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0e5b      	lsrs	r3, r3, #25
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	3301      	adds	r3, #1
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40021000 	.word	0x40021000
 80030ac:	016e3600 	.word	0x016e3600
 80030b0:	00f42400 	.word	0x00f42400

080030b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030bc:	2300      	movs	r3, #0
 80030be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8098 	beq.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d6:	4b43      	ldr	r3, [pc, #268]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10d      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	4b40      	ldr	r3, [pc, #256]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	4a3f      	ldr	r2, [pc, #252]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ee:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fa:	2301      	movs	r3, #1
 80030fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fe:	4b3a      	ldr	r3, [pc, #232]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a39      	ldr	r2, [pc, #228]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800310a:	f7fe fbd7 	bl	80018bc <HAL_GetTick>
 800310e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003110:	e009      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe fbd3 	bl	80018bc <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d902      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	74fb      	strb	r3, [r7, #19]
        break;
 8003124:	e005      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003126:	4b30      	ldr	r3, [pc, #192]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0ef      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d159      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003138:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003142:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01e      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	d019      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003154:	4b23      	ldr	r3, [pc, #140]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800315e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003160:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003166:	4a1f      	ldr	r2, [pc, #124]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003170:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003180:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe fb93 	bl	80018bc <HAL_GetTick>
 8003196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003198:	e00b      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fe fb8f 	bl	80018bc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d902      	bls.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	74fb      	strb	r3, [r7, #19]
            break;
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b2:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ec      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c6:	4b07      	ldr	r3, [pc, #28]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d4:	4903      	ldr	r1, [pc, #12]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031dc:	e008      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	74bb      	strb	r3, [r7, #18]
 80031e2:	e005      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f0:	7c7b      	ldrb	r3, [r7, #17]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4ba7      	ldr	r3, [pc, #668]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	4aa6      	ldr	r2, [pc, #664]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003200:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320e:	4ba1      	ldr	r3, [pc, #644]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003214:	f023 0203 	bic.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	499d      	ldr	r1, [pc, #628]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003230:	4b98      	ldr	r3, [pc, #608]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	f023 020c 	bic.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4995      	ldr	r1, [pc, #596]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003252:	4b90      	ldr	r3, [pc, #576]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003258:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	498c      	ldr	r1, [pc, #560]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003274:	4b87      	ldr	r3, [pc, #540]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	4984      	ldr	r1, [pc, #528]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003296:	4b7f      	ldr	r3, [pc, #508]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	497b      	ldr	r1, [pc, #492]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b8:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4973      	ldr	r1, [pc, #460]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032da:	4b6e      	ldr	r3, [pc, #440]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	496a      	ldr	r1, [pc, #424]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032fc:	4b65      	ldr	r3, [pc, #404]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4962      	ldr	r1, [pc, #392]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800331e:	4b5d      	ldr	r3, [pc, #372]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003324:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	4959      	ldr	r1, [pc, #356]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003340:	4b54      	ldr	r3, [pc, #336]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	4951      	ldr	r1, [pc, #324]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003362:	4b4c      	ldr	r3, [pc, #304]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003368:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	4948      	ldr	r1, [pc, #288]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003384:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	4940      	ldr	r1, [pc, #256]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033a2:	d105      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033bc:	4b35      	ldr	r3, [pc, #212]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ca:	4932      	ldr	r1, [pc, #200]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033da:	d105      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d015      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033f4:	4b27      	ldr	r3, [pc, #156]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	4924      	ldr	r1, [pc, #144]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003414:	4b1f      	ldr	r3, [pc, #124]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a1e      	ldr	r2, [pc, #120]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800341e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d015      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342c:	4b19      	ldr	r3, [pc, #100]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	4916      	ldr	r1, [pc, #88]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800344a:	d105      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344c:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a10      	ldr	r2, [pc, #64]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003456:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	4908      	ldr	r1, [pc, #32]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003484:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a02      	ldr	r2, [pc, #8]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800348e:	60d3      	str	r3, [r2, #12]
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034a4:	4b29      	ldr	r3, [pc, #164]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	4926      	ldr	r1, [pc, #152]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034c2:	d105      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034c4:	4b21      	ldr	r3, [pc, #132]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a20      	ldr	r2, [pc, #128]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ea:	4918      	ldr	r1, [pc, #96]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fa:	d105      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034fc:	4b13      	ldr	r3, [pc, #76]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a12      	ldr	r2, [pc, #72]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003506:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003514:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	490a      	ldr	r1, [pc, #40]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003532:	d105      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a04      	ldr	r2, [pc, #16]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800353a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800353e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003540:	7cbb      	ldrb	r3, [r7, #18]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e049      	b.n	80035f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f841 	bl	80035fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f000 fa30 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d001      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e054      	b.n	80036d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a26      	ldr	r2, [pc, #152]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003656:	d01d      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x80>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <HAL_TIM_Base_Start_IT+0xe8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d115      	bne.n	80036c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_TIM_Base_Start_IT+0xec>)
 800369c:	4013      	ands	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d015      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0xbe>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ac:	d011      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	e008      	b.n	80036d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e000      	b.n	80036d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40013400 	.word	0x40013400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40015000 	.word	0x40015000
 8003700:	00010007 	.word	0x00010007

08003704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d020      	beq.n	8003768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f931 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f923 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f934 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f90b 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8fd 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f90e 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d020      	beq.n	8003800 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0208 	mvn.w	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f8e5 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8d7 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8e8 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d020      	beq.n	800384c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0210 	mvn.w	r2, #16
 800381c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2208      	movs	r2, #8
 8003822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8bf 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8b1 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8c2 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0201 	mvn.w	r2, #1
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fb92 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00c      	beq.n	800389e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f969 	bl	8003b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f961 	bl	8003b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f87c 	bl	80039de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0220 	mvn.w	r2, #32
 8003902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f929 	bl	8003b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00c      	beq.n	800392e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f935 	bl	8003b98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800394a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f92d 	bl	8003bac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f925 	bl	8003bc0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f91d 	bl	8003bd4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a4c      	ldr	r2, [pc, #304]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d017      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d013      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a49      	ldr	r2, [pc, #292]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00f      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a48      	ldr	r2, [pc, #288]	@ (8003b40 <TIM_Base_SetConfig+0x14c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a47      	ldr	r2, [pc, #284]	@ (8003b44 <TIM_Base_SetConfig+0x150>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a46      	ldr	r2, [pc, #280]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_Base_SetConfig+0x48>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a45      	ldr	r2, [pc, #276]	@ (8003b4c <TIM_Base_SetConfig+0x158>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d108      	bne.n	8003a4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a39      	ldr	r2, [pc, #228]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d023      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5c:	d01f      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a36      	ldr	r2, [pc, #216]	@ (8003b3c <TIM_Base_SetConfig+0x148>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01b      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a35      	ldr	r2, [pc, #212]	@ (8003b40 <TIM_Base_SetConfig+0x14c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d017      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a34      	ldr	r2, [pc, #208]	@ (8003b44 <TIM_Base_SetConfig+0x150>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a33      	ldr	r2, [pc, #204]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00f      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a33      	ldr	r2, [pc, #204]	@ (8003b50 <TIM_Base_SetConfig+0x15c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a32      	ldr	r2, [pc, #200]	@ (8003b54 <TIM_Base_SetConfig+0x160>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a31      	ldr	r2, [pc, #196]	@ (8003b58 <TIM_Base_SetConfig+0x164>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0xaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	@ (8003b4c <TIM_Base_SetConfig+0x158>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <TIM_Base_SetConfig+0x144>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a1a      	ldr	r2, [pc, #104]	@ (8003b48 <TIM_Base_SetConfig+0x154>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00f      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b50 <TIM_Base_SetConfig+0x15c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00b      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a19      	ldr	r2, [pc, #100]	@ (8003b54 <TIM_Base_SetConfig+0x160>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a18      	ldr	r2, [pc, #96]	@ (8003b58 <TIM_Base_SetConfig+0x164>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0x110>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a13      	ldr	r2, [pc, #76]	@ (8003b4c <TIM_Base_SetConfig+0x158>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	611a      	str	r2, [r3, #16]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40013400 	.word	0x40013400
 8003b4c:	40015000 	.word	0x40015000
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800

08003b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fd fd43 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2224      	movs	r2, #36	@ 0x24
 8003c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 f806 	bl	8004c44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fd07 	bl	800464c <UART_SetConfig>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e01b      	b.n	8003c80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f001 f885 	bl	8004d88 <UART_CheckIdleState>
 8003c7e:	4603      	mov	r3, r0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	@ 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d167      	bne.n	8003d70 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_UART_Transmit_DMA+0x24>
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e060      	b.n	8003d72 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2221      	movs	r2, #33	@ 0x21
 8003cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d028      	beq.n	8003d30 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ce2:	4a26      	ldr	r2, [pc, #152]	@ (8003d7c <HAL_UART_Transmit_DMA+0xf4>)
 8003ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cea:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <HAL_UART_Transmit_DMA+0xf8>)
 8003cec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cf2:	4a24      	ldr	r2, [pc, #144]	@ (8003d84 <HAL_UART_Transmit_DMA+0xfc>)
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d06:	4619      	mov	r1, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3328      	adds	r3, #40	@ 0x28
 8003d0e:	461a      	mov	r2, r3
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	f7fd ff67 	bl	8001be4 <HAL_DMA_Start_IT>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2210      	movs	r2, #16
 8003d20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e020      	b.n	8003d72 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2240      	movs	r2, #64	@ 0x40
 8003d36:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	613b      	str	r3, [r7, #16]
   return(result);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d58:	623a      	str	r2, [r7, #32]
 8003d5a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	69f9      	ldr	r1, [r7, #28]
 8003d5e:	6a3a      	ldr	r2, [r7, #32]
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e5      	bne.n	8003d38 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e000      	b.n	8003d72 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003d70:	2302      	movs	r3, #2
  }
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3728      	adds	r7, #40	@ 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08005253 	.word	0x08005253
 8003d80:	080052ed 	.word	0x080052ed
 8003d84:	08005473 	.word	0x08005473

08003d88 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	@ 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d137      	bne.n	8003e10 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_UART_Receive_DMA+0x24>
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e030      	b.n	8003e12 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a18      	ldr	r2, [pc, #96]	@ (8003e1c <HAL_UART_Receive_DMA+0x94>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d01f      	beq.n	8003e00 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d018      	beq.n	8003e00 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	613b      	str	r3, [r7, #16]
   return(result);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	6a3a      	ldr	r2, [r7, #32]
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f001 f8d6 	bl	8004fb8 <UART_Start_Receive_DMA>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3728      	adds	r7, #40	@ 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40008000 	.word	0x40008000

08003e20 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b090      	sub	sp, #64	@ 0x40
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d139      	bne.n	8003eba <HAL_UART_DMAStop+0x9a>
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	2b21      	cmp	r3, #33	@ 0x21
 8003e4a:	d136      	bne.n	8003eba <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd ff24 	bl	8001cda <HAL_DMA_Abort>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe f88b 	bl	8001fb8 <HAL_DMA_GetError>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d105      	bne.n	8003eb4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2210      	movs	r2, #16
 8003eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e047      	b.n	8003f44 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f001 f925 	bl	8005104 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	d13c      	bne.n	8003f42 <HAL_UART_DMAStop+0x122>
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eca:	2b22      	cmp	r3, #34	@ 0x22
 8003ecc:	d139      	bne.n	8003f42 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3308      	adds	r3, #8
 8003eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eee:	61ba      	str	r2, [r7, #24]
 8003ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6979      	ldr	r1, [r7, #20]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	613b      	str	r3, [r7, #16]
   return(result);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e5      	bne.n	8003ece <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d017      	beq.n	8003f3c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fee1 	bl	8001cda <HAL_DMA_Abort>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00e      	beq.n	8003f3c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe f847 	bl	8001fb8 <HAL_DMA_GetError>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d105      	bne.n	8003f3c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2210      	movs	r2, #16
 8003f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f001 f922 	bl	8005186 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3740      	adds	r7, #64	@ 0x40
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0ba      	sub	sp, #232	@ 0xe8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f76:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11b      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8300 	beq.w	80045b6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
      }
      return;
 8003fbe:	e2fa      	b.n	80045b6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8123 	beq.w	8004210 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003fca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003fce:	4b8d      	ldr	r3, [pc, #564]	@ (8004204 <HAL_UART_IRQHandler+0x2b8>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003fda:	4b8b      	ldr	r3, [pc, #556]	@ (8004208 <HAL_UART_IRQHandler+0x2bc>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8116 	beq.w	8004210 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_UART_IRQHandler+0xc8>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400a:	f043 0201 	orr.w	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d011      	beq.n	8004044 <HAL_UART_IRQHandler+0xf8>
 8004020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2202      	movs	r2, #2
 8004032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d011      	beq.n	8004074 <HAL_UART_IRQHandler+0x128>
 8004050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2204      	movs	r2, #4
 8004062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800408c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004090:	4b5c      	ldr	r3, [pc, #368]	@ (8004204 <HAL_UART_IRQHandler+0x2b8>)
 8004092:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2208      	movs	r2, #8
 800409e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f043 0208 	orr.w	r2, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d012      	beq.n	80040e2 <HAL_UART_IRQHandler+0x196>
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00c      	beq.n	80040e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8266 	beq.w	80045ba <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d013      	beq.n	8004122 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800410a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004128:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004136:	2b40      	cmp	r3, #64	@ 0x40
 8004138:	d005      	beq.n	8004146 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800413a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800413e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d054      	beq.n	80041f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 f81d 	bl	8005186 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004156:	2b40      	cmp	r3, #64	@ 0x40
 8004158:	d146      	bne.n	80041e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004170:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004186:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800418a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800419e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1d9      	bne.n	800415a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b6:	4a15      	ldr	r2, [pc, #84]	@ (800420c <HAL_UART_IRQHandler+0x2c0>)
 80041b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd fde3 	bl	8001d8c <HAL_DMA_Abort_IT>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d019      	beq.n	8004200 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80041da:	4610      	mov	r0, r2
 80041dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041de:	e00f      	b.n	8004200 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fa1d 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e6:	e00b      	b.n	8004200 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fa19 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ee:	e007      	b.n	8004200 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa15 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80041fe:	e1dc      	b.n	80045ba <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	bf00      	nop
    return;
 8004202:	e1da      	b.n	80045ba <HAL_UART_IRQHandler+0x66e>
 8004204:	10000001 	.word	0x10000001
 8004208:	04000120 	.word	0x04000120
 800420c:	080054f3 	.word	0x080054f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004214:	2b01      	cmp	r3, #1
 8004216:	f040 8170 	bne.w	80044fa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800421a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8169 	beq.w	80044fa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8162 	beq.w	80044fa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2210      	movs	r2, #16
 800423c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	f040 80d8 	bne.w	80043fe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800425c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80af 	beq.w	80043c4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800426c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004270:	429a      	cmp	r2, r3
 8004272:	f080 80a7 	bcs.w	80043c4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800427c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	f040 8087 	bne.w	80043a2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1da      	bne.n	8004294 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004302:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004306:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800430a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e1      	bne.n	80042de <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3308      	adds	r3, #8
 8004320:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800432a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800432c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800433e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004340:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800434c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800436e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004384:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e4      	bne.n	8004360 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800439c:	4618      	mov	r0, r3
 800439e:	f7fd fc9c 	bl	8001cda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f939 	bl	8004634 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80043c2:	e0fc      	b.n	80045be <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043ce:	429a      	cmp	r2, r3
 80043d0:	f040 80f5 	bne.w	80045be <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	f040 80eb 	bne.w	80045be <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f91c 	bl	8004634 <HAL_UARTEx_RxEventCallback>
      return;
 80043fc:	e0df      	b.n	80045be <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800440a:	b29b      	uxth	r3, r3
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80d1 	beq.w	80045c2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80cc 	beq.w	80045c2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800443e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800444c:	647b      	str	r3, [r7, #68]	@ 0x44
 800444e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800445a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e4      	bne.n	800442a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3308      	adds	r3, #8
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	623b      	str	r3, [r7, #32]
   return(result);
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3308      	adds	r3, #8
 8004484:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004488:	633a      	str	r2, [r7, #48]	@ 0x30
 800448a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800448e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e1      	bne.n	8004460 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 0310 	bic.w	r3, r3, #16
 80044c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	69b9      	ldr	r1, [r7, #24]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	617b      	str	r3, [r7, #20]
   return(result);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e4      	bne.n	80044b0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f89e 	bl	8004634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044f8:	e063      	b.n	80045c2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <HAL_UART_IRQHandler+0x5d8>
 8004506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800450a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800451a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 f825 	bl	800556c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004522:	e051      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d014      	beq.n	800455a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800453c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800454c:	2b00      	cmp	r3, #0
 800454e:	d03a      	beq.n	80045c6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	4798      	blx	r3
    }
    return;
 8004558:	e035      	b.n	80045c6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_UART_IRQHandler+0x62e>
 8004566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 ffcf 	bl	8005516 <UART_EndTransmit_IT>
    return;
 8004578:	e026      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_UART_IRQHandler+0x64e>
 8004586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fffe 	bl	8005594 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004598:	e016      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <HAL_UART_IRQHandler+0x67c>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da0c      	bge.n	80045c8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 ffe6 	bl	8005580 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045b4:	e008      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80045b6:	bf00      	nop
 80045b8:	e006      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
    return;
 80045ba:	bf00      	nop
 80045bc:	e004      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80045be:	bf00      	nop
 80045c0:	e002      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <HAL_UART_IRQHandler+0x67c>
    return;
 80045c6:	bf00      	nop
  }
}
 80045c8:	37e8      	adds	r7, #232	@ 0xe8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop

080045d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b08c      	sub	sp, #48	@ 0x30
 8004652:	af00      	add	r7, sp, #0
 8004654:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4baa      	ldr	r3, [pc, #680]	@ (8004924 <UART_SetConfig+0x2d8>)
 800467c:	4013      	ands	r3, r2
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004684:	430b      	orrs	r3, r1
 8004686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a9f      	ldr	r2, [pc, #636]	@ (8004928 <UART_SetConfig+0x2dc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046b4:	4313      	orrs	r3, r2
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	f023 010f 	bic.w	r1, r3, #15
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a90      	ldr	r2, [pc, #576]	@ (800492c <UART_SetConfig+0x2e0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d125      	bne.n	800473c <UART_SetConfig+0xf0>
 80046f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004930 <UART_SetConfig+0x2e4>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d81a      	bhi.n	8004734 <UART_SetConfig+0xe8>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0xb8>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004715 	.word	0x08004715
 8004708:	08004725 	.word	0x08004725
 800470c:	0800471d 	.word	0x0800471d
 8004710:	0800472d 	.word	0x0800472d
 8004714:	2301      	movs	r3, #1
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800471a:	e116      	b.n	800494a <UART_SetConfig+0x2fe>
 800471c:	2302      	movs	r3, #2
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004722:	e112      	b.n	800494a <UART_SetConfig+0x2fe>
 8004724:	2304      	movs	r3, #4
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472a:	e10e      	b.n	800494a <UART_SetConfig+0x2fe>
 800472c:	2308      	movs	r3, #8
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004732:	e10a      	b.n	800494a <UART_SetConfig+0x2fe>
 8004734:	2310      	movs	r3, #16
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473a:	e106      	b.n	800494a <UART_SetConfig+0x2fe>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7c      	ldr	r2, [pc, #496]	@ (8004934 <UART_SetConfig+0x2e8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d138      	bne.n	80047b8 <UART_SetConfig+0x16c>
 8004746:	4b7a      	ldr	r3, [pc, #488]	@ (8004930 <UART_SetConfig+0x2e4>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d82d      	bhi.n	80047b0 <UART_SetConfig+0x164>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <UART_SetConfig+0x110>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004791 	.word	0x08004791
 8004760:	080047b1 	.word	0x080047b1
 8004764:	080047b1 	.word	0x080047b1
 8004768:	080047b1 	.word	0x080047b1
 800476c:	080047a1 	.word	0x080047a1
 8004770:	080047b1 	.word	0x080047b1
 8004774:	080047b1 	.word	0x080047b1
 8004778:	080047b1 	.word	0x080047b1
 800477c:	08004799 	.word	0x08004799
 8004780:	080047b1 	.word	0x080047b1
 8004784:	080047b1 	.word	0x080047b1
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047a9 	.word	0x080047a9
 8004790:	2300      	movs	r3, #0
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004796:	e0d8      	b.n	800494a <UART_SetConfig+0x2fe>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800479e:	e0d4      	b.n	800494a <UART_SetConfig+0x2fe>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a6:	e0d0      	b.n	800494a <UART_SetConfig+0x2fe>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ae:	e0cc      	b.n	800494a <UART_SetConfig+0x2fe>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b6:	e0c8      	b.n	800494a <UART_SetConfig+0x2fe>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004938 <UART_SetConfig+0x2ec>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d125      	bne.n	800480e <UART_SetConfig+0x1c2>
 80047c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <UART_SetConfig+0x2e4>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047cc:	2b30      	cmp	r3, #48	@ 0x30
 80047ce:	d016      	beq.n	80047fe <UART_SetConfig+0x1b2>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d818      	bhi.n	8004806 <UART_SetConfig+0x1ba>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d00a      	beq.n	80047ee <UART_SetConfig+0x1a2>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d814      	bhi.n	8004806 <UART_SetConfig+0x1ba>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <UART_SetConfig+0x19a>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d008      	beq.n	80047f6 <UART_SetConfig+0x1aa>
 80047e4:	e00f      	b.n	8004806 <UART_SetConfig+0x1ba>
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ec:	e0ad      	b.n	800494a <UART_SetConfig+0x2fe>
 80047ee:	2302      	movs	r3, #2
 80047f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f4:	e0a9      	b.n	800494a <UART_SetConfig+0x2fe>
 80047f6:	2304      	movs	r3, #4
 80047f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047fc:	e0a5      	b.n	800494a <UART_SetConfig+0x2fe>
 80047fe:	2308      	movs	r3, #8
 8004800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004804:	e0a1      	b.n	800494a <UART_SetConfig+0x2fe>
 8004806:	2310      	movs	r3, #16
 8004808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480c:	e09d      	b.n	800494a <UART_SetConfig+0x2fe>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a4a      	ldr	r2, [pc, #296]	@ (800493c <UART_SetConfig+0x2f0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d125      	bne.n	8004864 <UART_SetConfig+0x218>
 8004818:	4b45      	ldr	r3, [pc, #276]	@ (8004930 <UART_SetConfig+0x2e4>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004822:	2bc0      	cmp	r3, #192	@ 0xc0
 8004824:	d016      	beq.n	8004854 <UART_SetConfig+0x208>
 8004826:	2bc0      	cmp	r3, #192	@ 0xc0
 8004828:	d818      	bhi.n	800485c <UART_SetConfig+0x210>
 800482a:	2b80      	cmp	r3, #128	@ 0x80
 800482c:	d00a      	beq.n	8004844 <UART_SetConfig+0x1f8>
 800482e:	2b80      	cmp	r3, #128	@ 0x80
 8004830:	d814      	bhi.n	800485c <UART_SetConfig+0x210>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <UART_SetConfig+0x1f0>
 8004836:	2b40      	cmp	r3, #64	@ 0x40
 8004838:	d008      	beq.n	800484c <UART_SetConfig+0x200>
 800483a:	e00f      	b.n	800485c <UART_SetConfig+0x210>
 800483c:	2300      	movs	r3, #0
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004842:	e082      	b.n	800494a <UART_SetConfig+0x2fe>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484a:	e07e      	b.n	800494a <UART_SetConfig+0x2fe>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004852:	e07a      	b.n	800494a <UART_SetConfig+0x2fe>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485a:	e076      	b.n	800494a <UART_SetConfig+0x2fe>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004862:	e072      	b.n	800494a <UART_SetConfig+0x2fe>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a35      	ldr	r2, [pc, #212]	@ (8004940 <UART_SetConfig+0x2f4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12a      	bne.n	80048c4 <UART_SetConfig+0x278>
 800486e:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <UART_SetConfig+0x2e4>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800487c:	d01a      	beq.n	80048b4 <UART_SetConfig+0x268>
 800487e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004882:	d81b      	bhi.n	80048bc <UART_SetConfig+0x270>
 8004884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004888:	d00c      	beq.n	80048a4 <UART_SetConfig+0x258>
 800488a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488e:	d815      	bhi.n	80048bc <UART_SetConfig+0x270>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <UART_SetConfig+0x250>
 8004894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004898:	d008      	beq.n	80048ac <UART_SetConfig+0x260>
 800489a:	e00f      	b.n	80048bc <UART_SetConfig+0x270>
 800489c:	2300      	movs	r3, #0
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a2:	e052      	b.n	800494a <UART_SetConfig+0x2fe>
 80048a4:	2302      	movs	r3, #2
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048aa:	e04e      	b.n	800494a <UART_SetConfig+0x2fe>
 80048ac:	2304      	movs	r3, #4
 80048ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b2:	e04a      	b.n	800494a <UART_SetConfig+0x2fe>
 80048b4:	2308      	movs	r3, #8
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	e046      	b.n	800494a <UART_SetConfig+0x2fe>
 80048bc:	2310      	movs	r3, #16
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c2:	e042      	b.n	800494a <UART_SetConfig+0x2fe>
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <UART_SetConfig+0x2dc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d13a      	bne.n	8004944 <UART_SetConfig+0x2f8>
 80048ce:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <UART_SetConfig+0x2e4>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048dc:	d01a      	beq.n	8004914 <UART_SetConfig+0x2c8>
 80048de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e2:	d81b      	bhi.n	800491c <UART_SetConfig+0x2d0>
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e8:	d00c      	beq.n	8004904 <UART_SetConfig+0x2b8>
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ee:	d815      	bhi.n	800491c <UART_SetConfig+0x2d0>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <UART_SetConfig+0x2b0>
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f8:	d008      	beq.n	800490c <UART_SetConfig+0x2c0>
 80048fa:	e00f      	b.n	800491c <UART_SetConfig+0x2d0>
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004902:	e022      	b.n	800494a <UART_SetConfig+0x2fe>
 8004904:	2302      	movs	r3, #2
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490a:	e01e      	b.n	800494a <UART_SetConfig+0x2fe>
 800490c:	2304      	movs	r3, #4
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004912:	e01a      	b.n	800494a <UART_SetConfig+0x2fe>
 8004914:	2308      	movs	r3, #8
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e016      	b.n	800494a <UART_SetConfig+0x2fe>
 800491c:	2310      	movs	r3, #16
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004922:	e012      	b.n	800494a <UART_SetConfig+0x2fe>
 8004924:	cfff69f3 	.word	0xcfff69f3
 8004928:	40008000 	.word	0x40008000
 800492c:	40013800 	.word	0x40013800
 8004930:	40021000 	.word	0x40021000
 8004934:	40004400 	.word	0x40004400
 8004938:	40004800 	.word	0x40004800
 800493c:	40004c00 	.word	0x40004c00
 8004940:	40005000 	.word	0x40005000
 8004944:	2310      	movs	r3, #16
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4aae      	ldr	r2, [pc, #696]	@ (8004c08 <UART_SetConfig+0x5bc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	f040 8097 	bne.w	8004a84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004956:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800495a:	2b08      	cmp	r3, #8
 800495c:	d823      	bhi.n	80049a6 <UART_SetConfig+0x35a>
 800495e:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <UART_SetConfig+0x318>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004989 	.word	0x08004989
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004991 	.word	0x08004991
 8004970:	080049a7 	.word	0x080049a7
 8004974:	08004997 	.word	0x08004997
 8004978:	080049a7 	.word	0x080049a7
 800497c:	080049a7 	.word	0x080049a7
 8004980:	080049a7 	.word	0x080049a7
 8004984:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe faf0 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b9e      	ldr	r3, [pc, #632]	@ (8004c0c <UART_SetConfig+0x5c0>)
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe fa7b 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 800499a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8130 	beq.w	8004c1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	4a94      	ldr	r2, [pc, #592]	@ (8004c10 <UART_SetConfig+0x5c4>)
 80049c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d305      	bcc.n	80049ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d903      	bls.n	80049f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049f0:	e113      	b.n	8004c1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	2200      	movs	r2, #0
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	60fa      	str	r2, [r7, #12]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	4a84      	ldr	r2, [pc, #528]	@ (8004c10 <UART_SetConfig+0x5c4>)
 8004a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2200      	movs	r2, #0
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a14:	f7fb fcbc 	bl	8000390 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	020b      	lsls	r3, r1, #8
 8004a2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a2e:	0202      	lsls	r2, r0, #8
 8004a30:	6979      	ldr	r1, [r7, #20]
 8004a32:	6849      	ldr	r1, [r1, #4]
 8004a34:	0849      	lsrs	r1, r1, #1
 8004a36:	2000      	movs	r0, #0
 8004a38:	460c      	mov	r4, r1
 8004a3a:	4605      	mov	r5, r0
 8004a3c:	eb12 0804 	adds.w	r8, r2, r4
 8004a40:	eb43 0905 	adc.w	r9, r3, r5
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	469a      	mov	sl, r3
 8004a4c:	4693      	mov	fp, r2
 8004a4e:	4652      	mov	r2, sl
 8004a50:	465b      	mov	r3, fp
 8004a52:	4640      	mov	r0, r8
 8004a54:	4649      	mov	r1, r9
 8004a56:	f7fb fc9b 	bl	8000390 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4613      	mov	r3, r2
 8004a60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a68:	d308      	bcc.n	8004a7c <UART_SetConfig+0x430>
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a70:	d204      	bcs.n	8004a7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e0ce      	b.n	8004c1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a82:	e0ca      	b.n	8004c1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a8c:	d166      	bne.n	8004b5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d827      	bhi.n	8004ae6 <UART_SetConfig+0x49a>
 8004a96:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <UART_SetConfig+0x450>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004ae7 	.word	0x08004ae7
 8004aac:	08004ad7 	.word	0x08004ad7
 8004ab0:	08004ae7 	.word	0x08004ae7
 8004ab4:	08004ae7 	.word	0x08004ae7
 8004ab8:	08004ae7 	.word	0x08004ae7
 8004abc:	08004adf 	.word	0x08004adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f7fe fa54 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8004ac4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ac6:	e014      	b.n	8004af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7fe fa66 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8004acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ace:	e010      	b.n	8004af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8004c0c <UART_SetConfig+0x5c0>)
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ad4:	e00d      	b.n	8004af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad6:	f7fe f9db 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8004ada:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004adc:	e009      	b.n	8004af2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ae4:	e005      	b.n	8004af2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8090 	beq.w	8004c1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	4a44      	ldr	r2, [pc, #272]	@ (8004c10 <UART_SetConfig+0x5c4>)
 8004b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b04:	461a      	mov	r2, r3
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b0c:	005a      	lsls	r2, r3, #1
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	441a      	add	r2, r3
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	d916      	bls.n	8004b54 <UART_SetConfig+0x508>
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2c:	d212      	bcs.n	8004b54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f023 030f 	bic.w	r3, r3, #15
 8004b36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	8bfb      	ldrh	r3, [r7, #30]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	8bfa      	ldrh	r2, [r7, #30]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	e062      	b.n	8004c1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b5a:	e05e      	b.n	8004c1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d828      	bhi.n	8004bb6 <UART_SetConfig+0x56a>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <UART_SetConfig+0x520>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004ba1 	.word	0x08004ba1
 8004b78:	08004bb7 	.word	0x08004bb7
 8004b7c:	08004ba7 	.word	0x08004ba7
 8004b80:	08004bb7 	.word	0x08004bb7
 8004b84:	08004bb7 	.word	0x08004bb7
 8004b88:	08004bb7 	.word	0x08004bb7
 8004b8c:	08004baf 	.word	0x08004baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b90:	f7fe f9ec 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8004b94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b96:	e014      	b.n	8004bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b98:	f7fe f9fe 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8004b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b9e:	e010      	b.n	8004bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c0c <UART_SetConfig+0x5c0>)
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ba4:	e00d      	b.n	8004bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba6:	f7fe f973 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8004baa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bac:	e009      	b.n	8004bc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bb4:	e005      	b.n	8004bc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bc0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d028      	beq.n	8004c1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	4a10      	ldr	r2, [pc, #64]	@ (8004c10 <UART_SetConfig+0x5c4>)
 8004bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	441a      	add	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d910      	bls.n	8004c14 <UART_SetConfig+0x5c8>
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf8:	d20c      	bcs.n	8004c14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e009      	b.n	8004c1a <UART_SetConfig+0x5ce>
 8004c06:	bf00      	nop
 8004c08:	40008000 	.word	0x40008000
 8004c0c:	00f42400 	.word	0x00f42400
 8004c10:	08010c04 	.word	0x08010c04
      }
      else
      {
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3730      	adds	r7, #48	@ 0x30
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01a      	beq.n	8004d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d42:	d10a      	bne.n	8004d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b098      	sub	sp, #96	@ 0x60
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d98:	f7fc fd90 	bl	80018bc <HAL_GetTick>
 8004d9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d12f      	bne.n	8004e0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f88e 	bl	8004edc <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d022      	beq.n	8004e0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dda:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e063      	b.n	8004ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d149      	bne.n	8004eae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e22:	2200      	movs	r2, #0
 8004e24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f857 	bl	8004edc <UART_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d03c      	beq.n	8004eae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	623b      	str	r3, [r7, #32]
   return(result);
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e6      	bne.n	8004e34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e86:	61fa      	str	r2, [r7, #28]
 8004e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	69b9      	ldr	r1, [r7, #24]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	617b      	str	r3, [r7, #20]
   return(result);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e5      	bne.n	8004e66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e012      	b.n	8004ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3758      	adds	r7, #88	@ 0x58
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eec:	e04f      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ef4:	d04b      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fc fce1 	bl	80018bc <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e04e      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d037      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b80      	cmp	r3, #128	@ 0x80
 8004f22:	d034      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d031      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d110      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f920 	bl	8005186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e029      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f68:	d111      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f906 	bl	8005186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e00f      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4013      	ands	r3, r2
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d0a0      	beq.n	8004eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b096      	sub	sp, #88	@ 0x58
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	88fa      	ldrh	r2, [r7, #6]
 8004fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2222      	movs	r2, #34	@ 0x22
 8004fe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02d      	beq.n	800504a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff4:	4a40      	ldr	r2, [pc, #256]	@ (80050f8 <UART_Start_Receive_DMA+0x140>)
 8004ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80050fc <UART_Start_Receive_DMA+0x144>)
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005008:	4a3d      	ldr	r2, [pc, #244]	@ (8005100 <UART_Start_Receive_DMA+0x148>)
 800500a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005012:	2200      	movs	r2, #0
 8005014:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3324      	adds	r3, #36	@ 0x24
 8005022:	4619      	mov	r1, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005028:	461a      	mov	r2, r3
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	f7fc fdda 	bl	8001be4 <HAL_DMA_Start_IT>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2210      	movs	r2, #16
 800503a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e051      	b.n	80050ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005066:	657b      	str	r3, [r7, #84]	@ 0x54
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005072:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800507e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3308      	adds	r3, #8
 800508a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	653b      	str	r3, [r7, #80]	@ 0x50
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80050a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80050a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80050b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	613b      	str	r3, [r7, #16]
   return(result);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050d8:	623a      	str	r2, [r7, #32]
 80050da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	6a3a      	ldr	r2, [r7, #32]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3758      	adds	r7, #88	@ 0x58
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	08005309 	.word	0x08005309
 80050fc:	08005435 	.word	0x08005435
 8005100:	08005473 	.word	0x08005473

08005104 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b08f      	sub	sp, #60	@ 0x3c
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	61fb      	str	r3, [r7, #28]
   return(result);
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005120:	637b      	str	r3, [r7, #52]	@ 0x34
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800512c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	60bb      	str	r3, [r7, #8]
   return(result);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005154:	633b      	str	r3, [r7, #48]	@ 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515e:	61ba      	str	r2, [r7, #24]
 8005160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6979      	ldr	r1, [r7, #20]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	613b      	str	r3, [r7, #16]
   return(result);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e5      	bne.n	800513e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800517a:	bf00      	nop
 800517c:	373c      	adds	r7, #60	@ 0x3c
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005186:	b480      	push	{r7}
 8005188:	b095      	sub	sp, #84	@ 0x54
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800519c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e3      	bne.n	80051c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d118      	bne.n	8005232 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	60bb      	str	r3, [r7, #8]
   return(result);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f023 0310 	bic.w	r3, r3, #16
 8005214:	647b      	str	r3, [r7, #68]	@ 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6979      	ldr	r1, [r7, #20]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	613b      	str	r3, [r7, #16]
   return(result);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e6      	bne.n	8005200 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005246:	bf00      	nop
 8005248:	3754      	adds	r7, #84	@ 0x54
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b090      	sub	sp, #64	@ 0x40
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d137      	bne.n	80052de <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800526e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005270:	2200      	movs	r2, #0
 8005272:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	623b      	str	r3, [r7, #32]
   return(result);
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800528e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005296:	633a      	str	r2, [r7, #48]	@ 0x30
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800529c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052be:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	69b9      	ldr	r1, [r7, #24]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	617b      	str	r3, [r7, #20]
   return(result);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052dc:	e002      	b.n	80052e4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80052de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80052e0:	f7ff f976 	bl	80045d0 <HAL_UART_TxCpltCallback>
}
 80052e4:	bf00      	nop
 80052e6:	3740      	adds	r7, #64	@ 0x40
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff f972 	bl	80045e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b09c      	sub	sp, #112	@ 0x70
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d171      	bne.n	8005408 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005326:	2200      	movs	r2, #0
 8005328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800532c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800533a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800534a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800534c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	667b      	str	r3, [r7, #100]	@ 0x64
 8005376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800537e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005380:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800538c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	623b      	str	r3, [r7, #32]
   return(result);
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80053aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d118      	bne.n	8005408 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0310 	bic.w	r3, r3, #16
 80053ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	69b9      	ldr	r1, [r7, #24]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	617b      	str	r3, [r7, #20]
   return(result);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e6      	bne.n	80053d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800540a:	2200      	movs	r2, #0
 800540c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800541c:	4619      	mov	r1, r3
 800541e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005420:	f7ff f908 	bl	8004634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005424:	e002      	b.n	800542c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005426:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005428:	f7ff f8e6 	bl	80045f8 <HAL_UART_RxCpltCallback>
}
 800542c:	bf00      	nop
 800542e:	3770      	adds	r7, #112	@ 0x70
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d109      	bne.n	8005464 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	b29b      	uxth	r3, r3
 800545a:	4619      	mov	r1, r3
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff f8e9 	bl	8004634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005462:	e002      	b.n	800546a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff f8d1 	bl	800460c <HAL_UART_RxHalfCpltCallback>
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005486:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800548e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b80      	cmp	r3, #128	@ 0x80
 800549c:	d109      	bne.n	80054b2 <UART_DMAError+0x40>
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b21      	cmp	r3, #33	@ 0x21
 80054a2:	d106      	bne.n	80054b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80054ac:	6978      	ldr	r0, [r7, #20]
 80054ae:	f7ff fe29 	bl	8005104 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	d109      	bne.n	80054d4 <UART_DMAError+0x62>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b22      	cmp	r3, #34	@ 0x22
 80054c4:	d106      	bne.n	80054d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80054ce:	6978      	ldr	r0, [r7, #20]
 80054d0:	f7ff fe59 	bl	8005186 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054da:	f043 0210 	orr.w	r2, r3, #16
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054e4:	6978      	ldr	r0, [r7, #20]
 80054e6:	f7ff f89b 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ea:	bf00      	nop
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff f889 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b088      	sub	sp, #32
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	60bb      	str	r3, [r7, #8]
   return(result);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6979      	ldr	r1, [r7, #20]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	613b      	str	r3, [r7, #16]
   return(result);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e6      	bne.n	800551e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff f836 	bl	80045d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005564:	bf00      	nop
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_UARTEx_DisableFifoMode+0x16>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e027      	b.n	800560e <HAL_UARTEx_DisableFifoMode+0x66>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2224      	movs	r2, #36	@ 0x24
 80055ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80055ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800562e:	2302      	movs	r3, #2
 8005630:	e02d      	b.n	800568e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	@ 0x24
 800563e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f850 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e02d      	b.n	800570a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	@ 0x24
 80056ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f812 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005734:	e031      	b.n	800579a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005736:	2308      	movs	r3, #8
 8005738:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800573a:	2308      	movs	r3, #8
 800573c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	0e5b      	lsrs	r3, r3, #25
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0f5b      	lsrs	r3, r3, #29
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800575e:	7bbb      	ldrb	r3, [r7, #14]
 8005760:	7b3a      	ldrb	r2, [r7, #12]
 8005762:	4911      	ldr	r1, [pc, #68]	@ (80057a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005764:	5c8a      	ldrb	r2, [r1, r2]
 8005766:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800576a:	7b3a      	ldrb	r2, [r7, #12]
 800576c:	490f      	ldr	r1, [pc, #60]	@ (80057ac <UARTEx_SetNbDataToProcess+0x98>)
 800576e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005770:	fb93 f3f2 	sdiv	r3, r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	7b7a      	ldrb	r2, [r7, #13]
 8005780:	4909      	ldr	r1, [pc, #36]	@ (80057a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005782:	5c8a      	ldrb	r2, [r1, r2]
 8005784:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005788:	7b7a      	ldrb	r2, [r7, #13]
 800578a:	4908      	ldr	r1, [pc, #32]	@ (80057ac <UARTEx_SetNbDataToProcess+0x98>)
 800578c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800578e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	08010c1c 	.word	0x08010c1c
 80057ac:	08010c24 	.word	0x08010c24

080057b0 <__NVIC_SetPriority>:
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	db0a      	blt.n	80057da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	490c      	ldr	r1, [pc, #48]	@ (80057fc <__NVIC_SetPriority+0x4c>)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	0112      	lsls	r2, r2, #4
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	440b      	add	r3, r1
 80057d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057d8:	e00a      	b.n	80057f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4908      	ldr	r1, [pc, #32]	@ (8005800 <__NVIC_SetPriority+0x50>)
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	3b04      	subs	r3, #4
 80057e8:	0112      	lsls	r2, r2, #4
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	440b      	add	r3, r1
 80057ee:	761a      	strb	r2, [r3, #24]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	e000e100 	.word	0xe000e100
 8005800:	e000ed00 	.word	0xe000ed00

08005804 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005808:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <SysTick_Handler+0x1c>)
 800580a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800580c:	f001 fd40 	bl	8007290 <xTaskGetSchedulerState>
 8005810:	4603      	mov	r3, r0
 8005812:	2b01      	cmp	r3, #1
 8005814:	d001      	beq.n	800581a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005816:	f002 fb37 	bl	8007e88 <xPortSysTickHandler>
  }
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	e000e010 	.word	0xe000e010

08005824 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005828:	2100      	movs	r1, #0
 800582a:	f06f 0004 	mvn.w	r0, #4
 800582e:	f7ff ffbf 	bl	80057b0 <__NVIC_SetPriority>
#endif
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583e:	f3ef 8305 	mrs	r3, IPSR
 8005842:	603b      	str	r3, [r7, #0]
  return(result);
 8005844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800584a:	f06f 0305 	mvn.w	r3, #5
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	e00c      	b.n	800586c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005852:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <osKernelInitialize+0x44>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800585a:	4b08      	ldr	r3, [pc, #32]	@ (800587c <osKernelInitialize+0x44>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005860:	2300      	movs	r3, #0
 8005862:	607b      	str	r3, [r7, #4]
 8005864:	e002      	b.n	800586c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800586a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800586c:	687b      	ldr	r3, [r7, #4]
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	2000460c 	.word	0x2000460c

08005880 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005886:	f3ef 8305 	mrs	r3, IPSR
 800588a:	603b      	str	r3, [r7, #0]
  return(result);
 800588c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005892:	f06f 0305 	mvn.w	r3, #5
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	e010      	b.n	80058bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <osKernelStart+0x48>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d109      	bne.n	80058b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058a2:	f7ff ffbf 	bl	8005824 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058a6:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <osKernelStart+0x48>)
 80058a8:	2202      	movs	r2, #2
 80058aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058ac:	f001 f87a 	bl	80069a4 <vTaskStartScheduler>
      stat = osOK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	e002      	b.n	80058bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058bc:	687b      	ldr	r3, [r7, #4]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2000460c 	.word	0x2000460c

080058cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08e      	sub	sp, #56	@ 0x38
 80058d0:	af04      	add	r7, sp, #16
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058dc:	f3ef 8305 	mrs	r3, IPSR
 80058e0:	617b      	str	r3, [r7, #20]
  return(result);
 80058e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d17e      	bne.n	80059e6 <osThreadNew+0x11a>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d07b      	beq.n	80059e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058ee:	2380      	movs	r3, #128	@ 0x80
 80058f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058f2:	2318      	movs	r3, #24
 80058f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d045      	beq.n	8005992 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <osThreadNew+0x48>
        name = attr->name;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <osThreadNew+0x6e>
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b38      	cmp	r3, #56	@ 0x38
 800592c:	d805      	bhi.n	800593a <osThreadNew+0x6e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <osThreadNew+0x72>
        return (NULL);
 800593a:	2300      	movs	r3, #0
 800593c:	e054      	b.n	80059e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00e      	beq.n	8005974 <osThreadNew+0xa8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	2b5b      	cmp	r3, #91	@ 0x5b
 800595c:	d90a      	bls.n	8005974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <osThreadNew+0xa8>
        mem = 1;
 800596e:	2301      	movs	r3, #1
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e010      	b.n	8005996 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10c      	bne.n	8005996 <osThreadNew+0xca>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <osThreadNew+0xca>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <osThreadNew+0xca>
          mem = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e001      	b.n	8005996 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d110      	bne.n	80059be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059a4:	9202      	str	r2, [sp, #8]
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fe1a 	bl	80065ec <xTaskCreateStatic>
 80059b8:	4603      	mov	r3, r0
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e013      	b.n	80059e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d110      	bne.n	80059e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fe68 	bl	80066ac <xTaskCreate>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d001      	beq.n	80059e6 <osThreadNew+0x11a>
            hTask = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059e6:	693b      	ldr	r3, [r7, #16]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3728      	adds	r7, #40	@ 0x28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f8:	f3ef 8305 	mrs	r3, IPSR
 80059fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <osDelay+0x1c>
    stat = osErrorISR;
 8005a04:	f06f 0305 	mvn.w	r3, #5
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	e007      	b.n	8005a1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 ff8e 	bl	8006938 <vTaskDelay>
    }
  }

  return (stat);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a07      	ldr	r2, [pc, #28]	@ (8005a54 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4a06      	ldr	r2, [pc, #24]	@ (8005a58 <vApplicationGetIdleTaskMemory+0x30>)
 8005a3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2280      	movs	r2, #128	@ 0x80
 8005a44:	601a      	str	r2, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20004610 	.word	0x20004610
 8005a58:	2000466c 	.word	0x2000466c

08005a5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a07      	ldr	r2, [pc, #28]	@ (8005a88 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a06      	ldr	r2, [pc, #24]	@ (8005a8c <vApplicationGetTimerTaskMemory+0x30>)
 8005a72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a7a:	601a      	str	r2, [r3, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	2000486c 	.word	0x2000486c
 8005a8c:	200048c8 	.word	0x200048c8

08005a90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f103 0208 	add.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005aa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f103 0208 	add.w	r2, r3, #8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f103 0208 	add.w	r2, r3, #8
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b48:	d103      	bne.n	8005b52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e00c      	b.n	8005b6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3308      	adds	r3, #8
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e002      	b.n	8005b60 <vListInsert+0x2e>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d2f6      	bcs.n	8005b5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6892      	ldr	r2, [r2, #8]
 8005bba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6852      	ldr	r2, [r2, #4]
 8005bc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d103      	bne.n	8005bd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1e5a      	subs	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xQueueGenericReset+0x2c>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60bb      	str	r3, [r7, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c24:	f002 f8a0 	bl	8007d68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	441a      	add	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c54:	3b01      	subs	r3, #1
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c5a:	fb01 f303 	mul.w	r3, r1, r3
 8005c5e:	441a      	add	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	22ff      	movs	r2, #255	@ 0xff
 8005c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	22ff      	movs	r2, #255	@ 0xff
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d114      	bne.n	8005ca4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01a      	beq.n	8005cb8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3310      	adds	r3, #16
 8005c86:	4618      	mov	r0, r3
 8005c88:	f001 f91a 	bl	8006ec0 <xTaskRemoveFromEventList>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d012      	beq.n	8005cb8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <xQueueGenericReset+0xd0>)
 8005c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	e009      	b.n	8005cb8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3310      	adds	r3, #16
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fef1 	bl	8005a90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3324      	adds	r3, #36	@ 0x24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff feec 	bl	8005a90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cb8:	f002 f888 	bl	8007dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cbc:	2301      	movs	r3, #1
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08e      	sub	sp, #56	@ 0x38
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10b      	bne.n	8005d16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <xQueueGenericCreateStatic+0x56>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <xQueueGenericCreateStatic+0x5a>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <xQueueGenericCreateStatic+0x5c>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10b      	bne.n	8005d44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	623b      	str	r3, [r7, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <xQueueGenericCreateStatic+0x84>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <xQueueGenericCreateStatic+0x88>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <xQueueGenericCreateStatic+0x8a>
 8005d54:	2300      	movs	r3, #0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	61fb      	str	r3, [r7, #28]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d72:	2350      	movs	r3, #80	@ 0x50
 8005d74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b50      	cmp	r3, #80	@ 0x50
 8005d7a:	d00b      	beq.n	8005d94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	61bb      	str	r3, [r7, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00d      	beq.n	8005dbc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005da8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	4613      	mov	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f805 	bl	8005dc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3730      	adds	r7, #48	@ 0x30
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
 8005dd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d103      	bne.n	8005de2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e002      	b.n	8005de8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005df4:	2101      	movs	r1, #1
 8005df6:	69b8      	ldr	r0, [r7, #24]
 8005df8:	f7ff fefe 	bl	8005bf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08e      	sub	sp, #56	@ 0x38
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <xQueueGenericSend+0x34>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <xQueueGenericSend+0x42>
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <xQueueGenericSend+0x46>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <xQueueGenericSend+0x48>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10b      	bne.n	8005e70 <xQueueGenericSend+0x64>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d103      	bne.n	8005e7e <xQueueGenericSend+0x72>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <xQueueGenericSend+0x76>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <xQueueGenericSend+0x78>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10b      	bne.n	8005ea0 <xQueueGenericSend+0x94>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	623b      	str	r3, [r7, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	e7fd      	b.n	8005e9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ea0:	f001 f9f6 	bl	8007290 <xTaskGetSchedulerState>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <xQueueGenericSend+0xa4>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <xQueueGenericSend+0xa8>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <xQueueGenericSend+0xaa>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <xQueueGenericSend+0xc6>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	61fb      	str	r3, [r7, #28]
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ed2:	f001 ff49 	bl	8007d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <xQueueGenericSend+0xdc>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d129      	bne.n	8005f3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eee:	f000 fa0f 	bl	8006310 <prvCopyDataToQueue>
 8005ef2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d010      	beq.n	8005f1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	3324      	adds	r3, #36	@ 0x24
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 ffdd 	bl	8006ec0 <xTaskRemoveFromEventList>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d013      	beq.n	8005f34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800600c <xQueueGenericSend+0x200>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	e00a      	b.n	8005f34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f24:	4b39      	ldr	r3, [pc, #228]	@ (800600c <xQueueGenericSend+0x200>)
 8005f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f34:	f001 ff4a 	bl	8007dcc <vPortExitCritical>
				return pdPASS;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e063      	b.n	8006004 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f42:	f001 ff43 	bl	8007dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e05c      	b.n	8006004 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f50:	f107 0314 	add.w	r3, r7, #20
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 f83f 	bl	8006fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f5e:	f001 ff35 	bl	8007dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f62:	f000 fd87 	bl	8006a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f66:	f001 feff 	bl	8007d68 <vPortEnterCritical>
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f76:	d103      	bne.n	8005f80 <xQueueGenericSend+0x174>
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f86:	b25b      	sxtb	r3, r3
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f8c:	d103      	bne.n	8005f96 <xQueueGenericSend+0x18a>
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f96:	f001 ff19 	bl	8007dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f9a:	1d3a      	adds	r2, r7, #4
 8005f9c:	f107 0314 	add.w	r3, r7, #20
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 f82e 	bl	8007004 <xTaskCheckForTimeOut>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d124      	bne.n	8005ff8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fb0:	f000 faa6 	bl	8006500 <prvIsQueueFull>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d018      	beq.n	8005fec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	3310      	adds	r3, #16
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 ff2a 	bl	8006e1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fca:	f000 fa31 	bl	8006430 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fce:	f000 fd5f 	bl	8006a90 <xTaskResumeAll>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f47f af7c 	bne.w	8005ed2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005fda:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <xQueueGenericSend+0x200>)
 8005fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	e772      	b.n	8005ed2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fee:	f000 fa1f 	bl	8006430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ff2:	f000 fd4d 	bl	8006a90 <xTaskResumeAll>
 8005ff6:	e76c      	b.n	8005ed2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ffa:	f000 fa19 	bl	8006430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ffe:	f000 fd47 	bl	8006a90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006002:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006004:	4618      	mov	r0, r3
 8006006:	3738      	adds	r7, #56	@ 0x38
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	e000ed04 	.word	0xe000ed04

08006010 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b090      	sub	sp, #64	@ 0x40
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <xQueueGenericSendFromISR+0x3e>
 8006046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <xQueueGenericSendFromISR+0x42>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <xQueueGenericSendFromISR+0x44>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d103      	bne.n	800607e <xQueueGenericSendFromISR+0x6e>
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <xQueueGenericSendFromISR+0x72>
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <xQueueGenericSendFromISR+0x74>
 8006082:	2300      	movs	r3, #0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	623b      	str	r3, [r7, #32]
}
 800609a:	bf00      	nop
 800609c:	bf00      	nop
 800609e:	e7fd      	b.n	800609c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060a0:	f001 ff42 	bl	8007f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060a4:	f3ef 8211 	mrs	r2, BASEPRI
 80060a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	61fa      	str	r2, [r7, #28]
 80060ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d302      	bcc.n	80060d2 <xQueueGenericSendFromISR+0xc2>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d12f      	bne.n	8006132 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060e8:	f000 f912 	bl	8006310 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060f4:	d112      	bne.n	800611c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d016      	beq.n	800612c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006100:	3324      	adds	r3, #36	@ 0x24
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fedc 	bl	8006ec0 <xTaskRemoveFromEventList>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00e      	beq.n	800612c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e007      	b.n	800612c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800611c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006120:	3301      	adds	r3, #1
 8006122:	b2db      	uxtb	r3, r3
 8006124:	b25a      	sxtb	r2, r3
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800612c:	2301      	movs	r3, #1
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006130:	e001      	b.n	8006136 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006132:	2300      	movs	r3, #0
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006138:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006140:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006144:	4618      	mov	r0, r3
 8006146:	3740      	adds	r7, #64	@ 0x40
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08c      	sub	sp, #48	@ 0x30
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <xQueueReceive+0x32>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	623b      	str	r3, [r7, #32]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <xQueueReceive+0x40>
 8006184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <xQueueReceive+0x44>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <xQueueReceive+0x46>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <xQueueReceive+0x62>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	61fb      	str	r3, [r7, #28]
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	e7fd      	b.n	80061aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ae:	f001 f86f 	bl	8007290 <xTaskGetSchedulerState>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <xQueueReceive+0x72>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueReceive+0x76>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueReceive+0x78>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <xQueueReceive+0x94>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61bb      	str	r3, [r7, #24]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e0:	f001 fdc2 	bl	8007d68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01f      	beq.n	8006230 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061f4:	f000 f8f6 	bl	80063e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	1e5a      	subs	r2, r3, #1
 80061fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00f      	beq.n	8006228 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	3310      	adds	r3, #16
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fe57 	bl	8006ec0 <xTaskRemoveFromEventList>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006218:	4b3c      	ldr	r3, [pc, #240]	@ (800630c <xQueueReceive+0x1c0>)
 800621a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006228:	f001 fdd0 	bl	8007dcc <vPortExitCritical>
				return pdPASS;
 800622c:	2301      	movs	r3, #1
 800622e:	e069      	b.n	8006304 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006236:	f001 fdc9 	bl	8007dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800623a:	2300      	movs	r3, #0
 800623c:	e062      	b.n	8006304 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800623e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006244:	f107 0310 	add.w	r3, r7, #16
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fec5 	bl	8006fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800624e:	2301      	movs	r3, #1
 8006250:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006252:	f001 fdbb 	bl	8007dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006256:	f000 fc0d 	bl	8006a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800625a:	f001 fd85 	bl	8007d68 <vPortEnterCritical>
 800625e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006264:	b25b      	sxtb	r3, r3
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800626a:	d103      	bne.n	8006274 <xQueueReceive+0x128>
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006280:	d103      	bne.n	800628a <xQueueReceive+0x13e>
 8006282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800628a:	f001 fd9f 	bl	8007dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800628e:	1d3a      	adds	r2, r7, #4
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f000 feb4 	bl	8007004 <xTaskCheckForTimeOut>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d123      	bne.n	80062ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a4:	f000 f916 	bl	80064d4 <prvIsQueueEmpty>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d017      	beq.n	80062de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	3324      	adds	r3, #36	@ 0x24
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fdb0 	bl	8006e1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062be:	f000 f8b7 	bl	8006430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c2:	f000 fbe5 	bl	8006a90 <xTaskResumeAll>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d189      	bne.n	80061e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80062cc:	4b0f      	ldr	r3, [pc, #60]	@ (800630c <xQueueReceive+0x1c0>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	e780      	b.n	80061e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e0:	f000 f8a6 	bl	8006430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e4:	f000 fbd4 	bl	8006a90 <xTaskResumeAll>
 80062e8:	e77a      	b.n	80061e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ec:	f000 f8a0 	bl	8006430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f0:	f000 fbce 	bl	8006a90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062f6:	f000 f8ed 	bl	80064d4 <prvIsQueueEmpty>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f43f af6f 	beq.w	80061e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006304:	4618      	mov	r0, r3
 8006306:	3730      	adds	r7, #48	@ 0x30
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	e000ed04 	.word	0xe000ed04

08006310 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006324:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10d      	bne.n	800634a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d14d      	bne.n	80063d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ffc6 	bl	80072cc <xTaskPriorityDisinherit>
 8006340:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	e043      	b.n	80063d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d119      	bne.n	8006384 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6858      	ldr	r0, [r3, #4]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	461a      	mov	r2, r3
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	f009 fd05 	bl	800fd6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006368:	441a      	add	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	429a      	cmp	r2, r3
 8006378:	d32b      	bcc.n	80063d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	e026      	b.n	80063d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68d8      	ldr	r0, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	461a      	mov	r2, r3
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	f009 fceb 	bl	800fd6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639c:	425b      	negs	r3, r3
 800639e:	441a      	add	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d207      	bcs.n	80063c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b8:	425b      	negs	r3, r3
 80063ba:	441a      	add	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d105      	bne.n	80063d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063da:	697b      	ldr	r3, [r7, #20]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	441a      	add	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	429a      	cmp	r2, r3
 800640e:	d303      	bcc.n	8006418 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68d9      	ldr	r1, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006420:	461a      	mov	r2, r3
 8006422:	6838      	ldr	r0, [r7, #0]
 8006424:	f009 fca1 	bl	800fd6a <memcpy>
	}
}
 8006428:	bf00      	nop
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006438:	f001 fc96 	bl	8007d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006442:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006444:	e011      	b.n	800646a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d012      	beq.n	8006474 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3324      	adds	r3, #36	@ 0x24
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fd34 	bl	8006ec0 <xTaskRemoveFromEventList>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800645e:	f000 fe35 	bl	80070cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	3b01      	subs	r3, #1
 8006466:	b2db      	uxtb	r3, r3
 8006468:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800646a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800646e:	2b00      	cmp	r3, #0
 8006470:	dce9      	bgt.n	8006446 <prvUnlockQueue+0x16>
 8006472:	e000      	b.n	8006476 <prvUnlockQueue+0x46>
					break;
 8006474:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	22ff      	movs	r2, #255	@ 0xff
 800647a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800647e:	f001 fca5 	bl	8007dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006482:	f001 fc71 	bl	8007d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800648c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800648e:	e011      	b.n	80064b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d012      	beq.n	80064be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3310      	adds	r3, #16
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fd0f 	bl	8006ec0 <xTaskRemoveFromEventList>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064a8:	f000 fe10 	bl	80070cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dce9      	bgt.n	8006490 <prvUnlockQueue+0x60>
 80064bc:	e000      	b.n	80064c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	22ff      	movs	r2, #255	@ 0xff
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064c8:	f001 fc80 	bl	8007dcc <vPortExitCritical>
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064dc:	f001 fc44 	bl	8007d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e001      	b.n	80064f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064f2:	f001 fc6b 	bl	8007dcc <vPortExitCritical>

	return xReturn;
 80064f6:	68fb      	ldr	r3, [r7, #12]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006508:	f001 fc2e 	bl	8007d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006514:	429a      	cmp	r2, r3
 8006516:	d102      	bne.n	800651e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e001      	b.n	8006522 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006522:	f001 fc53 	bl	8007dcc <vPortExitCritical>

	return xReturn;
 8006526:	68fb      	ldr	r3, [r7, #12]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	e014      	b.n	800656a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006540:	4a0f      	ldr	r2, [pc, #60]	@ (8006580 <vQueueAddToRegistry+0x50>)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800654c:	490c      	ldr	r1, [pc, #48]	@ (8006580 <vQueueAddToRegistry+0x50>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006556:	4a0a      	ldr	r2, [pc, #40]	@ (8006580 <vQueueAddToRegistry+0x50>)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006562:	e006      	b.n	8006572 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b07      	cmp	r3, #7
 800656e:	d9e7      	bls.n	8006540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20004cc8 	.word	0x20004cc8

08006584 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006594:	f001 fbe8 	bl	8007d68 <vPortEnterCritical>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065a4:	d103      	bne.n	80065ae <vQueueWaitForMessageRestricted+0x2a>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ba:	d103      	bne.n	80065c4 <vQueueWaitForMessageRestricted+0x40>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065c4:	f001 fc02 	bl	8007dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d106      	bne.n	80065de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	3324      	adds	r3, #36	@ 0x24
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fc45 	bl	8006e68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065de:	6978      	ldr	r0, [r7, #20]
 80065e0:	f7ff ff26 	bl	8006430 <prvUnlockQueue>
	}
 80065e4:	bf00      	nop
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	@ 0x38
 80065f0:	af04      	add	r7, sp, #16
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10b      	bne.n	8006618 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	623b      	str	r3, [r7, #32]
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <xTaskCreateStatic+0x4a>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	61fb      	str	r3, [r7, #28]
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	e7fd      	b.n	8006632 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006636:	235c      	movs	r3, #92	@ 0x5c
 8006638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b5c      	cmp	r3, #92	@ 0x5c
 800663e:	d00b      	beq.n	8006658 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	61bb      	str	r3, [r7, #24]
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	e7fd      	b.n	8006654 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006658:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01e      	beq.n	800669e <xTaskCreateStatic+0xb2>
 8006660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01b      	beq.n	800669e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800666e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006678:	2300      	movs	r3, #0
 800667a:	9303      	str	r3, [sp, #12]
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	9302      	str	r3, [sp, #8]
 8006680:	f107 0314 	add.w	r3, r7, #20
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 f850 	bl	8006736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006696:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006698:	f000 f8de 	bl	8006858 <prvAddNewTaskToReadyList>
 800669c:	e001      	b.n	80066a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066a2:	697b      	ldr	r3, [r7, #20]
	}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3728      	adds	r7, #40	@ 0x28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	@ 0x30
 80066b0:	af04      	add	r7, sp, #16
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fc73 	bl	8007fac <pvPortMalloc>
 80066c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00e      	beq.n	80066ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066ce:	205c      	movs	r0, #92	@ 0x5c
 80066d0:	f001 fc6c 	bl	8007fac <pvPortMalloc>
 80066d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066e2:	e005      	b.n	80066f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066e4:	6978      	ldr	r0, [r7, #20]
 80066e6:	f001 fd2f 	bl	8008148 <vPortFree>
 80066ea:	e001      	b.n	80066f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d017      	beq.n	8006726 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	2300      	movs	r3, #0
 8006702:	9303      	str	r3, [sp, #12]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	9302      	str	r3, [sp, #8]
 8006708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f80e 	bl	8006736 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800671a:	69f8      	ldr	r0, [r7, #28]
 800671c:	f000 f89c 	bl	8006858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006720:	2301      	movs	r3, #1
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	e002      	b.n	800672c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800672a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800672c:	69bb      	ldr	r3, [r7, #24]
	}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b088      	sub	sp, #32
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	461a      	mov	r2, r3
 800674e:	21a5      	movs	r1, #165	@ 0xa5
 8006750:	f009 fa6e 	bl	800fc30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800675e:	3b01      	subs	r3, #1
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f023 0307 	bic.w	r3, r3, #7
 800676c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	617b      	str	r3, [r7, #20]
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01f      	beq.n	80067d6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	e012      	b.n	80067c2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	4413      	add	r3, r2
 80067a2:	7819      	ldrb	r1, [r3, #0]
 80067a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	3334      	adds	r3, #52	@ 0x34
 80067ac:	460a      	mov	r2, r1
 80067ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d006      	beq.n	80067ca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2b0f      	cmp	r3, #15
 80067c6:	d9e9      	bls.n	800679c <prvInitialiseNewTask+0x66>
 80067c8:	e000      	b.n	80067cc <prvInitialiseNewTask+0x96>
			{
				break;
 80067ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067d4:	e003      	b.n	80067de <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e0:	2b37      	cmp	r3, #55	@ 0x37
 80067e2:	d901      	bls.n	80067e8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067e4:	2337      	movs	r3, #55	@ 0x37
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	3304      	adds	r3, #4
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff f966 	bl	8005ad0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	3318      	adds	r3, #24
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff f961 	bl	8005ad0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006822:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	2200      	movs	r2, #0
 8006828:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	68f9      	ldr	r1, [r7, #12]
 8006836:	69b8      	ldr	r0, [r7, #24]
 8006838:	f001 f966 	bl	8007b08 <pxPortInitialiseStack>
 800683c:	4602      	mov	r2, r0
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800684c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800684e:	bf00      	nop
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006860:	f001 fa82 	bl	8007d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006864:	4b2d      	ldr	r3, [pc, #180]	@ (800691c <prvAddNewTaskToReadyList+0xc4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	4a2c      	ldr	r2, [pc, #176]	@ (800691c <prvAddNewTaskToReadyList+0xc4>)
 800686c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800686e:	4b2c      	ldr	r3, [pc, #176]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006876:	4a2a      	ldr	r2, [pc, #168]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800687c:	4b27      	ldr	r3, [pc, #156]	@ (800691c <prvAddNewTaskToReadyList+0xc4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d110      	bne.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006884:	f000 fc46 	bl	8007114 <prvInitialiseTaskLists>
 8006888:	e00d      	b.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800688a:	4b26      	ldr	r3, [pc, #152]	@ (8006924 <prvAddNewTaskToReadyList+0xcc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006892:	4b23      	ldr	r3, [pc, #140]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	429a      	cmp	r2, r3
 800689e:	d802      	bhi.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068a6:	4b20      	ldr	r3, [pc, #128]	@ (8006928 <prvAddNewTaskToReadyList+0xd0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006928 <prvAddNewTaskToReadyList+0xd0>)
 80068ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <prvAddNewTaskToReadyList+0xd0>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068bc:	4b1b      	ldr	r3, [pc, #108]	@ (800692c <prvAddNewTaskToReadyList+0xd4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <prvAddNewTaskToReadyList+0x74>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	4a18      	ldr	r2, [pc, #96]	@ (800692c <prvAddNewTaskToReadyList+0xd4>)
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4a15      	ldr	r2, [pc, #84]	@ (8006930 <prvAddNewTaskToReadyList+0xd8>)
 80068da:	441a      	add	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f7ff f901 	bl	8005aea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068e8:	f001 fa70 	bl	8007dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006924 <prvAddNewTaskToReadyList+0xcc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	429a      	cmp	r2, r3
 8006900:	d207      	bcs.n	8006912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006902:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <prvAddNewTaskToReadyList+0xdc>)
 8006904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200051dc 	.word	0x200051dc
 8006920:	20004d08 	.word	0x20004d08
 8006924:	200051e8 	.word	0x200051e8
 8006928:	200051f8 	.word	0x200051f8
 800692c:	200051e4 	.word	0x200051e4
 8006930:	20004d0c 	.word	0x20004d0c
 8006934:	e000ed04 	.word	0xe000ed04

08006938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800694a:	4b14      	ldr	r3, [pc, #80]	@ (800699c <vTaskDelay+0x64>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <vTaskDelay+0x32>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60bb      	str	r3, [r7, #8]
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800696a:	f000 f883 	bl	8006a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800696e:	2100      	movs	r1, #0
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fd1b 	bl	80073ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006976:	f000 f88b 	bl	8006a90 <xTaskResumeAll>
 800697a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d107      	bne.n	8006992 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006982:	4b07      	ldr	r3, [pc, #28]	@ (80069a0 <vTaskDelay+0x68>)
 8006984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20005204 	.word	0x20005204
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	@ 0x28
 80069a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069b2:	463a      	mov	r2, r7
 80069b4:	1d39      	adds	r1, r7, #4
 80069b6:	f107 0308 	add.w	r3, r7, #8
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff f834 	bl	8005a28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	9202      	str	r2, [sp, #8]
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	2300      	movs	r3, #0
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2300      	movs	r3, #0
 80069d0:	460a      	mov	r2, r1
 80069d2:	4922      	ldr	r1, [pc, #136]	@ (8006a5c <vTaskStartScheduler+0xb8>)
 80069d4:	4822      	ldr	r0, [pc, #136]	@ (8006a60 <vTaskStartScheduler+0xbc>)
 80069d6:	f7ff fe09 	bl	80065ec <xTaskCreateStatic>
 80069da:	4603      	mov	r3, r0
 80069dc:	4a21      	ldr	r2, [pc, #132]	@ (8006a64 <vTaskStartScheduler+0xc0>)
 80069de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069e0:	4b20      	ldr	r3, [pc, #128]	@ (8006a64 <vTaskStartScheduler+0xc0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069e8:	2301      	movs	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e001      	b.n	80069f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d102      	bne.n	80069fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069f8:	f000 fd2c 	bl	8007454 <xTimerCreateTimerTask>
 80069fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d116      	bne.n	8006a32 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	613b      	str	r3, [r7, #16]
}
 8006a16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a18:	4b13      	ldr	r3, [pc, #76]	@ (8006a68 <vTaskStartScheduler+0xc4>)
 8006a1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a20:	4b12      	ldr	r3, [pc, #72]	@ (8006a6c <vTaskStartScheduler+0xc8>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a26:	4b12      	ldr	r3, [pc, #72]	@ (8006a70 <vTaskStartScheduler+0xcc>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a2c:	f001 f8f8 	bl	8007c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a30:	e00f      	b.n	8006a52 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a38:	d10b      	bne.n	8006a52 <vTaskStartScheduler+0xae>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	60fb      	str	r3, [r7, #12]
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	e7fd      	b.n	8006a4e <vTaskStartScheduler+0xaa>
}
 8006a52:	bf00      	nop
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08010ba4 	.word	0x08010ba4
 8006a60:	080070e5 	.word	0x080070e5
 8006a64:	20005200 	.word	0x20005200
 8006a68:	200051fc 	.word	0x200051fc
 8006a6c:	200051e8 	.word	0x200051e8
 8006a70:	200051e0 	.word	0x200051e0

08006a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a78:	4b04      	ldr	r3, [pc, #16]	@ (8006a8c <vTaskSuspendAll+0x18>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	4a03      	ldr	r2, [pc, #12]	@ (8006a8c <vTaskSuspendAll+0x18>)
 8006a80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20005204 	.word	0x20005204

08006a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a9e:	4b42      	ldr	r3, [pc, #264]	@ (8006ba8 <xTaskResumeAll+0x118>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10b      	bne.n	8006abe <xTaskResumeAll+0x2e>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	603b      	str	r3, [r7, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	e7fd      	b.n	8006aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006abe:	f001 f953 	bl	8007d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ac2:	4b39      	ldr	r3, [pc, #228]	@ (8006ba8 <xTaskResumeAll+0x118>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	4a37      	ldr	r2, [pc, #220]	@ (8006ba8 <xTaskResumeAll+0x118>)
 8006aca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006acc:	4b36      	ldr	r3, [pc, #216]	@ (8006ba8 <xTaskResumeAll+0x118>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d162      	bne.n	8006b9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ad4:	4b35      	ldr	r3, [pc, #212]	@ (8006bac <xTaskResumeAll+0x11c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d05e      	beq.n	8006b9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006adc:	e02f      	b.n	8006b3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ade:	4b34      	ldr	r3, [pc, #208]	@ (8006bb0 <xTaskResumeAll+0x120>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3318      	adds	r3, #24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff f85a 	bl	8005ba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff f855 	bl	8005ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afe:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb4 <xTaskResumeAll+0x124>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d903      	bls.n	8006b0e <xTaskResumeAll+0x7e>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bb4 <xTaskResumeAll+0x124>)
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4a27      	ldr	r2, [pc, #156]	@ (8006bb8 <xTaskResumeAll+0x128>)
 8006b1c:	441a      	add	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f7fe ffe0 	bl	8005aea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2e:	4b23      	ldr	r3, [pc, #140]	@ (8006bbc <xTaskResumeAll+0x12c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d302      	bcc.n	8006b3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b38:	4b21      	ldr	r3, [pc, #132]	@ (8006bc0 <xTaskResumeAll+0x130>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb0 <xTaskResumeAll+0x120>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1cb      	bne.n	8006ade <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b4c:	f000 fb80 	bl	8007250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b50:	4b1c      	ldr	r3, [pc, #112]	@ (8006bc4 <xTaskResumeAll+0x134>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d010      	beq.n	8006b7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b5c:	f000 f846 	bl	8006bec <xTaskIncrementTick>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b66:	4b16      	ldr	r3, [pc, #88]	@ (8006bc0 <xTaskResumeAll+0x130>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f1      	bne.n	8006b5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006b78:	4b12      	ldr	r3, [pc, #72]	@ (8006bc4 <xTaskResumeAll+0x134>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b7e:	4b10      	ldr	r3, [pc, #64]	@ (8006bc0 <xTaskResumeAll+0x130>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b86:	2301      	movs	r3, #1
 8006b88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc8 <xTaskResumeAll+0x138>)
 8006b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b9a:	f001 f917 	bl	8007dcc <vPortExitCritical>

	return xAlreadyYielded;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20005204 	.word	0x20005204
 8006bac:	200051dc 	.word	0x200051dc
 8006bb0:	2000519c 	.word	0x2000519c
 8006bb4:	200051e4 	.word	0x200051e4
 8006bb8:	20004d0c 	.word	0x20004d0c
 8006bbc:	20004d08 	.word	0x20004d08
 8006bc0:	200051f0 	.word	0x200051f0
 8006bc4:	200051ec 	.word	0x200051ec
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bd2:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <xTaskGetTickCount+0x1c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bd8:	687b      	ldr	r3, [r7, #4]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	200051e0 	.word	0x200051e0

08006bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8006d34 <xTaskIncrementTick+0x148>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8090 	bne.w	8006d20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c00:	4b4d      	ldr	r3, [pc, #308]	@ (8006d38 <xTaskIncrementTick+0x14c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c08:	4a4b      	ldr	r2, [pc, #300]	@ (8006d38 <xTaskIncrementTick+0x14c>)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d121      	bne.n	8006c58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c14:	4b49      	ldr	r3, [pc, #292]	@ (8006d3c <xTaskIncrementTick+0x150>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	603b      	str	r3, [r7, #0]
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	e7fd      	b.n	8006c32 <xTaskIncrementTick+0x46>
 8006c36:	4b41      	ldr	r3, [pc, #260]	@ (8006d3c <xTaskIncrementTick+0x150>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	4b40      	ldr	r3, [pc, #256]	@ (8006d40 <xTaskIncrementTick+0x154>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3e      	ldr	r2, [pc, #248]	@ (8006d3c <xTaskIncrementTick+0x150>)
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4a3e      	ldr	r2, [pc, #248]	@ (8006d40 <xTaskIncrementTick+0x154>)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d44 <xTaskIncrementTick+0x158>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	4a3c      	ldr	r2, [pc, #240]	@ (8006d44 <xTaskIncrementTick+0x158>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	f000 fafc 	bl	8007250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c58:	4b3b      	ldr	r3, [pc, #236]	@ (8006d48 <xTaskIncrementTick+0x15c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d349      	bcc.n	8006cf6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c62:	4b36      	ldr	r3, [pc, #216]	@ (8006d3c <xTaskIncrementTick+0x150>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6c:	4b36      	ldr	r3, [pc, #216]	@ (8006d48 <xTaskIncrementTick+0x15c>)
 8006c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c72:	601a      	str	r2, [r3, #0]
					break;
 8006c74:	e03f      	b.n	8006cf6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c76:	4b31      	ldr	r3, [pc, #196]	@ (8006d3c <xTaskIncrementTick+0x150>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d203      	bcs.n	8006c96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8006d48 <xTaskIncrementTick+0x15c>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c94:	e02f      	b.n	8006cf6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe ff82 	bl	8005ba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	3318      	adds	r3, #24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe ff79 	bl	8005ba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb6:	4b25      	ldr	r3, [pc, #148]	@ (8006d4c <xTaskIncrementTick+0x160>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d903      	bls.n	8006cc6 <xTaskIncrementTick+0xda>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	4a22      	ldr	r2, [pc, #136]	@ (8006d4c <xTaskIncrementTick+0x160>)
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d50 <xTaskIncrementTick+0x164>)
 8006cd4:	441a      	add	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f7fe ff04 	bl	8005aea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d54 <xTaskIncrementTick+0x168>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d3b8      	bcc.n	8006c62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf4:	e7b5      	b.n	8006c62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cf6:	4b17      	ldr	r3, [pc, #92]	@ (8006d54 <xTaskIncrementTick+0x168>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfc:	4914      	ldr	r1, [pc, #80]	@ (8006d50 <xTaskIncrementTick+0x164>)
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d901      	bls.n	8006d12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d12:	4b11      	ldr	r3, [pc, #68]	@ (8006d58 <xTaskIncrementTick+0x16c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e004      	b.n	8006d2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d20:	4b0e      	ldr	r3, [pc, #56]	@ (8006d5c <xTaskIncrementTick+0x170>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a0d      	ldr	r2, [pc, #52]	@ (8006d5c <xTaskIncrementTick+0x170>)
 8006d28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d2a:	697b      	ldr	r3, [r7, #20]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20005204 	.word	0x20005204
 8006d38:	200051e0 	.word	0x200051e0
 8006d3c:	20005194 	.word	0x20005194
 8006d40:	20005198 	.word	0x20005198
 8006d44:	200051f4 	.word	0x200051f4
 8006d48:	200051fc 	.word	0x200051fc
 8006d4c:	200051e4 	.word	0x200051e4
 8006d50:	20004d0c 	.word	0x20004d0c
 8006d54:	20004d08 	.word	0x20004d08
 8006d58:	200051f0 	.word	0x200051f0
 8006d5c:	200051ec 	.word	0x200051ec

08006d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d66:	4b28      	ldr	r3, [pc, #160]	@ (8006e08 <vTaskSwitchContext+0xa8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d6e:	4b27      	ldr	r3, [pc, #156]	@ (8006e0c <vTaskSwitchContext+0xac>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d74:	e042      	b.n	8006dfc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006d76:	4b25      	ldr	r3, [pc, #148]	@ (8006e0c <vTaskSwitchContext+0xac>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7c:	4b24      	ldr	r3, [pc, #144]	@ (8006e10 <vTaskSwitchContext+0xb0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	e011      	b.n	8006da8 <vTaskSwitchContext+0x48>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <vTaskSwitchContext+0x42>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	607b      	str	r3, [r7, #4]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <vTaskSwitchContext+0x3e>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	491a      	ldr	r1, [pc, #104]	@ (8006e14 <vTaskSwitchContext+0xb4>)
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0e3      	beq.n	8006d84 <vTaskSwitchContext+0x24>
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a13      	ldr	r2, [pc, #76]	@ (8006e14 <vTaskSwitchContext+0xb4>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d104      	bne.n	8006dec <vTaskSwitchContext+0x8c>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	4a09      	ldr	r2, [pc, #36]	@ (8006e18 <vTaskSwitchContext+0xb8>)
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	4a06      	ldr	r2, [pc, #24]	@ (8006e10 <vTaskSwitchContext+0xb0>)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6013      	str	r3, [r2, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	20005204 	.word	0x20005204
 8006e0c:	200051f0 	.word	0x200051f0
 8006e10:	200051e4 	.word	0x200051e4
 8006e14:	20004d0c 	.word	0x20004d0c
 8006e18:	20004d08 	.word	0x20004d08

08006e1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	60fb      	str	r3, [r7, #12]
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e44:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <vTaskPlaceOnEventList+0x48>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3318      	adds	r3, #24
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fe fe70 	bl	8005b32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e52:	2101      	movs	r1, #1
 8006e54:	6838      	ldr	r0, [r7, #0]
 8006e56:	f000 faa9 	bl	80073ac <prvAddCurrentTaskToDelayedList>
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20004d08 	.word	0x20004d08

08006e68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	617b      	str	r3, [r7, #20]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e92:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <vTaskPlaceOnEventListRestricted+0x54>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3318      	adds	r3, #24
 8006e98:	4619      	mov	r1, r3
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f7fe fe25 	bl	8005aea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eaa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	68b8      	ldr	r0, [r7, #8]
 8006eb0:	f000 fa7c 	bl	80073ac <prvAddCurrentTaskToDelayedList>
	}
 8006eb4:	bf00      	nop
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20004d08 	.word	0x20004d08

08006ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60fb      	str	r3, [r7, #12]
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	e7fd      	b.n	8006eea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3318      	adds	r3, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fe56 	bl	8005ba4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f70 <xTaskRemoveFromEventList+0xb0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d11d      	bne.n	8006f3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fe4d 	bl	8005ba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0e:	4b19      	ldr	r3, [pc, #100]	@ (8006f74 <xTaskRemoveFromEventList+0xb4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d903      	bls.n	8006f1e <xTaskRemoveFromEventList+0x5e>
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	4a16      	ldr	r2, [pc, #88]	@ (8006f74 <xTaskRemoveFromEventList+0xb4>)
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4a13      	ldr	r2, [pc, #76]	@ (8006f78 <xTaskRemoveFromEventList+0xb8>)
 8006f2c:	441a      	add	r2, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f7fe fdd8 	bl	8005aea <vListInsertEnd>
 8006f3a:	e005      	b.n	8006f48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	3318      	adds	r3, #24
 8006f40:	4619      	mov	r1, r3
 8006f42:	480e      	ldr	r0, [pc, #56]	@ (8006f7c <xTaskRemoveFromEventList+0xbc>)
 8006f44:	f7fe fdd1 	bl	8005aea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <xTaskRemoveFromEventList+0xc0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d905      	bls.n	8006f62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f56:	2301      	movs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f84 <xTaskRemoveFromEventList+0xc4>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e001      	b.n	8006f66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f66:	697b      	ldr	r3, [r7, #20]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20005204 	.word	0x20005204
 8006f74:	200051e4 	.word	0x200051e4
 8006f78:	20004d0c 	.word	0x20004d0c
 8006f7c:	2000519c 	.word	0x2000519c
 8006f80:	20004d08 	.word	0x20004d08
 8006f84:	200051f0 	.word	0x200051f0

08006f88 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <vTaskSetTimeOutState+0x26>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006fae:	f000 fedb 	bl	8007d68 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fb2:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <vTaskSetTimeOutState+0x48>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006fba:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <vTaskSetTimeOutState+0x4c>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006fc2:	f000 ff03 	bl	8007dcc <vPortExitCritical>
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200051f4 	.word	0x200051f4
 8006fd4:	200051e0 	.word	0x200051e0

08006fd8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fe0:	4b06      	ldr	r3, [pc, #24]	@ (8006ffc <vTaskInternalSetTimeOutState+0x24>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fe8:	4b05      	ldr	r3, [pc, #20]	@ (8007000 <vTaskInternalSetTimeOutState+0x28>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	605a      	str	r2, [r3, #4]
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	200051f4 	.word	0x200051f4
 8007000:	200051e0 	.word	0x200051e0

08007004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10b      	bne.n	800702c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	613b      	str	r3, [r7, #16]
}
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	e7fd      	b.n	8007028 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	60fb      	str	r3, [r7, #12]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800704a:	f000 fe8d 	bl	8007d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800704e:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <xTaskCheckForTimeOut+0xc0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007066:	d102      	bne.n	800706e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	e023      	b.n	80070b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b15      	ldr	r3, [pc, #84]	@ (80070c8 <xTaskCheckForTimeOut+0xc4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d007      	beq.n	800708a <xTaskCheckForTimeOut+0x86>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	d302      	bcc.n	800708a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	e015      	b.n	80070b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	429a      	cmp	r2, r3
 8007092:	d20b      	bcs.n	80070ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ff99 	bl	8006fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	e004      	b.n	80070b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070b2:	2301      	movs	r3, #1
 80070b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070b6:	f000 fe89 	bl	8007dcc <vPortExitCritical>

	return xReturn;
 80070ba:	69fb      	ldr	r3, [r7, #28]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200051e0 	.word	0x200051e0
 80070c8:	200051f4 	.word	0x200051f4

080070cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070d0:	4b03      	ldr	r3, [pc, #12]	@ (80070e0 <vTaskMissedYield+0x14>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
}
 80070d6:	bf00      	nop
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	200051f0 	.word	0x200051f0

080070e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070ec:	f000 f852 	bl	8007194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <prvIdleTask+0x28>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d9f9      	bls.n	80070ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <prvIdleTask+0x2c>)
 80070fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007108:	e7f0      	b.n	80070ec <prvIdleTask+0x8>
 800710a:	bf00      	nop
 800710c:	20004d0c 	.word	0x20004d0c
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800711a:	2300      	movs	r3, #0
 800711c:	607b      	str	r3, [r7, #4]
 800711e:	e00c      	b.n	800713a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4a12      	ldr	r2, [pc, #72]	@ (8007174 <prvInitialiseTaskLists+0x60>)
 800712c:	4413      	add	r3, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fcae 	bl	8005a90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3301      	adds	r3, #1
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b37      	cmp	r3, #55	@ 0x37
 800713e:	d9ef      	bls.n	8007120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007140:	480d      	ldr	r0, [pc, #52]	@ (8007178 <prvInitialiseTaskLists+0x64>)
 8007142:	f7fe fca5 	bl	8005a90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007146:	480d      	ldr	r0, [pc, #52]	@ (800717c <prvInitialiseTaskLists+0x68>)
 8007148:	f7fe fca2 	bl	8005a90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800714c:	480c      	ldr	r0, [pc, #48]	@ (8007180 <prvInitialiseTaskLists+0x6c>)
 800714e:	f7fe fc9f 	bl	8005a90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007152:	480c      	ldr	r0, [pc, #48]	@ (8007184 <prvInitialiseTaskLists+0x70>)
 8007154:	f7fe fc9c 	bl	8005a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007158:	480b      	ldr	r0, [pc, #44]	@ (8007188 <prvInitialiseTaskLists+0x74>)
 800715a:	f7fe fc99 	bl	8005a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800715e:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <prvInitialiseTaskLists+0x78>)
 8007160:	4a05      	ldr	r2, [pc, #20]	@ (8007178 <prvInitialiseTaskLists+0x64>)
 8007162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007164:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <prvInitialiseTaskLists+0x7c>)
 8007166:	4a05      	ldr	r2, [pc, #20]	@ (800717c <prvInitialiseTaskLists+0x68>)
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20004d0c 	.word	0x20004d0c
 8007178:	2000516c 	.word	0x2000516c
 800717c:	20005180 	.word	0x20005180
 8007180:	2000519c 	.word	0x2000519c
 8007184:	200051b0 	.word	0x200051b0
 8007188:	200051c8 	.word	0x200051c8
 800718c:	20005194 	.word	0x20005194
 8007190:	20005198 	.word	0x20005198

08007194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800719a:	e019      	b.n	80071d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800719c:	f000 fde4 	bl	8007d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a0:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <prvCheckTasksWaitingTermination+0x50>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fcf9 	bl	8005ba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071b2:	4b0d      	ldr	r3, [pc, #52]	@ (80071e8 <prvCheckTasksWaitingTermination+0x54>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	4a0b      	ldr	r2, [pc, #44]	@ (80071e8 <prvCheckTasksWaitingTermination+0x54>)
 80071ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	@ (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	4a0a      	ldr	r2, [pc, #40]	@ (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071c6:	f000 fe01 	bl	8007dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f810 	bl	80071f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d0:	4b06      	ldr	r3, [pc, #24]	@ (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e1      	bne.n	800719c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200051b0 	.word	0x200051b0
 80071e8:	200051dc 	.word	0x200051dc
 80071ec:	200051c4 	.word	0x200051c4

080071f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d108      	bne.n	8007214 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007206:	4618      	mov	r0, r3
 8007208:	f000 ff9e 	bl	8008148 <vPortFree>
				vPortFree( pxTCB );
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 ff9b 	bl	8008148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007212:	e019      	b.n	8007248 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800721a:	2b01      	cmp	r3, #1
 800721c:	d103      	bne.n	8007226 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 ff92 	bl	8008148 <vPortFree>
	}
 8007224:	e010      	b.n	8007248 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800722c:	2b02      	cmp	r3, #2
 800722e:	d00b      	beq.n	8007248 <prvDeleteTCB+0x58>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	60fb      	str	r3, [r7, #12]
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	e7fd      	b.n	8007244 <prvDeleteTCB+0x54>
	}
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <prvResetNextTaskUnblockTime+0x38>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d104      	bne.n	800726a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007260:	4b0a      	ldr	r3, [pc, #40]	@ (800728c <prvResetNextTaskUnblockTime+0x3c>)
 8007262:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007268:	e008      	b.n	800727c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726a:	4b07      	ldr	r3, [pc, #28]	@ (8007288 <prvResetNextTaskUnblockTime+0x38>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	4a04      	ldr	r2, [pc, #16]	@ (800728c <prvResetNextTaskUnblockTime+0x3c>)
 800727a:	6013      	str	r3, [r2, #0]
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	20005194 	.word	0x20005194
 800728c:	200051fc 	.word	0x200051fc

08007290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007296:	4b0b      	ldr	r3, [pc, #44]	@ (80072c4 <xTaskGetSchedulerState+0x34>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d102      	bne.n	80072a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800729e:	2301      	movs	r3, #1
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	e008      	b.n	80072b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a4:	4b08      	ldr	r3, [pc, #32]	@ (80072c8 <xTaskGetSchedulerState+0x38>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072ac:	2302      	movs	r3, #2
 80072ae:	607b      	str	r3, [r7, #4]
 80072b0:	e001      	b.n	80072b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072b6:	687b      	ldr	r3, [r7, #4]
	}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	200051e8 	.word	0x200051e8
 80072c8:	20005204 	.word	0x20005204

080072cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d058      	beq.n	8007394 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072e2:	4b2f      	ldr	r3, [pc, #188]	@ (80073a0 <xTaskPriorityDisinherit+0xd4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d00b      	beq.n	8007304 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	60fb      	str	r3, [r7, #12]
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	e7fd      	b.n	8007300 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10b      	bne.n	8007324 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	60bb      	str	r3, [r7, #8]
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007328:	1e5a      	subs	r2, r3, #1
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007336:	429a      	cmp	r2, r3
 8007338:	d02c      	beq.n	8007394 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733e:	2b00      	cmp	r3, #0
 8007340:	d128      	bne.n	8007394 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3304      	adds	r3, #4
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe fc2c 	bl	8005ba4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007364:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <xTaskPriorityDisinherit+0xd8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d903      	bls.n	8007374 <xTaskPriorityDisinherit+0xa8>
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	4a0c      	ldr	r2, [pc, #48]	@ (80073a4 <xTaskPriorityDisinherit+0xd8>)
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4a09      	ldr	r2, [pc, #36]	@ (80073a8 <xTaskPriorityDisinherit+0xdc>)
 8007382:	441a      	add	r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	3304      	adds	r3, #4
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f7fe fbad 	bl	8005aea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007394:	697b      	ldr	r3, [r7, #20]
	}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20004d08 	.word	0x20004d08
 80073a4:	200051e4 	.word	0x200051e4
 80073a8:	20004d0c 	.word	0x20004d0c

080073ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073b6:	4b21      	ldr	r3, [pc, #132]	@ (800743c <prvAddCurrentTaskToDelayedList+0x90>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073bc:	4b20      	ldr	r3, [pc, #128]	@ (8007440 <prvAddCurrentTaskToDelayedList+0x94>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fbee 	bl	8005ba4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073ce:	d10a      	bne.n	80073e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <prvAddCurrentTaskToDelayedList+0x94>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3304      	adds	r3, #4
 80073dc:	4619      	mov	r1, r3
 80073de:	4819      	ldr	r0, [pc, #100]	@ (8007444 <prvAddCurrentTaskToDelayedList+0x98>)
 80073e0:	f7fe fb83 	bl	8005aea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073e4:	e026      	b.n	8007434 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4413      	add	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073ee:	4b14      	ldr	r3, [pc, #80]	@ (8007440 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d209      	bcs.n	8007412 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073fe:	4b12      	ldr	r3, [pc, #72]	@ (8007448 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4b0f      	ldr	r3, [pc, #60]	@ (8007440 <prvAddCurrentTaskToDelayedList+0x94>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7fe fb91 	bl	8005b32 <vListInsert>
}
 8007410:	e010      	b.n	8007434 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007412:	4b0e      	ldr	r3, [pc, #56]	@ (800744c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <prvAddCurrentTaskToDelayedList+0x94>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3304      	adds	r3, #4
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f7fe fb87 	bl	8005b32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007424:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	d202      	bcs.n	8007434 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800742e:	4a08      	ldr	r2, [pc, #32]	@ (8007450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6013      	str	r3, [r2, #0]
}
 8007434:	bf00      	nop
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	200051e0 	.word	0x200051e0
 8007440:	20004d08 	.word	0x20004d08
 8007444:	200051c8 	.word	0x200051c8
 8007448:	20005198 	.word	0x20005198
 800744c:	20005194 	.word	0x20005194
 8007450:	200051fc 	.word	0x200051fc

08007454 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	@ 0x28
 8007458:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800745e:	f000 fb13 	bl	8007a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007462:	4b1d      	ldr	r3, [pc, #116]	@ (80074d8 <xTimerCreateTimerTask+0x84>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d021      	beq.n	80074ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007472:	1d3a      	adds	r2, r7, #4
 8007474:	f107 0108 	add.w	r1, r7, #8
 8007478:	f107 030c 	add.w	r3, r7, #12
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe faed 	bl	8005a5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	9202      	str	r2, [sp, #8]
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	2302      	movs	r3, #2
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	2300      	movs	r3, #0
 8007492:	460a      	mov	r2, r1
 8007494:	4911      	ldr	r1, [pc, #68]	@ (80074dc <xTimerCreateTimerTask+0x88>)
 8007496:	4812      	ldr	r0, [pc, #72]	@ (80074e0 <xTimerCreateTimerTask+0x8c>)
 8007498:	f7ff f8a8 	bl	80065ec <xTaskCreateStatic>
 800749c:	4603      	mov	r3, r0
 800749e:	4a11      	ldr	r2, [pc, #68]	@ (80074e4 <xTimerCreateTimerTask+0x90>)
 80074a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074a2:	4b10      	ldr	r3, [pc, #64]	@ (80074e4 <xTimerCreateTimerTask+0x90>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074aa:	2301      	movs	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10b      	bne.n	80074cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	613b      	str	r3, [r7, #16]
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	e7fd      	b.n	80074c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074cc:	697b      	ldr	r3, [r7, #20]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20005238 	.word	0x20005238
 80074dc:	08010bac 	.word	0x08010bac
 80074e0:	08007621 	.word	0x08007621
 80074e4:	2000523c 	.word	0x2000523c

080074e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08a      	sub	sp, #40	@ 0x28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10b      	bne.n	8007518 <xTimerGenericCommand+0x30>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	623b      	str	r3, [r7, #32]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007518:	4b19      	ldr	r3, [pc, #100]	@ (8007580 <xTimerGenericCommand+0x98>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d02a      	beq.n	8007576 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b05      	cmp	r3, #5
 8007530:	dc18      	bgt.n	8007564 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007532:	f7ff fead 	bl	8007290 <xTaskGetSchedulerState>
 8007536:	4603      	mov	r3, r0
 8007538:	2b02      	cmp	r3, #2
 800753a:	d109      	bne.n	8007550 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800753c:	4b10      	ldr	r3, [pc, #64]	@ (8007580 <xTimerGenericCommand+0x98>)
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	f107 0110 	add.w	r1, r7, #16
 8007544:	2300      	movs	r3, #0
 8007546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007548:	f7fe fc60 	bl	8005e0c <xQueueGenericSend>
 800754c:	6278      	str	r0, [r7, #36]	@ 0x24
 800754e:	e012      	b.n	8007576 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007550:	4b0b      	ldr	r3, [pc, #44]	@ (8007580 <xTimerGenericCommand+0x98>)
 8007552:	6818      	ldr	r0, [r3, #0]
 8007554:	f107 0110 	add.w	r1, r7, #16
 8007558:	2300      	movs	r3, #0
 800755a:	2200      	movs	r2, #0
 800755c:	f7fe fc56 	bl	8005e0c <xQueueGenericSend>
 8007560:	6278      	str	r0, [r7, #36]	@ 0x24
 8007562:	e008      	b.n	8007576 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007564:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <xTimerGenericCommand+0x98>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	f107 0110 	add.w	r1, r7, #16
 800756c:	2300      	movs	r3, #0
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	f7fe fd4e 	bl	8006010 <xQueueGenericSendFromISR>
 8007574:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	@ 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20005238 	.word	0x20005238

08007584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af02      	add	r7, sp, #8
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800758e:	4b23      	ldr	r3, [pc, #140]	@ (800761c <prvProcessExpiredTimer+0x98>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	3304      	adds	r3, #4
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe fb01 	bl	8005ba4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d023      	beq.n	80075f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	699a      	ldr	r2, [r3, #24]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	18d1      	adds	r1, r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	6978      	ldr	r0, [r7, #20]
 80075be:	f000 f8d5 	bl	800776c <prvInsertTimerInActiveList>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d020      	beq.n	800760a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075c8:	2300      	movs	r3, #0
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2300      	movs	r3, #0
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	2100      	movs	r1, #0
 80075d2:	6978      	ldr	r0, [r7, #20]
 80075d4:	f7ff ff88 	bl	80074e8 <xTimerGenericCommand>
 80075d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d114      	bne.n	800760a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	e7fd      	b.n	80075f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	4798      	blx	r3
}
 8007612:	bf00      	nop
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20005230 	.word	0x20005230

08007620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007628:	f107 0308 	add.w	r3, r7, #8
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f859 	bl	80076e4 <prvGetNextExpireTime>
 8007632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4619      	mov	r1, r3
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f805 	bl	8007648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800763e:	f000 f8d7 	bl	80077f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007642:	bf00      	nop
 8007644:	e7f0      	b.n	8007628 <prvTimerTask+0x8>
	...

08007648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007652:	f7ff fa0f 	bl	8006a74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007656:	f107 0308 	add.w	r3, r7, #8
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f866 	bl	800772c <prvSampleTimeNow>
 8007660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d130      	bne.n	80076ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <prvProcessTimerOrBlockTask+0x3c>
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	429a      	cmp	r2, r3
 8007674:	d806      	bhi.n	8007684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007676:	f7ff fa0b 	bl	8006a90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff ff81 	bl	8007584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007682:	e024      	b.n	80076ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d008      	beq.n	800769c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800768a:	4b13      	ldr	r3, [pc, #76]	@ (80076d8 <prvProcessTimerOrBlockTask+0x90>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <prvProcessTimerOrBlockTask+0x50>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <prvProcessTimerOrBlockTask+0x52>
 8007698:	2300      	movs	r3, #0
 800769a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800769c:	4b0f      	ldr	r3, [pc, #60]	@ (80076dc <prvProcessTimerOrBlockTask+0x94>)
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7fe ff6b 	bl	8006584 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076ae:	f7ff f9ef 	bl	8006a90 <xTaskResumeAll>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076b8:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <prvProcessTimerOrBlockTask+0x98>)
 80076ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	f3bf 8f6f 	isb	sy
}
 80076c8:	e001      	b.n	80076ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ca:	f7ff f9e1 	bl	8006a90 <xTaskResumeAll>
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20005234 	.word	0x20005234
 80076dc:	20005238 	.word	0x20005238
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007728 <prvGetNextExpireTime+0x44>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <prvGetNextExpireTime+0x16>
 80076f6:	2201      	movs	r2, #1
 80076f8:	e000      	b.n	80076fc <prvGetNextExpireTime+0x18>
 80076fa:	2200      	movs	r2, #0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d105      	bne.n	8007714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007708:	4b07      	ldr	r3, [pc, #28]	@ (8007728 <prvGetNextExpireTime+0x44>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	e001      	b.n	8007718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007718:	68fb      	ldr	r3, [r7, #12]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20005230 	.word	0x20005230

0800772c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007734:	f7ff fa4a 	bl	8006bcc <xTaskGetTickCount>
 8007738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800773a:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <prvSampleTimeNow+0x3c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	d205      	bcs.n	8007750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007744:	f000 f93a 	bl	80079bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e002      	b.n	8007756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007756:	4a04      	ldr	r2, [pc, #16]	@ (8007768 <prvSampleTimeNow+0x3c>)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800775c:	68fb      	ldr	r3, [r7, #12]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20005240 	.word	0x20005240

0800776c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	429a      	cmp	r2, r3
 8007790:	d812      	bhi.n	80077b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077a0:	2301      	movs	r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e01b      	b.n	80077de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077a6:	4b10      	ldr	r3, [pc, #64]	@ (80077e8 <prvInsertTimerInActiveList+0x7c>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe f9be 	bl	8005b32 <vListInsert>
 80077b6:	e012      	b.n	80077de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d206      	bcs.n	80077ce <prvInsertTimerInActiveList+0x62>
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d302      	bcc.n	80077ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077c8:	2301      	movs	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e007      	b.n	80077de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ce:	4b07      	ldr	r3, [pc, #28]	@ (80077ec <prvInsertTimerInActiveList+0x80>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4610      	mov	r0, r2
 80077da:	f7fe f9aa 	bl	8005b32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077de:	697b      	ldr	r3, [r7, #20]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20005234 	.word	0x20005234
 80077ec:	20005230 	.word	0x20005230

080077f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08e      	sub	sp, #56	@ 0x38
 80077f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077f6:	e0ce      	b.n	8007996 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da19      	bge.n	8007832 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077fe:	1d3b      	adds	r3, r7, #4
 8007800:	3304      	adds	r3, #4
 8007802:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	61fb      	str	r3, [r7, #28]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007828:	6850      	ldr	r0, [r2, #4]
 800782a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782c:	6892      	ldr	r2, [r2, #8]
 800782e:	4611      	mov	r1, r2
 8007830:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f2c0 80ae 	blt.w	8007996 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800783e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	3304      	adds	r3, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe f9aa 	bl	8005ba4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007850:	463b      	mov	r3, r7
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff ff6a 	bl	800772c <prvSampleTimeNow>
 8007858:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b09      	cmp	r3, #9
 800785e:	f200 8097 	bhi.w	8007990 <prvProcessReceivedCommands+0x1a0>
 8007862:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <prvProcessReceivedCommands+0x78>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007891 	.word	0x08007891
 800786c:	08007891 	.word	0x08007891
 8007870:	08007891 	.word	0x08007891
 8007874:	08007907 	.word	0x08007907
 8007878:	0800791b 	.word	0x0800791b
 800787c:	08007967 	.word	0x08007967
 8007880:	08007891 	.word	0x08007891
 8007884:	08007891 	.word	0x08007891
 8007888:	08007907 	.word	0x08007907
 800788c:	0800791b 	.word	0x0800791b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	b2da      	uxtb	r2, r3
 800789c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	18d1      	adds	r1, r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078b0:	f7ff ff5c 	bl	800776c <prvInsertTimerInActiveList>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d06c      	beq.n	8007994 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d061      	beq.n	8007994 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	441a      	add	r2, r3
 80078d8:	2300      	movs	r3, #0
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2300      	movs	r3, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078e2:	f7ff fe01 	bl	80074e8 <xTimerGenericCommand>
 80078e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d152      	bne.n	8007994 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	61bb      	str	r3, [r7, #24]
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	e7fd      	b.n	8007902 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	b2da      	uxtb	r2, r3
 8007912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007914:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007918:	e03d      	b.n	8007996 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800791a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	617b      	str	r3, [r7, #20]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	18d1      	adds	r1, r2, r3
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800795e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007960:	f7ff ff04 	bl	800776c <prvInsertTimerInActiveList>
					break;
 8007964:	e017      	b.n	8007996 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007976:	f000 fbe7 	bl	8008148 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800797a:	e00c      	b.n	8007996 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800798e:	e002      	b.n	8007996 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <prvProcessReceivedCommands+0x1a6>
					break;
 8007994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007996:	4b08      	ldr	r3, [pc, #32]	@ (80079b8 <prvProcessReceivedCommands+0x1c8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	1d39      	adds	r1, r7, #4
 800799c:	2200      	movs	r2, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fbd4 	bl	800614c <xQueueReceive>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f47f af26 	bne.w	80077f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	3730      	adds	r7, #48	@ 0x30
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20005238 	.word	0x20005238

080079bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079c2:	e049      	b.n	8007a58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007a80 <prvSwitchTimerLists+0xc4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007a80 <prvSwitchTimerLists+0xc4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3304      	adds	r3, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe f8e1 	bl	8005ba4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d02f      	beq.n	8007a58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d90e      	bls.n	8007a28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a16:	4b1a      	ldr	r3, [pc, #104]	@ (8007a80 <prvSwitchTimerLists+0xc4>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f7fe f886 	bl	8005b32 <vListInsert>
 8007a26:	e017      	b.n	8007a58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	2100      	movs	r1, #0
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fd58 	bl	80074e8 <xTimerGenericCommand>
 8007a38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10b      	bne.n	8007a58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	603b      	str	r3, [r7, #0]
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a58:	4b09      	ldr	r3, [pc, #36]	@ (8007a80 <prvSwitchTimerLists+0xc4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1b0      	bne.n	80079c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a62:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <prvSwitchTimerLists+0xc4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a68:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <prvSwitchTimerLists+0xc8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a04      	ldr	r2, [pc, #16]	@ (8007a80 <prvSwitchTimerLists+0xc4>)
 8007a6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a70:	4a04      	ldr	r2, [pc, #16]	@ (8007a84 <prvSwitchTimerLists+0xc8>)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	6013      	str	r3, [r2, #0]
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20005230 	.word	0x20005230
 8007a84:	20005234 	.word	0x20005234

08007a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a8e:	f000 f96b 	bl	8007d68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a92:	4b15      	ldr	r3, [pc, #84]	@ (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d120      	bne.n	8007adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a9a:	4814      	ldr	r0, [pc, #80]	@ (8007aec <prvCheckForValidListAndQueue+0x64>)
 8007a9c:	f7fd fff8 	bl	8005a90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007aa0:	4813      	ldr	r0, [pc, #76]	@ (8007af0 <prvCheckForValidListAndQueue+0x68>)
 8007aa2:	f7fd fff5 	bl	8005a90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007aa6:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <prvCheckForValidListAndQueue+0x6c>)
 8007aa8:	4a10      	ldr	r2, [pc, #64]	@ (8007aec <prvCheckForValidListAndQueue+0x64>)
 8007aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007aac:	4b12      	ldr	r3, [pc, #72]	@ (8007af8 <prvCheckForValidListAndQueue+0x70>)
 8007aae:	4a10      	ldr	r2, [pc, #64]	@ (8007af0 <prvCheckForValidListAndQueue+0x68>)
 8007ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4b11      	ldr	r3, [pc, #68]	@ (8007afc <prvCheckForValidListAndQueue+0x74>)
 8007ab8:	4a11      	ldr	r2, [pc, #68]	@ (8007b00 <prvCheckForValidListAndQueue+0x78>)
 8007aba:	2110      	movs	r1, #16
 8007abc:	200a      	movs	r0, #10
 8007abe:	f7fe f905 	bl	8005ccc <xQueueGenericCreateStatic>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4a08      	ldr	r2, [pc, #32]	@ (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ac8:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ad0:	4b05      	ldr	r3, [pc, #20]	@ (8007ae8 <prvCheckForValidListAndQueue+0x60>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	490b      	ldr	r1, [pc, #44]	@ (8007b04 <prvCheckForValidListAndQueue+0x7c>)
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fd2a 	bl	8006530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007adc:	f000 f976 	bl	8007dcc <vPortExitCritical>
}
 8007ae0:	bf00      	nop
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20005238 	.word	0x20005238
 8007aec:	20005208 	.word	0x20005208
 8007af0:	2000521c 	.word	0x2000521c
 8007af4:	20005230 	.word	0x20005230
 8007af8:	20005234 	.word	0x20005234
 8007afc:	200052e4 	.word	0x200052e4
 8007b00:	20005244 	.word	0x20005244
 8007b04:	08010bb4 	.word	0x08010bb4

08007b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3b04      	subs	r3, #4
 8007b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f023 0201 	bic.w	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b38:	4a0c      	ldr	r2, [pc, #48]	@ (8007b6c <pxPortInitialiseStack+0x64>)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3b14      	subs	r3, #20
 8007b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b04      	subs	r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f06f 0202 	mvn.w	r2, #2
 8007b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3b20      	subs	r3, #32
 8007b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	08007b71 	.word	0x08007b71

08007b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b7a:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <prvTaskExitError+0x58>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b82:	d00b      	beq.n	8007b9c <prvTaskExitError+0x2c>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	bf00      	nop
 8007b9a:	e7fd      	b.n	8007b98 <prvTaskExitError+0x28>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	60bb      	str	r3, [r7, #8]
}
 8007bae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bb0:	bf00      	nop
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0fc      	beq.n	8007bb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20000010 	.word	0x20000010
 8007bcc:	00000000 	.word	0x00000000

08007bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bd0:	4b07      	ldr	r3, [pc, #28]	@ (8007bf0 <pxCurrentTCBConst2>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	6808      	ldr	r0, [r1, #0]
 8007bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	f380 8809 	msr	PSP, r0
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	4770      	bx	lr
 8007bec:	f3af 8000 	nop.w

08007bf0 <pxCurrentTCBConst2>:
 8007bf0:	20004d08 	.word	0x20004d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bf8:	4808      	ldr	r0, [pc, #32]	@ (8007c1c <prvPortStartFirstTask+0x24>)
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f380 8808 	msr	MSP, r0
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8814 	msr	CONTROL, r0
 8007c0a:	b662      	cpsie	i
 8007c0c:	b661      	cpsie	f
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	df00      	svc	0
 8007c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c1a:	bf00      	nop
 8007c1c:	e000ed08 	.word	0xe000ed08

08007c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c26:	4b47      	ldr	r3, [pc, #284]	@ (8007d44 <xPortStartScheduler+0x124>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a47      	ldr	r2, [pc, #284]	@ (8007d48 <xPortStartScheduler+0x128>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d10b      	bne.n	8007c48 <xPortStartScheduler+0x28>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c48:	4b3e      	ldr	r3, [pc, #248]	@ (8007d44 <xPortStartScheduler+0x124>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d4c <xPortStartScheduler+0x12c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d10b      	bne.n	8007c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	60fb      	str	r3, [r7, #12]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c6a:	4b39      	ldr	r3, [pc, #228]	@ (8007d50 <xPortStartScheduler+0x130>)
 8007c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	22ff      	movs	r2, #255	@ 0xff
 8007c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	4b31      	ldr	r3, [pc, #196]	@ (8007d54 <xPortStartScheduler+0x134>)
 8007c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c92:	4b31      	ldr	r3, [pc, #196]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007c94:	2207      	movs	r2, #7
 8007c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c98:	e009      	b.n	8007cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb6:	2b80      	cmp	r3, #128	@ 0x80
 8007cb8:	d0ef      	beq.n	8007c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cba:	4b27      	ldr	r3, [pc, #156]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f1c3 0307 	rsb	r3, r3, #7
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d00b      	beq.n	8007cde <xPortStartScheduler+0xbe>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60bb      	str	r3, [r7, #8]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cde:	4b1e      	ldr	r3, [pc, #120]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cf0:	4a19      	ldr	r2, [pc, #100]	@ (8007d58 <xPortStartScheduler+0x138>)
 8007cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cfc:	4b17      	ldr	r3, [pc, #92]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a16      	ldr	r2, [pc, #88]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d08:	4b14      	ldr	r3, [pc, #80]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a13      	ldr	r2, [pc, #76]	@ (8007d5c <xPortStartScheduler+0x13c>)
 8007d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d14:	f000 f8da 	bl	8007ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d18:	4b11      	ldr	r3, [pc, #68]	@ (8007d60 <xPortStartScheduler+0x140>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d1e:	f000 f8f9 	bl	8007f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d22:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <xPortStartScheduler+0x144>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a0f      	ldr	r2, [pc, #60]	@ (8007d64 <xPortStartScheduler+0x144>)
 8007d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d2e:	f7ff ff63 	bl	8007bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d32:	f7ff f815 	bl	8006d60 <vTaskSwitchContext>
	prvTaskExitError();
 8007d36:	f7ff ff1b 	bl	8007b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	e000ed00 	.word	0xe000ed00
 8007d48:	410fc271 	.word	0x410fc271
 8007d4c:	410fc270 	.word	0x410fc270
 8007d50:	e000e400 	.word	0xe000e400
 8007d54:	20005334 	.word	0x20005334
 8007d58:	20005338 	.word	0x20005338
 8007d5c:	e000ed20 	.word	0xe000ed20
 8007d60:	20000010 	.word	0x20000010
 8007d64:	e000ef34 	.word	0xe000ef34

08007d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	607b      	str	r3, [r7, #4]
}
 8007d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d82:	4b10      	ldr	r3, [pc, #64]	@ (8007dc4 <vPortEnterCritical+0x5c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3301      	adds	r3, #1
 8007d88:	4a0e      	ldr	r2, [pc, #56]	@ (8007dc4 <vPortEnterCritical+0x5c>)
 8007d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <vPortEnterCritical+0x5c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d110      	bne.n	8007db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d94:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc8 <vPortEnterCritical+0x60>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	603b      	str	r3, [r7, #0]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <vPortEnterCritical+0x4a>
	}
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000010 	.word	0x20000010
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dd2:	4b12      	ldr	r3, [pc, #72]	@ (8007e1c <vPortExitCritical+0x50>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10b      	bne.n	8007df2 <vPortExitCritical+0x26>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	607b      	str	r3, [r7, #4]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007df2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e1c <vPortExitCritical+0x50>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	4a08      	ldr	r2, [pc, #32]	@ (8007e1c <vPortExitCritical+0x50>)
 8007dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dfc:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <vPortExitCritical+0x50>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d105      	bne.n	8007e10 <vPortExitCritical+0x44>
 8007e04:	2300      	movs	r3, #0
 8007e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f383 8811 	msr	BASEPRI, r3
}
 8007e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000010 	.word	0x20000010

08007e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b15      	ldr	r3, [pc, #84]	@ (8007e80 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f01e 0f10 	tst.w	lr, #16
 8007e30:	bf08      	it	eq
 8007e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	6010      	str	r0, [r2, #0]
 8007e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e44:	f380 8811 	msr	BASEPRI, r0
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f7fe ff86 	bl	8006d60 <vTaskSwitchContext>
 8007e54:	f04f 0000 	mov.w	r0, #0
 8007e58:	f380 8811 	msr	BASEPRI, r0
 8007e5c:	bc09      	pop	{r0, r3}
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	6808      	ldr	r0, [r1, #0]
 8007e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e66:	f01e 0f10 	tst.w	lr, #16
 8007e6a:	bf08      	it	eq
 8007e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e70:	f380 8809 	msr	PSP, r0
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst>:
 8007e80:	20004d08 	.word	0x20004d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ea2:	f7fe fea3 	bl	8006bec <xTaskIncrementTick>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <xPortSysTickHandler+0x40>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f383 8811 	msr	BASEPRI, r3
}
 8007ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <vPortSetupTimerInterrupt+0x38>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007edc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <vPortSetupTimerInterrupt+0x3c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8007f0c <vPortSetupTimerInterrupt+0x40>)
 8007ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee6:	099b      	lsrs	r3, r3, #6
 8007ee8:	4a09      	ldr	r2, [pc, #36]	@ (8007f10 <vPortSetupTimerInterrupt+0x44>)
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eee:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	e000e010 	.word	0xe000e010
 8007f04:	e000e018 	.word	0xe000e018
 8007f08:	20000004 	.word	0x20000004
 8007f0c:	10624dd3 	.word	0x10624dd3
 8007f10:	e000e014 	.word	0xe000e014

08007f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f24 <vPortEnableVFP+0x10>
 8007f18:	6801      	ldr	r1, [r0, #0]
 8007f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f1e:	6001      	str	r1, [r0, #0]
 8007f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f22:	bf00      	nop
 8007f24:	e000ed88 	.word	0xe000ed88

08007f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f2e:	f3ef 8305 	mrs	r3, IPSR
 8007f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d915      	bls.n	8007f66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f3a:	4a18      	ldr	r2, [pc, #96]	@ (8007f9c <vPortValidateInterruptPriority+0x74>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f44:	4b16      	ldr	r3, [pc, #88]	@ (8007fa0 <vPortValidateInterruptPriority+0x78>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	7afa      	ldrb	r2, [r7, #11]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20b      	bcs.n	8007f66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	e7fd      	b.n	8007f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f66:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa4 <vPortValidateInterruptPriority+0x7c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa8 <vPortValidateInterruptPriority+0x80>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d90b      	bls.n	8007f8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	603b      	str	r3, [r7, #0]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <vPortValidateInterruptPriority+0x62>
	}
 8007f8e:	bf00      	nop
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	e000e3f0 	.word	0xe000e3f0
 8007fa0:	20005334 	.word	0x20005334
 8007fa4:	e000ed0c 	.word	0xe000ed0c
 8007fa8:	20005338 	.word	0x20005338

08007fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	@ 0x28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fb8:	f7fe fd5c 	bl	8006a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8008130 <pvPortMalloc+0x184>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fc4:	f000 f924 	bl	8008210 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008134 <pvPortMalloc+0x188>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8095 	bne.w	8008100 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01e      	beq.n	800801a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007fdc:	2208      	movs	r2, #8
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d015      	beq.n	800801a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f023 0307 	bic.w	r3, r3, #7
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00b      	beq.n	800801a <pvPortMalloc+0x6e>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	617b      	str	r3, [r7, #20]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d06f      	beq.n	8008100 <pvPortMalloc+0x154>
 8008020:	4b45      	ldr	r3, [pc, #276]	@ (8008138 <pvPortMalloc+0x18c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d86a      	bhi.n	8008100 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800802a:	4b44      	ldr	r3, [pc, #272]	@ (800813c <pvPortMalloc+0x190>)
 800802c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800802e:	4b43      	ldr	r3, [pc, #268]	@ (800813c <pvPortMalloc+0x190>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008034:	e004      	b.n	8008040 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d903      	bls.n	8008052 <pvPortMalloc+0xa6>
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f1      	bne.n	8008036 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008052:	4b37      	ldr	r3, [pc, #220]	@ (8008130 <pvPortMalloc+0x184>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008058:	429a      	cmp	r2, r3
 800805a:	d051      	beq.n	8008100 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	4413      	add	r3, r2
 8008064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	2308      	movs	r3, #8
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	429a      	cmp	r2, r3
 800807c:	d920      	bls.n	80080c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800807e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <pvPortMalloc+0xfc>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080ba:	69b8      	ldr	r0, [r7, #24]
 80080bc:	f000 f90a 	bl	80082d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008138 <pvPortMalloc+0x18c>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008138 <pvPortMalloc+0x18c>)
 80080cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008138 <pvPortMalloc+0x18c>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008140 <pvPortMalloc+0x194>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d203      	bcs.n	80080e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080da:	4b17      	ldr	r3, [pc, #92]	@ (8008138 <pvPortMalloc+0x18c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a18      	ldr	r2, [pc, #96]	@ (8008140 <pvPortMalloc+0x194>)
 80080e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b13      	ldr	r3, [pc, #76]	@ (8008134 <pvPortMalloc+0x188>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080f6:	4b13      	ldr	r3, [pc, #76]	@ (8008144 <pvPortMalloc+0x198>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3301      	adds	r3, #1
 80080fc:	4a11      	ldr	r2, [pc, #68]	@ (8008144 <pvPortMalloc+0x198>)
 80080fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008100:	f7fe fcc6 	bl	8006a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <pvPortMalloc+0x17a>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	60fb      	str	r3, [r7, #12]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <pvPortMalloc+0x176>
	return pvReturn;
 8008126:	69fb      	ldr	r3, [r7, #28]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3728      	adds	r7, #40	@ 0x28
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20005f44 	.word	0x20005f44
 8008134:	20005f58 	.word	0x20005f58
 8008138:	20005f48 	.word	0x20005f48
 800813c:	20005f3c 	.word	0x20005f3c
 8008140:	20005f4c 	.word	0x20005f4c
 8008144:	20005f50 	.word	0x20005f50

08008148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d04f      	beq.n	80081fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800815a:	2308      	movs	r3, #8
 800815c:	425b      	negs	r3, r3
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4413      	add	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	4b25      	ldr	r3, [pc, #148]	@ (8008204 <vPortFree+0xbc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4013      	ands	r3, r2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10b      	bne.n	800818e <vPortFree+0x46>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00b      	beq.n	80081ae <vPortFree+0x66>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	4b14      	ldr	r3, [pc, #80]	@ (8008204 <vPortFree+0xbc>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4013      	ands	r3, r2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01e      	beq.n	80081fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11a      	bne.n	80081fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008204 <vPortFree+0xbc>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	43db      	mvns	r3, r3
 80081ce:	401a      	ands	r2, r3
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081d4:	f7fe fc4e 	bl	8006a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <vPortFree+0xc0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4413      	add	r3, r2
 80081e2:	4a09      	ldr	r2, [pc, #36]	@ (8008208 <vPortFree+0xc0>)
 80081e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081e6:	6938      	ldr	r0, [r7, #16]
 80081e8:	f000 f874 	bl	80082d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <vPortFree+0xc4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	4a06      	ldr	r2, [pc, #24]	@ (800820c <vPortFree+0xc4>)
 80081f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081f6:	f7fe fc4b 	bl	8006a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081fa:	bf00      	nop
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20005f58 	.word	0x20005f58
 8008208:	20005f48 	.word	0x20005f48
 800820c:	20005f54 	.word	0x20005f54

08008210 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008216:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800821a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800821c:	4b27      	ldr	r3, [pc, #156]	@ (80082bc <prvHeapInit+0xac>)
 800821e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00c      	beq.n	8008244 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3307      	adds	r3, #7
 800822e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0307 	bic.w	r3, r3, #7
 8008236:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	4a1f      	ldr	r2, [pc, #124]	@ (80082bc <prvHeapInit+0xac>)
 8008240:	4413      	add	r3, r2
 8008242:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008248:	4a1d      	ldr	r2, [pc, #116]	@ (80082c0 <prvHeapInit+0xb0>)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800824e:	4b1c      	ldr	r3, [pc, #112]	@ (80082c0 <prvHeapInit+0xb0>)
 8008250:	2200      	movs	r2, #0
 8008252:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800825c:	2208      	movs	r2, #8
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1a9b      	subs	r3, r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a15      	ldr	r2, [pc, #84]	@ (80082c4 <prvHeapInit+0xb4>)
 8008270:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008272:	4b14      	ldr	r3, [pc, #80]	@ (80082c4 <prvHeapInit+0xb4>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800827a:	4b12      	ldr	r3, [pc, #72]	@ (80082c4 <prvHeapInit+0xb4>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008290:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <prvHeapInit+0xb4>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	4a0a      	ldr	r2, [pc, #40]	@ (80082c8 <prvHeapInit+0xb8>)
 800829e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	4a09      	ldr	r2, [pc, #36]	@ (80082cc <prvHeapInit+0xbc>)
 80082a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082a8:	4b09      	ldr	r3, [pc, #36]	@ (80082d0 <prvHeapInit+0xc0>)
 80082aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082ae:	601a      	str	r2, [r3, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	2000533c 	.word	0x2000533c
 80082c0:	20005f3c 	.word	0x20005f3c
 80082c4:	20005f44 	.word	0x20005f44
 80082c8:	20005f4c 	.word	0x20005f4c
 80082cc:	20005f48 	.word	0x20005f48
 80082d0:	20005f58 	.word	0x20005f58

080082d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082dc:	4b28      	ldr	r3, [pc, #160]	@ (8008380 <prvInsertBlockIntoFreeList+0xac>)
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e002      	b.n	80082e8 <prvInsertBlockIntoFreeList+0x14>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d8f7      	bhi.n	80082e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d108      	bne.n	8008316 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	441a      	add	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d118      	bne.n	800835c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4b15      	ldr	r3, [pc, #84]	@ (8008384 <prvInsertBlockIntoFreeList+0xb0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d00d      	beq.n	8008352 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	441a      	add	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	e008      	b.n	8008364 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008352:	4b0c      	ldr	r3, [pc, #48]	@ (8008384 <prvInsertBlockIntoFreeList+0xb0>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e003      	b.n	8008364 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d002      	beq.n	8008372 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008372:	bf00      	nop
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20005f3c 	.word	0x20005f3c
 8008384:	20005f44 	.word	0x20005f44

08008388 <rcl_get_zero_initialized_init_options>:
 8008388:	2000      	movs	r0, #0
 800838a:	4770      	bx	lr

0800838c <rcl_init_options_init>:
 800838c:	b084      	sub	sp, #16
 800838e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008390:	b097      	sub	sp, #92	@ 0x5c
 8008392:	ae1d      	add	r6, sp, #116	@ 0x74
 8008394:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8008398:	2800      	cmp	r0, #0
 800839a:	d058      	beq.n	800844e <rcl_init_options_init+0xc2>
 800839c:	6803      	ldr	r3, [r0, #0]
 800839e:	4605      	mov	r5, r0
 80083a0:	b133      	cbz	r3, 80083b0 <rcl_init_options_init+0x24>
 80083a2:	2464      	movs	r4, #100	@ 0x64
 80083a4:	4620      	mov	r0, r4
 80083a6:	b017      	add	sp, #92	@ 0x5c
 80083a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80083ac:	b004      	add	sp, #16
 80083ae:	4770      	bx	lr
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 f9a1 	bl	80086f8 <rcutils_allocator_is_valid>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d049      	beq.n	800844e <rcl_init_options_init+0xc2>
 80083ba:	46b4      	mov	ip, r6
 80083bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80083c0:	ac11      	add	r4, sp, #68	@ 0x44
 80083c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c4:	f8dc 3000 	ldr.w	r3, [ip]
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80083cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083ce:	2050      	movs	r0, #80	@ 0x50
 80083d0:	4798      	blx	r3
 80083d2:	4604      	mov	r4, r0
 80083d4:	6028      	str	r0, [r5, #0]
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d03b      	beq.n	8008452 <rcl_init_options_init+0xc6>
 80083da:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80083de:	4686      	mov	lr, r0
 80083e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80083e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80083e8:	f8dc 3000 	ldr.w	r3, [ip]
 80083ec:	f8ce 3000 	str.w	r3, [lr]
 80083f0:	a802      	add	r0, sp, #8
 80083f2:	f000 f9c1 	bl	8008778 <rmw_get_zero_initialized_init_options>
 80083f6:	f10d 0e08 	add.w	lr, sp, #8
 80083fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80083fe:	f104 0c18 	add.w	ip, r4, #24
 8008402:	682f      	ldr	r7, [r5, #0]
 8008404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008408:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800840c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008410:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008418:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800841c:	ac20      	add	r4, sp, #128	@ 0x80
 800841e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008426:	e88d 0003 	stmia.w	sp, {r0, r1}
 800842a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800842e:	f107 0018 	add.w	r0, r7, #24
 8008432:	f000 f9cb 	bl	80087cc <rmw_init_options_init>
 8008436:	4604      	mov	r4, r0
 8008438:	2800      	cmp	r0, #0
 800843a:	d0b3      	beq.n	80083a4 <rcl_init_options_init+0x18>
 800843c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800843e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008440:	6828      	ldr	r0, [r5, #0]
 8008442:	4798      	blx	r3
 8008444:	4620      	mov	r0, r4
 8008446:	f003 ff77 	bl	800c338 <rcl_convert_rmw_ret_to_rcl_ret>
 800844a:	4604      	mov	r4, r0
 800844c:	e7aa      	b.n	80083a4 <rcl_init_options_init+0x18>
 800844e:	240b      	movs	r4, #11
 8008450:	e7a8      	b.n	80083a4 <rcl_init_options_init+0x18>
 8008452:	240a      	movs	r4, #10
 8008454:	e7a6      	b.n	80083a4 <rcl_init_options_init+0x18>
 8008456:	bf00      	nop

08008458 <rcl_init_options_fini>:
 8008458:	b530      	push	{r4, r5, lr}
 800845a:	b087      	sub	sp, #28
 800845c:	b1f0      	cbz	r0, 800849c <rcl_init_options_fini+0x44>
 800845e:	6803      	ldr	r3, [r0, #0]
 8008460:	4604      	mov	r4, r0
 8008462:	b1db      	cbz	r3, 800849c <rcl_init_options_fini+0x44>
 8008464:	469c      	mov	ip, r3
 8008466:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800846a:	f10d 0e04 	add.w	lr, sp, #4
 800846e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008472:	f8dc 3000 	ldr.w	r3, [ip]
 8008476:	f8ce 3000 	str.w	r3, [lr]
 800847a:	a801      	add	r0, sp, #4
 800847c:	f000 f93c 	bl	80086f8 <rcutils_allocator_is_valid>
 8008480:	b160      	cbz	r0, 800849c <rcl_init_options_fini+0x44>
 8008482:	6820      	ldr	r0, [r4, #0]
 8008484:	3018      	adds	r0, #24
 8008486:	f000 fa51 	bl	800892c <rmw_init_options_fini>
 800848a:	4605      	mov	r5, r0
 800848c:	b950      	cbnz	r0, 80084a4 <rcl_init_options_fini+0x4c>
 800848e:	6820      	ldr	r0, [r4, #0]
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	9905      	ldr	r1, [sp, #20]
 8008494:	4798      	blx	r3
 8008496:	4628      	mov	r0, r5
 8008498:	b007      	add	sp, #28
 800849a:	bd30      	pop	{r4, r5, pc}
 800849c:	250b      	movs	r5, #11
 800849e:	4628      	mov	r0, r5
 80084a0:	b007      	add	sp, #28
 80084a2:	bd30      	pop	{r4, r5, pc}
 80084a4:	f003 ff48 	bl	800c338 <rcl_convert_rmw_ret_to_rcl_ret>
 80084a8:	4605      	mov	r5, r0
 80084aa:	e7f8      	b.n	800849e <rcl_init_options_fini+0x46>

080084ac <rcl_init_options_copy>:
 80084ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b0:	b094      	sub	sp, #80	@ 0x50
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d058      	beq.n	8008568 <rcl_init_options_copy+0xbc>
 80084b6:	4604      	mov	r4, r0
 80084b8:	6800      	ldr	r0, [r0, #0]
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d054      	beq.n	8008568 <rcl_init_options_copy+0xbc>
 80084be:	460e      	mov	r6, r1
 80084c0:	f000 f91a 	bl	80086f8 <rcutils_allocator_is_valid>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d04f      	beq.n	8008568 <rcl_init_options_copy+0xbc>
 80084c8:	2e00      	cmp	r6, #0
 80084ca:	d04d      	beq.n	8008568 <rcl_init_options_copy+0xbc>
 80084cc:	6833      	ldr	r3, [r6, #0]
 80084ce:	b123      	cbz	r3, 80084da <rcl_init_options_copy+0x2e>
 80084d0:	2464      	movs	r4, #100	@ 0x64
 80084d2:	4620      	mov	r0, r4
 80084d4:	b014      	add	sp, #80	@ 0x50
 80084d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084da:	6827      	ldr	r7, [r4, #0]
 80084dc:	46bc      	mov	ip, r7
 80084de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80084e2:	ad0f      	add	r5, sp, #60	@ 0x3c
 80084e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084e6:	f8dc 3000 	ldr.w	r3, [ip]
 80084ea:	f8d7 8000 	ldr.w	r8, [r7]
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	4619      	mov	r1, r3
 80084f2:	2050      	movs	r0, #80	@ 0x50
 80084f4:	47c0      	blx	r8
 80084f6:	4605      	mov	r5, r0
 80084f8:	6030      	str	r0, [r6, #0]
 80084fa:	b3d0      	cbz	r0, 8008572 <rcl_init_options_copy+0xc6>
 80084fc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8008500:	4686      	mov	lr, r0
 8008502:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800850a:	f8dc 3000 	ldr.w	r3, [ip]
 800850e:	f8ce 3000 	str.w	r3, [lr]
 8008512:	4668      	mov	r0, sp
 8008514:	f000 f930 	bl	8008778 <rmw_get_zero_initialized_init_options>
 8008518:	46ee      	mov	lr, sp
 800851a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800851e:	f105 0c18 	add.w	ip, r5, #24
 8008522:	6824      	ldr	r4, [r4, #0]
 8008524:	6835      	ldr	r5, [r6, #0]
 8008526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800852a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800852e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008532:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800853a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800853e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008542:	f104 0018 	add.w	r0, r4, #24
 8008546:	f105 0118 	add.w	r1, r5, #24
 800854a:	f000 f9a7 	bl	800889c <rmw_init_options_copy>
 800854e:	4604      	mov	r4, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	d0be      	beq.n	80084d2 <rcl_init_options_copy+0x26>
 8008554:	f000 f8de 	bl	8008714 <rcutils_get_error_string>
 8008558:	f000 f8f2 	bl	8008740 <rcutils_reset_error>
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff ff7b 	bl	8008458 <rcl_init_options_fini>
 8008562:	b140      	cbz	r0, 8008576 <rcl_init_options_copy+0xca>
 8008564:	4604      	mov	r4, r0
 8008566:	e7b4      	b.n	80084d2 <rcl_init_options_copy+0x26>
 8008568:	240b      	movs	r4, #11
 800856a:	4620      	mov	r0, r4
 800856c:	b014      	add	sp, #80	@ 0x50
 800856e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008572:	240a      	movs	r4, #10
 8008574:	e7ad      	b.n	80084d2 <rcl_init_options_copy+0x26>
 8008576:	4620      	mov	r0, r4
 8008578:	b014      	add	sp, #80	@ 0x50
 800857a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800857e:	f003 bedb 	b.w	800c338 <rcl_convert_rmw_ret_to_rcl_ret>
 8008582:	bf00      	nop

08008584 <rcl_init_options_set_domain_id>:
 8008584:	b120      	cbz	r0, 8008590 <rcl_init_options_set_domain_id+0xc>
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	b113      	cbz	r3, 8008590 <rcl_init_options_set_domain_id+0xc>
 800858a:	6259      	str	r1, [r3, #36]	@ 0x24
 800858c:	2000      	movs	r0, #0
 800858e:	4770      	bx	lr
 8008590:	200b      	movs	r0, #11
 8008592:	4770      	bx	lr

08008594 <rclc_support_init_with_options>:
 8008594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008598:	b083      	sub	sp, #12
 800859a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800859c:	b340      	cbz	r0, 80085f0 <rclc_support_init_with_options+0x5c>
 800859e:	461d      	mov	r5, r3
 80085a0:	b333      	cbz	r3, 80085f0 <rclc_support_init_with_options+0x5c>
 80085a2:	b32e      	cbz	r6, 80085f0 <rclc_support_init_with_options+0x5c>
 80085a4:	46e9      	mov	r9, sp
 80085a6:	4604      	mov	r4, r0
 80085a8:	4648      	mov	r0, r9
 80085aa:	460f      	mov	r7, r1
 80085ac:	4690      	mov	r8, r2
 80085ae:	f003 fed7 	bl	800c360 <rcl_get_zero_initialized_context>
 80085b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80085b6:	462a      	mov	r2, r5
 80085b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80085bc:	4623      	mov	r3, r4
 80085be:	4641      	mov	r1, r8
 80085c0:	4638      	mov	r0, r7
 80085c2:	f003 ff3d 	bl	800c440 <rcl_init>
 80085c6:	4605      	mov	r5, r0
 80085c8:	b960      	cbnz	r0, 80085e4 <rclc_support_init_with_options+0x50>
 80085ca:	60a6      	str	r6, [r4, #8]
 80085cc:	4632      	mov	r2, r6
 80085ce:	f104 010c 	add.w	r1, r4, #12
 80085d2:	2003      	movs	r0, #3
 80085d4:	f004 faea 	bl	800cbac <rcl_clock_init>
 80085d8:	4605      	mov	r5, r0
 80085da:	b918      	cbnz	r0, 80085e4 <rclc_support_init_with_options+0x50>
 80085dc:	4628      	mov	r0, r5
 80085de:	b003      	add	sp, #12
 80085e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085e4:	f000 f8ac 	bl	8008740 <rcutils_reset_error>
 80085e8:	4628      	mov	r0, r5
 80085ea:	b003      	add	sp, #12
 80085ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f0:	250b      	movs	r5, #11
 80085f2:	4628      	mov	r0, r5
 80085f4:	b003      	add	sp, #12
 80085f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085fa:	bf00      	nop

080085fc <rclc_node_init_default>:
 80085fc:	b3b8      	cbz	r0, 800866e <rclc_node_init_default+0x72>
 80085fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008602:	460d      	mov	r5, r1
 8008604:	b0a1      	sub	sp, #132	@ 0x84
 8008606:	b329      	cbz	r1, 8008654 <rclc_node_init_default+0x58>
 8008608:	4616      	mov	r6, r2
 800860a:	b31a      	cbz	r2, 8008654 <rclc_node_init_default+0x58>
 800860c:	461f      	mov	r7, r3
 800860e:	b30b      	cbz	r3, 8008654 <rclc_node_init_default+0x58>
 8008610:	f10d 0810 	add.w	r8, sp, #16
 8008614:	4604      	mov	r4, r0
 8008616:	4640      	mov	r0, r8
 8008618:	f004 f838 	bl	800c68c <rcl_get_zero_initialized_node>
 800861c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008620:	f10d 0918 	add.w	r9, sp, #24
 8008624:	e884 0003 	stmia.w	r4, {r0, r1}
 8008628:	4648      	mov	r0, r9
 800862a:	f004 f97f 	bl	800c92c <rcl_node_get_default_options>
 800862e:	4640      	mov	r0, r8
 8008630:	f004 f82c 	bl	800c68c <rcl_get_zero_initialized_node>
 8008634:	f8cd 9000 	str.w	r9, [sp]
 8008638:	e898 0003 	ldmia.w	r8, {r0, r1}
 800863c:	463b      	mov	r3, r7
 800863e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008642:	4632      	mov	r2, r6
 8008644:	4629      	mov	r1, r5
 8008646:	4620      	mov	r0, r4
 8008648:	f004 f82a 	bl	800c6a0 <rcl_node_init>
 800864c:	b930      	cbnz	r0, 800865c <rclc_node_init_default+0x60>
 800864e:	b021      	add	sp, #132	@ 0x84
 8008650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008654:	200b      	movs	r0, #11
 8008656:	b021      	add	sp, #132	@ 0x84
 8008658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800865c:	9003      	str	r0, [sp, #12]
 800865e:	f000 f86f 	bl	8008740 <rcutils_reset_error>
 8008662:	f000 f86d 	bl	8008740 <rcutils_reset_error>
 8008666:	9803      	ldr	r0, [sp, #12]
 8008668:	b021      	add	sp, #132	@ 0x84
 800866a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800866e:	200b      	movs	r0, #11
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop

08008674 <__default_zero_allocate>:
 8008674:	f006 bf1c 	b.w	800f4b0 <calloc>

08008678 <__default_reallocate>:
 8008678:	f007 b8a8 	b.w	800f7cc <realloc>

0800867c <__default_deallocate>:
 800867c:	f006 bf84 	b.w	800f588 <free>

08008680 <__default_allocate>:
 8008680:	f006 bf7a 	b.w	800f578 <malloc>

08008684 <rcutils_get_zero_initialized_allocator>:
 8008684:	b510      	push	{r4, lr}
 8008686:	4c05      	ldr	r4, [pc, #20]	@ (800869c <rcutils_get_zero_initialized_allocator+0x18>)
 8008688:	4686      	mov	lr, r0
 800868a:	4684      	mov	ip, r0
 800868c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800868e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	f8cc 3000 	str.w	r3, [ip]
 8008698:	4670      	mov	r0, lr
 800869a:	bd10      	pop	{r4, pc}
 800869c:	08010c2c 	.word	0x08010c2c

080086a0 <rcutils_set_default_allocator>:
 80086a0:	b1a8      	cbz	r0, 80086ce <rcutils_set_default_allocator+0x2e>
 80086a2:	6802      	ldr	r2, [r0, #0]
 80086a4:	b1a2      	cbz	r2, 80086d0 <rcutils_set_default_allocator+0x30>
 80086a6:	6841      	ldr	r1, [r0, #4]
 80086a8:	b1a1      	cbz	r1, 80086d4 <rcutils_set_default_allocator+0x34>
 80086aa:	b410      	push	{r4}
 80086ac:	68c4      	ldr	r4, [r0, #12]
 80086ae:	b164      	cbz	r4, 80086ca <rcutils_set_default_allocator+0x2a>
 80086b0:	6880      	ldr	r0, [r0, #8]
 80086b2:	b138      	cbz	r0, 80086c4 <rcutils_set_default_allocator+0x24>
 80086b4:	4b08      	ldr	r3, [pc, #32]	@ (80086d8 <rcutils_set_default_allocator+0x38>)
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	2200      	movs	r2, #0
 80086ba:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80086be:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80086c2:	2001      	movs	r0, #1
 80086c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	4620      	mov	r0, r4
 80086cc:	e7fa      	b.n	80086c4 <rcutils_set_default_allocator+0x24>
 80086ce:	4770      	bx	lr
 80086d0:	4610      	mov	r0, r2
 80086d2:	4770      	bx	lr
 80086d4:	4608      	mov	r0, r1
 80086d6:	4770      	bx	lr
 80086d8:	20000014 	.word	0x20000014

080086dc <rcutils_get_default_allocator>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	4c05      	ldr	r4, [pc, #20]	@ (80086f4 <rcutils_get_default_allocator+0x18>)
 80086e0:	4686      	mov	lr, r0
 80086e2:	4684      	mov	ip, r0
 80086e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	f8cc 3000 	str.w	r3, [ip]
 80086f0:	4670      	mov	r0, lr
 80086f2:	bd10      	pop	{r4, pc}
 80086f4:	20000014 	.word	0x20000014

080086f8 <rcutils_allocator_is_valid>:
 80086f8:	b158      	cbz	r0, 8008712 <rcutils_allocator_is_valid+0x1a>
 80086fa:	6803      	ldr	r3, [r0, #0]
 80086fc:	b143      	cbz	r3, 8008710 <rcutils_allocator_is_valid+0x18>
 80086fe:	6843      	ldr	r3, [r0, #4]
 8008700:	b133      	cbz	r3, 8008710 <rcutils_allocator_is_valid+0x18>
 8008702:	68c3      	ldr	r3, [r0, #12]
 8008704:	b123      	cbz	r3, 8008710 <rcutils_allocator_is_valid+0x18>
 8008706:	6880      	ldr	r0, [r0, #8]
 8008708:	3800      	subs	r0, #0
 800870a:	bf18      	it	ne
 800870c:	2001      	movne	r0, #1
 800870e:	4770      	bx	lr
 8008710:	4618      	mov	r0, r3
 8008712:	4770      	bx	lr

08008714 <rcutils_get_error_string>:
 8008714:	4b06      	ldr	r3, [pc, #24]	@ (8008730 <rcutils_get_error_string+0x1c>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	b13b      	cbz	r3, 800872a <rcutils_get_error_string+0x16>
 800871a:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <rcutils_get_error_string+0x20>)
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	b90a      	cbnz	r2, 8008724 <rcutils_get_error_string+0x10>
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	4b04      	ldr	r3, [pc, #16]	@ (8008738 <rcutils_get_error_string+0x24>)
 8008726:	7818      	ldrb	r0, [r3, #0]
 8008728:	4770      	bx	lr
 800872a:	4b04      	ldr	r3, [pc, #16]	@ (800873c <rcutils_get_error_string+0x28>)
 800872c:	7818      	ldrb	r0, [r3, #0]
 800872e:	4770      	bx	lr
 8008730:	20005f5c 	.word	0x20005f5c
 8008734:	20005f71 	.word	0x20005f71
 8008738:	20005f70 	.word	0x20005f70
 800873c:	08010c40 	.word	0x08010c40

08008740 <rcutils_reset_error>:
 8008740:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8008760 <rcutils_reset_error+0x20>
 8008744:	4a08      	ldr	r2, [pc, #32]	@ (8008768 <rcutils_reset_error+0x28>)
 8008746:	4809      	ldr	r0, [pc, #36]	@ (800876c <rcutils_reset_error+0x2c>)
 8008748:	4909      	ldr	r1, [pc, #36]	@ (8008770 <rcutils_reset_error+0x30>)
 800874a:	2300      	movs	r3, #0
 800874c:	8013      	strh	r3, [r2, #0]
 800874e:	ed82 7b02 	vstr	d7, [r2, #8]
 8008752:	4a08      	ldr	r2, [pc, #32]	@ (8008774 <rcutils_reset_error+0x34>)
 8008754:	7003      	strb	r3, [r0, #0]
 8008756:	700b      	strb	r3, [r1, #0]
 8008758:	7013      	strb	r3, [r2, #0]
 800875a:	4770      	bx	lr
 800875c:	f3af 8000 	nop.w
	...
 8008768:	20005f60 	.word	0x20005f60
 800876c:	20005f71 	.word	0x20005f71
 8008770:	20005f70 	.word	0x20005f70
 8008774:	20005f5c 	.word	0x20005f5c

08008778 <rmw_get_zero_initialized_init_options>:
 8008778:	b510      	push	{r4, lr}
 800877a:	2238      	movs	r2, #56	@ 0x38
 800877c:	4604      	mov	r4, r0
 800877e:	2100      	movs	r1, #0
 8008780:	f007 fa56 	bl	800fc30 <memset>
 8008784:	f104 0010 	add.w	r0, r4, #16
 8008788:	f000 f806 	bl	8008798 <rmw_get_default_security_options>
 800878c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008790:	60e3      	str	r3, [r4, #12]
 8008792:	4620      	mov	r0, r4
 8008794:	bd10      	pop	{r4, pc}
 8008796:	bf00      	nop

08008798 <rmw_get_default_security_options>:
 8008798:	2200      	movs	r2, #0
 800879a:	7002      	strb	r2, [r0, #0]
 800879c:	6042      	str	r2, [r0, #4]
 800879e:	4770      	bx	lr

080087a0 <rmw_uros_set_custom_transport>:
 80087a0:	b470      	push	{r4, r5, r6}
 80087a2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80087a6:	b162      	cbz	r2, 80087c2 <rmw_uros_set_custom_transport+0x22>
 80087a8:	b15b      	cbz	r3, 80087c2 <rmw_uros_set_custom_transport+0x22>
 80087aa:	b155      	cbz	r5, 80087c2 <rmw_uros_set_custom_transport+0x22>
 80087ac:	b14e      	cbz	r6, 80087c2 <rmw_uros_set_custom_transport+0x22>
 80087ae:	4c06      	ldr	r4, [pc, #24]	@ (80087c8 <rmw_uros_set_custom_transport+0x28>)
 80087b0:	7020      	strb	r0, [r4, #0]
 80087b2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80087b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80087ba:	6166      	str	r6, [r4, #20]
 80087bc:	2000      	movs	r0, #0
 80087be:	bc70      	pop	{r4, r5, r6}
 80087c0:	4770      	bx	lr
 80087c2:	200b      	movs	r0, #11
 80087c4:	bc70      	pop	{r4, r5, r6}
 80087c6:	4770      	bx	lr
 80087c8:	20005f74 	.word	0x20005f74

080087cc <rmw_init_options_init>:
 80087cc:	b084      	sub	sp, #16
 80087ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d0:	b083      	sub	sp, #12
 80087d2:	ad09      	add	r5, sp, #36	@ 0x24
 80087d4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80087d8:	b130      	cbz	r0, 80087e8 <rmw_init_options_init+0x1c>
 80087da:	4604      	mov	r4, r0
 80087dc:	4628      	mov	r0, r5
 80087de:	f7ff ff8b 	bl	80086f8 <rcutils_allocator_is_valid>
 80087e2:	b108      	cbz	r0, 80087e8 <rmw_init_options_init+0x1c>
 80087e4:	68a6      	ldr	r6, [r4, #8]
 80087e6:	b12e      	cbz	r6, 80087f4 <rmw_init_options_init+0x28>
 80087e8:	200b      	movs	r0, #11
 80087ea:	b003      	add	sp, #12
 80087ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80087f0:	b004      	add	sp, #16
 80087f2:	4770      	bx	lr
 80087f4:	2200      	movs	r2, #0
 80087f6:	2300      	movs	r3, #0
 80087f8:	e9c4 2300 	strd	r2, r3, [r4]
 80087fc:	4b22      	ldr	r3, [pc, #136]	@ (8008888 <rmw_init_options_init+0xbc>)
 80087fe:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8008898 <rmw_init_options_init+0xcc>
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60a3      	str	r3, [r4, #8]
 8008806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008808:	f104 0c20 	add.w	ip, r4, #32
 800880c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008810:	466f      	mov	r7, sp
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	f8cc 3000 	str.w	r3, [ip]
 8008818:	4638      	mov	r0, r7
 800881a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800881e:	60e6      	str	r6, [r4, #12]
 8008820:	f7ff ffba 	bl	8008798 <rmw_get_default_security_options>
 8008824:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008828:	f104 0310 	add.w	r3, r4, #16
 800882c:	e883 0003 	stmia.w	r3, {r0, r1}
 8008830:	2203      	movs	r2, #3
 8008832:	4816      	ldr	r0, [pc, #88]	@ (800888c <rmw_init_options_init+0xc0>)
 8008834:	4916      	ldr	r1, [pc, #88]	@ (8008890 <rmw_init_options_init+0xc4>)
 8008836:	7626      	strb	r6, [r4, #24]
 8008838:	f000 fd4a 	bl	80092d0 <rmw_uxrce_init_init_options_impl_memory>
 800883c:	4813      	ldr	r0, [pc, #76]	@ (800888c <rmw_init_options_init+0xc0>)
 800883e:	f004 fd8f 	bl	800d360 <get_memory>
 8008842:	b1f0      	cbz	r0, 8008882 <rmw_init_options_init+0xb6>
 8008844:	4a13      	ldr	r2, [pc, #76]	@ (8008894 <rmw_init_options_init+0xc8>)
 8008846:	6883      	ldr	r3, [r0, #8]
 8008848:	6851      	ldr	r1, [r2, #4]
 800884a:	7810      	ldrb	r0, [r2, #0]
 800884c:	6363      	str	r3, [r4, #52]	@ 0x34
 800884e:	7418      	strb	r0, [r3, #16]
 8008850:	6159      	str	r1, [r3, #20]
 8008852:	68d1      	ldr	r1, [r2, #12]
 8008854:	61d9      	str	r1, [r3, #28]
 8008856:	6911      	ldr	r1, [r2, #16]
 8008858:	6219      	str	r1, [r3, #32]
 800885a:	6951      	ldr	r1, [r2, #20]
 800885c:	6892      	ldr	r2, [r2, #8]
 800885e:	619a      	str	r2, [r3, #24]
 8008860:	6259      	str	r1, [r3, #36]	@ 0x24
 8008862:	f002 ff3d 	bl	800b6e0 <uxr_nanos>
 8008866:	f006 ff45 	bl	800f6f4 <srand>
 800886a:	f006 ff71 	bl	800f750 <rand>
 800886e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008870:	6298      	str	r0, [r3, #40]	@ 0x28
 8008872:	2800      	cmp	r0, #0
 8008874:	d0f9      	beq.n	800886a <rmw_init_options_init+0x9e>
 8008876:	2000      	movs	r0, #0
 8008878:	b003      	add	sp, #12
 800887a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800887e:	b004      	add	sp, #16
 8008880:	4770      	bx	lr
 8008882:	2001      	movs	r0, #1
 8008884:	e7b1      	b.n	80087ea <rmw_init_options_init+0x1e>
 8008886:	bf00      	nop
 8008888:	080112d4 	.word	0x080112d4
 800888c:	2000a88c 	.word	0x2000a88c
 8008890:	20006128 	.word	0x20006128
 8008894:	20005f74 	.word	0x20005f74
 8008898:	08010c44 	.word	0x08010c44

0800889c <rmw_init_options_copy>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	b158      	cbz	r0, 80088b8 <rmw_init_options_copy+0x1c>
 80088a0:	460d      	mov	r5, r1
 80088a2:	b149      	cbz	r1, 80088b8 <rmw_init_options_copy+0x1c>
 80088a4:	4604      	mov	r4, r0
 80088a6:	6880      	ldr	r0, [r0, #8]
 80088a8:	b120      	cbz	r0, 80088b4 <rmw_init_options_copy+0x18>
 80088aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008924 <rmw_init_options_copy+0x88>)
 80088ac:	6819      	ldr	r1, [r3, #0]
 80088ae:	f7f7 fcb7 	bl	8000220 <strcmp>
 80088b2:	bb90      	cbnz	r0, 800891a <rmw_init_options_copy+0x7e>
 80088b4:	68ab      	ldr	r3, [r5, #8]
 80088b6:	b113      	cbz	r3, 80088be <rmw_init_options_copy+0x22>
 80088b8:	250b      	movs	r5, #11
 80088ba:	4628      	mov	r0, r5
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
 80088be:	4623      	mov	r3, r4
 80088c0:	462a      	mov	r2, r5
 80088c2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80088c6:	f8d3 c000 	ldr.w	ip, [r3]
 80088ca:	6858      	ldr	r0, [r3, #4]
 80088cc:	6899      	ldr	r1, [r3, #8]
 80088ce:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80088d2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80088d6:	3310      	adds	r3, #16
 80088d8:	42b3      	cmp	r3, r6
 80088da:	f8c2 c000 	str.w	ip, [r2]
 80088de:	6050      	str	r0, [r2, #4]
 80088e0:	6091      	str	r1, [r2, #8]
 80088e2:	f102 0210 	add.w	r2, r2, #16
 80088e6:	d1ee      	bne.n	80088c6 <rmw_init_options_copy+0x2a>
 80088e8:	6819      	ldr	r1, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	480e      	ldr	r0, [pc, #56]	@ (8008928 <rmw_init_options_copy+0x8c>)
 80088ee:	6053      	str	r3, [r2, #4]
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	f004 fd35 	bl	800d360 <get_memory>
 80088f6:	b198      	cbz	r0, 8008920 <rmw_init_options_copy+0x84>
 80088f8:	6883      	ldr	r3, [r0, #8]
 80088fa:	636b      	str	r3, [r5, #52]	@ 0x34
 80088fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80088fe:	f102 0c10 	add.w	ip, r2, #16
 8008902:	f103 0410 	add.w	r4, r3, #16
 8008906:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800890a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800890c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008910:	2500      	movs	r5, #0
 8008912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008916:	4628      	mov	r0, r5
 8008918:	bd70      	pop	{r4, r5, r6, pc}
 800891a:	250c      	movs	r5, #12
 800891c:	4628      	mov	r0, r5
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	2501      	movs	r5, #1
 8008922:	e7ca      	b.n	80088ba <rmw_init_options_copy+0x1e>
 8008924:	080112d4 	.word	0x080112d4
 8008928:	2000a88c 	.word	0x2000a88c

0800892c <rmw_init_options_fini>:
 800892c:	2800      	cmp	r0, #0
 800892e:	d03d      	beq.n	80089ac <rmw_init_options_fini+0x80>
 8008930:	b510      	push	{r4, lr}
 8008932:	4604      	mov	r4, r0
 8008934:	b08e      	sub	sp, #56	@ 0x38
 8008936:	3020      	adds	r0, #32
 8008938:	f7ff fede 	bl	80086f8 <rcutils_allocator_is_valid>
 800893c:	b360      	cbz	r0, 8008998 <rmw_init_options_fini+0x6c>
 800893e:	68a0      	ldr	r0, [r4, #8]
 8008940:	b120      	cbz	r0, 800894c <rmw_init_options_fini+0x20>
 8008942:	4b1c      	ldr	r3, [pc, #112]	@ (80089b4 <rmw_init_options_fini+0x88>)
 8008944:	6819      	ldr	r1, [r3, #0]
 8008946:	f7f7 fc6b 	bl	8000220 <strcmp>
 800894a:	bb68      	cbnz	r0, 80089a8 <rmw_init_options_fini+0x7c>
 800894c:	4b1a      	ldr	r3, [pc, #104]	@ (80089b8 <rmw_init_options_fini+0x8c>)
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	b331      	cbz	r1, 80089a0 <rmw_init_options_fini+0x74>
 8008952:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008954:	e001      	b.n	800895a <rmw_init_options_fini+0x2e>
 8008956:	6849      	ldr	r1, [r1, #4]
 8008958:	b311      	cbz	r1, 80089a0 <rmw_init_options_fini+0x74>
 800895a:	688b      	ldr	r3, [r1, #8]
 800895c:	429a      	cmp	r2, r3
 800895e:	d1fa      	bne.n	8008956 <rmw_init_options_fini+0x2a>
 8008960:	4815      	ldr	r0, [pc, #84]	@ (80089b8 <rmw_init_options_fini+0x8c>)
 8008962:	f004 fd0d 	bl	800d380 <put_memory>
 8008966:	4668      	mov	r0, sp
 8008968:	f7ff ff06 	bl	8008778 <rmw_get_zero_initialized_init_options>
 800896c:	46ee      	mov	lr, sp
 800896e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008972:	46a4      	mov	ip, r4
 8008974:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008978:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800897c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008980:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008988:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800898c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008990:	2300      	movs	r3, #0
 8008992:	4618      	mov	r0, r3
 8008994:	b00e      	add	sp, #56	@ 0x38
 8008996:	bd10      	pop	{r4, pc}
 8008998:	230b      	movs	r3, #11
 800899a:	4618      	mov	r0, r3
 800899c:	b00e      	add	sp, #56	@ 0x38
 800899e:	bd10      	pop	{r4, pc}
 80089a0:	2301      	movs	r3, #1
 80089a2:	4618      	mov	r0, r3
 80089a4:	b00e      	add	sp, #56	@ 0x38
 80089a6:	bd10      	pop	{r4, pc}
 80089a8:	230c      	movs	r3, #12
 80089aa:	e7f2      	b.n	8008992 <rmw_init_options_fini+0x66>
 80089ac:	230b      	movs	r3, #11
 80089ae:	4618      	mov	r0, r3
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	080112d4 	.word	0x080112d4
 80089b8:	2000a88c 	.word	0x2000a88c

080089bc <rmw_init>:
 80089bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089c0:	b083      	sub	sp, #12
 80089c2:	2800      	cmp	r0, #0
 80089c4:	f000 80d3 	beq.w	8008b6e <rmw_init+0x1b2>
 80089c8:	460e      	mov	r6, r1
 80089ca:	2900      	cmp	r1, #0
 80089cc:	f000 80cf 	beq.w	8008b6e <rmw_init+0x1b2>
 80089d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80089d2:	4605      	mov	r5, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 80ca 	beq.w	8008b6e <rmw_init+0x1b2>
 80089da:	4b78      	ldr	r3, [pc, #480]	@ (8008bbc <rmw_init+0x200>)
 80089dc:	6880      	ldr	r0, [r0, #8]
 80089de:	681f      	ldr	r7, [r3, #0]
 80089e0:	b128      	cbz	r0, 80089ee <rmw_init+0x32>
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f7 fc1c 	bl	8000220 <strcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f040 80ca 	bne.w	8008b82 <rmw_init+0x1c6>
 80089ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089f2:	4c73      	ldr	r4, [pc, #460]	@ (8008bc0 <rmw_init+0x204>)
 80089f4:	4973      	ldr	r1, [pc, #460]	@ (8008bc4 <rmw_init+0x208>)
 80089f6:	4874      	ldr	r0, [pc, #464]	@ (8008bc8 <rmw_init+0x20c>)
 80089f8:	60b7      	str	r7, [r6, #8]
 80089fa:	e9c6 2300 	strd	r2, r3, [r6]
 80089fe:	68eb      	ldr	r3, [r5, #12]
 8008a00:	64b3      	str	r3, [r6, #72]	@ 0x48
 8008a02:	2201      	movs	r2, #1
 8008a04:	f000 fc04 	bl	8009210 <rmw_uxrce_init_session_memory>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4970      	ldr	r1, [pc, #448]	@ (8008bcc <rmw_init+0x210>)
 8008a0c:	2204      	movs	r2, #4
 8008a0e:	f000 fc3f 	bl	8009290 <rmw_uxrce_init_static_input_buffer_memory>
 8008a12:	f04f 0800 	mov.w	r8, #0
 8008a16:	486c      	ldr	r0, [pc, #432]	@ (8008bc8 <rmw_init+0x20c>)
 8008a18:	f884 800d 	strb.w	r8, [r4, #13]
 8008a1c:	f004 fca0 	bl	800d360 <get_memory>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	f000 80a9 	beq.w	8008b78 <rmw_init+0x1bc>
 8008a26:	6884      	ldr	r4, [r0, #8]
 8008a28:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8008a2a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8008a2c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8008a30:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8008a34:	9101      	str	r1, [sp, #4]
 8008a36:	6a00      	ldr	r0, [r0, #32]
 8008a38:	9000      	str	r0, [sp, #0]
 8008a3a:	f104 0910 	add.w	r9, r4, #16
 8008a3e:	4661      	mov	r1, ip
 8008a40:	4648      	mov	r0, r9
 8008a42:	f000 fe9b 	bl	800977c <uxr_set_custom_transport_callbacks>
 8008a46:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8008a4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a4e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8008a52:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8008a56:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8008a5a:	495d      	ldr	r1, [pc, #372]	@ (8008bd0 <rmw_init+0x214>)
 8008a5c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8008a60:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8008a64:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8008a68:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8008a6c:	4859      	ldr	r0, [pc, #356]	@ (8008bd4 <rmw_init+0x218>)
 8008a6e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8008a72:	2201      	movs	r2, #1
 8008a74:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8008a76:	f000 fbab 	bl	80091d0 <rmw_uxrce_init_node_memory>
 8008a7a:	4957      	ldr	r1, [pc, #348]	@ (8008bd8 <rmw_init+0x21c>)
 8008a7c:	4857      	ldr	r0, [pc, #348]	@ (8008bdc <rmw_init+0x220>)
 8008a7e:	2205      	movs	r2, #5
 8008a80:	f000 fb86 	bl	8009190 <rmw_uxrce_init_subscription_memory>
 8008a84:	4956      	ldr	r1, [pc, #344]	@ (8008be0 <rmw_init+0x224>)
 8008a86:	4857      	ldr	r0, [pc, #348]	@ (8008be4 <rmw_init+0x228>)
 8008a88:	220a      	movs	r2, #10
 8008a8a:	f000 fb61 	bl	8009150 <rmw_uxrce_init_publisher_memory>
 8008a8e:	4956      	ldr	r1, [pc, #344]	@ (8008be8 <rmw_init+0x22c>)
 8008a90:	4856      	ldr	r0, [pc, #344]	@ (8008bec <rmw_init+0x230>)
 8008a92:	2201      	movs	r2, #1
 8008a94:	f000 fb1c 	bl	80090d0 <rmw_uxrce_init_service_memory>
 8008a98:	4955      	ldr	r1, [pc, #340]	@ (8008bf0 <rmw_init+0x234>)
 8008a9a:	4856      	ldr	r0, [pc, #344]	@ (8008bf4 <rmw_init+0x238>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f000 fb37 	bl	8009110 <rmw_uxrce_init_client_memory>
 8008aa2:	4955      	ldr	r1, [pc, #340]	@ (8008bf8 <rmw_init+0x23c>)
 8008aa4:	4855      	ldr	r0, [pc, #340]	@ (8008bfc <rmw_init+0x240>)
 8008aa6:	220f      	movs	r2, #15
 8008aa8:	f000 fbd2 	bl	8009250 <rmw_uxrce_init_topic_memory>
 8008aac:	4954      	ldr	r1, [pc, #336]	@ (8008c00 <rmw_init+0x244>)
 8008aae:	4855      	ldr	r0, [pc, #340]	@ (8008c04 <rmw_init+0x248>)
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	f000 fc0d 	bl	80092d0 <rmw_uxrce_init_init_options_impl_memory>
 8008ab6:	4954      	ldr	r1, [pc, #336]	@ (8008c08 <rmw_init+0x24c>)
 8008ab8:	4854      	ldr	r0, [pc, #336]	@ (8008c0c <rmw_init+0x250>)
 8008aba:	2204      	movs	r2, #4
 8008abc:	f000 fc28 	bl	8009310 <rmw_uxrce_init_wait_set_memory>
 8008ac0:	4953      	ldr	r1, [pc, #332]	@ (8008c10 <rmw_init+0x254>)
 8008ac2:	4854      	ldr	r0, [pc, #336]	@ (8008c14 <rmw_init+0x258>)
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	f000 fc43 	bl	8009350 <rmw_uxrce_init_guard_condition_memory>
 8008aca:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8008acc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8008ace:	4642      	mov	r2, r8
 8008ad0:	f000 fae6 	bl	80090a0 <rmw_uxrce_transport_init>
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d158      	bne.n	8008b8c <rmw_init+0x1d0>
 8008ada:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8008adc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8008ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ae2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f001 f842 	bl	8009b70 <uxr_init_session>
 8008aec:	494a      	ldr	r1, [pc, #296]	@ (8008c18 <rmw_init+0x25c>)
 8008aee:	4622      	mov	r2, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f001 f861 	bl	8009bb8 <uxr_set_topic_callback>
 8008af6:	4949      	ldr	r1, [pc, #292]	@ (8008c1c <rmw_init+0x260>)
 8008af8:	463a      	mov	r2, r7
 8008afa:	4628      	mov	r0, r5
 8008afc:	f001 f858 	bl	8009bb0 <uxr_set_status_callback>
 8008b00:	4947      	ldr	r1, [pc, #284]	@ (8008c20 <rmw_init+0x264>)
 8008b02:	463a      	mov	r2, r7
 8008b04:	4628      	mov	r0, r5
 8008b06:	f001 f85b 	bl	8009bc0 <uxr_set_request_callback>
 8008b0a:	4946      	ldr	r1, [pc, #280]	@ (8008c24 <rmw_init+0x268>)
 8008b0c:	463a      	mov	r2, r7
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f001 f85a 	bl	8009bc8 <uxr_set_reply_callback>
 8008b14:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8008b18:	2304      	movs	r3, #4
 8008b1a:	0092      	lsls	r2, r2, #2
 8008b1c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8008b20:	4628      	mov	r0, r5
 8008b22:	f001 f88f 	bl	8009c44 <uxr_create_input_reliable_stream>
 8008b26:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8008b2a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8008b2e:	0092      	lsls	r2, r2, #2
 8008b30:	2304      	movs	r3, #4
 8008b32:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8008b36:	4628      	mov	r0, r5
 8008b38:	f001 f85c 	bl	8009bf4 <uxr_create_output_reliable_stream>
 8008b3c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8008b40:	4628      	mov	r0, r5
 8008b42:	f001 f879 	bl	8009c38 <uxr_create_input_best_effort_stream>
 8008b46:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8008b4a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8008b4e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8008b52:	3114      	adds	r1, #20
 8008b54:	4628      	mov	r0, r5
 8008b56:	f001 f83b 	bl	8009bd0 <uxr_create_output_best_effort_stream>
 8008b5a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f001 fd66 	bl	800a630 <uxr_create_session>
 8008b64:	b1f8      	cbz	r0, 8008ba6 <rmw_init+0x1ea>
 8008b66:	4638      	mov	r0, r7
 8008b68:	b003      	add	sp, #12
 8008b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b6e:	270b      	movs	r7, #11
 8008b70:	4638      	mov	r0, r7
 8008b72:	b003      	add	sp, #12
 8008b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b78:	2701      	movs	r7, #1
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	b003      	add	sp, #12
 8008b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b82:	270c      	movs	r7, #12
 8008b84:	4638      	mov	r0, r7
 8008b86:	b003      	add	sp, #12
 8008b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b8c:	4648      	mov	r0, r9
 8008b8e:	f000 fe37 	bl	8009800 <uxr_close_custom_transport>
 8008b92:	480d      	ldr	r0, [pc, #52]	@ (8008bc8 <rmw_init+0x20c>)
 8008b94:	4621      	mov	r1, r4
 8008b96:	f004 fbf3 	bl	800d380 <put_memory>
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8008ba0:	b003      	add	sp, #12
 8008ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ba6:	4648      	mov	r0, r9
 8008ba8:	f000 fe2a 	bl	8009800 <uxr_close_custom_transport>
 8008bac:	4806      	ldr	r0, [pc, #24]	@ (8008bc8 <rmw_init+0x20c>)
 8008bae:	4621      	mov	r1, r4
 8008bb0:	f004 fbe6 	bl	800d380 <put_memory>
 8008bb4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8008bb6:	2701      	movs	r7, #1
 8008bb8:	e7d5      	b.n	8008b66 <rmw_init+0x1aa>
 8008bba:	bf00      	nop
 8008bbc:	080112d4 	.word	0x080112d4
 8008bc0:	2000a8dc 	.word	0x2000a8dc
 8008bc4:	20006b88 	.word	0x20006b88
 8008bc8:	2000a8cc 	.word	0x2000a8cc
 8008bcc:	20008130 	.word	0x20008130
 8008bd0:	200061ac 	.word	0x200061ac
 8008bd4:	2000a89c 	.word	0x2000a89c
 8008bd8:	2000a230 	.word	0x2000a230
 8008bdc:	2000a8ec 	.word	0x2000a8ec
 8008be0:	20006250 	.word	0x20006250
 8008be4:	2000a8ac 	.word	0x2000a8ac
 8008be8:	20006ac0 	.word	0x20006ac0
 8008bec:	2000a8bc 	.word	0x2000a8bc
 8008bf0:	20005fe0 	.word	0x20005fe0
 8008bf4:	20005fcc 	.word	0x20005fcc
 8008bf8:	2000a668 	.word	0x2000a668
 8008bfc:	2000a8fc 	.word	0x2000a8fc
 8008c00:	20006128 	.word	0x20006128
 8008c04:	2000a88c 	.word	0x2000a88c
 8008c08:	2000a80c 	.word	0x2000a80c
 8008c0c:	2000a90c 	.word	0x2000a90c
 8008c10:	200060a8 	.word	0x200060a8
 8008c14:	2000a87c 	.word	0x2000a87c
 8008c18:	0800d199 	.word	0x0800d199
 8008c1c:	0800d191 	.word	0x0800d191
 8008c20:	0800d231 	.word	0x0800d231
 8008c24:	0800d2cd 	.word	0x0800d2cd

08008c28 <rmw_context_fini>:
 8008c28:	4b17      	ldr	r3, [pc, #92]	@ (8008c88 <rmw_context_fini+0x60>)
 8008c2a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	681c      	ldr	r4, [r3, #0]
 8008c30:	4605      	mov	r5, r0
 8008c32:	b334      	cbz	r4, 8008c82 <rmw_context_fini+0x5a>
 8008c34:	2600      	movs	r6, #0
 8008c36:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8008c3a:	6902      	ldr	r2, [r0, #16]
 8008c3c:	428a      	cmp	r2, r1
 8008c3e:	d018      	beq.n	8008c72 <rmw_context_fini+0x4a>
 8008c40:	2c00      	cmp	r4, #0
 8008c42:	d1f8      	bne.n	8008c36 <rmw_context_fini+0xe>
 8008c44:	b189      	cbz	r1, 8008c6a <rmw_context_fini+0x42>
 8008c46:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8008c4a:	789b      	ldrb	r3, [r3, #2]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8008c52:	bf14      	ite	ne
 8008c54:	210a      	movne	r1, #10
 8008c56:	2100      	moveq	r1, #0
 8008c58:	f001 fcc2 	bl	800a5e0 <uxr_delete_session_retries>
 8008c5c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8008c5e:	f000 fb97 	bl	8009390 <rmw_uxrce_fini_session_memory>
 8008c62:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8008c64:	3010      	adds	r0, #16
 8008c66:	f000 fdcb 	bl	8009800 <uxr_close_custom_transport>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8008c6e:	4630      	mov	r0, r6
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	3018      	adds	r0, #24
 8008c74:	f000 f89c 	bl	8008db0 <rmw_destroy_node>
 8008c78:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	2c00      	cmp	r4, #0
 8008c7e:	d1da      	bne.n	8008c36 <rmw_context_fini+0xe>
 8008c80:	e7e0      	b.n	8008c44 <rmw_context_fini+0x1c>
 8008c82:	4626      	mov	r6, r4
 8008c84:	e7de      	b.n	8008c44 <rmw_context_fini+0x1c>
 8008c86:	bf00      	nop
 8008c88:	2000a89c 	.word	0x2000a89c

08008c8c <create_node>:
 8008c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c90:	b083      	sub	sp, #12
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d05f      	beq.n	8008d56 <create_node+0xca>
 8008c96:	4606      	mov	r6, r0
 8008c98:	4835      	ldr	r0, [pc, #212]	@ (8008d70 <create_node+0xe4>)
 8008c9a:	460f      	mov	r7, r1
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	f004 fb5e 	bl	800d360 <get_memory>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d056      	beq.n	8008d56 <create_node+0xca>
 8008ca8:	6884      	ldr	r4, [r0, #8]
 8008caa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	f004 fbbf 	bl	800d430 <rmw_get_implementation_identifier>
 8008cb2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8008cb6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8008cba:	f8c4 9020 	str.w	r9, [r4, #32]
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7f7 fab8 	bl	8000234 <strlen>
 8008cc4:	1c42      	adds	r2, r0, #1
 8008cc6:	2a3c      	cmp	r2, #60	@ 0x3c
 8008cc8:	f104 0518 	add.w	r5, r4, #24
 8008ccc:	d840      	bhi.n	8008d50 <create_node+0xc4>
 8008cce:	4648      	mov	r0, r9
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8008cd6:	f007 f848 	bl	800fd6a <memcpy>
 8008cda:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8008cde:	4638      	mov	r0, r7
 8008ce0:	f7f7 faa8 	bl	8000234 <strlen>
 8008ce4:	1c42      	adds	r2, r0, #1
 8008ce6:	2a3c      	cmp	r2, #60	@ 0x3c
 8008ce8:	d832      	bhi.n	8008d50 <create_node+0xc4>
 8008cea:	4639      	mov	r1, r7
 8008cec:	4648      	mov	r0, r9
 8008cee:	f007 f83c 	bl	800fd6a <memcpy>
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8008cfe:	1842      	adds	r2, r0, r1
 8008d00:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8008d04:	f000 fd80 	bl	8009808 <uxr_object_id>
 8008d08:	6160      	str	r0, [r4, #20]
 8008d0a:	783b      	ldrb	r3, [r7, #0]
 8008d0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d0e:	d127      	bne.n	8008d60 <create_node+0xd4>
 8008d10:	787b      	ldrb	r3, [r7, #1]
 8008d12:	bb2b      	cbnz	r3, 8008d60 <create_node+0xd4>
 8008d14:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <create_node+0xe8>)
 8008d16:	4818      	ldr	r0, [pc, #96]	@ (8008d78 <create_node+0xec>)
 8008d18:	4633      	mov	r3, r6
 8008d1a:	213c      	movs	r1, #60	@ 0x3c
 8008d1c:	f006 fed8 	bl	800fad0 <sniprintf>
 8008d20:	6920      	ldr	r0, [r4, #16]
 8008d22:	4915      	ldr	r1, [pc, #84]	@ (8008d78 <create_node+0xec>)
 8008d24:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8008d28:	9100      	str	r1, [sp, #0]
 8008d2a:	2106      	movs	r1, #6
 8008d2c:	9101      	str	r1, [sp, #4]
 8008d2e:	6811      	ldr	r1, [r2, #0]
 8008d30:	6962      	ldr	r2, [r4, #20]
 8008d32:	fa1f f388 	uxth.w	r3, r8
 8008d36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008d3a:	f000 fc71 	bl	8009620 <uxr_buffer_create_participant_bin>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	6920      	ldr	r0, [r4, #16]
 8008d42:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8008d46:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8008d4a:	f000 fbf3 	bl	8009534 <run_xrce_session>
 8008d4e:	b918      	cbnz	r0, 8008d58 <create_node+0xcc>
 8008d50:	4628      	mov	r0, r5
 8008d52:	f000 fb23 	bl	800939c <rmw_uxrce_fini_node_memory>
 8008d56:	2500      	movs	r5, #0
 8008d58:	4628      	mov	r0, r5
 8008d5a:	b003      	add	sp, #12
 8008d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d60:	4a06      	ldr	r2, [pc, #24]	@ (8008d7c <create_node+0xf0>)
 8008d62:	9600      	str	r6, [sp, #0]
 8008d64:	463b      	mov	r3, r7
 8008d66:	213c      	movs	r1, #60	@ 0x3c
 8008d68:	4803      	ldr	r0, [pc, #12]	@ (8008d78 <create_node+0xec>)
 8008d6a:	f006 feb1 	bl	800fad0 <sniprintf>
 8008d6e:	e7d7      	b.n	8008d20 <create_node+0x94>
 8008d70:	2000a89c 	.word	0x2000a89c
 8008d74:	08010e74 	.word	0x08010e74
 8008d78:	20005f90 	.word	0x20005f90
 8008d7c:	08010c48 	.word	0x08010c48

08008d80 <rmw_create_node>:
 8008d80:	b199      	cbz	r1, 8008daa <rmw_create_node+0x2a>
 8008d82:	780b      	ldrb	r3, [r1, #0]
 8008d84:	468c      	mov	ip, r1
 8008d86:	b183      	cbz	r3, 8008daa <rmw_create_node+0x2a>
 8008d88:	b410      	push	{r4}
 8008d8a:	4614      	mov	r4, r2
 8008d8c:	b14a      	cbz	r2, 8008da2 <rmw_create_node+0x22>
 8008d8e:	7813      	ldrb	r3, [r2, #0]
 8008d90:	b13b      	cbz	r3, 8008da2 <rmw_create_node+0x22>
 8008d92:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8008d94:	4603      	mov	r3, r0
 8008d96:	4621      	mov	r1, r4
 8008d98:	4660      	mov	r0, ip
 8008d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9e:	f7ff bf75 	b.w	8008c8c <create_node>
 8008da2:	2000      	movs	r0, #0
 8008da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	2000      	movs	r0, #0
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop

08008db0 <rmw_destroy_node>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	b328      	cbz	r0, 8008e00 <rmw_destroy_node+0x50>
 8008db4:	4607      	mov	r7, r0
 8008db6:	6800      	ldr	r0, [r0, #0]
 8008db8:	b120      	cbz	r0, 8008dc4 <rmw_destroy_node+0x14>
 8008dba:	4b36      	ldr	r3, [pc, #216]	@ (8008e94 <rmw_destroy_node+0xe4>)
 8008dbc:	6819      	ldr	r1, [r3, #0]
 8008dbe:	f7f7 fa2f 	bl	8000220 <strcmp>
 8008dc2:	b9e8      	cbnz	r0, 8008e00 <rmw_destroy_node+0x50>
 8008dc4:	687d      	ldr	r5, [r7, #4]
 8008dc6:	b1dd      	cbz	r5, 8008e00 <rmw_destroy_node+0x50>
 8008dc8:	4b33      	ldr	r3, [pc, #204]	@ (8008e98 <rmw_destroy_node+0xe8>)
 8008dca:	681c      	ldr	r4, [r3, #0]
 8008dcc:	2c00      	cmp	r4, #0
 8008dce:	d05f      	beq.n	8008e90 <rmw_destroy_node+0xe0>
 8008dd0:	2600      	movs	r6, #0
 8008dd2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8008dd6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	d013      	beq.n	8008e06 <rmw_destroy_node+0x56>
 8008dde:	2c00      	cmp	r4, #0
 8008de0:	d1f7      	bne.n	8008dd2 <rmw_destroy_node+0x22>
 8008de2:	4b2e      	ldr	r3, [pc, #184]	@ (8008e9c <rmw_destroy_node+0xec>)
 8008de4:	681c      	ldr	r4, [r3, #0]
 8008de6:	b1c4      	cbz	r4, 8008e1a <rmw_destroy_node+0x6a>
 8008de8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8008dec:	6a0b      	ldr	r3, [r1, #32]
 8008dee:	429d      	cmp	r5, r3
 8008df0:	d1f9      	bne.n	8008de6 <rmw_destroy_node+0x36>
 8008df2:	317c      	adds	r1, #124	@ 0x7c
 8008df4:	4638      	mov	r0, r7
 8008df6:	f000 f8f3 	bl	8008fe0 <rmw_destroy_subscription>
 8008dfa:	2801      	cmp	r0, #1
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	d1f2      	bne.n	8008de6 <rmw_destroy_node+0x36>
 8008e00:	2601      	movs	r6, #1
 8008e02:	4630      	mov	r0, r6
 8008e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e06:	3184      	adds	r1, #132	@ 0x84
 8008e08:	4638      	mov	r0, r7
 8008e0a:	f000 f853 	bl	8008eb4 <rmw_destroy_publisher>
 8008e0e:	2801      	cmp	r0, #1
 8008e10:	4606      	mov	r6, r0
 8008e12:	d0f5      	beq.n	8008e00 <rmw_destroy_node+0x50>
 8008e14:	2c00      	cmp	r4, #0
 8008e16:	d1dc      	bne.n	8008dd2 <rmw_destroy_node+0x22>
 8008e18:	e7e3      	b.n	8008de2 <rmw_destroy_node+0x32>
 8008e1a:	4b21      	ldr	r3, [pc, #132]	@ (8008ea0 <rmw_destroy_node+0xf0>)
 8008e1c:	681c      	ldr	r4, [r3, #0]
 8008e1e:	b16c      	cbz	r4, 8008e3c <rmw_destroy_node+0x8c>
 8008e20:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8008e24:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8008e26:	429d      	cmp	r5, r3
 8008e28:	d1f9      	bne.n	8008e1e <rmw_destroy_node+0x6e>
 8008e2a:	317c      	adds	r1, #124	@ 0x7c
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	f000 f893 	bl	8008f58 <rmw_destroy_service>
 8008e32:	2801      	cmp	r0, #1
 8008e34:	4606      	mov	r6, r0
 8008e36:	d0e3      	beq.n	8008e00 <rmw_destroy_node+0x50>
 8008e38:	2c00      	cmp	r4, #0
 8008e3a:	d1f1      	bne.n	8008e20 <rmw_destroy_node+0x70>
 8008e3c:	4b19      	ldr	r3, [pc, #100]	@ (8008ea4 <rmw_destroy_node+0xf4>)
 8008e3e:	681c      	ldr	r4, [r3, #0]
 8008e40:	b16c      	cbz	r4, 8008e5e <rmw_destroy_node+0xae>
 8008e42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8008e46:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8008e48:	429d      	cmp	r5, r3
 8008e4a:	d1f9      	bne.n	8008e40 <rmw_destroy_node+0x90>
 8008e4c:	317c      	adds	r1, #124	@ 0x7c
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f004 faaa 	bl	800d3a8 <rmw_destroy_client>
 8008e54:	2801      	cmp	r0, #1
 8008e56:	4606      	mov	r6, r0
 8008e58:	d0d2      	beq.n	8008e00 <rmw_destroy_node+0x50>
 8008e5a:	2c00      	cmp	r4, #0
 8008e5c:	d1f1      	bne.n	8008e42 <rmw_destroy_node+0x92>
 8008e5e:	6928      	ldr	r0, [r5, #16]
 8008e60:	696a      	ldr	r2, [r5, #20]
 8008e62:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8008e66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008e6a:	6819      	ldr	r1, [r3, #0]
 8008e6c:	f000 fb8c 	bl	8009588 <uxr_buffer_delete_entity>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6928      	ldr	r0, [r5, #16]
 8008e74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8008e78:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8008e7c:	f000 fb5a 	bl	8009534 <run_xrce_session>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	bf08      	it	eq
 8008e84:	2602      	moveq	r6, #2
 8008e86:	4638      	mov	r0, r7
 8008e88:	f000 fa88 	bl	800939c <rmw_uxrce_fini_node_memory>
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e90:	4626      	mov	r6, r4
 8008e92:	e7a6      	b.n	8008de2 <rmw_destroy_node+0x32>
 8008e94:	080112d4 	.word	0x080112d4
 8008e98:	2000a8ac 	.word	0x2000a8ac
 8008e9c:	2000a8ec 	.word	0x2000a8ec
 8008ea0:	2000a8bc 	.word	0x2000a8bc
 8008ea4:	20005fcc 	.word	0x20005fcc

08008ea8 <rmw_node_get_graph_guard_condition>:
 8008ea8:	6843      	ldr	r3, [r0, #4]
 8008eaa:	6918      	ldr	r0, [r3, #16]
 8008eac:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop

08008eb4 <rmw_destroy_publisher>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	b128      	cbz	r0, 8008ec4 <rmw_destroy_publisher+0x10>
 8008eb8:	4604      	mov	r4, r0
 8008eba:	6800      	ldr	r0, [r0, #0]
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	f000 fb55 	bl	800956c <is_uxrce_rmw_identifier_valid>
 8008ec2:	b910      	cbnz	r0, 8008eca <rmw_destroy_publisher+0x16>
 8008ec4:	2401      	movs	r4, #1
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0f9      	beq.n	8008ec4 <rmw_destroy_publisher+0x10>
 8008ed0:	2d00      	cmp	r5, #0
 8008ed2:	d0f7      	beq.n	8008ec4 <rmw_destroy_publisher+0x10>
 8008ed4:	6828      	ldr	r0, [r5, #0]
 8008ed6:	f000 fb49 	bl	800956c <is_uxrce_rmw_identifier_valid>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d0f2      	beq.n	8008ec4 <rmw_destroy_publisher+0x10>
 8008ede:	686c      	ldr	r4, [r5, #4]
 8008ee0:	2c00      	cmp	r4, #0
 8008ee2:	d0ef      	beq.n	8008ec4 <rmw_destroy_publisher+0x10>
 8008ee4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008ee6:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8008eea:	f004 faa7 	bl	800d43c <destroy_topic>
 8008eee:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008ef2:	6962      	ldr	r2, [r4, #20]
 8008ef4:	6918      	ldr	r0, [r3, #16]
 8008ef6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8008efa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	f000 fb42 	bl	8009588 <uxr_buffer_delete_entity>
 8008f04:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008f08:	6922      	ldr	r2, [r4, #16]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8008f10:	4604      	mov	r4, r0
 8008f12:	6809      	ldr	r1, [r1, #0]
 8008f14:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8008f18:	f000 fb36 	bl	8009588 <uxr_buffer_delete_entity>
 8008f1c:	693e      	ldr	r6, [r7, #16]
 8008f1e:	4622      	mov	r2, r4
 8008f20:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8008f24:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8008f28:	4604      	mov	r4, r0
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f000 fb02 	bl	8009534 <run_xrce_session>
 8008f30:	693e      	ldr	r6, [r7, #16]
 8008f32:	4622      	mov	r2, r4
 8008f34:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8008f38:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f000 faf8 	bl	8009534 <run_xrce_session>
 8008f44:	b12c      	cbz	r4, 8008f52 <rmw_destroy_publisher+0x9e>
 8008f46:	b120      	cbz	r0, 8008f52 <rmw_destroy_publisher+0x9e>
 8008f48:	2400      	movs	r4, #0
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f000 fa3e 	bl	80093cc <rmw_uxrce_fini_publisher_memory>
 8008f50:	e7b9      	b.n	8008ec6 <rmw_destroy_publisher+0x12>
 8008f52:	2402      	movs	r4, #2
 8008f54:	e7f9      	b.n	8008f4a <rmw_destroy_publisher+0x96>
 8008f56:	bf00      	nop

08008f58 <rmw_destroy_service>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	b128      	cbz	r0, 8008f68 <rmw_destroy_service+0x10>
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	6800      	ldr	r0, [r0, #0]
 8008f60:	460d      	mov	r5, r1
 8008f62:	f000 fb03 	bl	800956c <is_uxrce_rmw_identifier_valid>
 8008f66:	b910      	cbnz	r0, 8008f6e <rmw_destroy_service+0x16>
 8008f68:	2401      	movs	r4, #1
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
 8008f6e:	6863      	ldr	r3, [r4, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0f9      	beq.n	8008f68 <rmw_destroy_service+0x10>
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	d0f7      	beq.n	8008f68 <rmw_destroy_service+0x10>
 8008f78:	6828      	ldr	r0, [r5, #0]
 8008f7a:	f000 faf7 	bl	800956c <is_uxrce_rmw_identifier_valid>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d0f2      	beq.n	8008f68 <rmw_destroy_service+0x10>
 8008f82:	686e      	ldr	r6, [r5, #4]
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	d0ef      	beq.n	8008f68 <rmw_destroy_service+0x10>
 8008f88:	6864      	ldr	r4, [r4, #4]
 8008f8a:	6932      	ldr	r2, [r6, #16]
 8008f8c:	6920      	ldr	r0, [r4, #16]
 8008f8e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8008f92:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008f96:	6819      	ldr	r1, [r3, #0]
 8008f98:	f000 fc66 	bl	8009868 <uxr_buffer_cancel_data>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	6920      	ldr	r0, [r4, #16]
 8008fa0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8008fa4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8008fa8:	f000 fac4 	bl	8009534 <run_xrce_session>
 8008fac:	6920      	ldr	r0, [r4, #16]
 8008fae:	6932      	ldr	r2, [r6, #16]
 8008fb0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8008fb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008fb8:	6819      	ldr	r1, [r3, #0]
 8008fba:	f000 fae5 	bl	8009588 <uxr_buffer_delete_entity>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	6920      	ldr	r0, [r4, #16]
 8008fc2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8008fc6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8008fca:	f000 fab3 	bl	8009534 <run_xrce_session>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	bf14      	ite	ne
 8008fd4:	2400      	movne	r4, #0
 8008fd6:	2402      	moveq	r4, #2
 8008fd8:	f000 fa24 	bl	8009424 <rmw_uxrce_fini_service_memory>
 8008fdc:	e7c5      	b.n	8008f6a <rmw_destroy_service+0x12>
 8008fde:	bf00      	nop

08008fe0 <rmw_destroy_subscription>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	b128      	cbz	r0, 8008ff0 <rmw_destroy_subscription+0x10>
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	6800      	ldr	r0, [r0, #0]
 8008fe8:	460d      	mov	r5, r1
 8008fea:	f000 fabf 	bl	800956c <is_uxrce_rmw_identifier_valid>
 8008fee:	b910      	cbnz	r0, 8008ff6 <rmw_destroy_subscription+0x16>
 8008ff0:	2401      	movs	r4, #1
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff6:	6863      	ldr	r3, [r4, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0f9      	beq.n	8008ff0 <rmw_destroy_subscription+0x10>
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	d0f7      	beq.n	8008ff0 <rmw_destroy_subscription+0x10>
 8009000:	6828      	ldr	r0, [r5, #0]
 8009002:	f000 fab3 	bl	800956c <is_uxrce_rmw_identifier_valid>
 8009006:	2800      	cmp	r0, #0
 8009008:	d0f2      	beq.n	8008ff0 <rmw_destroy_subscription+0x10>
 800900a:	686c      	ldr	r4, [r5, #4]
 800900c:	2c00      	cmp	r4, #0
 800900e:	d0ef      	beq.n	8008ff0 <rmw_destroy_subscription+0x10>
 8009010:	6a26      	ldr	r6, [r4, #32]
 8009012:	6962      	ldr	r2, [r4, #20]
 8009014:	6930      	ldr	r0, [r6, #16]
 8009016:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800901a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800901e:	6819      	ldr	r1, [r3, #0]
 8009020:	f000 fc22 	bl	8009868 <uxr_buffer_cancel_data>
 8009024:	4602      	mov	r2, r0
 8009026:	6930      	ldr	r0, [r6, #16]
 8009028:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800902c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009030:	f000 fa80 	bl	8009534 <run_xrce_session>
 8009034:	69e0      	ldr	r0, [r4, #28]
 8009036:	f004 fa01 	bl	800d43c <destroy_topic>
 800903a:	6a23      	ldr	r3, [r4, #32]
 800903c:	6962      	ldr	r2, [r4, #20]
 800903e:	6918      	ldr	r0, [r3, #16]
 8009040:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009044:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	f000 fa9d 	bl	8009588 <uxr_buffer_delete_entity>
 800904e:	6a23      	ldr	r3, [r4, #32]
 8009050:	6922      	ldr	r2, [r4, #16]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8009058:	4604      	mov	r4, r0
 800905a:	6809      	ldr	r1, [r1, #0]
 800905c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8009060:	f000 fa92 	bl	8009588 <uxr_buffer_delete_entity>
 8009064:	6937      	ldr	r7, [r6, #16]
 8009066:	4622      	mov	r2, r4
 8009068:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800906c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8009070:	4604      	mov	r4, r0
 8009072:	4638      	mov	r0, r7
 8009074:	f000 fa5e 	bl	8009534 <run_xrce_session>
 8009078:	6936      	ldr	r6, [r6, #16]
 800907a:	4622      	mov	r2, r4
 800907c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8009080:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8009084:	4604      	mov	r4, r0
 8009086:	4630      	mov	r0, r6
 8009088:	f000 fa54 	bl	8009534 <run_xrce_session>
 800908c:	b12c      	cbz	r4, 800909a <rmw_destroy_subscription+0xba>
 800908e:	b120      	cbz	r0, 800909a <rmw_destroy_subscription+0xba>
 8009090:	2400      	movs	r4, #0
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f9b0 	bl	80093f8 <rmw_uxrce_fini_subscription_memory>
 8009098:	e7ab      	b.n	8008ff2 <rmw_destroy_subscription+0x12>
 800909a:	2402      	movs	r4, #2
 800909c:	e7f9      	b.n	8009092 <rmw_destroy_subscription+0xb2>
 800909e:	bf00      	nop

080090a0 <rmw_uxrce_transport_init>:
 80090a0:	b508      	push	{r3, lr}
 80090a2:	b108      	cbz	r0, 80090a8 <rmw_uxrce_transport_init+0x8>
 80090a4:	f100 0210 	add.w	r2, r0, #16
 80090a8:	b139      	cbz	r1, 80090ba <rmw_uxrce_transport_init+0x1a>
 80090aa:	6949      	ldr	r1, [r1, #20]
 80090ac:	4610      	mov	r0, r2
 80090ae:	f000 fb73 	bl	8009798 <uxr_init_custom_transport>
 80090b2:	f080 0001 	eor.w	r0, r0, #1
 80090b6:	b2c0      	uxtb	r0, r0
 80090b8:	bd08      	pop	{r3, pc}
 80090ba:	4b04      	ldr	r3, [pc, #16]	@ (80090cc <rmw_uxrce_transport_init+0x2c>)
 80090bc:	4610      	mov	r0, r2
 80090be:	6859      	ldr	r1, [r3, #4]
 80090c0:	f000 fb6a 	bl	8009798 <uxr_init_custom_transport>
 80090c4:	f080 0001 	eor.w	r0, r0, #1
 80090c8:	b2c0      	uxtb	r0, r0
 80090ca:	bd08      	pop	{r3, pc}
 80090cc:	20005f74 	.word	0x20005f74

080090d0 <rmw_uxrce_init_service_memory>:
 80090d0:	b1e2      	cbz	r2, 800910c <rmw_uxrce_init_service_memory+0x3c>
 80090d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d6:	7b05      	ldrb	r5, [r0, #12]
 80090d8:	4606      	mov	r6, r0
 80090da:	b9ad      	cbnz	r5, 8009108 <rmw_uxrce_init_service_memory+0x38>
 80090dc:	23c8      	movs	r3, #200	@ 0xc8
 80090de:	e9c0 5500 	strd	r5, r5, [r0]
 80090e2:	6083      	str	r3, [r0, #8]
 80090e4:	f240 1301 	movw	r3, #257	@ 0x101
 80090e8:	4617      	mov	r7, r2
 80090ea:	8183      	strh	r3, [r0, #12]
 80090ec:	460c      	mov	r4, r1
 80090ee:	46a8      	mov	r8, r5
 80090f0:	4621      	mov	r1, r4
 80090f2:	4630      	mov	r0, r6
 80090f4:	3501      	adds	r5, #1
 80090f6:	f004 f943 	bl	800d380 <put_memory>
 80090fa:	42af      	cmp	r7, r5
 80090fc:	60a4      	str	r4, [r4, #8]
 80090fe:	f884 800c 	strb.w	r8, [r4, #12]
 8009102:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8009106:	d1f3      	bne.n	80090f0 <rmw_uxrce_init_service_memory+0x20>
 8009108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop

08009110 <rmw_uxrce_init_client_memory>:
 8009110:	b1e2      	cbz	r2, 800914c <rmw_uxrce_init_client_memory+0x3c>
 8009112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009116:	7b05      	ldrb	r5, [r0, #12]
 8009118:	4606      	mov	r6, r0
 800911a:	b9ad      	cbnz	r5, 8009148 <rmw_uxrce_init_client_memory+0x38>
 800911c:	23c8      	movs	r3, #200	@ 0xc8
 800911e:	e9c0 5500 	strd	r5, r5, [r0]
 8009122:	6083      	str	r3, [r0, #8]
 8009124:	f240 1301 	movw	r3, #257	@ 0x101
 8009128:	4617      	mov	r7, r2
 800912a:	8183      	strh	r3, [r0, #12]
 800912c:	460c      	mov	r4, r1
 800912e:	46a8      	mov	r8, r5
 8009130:	4621      	mov	r1, r4
 8009132:	4630      	mov	r0, r6
 8009134:	3501      	adds	r5, #1
 8009136:	f004 f923 	bl	800d380 <put_memory>
 800913a:	42af      	cmp	r7, r5
 800913c:	60a4      	str	r4, [r4, #8]
 800913e:	f884 800c 	strb.w	r8, [r4, #12]
 8009142:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8009146:	d1f3      	bne.n	8009130 <rmw_uxrce_init_client_memory+0x20>
 8009148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <rmw_uxrce_init_publisher_memory>:
 8009150:	b1e2      	cbz	r2, 800918c <rmw_uxrce_init_publisher_memory+0x3c>
 8009152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009156:	7b05      	ldrb	r5, [r0, #12]
 8009158:	4606      	mov	r6, r0
 800915a:	b9ad      	cbnz	r5, 8009188 <rmw_uxrce_init_publisher_memory+0x38>
 800915c:	23d8      	movs	r3, #216	@ 0xd8
 800915e:	e9c0 5500 	strd	r5, r5, [r0]
 8009162:	6083      	str	r3, [r0, #8]
 8009164:	f240 1301 	movw	r3, #257	@ 0x101
 8009168:	4617      	mov	r7, r2
 800916a:	8183      	strh	r3, [r0, #12]
 800916c:	460c      	mov	r4, r1
 800916e:	46a8      	mov	r8, r5
 8009170:	4621      	mov	r1, r4
 8009172:	4630      	mov	r0, r6
 8009174:	3501      	adds	r5, #1
 8009176:	f004 f903 	bl	800d380 <put_memory>
 800917a:	42af      	cmp	r7, r5
 800917c:	60a4      	str	r4, [r4, #8]
 800917e:	f884 800c 	strb.w	r8, [r4, #12]
 8009182:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8009186:	d1f3      	bne.n	8009170 <rmw_uxrce_init_publisher_memory+0x20>
 8009188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop

08009190 <rmw_uxrce_init_subscription_memory>:
 8009190:	b1e2      	cbz	r2, 80091cc <rmw_uxrce_init_subscription_memory+0x3c>
 8009192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009196:	7b05      	ldrb	r5, [r0, #12]
 8009198:	4606      	mov	r6, r0
 800919a:	b9ad      	cbnz	r5, 80091c8 <rmw_uxrce_init_subscription_memory+0x38>
 800919c:	23d8      	movs	r3, #216	@ 0xd8
 800919e:	e9c0 5500 	strd	r5, r5, [r0]
 80091a2:	6083      	str	r3, [r0, #8]
 80091a4:	f240 1301 	movw	r3, #257	@ 0x101
 80091a8:	4617      	mov	r7, r2
 80091aa:	8183      	strh	r3, [r0, #12]
 80091ac:	460c      	mov	r4, r1
 80091ae:	46a8      	mov	r8, r5
 80091b0:	4621      	mov	r1, r4
 80091b2:	4630      	mov	r0, r6
 80091b4:	3501      	adds	r5, #1
 80091b6:	f004 f8e3 	bl	800d380 <put_memory>
 80091ba:	42af      	cmp	r7, r5
 80091bc:	60a4      	str	r4, [r4, #8]
 80091be:	f884 800c 	strb.w	r8, [r4, #12]
 80091c2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 80091c6:	d1f3      	bne.n	80091b0 <rmw_uxrce_init_subscription_memory+0x20>
 80091c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop

080091d0 <rmw_uxrce_init_node_memory>:
 80091d0:	b1e2      	cbz	r2, 800920c <rmw_uxrce_init_node_memory+0x3c>
 80091d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d6:	7b05      	ldrb	r5, [r0, #12]
 80091d8:	4606      	mov	r6, r0
 80091da:	b9ad      	cbnz	r5, 8009208 <rmw_uxrce_init_node_memory+0x38>
 80091dc:	23a4      	movs	r3, #164	@ 0xa4
 80091de:	e9c0 5500 	strd	r5, r5, [r0]
 80091e2:	6083      	str	r3, [r0, #8]
 80091e4:	f240 1301 	movw	r3, #257	@ 0x101
 80091e8:	4617      	mov	r7, r2
 80091ea:	8183      	strh	r3, [r0, #12]
 80091ec:	460c      	mov	r4, r1
 80091ee:	46a8      	mov	r8, r5
 80091f0:	4621      	mov	r1, r4
 80091f2:	4630      	mov	r0, r6
 80091f4:	3501      	adds	r5, #1
 80091f6:	f004 f8c3 	bl	800d380 <put_memory>
 80091fa:	42af      	cmp	r7, r5
 80091fc:	60a4      	str	r4, [r4, #8]
 80091fe:	f884 800c 	strb.w	r8, [r4, #12]
 8009202:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8009206:	d1f3      	bne.n	80091f0 <rmw_uxrce_init_node_memory+0x20>
 8009208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop

08009210 <rmw_uxrce_init_session_memory>:
 8009210:	b1ea      	cbz	r2, 800924e <rmw_uxrce_init_session_memory+0x3e>
 8009212:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009216:	7b05      	ldrb	r5, [r0, #12]
 8009218:	4606      	mov	r6, r0
 800921a:	b9b5      	cbnz	r5, 800924a <rmw_uxrce_init_session_memory+0x3a>
 800921c:	e9c0 5500 	strd	r5, r5, [r0]
 8009220:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8009224:	f240 1301 	movw	r3, #257	@ 0x101
 8009228:	4617      	mov	r7, r2
 800922a:	f8c0 8008 	str.w	r8, [r0, #8]
 800922e:	460c      	mov	r4, r1
 8009230:	8183      	strh	r3, [r0, #12]
 8009232:	46a9      	mov	r9, r5
 8009234:	4621      	mov	r1, r4
 8009236:	4630      	mov	r0, r6
 8009238:	3501      	adds	r5, #1
 800923a:	f004 f8a1 	bl	800d380 <put_memory>
 800923e:	42af      	cmp	r7, r5
 8009240:	60a4      	str	r4, [r4, #8]
 8009242:	f884 900c 	strb.w	r9, [r4, #12]
 8009246:	4444      	add	r4, r8
 8009248:	d1f4      	bne.n	8009234 <rmw_uxrce_init_session_memory+0x24>
 800924a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924e:	4770      	bx	lr

08009250 <rmw_uxrce_init_topic_memory>:
 8009250:	b1e2      	cbz	r2, 800928c <rmw_uxrce_init_topic_memory+0x3c>
 8009252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009256:	7b05      	ldrb	r5, [r0, #12]
 8009258:	4606      	mov	r6, r0
 800925a:	b9ad      	cbnz	r5, 8009288 <rmw_uxrce_init_topic_memory+0x38>
 800925c:	231c      	movs	r3, #28
 800925e:	e9c0 5500 	strd	r5, r5, [r0]
 8009262:	6083      	str	r3, [r0, #8]
 8009264:	f240 1301 	movw	r3, #257	@ 0x101
 8009268:	4617      	mov	r7, r2
 800926a:	8183      	strh	r3, [r0, #12]
 800926c:	460c      	mov	r4, r1
 800926e:	46a8      	mov	r8, r5
 8009270:	4621      	mov	r1, r4
 8009272:	4630      	mov	r0, r6
 8009274:	3501      	adds	r5, #1
 8009276:	f004 f883 	bl	800d380 <put_memory>
 800927a:	42af      	cmp	r7, r5
 800927c:	60a4      	str	r4, [r4, #8]
 800927e:	f884 800c 	strb.w	r8, [r4, #12]
 8009282:	f104 041c 	add.w	r4, r4, #28
 8009286:	d1f3      	bne.n	8009270 <rmw_uxrce_init_topic_memory+0x20>
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop

08009290 <rmw_uxrce_init_static_input_buffer_memory>:
 8009290:	b1ea      	cbz	r2, 80092ce <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8009292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	7b05      	ldrb	r5, [r0, #12]
 8009298:	4606      	mov	r6, r0
 800929a:	b9b5      	cbnz	r5, 80092ca <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800929c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80092a0:	e9c0 5500 	strd	r5, r5, [r0]
 80092a4:	6083      	str	r3, [r0, #8]
 80092a6:	f240 1301 	movw	r3, #257	@ 0x101
 80092aa:	4617      	mov	r7, r2
 80092ac:	8183      	strh	r3, [r0, #12]
 80092ae:	460c      	mov	r4, r1
 80092b0:	46a8      	mov	r8, r5
 80092b2:	4621      	mov	r1, r4
 80092b4:	4630      	mov	r0, r6
 80092b6:	3501      	adds	r5, #1
 80092b8:	f004 f862 	bl	800d380 <put_memory>
 80092bc:	42af      	cmp	r7, r5
 80092be:	60a4      	str	r4, [r4, #8]
 80092c0:	f884 800c 	strb.w	r8, [r4, #12]
 80092c4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 80092c8:	d1f3      	bne.n	80092b2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80092ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ce:	4770      	bx	lr

080092d0 <rmw_uxrce_init_init_options_impl_memory>:
 80092d0:	b1e2      	cbz	r2, 800930c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80092d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d6:	7b05      	ldrb	r5, [r0, #12]
 80092d8:	4606      	mov	r6, r0
 80092da:	b9ad      	cbnz	r5, 8009308 <rmw_uxrce_init_init_options_impl_memory+0x38>
 80092dc:	232c      	movs	r3, #44	@ 0x2c
 80092de:	e9c0 5500 	strd	r5, r5, [r0]
 80092e2:	6083      	str	r3, [r0, #8]
 80092e4:	f240 1301 	movw	r3, #257	@ 0x101
 80092e8:	4617      	mov	r7, r2
 80092ea:	8183      	strh	r3, [r0, #12]
 80092ec:	460c      	mov	r4, r1
 80092ee:	46a8      	mov	r8, r5
 80092f0:	4621      	mov	r1, r4
 80092f2:	4630      	mov	r0, r6
 80092f4:	3501      	adds	r5, #1
 80092f6:	f004 f843 	bl	800d380 <put_memory>
 80092fa:	42af      	cmp	r7, r5
 80092fc:	60a4      	str	r4, [r4, #8]
 80092fe:	f884 800c 	strb.w	r8, [r4, #12]
 8009302:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8009306:	d1f3      	bne.n	80092f0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop

08009310 <rmw_uxrce_init_wait_set_memory>:
 8009310:	b1e2      	cbz	r2, 800934c <rmw_uxrce_init_wait_set_memory+0x3c>
 8009312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009316:	7b05      	ldrb	r5, [r0, #12]
 8009318:	4606      	mov	r6, r0
 800931a:	b9ad      	cbnz	r5, 8009348 <rmw_uxrce_init_wait_set_memory+0x38>
 800931c:	231c      	movs	r3, #28
 800931e:	e9c0 5500 	strd	r5, r5, [r0]
 8009322:	6083      	str	r3, [r0, #8]
 8009324:	f240 1301 	movw	r3, #257	@ 0x101
 8009328:	4617      	mov	r7, r2
 800932a:	8183      	strh	r3, [r0, #12]
 800932c:	460c      	mov	r4, r1
 800932e:	46a8      	mov	r8, r5
 8009330:	4621      	mov	r1, r4
 8009332:	4630      	mov	r0, r6
 8009334:	3501      	adds	r5, #1
 8009336:	f004 f823 	bl	800d380 <put_memory>
 800933a:	42af      	cmp	r7, r5
 800933c:	60a4      	str	r4, [r4, #8]
 800933e:	f884 800c 	strb.w	r8, [r4, #12]
 8009342:	f104 041c 	add.w	r4, r4, #28
 8009346:	d1f3      	bne.n	8009330 <rmw_uxrce_init_wait_set_memory+0x20>
 8009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop

08009350 <rmw_uxrce_init_guard_condition_memory>:
 8009350:	b1e2      	cbz	r2, 800938c <rmw_uxrce_init_guard_condition_memory+0x3c>
 8009352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009356:	7b05      	ldrb	r5, [r0, #12]
 8009358:	4606      	mov	r6, r0
 800935a:	b9ad      	cbnz	r5, 8009388 <rmw_uxrce_init_guard_condition_memory+0x38>
 800935c:	2320      	movs	r3, #32
 800935e:	e9c0 5500 	strd	r5, r5, [r0]
 8009362:	6083      	str	r3, [r0, #8]
 8009364:	f240 1301 	movw	r3, #257	@ 0x101
 8009368:	4617      	mov	r7, r2
 800936a:	8183      	strh	r3, [r0, #12]
 800936c:	460c      	mov	r4, r1
 800936e:	46a8      	mov	r8, r5
 8009370:	4621      	mov	r1, r4
 8009372:	4630      	mov	r0, r6
 8009374:	3501      	adds	r5, #1
 8009376:	f004 f803 	bl	800d380 <put_memory>
 800937a:	42af      	cmp	r7, r5
 800937c:	60a4      	str	r4, [r4, #8]
 800937e:	f884 800c 	strb.w	r8, [r4, #12]
 8009382:	f104 0420 	add.w	r4, r4, #32
 8009386:	d1f3      	bne.n	8009370 <rmw_uxrce_init_guard_condition_memory+0x20>
 8009388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop

08009390 <rmw_uxrce_fini_session_memory>:
 8009390:	4601      	mov	r1, r0
 8009392:	4801      	ldr	r0, [pc, #4]	@ (8009398 <rmw_uxrce_fini_session_memory+0x8>)
 8009394:	f003 bff4 	b.w	800d380 <put_memory>
 8009398:	2000a8cc 	.word	0x2000a8cc

0800939c <rmw_uxrce_fini_node_memory>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	6800      	ldr	r0, [r0, #0]
 80093a2:	b128      	cbz	r0, 80093b0 <rmw_uxrce_fini_node_memory+0x14>
 80093a4:	4b07      	ldr	r3, [pc, #28]	@ (80093c4 <rmw_uxrce_fini_node_memory+0x28>)
 80093a6:	6819      	ldr	r1, [r3, #0]
 80093a8:	f7f6 ff3a 	bl	8000220 <strcmp>
 80093ac:	b940      	cbnz	r0, 80093c0 <rmw_uxrce_fini_node_memory+0x24>
 80093ae:	6020      	str	r0, [r4, #0]
 80093b0:	6861      	ldr	r1, [r4, #4]
 80093b2:	b129      	cbz	r1, 80093c0 <rmw_uxrce_fini_node_memory+0x24>
 80093b4:	2500      	movs	r5, #0
 80093b6:	4804      	ldr	r0, [pc, #16]	@ (80093c8 <rmw_uxrce_fini_node_memory+0x2c>)
 80093b8:	610d      	str	r5, [r1, #16]
 80093ba:	f003 ffe1 	bl	800d380 <put_memory>
 80093be:	6065      	str	r5, [r4, #4]
 80093c0:	bd38      	pop	{r3, r4, r5, pc}
 80093c2:	bf00      	nop
 80093c4:	080112d4 	.word	0x080112d4
 80093c8:	2000a89c 	.word	0x2000a89c

080093cc <rmw_uxrce_fini_publisher_memory>:
 80093cc:	b510      	push	{r4, lr}
 80093ce:	4604      	mov	r4, r0
 80093d0:	6800      	ldr	r0, [r0, #0]
 80093d2:	b128      	cbz	r0, 80093e0 <rmw_uxrce_fini_publisher_memory+0x14>
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <rmw_uxrce_fini_publisher_memory+0x24>)
 80093d6:	6819      	ldr	r1, [r3, #0]
 80093d8:	f7f6 ff22 	bl	8000220 <strcmp>
 80093dc:	b938      	cbnz	r0, 80093ee <rmw_uxrce_fini_publisher_memory+0x22>
 80093de:	6020      	str	r0, [r4, #0]
 80093e0:	6861      	ldr	r1, [r4, #4]
 80093e2:	b121      	cbz	r1, 80093ee <rmw_uxrce_fini_publisher_memory+0x22>
 80093e4:	4803      	ldr	r0, [pc, #12]	@ (80093f4 <rmw_uxrce_fini_publisher_memory+0x28>)
 80093e6:	f003 ffcb 	bl	800d380 <put_memory>
 80093ea:	2300      	movs	r3, #0
 80093ec:	6063      	str	r3, [r4, #4]
 80093ee:	bd10      	pop	{r4, pc}
 80093f0:	080112d4 	.word	0x080112d4
 80093f4:	2000a8ac 	.word	0x2000a8ac

080093f8 <rmw_uxrce_fini_subscription_memory>:
 80093f8:	b510      	push	{r4, lr}
 80093fa:	4604      	mov	r4, r0
 80093fc:	6800      	ldr	r0, [r0, #0]
 80093fe:	b128      	cbz	r0, 800940c <rmw_uxrce_fini_subscription_memory+0x14>
 8009400:	4b06      	ldr	r3, [pc, #24]	@ (800941c <rmw_uxrce_fini_subscription_memory+0x24>)
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	f7f6 ff0c 	bl	8000220 <strcmp>
 8009408:	b938      	cbnz	r0, 800941a <rmw_uxrce_fini_subscription_memory+0x22>
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	6861      	ldr	r1, [r4, #4]
 800940e:	b121      	cbz	r1, 800941a <rmw_uxrce_fini_subscription_memory+0x22>
 8009410:	4803      	ldr	r0, [pc, #12]	@ (8009420 <rmw_uxrce_fini_subscription_memory+0x28>)
 8009412:	f003 ffb5 	bl	800d380 <put_memory>
 8009416:	2300      	movs	r3, #0
 8009418:	6063      	str	r3, [r4, #4]
 800941a:	bd10      	pop	{r4, pc}
 800941c:	080112d4 	.word	0x080112d4
 8009420:	2000a8ec 	.word	0x2000a8ec

08009424 <rmw_uxrce_fini_service_memory>:
 8009424:	b510      	push	{r4, lr}
 8009426:	4604      	mov	r4, r0
 8009428:	6800      	ldr	r0, [r0, #0]
 800942a:	b128      	cbz	r0, 8009438 <rmw_uxrce_fini_service_memory+0x14>
 800942c:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <rmw_uxrce_fini_service_memory+0x24>)
 800942e:	6819      	ldr	r1, [r3, #0]
 8009430:	f7f6 fef6 	bl	8000220 <strcmp>
 8009434:	b938      	cbnz	r0, 8009446 <rmw_uxrce_fini_service_memory+0x22>
 8009436:	6020      	str	r0, [r4, #0]
 8009438:	6861      	ldr	r1, [r4, #4]
 800943a:	b121      	cbz	r1, 8009446 <rmw_uxrce_fini_service_memory+0x22>
 800943c:	4803      	ldr	r0, [pc, #12]	@ (800944c <rmw_uxrce_fini_service_memory+0x28>)
 800943e:	f003 ff9f 	bl	800d380 <put_memory>
 8009442:	2300      	movs	r3, #0
 8009444:	6063      	str	r3, [r4, #4]
 8009446:	bd10      	pop	{r4, pc}
 8009448:	080112d4 	.word	0x080112d4
 800944c:	2000a8bc 	.word	0x2000a8bc

08009450 <rmw_uxrce_fini_client_memory>:
 8009450:	b510      	push	{r4, lr}
 8009452:	4604      	mov	r4, r0
 8009454:	6800      	ldr	r0, [r0, #0]
 8009456:	b128      	cbz	r0, 8009464 <rmw_uxrce_fini_client_memory+0x14>
 8009458:	4b06      	ldr	r3, [pc, #24]	@ (8009474 <rmw_uxrce_fini_client_memory+0x24>)
 800945a:	6819      	ldr	r1, [r3, #0]
 800945c:	f7f6 fee0 	bl	8000220 <strcmp>
 8009460:	b938      	cbnz	r0, 8009472 <rmw_uxrce_fini_client_memory+0x22>
 8009462:	6020      	str	r0, [r4, #0]
 8009464:	6861      	ldr	r1, [r4, #4]
 8009466:	b121      	cbz	r1, 8009472 <rmw_uxrce_fini_client_memory+0x22>
 8009468:	4803      	ldr	r0, [pc, #12]	@ (8009478 <rmw_uxrce_fini_client_memory+0x28>)
 800946a:	f003 ff89 	bl	800d380 <put_memory>
 800946e:	2300      	movs	r3, #0
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	bd10      	pop	{r4, pc}
 8009474:	080112d4 	.word	0x080112d4
 8009478:	20005fcc 	.word	0x20005fcc

0800947c <rmw_uxrce_fini_topic_memory>:
 800947c:	b510      	push	{r4, lr}
 800947e:	4604      	mov	r4, r0
 8009480:	4621      	mov	r1, r4
 8009482:	4803      	ldr	r0, [pc, #12]	@ (8009490 <rmw_uxrce_fini_topic_memory+0x14>)
 8009484:	f003 ff7c 	bl	800d380 <put_memory>
 8009488:	2300      	movs	r3, #0
 800948a:	61a3      	str	r3, [r4, #24]
 800948c:	bd10      	pop	{r4, pc}
 800948e:	bf00      	nop
 8009490:	2000a8fc 	.word	0x2000a8fc

08009494 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8009494:	b082      	sub	sp, #8
 8009496:	b530      	push	{r4, r5, lr}
 8009498:	4925      	ldr	r1, [pc, #148]	@ (8009530 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800949a:	680d      	ldr	r5, [r1, #0]
 800949c:	ac03      	add	r4, sp, #12
 800949e:	e884 000c 	stmia.w	r4, {r2, r3}
 80094a2:	461c      	mov	r4, r3
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	d041      	beq.n	800952c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80094a8:	462b      	mov	r3, r5
 80094aa:	2100      	movs	r1, #0
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80094b4:	4290      	cmp	r0, r2
 80094b6:	bf08      	it	eq
 80094b8:	3101      	addeq	r1, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1f6      	bne.n	80094ac <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80094be:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d029      	beq.n	800951a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80094c6:	d907      	bls.n	80094d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d005      	beq.n	80094d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80094cc:	2100      	movs	r1, #0
 80094ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094d2:	4608      	mov	r0, r1
 80094d4:	b002      	add	sp, #8
 80094d6:	4770      	bx	lr
 80094d8:	b314      	cbz	r4, 8009520 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80094da:	428c      	cmp	r4, r1
 80094dc:	d820      	bhi.n	8009520 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80094de:	2d00      	cmp	r5, #0
 80094e0:	d0f4      	beq.n	80094cc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80094e2:	2100      	movs	r1, #0
 80094e4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80094e8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80094ec:	e002      	b.n	80094f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 80094ee:	686d      	ldr	r5, [r5, #4]
 80094f0:	2d00      	cmp	r5, #0
 80094f2:	d0ec      	beq.n	80094ce <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80094f4:	68ab      	ldr	r3, [r5, #8]
 80094f6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 80094fa:	4290      	cmp	r0, r2
 80094fc:	d1f7      	bne.n	80094ee <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80094fe:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8009502:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8009506:	4562      	cmp	r2, ip
 8009508:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800950c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8009510:	daed      	bge.n	80094ee <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8009512:	4694      	mov	ip, r2
 8009514:	461c      	mov	r4, r3
 8009516:	4629      	mov	r1, r5
 8009518:	e7e9      	b.n	80094ee <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800951a:	b10c      	cbz	r4, 8009520 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800951c:	428c      	cmp	r4, r1
 800951e:	d9d5      	bls.n	80094cc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8009520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009524:	4802      	ldr	r0, [pc, #8]	@ (8009530 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8009526:	b002      	add	sp, #8
 8009528:	f003 bf1a 	b.w	800d360 <get_memory>
 800952c:	4629      	mov	r1, r5
 800952e:	e7c6      	b.n	80094be <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8009530:	2000a8dc 	.word	0x2000a8dc

08009534 <run_xrce_session>:
 8009534:	b510      	push	{r4, lr}
 8009536:	788c      	ldrb	r4, [r1, #2]
 8009538:	b086      	sub	sp, #24
 800953a:	2c01      	cmp	r4, #1
 800953c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8009540:	d00c      	beq.n	800955c <run_xrce_session+0x28>
 8009542:	4619      	mov	r1, r3
 8009544:	2301      	movs	r3, #1
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	f10d 020e 	add.w	r2, sp, #14
 800954c:	f10d 0317 	add.w	r3, sp, #23
 8009550:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009554:	f000 ff22 	bl	800a39c <uxr_run_session_until_all_status>
 8009558:	b006      	add	sp, #24
 800955a:	bd10      	pop	{r4, pc}
 800955c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009560:	f000 fb96 	bl	8009c90 <uxr_flash_output_streams>
 8009564:	4620      	mov	r0, r4
 8009566:	b006      	add	sp, #24
 8009568:	bd10      	pop	{r4, pc}
 800956a:	bf00      	nop

0800956c <is_uxrce_rmw_identifier_valid>:
 800956c:	b510      	push	{r4, lr}
 800956e:	4604      	mov	r4, r0
 8009570:	b140      	cbz	r0, 8009584 <is_uxrce_rmw_identifier_valid+0x18>
 8009572:	f003 ff5d 	bl	800d430 <rmw_get_implementation_identifier>
 8009576:	4601      	mov	r1, r0
 8009578:	4620      	mov	r0, r4
 800957a:	f7f6 fe51 	bl	8000220 <strcmp>
 800957e:	fab0 f080 	clz	r0, r0
 8009582:	0940      	lsrs	r0, r0, #5
 8009584:	bd10      	pop	{r4, pc}
 8009586:	bf00      	nop

08009588 <uxr_buffer_delete_entity>:
 8009588:	b510      	push	{r4, lr}
 800958a:	2300      	movs	r3, #0
 800958c:	b08e      	sub	sp, #56	@ 0x38
 800958e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009592:	2303      	movs	r3, #3
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	2204      	movs	r2, #4
 8009598:	ab06      	add	r3, sp, #24
 800959a:	4604      	mov	r4, r0
 800959c:	9103      	str	r1, [sp, #12]
 800959e:	f001 f925 	bl	800a7ec <uxr_prepare_stream_to_write_submessage>
 80095a2:	b918      	cbnz	r0, 80095ac <uxr_buffer_delete_entity+0x24>
 80095a4:	4604      	mov	r4, r0
 80095a6:	4620      	mov	r0, r4
 80095a8:	b00e      	add	sp, #56	@ 0x38
 80095aa:	bd10      	pop	{r4, pc}
 80095ac:	9902      	ldr	r1, [sp, #8]
 80095ae:	aa05      	add	r2, sp, #20
 80095b0:	4620      	mov	r0, r4
 80095b2:	f001 fa51 	bl	800aa58 <uxr_init_base_object_request>
 80095b6:	a905      	add	r1, sp, #20
 80095b8:	4604      	mov	r4, r0
 80095ba:	a806      	add	r0, sp, #24
 80095bc:	f002 fd58 	bl	800c070 <uxr_serialize_DELETE_Payload>
 80095c0:	4620      	mov	r0, r4
 80095c2:	b00e      	add	sp, #56	@ 0x38
 80095c4:	bd10      	pop	{r4, pc}
 80095c6:	bf00      	nop

080095c8 <uxr_common_create_entity>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80095ce:	b08c      	sub	sp, #48	@ 0x30
 80095d0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80095d4:	f1bc 0f01 	cmp.w	ip, #1
 80095d8:	bf0c      	ite	eq
 80095da:	f003 0201 	andeq.w	r2, r3, #1
 80095de:	2200      	movne	r2, #0
 80095e0:	330e      	adds	r3, #14
 80095e2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80095e6:	9101      	str	r1, [sp, #4]
 80095e8:	441a      	add	r2, r3
 80095ea:	2301      	movs	r3, #1
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	9903      	ldr	r1, [sp, #12]
 80095f0:	ab04      	add	r3, sp, #16
 80095f2:	b292      	uxth	r2, r2
 80095f4:	4604      	mov	r4, r0
 80095f6:	f001 f8f9 	bl	800a7ec <uxr_prepare_stream_to_write_submessage>
 80095fa:	b918      	cbnz	r0, 8009604 <uxr_common_create_entity+0x3c>
 80095fc:	4604      	mov	r4, r0
 80095fe:	4620      	mov	r0, r4
 8009600:	b00c      	add	sp, #48	@ 0x30
 8009602:	bd10      	pop	{r4, pc}
 8009604:	9902      	ldr	r1, [sp, #8]
 8009606:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009608:	4620      	mov	r0, r4
 800960a:	f001 fa25 	bl	800aa58 <uxr_init_base_object_request>
 800960e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009610:	4604      	mov	r4, r0
 8009612:	a804      	add	r0, sp, #16
 8009614:	f002 fc88 	bl	800bf28 <uxr_serialize_CREATE_Payload>
 8009618:	4620      	mov	r0, r4
 800961a:	b00c      	add	sp, #48	@ 0x30
 800961c:	bd10      	pop	{r4, pc}
 800961e:	bf00      	nop

08009620 <uxr_buffer_create_participant_bin>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8009626:	ac11      	add	r4, sp, #68	@ 0x44
 8009628:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800962c:	2303      	movs	r3, #3
 800962e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009632:	7223      	strb	r3, [r4, #8]
 8009634:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8009636:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800963a:	2201      	movs	r2, #1
 800963c:	2100      	movs	r1, #0
 800963e:	4605      	mov	r5, r0
 8009640:	7122      	strb	r2, [r4, #4]
 8009642:	f88d 1014 	strb.w	r1, [sp, #20]
 8009646:	b1cb      	cbz	r3, 800967c <uxr_buffer_create_participant_bin+0x5c>
 8009648:	f88d 201c 	strb.w	r2, [sp, #28]
 800964c:	9308      	str	r3, [sp, #32]
 800964e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009652:	a915      	add	r1, sp, #84	@ 0x54
 8009654:	a809      	add	r0, sp, #36	@ 0x24
 8009656:	f004 ff8f 	bl	800e578 <ucdr_init_buffer>
 800965a:	a905      	add	r1, sp, #20
 800965c:	a809      	add	r0, sp, #36	@ 0x24
 800965e:	f002 fa87 	bl	800bb70 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009664:	9600      	str	r6, [sp, #0]
 8009666:	9401      	str	r4, [sp, #4]
 8009668:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800966c:	60e3      	str	r3, [r4, #12]
 800966e:	4628      	mov	r0, r5
 8009670:	b29b      	uxth	r3, r3
 8009672:	f7ff ffa9 	bl	80095c8 <uxr_common_create_entity>
 8009676:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	f88d 301c 	strb.w	r3, [sp, #28]
 8009680:	e7e5      	b.n	800964e <uxr_buffer_create_participant_bin+0x2e>
 8009682:	bf00      	nop

08009684 <get_custom_error>:
 8009684:	4b01      	ldr	r3, [pc, #4]	@ (800968c <get_custom_error+0x8>)
 8009686:	7818      	ldrb	r0, [r3, #0]
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	2000a91c 	.word	0x2000a91c

08009690 <recv_custom_msg>:
 8009690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009694:	4693      	mov	fp, r2
 8009696:	b089      	sub	sp, #36	@ 0x24
 8009698:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	468a      	mov	sl, r1
 80096a0:	2100      	movs	r1, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	f88d 101e 	strb.w	r1, [sp, #30]
 80096a8:	b322      	cbz	r2, 80096f4 <recv_custom_msg+0x64>
 80096aa:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80096ae:	f10d 081f 	add.w	r8, sp, #31
 80096b2:	af05      	add	r7, sp, #20
 80096b4:	f10d 061e 	add.w	r6, sp, #30
 80096b8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80096bc:	e002      	b.n	80096c4 <recv_custom_msg+0x34>
 80096be:	9b05      	ldr	r3, [sp, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dd0f      	ble.n	80096e4 <recv_custom_msg+0x54>
 80096c4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80096c8:	4623      	mov	r3, r4
 80096ca:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80096ce:	e9cd 5600 	strd	r5, r6, [sp]
 80096d2:	4622      	mov	r2, r4
 80096d4:	4648      	mov	r0, r9
 80096d6:	f001 fbed 	bl	800aeb4 <uxr_read_framed_msg>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d0ef      	beq.n	80096be <recv_custom_msg+0x2e>
 80096de:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80096e2:	b1b3      	cbz	r3, 8009712 <recv_custom_msg+0x82>
 80096e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009724 <recv_custom_msg+0x94>)
 80096e6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	2000      	movs	r0, #0
 80096ee:	b009      	add	sp, #36	@ 0x24
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	f10d 021f 	add.w	r2, sp, #31
 80096f8:	9200      	str	r2, [sp, #0]
 80096fa:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80096fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009702:	4601      	mov	r1, r0
 8009704:	47a8      	blx	r5
 8009706:	2800      	cmp	r0, #0
 8009708:	d0ec      	beq.n	80096e4 <recv_custom_msg+0x54>
 800970a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e8      	bne.n	80096e4 <recv_custom_msg+0x54>
 8009712:	f8cb 0000 	str.w	r0, [fp]
 8009716:	2001      	movs	r0, #1
 8009718:	f8ca 4000 	str.w	r4, [sl]
 800971c:	b009      	add	sp, #36	@ 0x24
 800971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	bf00      	nop
 8009724:	2000a91c 	.word	0x2000a91c

08009728 <send_custom_msg>:
 8009728:	b530      	push	{r4, r5, lr}
 800972a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800972e:	b087      	sub	sp, #28
 8009730:	4615      	mov	r5, r2
 8009732:	b974      	cbnz	r4, 8009752 <send_custom_msg+0x2a>
 8009734:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8009738:	f10d 0317 	add.w	r3, sp, #23
 800973c:	47a0      	blx	r4
 800973e:	b108      	cbz	r0, 8009744 <send_custom_msg+0x1c>
 8009740:	42a8      	cmp	r0, r5
 8009742:	d015      	beq.n	8009770 <send_custom_msg+0x48>
 8009744:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <send_custom_msg+0x50>)
 8009746:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	2000      	movs	r0, #0
 800974e:	b007      	add	sp, #28
 8009750:	bd30      	pop	{r4, r5, pc}
 8009752:	460b      	mov	r3, r1
 8009754:	2200      	movs	r2, #0
 8009756:	f10d 0117 	add.w	r1, sp, #23
 800975a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800975e:	4602      	mov	r2, r0
 8009760:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8009764:	9500      	str	r5, [sp, #0]
 8009766:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800976a:	f001 f9ab 	bl	800aac4 <uxr_write_framed_msg>
 800976e:	e7e6      	b.n	800973e <send_custom_msg+0x16>
 8009770:	2001      	movs	r0, #1
 8009772:	b007      	add	sp, #28
 8009774:	bd30      	pop	{r4, r5, pc}
 8009776:	bf00      	nop
 8009778:	2000a91c 	.word	0x2000a91c

0800977c <uxr_set_custom_transport_callbacks>:
 800977c:	b410      	push	{r4}
 800977e:	9c01      	ldr	r4, [sp, #4]
 8009780:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8009784:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8009788:	9b02      	ldr	r3, [sp, #8]
 800978a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800978e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009792:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8009796:	4770      	bx	lr

08009798 <uxr_init_custom_transport>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800979e:	b303      	cbz	r3, 80097e2 <uxr_init_custom_transport+0x4a>
 80097a0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80097a4:	4604      	mov	r4, r0
 80097a6:	b1e2      	cbz	r2, 80097e2 <uxr_init_custom_transport+0x4a>
 80097a8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80097ac:	b1ca      	cbz	r2, 80097e2 <uxr_init_custom_transport+0x4a>
 80097ae:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80097b2:	b1b2      	cbz	r2, 80097e2 <uxr_init_custom_transport+0x4a>
 80097b4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80097b8:	4798      	blx	r3
 80097ba:	4605      	mov	r5, r0
 80097bc:	b188      	cbz	r0, 80097e2 <uxr_init_custom_transport+0x4a>
 80097be:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80097c2:	b98b      	cbnz	r3, 80097e8 <uxr_init_custom_transport+0x50>
 80097c4:	490b      	ldr	r1, [pc, #44]	@ (80097f4 <uxr_init_custom_transport+0x5c>)
 80097c6:	4b0c      	ldr	r3, [pc, #48]	@ (80097f8 <uxr_init_custom_transport+0x60>)
 80097c8:	4a0c      	ldr	r2, [pc, #48]	@ (80097fc <uxr_init_custom_transport+0x64>)
 80097ca:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80097ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097d2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80097d6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80097da:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80097de:	4628      	mov	r0, r5
 80097e0:	bd38      	pop	{r3, r4, r5, pc}
 80097e2:	2500      	movs	r5, #0
 80097e4:	4628      	mov	r0, r5
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	2100      	movs	r1, #0
 80097ea:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80097ee:	f001 f963 	bl	800aab8 <uxr_init_framing_io>
 80097f2:	e7e7      	b.n	80097c4 <uxr_init_custom_transport+0x2c>
 80097f4:	08009729 	.word	0x08009729
 80097f8:	08009691 	.word	0x08009691
 80097fc:	08009685 	.word	0x08009685

08009800 <uxr_close_custom_transport>:
 8009800:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8009804:	4718      	bx	r3
 8009806:	bf00      	nop

08009808 <uxr_object_id>:
 8009808:	b082      	sub	sp, #8
 800980a:	2300      	movs	r3, #0
 800980c:	f88d 1006 	strb.w	r1, [sp, #6]
 8009810:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009814:	f360 030f 	bfi	r3, r0, #0, #16
 8009818:	f362 431f 	bfi	r3, r2, #16, #16
 800981c:	4618      	mov	r0, r3
 800981e:	b002      	add	sp, #8
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop

08009824 <uxr_object_id_from_raw>:
 8009824:	7843      	ldrb	r3, [r0, #1]
 8009826:	7801      	ldrb	r1, [r0, #0]
 8009828:	b082      	sub	sp, #8
 800982a:	f003 020f 	and.w	r2, r3, #15
 800982e:	f88d 2006 	strb.w	r2, [sp, #6]
 8009832:	091b      	lsrs	r3, r3, #4
 8009834:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009838:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800983c:	2000      	movs	r0, #0
 800983e:	f363 000f 	bfi	r0, r3, #0, #16
 8009842:	f362 401f 	bfi	r0, r2, #16, #16
 8009846:	b002      	add	sp, #8
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop

0800984c <uxr_object_id_to_raw>:
 800984c:	4602      	mov	r2, r0
 800984e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8009852:	b082      	sub	sp, #8
 8009854:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8009858:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800985c:	f881 c000 	strb.w	ip, [r1]
 8009860:	7048      	strb	r0, [r1, #1]
 8009862:	b002      	add	sp, #8
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop

08009868 <uxr_buffer_cancel_data>:
 8009868:	b510      	push	{r4, lr}
 800986a:	b094      	sub	sp, #80	@ 0x50
 800986c:	2300      	movs	r3, #0
 800986e:	9202      	str	r2, [sp, #8]
 8009870:	9205      	str	r2, [sp, #20]
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f8ad 301c 	strh.w	r3, [sp, #28]
 800987a:	f88d 301e 	strb.w	r3, [sp, #30]
 800987e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8009882:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8009886:	2308      	movs	r3, #8
 8009888:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	2210      	movs	r2, #16
 8009890:	ab0c      	add	r3, sp, #48	@ 0x30
 8009892:	4604      	mov	r4, r0
 8009894:	9103      	str	r1, [sp, #12]
 8009896:	f000 ffa9 	bl	800a7ec <uxr_prepare_stream_to_write_submessage>
 800989a:	b918      	cbnz	r0, 80098a4 <uxr_buffer_cancel_data+0x3c>
 800989c:	4604      	mov	r4, r0
 800989e:	4620      	mov	r0, r4
 80098a0:	b014      	add	sp, #80	@ 0x50
 80098a2:	bd10      	pop	{r4, pc}
 80098a4:	9905      	ldr	r1, [sp, #20]
 80098a6:	aa06      	add	r2, sp, #24
 80098a8:	4620      	mov	r0, r4
 80098aa:	f001 f8d5 	bl	800aa58 <uxr_init_base_object_request>
 80098ae:	a906      	add	r1, sp, #24
 80098b0:	4604      	mov	r4, r0
 80098b2:	a80c      	add	r0, sp, #48	@ 0x30
 80098b4:	f002 fc86 	bl	800c1c4 <uxr_serialize_READ_DATA_Payload>
 80098b8:	4620      	mov	r0, r4
 80098ba:	b014      	add	sp, #80	@ 0x50
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop

080098c0 <read_submessage_format>:
 80098c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098c4:	b095      	sub	sp, #84	@ 0x54
 80098c6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80098ca:	b113      	cbz	r3, 80098d2 <read_submessage_format+0x12>
 80098cc:	b015      	add	sp, #84	@ 0x54
 80098ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098d2:	460c      	mov	r4, r1
 80098d4:	4615      	mov	r5, r2
 80098d6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80098da:	4607      	mov	r7, r0
 80098dc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80098de:	9004      	str	r0, [sp, #16]
 80098e0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80098e2:	9005      	str	r0, [sp, #20]
 80098e4:	1a52      	subs	r2, r2, r1
 80098e6:	a80c      	add	r0, sp, #48	@ 0x30
 80098e8:	4699      	mov	r9, r3
 80098ea:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80098ee:	f004 fe43 	bl	800e578 <ucdr_init_buffer>
 80098f2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80098f6:	a80c      	add	r0, sp, #48	@ 0x30
 80098f8:	f004 fe12 	bl	800e520 <ucdr_set_on_full_buffer_callback>
 80098fc:	69e2      	ldr	r2, [r4, #28]
 80098fe:	b19a      	cbz	r2, 8009928 <read_submessage_format+0x68>
 8009900:	f1b8 0f07 	cmp.w	r8, #7
 8009904:	f882 9014 	strb.w	r9, [r2, #20]
 8009908:	d040      	beq.n	800998c <read_submessage_format+0xcc>
 800990a:	f1b8 0f08 	cmp.w	r8, #8
 800990e:	d02e      	beq.n	800996e <read_submessage_format+0xae>
 8009910:	f1b8 0f06 	cmp.w	r8, #6
 8009914:	d011      	beq.n	800993a <read_submessage_format+0x7a>
 8009916:	2301      	movs	r3, #1
 8009918:	7513      	strb	r3, [r2, #20]
 800991a:	4629      	mov	r1, r5
 800991c:	4620      	mov	r0, r4
 800991e:	f004 fe7b 	bl	800e618 <ucdr_advance_buffer>
 8009922:	b015      	add	sp, #84	@ 0x54
 8009924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009928:	f1b8 0f07 	cmp.w	r8, #7
 800992c:	d02e      	beq.n	800998c <read_submessage_format+0xcc>
 800992e:	f1b8 0f08 	cmp.w	r8, #8
 8009932:	d01c      	beq.n	800996e <read_submessage_format+0xae>
 8009934:	f1b8 0f06 	cmp.w	r8, #6
 8009938:	d1ef      	bne.n	800991a <read_submessage_format+0x5a>
 800993a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800993e:	f1b8 0f00 	cmp.w	r8, #0
 8009942:	d011      	beq.n	8009968 <read_submessage_format+0xa8>
 8009944:	ab0c      	add	r3, sp, #48	@ 0x30
 8009946:	e9cd 3500 	strd	r3, r5, [sp]
 800994a:	2306      	movs	r3, #6
 800994c:	f88d 3016 	strb.w	r3, [sp, #22]
 8009950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009954:	9302      	str	r3, [sp, #8]
 8009956:	4632      	mov	r2, r6
 8009958:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800995c:	4638      	mov	r0, r7
 800995e:	47c0      	blx	r8
 8009960:	2301      	movs	r3, #1
 8009962:	69e2      	ldr	r2, [r4, #28]
 8009964:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8009968:	2a00      	cmp	r2, #0
 800996a:	d1d4      	bne.n	8009916 <read_submessage_format+0x56>
 800996c:	e7d5      	b.n	800991a <read_submessage_format+0x5a>
 800996e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0f8      	beq.n	8009968 <read_submessage_format+0xa8>
 8009976:	a906      	add	r1, sp, #24
 8009978:	a80c      	add	r0, sp, #48	@ 0x30
 800997a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800997e:	f002 fcb1 	bl	800c2e4 <uxr_deserialize_SampleIdentity>
 8009982:	b9a0      	cbnz	r0, 80099ae <read_submessage_format+0xee>
 8009984:	69e2      	ldr	r2, [r4, #28]
 8009986:	2a00      	cmp	r2, #0
 8009988:	d1c5      	bne.n	8009916 <read_submessage_format+0x56>
 800998a:	e7c6      	b.n	800991a <read_submessage_format+0x5a>
 800998c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009990:	b13b      	cbz	r3, 80099a2 <read_submessage_format+0xe2>
 8009992:	a906      	add	r1, sp, #24
 8009994:	a80c      	add	r0, sp, #48	@ 0x30
 8009996:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800999a:	f002 f9ad 	bl	800bcf8 <uxr_deserialize_BaseObjectRequest>
 800999e:	bb60      	cbnz	r0, 80099fa <read_submessage_format+0x13a>
 80099a0:	69e2      	ldr	r2, [r4, #28]
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	442b      	add	r3, r5
 80099a6:	60a3      	str	r3, [r4, #8]
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	d1b4      	bne.n	8009916 <read_submessage_format+0x56>
 80099ac:	e7b5      	b.n	800991a <read_submessage_format+0x5a>
 80099ae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80099b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099b4:	1a52      	subs	r2, r2, r1
 80099b6:	eba8 0803 	sub.w	r8, r8, r3
 80099ba:	a80c      	add	r0, sp, #48	@ 0x30
 80099bc:	f004 fddc 	bl	800e578 <ucdr_init_buffer>
 80099c0:	44a8      	add	r8, r5
 80099c2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80099c6:	a80c      	add	r0, sp, #48	@ 0x30
 80099c8:	f004 fdaa 	bl	800e520 <ucdr_set_on_full_buffer_callback>
 80099cc:	fa1f f888 	uxth.w	r8, r8
 80099d0:	ab0c      	add	r3, sp, #48	@ 0x30
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	f8cd 8004 	str.w	r8, [sp, #4]
 80099d8:	2108      	movs	r1, #8
 80099da:	f88d 1016 	strb.w	r1, [sp, #22]
 80099de:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80099e2:	9102      	str	r1, [sp, #8]
 80099e4:	ab06      	add	r3, sp, #24
 80099e6:	4632      	mov	r2, r6
 80099e8:	9905      	ldr	r1, [sp, #20]
 80099ea:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80099ee:	4638      	mov	r0, r7
 80099f0:	47b0      	blx	r6
 80099f2:	2301      	movs	r3, #1
 80099f4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80099f8:	e7c4      	b.n	8009984 <read_submessage_format+0xc4>
 80099fa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80099fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a00:	1a52      	subs	r2, r2, r1
 8009a02:	a80c      	add	r0, sp, #48	@ 0x30
 8009a04:	eba8 0803 	sub.w	r8, r8, r3
 8009a08:	f004 fdb6 	bl	800e578 <ucdr_init_buffer>
 8009a0c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8009a10:	a80c      	add	r0, sp, #48	@ 0x30
 8009a12:	f004 fd85 	bl	800e520 <ucdr_set_on_full_buffer_callback>
 8009a16:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8009a1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009a22:	44a8      	add	r8, r5
 8009a24:	fa1f f888 	uxth.w	r8, r8
 8009a28:	f8cd 8004 	str.w	r8, [sp, #4]
 8009a2c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8009a30:	2107      	movs	r1, #7
 8009a32:	f88d 1016 	strb.w	r1, [sp, #22]
 8009a36:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8009a3a:	9102      	str	r1, [sp, #8]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8009a44:	9905      	ldr	r1, [sp, #20]
 8009a46:	4638      	mov	r0, r7
 8009a48:	47b0      	blx	r6
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8009a50:	e7a6      	b.n	80099a0 <read_submessage_format+0xe0>
 8009a52:	bf00      	nop

08009a54 <on_get_fragmentation_info>:
 8009a54:	b500      	push	{lr}
 8009a56:	b08b      	sub	sp, #44	@ 0x2c
 8009a58:	4601      	mov	r1, r0
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	a802      	add	r0, sp, #8
 8009a5e:	f004 fd8b 	bl	800e578 <ucdr_init_buffer>
 8009a62:	f10d 0305 	add.w	r3, sp, #5
 8009a66:	f10d 0206 	add.w	r2, sp, #6
 8009a6a:	a901      	add	r1, sp, #4
 8009a6c:	a802      	add	r0, sp, #8
 8009a6e:	f001 fdf1 	bl	800b654 <uxr_read_submessage_header>
 8009a72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009a76:	2b0d      	cmp	r3, #13
 8009a78:	d003      	beq.n	8009a82 <on_get_fragmentation_info+0x2e>
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	b00b      	add	sp, #44	@ 0x2c
 8009a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009a86:	f013 0f02 	tst.w	r3, #2
 8009a8a:	bf14      	ite	ne
 8009a8c:	2002      	movne	r0, #2
 8009a8e:	2001      	moveq	r0, #1
 8009a90:	b00b      	add	sp, #44	@ 0x2c
 8009a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a96:	bf00      	nop

08009a98 <read_submessage_get_info>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8009aa6:	460e      	mov	r6, r1
 8009aa8:	a810      	add	r0, sp, #64	@ 0x40
 8009aaa:	4629      	mov	r1, r5
 8009aac:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8009ab0:	f006 f8be 	bl	800fc30 <memset>
 8009ab4:	a903      	add	r1, sp, #12
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f002 fac6 	bl	800c048 <uxr_deserialize_GET_INFO_Payload>
 8009abc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009ac0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 ffbf 	bl	800aa48 <uxr_session_header_offset>
 8009aca:	462b      	mov	r3, r5
 8009acc:	9000      	str	r0, [sp, #0]
 8009ace:	220c      	movs	r2, #12
 8009ad0:	a905      	add	r1, sp, #20
 8009ad2:	a808      	add	r0, sp, #32
 8009ad4:	f004 fd3e 	bl	800e554 <ucdr_init_buffer_origin_offset>
 8009ad8:	a910      	add	r1, sp, #64	@ 0x40
 8009ada:	a808      	add	r0, sp, #32
 8009adc:	f002 fb26 	bl	800c12c <uxr_serialize_INFO_Payload>
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 ff58 	bl	800a99c <uxr_stamp_session_header>
 8009aec:	a808      	add	r0, sp, #32
 8009aee:	f004 fd6f 	bl	800e5d0 <ucdr_buffer_length>
 8009af2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009af4:	4602      	mov	r2, r0
 8009af6:	a905      	add	r1, sp, #20
 8009af8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009afc:	47a0      	blx	r4
 8009afe:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8009b02:	bd70      	pop	{r4, r5, r6, pc}

08009b04 <write_submessage_acknack.isra.0>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	b092      	sub	sp, #72	@ 0x48
 8009b08:	4605      	mov	r5, r0
 8009b0a:	460e      	mov	r6, r1
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	f000 ff9b 	bl	800aa48 <uxr_session_header_offset>
 8009b12:	a905      	add	r1, sp, #20
 8009b14:	9000      	str	r0, [sp, #0]
 8009b16:	2300      	movs	r3, #0
 8009b18:	a80a      	add	r0, sp, #40	@ 0x28
 8009b1a:	2211      	movs	r2, #17
 8009b1c:	f004 fd1a 	bl	800e554 <ucdr_init_buffer_origin_offset>
 8009b20:	2218      	movs	r2, #24
 8009b22:	fb02 5404 	mla	r4, r2, r4, r5
 8009b26:	2300      	movs	r3, #0
 8009b28:	2205      	movs	r2, #5
 8009b2a:	3450      	adds	r4, #80	@ 0x50
 8009b2c:	210a      	movs	r1, #10
 8009b2e:	a80a      	add	r0, sp, #40	@ 0x28
 8009b30:	f001 fd76 	bl	800b620 <uxr_buffer_submessage_header>
 8009b34:	a903      	add	r1, sp, #12
 8009b36:	4620      	mov	r0, r4
 8009b38:	f004 ffa0 	bl	800ea7c <uxr_compute_acknack>
 8009b3c:	ba40      	rev16	r0, r0
 8009b3e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8009b42:	a903      	add	r1, sp, #12
 8009b44:	a80a      	add	r0, sp, #40	@ 0x28
 8009b46:	f88d 6010 	strb.w	r6, [sp, #16]
 8009b4a:	f002 fb4f 	bl	800c1ec <uxr_serialize_ACKNACK_Payload>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b52:	4611      	mov	r1, r2
 8009b54:	4628      	mov	r0, r5
 8009b56:	f000 ff21 	bl	800a99c <uxr_stamp_session_header>
 8009b5a:	a80a      	add	r0, sp, #40	@ 0x28
 8009b5c:	f004 fd38 	bl	800e5d0 <ucdr_buffer_length>
 8009b60:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009b62:	4602      	mov	r2, r0
 8009b64:	a905      	add	r1, sp, #20
 8009b66:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009b6a:	47a0      	blx	r4
 8009b6c:	b012      	add	sp, #72	@ 0x48
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}

08009b70 <uxr_init_session>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009ba8 <uxr_init_session+0x38>
 8009b76:	2300      	movs	r3, #0
 8009b78:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8009b82:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8009b86:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8009b8a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8009b8e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8009b92:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8009b96:	2181      	movs	r1, #129	@ 0x81
 8009b98:	f000 fe6c 	bl	800a874 <uxr_init_session_info>
 8009b9c:	f104 0008 	add.w	r0, r4, #8
 8009ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba4:	f001 bc6e 	b.w	800b484 <uxr_init_stream_storage>
	...

08009bb0 <uxr_set_status_callback>:
 8009bb0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop

08009bb8 <uxr_set_topic_callback>:
 8009bb8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop

08009bc0 <uxr_set_request_callback>:
 8009bc0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop

08009bc8 <uxr_set_reply_callback>:
 8009bc8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop

08009bd0 <uxr_create_output_best_effort_stream>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	e9cd 2100 	strd	r2, r1, [sp]
 8009bd8:	4604      	mov	r4, r0
 8009bda:	f000 ff35 	bl	800aa48 <uxr_session_header_offset>
 8009bde:	e9dd 2100 	ldrd	r2, r1, [sp]
 8009be2:	4603      	mov	r3, r0
 8009be4:	f104 0008 	add.w	r0, r4, #8
 8009be8:	b004      	add	sp, #16
 8009bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bee:	f001 bc93 	b.w	800b518 <uxr_add_output_best_effort_buffer>
 8009bf2:	bf00      	nop

08009bf4 <uxr_create_output_reliable_stream>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	9303      	str	r3, [sp, #12]
 8009c00:	f000 ff22 	bl	800aa48 <uxr_session_header_offset>
 8009c04:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009c08:	9000      	str	r0, [sp, #0]
 8009c0a:	9905      	ldr	r1, [sp, #20]
 8009c0c:	f104 0008 	add.w	r0, r4, #8
 8009c10:	f001 fc96 	bl	800b540 <uxr_add_output_reliable_buffer>
 8009c14:	2200      	movs	r2, #0
 8009c16:	b2c3      	uxtb	r3, r0
 8009c18:	f363 0207 	bfi	r2, r3, #0, #8
 8009c1c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009c20:	f363 220f 	bfi	r2, r3, #8, #8
 8009c24:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009c28:	f363 4217 	bfi	r2, r3, #16, #8
 8009c2c:	0e03      	lsrs	r3, r0, #24
 8009c2e:	f363 621f 	bfi	r2, r3, #24, #8
 8009c32:	4610      	mov	r0, r2
 8009c34:	b008      	add	sp, #32
 8009c36:	bd10      	pop	{r4, pc}

08009c38 <uxr_create_input_best_effort_stream>:
 8009c38:	b082      	sub	sp, #8
 8009c3a:	3008      	adds	r0, #8
 8009c3c:	b002      	add	sp, #8
 8009c3e:	f001 bc99 	b.w	800b574 <uxr_add_input_best_effort_buffer>
 8009c42:	bf00      	nop

08009c44 <uxr_create_input_reliable_stream>:
 8009c44:	b510      	push	{r4, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	4c0b      	ldr	r4, [pc, #44]	@ (8009c78 <uxr_create_input_reliable_stream+0x34>)
 8009c4a:	9400      	str	r4, [sp, #0]
 8009c4c:	3008      	adds	r0, #8
 8009c4e:	f001 fca7 	bl	800b5a0 <uxr_add_input_reliable_buffer>
 8009c52:	2200      	movs	r2, #0
 8009c54:	b2c3      	uxtb	r3, r0
 8009c56:	f363 0207 	bfi	r2, r3, #0, #8
 8009c5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009c5e:	f363 220f 	bfi	r2, r3, #8, #8
 8009c62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009c66:	f363 4217 	bfi	r2, r3, #16, #8
 8009c6a:	0e03      	lsrs	r3, r0, #24
 8009c6c:	f363 621f 	bfi	r2, r3, #24, #8
 8009c70:	4610      	mov	r0, r2
 8009c72:	b004      	add	sp, #16
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	bf00      	nop
 8009c78:	08009a55 	.word	0x08009a55

08009c7c <uxr_epoch_nanos>:
 8009c7c:	b510      	push	{r4, lr}
 8009c7e:	4604      	mov	r4, r0
 8009c80:	f001 fd2e 	bl	800b6e0 <uxr_nanos>
 8009c84:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8009c88:	1ac0      	subs	r0, r0, r3
 8009c8a:	eb61 0102 	sbc.w	r1, r1, r2
 8009c8e:	bd10      	pop	{r4, pc}

08009c90 <uxr_flash_output_streams>:
 8009c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c94:	7e03      	ldrb	r3, [r0, #24]
 8009c96:	b084      	sub	sp, #16
 8009c98:	4604      	mov	r4, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d035      	beq.n	8009d0a <uxr_flash_output_streams+0x7a>
 8009c9e:	f04f 0900 	mov.w	r9, #0
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	f10d 0802 	add.w	r8, sp, #2
 8009ca8:	af03      	add	r7, sp, #12
 8009caa:	ae02      	add	r6, sp, #8
 8009cac:	e006      	b.n	8009cbc <uxr_flash_output_streams+0x2c>
 8009cae:	7e23      	ldrb	r3, [r4, #24]
 8009cb0:	f109 0901 	add.w	r9, r9, #1
 8009cb4:	fa5f f089 	uxtb.w	r0, r9
 8009cb8:	4283      	cmp	r3, r0
 8009cba:	d926      	bls.n	8009d0a <uxr_flash_output_streams+0x7a>
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8009cc4:	f001 fb8a 	bl	800b3dc <uxr_stream_id>
 8009cc8:	3508      	adds	r5, #8
 8009cca:	4684      	mov	ip, r0
 8009ccc:	4643      	mov	r3, r8
 8009cce:	463a      	mov	r2, r7
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f8cd c004 	str.w	ip, [sp, #4]
 8009cd8:	f004 ff56 	bl	800eb88 <uxr_prepare_best_effort_buffer_to_send>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0e6      	beq.n	8009cae <uxr_flash_output_streams+0x1e>
 8009ce0:	9b02      	ldr	r3, [sp, #8]
 8009ce2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009ce6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fe56 	bl	800a99c <uxr_stamp_session_header>
 8009cf0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009cf2:	9a03      	ldr	r2, [sp, #12]
 8009cf4:	685d      	ldr	r5, [r3, #4]
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	9902      	ldr	r1, [sp, #8]
 8009cfa:	47a8      	blx	r5
 8009cfc:	f109 0901 	add.w	r9, r9, #1
 8009d00:	7e23      	ldrb	r3, [r4, #24]
 8009d02:	fa5f f089 	uxtb.w	r0, r9
 8009d06:	4283      	cmp	r3, r0
 8009d08:	d8d8      	bhi.n	8009cbc <uxr_flash_output_streams+0x2c>
 8009d0a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009d0e:	b38b      	cbz	r3, 8009d74 <uxr_flash_output_streams+0xe4>
 8009d10:	f04f 0900 	mov.w	r9, #0
 8009d14:	f10d 0802 	add.w	r8, sp, #2
 8009d18:	af03      	add	r7, sp, #12
 8009d1a:	ae02      	add	r6, sp, #8
 8009d1c:	4648      	mov	r0, r9
 8009d1e:	2201      	movs	r2, #1
 8009d20:	2102      	movs	r1, #2
 8009d22:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8009d26:	f001 fb59 	bl	800b3dc <uxr_stream_id>
 8009d2a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8009d2e:	3520      	adds	r5, #32
 8009d30:	9001      	str	r0, [sp, #4]
 8009d32:	e00d      	b.n	8009d50 <uxr_flash_output_streams+0xc0>
 8009d34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009d38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009d3c:	9b02      	ldr	r3, [sp, #8]
 8009d3e:	f000 fe2d 	bl	800a99c <uxr_stamp_session_header>
 8009d42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009d44:	9a03      	ldr	r2, [sp, #12]
 8009d46:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009d4a:	9902      	ldr	r1, [sp, #8]
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	47d0      	blx	sl
 8009d50:	4643      	mov	r3, r8
 8009d52:	463a      	mov	r2, r7
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	f005 f934 	bl	800efc4 <uxr_prepare_next_reliable_buffer_to_send>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	4620      	mov	r0, r4
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e7      	bne.n	8009d34 <uxr_flash_output_streams+0xa4>
 8009d64:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009d68:	f109 0901 	add.w	r9, r9, #1
 8009d6c:	fa5f f089 	uxtb.w	r0, r9
 8009d70:	4283      	cmp	r3, r0
 8009d72:	d8d4      	bhi.n	8009d1e <uxr_flash_output_streams+0x8e>
 8009d74:	b004      	add	sp, #16
 8009d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7a:	bf00      	nop

08009d7c <read_submessage_info>:
 8009d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d80:	460d      	mov	r5, r1
 8009d82:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8009d86:	4669      	mov	r1, sp
 8009d88:	4607      	mov	r7, r0
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f002 f86a 	bl	800be64 <uxr_deserialize_BaseObjectReply>
 8009d90:	a902      	add	r1, sp, #8
 8009d92:	4604      	mov	r4, r0
 8009d94:	4628      	mov	r0, r5
 8009d96:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8009d9a:	f003 fcc1 	bl	800d720 <ucdr_deserialize_bool>
 8009d9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009da2:	4004      	ands	r4, r0
 8009da4:	b2e4      	uxtb	r4, r4
 8009da6:	b95b      	cbnz	r3, 8009dc0 <read_submessage_info+0x44>
 8009da8:	a987      	add	r1, sp, #540	@ 0x21c
 8009daa:	4628      	mov	r0, r5
 8009dac:	f003 fcb8 	bl	800d720 <ucdr_deserialize_bool>
 8009db0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8009db4:	4606      	mov	r6, r0
 8009db6:	b94b      	cbnz	r3, 8009dcc <read_submessage_info+0x50>
 8009db8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8009dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc0:	a903      	add	r1, sp, #12
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f001 fef6 	bl	800bbb4 <uxr_deserialize_ObjectVariant>
 8009dc8:	4004      	ands	r4, r0
 8009dca:	e7ed      	b.n	8009da8 <read_submessage_info+0x2c>
 8009dcc:	a988      	add	r1, sp, #544	@ 0x220
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f003 fcd4 	bl	800d77c <ucdr_deserialize_uint8_t>
 8009dd4:	4234      	tst	r4, r6
 8009dd6:	d0ef      	beq.n	8009db8 <read_submessage_info+0x3c>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0ed      	beq.n	8009db8 <read_submessage_info+0x3c>
 8009ddc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8009de0:	2b0d      	cmp	r3, #13
 8009de2:	d1e9      	bne.n	8009db8 <read_submessage_info+0x3c>
 8009de4:	a98a      	add	r1, sp, #552	@ 0x228
 8009de6:	4628      	mov	r0, r5
 8009de8:	f004 fa6e 	bl	800e2c8 <ucdr_deserialize_int16_t>
 8009dec:	b140      	cbz	r0, 8009e00 <read_submessage_info+0x84>
 8009dee:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	dd07      	ble.n	8009e06 <read_submessage_info+0x8a>
 8009df6:	f1b8 0f00 	cmp.w	r8, #0
 8009dfa:	bf14      	ite	ne
 8009dfc:	2001      	movne	r0, #1
 8009dfe:	2002      	moveq	r0, #2
 8009e00:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8009e04:	e7d8      	b.n	8009db8 <read_submessage_info+0x3c>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7fa      	b.n	8009e00 <read_submessage_info+0x84>
 8009e0a:	bf00      	nop

08009e0c <read_submessage_list>:
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	b097      	sub	sp, #92	@ 0x5c
 8009e12:	4ec1      	ldr	r6, [pc, #772]	@ (800a118 <read_submessage_list+0x30c>)
 8009e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e16:	4604      	mov	r4, r0
 8009e18:	460d      	mov	r5, r1
 8009e1a:	f04f 0801 	mov.w	r8, #1
 8009e1e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8009e22:	aa0c      	add	r2, sp, #48	@ 0x30
 8009e24:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f001 fc13 	bl	800b654 <uxr_read_submessage_header>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f000 813e 	beq.w	800a0b0 <read_submessage_list+0x2a4>
 8009e34:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8009e38:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8009e3c:	3b02      	subs	r3, #2
 8009e3e:	2b0d      	cmp	r3, #13
 8009e40:	d8ed      	bhi.n	8009e1e <read_submessage_list+0x12>
 8009e42:	a101      	add	r1, pc, #4	@ (adr r1, 8009e48 <read_submessage_list+0x3c>)
 8009e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e48:	0800a0a7 	.word	0x0800a0a7
 8009e4c:	08009e1f 	.word	0x08009e1f
 8009e50:	0800a097 	.word	0x0800a097
 8009e54:	0800a035 	.word	0x0800a035
 8009e58:	0800a02b 	.word	0x0800a02b
 8009e5c:	08009e1f 	.word	0x08009e1f
 8009e60:	08009e1f 	.word	0x08009e1f
 8009e64:	08009f8b 	.word	0x08009f8b
 8009e68:	08009f1b 	.word	0x08009f1b
 8009e6c:	08009edb 	.word	0x08009edb
 8009e70:	08009e1f 	.word	0x08009e1f
 8009e74:	08009e1f 	.word	0x08009e1f
 8009e78:	08009e1f 	.word	0x08009e1f
 8009e7c:	08009e81 	.word	0x08009e81
 8009e80:	a910      	add	r1, sp, #64	@ 0x40
 8009e82:	4628      	mov	r0, r5
 8009e84:	f002 fa02 	bl	800c28c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8009e88:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8009e8c:	f1b9 0f00 	cmp.w	r9, #0
 8009e90:	f000 8116 	beq.w	800a0c0 <read_submessage_list+0x2b4>
 8009e94:	f001 fc24 	bl	800b6e0 <uxr_nanos>
 8009e98:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	468c      	mov	ip, r1
 8009ea4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009ea8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8009eac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009eae:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8009eb0:	468c      	mov	ip, r1
 8009eb2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009eb6:	46e2      	mov	sl, ip
 8009eb8:	46bc      	mov	ip, r7
 8009eba:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8009ebe:	fbc0 7106 	smlal	r7, r1, r0, r6
 8009ec2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8009ec6:	e9cd 7100 	strd	r7, r1, [sp]
 8009eca:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8009ece:	9106      	str	r1, [sp, #24]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	47c8      	blx	r9
 8009ed4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8009ed8:	e7a1      	b.n	8009e1e <read_submessage_list+0x12>
 8009eda:	a910      	add	r1, sp, #64	@ 0x40
 8009edc:	4628      	mov	r0, r5
 8009ede:	f002 f9c3 	bl	800c268 <uxr_deserialize_HEARTBEAT_Payload>
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009ee8:	f001 faa2 	bl	800b430 <uxr_stream_id_from_raw>
 8009eec:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8009ef0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f104 0008 	add.w	r0, r4, #8
 8009ef8:	f001 fb88 	bl	800b60c <uxr_get_input_reliable_stream>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d08e      	beq.n	8009e1e <read_submessage_list+0x12>
 8009f00:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8009f04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8009f08:	f004 fdac 	bl	800ea64 <uxr_process_heartbeat>
 8009f0c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8009f10:	463a      	mov	r2, r7
 8009f12:	4620      	mov	r0, r4
 8009f14:	f7ff fdf6 	bl	8009b04 <write_submessage_acknack.isra.0>
 8009f18:	e781      	b.n	8009e1e <read_submessage_list+0x12>
 8009f1a:	a910      	add	r1, sp, #64	@ 0x40
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f002 f97b 	bl	800c218 <uxr_deserialize_ACKNACK_Payload>
 8009f22:	2100      	movs	r1, #0
 8009f24:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009f28:	f001 fa82 	bl	800b430 <uxr_stream_id_from_raw>
 8009f2c:	900d      	str	r0, [sp, #52]	@ 0x34
 8009f2e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009f32:	f104 0008 	add.w	r0, r4, #8
 8009f36:	f001 fb55 	bl	800b5e4 <uxr_get_output_reliable_stream>
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f43f af6e 	beq.w	8009e1e <read_submessage_list+0x12>
 8009f42:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8009f46:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8009f4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8009f4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009f52:	b289      	uxth	r1, r1
 8009f54:	f005 f8e0 	bl	800f118 <uxr_process_acknack>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f005 f89d 	bl	800f098 <uxr_begin_output_nack_buffer_it>
 8009f5e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8009f62:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8009f66:	e006      	b.n	8009f76 <read_submessage_list+0x16a>
 8009f68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009f6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009f70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	47c8      	blx	r9
 8009f76:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8009f7a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009f7c:	4651      	mov	r1, sl
 8009f7e:	4638      	mov	r0, r7
 8009f80:	f005 f88c 	bl	800f09c <uxr_next_reliable_nack_buffer_to_send>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d1ef      	bne.n	8009f68 <read_submessage_list+0x15c>
 8009f88:	e749      	b.n	8009e1e <read_submessage_list+0x12>
 8009f8a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8009f8e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8009f92:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8009f96:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8009f9a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8009f9e:	4651      	mov	r1, sl
 8009fa0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8009fa4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8009fa8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8009fac:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8009fb6:	f001 fe9f 	bl	800bcf8 <uxr_deserialize_BaseObjectRequest>
 8009fba:	4650      	mov	r0, sl
 8009fbc:	a90f      	add	r1, sp, #60	@ 0x3c
 8009fbe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8009fc2:	f000 fd67 	bl	800aa94 <uxr_parse_base_object_request>
 8009fc6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8009fca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009fcc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8009fd0:	9110      	str	r1, [sp, #64]	@ 0x40
 8009fd2:	3f04      	subs	r7, #4
 8009fd4:	f009 090e 	and.w	r9, r9, #14
 8009fd8:	b2bf      	uxth	r7, r7
 8009fda:	f1bb 0f00 	cmp.w	fp, #0
 8009fde:	d006      	beq.n	8009fee <read_submessage_list+0x1e2>
 8009fe0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4652      	mov	r2, sl
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4620      	mov	r0, r4
 8009fec:	47d8      	blx	fp
 8009fee:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8009ff0:	b16a      	cbz	r2, 800a00e <read_submessage_list+0x202>
 8009ff2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	3802      	subs	r0, #2
 8009ff8:	e002      	b.n	800a000 <read_submessage_list+0x1f4>
 8009ffa:	3101      	adds	r1, #1
 8009ffc:	4291      	cmp	r1, r2
 8009ffe:	d006      	beq.n	800a00e <read_submessage_list+0x202>
 800a000:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a004:	4553      	cmp	r3, sl
 800a006:	d1f8      	bne.n	8009ffa <read_submessage_list+0x1ee>
 800a008:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a00a:	2200      	movs	r2, #0
 800a00c:	545a      	strb	r2, [r3, r1]
 800a00e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800a012:	9102      	str	r1, [sp, #8]
 800a014:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a016:	9101      	str	r1, [sp, #4]
 800a018:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a01a:	9100      	str	r1, [sp, #0]
 800a01c:	464b      	mov	r3, r9
 800a01e:	463a      	mov	r2, r7
 800a020:	4629      	mov	r1, r5
 800a022:	4620      	mov	r0, r4
 800a024:	f7ff fc4c 	bl	80098c0 <read_submessage_format>
 800a028:	e6f9      	b.n	8009e1e <read_submessage_list+0x12>
 800a02a:	4629      	mov	r1, r5
 800a02c:	4620      	mov	r0, r4
 800a02e:	f7ff fea5 	bl	8009d7c <read_submessage_info>
 800a032:	e6f4      	b.n	8009e1e <read_submessage_list+0x12>
 800a034:	2a00      	cmp	r2, #0
 800a036:	d03e      	beq.n	800a0b6 <read_submessage_list+0x2aa>
 800a038:	a910      	add	r1, sp, #64	@ 0x40
 800a03a:	4628      	mov	r0, r5
 800a03c:	f002 f858 	bl	800c0f0 <uxr_deserialize_STATUS_Payload>
 800a040:	a90e      	add	r1, sp, #56	@ 0x38
 800a042:	aa0d      	add	r2, sp, #52	@ 0x34
 800a044:	a810      	add	r0, sp, #64	@ 0x40
 800a046:	f000 fd25 	bl	800aa94 <uxr_parse_base_object_request>
 800a04a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800a04e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a050:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800a054:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800a058:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a05a:	f1ba 0f00 	cmp.w	sl, #0
 800a05e:	d006      	beq.n	800a06e <read_submessage_list+0x262>
 800a060:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	463a      	mov	r2, r7
 800a068:	464b      	mov	r3, r9
 800a06a:	4620      	mov	r0, r4
 800a06c:	47d0      	blx	sl
 800a06e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800a070:	2a00      	cmp	r2, #0
 800a072:	f43f aed4 	beq.w	8009e1e <read_submessage_list+0x12>
 800a076:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a078:	2100      	movs	r1, #0
 800a07a:	3802      	subs	r0, #2
 800a07c:	e003      	b.n	800a086 <read_submessage_list+0x27a>
 800a07e:	3101      	adds	r1, #1
 800a080:	4291      	cmp	r1, r2
 800a082:	f43f aecc 	beq.w	8009e1e <read_submessage_list+0x12>
 800a086:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a08a:	42bb      	cmp	r3, r7
 800a08c:	d1f7      	bne.n	800a07e <read_submessage_list+0x272>
 800a08e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a090:	f803 9001 	strb.w	r9, [r3, r1]
 800a094:	e6c3      	b.n	8009e1e <read_submessage_list+0x12>
 800a096:	2a00      	cmp	r2, #0
 800a098:	f47f aec1 	bne.w	8009e1e <read_submessage_list+0x12>
 800a09c:	4629      	mov	r1, r5
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 fc3e 	bl	800a920 <uxr_read_create_session_status>
 800a0a4:	e6bb      	b.n	8009e1e <read_submessage_list+0x12>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7ff fcf5 	bl	8009a98 <read_submessage_get_info>
 800a0ae:	e6b6      	b.n	8009e1e <read_submessage_list+0x12>
 800a0b0:	b017      	add	sp, #92	@ 0x5c
 800a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 fc3d 	bl	800a938 <uxr_read_delete_session_status>
 800a0be:	e6ae      	b.n	8009e1e <read_submessage_list+0x12>
 800a0c0:	f001 fb0e 	bl	800b6e0 <uxr_nanos>
 800a0c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a0c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a0c8:	464f      	mov	r7, r9
 800a0ca:	fbc3 2706 	smlal	r2, r7, r3, r6
 800a0ce:	1812      	adds	r2, r2, r0
 800a0d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0d2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a0d4:	eb47 0101 	adc.w	r1, r7, r1
 800a0d8:	464f      	mov	r7, r9
 800a0da:	fbc3 0706 	smlal	r0, r7, r3, r6
 800a0de:	463b      	mov	r3, r7
 800a0e0:	4684      	mov	ip, r0
 800a0e2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800a0e6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800a0ea:	eb1c 0c00 	adds.w	ip, ip, r0
 800a0ee:	464f      	mov	r7, r9
 800a0f0:	eb43 0307 	adc.w	r3, r3, r7
 800a0f4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800a0f8:	eb61 0303 	sbc.w	r3, r1, r3
 800a0fc:	0fda      	lsrs	r2, r3, #31
 800a0fe:	eb12 020c 	adds.w	r2, r2, ip
 800a102:	f143 0300 	adc.w	r3, r3, #0
 800a106:	0852      	lsrs	r2, r2, #1
 800a108:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800a10c:	105b      	asrs	r3, r3, #1
 800a10e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800a112:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800a116:	e6dd      	b.n	8009ed4 <read_submessage_list+0xc8>
 800a118:	3b9aca00 	.word	0x3b9aca00

0800a11c <listen_message_reliably>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	1e0b      	subs	r3, r1, #0
 800a122:	b09d      	sub	sp, #116	@ 0x74
 800a124:	bfb8      	it	lt
 800a126:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800a12a:	4680      	mov	r8, r0
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	f001 fabd 	bl	800b6ac <uxr_millis>
 800a132:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800a136:	4681      	mov	r9, r0
 800a138:	2a00      	cmp	r2, #0
 800a13a:	f000 80a1 	beq.w	800a280 <listen_message_reliably+0x164>
 800a13e:	2600      	movs	r6, #0
 800a140:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a144:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a148:	9303      	str	r3, [sp, #12]
 800a14a:	4630      	mov	r0, r6
 800a14c:	460f      	mov	r7, r1
 800a14e:	e00f      	b.n	800a170 <listen_message_reliably+0x54>
 800a150:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a154:	9903      	ldr	r1, [sp, #12]
 800a156:	455a      	cmp	r2, fp
 800a158:	f106 0601 	add.w	r6, r6, #1
 800a15c:	eb73 0101 	sbcs.w	r1, r3, r1
 800a160:	b2f0      	uxtb	r0, r6
 800a162:	da01      	bge.n	800a168 <listen_message_reliably+0x4c>
 800a164:	4693      	mov	fp, r2
 800a166:	9303      	str	r3, [sp, #12]
 800a168:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800a16c:	4283      	cmp	r3, r0
 800a16e:	d960      	bls.n	800a232 <listen_message_reliably+0x116>
 800a170:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a174:	2102      	movs	r1, #2
 800a176:	2201      	movs	r2, #1
 800a178:	f001 f930 	bl	800b3dc <uxr_stream_id>
 800a17c:	00e4      	lsls	r4, r4, #3
 800a17e:	f104 0520 	add.w	r5, r4, #32
 800a182:	4445      	add	r5, r8
 800a184:	4601      	mov	r1, r0
 800a186:	463b      	mov	r3, r7
 800a188:	464a      	mov	r2, r9
 800a18a:	4628      	mov	r0, r5
 800a18c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a18e:	f004 ff59 	bl	800f044 <uxr_update_output_stream_heartbeat_timestamp>
 800a192:	eb08 0304 	add.w	r3, r8, r4
 800a196:	2800      	cmp	r0, #0
 800a198:	d0da      	beq.n	800a150 <listen_message_reliably+0x34>
 800a19a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a19e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	f000 fc4f 	bl	800aa48 <uxr_session_header_offset>
 800a1aa:	3501      	adds	r5, #1
 800a1ac:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800a1b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a1b4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2211      	movs	r2, #17
 800a1bc:	9000      	str	r0, [sp, #0]
 800a1be:	a90c      	add	r1, sp, #48	@ 0x30
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	f004 f9c7 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2205      	movs	r2, #5
 800a1ca:	210b      	movs	r1, #11
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	f001 fa27 	bl	800b620 <uxr_buffer_submessage_header>
 800a1d2:	8968      	ldrh	r0, [r5, #10]
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	f004 ffcd 	bl	800f174 <uxr_seq_num_add>
 800a1da:	892b      	ldrh	r3, [r5, #8]
 800a1dc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	9b04      	ldr	r3, [sp, #16]
 800a1e4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800a1e8:	a90a      	add	r1, sp, #40	@ 0x28
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800a1f0:	f002 f826 	bl	800c240 <uxr_serialize_HEARTBEAT_Payload>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	f000 fbce 	bl	800a99c <uxr_stamp_session_header>
 800a200:	4650      	mov	r0, sl
 800a202:	f004 f9e5 	bl	800e5d0 <ucdr_buffer_length>
 800a206:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a20a:	4602      	mov	r2, r0
 800a20c:	a90c      	add	r1, sp, #48	@ 0x30
 800a20e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a212:	4444      	add	r4, r8
 800a214:	47a8      	blx	r5
 800a216:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800a21a:	9903      	ldr	r1, [sp, #12]
 800a21c:	455a      	cmp	r2, fp
 800a21e:	f106 0601 	add.w	r6, r6, #1
 800a222:	eb73 0101 	sbcs.w	r1, r3, r1
 800a226:	b2f0      	uxtb	r0, r6
 800a228:	db9c      	blt.n	800a164 <listen_message_reliably+0x48>
 800a22a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800a22e:	4283      	cmp	r3, r0
 800a230:	d89e      	bhi.n	800a170 <listen_message_reliably+0x54>
 800a232:	9a03      	ldr	r2, [sp, #12]
 800a234:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a238:	429a      	cmp	r2, r3
 800a23a:	bf08      	it	eq
 800a23c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800a240:	d01e      	beq.n	800a280 <listen_message_reliably+0x164>
 800a242:	ebab 0309 	sub.w	r3, fp, r9
 800a246:	9905      	ldr	r1, [sp, #20]
 800a248:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bf08      	it	eq
 800a250:	2301      	moveq	r3, #1
 800a252:	4299      	cmp	r1, r3
 800a254:	bfa8      	it	ge
 800a256:	4619      	movge	r1, r3
 800a258:	6894      	ldr	r4, [r2, #8]
 800a25a:	6810      	ldr	r0, [r2, #0]
 800a25c:	4689      	mov	r9, r1
 800a25e:	460b      	mov	r3, r1
 800a260:	aa08      	add	r2, sp, #32
 800a262:	a907      	add	r1, sp, #28
 800a264:	47a0      	blx	r4
 800a266:	b968      	cbnz	r0, 800a284 <listen_message_reliably+0x168>
 800a268:	9b05      	ldr	r3, [sp, #20]
 800a26a:	eba3 0309 	sub.w	r3, r3, r9
 800a26e:	2b00      	cmp	r3, #0
 800a270:	9305      	str	r3, [sp, #20]
 800a272:	f73f af5c 	bgt.w	800a12e <listen_message_reliably+0x12>
 800a276:	4604      	mov	r4, r0
 800a278:	4620      	mov	r0, r4
 800a27a:	b01d      	add	sp, #116	@ 0x74
 800a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a280:	9b05      	ldr	r3, [sp, #20]
 800a282:	e7e0      	b.n	800a246 <listen_message_reliably+0x12a>
 800a284:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a288:	4604      	mov	r4, r0
 800a28a:	a80c      	add	r0, sp, #48	@ 0x30
 800a28c:	f004 f974 	bl	800e578 <ucdr_init_buffer>
 800a290:	2500      	movs	r5, #0
 800a292:	f10d 031a 	add.w	r3, sp, #26
 800a296:	aa06      	add	r2, sp, #24
 800a298:	a90c      	add	r1, sp, #48	@ 0x30
 800a29a:	4640      	mov	r0, r8
 800a29c:	f88d 5018 	strb.w	r5, [sp, #24]
 800a2a0:	f000 fb90 	bl	800a9c4 <uxr_read_session_header>
 800a2a4:	b918      	cbnz	r0, 800a2ae <listen_message_reliably+0x192>
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	b01d      	add	sp, #116	@ 0x74
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a2b4:	f001 f8bc 	bl	800b430 <uxr_stream_id_from_raw>
 800a2b8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800a2bc:	2d01      	cmp	r5, #1
 800a2be:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800a2c2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800a2c6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a2ca:	d04b      	beq.n	800a364 <listen_message_reliably+0x248>
 800a2cc:	2d02      	cmp	r5, #2
 800a2ce:	d00f      	beq.n	800a2f0 <listen_message_reliably+0x1d4>
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	d1e8      	bne.n	800a2a6 <listen_message_reliably+0x18a>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f001 f8aa 	bl	800b430 <uxr_stream_id_from_raw>
 800a2dc:	a90c      	add	r1, sp, #48	@ 0x30
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2e4:	f7ff fd92 	bl	8009e0c <read_submessage_list>
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	b01d      	add	sp, #116	@ 0x74
 800a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	f108 0008 	add.w	r0, r8, #8
 800a2f6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800a2fa:	f001 f987 	bl	800b60c <uxr_get_input_reliable_stream>
 800a2fe:	4607      	mov	r7, r0
 800a300:	b338      	cbz	r0, 800a352 <listen_message_reliably+0x236>
 800a302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a304:	9203      	str	r2, [sp, #12]
 800a306:	a80c      	add	r0, sp, #48	@ 0x30
 800a308:	f004 f966 	bl	800e5d8 <ucdr_buffer_remaining>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f10d 0019 	add.w	r0, sp, #25
 800a312:	9000      	str	r0, [sp, #0]
 800a314:	9a03      	ldr	r2, [sp, #12]
 800a316:	4651      	mov	r1, sl
 800a318:	4638      	mov	r0, r7
 800a31a:	f004 faa9 	bl	800e870 <uxr_receive_reliable_message>
 800a31e:	b1c0      	cbz	r0, 800a352 <listen_message_reliably+0x236>
 800a320:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a324:	b393      	cbz	r3, 800a38c <listen_message_reliably+0x270>
 800a326:	ad14      	add	r5, sp, #80	@ 0x50
 800a328:	f04f 0a02 	mov.w	sl, #2
 800a32c:	e00a      	b.n	800a344 <listen_message_reliably+0x228>
 800a32e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800a332:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800a336:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800a33a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a33c:	4629      	mov	r1, r5
 800a33e:	4640      	mov	r0, r8
 800a340:	f7ff fd64 	bl	8009e0c <read_submessage_list>
 800a344:	2204      	movs	r2, #4
 800a346:	4629      	mov	r1, r5
 800a348:	4638      	mov	r0, r7
 800a34a:	f004 fb11 	bl	800e970 <uxr_next_input_reliable_buffer_available>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d1ed      	bne.n	800a32e <listen_message_reliably+0x212>
 800a352:	4640      	mov	r0, r8
 800a354:	4632      	mov	r2, r6
 800a356:	4649      	mov	r1, r9
 800a358:	f7ff fbd4 	bl	8009b04 <write_submessage_acknack.isra.0>
 800a35c:	4620      	mov	r0, r4
 800a35e:	b01d      	add	sp, #116	@ 0x74
 800a360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a364:	4631      	mov	r1, r6
 800a366:	f108 0008 	add.w	r0, r8, #8
 800a36a:	f001 f945 	bl	800b5f8 <uxr_get_input_best_effort_stream>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d099      	beq.n	800a2a6 <listen_message_reliably+0x18a>
 800a372:	4651      	mov	r1, sl
 800a374:	f004 f9e8 	bl	800e748 <uxr_receive_best_effort_message>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d094      	beq.n	800a2a6 <listen_message_reliably+0x18a>
 800a37c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a380:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a382:	a90c      	add	r1, sp, #48	@ 0x30
 800a384:	4640      	mov	r0, r8
 800a386:	f7ff fd41 	bl	8009e0c <read_submessage_list>
 800a38a:	e78c      	b.n	800a2a6 <listen_message_reliably+0x18a>
 800a38c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a390:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a392:	a90c      	add	r1, sp, #48	@ 0x30
 800a394:	4640      	mov	r0, r8
 800a396:	f7ff fd39 	bl	8009e0c <read_submessage_list>
 800a39a:	e7c4      	b.n	800a326 <listen_message_reliably+0x20a>

0800a39c <uxr_run_session_until_all_status>:
 800a39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	9c08      	ldr	r4, [sp, #32]
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	460f      	mov	r7, r1
 800a3a6:	4691      	mov	r9, r2
 800a3a8:	461d      	mov	r5, r3
 800a3aa:	f7ff fc71 	bl	8009c90 <uxr_flash_output_streams>
 800a3ae:	b124      	cbz	r4, 800a3ba <uxr_run_session_until_all_status+0x1e>
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	21ff      	movs	r1, #255	@ 0xff
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f005 fc3b 	bl	800fc30 <memset>
 800a3ba:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800a3be:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800a3c0:	f001 f974 	bl	800b6ac <uxr_millis>
 800a3c4:	3d01      	subs	r5, #1
 800a3c6:	f1a9 0902 	sub.w	r9, r9, #2
 800a3ca:	4680      	mov	r8, r0
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff fea4 	bl	800a11c <listen_message_reliably>
 800a3d4:	f001 f96a 	bl	800b6ac <uxr_millis>
 800a3d8:	eba0 0008 	sub.w	r0, r0, r8
 800a3dc:	1a39      	subs	r1, r7, r0
 800a3de:	b344      	cbz	r4, 800a432 <uxr_run_session_until_all_status+0x96>
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	46ac      	mov	ip, r5
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e002      	b.n	800a3ee <uxr_run_session_until_all_status+0x52>
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	d20d      	bcs.n	800a408 <uxr_run_session_until_all_status+0x6c>
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800a3f2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800a3f6:	d1f7      	bne.n	800a3e8 <uxr_run_session_until_all_status+0x4c>
 800a3f8:	42a3      	cmp	r3, r4
 800a3fa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800a3fe:	d213      	bcs.n	800a428 <uxr_run_session_until_all_status+0x8c>
 800a400:	2a00      	cmp	r2, #0
 800a402:	d0f3      	beq.n	800a3ec <uxr_run_session_until_all_status+0x50>
 800a404:	2900      	cmp	r1, #0
 800a406:	dce2      	bgt.n	800a3ce <uxr_run_session_until_all_status+0x32>
 800a408:	2300      	movs	r3, #0
 800a40a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800a40c:	442c      	add	r4, r5
 800a40e:	e001      	b.n	800a414 <uxr_run_session_until_all_status+0x78>
 800a410:	2b01      	cmp	r3, #1
 800a412:	d812      	bhi.n	800a43a <uxr_run_session_until_all_status+0x9e>
 800a414:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a418:	4284      	cmp	r4, r0
 800a41a:	d1f9      	bne.n	800a410 <uxr_run_session_until_all_status+0x74>
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	bf8c      	ite	hi
 800a420:	2000      	movhi	r0, #0
 800a422:	2001      	movls	r0, #1
 800a424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a428:	2900      	cmp	r1, #0
 800a42a:	dded      	ble.n	800a408 <uxr_run_session_until_all_status+0x6c>
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	d1ce      	bne.n	800a3ce <uxr_run_session_until_all_status+0x32>
 800a430:	e7ea      	b.n	800a408 <uxr_run_session_until_all_status+0x6c>
 800a432:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800a434:	2001      	movs	r0, #1
 800a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43a:	2000      	movs	r0, #0
 800a43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a440 <wait_session_status>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	4604      	mov	r4, r0
 800a446:	b09d      	sub	sp, #116	@ 0x74
 800a448:	20ff      	movs	r0, #255	@ 0xff
 800a44a:	7160      	strb	r0, [r4, #5]
 800a44c:	9303      	str	r3, [sp, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80b6 	beq.w	800a5c0 <wait_session_status+0x180>
 800a454:	468a      	mov	sl, r1
 800a456:	4691      	mov	r9, r2
 800a458:	f04f 0b00 	mov.w	fp, #0
 800a45c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a45e:	464a      	mov	r2, r9
 800a460:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a464:	4651      	mov	r1, sl
 800a466:	47a8      	blx	r5
 800a468:	f001 f920 	bl	800b6ac <uxr_millis>
 800a46c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a470:	4605      	mov	r5, r0
 800a472:	e009      	b.n	800a488 <wait_session_status+0x48>
 800a474:	f001 f91a 	bl	800b6ac <uxr_millis>
 800a478:	1b40      	subs	r0, r0, r5
 800a47a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dd40      	ble.n	800a504 <wait_session_status+0xc4>
 800a482:	7960      	ldrb	r0, [r4, #5]
 800a484:	28ff      	cmp	r0, #255	@ 0xff
 800a486:	d145      	bne.n	800a514 <wait_session_status+0xd4>
 800a488:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800a48a:	a908      	add	r1, sp, #32
 800a48c:	6896      	ldr	r6, [r2, #8]
 800a48e:	6810      	ldr	r0, [r2, #0]
 800a490:	aa09      	add	r2, sp, #36	@ 0x24
 800a492:	47b0      	blx	r6
 800a494:	2800      	cmp	r0, #0
 800a496:	d0ed      	beq.n	800a474 <wait_session_status+0x34>
 800a498:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a49c:	a80c      	add	r0, sp, #48	@ 0x30
 800a49e:	f004 f86b 	bl	800e578 <ucdr_init_buffer>
 800a4a2:	2600      	movs	r6, #0
 800a4a4:	f10d 031e 	add.w	r3, sp, #30
 800a4a8:	aa07      	add	r2, sp, #28
 800a4aa:	a90c      	add	r1, sp, #48	@ 0x30
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f88d 601c 	strb.w	r6, [sp, #28]
 800a4b2:	f000 fa87 	bl	800a9c4 <uxr_read_session_header>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d0dc      	beq.n	800a474 <wait_session_status+0x34>
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a4c0:	f000 ffb6 	bl	800b430 <uxr_stream_id_from_raw>
 800a4c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800a4c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	2f01      	cmp	r7, #1
 800a4d0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800a4d4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a4d8:	d05c      	beq.n	800a594 <wait_session_status+0x154>
 800a4da:	2f02      	cmp	r7, #2
 800a4dc:	d020      	beq.n	800a520 <wait_session_status+0xe0>
 800a4de:	2f00      	cmp	r7, #0
 800a4e0:	d1c8      	bne.n	800a474 <wait_session_status+0x34>
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f000 ffa3 	bl	800b430 <uxr_stream_id_from_raw>
 800a4ea:	a90c      	add	r1, sp, #48	@ 0x30
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7ff fc8b 	bl	8009e0c <read_submessage_list>
 800a4f6:	f001 f8d9 	bl	800b6ac <uxr_millis>
 800a4fa:	1b40      	subs	r0, r0, r5
 800a4fc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a500:	2b00      	cmp	r3, #0
 800a502:	dcbe      	bgt.n	800a482 <wait_session_status+0x42>
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	7960      	ldrb	r0, [r4, #5]
 800a508:	f10b 0b01 	add.w	fp, fp, #1
 800a50c:	455b      	cmp	r3, fp
 800a50e:	d001      	beq.n	800a514 <wait_session_status+0xd4>
 800a510:	28ff      	cmp	r0, #255	@ 0xff
 800a512:	d0a3      	beq.n	800a45c <wait_session_status+0x1c>
 800a514:	38ff      	subs	r0, #255	@ 0xff
 800a516:	bf18      	it	ne
 800a518:	2001      	movne	r0, #1
 800a51a:	b01d      	add	sp, #116	@ 0x74
 800a51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a520:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	4631      	mov	r1, r6
 800a528:	f104 0008 	add.w	r0, r4, #8
 800a52c:	f001 f86e 	bl	800b60c <uxr_get_input_reliable_stream>
 800a530:	4680      	mov	r8, r0
 800a532:	b348      	cbz	r0, 800a588 <wait_session_status+0x148>
 800a534:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a536:	9205      	str	r2, [sp, #20]
 800a538:	a80c      	add	r0, sp, #48	@ 0x30
 800a53a:	f004 f84d 	bl	800e5d8 <ucdr_buffer_remaining>
 800a53e:	4603      	mov	r3, r0
 800a540:	f10d 001d 	add.w	r0, sp, #29
 800a544:	9000      	str	r0, [sp, #0]
 800a546:	9a05      	ldr	r2, [sp, #20]
 800a548:	9902      	ldr	r1, [sp, #8]
 800a54a:	4640      	mov	r0, r8
 800a54c:	f004 f990 	bl	800e870 <uxr_receive_reliable_message>
 800a550:	b1d0      	cbz	r0, 800a588 <wait_session_status+0x148>
 800a552:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d03a      	beq.n	800a5d0 <wait_session_status+0x190>
 800a55a:	9f04      	ldr	r7, [sp, #16]
 800a55c:	e00a      	b.n	800a574 <wait_session_status+0x134>
 800a55e:	f04f 0302 	mov.w	r3, #2
 800a562:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800a566:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800a56a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800a56e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a570:	f7ff fc4c 	bl	8009e0c <read_submessage_list>
 800a574:	a914      	add	r1, sp, #80	@ 0x50
 800a576:	2204      	movs	r2, #4
 800a578:	4640      	mov	r0, r8
 800a57a:	f004 f9f9 	bl	800e970 <uxr_next_input_reliable_buffer_available>
 800a57e:	4603      	mov	r3, r0
 800a580:	a914      	add	r1, sp, #80	@ 0x50
 800a582:	4620      	mov	r0, r4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1ea      	bne.n	800a55e <wait_session_status+0x11e>
 800a588:	9904      	ldr	r1, [sp, #16]
 800a58a:	4632      	mov	r2, r6
 800a58c:	4620      	mov	r0, r4
 800a58e:	f7ff fab9 	bl	8009b04 <write_submessage_acknack.isra.0>
 800a592:	e76f      	b.n	800a474 <wait_session_status+0x34>
 800a594:	4631      	mov	r1, r6
 800a596:	f104 0008 	add.w	r0, r4, #8
 800a59a:	f001 f82d 	bl	800b5f8 <uxr_get_input_best_effort_stream>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f43f af68 	beq.w	800a474 <wait_session_status+0x34>
 800a5a4:	9902      	ldr	r1, [sp, #8]
 800a5a6:	f004 f8cf 	bl	800e748 <uxr_receive_best_effort_message>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f43f af62 	beq.w	800a474 <wait_session_status+0x34>
 800a5b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800a5b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5b6:	a90c      	add	r1, sp, #48	@ 0x30
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7ff fc27 	bl	8009e0c <read_submessage_list>
 800a5be:	e759      	b.n	800a474 <wait_session_status+0x34>
 800a5c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a5c2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a5c6:	47a0      	blx	r4
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	b01d      	add	sp, #116	@ 0x74
 800a5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800a5d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5d6:	a90c      	add	r1, sp, #48	@ 0x30
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff fc17 	bl	8009e0c <read_submessage_list>
 800a5de:	e7bc      	b.n	800a55a <wait_session_status+0x11a>

0800a5e0 <uxr_delete_session_retries>:
 800a5e0:	b530      	push	{r4, r5, lr}
 800a5e2:	b08f      	sub	sp, #60	@ 0x3c
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	f000 fa2e 	bl	800aa48 <uxr_session_header_offset>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	2210      	movs	r2, #16
 800a5f0:	9000      	str	r0, [sp, #0]
 800a5f2:	a902      	add	r1, sp, #8
 800a5f4:	a806      	add	r0, sp, #24
 800a5f6:	f003 ffad 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800a5fa:	a906      	add	r1, sp, #24
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 f973 	bl	800a8e8 <uxr_buffer_delete_session>
 800a602:	2200      	movs	r2, #0
 800a604:	4611      	mov	r1, r2
 800a606:	9b06      	ldr	r3, [sp, #24]
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 f9c7 	bl	800a99c <uxr_stamp_session_header>
 800a60e:	a806      	add	r0, sp, #24
 800a610:	f003 ffde 	bl	800e5d0 <ucdr_buffer_length>
 800a614:	462b      	mov	r3, r5
 800a616:	4602      	mov	r2, r0
 800a618:	a902      	add	r1, sp, #8
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7ff ff10 	bl	800a440 <wait_session_status>
 800a620:	b118      	cbz	r0, 800a62a <uxr_delete_session_retries+0x4a>
 800a622:	7960      	ldrb	r0, [r4, #5]
 800a624:	fab0 f080 	clz	r0, r0
 800a628:	0940      	lsrs	r0, r0, #5
 800a62a:	b00f      	add	sp, #60	@ 0x3c
 800a62c:	bd30      	pop	{r4, r5, pc}
 800a62e:	bf00      	nop

0800a630 <uxr_create_session>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	f100 0b08 	add.w	fp, r0, #8
 800a638:	b0ab      	sub	sp, #172	@ 0xac
 800a63a:	4604      	mov	r4, r0
 800a63c:	4658      	mov	r0, fp
 800a63e:	f000 ff2b 	bl	800b498 <uxr_reset_stream_storage>
 800a642:	4620      	mov	r0, r4
 800a644:	f000 fa00 	bl	800aa48 <uxr_session_header_offset>
 800a648:	2300      	movs	r3, #0
 800a64a:	9000      	str	r0, [sp, #0]
 800a64c:	221c      	movs	r2, #28
 800a64e:	a90b      	add	r1, sp, #44	@ 0x2c
 800a650:	a812      	add	r0, sp, #72	@ 0x48
 800a652:	f003 ff7f 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800a656:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a658:	8a1a      	ldrh	r2, [r3, #16]
 800a65a:	3a04      	subs	r2, #4
 800a65c:	b292      	uxth	r2, r2
 800a65e:	a912      	add	r1, sp, #72	@ 0x48
 800a660:	4620      	mov	r0, r4
 800a662:	f000 f917 	bl	800a894 <uxr_buffer_create_session>
 800a666:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 f983 	bl	800a974 <uxr_stamp_create_session_header>
 800a66e:	a812      	add	r0, sp, #72	@ 0x48
 800a670:	f003 ffae 	bl	800e5d0 <ucdr_buffer_length>
 800a674:	23ff      	movs	r3, #255	@ 0xff
 800a676:	7163      	strb	r3, [r4, #5]
 800a678:	230a      	movs	r3, #10
 800a67a:	46da      	mov	sl, fp
 800a67c:	9303      	str	r3, [sp, #12]
 800a67e:	4683      	mov	fp, r0
 800a680:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a682:	465a      	mov	r2, fp
 800a684:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a688:	a90b      	add	r1, sp, #44	@ 0x2c
 800a68a:	47a8      	blx	r5
 800a68c:	f001 f80e 	bl	800b6ac <uxr_millis>
 800a690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a694:	4605      	mov	r5, r0
 800a696:	e009      	b.n	800a6ac <uxr_create_session+0x7c>
 800a698:	f001 f808 	bl	800b6ac <uxr_millis>
 800a69c:	1b40      	subs	r0, r0, r5
 800a69e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	7962      	ldrb	r2, [r4, #5]
 800a6a6:	dd38      	ble.n	800a71a <uxr_create_session+0xea>
 800a6a8:	2aff      	cmp	r2, #255	@ 0xff
 800a6aa:	d13c      	bne.n	800a726 <uxr_create_session+0xf6>
 800a6ac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800a6ae:	a907      	add	r1, sp, #28
 800a6b0:	6896      	ldr	r6, [r2, #8]
 800a6b2:	6810      	ldr	r0, [r2, #0]
 800a6b4:	aa08      	add	r2, sp, #32
 800a6b6:	47b0      	blx	r6
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d0ed      	beq.n	800a698 <uxr_create_session+0x68>
 800a6bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a6c0:	a81a      	add	r0, sp, #104	@ 0x68
 800a6c2:	f003 ff59 	bl	800e578 <ucdr_init_buffer>
 800a6c6:	2600      	movs	r6, #0
 800a6c8:	f10d 031a 	add.w	r3, sp, #26
 800a6cc:	aa06      	add	r2, sp, #24
 800a6ce:	a91a      	add	r1, sp, #104	@ 0x68
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f88d 6018 	strb.w	r6, [sp, #24]
 800a6d6:	f000 f975 	bl	800a9c4 <uxr_read_session_header>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d0dc      	beq.n	800a698 <uxr_create_session+0x68>
 800a6de:	4631      	mov	r1, r6
 800a6e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a6e4:	f000 fea4 	bl	800b430 <uxr_stream_id_from_raw>
 800a6e8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a6ec:	2e01      	cmp	r6, #1
 800a6ee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800a6f2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800a6f6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a6fa:	d053      	beq.n	800a7a4 <uxr_create_session+0x174>
 800a6fc:	2e02      	cmp	r6, #2
 800a6fe:	d018      	beq.n	800a732 <uxr_create_session+0x102>
 800a700:	2e00      	cmp	r6, #0
 800a702:	d1c9      	bne.n	800a698 <uxr_create_session+0x68>
 800a704:	4631      	mov	r1, r6
 800a706:	4630      	mov	r0, r6
 800a708:	f000 fe92 	bl	800b430 <uxr_stream_id_from_raw>
 800a70c:	a91a      	add	r1, sp, #104	@ 0x68
 800a70e:	4602      	mov	r2, r0
 800a710:	900a      	str	r0, [sp, #40]	@ 0x28
 800a712:	4620      	mov	r0, r4
 800a714:	f7ff fb7a 	bl	8009e0c <read_submessage_list>
 800a718:	e7be      	b.n	800a698 <uxr_create_session+0x68>
 800a71a:	9b03      	ldr	r3, [sp, #12]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	9303      	str	r3, [sp, #12]
 800a720:	d001      	beq.n	800a726 <uxr_create_session+0xf6>
 800a722:	2aff      	cmp	r2, #255	@ 0xff
 800a724:	d0ac      	beq.n	800a680 <uxr_create_session+0x50>
 800a726:	2a00      	cmp	r2, #0
 800a728:	d051      	beq.n	800a7ce <uxr_create_session+0x19e>
 800a72a:	2000      	movs	r0, #0
 800a72c:	b02b      	add	sp, #172	@ 0xac
 800a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a732:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a736:	9304      	str	r3, [sp, #16]
 800a738:	4639      	mov	r1, r7
 800a73a:	4650      	mov	r0, sl
 800a73c:	f000 ff66 	bl	800b60c <uxr_get_input_reliable_stream>
 800a740:	4680      	mov	r8, r0
 800a742:	b348      	cbz	r0, 800a798 <uxr_create_session+0x168>
 800a744:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a746:	9205      	str	r2, [sp, #20]
 800a748:	a81a      	add	r0, sp, #104	@ 0x68
 800a74a:	f003 ff45 	bl	800e5d8 <ucdr_buffer_remaining>
 800a74e:	4603      	mov	r3, r0
 800a750:	f10d 0019 	add.w	r0, sp, #25
 800a754:	9000      	str	r0, [sp, #0]
 800a756:	9a05      	ldr	r2, [sp, #20]
 800a758:	4649      	mov	r1, r9
 800a75a:	4640      	mov	r0, r8
 800a75c:	f004 f888 	bl	800e870 <uxr_receive_reliable_message>
 800a760:	b1d0      	cbz	r0, 800a798 <uxr_create_session+0x168>
 800a762:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d038      	beq.n	800a7dc <uxr_create_session+0x1ac>
 800a76a:	9e04      	ldr	r6, [sp, #16]
 800a76c:	e00a      	b.n	800a784 <uxr_create_session+0x154>
 800a76e:	f04f 0302 	mov.w	r3, #2
 800a772:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800a776:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800a77a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a77e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a780:	f7ff fb44 	bl	8009e0c <read_submessage_list>
 800a784:	a922      	add	r1, sp, #136	@ 0x88
 800a786:	2204      	movs	r2, #4
 800a788:	4640      	mov	r0, r8
 800a78a:	f004 f8f1 	bl	800e970 <uxr_next_input_reliable_buffer_available>
 800a78e:	4603      	mov	r3, r0
 800a790:	a922      	add	r1, sp, #136	@ 0x88
 800a792:	4620      	mov	r0, r4
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1ea      	bne.n	800a76e <uxr_create_session+0x13e>
 800a798:	9904      	ldr	r1, [sp, #16]
 800a79a:	463a      	mov	r2, r7
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7ff f9b1 	bl	8009b04 <write_submessage_acknack.isra.0>
 800a7a2:	e779      	b.n	800a698 <uxr_create_session+0x68>
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	4650      	mov	r0, sl
 800a7a8:	f000 ff26 	bl	800b5f8 <uxr_get_input_best_effort_stream>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f43f af73 	beq.w	800a698 <uxr_create_session+0x68>
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	f003 ffc8 	bl	800e748 <uxr_receive_best_effort_message>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	f43f af6d 	beq.w	800a698 <uxr_create_session+0x68>
 800a7be:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800a7c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7c4:	a91a      	add	r1, sp, #104	@ 0x68
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7ff fb20 	bl	8009e0c <read_submessage_list>
 800a7cc:	e764      	b.n	800a698 <uxr_create_session+0x68>
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	f000 fe62 	bl	800b498 <uxr_reset_stream_storage>
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	b02b      	add	sp, #172	@ 0xac
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800a7e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7e2:	a91a      	add	r1, sp, #104	@ 0x68
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f7ff fb11 	bl	8009e0c <read_submessage_list>
 800a7ea:	e7be      	b.n	800a76a <uxr_create_session+0x13a>

0800a7ec <uxr_prepare_stream_to_write_submessage>:
 800a7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	4682      	mov	sl, r0
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4615      	mov	r5, r2
 800a7f8:	461e      	mov	r6, r3
 800a7fa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800a7fe:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800a802:	9101      	str	r1, [sp, #4]
 800a804:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a808:	f000 ff4a 	bl	800b6a0 <uxr_submessage_padding>
 800a80c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a810:	f105 0904 	add.w	r9, r5, #4
 800a814:	2b01      	cmp	r3, #1
 800a816:	4481      	add	r9, r0
 800a818:	d01d      	beq.n	800a856 <uxr_prepare_stream_to_write_submessage+0x6a>
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d116      	bne.n	800a84c <uxr_prepare_stream_to_write_submessage+0x60>
 800a81e:	4621      	mov	r1, r4
 800a820:	f10a 0008 	add.w	r0, sl, #8
 800a824:	f000 fede 	bl	800b5e4 <uxr_get_output_reliable_stream>
 800a828:	4604      	mov	r4, r0
 800a82a:	b158      	cbz	r0, 800a844 <uxr_prepare_stream_to_write_submessage+0x58>
 800a82c:	4649      	mov	r1, r9
 800a82e:	4632      	mov	r2, r6
 800a830:	f004 fa5a 	bl	800ece8 <uxr_prepare_reliable_buffer_to_write>
 800a834:	4604      	mov	r4, r0
 800a836:	b12c      	cbz	r4, 800a844 <uxr_prepare_stream_to_write_submessage+0x58>
 800a838:	4643      	mov	r3, r8
 800a83a:	b2aa      	uxth	r2, r5
 800a83c:	4639      	mov	r1, r7
 800a83e:	4630      	mov	r0, r6
 800a840:	f000 feee 	bl	800b620 <uxr_buffer_submessage_header>
 800a844:	4620      	mov	r0, r4
 800a846:	b002      	add	sp, #8
 800a848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84c:	2400      	movs	r4, #0
 800a84e:	4620      	mov	r0, r4
 800a850:	b002      	add	sp, #8
 800a852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a856:	4621      	mov	r1, r4
 800a858:	f10a 0008 	add.w	r0, sl, #8
 800a85c:	f000 feba 	bl	800b5d4 <uxr_get_output_best_effort_stream>
 800a860:	4604      	mov	r4, r0
 800a862:	2800      	cmp	r0, #0
 800a864:	d0ee      	beq.n	800a844 <uxr_prepare_stream_to_write_submessage+0x58>
 800a866:	4649      	mov	r1, r9
 800a868:	4632      	mov	r2, r6
 800a86a:	f004 f96d 	bl	800eb48 <uxr_prepare_best_effort_buffer_to_write>
 800a86e:	4604      	mov	r4, r0
 800a870:	e7e1      	b.n	800a836 <uxr_prepare_stream_to_write_submessage+0x4a>
 800a872:	bf00      	nop

0800a874 <uxr_init_session_info>:
 800a874:	0e13      	lsrs	r3, r2, #24
 800a876:	7043      	strb	r3, [r0, #1]
 800a878:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a87c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a880:	7001      	strb	r1, [r0, #0]
 800a882:	70c3      	strb	r3, [r0, #3]
 800a884:	2109      	movs	r1, #9
 800a886:	23ff      	movs	r3, #255	@ 0xff
 800a888:	f880 c002 	strb.w	ip, [r0, #2]
 800a88c:	7102      	strb	r2, [r0, #4]
 800a88e:	80c1      	strh	r1, [r0, #6]
 800a890:	7143      	strb	r3, [r0, #5]
 800a892:	4770      	bx	lr

0800a894 <uxr_buffer_create_session>:
 800a894:	b530      	push	{r4, r5, lr}
 800a896:	b089      	sub	sp, #36	@ 0x24
 800a898:	2300      	movs	r3, #0
 800a89a:	4d12      	ldr	r5, [pc, #72]	@ (800a8e4 <uxr_buffer_create_session+0x50>)
 800a89c:	9307      	str	r3, [sp, #28]
 800a89e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	80c2      	strh	r2, [r0, #6]
 800a8a8:	f88d 2004 	strb.w	r2, [sp, #4]
 800a8ac:	682a      	ldr	r2, [r5, #0]
 800a8ae:	9200      	str	r2, [sp, #0]
 800a8b0:	88aa      	ldrh	r2, [r5, #4]
 800a8b2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a8b6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800a8ba:	9202      	str	r2, [sp, #8]
 800a8bc:	460c      	mov	r4, r1
 800a8be:	7802      	ldrb	r2, [r0, #0]
 800a8c0:	9303      	str	r3, [sp, #12]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	f88d 200c 	strb.w	r2, [sp, #12]
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800a8d0:	9306      	str	r3, [sp, #24]
 800a8d2:	f000 fea5 	bl	800b620 <uxr_buffer_submessage_header>
 800a8d6:	4669      	mov	r1, sp
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f001 fb23 	bl	800bf24 <uxr_serialize_CREATE_CLIENT_Payload>
 800a8de:	b009      	add	sp, #36	@ 0x24
 800a8e0:	bd30      	pop	{r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	08010bbc 	.word	0x08010bbc

0800a8e8 <uxr_buffer_delete_session>:
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a91c <uxr_buffer_delete_session+0x34>)
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800a8f2:	f8ad c006 	strh.w	ip, [sp, #6]
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8fe:	80c2      	strh	r2, [r0, #6]
 800a900:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a904:	2204      	movs	r2, #4
 800a906:	2300      	movs	r3, #0
 800a908:	2103      	movs	r1, #3
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 fe88 	bl	800b620 <uxr_buffer_submessage_header>
 800a910:	a901      	add	r1, sp, #4
 800a912:	4620      	mov	r0, r4
 800a914:	f001 fbac 	bl	800c070 <uxr_serialize_DELETE_Payload>
 800a918:	b002      	add	sp, #8
 800a91a:	bd10      	pop	{r4, pc}
 800a91c:	08010bbc 	.word	0x08010bbc

0800a920 <uxr_read_create_session_status>:
 800a920:	b510      	push	{r4, lr}
 800a922:	b088      	sub	sp, #32
 800a924:	4604      	mov	r4, r0
 800a926:	4608      	mov	r0, r1
 800a928:	a901      	add	r1, sp, #4
 800a92a:	f001 fbb1 	bl	800c090 <uxr_deserialize_STATUS_AGENT_Payload>
 800a92e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a932:	7163      	strb	r3, [r4, #5]
 800a934:	b008      	add	sp, #32
 800a936:	bd10      	pop	{r4, pc}

0800a938 <uxr_read_delete_session_status>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	4604      	mov	r4, r0
 800a93c:	b084      	sub	sp, #16
 800a93e:	4608      	mov	r0, r1
 800a940:	a902      	add	r1, sp, #8
 800a942:	f001 fbd5 	bl	800c0f0 <uxr_deserialize_STATUS_Payload>
 800a946:	88e3      	ldrh	r3, [r4, #6]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d001      	beq.n	800a950 <uxr_read_delete_session_status+0x18>
 800a94c:	b004      	add	sp, #16
 800a94e:	bd10      	pop	{r4, pc}
 800a950:	f10d 000a 	add.w	r0, sp, #10
 800a954:	f7fe ff66 	bl	8009824 <uxr_object_id_from_raw>
 800a958:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a95c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a960:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a964:	b29b      	uxth	r3, r3
 800a966:	2b02      	cmp	r3, #2
 800a968:	bf04      	itt	eq
 800a96a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800a96e:	7163      	strbeq	r3, [r4, #5]
 800a970:	b004      	add	sp, #16
 800a972:	bd10      	pop	{r4, pc}

0800a974 <uxr_stamp_create_session_header>:
 800a974:	b510      	push	{r4, lr}
 800a976:	2208      	movs	r2, #8
 800a978:	b08a      	sub	sp, #40	@ 0x28
 800a97a:	4604      	mov	r4, r0
 800a97c:	eb0d 0002 	add.w	r0, sp, r2
 800a980:	f003 fdfa 	bl	800e578 <ucdr_init_buffer>
 800a984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a988:	9400      	str	r4, [sp, #0]
 800a98a:	2300      	movs	r3, #0
 800a98c:	461a      	mov	r2, r3
 800a98e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800a992:	a802      	add	r0, sp, #8
 800a994:	f000 feba 	bl	800b70c <uxr_serialize_message_header>
 800a998:	b00a      	add	sp, #40	@ 0x28
 800a99a:	bd10      	pop	{r4, pc}

0800a99c <uxr_stamp_session_header>:
 800a99c:	b530      	push	{r4, r5, lr}
 800a99e:	b08d      	sub	sp, #52	@ 0x34
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	9203      	str	r2, [sp, #12]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	a804      	add	r0, sp, #16
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	f003 fde4 	bl	800e578 <ucdr_init_buffer>
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	9400      	str	r4, [sp, #0]
 800a9b8:	462a      	mov	r2, r5
 800a9ba:	a804      	add	r0, sp, #16
 800a9bc:	f000 fea6 	bl	800b70c <uxr_serialize_message_header>
 800a9c0:	b00d      	add	sp, #52	@ 0x34
 800a9c2:	bd30      	pop	{r4, r5, pc}

0800a9c4 <uxr_read_session_header>:
 800a9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	4615      	mov	r5, r2
 800a9d2:	461e      	mov	r6, r3
 800a9d4:	f003 fe00 	bl	800e5d8 <ucdr_buffer_remaining>
 800a9d8:	2808      	cmp	r0, #8
 800a9da:	d803      	bhi.n	800a9e4 <uxr_read_session_header+0x20>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	b004      	add	sp, #16
 800a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e4:	f10d 080c 	add.w	r8, sp, #12
 800a9e8:	4633      	mov	r3, r6
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	f8cd 8000 	str.w	r8, [sp]
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f10d 010b 	add.w	r1, sp, #11
 800a9f6:	f000 fea7 	bl	800b748 <uxr_deserialize_message_header>
 800a9fa:	783a      	ldrb	r2, [r7, #0]
 800a9fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d1eb      	bne.n	800a9dc <uxr_read_session_header+0x18>
 800aa04:	061b      	lsls	r3, r3, #24
 800aa06:	d41c      	bmi.n	800aa42 <uxr_read_session_header+0x7e>
 800aa08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800aa0c:	787b      	ldrb	r3, [r7, #1]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d003      	beq.n	800aa1a <uxr_read_session_header+0x56>
 800aa12:	2001      	movs	r0, #1
 800aa14:	f080 0001 	eor.w	r0, r0, #1
 800aa18:	e7e1      	b.n	800a9de <uxr_read_session_header+0x1a>
 800aa1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800aa1e:	78bb      	ldrb	r3, [r7, #2]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	f107 0102 	add.w	r1, r7, #2
 800aa26:	d1f4      	bne.n	800aa12 <uxr_read_session_header+0x4e>
 800aa28:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800aa2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d1ee      	bne.n	800aa12 <uxr_read_session_header+0x4e>
 800aa34:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800aa38:	784b      	ldrb	r3, [r1, #1]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d1e9      	bne.n	800aa12 <uxr_read_session_header+0x4e>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e7e8      	b.n	800aa14 <uxr_read_session_header+0x50>
 800aa42:	2001      	movs	r0, #1
 800aa44:	e7cb      	b.n	800a9de <uxr_read_session_header+0x1a>
 800aa46:	bf00      	nop

0800aa48 <uxr_session_header_offset>:
 800aa48:	f990 3000 	ldrsb.w	r3, [r0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bfac      	ite	ge
 800aa50:	2008      	movge	r0, #8
 800aa52:	2004      	movlt	r0, #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop

0800aa58 <uxr_init_base_object_request>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	88c3      	ldrh	r3, [r0, #6]
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800aa62:	9101      	str	r1, [sp, #4]
 800aa64:	f1a3 010a 	sub.w	r1, r3, #10
 800aa68:	b289      	uxth	r1, r1
 800aa6a:	42a1      	cmp	r1, r4
 800aa6c:	d80e      	bhi.n	800aa8c <uxr_init_base_object_request+0x34>
 800aa6e:	3301      	adds	r3, #1
 800aa70:	b29c      	uxth	r4, r3
 800aa72:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	80c4      	strh	r4, [r0, #6]
 800aa7a:	9801      	ldr	r0, [sp, #4]
 800aa7c:	7011      	strb	r1, [r2, #0]
 800aa7e:	7053      	strb	r3, [r2, #1]
 800aa80:	1c91      	adds	r1, r2, #2
 800aa82:	f7fe fee3 	bl	800984c <uxr_object_id_to_raw>
 800aa86:	4620      	mov	r0, r4
 800aa88:	b002      	add	sp, #8
 800aa8a:	bd10      	pop	{r4, pc}
 800aa8c:	230a      	movs	r3, #10
 800aa8e:	2100      	movs	r1, #0
 800aa90:	461c      	mov	r4, r3
 800aa92:	e7f1      	b.n	800aa78 <uxr_init_base_object_request+0x20>

0800aa94 <uxr_parse_base_object_request>:
 800aa94:	b570      	push	{r4, r5, r6, lr}
 800aa96:	4604      	mov	r4, r0
 800aa98:	3002      	adds	r0, #2
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	f7fe fec1 	bl	8009824 <uxr_object_id_from_raw>
 800aaa2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800aaa6:	8028      	strh	r0, [r5, #0]
 800aaa8:	806b      	strh	r3, [r5, #2]
 800aaaa:	7822      	ldrb	r2, [r4, #0]
 800aaac:	7863      	ldrb	r3, [r4, #1]
 800aaae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800aab2:	8033      	strh	r3, [r6, #0]
 800aab4:	bd70      	pop	{r4, r5, r6, pc}
 800aab6:	bf00      	nop

0800aab8 <uxr_init_framing_io>:
 800aab8:	2300      	movs	r3, #0
 800aaba:	7041      	strb	r1, [r0, #1]
 800aabc:	7003      	strb	r3, [r0, #0]
 800aabe:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop

0800aac4 <uxr_write_framed_msg>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	4617      	mov	r7, r2
 800aaca:	7842      	ldrb	r2, [r0, #1]
 800aacc:	b083      	sub	sp, #12
 800aace:	460e      	mov	r6, r1
 800aad0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800aad4:	469a      	mov	sl, r3
 800aad6:	2901      	cmp	r1, #1
 800aad8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800aadc:	4604      	mov	r4, r0
 800aade:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800aae2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800aae6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800aaea:	f240 8137 	bls.w	800ad5c <uxr_write_framed_msg+0x298>
 800aaee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800aaf2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800aaf6:	2901      	cmp	r1, #1
 800aaf8:	f04f 0202 	mov.w	r2, #2
 800aafc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ab00:	f240 808f 	bls.w	800ac22 <uxr_write_framed_msg+0x15e>
 800ab04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab06:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800ab0a:	b2dd      	uxtb	r5, r3
 800ab0c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ab10:	2203      	movs	r2, #3
 800ab12:	2901      	cmp	r1, #1
 800ab14:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ab18:	f240 809a 	bls.w	800ac50 <uxr_write_framed_msg+0x18c>
 800ab1c:	18a1      	adds	r1, r4, r2
 800ab1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab20:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800ab24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ab28:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ab2c:	3201      	adds	r2, #1
 800ab2e:	2801      	cmp	r0, #1
 800ab30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ab34:	f240 80a0 	bls.w	800ac78 <uxr_write_framed_msg+0x1b4>
 800ab38:	18a0      	adds	r0, r4, r2
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	b2d2      	uxtb	r2, r2
 800ab3e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ab42:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 80a9 	beq.w	800ac9e <uxr_write_framed_msg+0x1da>
 800ab4c:	f04f 0900 	mov.w	r9, #0
 800ab50:	46c8      	mov	r8, r9
 800ab52:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800ab56:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ab5a:	2901      	cmp	r1, #1
 800ab5c:	f240 80c3 	bls.w	800ace6 <uxr_write_framed_msg+0x222>
 800ab60:	2a29      	cmp	r2, #41	@ 0x29
 800ab62:	f200 809f 	bhi.w	800aca4 <uxr_write_framed_msg+0x1e0>
 800ab66:	18a1      	adds	r1, r4, r2
 800ab68:	3201      	adds	r2, #1
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800ab70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ab74:	ea89 0303 	eor.w	r3, r9, r3
 800ab78:	498c      	ldr	r1, [pc, #560]	@ (800adac <uxr_write_framed_msg+0x2e8>)
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	f108 0801 	add.w	r8, r8, #1
 800ab80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab84:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800ab88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab8a:	4543      	cmp	r3, r8
 800ab8c:	d8e1      	bhi.n	800ab52 <uxr_write_framed_msg+0x8e>
 800ab8e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800ab92:	fa5f f889 	uxtb.w	r8, r9
 800ab96:	9301      	str	r3, [sp, #4]
 800ab98:	f04f 0900 	mov.w	r9, #0
 800ab9c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800aba0:	fa5f f18a 	uxtb.w	r1, sl
 800aba4:	2901      	cmp	r1, #1
 800aba6:	d921      	bls.n	800abec <uxr_write_framed_msg+0x128>
 800aba8:	2a29      	cmp	r2, #41	@ 0x29
 800abaa:	f240 80af 	bls.w	800ad0c <uxr_write_framed_msg+0x248>
 800abae:	2500      	movs	r5, #0
 800abb0:	e000      	b.n	800abb4 <uxr_write_framed_msg+0xf0>
 800abb2:	b160      	cbz	r0, 800abce <uxr_write_framed_msg+0x10a>
 800abb4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800abb8:	1b52      	subs	r2, r2, r5
 800abba:	465b      	mov	r3, fp
 800abbc:	4421      	add	r1, r4
 800abbe:	4638      	mov	r0, r7
 800abc0:	47b0      	blx	r6
 800abc2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800abc6:	4405      	add	r5, r0
 800abc8:	4295      	cmp	r5, r2
 800abca:	d3f2      	bcc.n	800abb2 <uxr_write_framed_msg+0xee>
 800abcc:	d003      	beq.n	800abd6 <uxr_write_framed_msg+0x112>
 800abce:	2000      	movs	r0, #0
 800abd0:	b003      	add	sp, #12
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	fa5f f18a 	uxtb.w	r1, sl
 800abda:	f04f 0300 	mov.w	r3, #0
 800abde:	2901      	cmp	r1, #1
 800abe0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800abe4:	f04f 0200 	mov.w	r2, #0
 800abe8:	f200 8090 	bhi.w	800ad0c <uxr_write_framed_msg+0x248>
 800abec:	1c51      	adds	r1, r2, #1
 800abee:	b2c9      	uxtb	r1, r1
 800abf0:	2929      	cmp	r1, #41	@ 0x29
 800abf2:	d8dc      	bhi.n	800abae <uxr_write_framed_msg+0xea>
 800abf4:	18a5      	adds	r5, r4, r2
 800abf6:	4421      	add	r1, r4
 800abf8:	3202      	adds	r2, #2
 800abfa:	f088 0820 	eor.w	r8, r8, #32
 800abfe:	4648      	mov	r0, r9
 800ac00:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800ac0a:	f04f 0901 	mov.w	r9, #1
 800ac0e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800ac12:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f040 8085 	bne.w	800ad26 <uxr_write_framed_msg+0x262>
 800ac1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac20:	e7bc      	b.n	800ab9c <uxr_write_framed_msg+0xd8>
 800ac22:	4611      	mov	r1, r2
 800ac24:	f04f 0c03 	mov.w	ip, #3
 800ac28:	2204      	movs	r2, #4
 800ac2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac2c:	4421      	add	r1, r4
 800ac2e:	b2dd      	uxtb	r5, r3
 800ac30:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800ac34:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800ac38:	44a4      	add	ip, r4
 800ac3a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ac3e:	f080 0020 	eor.w	r0, r0, #32
 800ac42:	2901      	cmp	r1, #1
 800ac44:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800ac48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ac4c:	f63f af66 	bhi.w	800ab1c <uxr_write_framed_msg+0x58>
 800ac50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac52:	18a0      	adds	r0, r4, r2
 800ac54:	f085 0520 	eor.w	r5, r5, #32
 800ac58:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ac5c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ac60:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800ac64:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800ac68:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ac6c:	3202      	adds	r2, #2
 800ac6e:	2801      	cmp	r0, #1
 800ac70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ac74:	f63f af60 	bhi.w	800ab38 <uxr_write_framed_msg+0x74>
 800ac78:	1c50      	adds	r0, r2, #1
 800ac7a:	18a5      	adds	r5, r4, r2
 800ac7c:	fa54 f080 	uxtab	r0, r4, r0
 800ac80:	3202      	adds	r2, #2
 800ac82:	f081 0120 	eor.w	r1, r1, #32
 800ac86:	b2d2      	uxtb	r2, r2
 800ac88:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ac8c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800ac90:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ac94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f47f af57 	bne.w	800ab4c <uxr_write_framed_msg+0x88>
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	4698      	mov	r8, r3
 800aca2:	e779      	b.n	800ab98 <uxr_write_framed_msg+0xd4>
 800aca4:	2500      	movs	r5, #0
 800aca6:	e001      	b.n	800acac <uxr_write_framed_msg+0x1e8>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d090      	beq.n	800abce <uxr_write_framed_msg+0x10a>
 800acac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800acb0:	1b52      	subs	r2, r2, r5
 800acb2:	465b      	mov	r3, fp
 800acb4:	4421      	add	r1, r4
 800acb6:	4638      	mov	r0, r7
 800acb8:	47b0      	blx	r6
 800acba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800acbe:	4405      	add	r5, r0
 800acc0:	4295      	cmp	r5, r2
 800acc2:	d3f1      	bcc.n	800aca8 <uxr_write_framed_msg+0x1e4>
 800acc4:	d183      	bne.n	800abce <uxr_write_framed_msg+0x10a>
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800acce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acd0:	4543      	cmp	r3, r8
 800acd2:	d964      	bls.n	800ad9e <uxr_write_framed_msg+0x2da>
 800acd4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800acd8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800acdc:	2901      	cmp	r1, #1
 800acde:	f04f 0200 	mov.w	r2, #0
 800ace2:	f63f af3d 	bhi.w	800ab60 <uxr_write_framed_msg+0x9c>
 800ace6:	1c51      	adds	r1, r2, #1
 800ace8:	b2c9      	uxtb	r1, r1
 800acea:	2929      	cmp	r1, #41	@ 0x29
 800acec:	d8da      	bhi.n	800aca4 <uxr_write_framed_msg+0x1e0>
 800acee:	18a0      	adds	r0, r4, r2
 800acf0:	4421      	add	r1, r4
 800acf2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800acf6:	3202      	adds	r2, #2
 800acf8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	f083 0020 	eor.w	r0, r3, #32
 800ad02:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800ad06:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ad0a:	e733      	b.n	800ab74 <uxr_write_framed_msg+0xb0>
 800ad0c:	18a1      	adds	r1, r4, r2
 800ad0e:	3201      	adds	r2, #1
 800ad10:	4648      	mov	r0, r9
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800ad18:	f04f 0901 	mov.w	r9, #1
 800ad1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ad20:	2800      	cmp	r0, #0
 800ad22:	f43f af7b 	beq.w	800ac1c <uxr_write_framed_msg+0x158>
 800ad26:	2500      	movs	r5, #0
 800ad28:	e002      	b.n	800ad30 <uxr_write_framed_msg+0x26c>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f43f af4f 	beq.w	800abce <uxr_write_framed_msg+0x10a>
 800ad30:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ad34:	1b52      	subs	r2, r2, r5
 800ad36:	465b      	mov	r3, fp
 800ad38:	4421      	add	r1, r4
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	47b0      	blx	r6
 800ad3e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ad42:	4405      	add	r5, r0
 800ad44:	4295      	cmp	r5, r2
 800ad46:	d3f0      	bcc.n	800ad2a <uxr_write_framed_msg+0x266>
 800ad48:	f47f af41 	bne.w	800abce <uxr_write_framed_msg+0x10a>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ad52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad54:	b298      	uxth	r0, r3
 800ad56:	b003      	add	sp, #12
 800ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5c:	217d      	movs	r1, #125	@ 0x7d
 800ad5e:	f082 0220 	eor.w	r2, r2, #32
 800ad62:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800ad66:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800ad6a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800ad6e:	2901      	cmp	r1, #1
 800ad70:	f04f 0203 	mov.w	r2, #3
 800ad74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ad78:	d804      	bhi.n	800ad84 <uxr_write_framed_msg+0x2c0>
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	f04f 0c04 	mov.w	ip, #4
 800ad80:	2205      	movs	r2, #5
 800ad82:	e752      	b.n	800ac2a <uxr_write_framed_msg+0x166>
 800ad84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad86:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800ad8a:	b2dd      	uxtb	r5, r3
 800ad8c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ad90:	2204      	movs	r2, #4
 800ad92:	2901      	cmp	r1, #1
 800ad94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ad98:	f63f aec0 	bhi.w	800ab1c <uxr_write_framed_msg+0x58>
 800ad9c:	e758      	b.n	800ac50 <uxr_write_framed_msg+0x18c>
 800ad9e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800ada2:	fa5f f889 	uxtb.w	r8, r9
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	e6f5      	b.n	800ab98 <uxr_write_framed_msg+0xd4>
 800adac:	08010c50 	.word	0x08010c50

0800adb0 <uxr_framing_read_transport>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	4604      	mov	r4, r0
 800adb6:	b083      	sub	sp, #12
 800adb8:	461f      	mov	r7, r3
 800adba:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800adbe:	4689      	mov	r9, r1
 800adc0:	4692      	mov	sl, r2
 800adc2:	f000 fc73 	bl	800b6ac <uxr_millis>
 800adc6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800adca:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800adce:	42b3      	cmp	r3, r6
 800add0:	4680      	mov	r8, r0
 800add2:	d061      	beq.n	800ae98 <uxr_framing_read_transport+0xe8>
 800add4:	d81c      	bhi.n	800ae10 <uxr_framing_read_transport+0x60>
 800add6:	1e75      	subs	r5, r6, #1
 800add8:	1aed      	subs	r5, r5, r3
 800adda:	b2ed      	uxtb	r5, r5
 800addc:	2600      	movs	r6, #0
 800adde:	455d      	cmp	r5, fp
 800ade0:	d81f      	bhi.n	800ae22 <uxr_framing_read_transport+0x72>
 800ade2:	19ab      	adds	r3, r5, r6
 800ade4:	455b      	cmp	r3, fp
 800ade6:	bf84      	itt	hi
 800ade8:	ebab 0605 	subhi.w	r6, fp, r5
 800adec:	b2f6      	uxtbhi	r6, r6
 800adee:	b9ed      	cbnz	r5, 800ae2c <uxr_framing_read_transport+0x7c>
 800adf0:	f04f 0b00 	mov.w	fp, #0
 800adf4:	f000 fc5a 	bl	800b6ac <uxr_millis>
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	eba0 0808 	sub.w	r8, r0, r8
 800adfe:	eba3 0308 	sub.w	r3, r3, r8
 800ae02:	4658      	mov	r0, fp
 800ae04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae08:	603b      	str	r3, [r7, #0]
 800ae0a:	b003      	add	sp, #12
 800ae0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	d049      	beq.n	800aea8 <uxr_framing_read_transport+0xf8>
 800ae14:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800ae18:	b2ed      	uxtb	r5, r5
 800ae1a:	3e01      	subs	r6, #1
 800ae1c:	455d      	cmp	r5, fp
 800ae1e:	b2f6      	uxtb	r6, r6
 800ae20:	d9df      	bls.n	800ade2 <uxr_framing_read_transport+0x32>
 800ae22:	fa5f f58b 	uxtb.w	r5, fp
 800ae26:	2600      	movs	r6, #0
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	d0e1      	beq.n	800adf0 <uxr_framing_read_transport+0x40>
 800ae2c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ae30:	3102      	adds	r1, #2
 800ae32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	4421      	add	r1, r4
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	47c8      	blx	r9
 800ae40:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ae44:	4a1a      	ldr	r2, [pc, #104]	@ (800aeb0 <uxr_framing_read_transport+0x100>)
 800ae46:	4403      	add	r3, r0
 800ae48:	0859      	lsrs	r1, r3, #1
 800ae4a:	fba2 2101 	umull	r2, r1, r2, r1
 800ae4e:	0889      	lsrs	r1, r1, #2
 800ae50:	222a      	movs	r2, #42	@ 0x2a
 800ae52:	fb02 3111 	mls	r1, r2, r1, r3
 800ae56:	4683      	mov	fp, r0
 800ae58:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0c7      	beq.n	800adf0 <uxr_framing_read_transport+0x40>
 800ae60:	42a8      	cmp	r0, r5
 800ae62:	d1c7      	bne.n	800adf4 <uxr_framing_read_transport+0x44>
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	d0c5      	beq.n	800adf4 <uxr_framing_read_transport+0x44>
 800ae68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	3102      	adds	r1, #2
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4421      	add	r1, r4
 800ae72:	2300      	movs	r3, #0
 800ae74:	4650      	mov	r0, sl
 800ae76:	47c8      	blx	r9
 800ae78:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ae7c:	4a0c      	ldr	r2, [pc, #48]	@ (800aeb0 <uxr_framing_read_transport+0x100>)
 800ae7e:	180b      	adds	r3, r1, r0
 800ae80:	0859      	lsrs	r1, r3, #1
 800ae82:	fba2 1201 	umull	r1, r2, r2, r1
 800ae86:	0892      	lsrs	r2, r2, #2
 800ae88:	212a      	movs	r1, #42	@ 0x2a
 800ae8a:	fb01 3312 	mls	r3, r1, r2, r3
 800ae8e:	eb00 0b05 	add.w	fp, r0, r5
 800ae92:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800ae96:	e7ad      	b.n	800adf4 <uxr_framing_read_transport+0x44>
 800ae98:	2600      	movs	r6, #0
 800ae9a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800ae9e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800aea0:	d9bf      	bls.n	800ae22 <uxr_framing_read_transport+0x72>
 800aea2:	2102      	movs	r1, #2
 800aea4:	2529      	movs	r5, #41	@ 0x29
 800aea6:	e7c4      	b.n	800ae32 <uxr_framing_read_transport+0x82>
 800aea8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800aeac:	b2ed      	uxtb	r5, r5
 800aeae:	e796      	b.n	800adde <uxr_framing_read_transport+0x2e>
 800aeb0:	30c30c31 	.word	0x30c30c31

0800aeb4 <uxr_read_framed_msg>:
 800aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	461e      	mov	r6, r3
 800aeba:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800aebe:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800aec2:	429d      	cmp	r5, r3
 800aec4:	b083      	sub	sp, #12
 800aec6:	4604      	mov	r4, r0
 800aec8:	4688      	mov	r8, r1
 800aeca:	4691      	mov	r9, r2
 800aecc:	f000 8188 	beq.w	800b1e0 <uxr_read_framed_msg+0x32c>
 800aed0:	7823      	ldrb	r3, [r4, #0]
 800aed2:	4dc1      	ldr	r5, [pc, #772]	@ (800b1d8 <uxr_read_framed_msg+0x324>)
 800aed4:	4fc1      	ldr	r7, [pc, #772]	@ (800b1dc <uxr_read_framed_msg+0x328>)
 800aed6:	2b07      	cmp	r3, #7
 800aed8:	d8fd      	bhi.n	800aed6 <uxr_read_framed_msg+0x22>
 800aeda:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aede:	0115      	.short	0x0115
 800aee0:	00d600f6 	.word	0x00d600f6
 800aee4:	009000b9 	.word	0x009000b9
 800aee8:	0030004d 	.word	0x0030004d
 800aeec:	0008      	.short	0x0008
 800aeee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800aef2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800aef6:	4299      	cmp	r1, r3
 800aef8:	f000 814a 	beq.w	800b190 <uxr_read_framed_msg+0x2dc>
 800aefc:	18e2      	adds	r2, r4, r3
 800aefe:	7892      	ldrb	r2, [r2, #2]
 800af00:	2a7d      	cmp	r2, #125	@ 0x7d
 800af02:	f000 8199 	beq.w	800b238 <uxr_read_framed_msg+0x384>
 800af06:	3301      	adds	r3, #1
 800af08:	0858      	lsrs	r0, r3, #1
 800af0a:	fba5 1000 	umull	r1, r0, r5, r0
 800af0e:	0880      	lsrs	r0, r0, #2
 800af10:	212a      	movs	r1, #42	@ 0x2a
 800af12:	fb01 3310 	mls	r3, r1, r0, r3
 800af16:	2a7e      	cmp	r2, #126	@ 0x7e
 800af18:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800af1c:	f000 8252 	beq.w	800b3c4 <uxr_read_framed_msg+0x510>
 800af20:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800af22:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800af24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2200      	movs	r2, #0
 800af2c:	4299      	cmp	r1, r3
 800af2e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800af30:	7022      	strb	r2, [r4, #0]
 800af32:	f000 8179 	beq.w	800b228 <uxr_read_framed_msg+0x374>
 800af36:	2000      	movs	r0, #0
 800af38:	b003      	add	sp, #12
 800af3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800af42:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800af46:	4299      	cmp	r1, r3
 800af48:	f000 8131 	beq.w	800b1ae <uxr_read_framed_msg+0x2fa>
 800af4c:	18e2      	adds	r2, r4, r3
 800af4e:	7890      	ldrb	r0, [r2, #2]
 800af50:	287d      	cmp	r0, #125	@ 0x7d
 800af52:	f000 8190 	beq.w	800b276 <uxr_read_framed_msg+0x3c2>
 800af56:	3301      	adds	r3, #1
 800af58:	085a      	lsrs	r2, r3, #1
 800af5a:	fba5 1202 	umull	r1, r2, r5, r2
 800af5e:	0892      	lsrs	r2, r2, #2
 800af60:	212a      	movs	r1, #42	@ 0x2a
 800af62:	fb01 3312 	mls	r3, r1, r2, r3
 800af66:	287e      	cmp	r0, #126	@ 0x7e
 800af68:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800af6c:	f000 821a 	beq.w	800b3a4 <uxr_read_framed_msg+0x4f0>
 800af70:	2307      	movs	r3, #7
 800af72:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800af74:	7023      	strb	r3, [r4, #0]
 800af76:	e7ae      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800af78:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800af7a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800af7e:	459e      	cmp	lr, r3
 800af80:	d938      	bls.n	800aff4 <uxr_read_framed_msg+0x140>
 800af82:	ee07 8a90 	vmov	s15, r8
 800af86:	212a      	movs	r1, #42	@ 0x2a
 800af88:	e020      	b.n	800afcc <uxr_read_framed_msg+0x118>
 800af8a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800af8e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800af92:	f000 80d4 	beq.w	800b13e <uxr_read_framed_msg+0x28a>
 800af96:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800af9a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800af9e:	f000 8219 	beq.w	800b3d4 <uxr_read_framed_msg+0x520>
 800afa2:	f806 c003 	strb.w	ip, [r6, r3]
 800afa6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800afaa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800afac:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800afb0:	ea8a 000c 	eor.w	r0, sl, ip
 800afb4:	b2c0      	uxtb	r0, r0
 800afb6:	3301      	adds	r3, #1
 800afb8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800afc2:	4573      	cmp	r3, lr
 800afc4:	8663      	strh	r3, [r4, #50]	@ 0x32
 800afc6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800afc8:	f080 8120 	bcs.w	800b20c <uxr_read_framed_msg+0x358>
 800afcc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800afd0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800afd4:	f100 0c01 	add.w	ip, r0, #1
 800afd8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800afdc:	fba5 8202 	umull	r8, r2, r5, r2
 800afe0:	0892      	lsrs	r2, r2, #2
 800afe2:	4582      	cmp	sl, r0
 800afe4:	eb04 0b00 	add.w	fp, r4, r0
 800afe8:	fb01 c212 	mls	r2, r1, r2, ip
 800afec:	d1cd      	bne.n	800af8a <uxr_read_framed_msg+0xd6>
 800afee:	ee17 8a90 	vmov	r8, s15
 800aff2:	459e      	cmp	lr, r3
 800aff4:	f040 8111 	bne.w	800b21a <uxr_read_framed_msg+0x366>
 800aff8:	2306      	movs	r3, #6
 800affa:	7023      	strb	r3, [r4, #0]
 800affc:	e76b      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800affe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800b002:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800b006:	4298      	cmp	r0, r3
 800b008:	f000 80c2 	beq.w	800b190 <uxr_read_framed_msg+0x2dc>
 800b00c:	18e2      	adds	r2, r4, r3
 800b00e:	7891      	ldrb	r1, [r2, #2]
 800b010:	297d      	cmp	r1, #125	@ 0x7d
 800b012:	f000 814c 	beq.w	800b2ae <uxr_read_framed_msg+0x3fa>
 800b016:	3301      	adds	r3, #1
 800b018:	085a      	lsrs	r2, r3, #1
 800b01a:	fba5 0202 	umull	r0, r2, r5, r2
 800b01e:	0892      	lsrs	r2, r2, #2
 800b020:	202a      	movs	r0, #42	@ 0x2a
 800b022:	fb00 3312 	mls	r3, r0, r2, r3
 800b026:	297e      	cmp	r1, #126	@ 0x7e
 800b028:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b02c:	f000 81ca 	beq.w	800b3c4 <uxr_read_framed_msg+0x510>
 800b030:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800b032:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800b036:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b038:	b29b      	uxth	r3, r3
 800b03a:	2000      	movs	r0, #0
 800b03c:	428b      	cmp	r3, r1
 800b03e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800b040:	8660      	strh	r0, [r4, #50]	@ 0x32
 800b042:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800b044:	f240 80df 	bls.w	800b206 <uxr_read_framed_msg+0x352>
 800b048:	7020      	strb	r0, [r4, #0]
 800b04a:	b003      	add	sp, #12
 800b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b050:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800b054:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800b058:	4299      	cmp	r1, r3
 800b05a:	f000 80a8 	beq.w	800b1ae <uxr_read_framed_msg+0x2fa>
 800b05e:	18e2      	adds	r2, r4, r3
 800b060:	7890      	ldrb	r0, [r2, #2]
 800b062:	287d      	cmp	r0, #125	@ 0x7d
 800b064:	f000 8164 	beq.w	800b330 <uxr_read_framed_msg+0x47c>
 800b068:	3301      	adds	r3, #1
 800b06a:	085a      	lsrs	r2, r3, #1
 800b06c:	fba5 1202 	umull	r1, r2, r5, r2
 800b070:	0892      	lsrs	r2, r2, #2
 800b072:	212a      	movs	r1, #42	@ 0x2a
 800b074:	fb01 3312 	mls	r3, r1, r2, r3
 800b078:	287e      	cmp	r0, #126	@ 0x7e
 800b07a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b07e:	f000 8191 	beq.w	800b3a4 <uxr_read_framed_msg+0x4f0>
 800b082:	2304      	movs	r3, #4
 800b084:	8620      	strh	r0, [r4, #48]	@ 0x30
 800b086:	7023      	strb	r3, [r4, #0]
 800b088:	e725      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b08a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800b08e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800b092:	4290      	cmp	r0, r2
 800b094:	f000 80b3 	beq.w	800b1fe <uxr_read_framed_msg+0x34a>
 800b098:	18a3      	adds	r3, r4, r2
 800b09a:	7899      	ldrb	r1, [r3, #2]
 800b09c:	297d      	cmp	r1, #125	@ 0x7d
 800b09e:	f000 8164 	beq.w	800b36a <uxr_read_framed_msg+0x4b6>
 800b0a2:	3201      	adds	r2, #1
 800b0a4:	0850      	lsrs	r0, r2, #1
 800b0a6:	fba5 3000 	umull	r3, r0, r5, r0
 800b0aa:	0880      	lsrs	r0, r0, #2
 800b0ac:	232a      	movs	r3, #42	@ 0x2a
 800b0ae:	fb03 2210 	mls	r2, r3, r0, r2
 800b0b2:	297e      	cmp	r1, #126	@ 0x7e
 800b0b4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800b0b8:	f000 8188 	beq.w	800b3cc <uxr_read_framed_msg+0x518>
 800b0bc:	7863      	ldrb	r3, [r4, #1]
 800b0be:	428b      	cmp	r3, r1
 800b0c0:	bf0c      	ite	eq
 800b0c2:	2303      	moveq	r3, #3
 800b0c4:	2300      	movne	r3, #0
 800b0c6:	7023      	strb	r3, [r4, #0]
 800b0c8:	e705      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b0ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800b0ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	4299      	cmp	r1, r3
 800b0d6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800b0da:	d06c      	beq.n	800b1b6 <uxr_read_framed_msg+0x302>
 800b0dc:	18e2      	adds	r2, r4, r3
 800b0de:	7890      	ldrb	r0, [r2, #2]
 800b0e0:	287d      	cmp	r0, #125	@ 0x7d
 800b0e2:	f000 8101 	beq.w	800b2e8 <uxr_read_framed_msg+0x434>
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	085a      	lsrs	r2, r3, #1
 800b0ea:	fba5 1202 	umull	r1, r2, r5, r2
 800b0ee:	0892      	lsrs	r2, r2, #2
 800b0f0:	212a      	movs	r1, #42	@ 0x2a
 800b0f2:	fb01 3312 	mls	r3, r1, r2, r3
 800b0f6:	287e      	cmp	r0, #126	@ 0x7e
 800b0f8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800b0fc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b100:	d059      	beq.n	800b1b6 <uxr_read_framed_msg+0x302>
 800b102:	2302      	movs	r3, #2
 800b104:	7023      	strb	r3, [r4, #0]
 800b106:	e6e6      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b108:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800b10c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800b110:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800b114:	1c51      	adds	r1, r2, #1
 800b116:	084b      	lsrs	r3, r1, #1
 800b118:	fba5 c303 	umull	ip, r3, r5, r3
 800b11c:	089b      	lsrs	r3, r3, #2
 800b11e:	fb0e 1313 	mls	r3, lr, r3, r1
 800b122:	4592      	cmp	sl, r2
 800b124:	eb04 0002 	add.w	r0, r4, r2
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	f43f af04 	beq.w	800af36 <uxr_read_framed_msg+0x82>
 800b12e:	7883      	ldrb	r3, [r0, #2]
 800b130:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800b134:	2b7e      	cmp	r3, #126	@ 0x7e
 800b136:	d1ed      	bne.n	800b114 <uxr_read_framed_msg+0x260>
 800b138:	2301      	movs	r3, #1
 800b13a:	7023      	strb	r3, [r4, #0]
 800b13c:	e6cb      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b13e:	f100 0c01 	add.w	ip, r0, #1
 800b142:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800b146:	fba5 8202 	umull	r8, r2, r5, r2
 800b14a:	0892      	lsrs	r2, r2, #2
 800b14c:	fb01 c212 	mls	r2, r1, r2, ip
 800b150:	eb04 0c02 	add.w	ip, r4, r2
 800b154:	b2d2      	uxtb	r2, r2
 800b156:	4592      	cmp	sl, r2
 800b158:	f100 0002 	add.w	r0, r0, #2
 800b15c:	f43f af47 	beq.w	800afee <uxr_read_framed_msg+0x13a>
 800b160:	0842      	lsrs	r2, r0, #1
 800b162:	f89c a002 	ldrb.w	sl, [ip, #2]
 800b166:	fba5 8202 	umull	r8, r2, r5, r2
 800b16a:	0892      	lsrs	r2, r2, #2
 800b16c:	fb01 0012 	mls	r0, r1, r2, r0
 800b170:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800b174:	f08a 0c20 	eor.w	ip, sl, #32
 800b178:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800b17c:	f47f af11 	bne.w	800afa2 <uxr_read_framed_msg+0xee>
 800b180:	459e      	cmp	lr, r3
 800b182:	ee17 8a90 	vmov	r8, s15
 800b186:	f43f af37 	beq.w	800aff8 <uxr_read_framed_msg+0x144>
 800b18a:	2301      	movs	r3, #1
 800b18c:	7023      	strb	r3, [r4, #0]
 800b18e:	e6a2      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	2301      	movs	r3, #1
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b19a:	464a      	mov	r2, r9
 800b19c:	4641      	mov	r1, r8
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7ff fe06 	bl	800adb0 <uxr_framing_read_transport>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	f43f aec6 	beq.w	800af36 <uxr_read_framed_msg+0x82>
 800b1aa:	7823      	ldrb	r3, [r4, #0]
 800b1ac:	e693      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b1ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	2302      	movs	r3, #2
 800b1b4:	e7ef      	b.n	800b196 <uxr_read_framed_msg+0x2e2>
 800b1b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	464a      	mov	r2, r9
 800b1c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f7ff fdf3 	bl	800adb0 <uxr_framing_read_transport>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d1ed      	bne.n	800b1aa <uxr_read_framed_msg+0x2f6>
 800b1ce:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800b1d2:	2b7e      	cmp	r3, #126	@ 0x7e
 800b1d4:	d0e9      	beq.n	800b1aa <uxr_read_framed_msg+0x2f6>
 800b1d6:	e6ae      	b.n	800af36 <uxr_read_framed_msg+0x82>
 800b1d8:	30c30c31 	.word	0x30c30c31
 800b1dc:	08010c50 	.word	0x08010c50
 800b1e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	2305      	movs	r3, #5
 800b1e6:	9301      	str	r3, [sp, #4]
 800b1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ea:	f7ff fde1 	bl	800adb0 <uxr_framing_read_transport>
 800b1ee:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800b1f2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	f43f ae9d 	beq.w	800af36 <uxr_read_framed_msg+0x82>
 800b1fc:	e668      	b.n	800aed0 <uxr_read_framed_msg+0x1c>
 800b1fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	2303      	movs	r3, #3
 800b204:	e7c7      	b.n	800b196 <uxr_read_framed_msg+0x2e2>
 800b206:	2305      	movs	r3, #5
 800b208:	7023      	strb	r3, [r4, #0]
 800b20a:	e664      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b20c:	ee17 8a90 	vmov	r8, s15
 800b210:	f43f aef2 	beq.w	800aff8 <uxr_read_framed_msg+0x144>
 800b214:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800b218:	d08e      	beq.n	800b138 <uxr_read_framed_msg+0x284>
 800b21a:	ebae 0303 	sub.w	r3, lr, r3
 800b21e:	3302      	adds	r3, #2
 800b220:	9301      	str	r3, [sp, #4]
 800b222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	e7b7      	b.n	800b198 <uxr_read_framed_msg+0x2e4>
 800b228:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b22a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800b22e:	7013      	strb	r3, [r2, #0]
 800b230:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800b232:	b003      	add	sp, #12
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	f103 0c01 	add.w	ip, r3, #1
 800b23c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800b240:	fba5 0202 	umull	r0, r2, r5, r2
 800b244:	0892      	lsrs	r2, r2, #2
 800b246:	202a      	movs	r0, #42	@ 0x2a
 800b248:	fb00 c212 	mls	r2, r0, r2, ip
 800b24c:	fa5f fc82 	uxtb.w	ip, r2
 800b250:	4561      	cmp	r1, ip
 800b252:	d09d      	beq.n	800b190 <uxr_read_framed_msg+0x2dc>
 800b254:	3302      	adds	r3, #2
 800b256:	4422      	add	r2, r4
 800b258:	0859      	lsrs	r1, r3, #1
 800b25a:	7892      	ldrb	r2, [r2, #2]
 800b25c:	fba5 c101 	umull	ip, r1, r5, r1
 800b260:	0889      	lsrs	r1, r1, #2
 800b262:	fb00 3311 	mls	r3, r0, r1, r3
 800b266:	2a7e      	cmp	r2, #126	@ 0x7e
 800b268:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b26c:	f000 80aa 	beq.w	800b3c4 <uxr_read_framed_msg+0x510>
 800b270:	f082 0220 	eor.w	r2, r2, #32
 800b274:	e654      	b.n	800af20 <uxr_read_framed_msg+0x6c>
 800b276:	1c58      	adds	r0, r3, #1
 800b278:	0842      	lsrs	r2, r0, #1
 800b27a:	fba5 c202 	umull	ip, r2, r5, r2
 800b27e:	0892      	lsrs	r2, r2, #2
 800b280:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800b284:	fb0c 0212 	mls	r2, ip, r2, r0
 800b288:	b2d0      	uxtb	r0, r2
 800b28a:	4281      	cmp	r1, r0
 800b28c:	d08f      	beq.n	800b1ae <uxr_read_framed_msg+0x2fa>
 800b28e:	4422      	add	r2, r4
 800b290:	3302      	adds	r3, #2
 800b292:	7890      	ldrb	r0, [r2, #2]
 800b294:	085a      	lsrs	r2, r3, #1
 800b296:	fba5 1202 	umull	r1, r2, r5, r2
 800b29a:	0892      	lsrs	r2, r2, #2
 800b29c:	fb0c 3312 	mls	r3, ip, r2, r3
 800b2a0:	287e      	cmp	r0, #126	@ 0x7e
 800b2a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b2a6:	d07d      	beq.n	800b3a4 <uxr_read_framed_msg+0x4f0>
 800b2a8:	f080 0020 	eor.w	r0, r0, #32
 800b2ac:	e660      	b.n	800af70 <uxr_read_framed_msg+0xbc>
 800b2ae:	1c59      	adds	r1, r3, #1
 800b2b0:	084a      	lsrs	r2, r1, #1
 800b2b2:	fba5 c202 	umull	ip, r2, r5, r2
 800b2b6:	0892      	lsrs	r2, r2, #2
 800b2b8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800b2bc:	fb0c 1212 	mls	r2, ip, r2, r1
 800b2c0:	b2d1      	uxtb	r1, r2
 800b2c2:	4288      	cmp	r0, r1
 800b2c4:	f43f af64 	beq.w	800b190 <uxr_read_framed_msg+0x2dc>
 800b2c8:	4422      	add	r2, r4
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	7891      	ldrb	r1, [r2, #2]
 800b2ce:	085a      	lsrs	r2, r3, #1
 800b2d0:	fba5 0202 	umull	r0, r2, r5, r2
 800b2d4:	0892      	lsrs	r2, r2, #2
 800b2d6:	fb0c 3312 	mls	r3, ip, r2, r3
 800b2da:	297e      	cmp	r1, #126	@ 0x7e
 800b2dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b2e0:	d070      	beq.n	800b3c4 <uxr_read_framed_msg+0x510>
 800b2e2:	f081 0120 	eor.w	r1, r1, #32
 800b2e6:	e6a3      	b.n	800b030 <uxr_read_framed_msg+0x17c>
 800b2e8:	f103 0c01 	add.w	ip, r3, #1
 800b2ec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800b2f0:	fba5 0202 	umull	r0, r2, r5, r2
 800b2f4:	0892      	lsrs	r2, r2, #2
 800b2f6:	202a      	movs	r0, #42	@ 0x2a
 800b2f8:	fb00 c212 	mls	r2, r0, r2, ip
 800b2fc:	fa5f fc82 	uxtb.w	ip, r2
 800b300:	4561      	cmp	r1, ip
 800b302:	f43f af58 	beq.w	800b1b6 <uxr_read_framed_msg+0x302>
 800b306:	4422      	add	r2, r4
 800b308:	3302      	adds	r3, #2
 800b30a:	7891      	ldrb	r1, [r2, #2]
 800b30c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800b310:	085a      	lsrs	r2, r3, #1
 800b312:	fba5 c202 	umull	ip, r2, r5, r2
 800b316:	0892      	lsrs	r2, r2, #2
 800b318:	fb00 3312 	mls	r3, r0, r2, r3
 800b31c:	297e      	cmp	r1, #126	@ 0x7e
 800b31e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b322:	f43f af48 	beq.w	800b1b6 <uxr_read_framed_msg+0x302>
 800b326:	f081 0120 	eor.w	r1, r1, #32
 800b32a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800b32e:	e6e8      	b.n	800b102 <uxr_read_framed_msg+0x24e>
 800b330:	1c58      	adds	r0, r3, #1
 800b332:	0842      	lsrs	r2, r0, #1
 800b334:	fba5 c202 	umull	ip, r2, r5, r2
 800b338:	0892      	lsrs	r2, r2, #2
 800b33a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800b33e:	fb0c 0212 	mls	r2, ip, r2, r0
 800b342:	b2d0      	uxtb	r0, r2
 800b344:	4281      	cmp	r1, r0
 800b346:	f43f af32 	beq.w	800b1ae <uxr_read_framed_msg+0x2fa>
 800b34a:	4422      	add	r2, r4
 800b34c:	3302      	adds	r3, #2
 800b34e:	7890      	ldrb	r0, [r2, #2]
 800b350:	085a      	lsrs	r2, r3, #1
 800b352:	fba5 1202 	umull	r1, r2, r5, r2
 800b356:	0892      	lsrs	r2, r2, #2
 800b358:	fb0c 3312 	mls	r3, ip, r2, r3
 800b35c:	287e      	cmp	r0, #126	@ 0x7e
 800b35e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800b362:	d01f      	beq.n	800b3a4 <uxr_read_framed_msg+0x4f0>
 800b364:	f080 0020 	eor.w	r0, r0, #32
 800b368:	e68b      	b.n	800b082 <uxr_read_framed_msg+0x1ce>
 800b36a:	1c51      	adds	r1, r2, #1
 800b36c:	084b      	lsrs	r3, r1, #1
 800b36e:	fba5 c303 	umull	ip, r3, r5, r3
 800b372:	089b      	lsrs	r3, r3, #2
 800b374:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800b378:	fb0c 1313 	mls	r3, ip, r3, r1
 800b37c:	b2d9      	uxtb	r1, r3
 800b37e:	4288      	cmp	r0, r1
 800b380:	f43f af3d 	beq.w	800b1fe <uxr_read_framed_msg+0x34a>
 800b384:	3202      	adds	r2, #2
 800b386:	4423      	add	r3, r4
 800b388:	0850      	lsrs	r0, r2, #1
 800b38a:	789b      	ldrb	r3, [r3, #2]
 800b38c:	fba5 1000 	umull	r1, r0, r5, r0
 800b390:	0880      	lsrs	r0, r0, #2
 800b392:	fb0c 2210 	mls	r2, ip, r0, r2
 800b396:	2b7e      	cmp	r3, #126	@ 0x7e
 800b398:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800b39c:	d016      	beq.n	800b3cc <uxr_read_framed_msg+0x518>
 800b39e:	f083 0120 	eor.w	r1, r3, #32
 800b3a2:	e68b      	b.n	800b0bc <uxr_read_framed_msg+0x208>
 800b3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	9301      	str	r3, [sp, #4]
 800b3ac:	464a      	mov	r2, r9
 800b3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b0:	4641      	mov	r1, r8
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f7ff fcfc 	bl	800adb0 <uxr_framing_read_transport>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	f47f aef6 	bne.w	800b1aa <uxr_read_framed_msg+0x2f6>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	7023      	strb	r3, [r4, #0]
 800b3c2:	e588      	b.n	800aed6 <uxr_read_framed_msg+0x22>
 800b3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e7ee      	b.n	800b3aa <uxr_read_framed_msg+0x4f6>
 800b3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e7ea      	b.n	800b3aa <uxr_read_framed_msg+0x4f6>
 800b3d4:	ee17 8a90 	vmov	r8, s15
 800b3d8:	e6ae      	b.n	800b138 <uxr_read_framed_msg+0x284>
 800b3da:	bf00      	nop

0800b3dc <uxr_stream_id>:
 800b3dc:	2901      	cmp	r1, #1
 800b3de:	b082      	sub	sp, #8
 800b3e0:	d01d      	beq.n	800b41e <uxr_stream_id+0x42>
 800b3e2:	2902      	cmp	r1, #2
 800b3e4:	f04f 0c00 	mov.w	ip, #0
 800b3e8:	d01e      	beq.n	800b428 <uxr_stream_id+0x4c>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f36c 0307 	bfi	r3, ip, #0, #8
 800b3f0:	f360 230f 	bfi	r3, r0, #8, #8
 800b3f4:	f361 4317 	bfi	r3, r1, #16, #8
 800b3f8:	f362 631f 	bfi	r3, r2, #24, #8
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	2000      	movs	r0, #0
 800b400:	f362 0007 	bfi	r0, r2, #0, #8
 800b404:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b408:	f362 200f 	bfi	r0, r2, #8, #8
 800b40c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b410:	f362 4017 	bfi	r0, r2, #16, #8
 800b414:	0e1b      	lsrs	r3, r3, #24
 800b416:	f363 601f 	bfi	r0, r3, #24, #8
 800b41a:	b002      	add	sp, #8
 800b41c:	4770      	bx	lr
 800b41e:	f100 0c01 	add.w	ip, r0, #1
 800b422:	fa5f fc8c 	uxtb.w	ip, ip
 800b426:	e7e0      	b.n	800b3ea <uxr_stream_id+0xe>
 800b428:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800b42c:	e7dd      	b.n	800b3ea <uxr_stream_id+0xe>
 800b42e:	bf00      	nop

0800b430 <uxr_stream_id_from_raw>:
 800b430:	b082      	sub	sp, #8
 800b432:	b130      	cbz	r0, 800b442 <uxr_stream_id_from_raw+0x12>
 800b434:	0603      	lsls	r3, r0, #24
 800b436:	d420      	bmi.n	800b47a <uxr_stream_id_from_raw+0x4a>
 800b438:	1e42      	subs	r2, r0, #1
 800b43a:	b2d2      	uxtb	r2, r2
 800b43c:	f04f 0c01 	mov.w	ip, #1
 800b440:	e001      	b.n	800b446 <uxr_stream_id_from_raw+0x16>
 800b442:	4684      	mov	ip, r0
 800b444:	4602      	mov	r2, r0
 800b446:	2300      	movs	r3, #0
 800b448:	f360 0307 	bfi	r3, r0, #0, #8
 800b44c:	f362 230f 	bfi	r3, r2, #8, #8
 800b450:	f36c 4317 	bfi	r3, ip, #16, #8
 800b454:	f361 631f 	bfi	r3, r1, #24, #8
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	2000      	movs	r0, #0
 800b45c:	f362 0007 	bfi	r0, r2, #0, #8
 800b460:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b464:	f362 200f 	bfi	r0, r2, #8, #8
 800b468:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b46c:	f362 4017 	bfi	r0, r2, #16, #8
 800b470:	0e1b      	lsrs	r3, r3, #24
 800b472:	f363 601f 	bfi	r0, r3, #24, #8
 800b476:	b002      	add	sp, #8
 800b478:	4770      	bx	lr
 800b47a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800b47e:	f04f 0c02 	mov.w	ip, #2
 800b482:	e7e0      	b.n	800b446 <uxr_stream_id_from_raw+0x16>

0800b484 <uxr_init_stream_storage>:
 800b484:	2300      	movs	r3, #0
 800b486:	7403      	strb	r3, [r0, #16]
 800b488:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b48c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800b490:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop

0800b498 <uxr_reset_stream_storage>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	7c03      	ldrb	r3, [r0, #16]
 800b49c:	4604      	mov	r4, r0
 800b49e:	b153      	cbz	r3, 800b4b6 <uxr_reset_stream_storage+0x1e>
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f003 fb49 	bl	800eb3c <uxr_reset_output_best_effort_stream>
 800b4aa:	7c23      	ldrb	r3, [r4, #16]
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	42ab      	cmp	r3, r5
 800b4b0:	f106 0610 	add.w	r6, r6, #16
 800b4b4:	d8f6      	bhi.n	800b4a4 <uxr_reset_stream_storage+0xc>
 800b4b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b4ba:	b163      	cbz	r3, 800b4d6 <uxr_reset_stream_storage+0x3e>
 800b4bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4c0:	2500      	movs	r5, #0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f003 f93c 	bl	800e740 <uxr_reset_input_best_effort_stream>
 800b4c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	42ab      	cmp	r3, r5
 800b4d0:	f106 0602 	add.w	r6, r6, #2
 800b4d4:	d8f5      	bhi.n	800b4c2 <uxr_reset_stream_storage+0x2a>
 800b4d6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b4da:	b163      	cbz	r3, 800b4f6 <uxr_reset_stream_storage+0x5e>
 800b4dc:	f104 0618 	add.w	r6, r4, #24
 800b4e0:	2500      	movs	r5, #0
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f003 fbd6 	bl	800ec94 <uxr_reset_output_reliable_stream>
 800b4e8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	42ab      	cmp	r3, r5
 800b4f0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800b4f4:	d8f5      	bhi.n	800b4e2 <uxr_reset_stream_storage+0x4a>
 800b4f6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800b4fa:	b163      	cbz	r3, 800b516 <uxr_reset_stream_storage+0x7e>
 800b4fc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800b500:	2500      	movs	r5, #0
 800b502:	4630      	mov	r0, r6
 800b504:	f003 f990 	bl	800e828 <uxr_reset_input_reliable_stream>
 800b508:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800b50c:	3501      	adds	r5, #1
 800b50e:	42ab      	cmp	r3, r5
 800b510:	f106 0618 	add.w	r6, r6, #24
 800b514:	d8f5      	bhi.n	800b502 <uxr_reset_stream_storage+0x6a>
 800b516:	bd70      	pop	{r4, r5, r6, pc}

0800b518 <uxr_add_output_best_effort_buffer>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	7c04      	ldrb	r4, [r0, #16]
 800b51c:	f104 0c01 	add.w	ip, r4, #1
 800b520:	b082      	sub	sp, #8
 800b522:	f880 c010 	strb.w	ip, [r0, #16]
 800b526:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800b52a:	f003 fafd 	bl	800eb28 <uxr_init_output_best_effort_stream>
 800b52e:	2201      	movs	r2, #1
 800b530:	4611      	mov	r1, r2
 800b532:	4620      	mov	r0, r4
 800b534:	b002      	add	sp, #8
 800b536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b53a:	f7ff bf4f 	b.w	800b3dc <uxr_stream_id>
 800b53e:	bf00      	nop

0800b540 <uxr_add_output_reliable_buffer>:
 800b540:	b510      	push	{r4, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	4684      	mov	ip, r0
 800b546:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b54a:	9000      	str	r0, [sp, #0]
 800b54c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800b550:	2028      	movs	r0, #40	@ 0x28
 800b552:	fb00 c004 	mla	r0, r0, r4, ip
 800b556:	f104 0e01 	add.w	lr, r4, #1
 800b55a:	3018      	adds	r0, #24
 800b55c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800b560:	f003 fb60 	bl	800ec24 <uxr_init_output_reliable_stream>
 800b564:	2201      	movs	r2, #1
 800b566:	2102      	movs	r1, #2
 800b568:	4620      	mov	r0, r4
 800b56a:	b004      	add	sp, #16
 800b56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b570:	f7ff bf34 	b.w	800b3dc <uxr_stream_id>

0800b574 <uxr_add_input_best_effort_buffer>:
 800b574:	b510      	push	{r4, lr}
 800b576:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800b57a:	4603      	mov	r3, r0
 800b57c:	1c62      	adds	r2, r4, #1
 800b57e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800b582:	b082      	sub	sp, #8
 800b584:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b58c:	f003 f8d4 	bl	800e738 <uxr_init_input_best_effort_stream>
 800b590:	2200      	movs	r2, #0
 800b592:	2101      	movs	r1, #1
 800b594:	4620      	mov	r0, r4
 800b596:	b002      	add	sp, #8
 800b598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b59c:	f7ff bf1e 	b.w	800b3dc <uxr_stream_id>

0800b5a0 <uxr_add_input_reliable_buffer>:
 800b5a0:	b510      	push	{r4, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	4684      	mov	ip, r0
 800b5a6:	9806      	ldr	r0, [sp, #24]
 800b5a8:	9000      	str	r0, [sp, #0]
 800b5aa:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800b5ae:	2018      	movs	r0, #24
 800b5b0:	fb00 c004 	mla	r0, r0, r4, ip
 800b5b4:	f104 0e01 	add.w	lr, r4, #1
 800b5b8:	3048      	adds	r0, #72	@ 0x48
 800b5ba:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800b5be:	f003 f907 	bl	800e7d0 <uxr_init_input_reliable_stream>
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2102      	movs	r1, #2
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	b004      	add	sp, #16
 800b5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5ce:	f7ff bf05 	b.w	800b3dc <uxr_stream_id>
 800b5d2:	bf00      	nop

0800b5d4 <uxr_get_output_best_effort_stream>:
 800b5d4:	7c03      	ldrb	r3, [r0, #16]
 800b5d6:	428b      	cmp	r3, r1
 800b5d8:	bf8c      	ite	hi
 800b5da:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800b5de:	2000      	movls	r0, #0
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop

0800b5e4 <uxr_get_output_reliable_stream>:
 800b5e4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	bf83      	ittte	hi
 800b5ec:	2328      	movhi	r3, #40	@ 0x28
 800b5ee:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b5f2:	3018      	addhi	r0, #24
 800b5f4:	2000      	movls	r0, #0
 800b5f6:	4770      	bx	lr

0800b5f8 <uxr_get_input_best_effort_stream>:
 800b5f8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b5fc:	428b      	cmp	r3, r1
 800b5fe:	bf86      	itte	hi
 800b600:	3121      	addhi	r1, #33	@ 0x21
 800b602:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800b606:	2000      	movls	r0, #0
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop

0800b60c <uxr_get_input_reliable_stream>:
 800b60c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800b610:	428b      	cmp	r3, r1
 800b612:	bf83      	ittte	hi
 800b614:	2318      	movhi	r3, #24
 800b616:	fb03 0001 	mlahi	r0, r3, r1, r0
 800b61a:	3048      	addhi	r0, #72	@ 0x48
 800b61c:	2000      	movls	r0, #0
 800b61e:	4770      	bx	lr

0800b620 <uxr_buffer_submessage_header>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	4604      	mov	r4, r0
 800b624:	460e      	mov	r6, r1
 800b626:	2104      	movs	r1, #4
 800b628:	4615      	mov	r5, r2
 800b62a:	461f      	mov	r7, r3
 800b62c:	f002 ffbe 	bl	800e5ac <ucdr_align_to>
 800b630:	2301      	movs	r3, #1
 800b632:	ea47 0203 	orr.w	r2, r7, r3
 800b636:	4631      	mov	r1, r6
 800b638:	7523      	strb	r3, [r4, #20]
 800b63a:	4620      	mov	r0, r4
 800b63c:	462b      	mov	r3, r5
 800b63e:	f000 f8a3 	bl	800b788 <uxr_serialize_submessage_header>
 800b642:	4620      	mov	r0, r4
 800b644:	f002 ffc8 	bl	800e5d8 <ucdr_buffer_remaining>
 800b648:	42a8      	cmp	r0, r5
 800b64a:	bf34      	ite	cc
 800b64c:	2000      	movcc	r0, #0
 800b64e:	2001      	movcs	r0, #1
 800b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b652:	bf00      	nop

0800b654 <uxr_read_submessage_header>:
 800b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b658:	4604      	mov	r4, r0
 800b65a:	460d      	mov	r5, r1
 800b65c:	2104      	movs	r1, #4
 800b65e:	4616      	mov	r6, r2
 800b660:	4698      	mov	r8, r3
 800b662:	f002 ffa3 	bl	800e5ac <ucdr_align_to>
 800b666:	4620      	mov	r0, r4
 800b668:	f002 ffb6 	bl	800e5d8 <ucdr_buffer_remaining>
 800b66c:	2803      	cmp	r0, #3
 800b66e:	bf8c      	ite	hi
 800b670:	2701      	movhi	r7, #1
 800b672:	2700      	movls	r7, #0
 800b674:	d802      	bhi.n	800b67c <uxr_read_submessage_header+0x28>
 800b676:	4638      	mov	r0, r7
 800b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67c:	4633      	mov	r3, r6
 800b67e:	4642      	mov	r2, r8
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f000 f894 	bl	800b7b0 <uxr_deserialize_submessage_header>
 800b688:	f898 3000 	ldrb.w	r3, [r8]
 800b68c:	f003 0201 	and.w	r2, r3, #1
 800b690:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b694:	f888 3000 	strb.w	r3, [r8]
 800b698:	7522      	strb	r2, [r4, #20]
 800b69a:	4638      	mov	r0, r7
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6a0 <uxr_submessage_padding>:
 800b6a0:	f010 0003 	ands.w	r0, r0, #3
 800b6a4:	bf18      	it	ne
 800b6a6:	f1c0 0004 	rsbne	r0, r0, #4
 800b6aa:	4770      	bx	lr

0800b6ac <uxr_millis>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	4669      	mov	r1, sp
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	f7f5 fd74 	bl	80011a0 <clock_gettime>
 800b6b8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800b6bc:	4906      	ldr	r1, [pc, #24]	@ (800b6d8 <uxr_millis+0x2c>)
 800b6be:	fba0 0301 	umull	r0, r3, r0, r1
 800b6c2:	1900      	adds	r0, r0, r4
 800b6c4:	fb01 3102 	mla	r1, r1, r2, r3
 800b6c8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b6cc:	4a03      	ldr	r2, [pc, #12]	@ (800b6dc <uxr_millis+0x30>)
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f7f4 fe0e 	bl	80002f0 <__aeabi_ldivmod>
 800b6d4:	b004      	add	sp, #16
 800b6d6:	bd10      	pop	{r4, pc}
 800b6d8:	3b9aca00 	.word	0x3b9aca00
 800b6dc:	000f4240 	.word	0x000f4240

0800b6e0 <uxr_nanos>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	4669      	mov	r1, sp
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	f7f5 fd5a 	bl	80011a0 <clock_gettime>
 800b6ec:	4a06      	ldr	r2, [pc, #24]	@ (800b708 <uxr_nanos+0x28>)
 800b6ee:	9800      	ldr	r0, [sp, #0]
 800b6f0:	9902      	ldr	r1, [sp, #8]
 800b6f2:	9c01      	ldr	r4, [sp, #4]
 800b6f4:	fba0 0302 	umull	r0, r3, r0, r2
 800b6f8:	1840      	adds	r0, r0, r1
 800b6fa:	fb02 3304 	mla	r3, r2, r4, r3
 800b6fe:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800b702:	b004      	add	sp, #16
 800b704:	bd10      	pop	{r4, pc}
 800b706:	bf00      	nop
 800b708:	3b9aca00 	.word	0x3b9aca00

0800b70c <uxr_serialize_message_header>:
 800b70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70e:	b083      	sub	sp, #12
 800b710:	4616      	mov	r6, r2
 800b712:	4604      	mov	r4, r0
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	460d      	mov	r5, r1
 800b718:	9f08      	ldr	r7, [sp, #32]
 800b71a:	f002 f819 	bl	800d750 <ucdr_serialize_uint8_t>
 800b71e:	4631      	mov	r1, r6
 800b720:	4620      	mov	r0, r4
 800b722:	f002 f815 	bl	800d750 <ucdr_serialize_uint8_t>
 800b726:	9a01      	ldr	r2, [sp, #4]
 800b728:	2101      	movs	r1, #1
 800b72a:	4620      	mov	r0, r4
 800b72c:	f002 f8bc 	bl	800d8a8 <ucdr_serialize_endian_uint16_t>
 800b730:	062b      	lsls	r3, r5, #24
 800b732:	d501      	bpl.n	800b738 <uxr_serialize_message_header+0x2c>
 800b734:	b003      	add	sp, #12
 800b736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b738:	2204      	movs	r2, #4
 800b73a:	4639      	mov	r1, r7
 800b73c:	4620      	mov	r0, r4
 800b73e:	b003      	add	sp, #12
 800b740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b744:	f001 bf0e 	b.w	800d564 <ucdr_serialize_array_uint8_t>

0800b748 <uxr_deserialize_message_header>:
 800b748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74a:	b083      	sub	sp, #12
 800b74c:	4616      	mov	r6, r2
 800b74e:	4604      	mov	r4, r0
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	460d      	mov	r5, r1
 800b754:	9f08      	ldr	r7, [sp, #32]
 800b756:	f002 f811 	bl	800d77c <ucdr_deserialize_uint8_t>
 800b75a:	4631      	mov	r1, r6
 800b75c:	4620      	mov	r0, r4
 800b75e:	f002 f80d 	bl	800d77c <ucdr_deserialize_uint8_t>
 800b762:	9a01      	ldr	r2, [sp, #4]
 800b764:	2101      	movs	r1, #1
 800b766:	4620      	mov	r0, r4
 800b768:	f002 f992 	bl	800da90 <ucdr_deserialize_endian_uint16_t>
 800b76c:	f995 3000 	ldrsb.w	r3, [r5]
 800b770:	2b00      	cmp	r3, #0
 800b772:	da01      	bge.n	800b778 <uxr_deserialize_message_header+0x30>
 800b774:	b003      	add	sp, #12
 800b776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b778:	2204      	movs	r2, #4
 800b77a:	4639      	mov	r1, r7
 800b77c:	4620      	mov	r0, r4
 800b77e:	b003      	add	sp, #12
 800b780:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b784:	f001 bf52 	b.w	800d62c <ucdr_deserialize_array_uint8_t>

0800b788 <uxr_serialize_submessage_header>:
 800b788:	b530      	push	{r4, r5, lr}
 800b78a:	b083      	sub	sp, #12
 800b78c:	4615      	mov	r5, r2
 800b78e:	4604      	mov	r4, r0
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	f001 ffdd 	bl	800d750 <ucdr_serialize_uint8_t>
 800b796:	4629      	mov	r1, r5
 800b798:	4620      	mov	r0, r4
 800b79a:	f001 ffd9 	bl	800d750 <ucdr_serialize_uint8_t>
 800b79e:	9a01      	ldr	r2, [sp, #4]
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	b003      	add	sp, #12
 800b7a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7aa:	f002 b87d 	b.w	800d8a8 <ucdr_serialize_endian_uint16_t>
 800b7ae:	bf00      	nop

0800b7b0 <uxr_deserialize_submessage_header>:
 800b7b0:	b530      	push	{r4, r5, lr}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	4615      	mov	r5, r2
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	f001 ffdf 	bl	800d77c <ucdr_deserialize_uint8_t>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f001 ffdb 	bl	800d77c <ucdr_deserialize_uint8_t>
 800b7c6:	9a01      	ldr	r2, [sp, #4]
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	b003      	add	sp, #12
 800b7ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7d2:	f002 b95d 	b.w	800da90 <ucdr_deserialize_endian_uint16_t>
 800b7d6:	bf00      	nop

0800b7d8 <uxr_serialize_CLIENT_Representation>:
 800b7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7dc:	2204      	movs	r2, #4
 800b7de:	460e      	mov	r6, r1
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	f001 febf 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	1d31      	adds	r1, r6, #4
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f001 feb9 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800b7f2:	4038      	ands	r0, r7
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	1db1      	adds	r1, r6, #6
 800b7f8:	b2c7      	uxtb	r7, r0
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f001 feb2 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800b800:	2204      	movs	r2, #4
 800b802:	4007      	ands	r7, r0
 800b804:	f106 0108 	add.w	r1, r6, #8
 800b808:	4628      	mov	r0, r5
 800b80a:	f001 feab 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800b80e:	7b31      	ldrb	r1, [r6, #12]
 800b810:	4007      	ands	r7, r0
 800b812:	4628      	mov	r0, r5
 800b814:	f001 ff9c 	bl	800d750 <ucdr_serialize_uint8_t>
 800b818:	7b71      	ldrb	r1, [r6, #13]
 800b81a:	4007      	ands	r7, r0
 800b81c:	4628      	mov	r0, r5
 800b81e:	f001 ff69 	bl	800d6f4 <ucdr_serialize_bool>
 800b822:	7b73      	ldrb	r3, [r6, #13]
 800b824:	ea07 0800 	and.w	r8, r7, r0
 800b828:	b93b      	cbnz	r3, 800b83a <uxr_serialize_CLIENT_Representation+0x62>
 800b82a:	8bb1      	ldrh	r1, [r6, #28]
 800b82c:	4628      	mov	r0, r5
 800b82e:	f001 ffbb 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800b832:	ea08 0000 	and.w	r0, r8, r0
 800b836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83a:	6931      	ldr	r1, [r6, #16]
 800b83c:	4628      	mov	r0, r5
 800b83e:	f002 f99d 	bl	800db7c <ucdr_serialize_uint32_t>
 800b842:	6933      	ldr	r3, [r6, #16]
 800b844:	b1e3      	cbz	r3, 800b880 <uxr_serialize_CLIENT_Representation+0xa8>
 800b846:	b1c0      	cbz	r0, 800b87a <uxr_serialize_CLIENT_Representation+0xa2>
 800b848:	4637      	mov	r7, r6
 800b84a:	f04f 0900 	mov.w	r9, #0
 800b84e:	e001      	b.n	800b854 <uxr_serialize_CLIENT_Representation+0x7c>
 800b850:	3708      	adds	r7, #8
 800b852:	b194      	cbz	r4, 800b87a <uxr_serialize_CLIENT_Representation+0xa2>
 800b854:	6979      	ldr	r1, [r7, #20]
 800b856:	4628      	mov	r0, r5
 800b858:	f002 ff56 	bl	800e708 <ucdr_serialize_string>
 800b85c:	69b9      	ldr	r1, [r7, #24]
 800b85e:	4604      	mov	r4, r0
 800b860:	4628      	mov	r0, r5
 800b862:	f002 ff51 	bl	800e708 <ucdr_serialize_string>
 800b866:	6933      	ldr	r3, [r6, #16]
 800b868:	f109 0901 	add.w	r9, r9, #1
 800b86c:	4004      	ands	r4, r0
 800b86e:	4599      	cmp	r9, r3
 800b870:	b2e4      	uxtb	r4, r4
 800b872:	d3ed      	bcc.n	800b850 <uxr_serialize_CLIENT_Representation+0x78>
 800b874:	ea08 0804 	and.w	r8, r8, r4
 800b878:	e7d7      	b.n	800b82a <uxr_serialize_CLIENT_Representation+0x52>
 800b87a:	f04f 0800 	mov.w	r8, #0
 800b87e:	e7d4      	b.n	800b82a <uxr_serialize_CLIENT_Representation+0x52>
 800b880:	ea08 0800 	and.w	r8, r8, r0
 800b884:	e7d1      	b.n	800b82a <uxr_serialize_CLIENT_Representation+0x52>
 800b886:	bf00      	nop

0800b888 <uxr_deserialize_CLIENT_Representation>:
 800b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b88c:	2204      	movs	r2, #4
 800b88e:	460c      	mov	r4, r1
 800b890:	4605      	mov	r5, r0
 800b892:	f001 fecb 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800b896:	2202      	movs	r2, #2
 800b898:	4607      	mov	r7, r0
 800b89a:	1d21      	adds	r1, r4, #4
 800b89c:	4628      	mov	r0, r5
 800b89e:	f001 fec5 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800b8a2:	4038      	ands	r0, r7
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	1da1      	adds	r1, r4, #6
 800b8a8:	b2c6      	uxtb	r6, r0
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	f001 febe 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800b8b0:	2204      	movs	r2, #4
 800b8b2:	4006      	ands	r6, r0
 800b8b4:	f104 0108 	add.w	r1, r4, #8
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f001 feb7 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800b8be:	f104 010c 	add.w	r1, r4, #12
 800b8c2:	4006      	ands	r6, r0
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	f001 ff59 	bl	800d77c <ucdr_deserialize_uint8_t>
 800b8ca:	f104 010d 	add.w	r1, r4, #13
 800b8ce:	ea06 0700 	and.w	r7, r6, r0
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f001 ff24 	bl	800d720 <ucdr_deserialize_bool>
 800b8d8:	7b63      	ldrb	r3, [r4, #13]
 800b8da:	4007      	ands	r7, r0
 800b8dc:	b93b      	cbnz	r3, 800b8ee <uxr_deserialize_CLIENT_Representation+0x66>
 800b8de:	f104 011c 	add.w	r1, r4, #28
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f002 f860 	bl	800d9a8 <ucdr_deserialize_uint16_t>
 800b8e8:	4038      	ands	r0, r7
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	f104 0110 	add.w	r1, r4, #16
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f002 fa72 	bl	800dddc <ucdr_deserialize_uint32_t>
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d903      	bls.n	800b906 <uxr_deserialize_CLIENT_Representation+0x7e>
 800b8fe:	2301      	movs	r3, #1
 800b900:	75ab      	strb	r3, [r5, #22]
 800b902:	2700      	movs	r7, #0
 800b904:	e7eb      	b.n	800b8de <uxr_deserialize_CLIENT_Representation+0x56>
 800b906:	b30b      	cbz	r3, 800b94c <uxr_deserialize_CLIENT_Representation+0xc4>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d0fa      	beq.n	800b902 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b90c:	46a0      	mov	r8, r4
 800b90e:	f04f 0900 	mov.w	r9, #0
 800b912:	e001      	b.n	800b918 <uxr_deserialize_CLIENT_Representation+0x90>
 800b914:	2e00      	cmp	r6, #0
 800b916:	d0f4      	beq.n	800b902 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b918:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b91c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b920:	4628      	mov	r0, r5
 800b922:	f002 ff01 	bl	800e728 <ucdr_deserialize_string>
 800b926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b92a:	4606      	mov	r6, r0
 800b92c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800b930:	4628      	mov	r0, r5
 800b932:	f002 fef9 	bl	800e728 <ucdr_deserialize_string>
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	f109 0901 	add.w	r9, r9, #1
 800b93c:	4006      	ands	r6, r0
 800b93e:	4599      	cmp	r9, r3
 800b940:	f108 0808 	add.w	r8, r8, #8
 800b944:	b2f6      	uxtb	r6, r6
 800b946:	d3e5      	bcc.n	800b914 <uxr_deserialize_CLIENT_Representation+0x8c>
 800b948:	4037      	ands	r7, r6
 800b94a:	e7c8      	b.n	800b8de <uxr_deserialize_CLIENT_Representation+0x56>
 800b94c:	4007      	ands	r7, r0
 800b94e:	e7c6      	b.n	800b8de <uxr_deserialize_CLIENT_Representation+0x56>

0800b950 <uxr_serialize_AGENT_Representation>:
 800b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b954:	2204      	movs	r2, #4
 800b956:	460f      	mov	r7, r1
 800b958:	4605      	mov	r5, r0
 800b95a:	f001 fe03 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800b95e:	2202      	movs	r2, #2
 800b960:	4604      	mov	r4, r0
 800b962:	1d39      	adds	r1, r7, #4
 800b964:	4628      	mov	r0, r5
 800b966:	f001 fdfd 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800b96a:	4020      	ands	r0, r4
 800b96c:	2202      	movs	r2, #2
 800b96e:	1db9      	adds	r1, r7, #6
 800b970:	b2c4      	uxtb	r4, r0
 800b972:	4628      	mov	r0, r5
 800b974:	f001 fdf6 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800b978:	7a39      	ldrb	r1, [r7, #8]
 800b97a:	4004      	ands	r4, r0
 800b97c:	4628      	mov	r0, r5
 800b97e:	f001 feb9 	bl	800d6f4 <ucdr_serialize_bool>
 800b982:	7a3b      	ldrb	r3, [r7, #8]
 800b984:	ea00 0804 	and.w	r8, r0, r4
 800b988:	b913      	cbnz	r3, 800b990 <uxr_serialize_AGENT_Representation+0x40>
 800b98a:	4640      	mov	r0, r8
 800b98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b990:	68f9      	ldr	r1, [r7, #12]
 800b992:	4628      	mov	r0, r5
 800b994:	f002 f8f2 	bl	800db7c <ucdr_serialize_uint32_t>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	b303      	cbz	r3, 800b9de <uxr_serialize_AGENT_Representation+0x8e>
 800b99c:	b1d0      	cbz	r0, 800b9d4 <uxr_serialize_AGENT_Representation+0x84>
 800b99e:	463e      	mov	r6, r7
 800b9a0:	f04f 0900 	mov.w	r9, #0
 800b9a4:	e001      	b.n	800b9aa <uxr_serialize_AGENT_Representation+0x5a>
 800b9a6:	3608      	adds	r6, #8
 800b9a8:	b1a4      	cbz	r4, 800b9d4 <uxr_serialize_AGENT_Representation+0x84>
 800b9aa:	6931      	ldr	r1, [r6, #16]
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f002 feab 	bl	800e708 <ucdr_serialize_string>
 800b9b2:	6971      	ldr	r1, [r6, #20]
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f002 fea6 	bl	800e708 <ucdr_serialize_string>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f109 0901 	add.w	r9, r9, #1
 800b9c2:	4004      	ands	r4, r0
 800b9c4:	4599      	cmp	r9, r3
 800b9c6:	b2e4      	uxtb	r4, r4
 800b9c8:	d3ed      	bcc.n	800b9a6 <uxr_serialize_AGENT_Representation+0x56>
 800b9ca:	ea08 0804 	and.w	r8, r8, r4
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d4:	f04f 0800 	mov.w	r8, #0
 800b9d8:	4640      	mov	r0, r8
 800b9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9de:	ea08 0800 	and.w	r8, r8, r0
 800b9e2:	e7d2      	b.n	800b98a <uxr_serialize_AGENT_Representation+0x3a>

0800b9e4 <uxr_serialize_DATAWRITER_Representation>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	7809      	ldrb	r1, [r1, #0]
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	f001 feb0 	bl	800d750 <ucdr_serialize_uint8_t>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	b130      	cbz	r0, 800ba02 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b9f4:	782b      	ldrb	r3, [r5, #0]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d00c      	beq.n	800ba14 <uxr_serialize_DATAWRITER_Representation+0x30>
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d010      	beq.n	800ba20 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d008      	beq.n	800ba14 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ba02:	2202      	movs	r2, #2
 800ba04:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f001 fdab 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800ba0e:	4020      	ands	r0, r4
 800ba10:	b2c0      	uxtb	r0, r0
 800ba12:	bd70      	pop	{r4, r5, r6, pc}
 800ba14:	6869      	ldr	r1, [r5, #4]
 800ba16:	4630      	mov	r0, r6
 800ba18:	f002 fe76 	bl	800e708 <ucdr_serialize_string>
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	e7f0      	b.n	800ba02 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ba20:	4629      	mov	r1, r5
 800ba22:	4630      	mov	r0, r6
 800ba24:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ba28:	3104      	adds	r1, #4
 800ba2a:	f002 fe41 	bl	800e6b0 <ucdr_serialize_sequence_uint8_t>
 800ba2e:	4604      	mov	r4, r0
 800ba30:	e7e7      	b.n	800ba02 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ba32:	bf00      	nop

0800ba34 <uxr_serialize_ObjectVariant.part.0>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	780b      	ldrb	r3, [r1, #0]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	2b0d      	cmp	r3, #13
 800ba40:	d854      	bhi.n	800baec <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ba42:	e8df f003 	tbb	[pc, r3]
 800ba46:	0730      	.short	0x0730
 800ba48:	07071b1b 	.word	0x07071b1b
 800ba4c:	0c530707 	.word	0x0c530707
 800ba50:	494e0c0c 	.word	0x494e0c0c
 800ba54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba58:	3104      	adds	r1, #4
 800ba5a:	f7ff bfc3 	b.w	800b9e4 <uxr_serialize_DATAWRITER_Representation>
 800ba5e:	7909      	ldrb	r1, [r1, #4]
 800ba60:	f001 fe76 	bl	800d750 <ucdr_serialize_uint8_t>
 800ba64:	b1e8      	cbz	r0, 800baa2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800ba66:	7923      	ldrb	r3, [r4, #4]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d001      	beq.n	800ba70 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d13d      	bne.n	800baec <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ba70:	68a1      	ldr	r1, [r4, #8]
 800ba72:	4628      	mov	r0, r5
 800ba74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba78:	f002 be46 	b.w	800e708 <ucdr_serialize_string>
 800ba7c:	7909      	ldrb	r1, [r1, #4]
 800ba7e:	f001 fe67 	bl	800d750 <ucdr_serialize_uint8_t>
 800ba82:	4606      	mov	r6, r0
 800ba84:	b120      	cbz	r0, 800ba90 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ba86:	7923      	ldrb	r3, [r4, #4]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d039      	beq.n	800bb00 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d02f      	beq.n	800baf0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800ba90:	2202      	movs	r2, #2
 800ba92:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800ba96:	4628      	mov	r0, r5
 800ba98:	f001 fd64 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800ba9c:	4030      	ands	r0, r6
 800ba9e:	b2c0      	uxtb	r0, r0
 800baa0:	bd70      	pop	{r4, r5, r6, pc}
 800baa2:	2000      	movs	r0, #0
 800baa4:	bd70      	pop	{r4, r5, r6, pc}
 800baa6:	7909      	ldrb	r1, [r1, #4]
 800baa8:	f001 fe52 	bl	800d750 <ucdr_serialize_uint8_t>
 800baac:	4606      	mov	r6, r0
 800baae:	b158      	cbz	r0, 800bac8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800bab0:	7923      	ldrb	r3, [r4, #4]
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d003      	beq.n	800babe <uxr_serialize_ObjectVariant.part.0+0x8a>
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d028      	beq.n	800bb0c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800baba:	2b01      	cmp	r3, #1
 800babc:	d104      	bne.n	800bac8 <uxr_serialize_ObjectVariant.part.0+0x94>
 800babe:	68a1      	ldr	r1, [r4, #8]
 800bac0:	4628      	mov	r0, r5
 800bac2:	f002 fe21 	bl	800e708 <ucdr_serialize_string>
 800bac6:	4606      	mov	r6, r0
 800bac8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800bacc:	4628      	mov	r0, r5
 800bace:	f002 fb7b 	bl	800e1c8 <ucdr_serialize_int16_t>
 800bad2:	4030      	ands	r0, r6
 800bad4:	b2c0      	uxtb	r0, r0
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800badc:	3104      	adds	r1, #4
 800bade:	f7ff be7b 	b.w	800b7d8 <uxr_serialize_CLIENT_Representation>
 800bae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bae6:	3104      	adds	r1, #4
 800bae8:	f7ff bf32 	b.w	800b950 <uxr_serialize_AGENT_Representation>
 800baec:	2001      	movs	r0, #1
 800baee:	bd70      	pop	{r4, r5, r6, pc}
 800baf0:	68a2      	ldr	r2, [r4, #8]
 800baf2:	f104 010c 	add.w	r1, r4, #12
 800baf6:	4628      	mov	r0, r5
 800baf8:	f002 fdda 	bl	800e6b0 <ucdr_serialize_sequence_uint8_t>
 800bafc:	4606      	mov	r6, r0
 800bafe:	e7c7      	b.n	800ba90 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bb00:	68a1      	ldr	r1, [r4, #8]
 800bb02:	4628      	mov	r0, r5
 800bb04:	f002 fe00 	bl	800e708 <ucdr_serialize_string>
 800bb08:	4606      	mov	r6, r0
 800bb0a:	e7c1      	b.n	800ba90 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800bb0c:	68a2      	ldr	r2, [r4, #8]
 800bb0e:	f104 010c 	add.w	r1, r4, #12
 800bb12:	4628      	mov	r0, r5
 800bb14:	f002 fdcc 	bl	800e6b0 <ucdr_serialize_sequence_uint8_t>
 800bb18:	4606      	mov	r6, r0
 800bb1a:	e7d5      	b.n	800bac8 <uxr_serialize_ObjectVariant.part.0+0x94>

0800bb1c <uxr_deserialize_DATAWRITER_Representation>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460d      	mov	r5, r1
 800bb22:	f001 fe2b 	bl	800d77c <ucdr_deserialize_uint8_t>
 800bb26:	4604      	mov	r4, r0
 800bb28:	b130      	cbz	r0, 800bb38 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bb2a:	782b      	ldrb	r3, [r5, #0]
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d00c      	beq.n	800bb4a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d012      	beq.n	800bb5a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d008      	beq.n	800bb4a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800bb38:	2202      	movs	r2, #2
 800bb3a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f001 fd74 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800bb44:	4020      	ands	r0, r4
 800bb46:	b2c0      	uxtb	r0, r0
 800bb48:	bd70      	pop	{r4, r5, r6, pc}
 800bb4a:	6869      	ldr	r1, [r5, #4]
 800bb4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb50:	4630      	mov	r0, r6
 800bb52:	f002 fde9 	bl	800e728 <ucdr_deserialize_string>
 800bb56:	4604      	mov	r4, r0
 800bb58:	e7ee      	b.n	800bb38 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bb5a:	1d2b      	adds	r3, r5, #4
 800bb5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb60:	f105 0108 	add.w	r1, r5, #8
 800bb64:	4630      	mov	r0, r6
 800bb66:	f002 fdb5 	bl	800e6d4 <ucdr_deserialize_sequence_uint8_t>
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	e7e4      	b.n	800bb38 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800bb6e:	bf00      	nop

0800bb70 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800bb70:	b570      	push	{r4, r5, r6, lr}
 800bb72:	460d      	mov	r5, r1
 800bb74:	7809      	ldrb	r1, [r1, #0]
 800bb76:	4606      	mov	r6, r0
 800bb78:	f001 fdbc 	bl	800d6f4 <ucdr_serialize_bool>
 800bb7c:	782b      	ldrb	r3, [r5, #0]
 800bb7e:	4604      	mov	r4, r0
 800bb80:	b94b      	cbnz	r3, 800bb96 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800bb82:	7a29      	ldrb	r1, [r5, #8]
 800bb84:	4630      	mov	r0, r6
 800bb86:	f001 fdb5 	bl	800d6f4 <ucdr_serialize_bool>
 800bb8a:	7a2b      	ldrb	r3, [r5, #8]
 800bb8c:	4004      	ands	r4, r0
 800bb8e:	b2e4      	uxtb	r4, r4
 800bb90:	b943      	cbnz	r3, 800bba4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800bb92:	4620      	mov	r0, r4
 800bb94:	bd70      	pop	{r4, r5, r6, pc}
 800bb96:	6869      	ldr	r1, [r5, #4]
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f002 fdb5 	bl	800e708 <ucdr_serialize_string>
 800bb9e:	4004      	ands	r4, r0
 800bba0:	b2e4      	uxtb	r4, r4
 800bba2:	e7ee      	b.n	800bb82 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800bba4:	68e9      	ldr	r1, [r5, #12]
 800bba6:	4630      	mov	r0, r6
 800bba8:	f002 fdae 	bl	800e708 <ucdr_serialize_string>
 800bbac:	4004      	ands	r4, r0
 800bbae:	4620      	mov	r0, r4
 800bbb0:	bd70      	pop	{r4, r5, r6, pc}
 800bbb2:	bf00      	nop

0800bbb4 <uxr_deserialize_ObjectVariant>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	460e      	mov	r6, r1
 800bbba:	f001 fddf 	bl	800d77c <ucdr_deserialize_uint8_t>
 800bbbe:	b168      	cbz	r0, 800bbdc <uxr_deserialize_ObjectVariant+0x28>
 800bbc0:	7833      	ldrb	r3, [r6, #0]
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	2b0d      	cmp	r3, #13
 800bbc8:	d809      	bhi.n	800bbde <uxr_deserialize_ObjectVariant+0x2a>
 800bbca:	e8df f003 	tbb	[pc, r3]
 800bbce:	0a41      	.short	0x0a41
 800bbd0:	0a0a2323 	.word	0x0a0a2323
 800bbd4:	10080a0a 	.word	0x10080a0a
 800bbd8:	565c1010 	.word	0x565c1010
 800bbdc:	2400      	movs	r4, #0
 800bbde:	4620      	mov	r0, r4
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	1d31      	adds	r1, r6, #4
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbea:	f7ff bf97 	b.w	800bb1c <uxr_deserialize_DATAWRITER_Representation>
 800bbee:	1d31      	adds	r1, r6, #4
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	f001 fdc3 	bl	800d77c <ucdr_deserialize_uint8_t>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d0f0      	beq.n	800bbdc <uxr_deserialize_ObjectVariant+0x28>
 800bbfa:	7933      	ldrb	r3, [r6, #4]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d001      	beq.n	800bc04 <uxr_deserialize_ObjectVariant+0x50>
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d1ec      	bne.n	800bbde <uxr_deserialize_ObjectVariant+0x2a>
 800bc04:	68b1      	ldr	r1, [r6, #8]
 800bc06:	4628      	mov	r0, r5
 800bc08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc10:	f002 bd8a 	b.w	800e728 <ucdr_deserialize_string>
 800bc14:	1d31      	adds	r1, r6, #4
 800bc16:	4628      	mov	r0, r5
 800bc18:	f001 fdb0 	bl	800d77c <ucdr_deserialize_uint8_t>
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	b170      	cbz	r0, 800bc3e <uxr_deserialize_ObjectVariant+0x8a>
 800bc20:	7933      	ldrb	r3, [r6, #4]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d04c      	beq.n	800bcc0 <uxr_deserialize_ObjectVariant+0x10c>
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	d109      	bne.n	800bc3e <uxr_deserialize_ObjectVariant+0x8a>
 800bc2a:	f106 0308 	add.w	r3, r6, #8
 800bc2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc32:	f106 010c 	add.w	r1, r6, #12
 800bc36:	4628      	mov	r0, r5
 800bc38:	f002 fd4c 	bl	800e6d4 <ucdr_deserialize_sequence_uint8_t>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	2202      	movs	r2, #2
 800bc40:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800bc44:	4628      	mov	r0, r5
 800bc46:	f001 fcf1 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800bc4a:	4020      	ands	r0, r4
 800bc4c:	b2c4      	uxtb	r4, r0
 800bc4e:	e7c6      	b.n	800bbde <uxr_deserialize_ObjectVariant+0x2a>
 800bc50:	1d31      	adds	r1, r6, #4
 800bc52:	4628      	mov	r0, r5
 800bc54:	f001 fd92 	bl	800d77c <ucdr_deserialize_uint8_t>
 800bc58:	4604      	mov	r4, r0
 800bc5a:	b130      	cbz	r0, 800bc6a <uxr_deserialize_ObjectVariant+0xb6>
 800bc5c:	7933      	ldrb	r3, [r6, #4]
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d036      	beq.n	800bcd0 <uxr_deserialize_ObjectVariant+0x11c>
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d03c      	beq.n	800bce0 <uxr_deserialize_ObjectVariant+0x12c>
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d032      	beq.n	800bcd0 <uxr_deserialize_ObjectVariant+0x11c>
 800bc6a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f002 fb2a 	bl	800e2c8 <ucdr_deserialize_int16_t>
 800bc74:	4020      	ands	r0, r4
 800bc76:	b2c4      	uxtb	r4, r0
 800bc78:	e7b1      	b.n	800bbde <uxr_deserialize_ObjectVariant+0x2a>
 800bc7a:	1d31      	adds	r1, r6, #4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc82:	f7ff be01 	b.w	800b888 <uxr_deserialize_CLIENT_Representation>
 800bc86:	2204      	movs	r2, #4
 800bc88:	18b1      	adds	r1, r6, r2
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f001 fcce 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800bc90:	2202      	movs	r2, #2
 800bc92:	f106 0108 	add.w	r1, r6, #8
 800bc96:	4604      	mov	r4, r0
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f001 fcc7 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800bc9e:	2202      	movs	r2, #2
 800bca0:	4004      	ands	r4, r0
 800bca2:	f106 010a 	add.w	r1, r6, #10
 800bca6:	4628      	mov	r0, r5
 800bca8:	f001 fcc0 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800bcac:	b2e4      	uxtb	r4, r4
 800bcae:	4603      	mov	r3, r0
 800bcb0:	f106 010c 	add.w	r1, r6, #12
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	401c      	ands	r4, r3
 800bcb8:	f001 fd32 	bl	800d720 <ucdr_deserialize_bool>
 800bcbc:	4004      	ands	r4, r0
 800bcbe:	e78e      	b.n	800bbde <uxr_deserialize_ObjectVariant+0x2a>
 800bcc0:	68b1      	ldr	r1, [r6, #8]
 800bcc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	f002 fd2e 	bl	800e728 <ucdr_deserialize_string>
 800bccc:	4604      	mov	r4, r0
 800bcce:	e7b6      	b.n	800bc3e <uxr_deserialize_ObjectVariant+0x8a>
 800bcd0:	68b1      	ldr	r1, [r6, #8]
 800bcd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	f002 fd26 	bl	800e728 <ucdr_deserialize_string>
 800bcdc:	4604      	mov	r4, r0
 800bcde:	e7c4      	b.n	800bc6a <uxr_deserialize_ObjectVariant+0xb6>
 800bce0:	f106 0308 	add.w	r3, r6, #8
 800bce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bce8:	f106 010c 	add.w	r1, r6, #12
 800bcec:	4628      	mov	r0, r5
 800bcee:	f002 fcf1 	bl	800e6d4 <ucdr_deserialize_sequence_uint8_t>
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	e7b9      	b.n	800bc6a <uxr_deserialize_ObjectVariant+0xb6>
 800bcf6:	bf00      	nop

0800bcf8 <uxr_deserialize_BaseObjectRequest>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	4605      	mov	r5, r0
 800bcfe:	460e      	mov	r6, r1
 800bd00:	f001 fc94 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800bd04:	2202      	movs	r2, #2
 800bd06:	4604      	mov	r4, r0
 800bd08:	18b1      	adds	r1, r6, r2
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	f001 fc8e 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800bd10:	4020      	ands	r0, r4
 800bd12:	b2c0      	uxtb	r0, r0
 800bd14:	bd70      	pop	{r4, r5, r6, pc}
 800bd16:	bf00      	nop

0800bd18 <uxr_serialize_ActivityInfoVariant>:
 800bd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	7809      	ldrb	r1, [r1, #0]
 800bd20:	4607      	mov	r7, r0
 800bd22:	f001 fd15 	bl	800d750 <ucdr_serialize_uint8_t>
 800bd26:	4681      	mov	r9, r0
 800bd28:	b138      	cbz	r0, 800bd3a <uxr_serialize_ActivityInfoVariant+0x22>
 800bd2a:	782b      	ldrb	r3, [r5, #0]
 800bd2c:	2b06      	cmp	r3, #6
 800bd2e:	f000 8082 	beq.w	800be36 <uxr_serialize_ActivityInfoVariant+0x11e>
 800bd32:	2b0d      	cmp	r3, #13
 800bd34:	d016      	beq.n	800bd64 <uxr_serialize_ActivityInfoVariant+0x4c>
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d002      	beq.n	800bd40 <uxr_serialize_ActivityInfoVariant+0x28>
 800bd3a:	4648      	mov	r0, r9
 800bd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd40:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800bd44:	4638      	mov	r0, r7
 800bd46:	f002 fa3f 	bl	800e1c8 <ucdr_serialize_int16_t>
 800bd4a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800bd4e:	4681      	mov	r9, r0
 800bd50:	4638      	mov	r0, r7
 800bd52:	f002 f969 	bl	800e028 <ucdr_serialize_uint64_t>
 800bd56:	ea09 0000 	and.w	r0, r9, r0
 800bd5a:	fa5f f980 	uxtb.w	r9, r0
 800bd5e:	4648      	mov	r0, r9
 800bd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd64:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800bd68:	4638      	mov	r0, r7
 800bd6a:	f002 fa2d 	bl	800e1c8 <ucdr_serialize_int16_t>
 800bd6e:	68e9      	ldr	r1, [r5, #12]
 800bd70:	4681      	mov	r9, r0
 800bd72:	4638      	mov	r0, r7
 800bd74:	f001 ff02 	bl	800db7c <ucdr_serialize_uint32_t>
 800bd78:	68eb      	ldr	r3, [r5, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0eb      	beq.n	800bd56 <uxr_serialize_ActivityInfoVariant+0x3e>
 800bd7e:	b320      	cbz	r0, 800bdca <uxr_serialize_ActivityInfoVariant+0xb2>
 800bd80:	f105 080c 	add.w	r8, r5, #12
 800bd84:	2600      	movs	r6, #0
 800bd86:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800bd8a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800bd8e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800bd92:	4638      	mov	r0, r7
 800bd94:	f001 fcdc 	bl	800d750 <ucdr_serialize_uint8_t>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d053      	beq.n	800be44 <uxr_serialize_ActivityInfoVariant+0x12c>
 800bd9c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800bda0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800bda4:	0074      	lsls	r4, r6, #1
 800bda6:	00c9      	lsls	r1, r1, #3
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d854      	bhi.n	800be56 <uxr_serialize_ActivityInfoVariant+0x13e>
 800bdac:	e8df f003 	tbb	[pc, r3]
 800bdb0:	02102132 	.word	0x02102132
 800bdb4:	4441      	add	r1, r8
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	6889      	ldr	r1, [r1, #8]
 800bdba:	f002 fca5 	bl	800e708 <ucdr_serialize_string>
 800bdbe:	68ea      	ldr	r2, [r5, #12]
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	4296      	cmp	r6, r2
 800bdc4:	d242      	bcs.n	800be4c <uxr_serialize_ActivityInfoVariant+0x134>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d1dd      	bne.n	800bd86 <uxr_serialize_ActivityInfoVariant+0x6e>
 800bdca:	f04f 0900 	mov.w	r9, #0
 800bdce:	e7b4      	b.n	800bd3a <uxr_serialize_ActivityInfoVariant+0x22>
 800bdd0:	3108      	adds	r1, #8
 800bdd2:	4441      	add	r1, r8
 800bdd4:	2210      	movs	r2, #16
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f001 fbc4 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800bddc:	4434      	add	r4, r6
 800bdde:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800bde2:	4604      	mov	r4, r0
 800bde4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bde6:	4638      	mov	r0, r7
 800bde8:	f001 fec8 	bl	800db7c <ucdr_serialize_uint32_t>
 800bdec:	4020      	ands	r0, r4
 800bdee:	b2c0      	uxtb	r0, r0
 800bdf0:	e7e5      	b.n	800bdbe <uxr_serialize_ActivityInfoVariant+0xa6>
 800bdf2:	3108      	adds	r1, #8
 800bdf4:	4441      	add	r1, r8
 800bdf6:	2204      	movs	r2, #4
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	f001 fbb3 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800bdfe:	4434      	add	r4, r6
 800be00:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800be04:	4604      	mov	r4, r0
 800be06:	8b19      	ldrh	r1, [r3, #24]
 800be08:	4638      	mov	r0, r7
 800be0a:	f001 fccd 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800be0e:	4020      	ands	r0, r4
 800be10:	b2c0      	uxtb	r0, r0
 800be12:	e7d4      	b.n	800bdbe <uxr_serialize_ActivityInfoVariant+0xa6>
 800be14:	3108      	adds	r1, #8
 800be16:	4441      	add	r1, r8
 800be18:	2202      	movs	r2, #2
 800be1a:	4638      	mov	r0, r7
 800be1c:	f001 fba2 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800be20:	4434      	add	r4, r6
 800be22:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800be26:	4604      	mov	r4, r0
 800be28:	7d99      	ldrb	r1, [r3, #22]
 800be2a:	4638      	mov	r0, r7
 800be2c:	f001 fc90 	bl	800d750 <ucdr_serialize_uint8_t>
 800be30:	4020      	ands	r0, r4
 800be32:	b2c0      	uxtb	r0, r0
 800be34:	e7c3      	b.n	800bdbe <uxr_serialize_ActivityInfoVariant+0xa6>
 800be36:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800be3a:	4638      	mov	r0, r7
 800be3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be40:	f002 b9c2 	b.w	800e1c8 <ucdr_serialize_int16_t>
 800be44:	68ea      	ldr	r2, [r5, #12]
 800be46:	3601      	adds	r6, #1
 800be48:	42b2      	cmp	r2, r6
 800be4a:	d8be      	bhi.n	800bdca <uxr_serialize_ActivityInfoVariant+0xb2>
 800be4c:	ea09 0900 	and.w	r9, r9, r0
 800be50:	fa5f f989 	uxtb.w	r9, r9
 800be54:	e771      	b.n	800bd3a <uxr_serialize_ActivityInfoVariant+0x22>
 800be56:	68eb      	ldr	r3, [r5, #12]
 800be58:	3601      	adds	r6, #1
 800be5a:	429e      	cmp	r6, r3
 800be5c:	f10a 0a18 	add.w	sl, sl, #24
 800be60:	d395      	bcc.n	800bd8e <uxr_serialize_ActivityInfoVariant+0x76>
 800be62:	e76a      	b.n	800bd3a <uxr_serialize_ActivityInfoVariant+0x22>

0800be64 <uxr_deserialize_BaseObjectReply>:
 800be64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be68:	2202      	movs	r2, #2
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	f001 fbdd 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800be72:	2202      	movs	r2, #2
 800be74:	18b9      	adds	r1, r7, r2
 800be76:	4605      	mov	r5, r0
 800be78:	4630      	mov	r0, r6
 800be7a:	f001 fbd7 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800be7e:	1d39      	adds	r1, r7, #4
 800be80:	4680      	mov	r8, r0
 800be82:	4630      	mov	r0, r6
 800be84:	f001 fc7a 	bl	800d77c <ucdr_deserialize_uint8_t>
 800be88:	1d79      	adds	r1, r7, #5
 800be8a:	4604      	mov	r4, r0
 800be8c:	4630      	mov	r0, r6
 800be8e:	f001 fc75 	bl	800d77c <ucdr_deserialize_uint8_t>
 800be92:	ea05 0508 	and.w	r5, r5, r8
 800be96:	402c      	ands	r4, r5
 800be98:	4020      	ands	r0, r4
 800be9a:	b2c0      	uxtb	r0, r0
 800be9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bea0 <uxr_serialize_ReadSpecification>:
 800bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea4:	460e      	mov	r6, r1
 800bea6:	7809      	ldrb	r1, [r1, #0]
 800bea8:	4607      	mov	r7, r0
 800beaa:	f001 fc51 	bl	800d750 <ucdr_serialize_uint8_t>
 800beae:	7871      	ldrb	r1, [r6, #1]
 800beb0:	4604      	mov	r4, r0
 800beb2:	4638      	mov	r0, r7
 800beb4:	f001 fc4c 	bl	800d750 <ucdr_serialize_uint8_t>
 800beb8:	78b1      	ldrb	r1, [r6, #2]
 800beba:	4004      	ands	r4, r0
 800bebc:	4638      	mov	r0, r7
 800bebe:	f001 fc19 	bl	800d6f4 <ucdr_serialize_bool>
 800bec2:	78b3      	ldrb	r3, [r6, #2]
 800bec4:	b2e4      	uxtb	r4, r4
 800bec6:	4004      	ands	r4, r0
 800bec8:	b94b      	cbnz	r3, 800bede <uxr_serialize_ReadSpecification+0x3e>
 800beca:	7a31      	ldrb	r1, [r6, #8]
 800becc:	4638      	mov	r0, r7
 800bece:	f001 fc11 	bl	800d6f4 <ucdr_serialize_bool>
 800bed2:	7a33      	ldrb	r3, [r6, #8]
 800bed4:	4004      	ands	r4, r0
 800bed6:	b943      	cbnz	r3, 800beea <uxr_serialize_ReadSpecification+0x4a>
 800bed8:	4620      	mov	r0, r4
 800beda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bede:	6871      	ldr	r1, [r6, #4]
 800bee0:	4638      	mov	r0, r7
 800bee2:	f002 fc11 	bl	800e708 <ucdr_serialize_string>
 800bee6:	4004      	ands	r4, r0
 800bee8:	e7ef      	b.n	800beca <uxr_serialize_ReadSpecification+0x2a>
 800beea:	8971      	ldrh	r1, [r6, #10]
 800beec:	4638      	mov	r0, r7
 800beee:	f001 fc5b 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800bef2:	89b1      	ldrh	r1, [r6, #12]
 800bef4:	4605      	mov	r5, r0
 800bef6:	4638      	mov	r0, r7
 800bef8:	f001 fc56 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800befc:	89f1      	ldrh	r1, [r6, #14]
 800befe:	4005      	ands	r5, r0
 800bf00:	4638      	mov	r0, r7
 800bf02:	f001 fc51 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800bf06:	8a31      	ldrh	r1, [r6, #16]
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	f001 fc4c 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800bf10:	b2ed      	uxtb	r5, r5
 800bf12:	4025      	ands	r5, r4
 800bf14:	ea08 0505 	and.w	r5, r8, r5
 800bf18:	ea00 0405 	and.w	r4, r0, r5
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf22:	bf00      	nop

0800bf24 <uxr_serialize_CREATE_CLIENT_Payload>:
 800bf24:	f7ff bc58 	b.w	800b7d8 <uxr_serialize_CLIENT_Representation>

0800bf28 <uxr_serialize_CREATE_Payload>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	460e      	mov	r6, r1
 800bf30:	f001 fb18 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800bf34:	2202      	movs	r2, #2
 800bf36:	18b1      	adds	r1, r6, r2
 800bf38:	4605      	mov	r5, r0
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	f001 fb12 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800bf40:	7931      	ldrb	r1, [r6, #4]
 800bf42:	4604      	mov	r4, r0
 800bf44:	4638      	mov	r0, r7
 800bf46:	f001 fc03 	bl	800d750 <ucdr_serialize_uint8_t>
 800bf4a:	b170      	cbz	r0, 800bf6a <uxr_serialize_CREATE_Payload+0x42>
 800bf4c:	7933      	ldrb	r3, [r6, #4]
 800bf4e:	402c      	ands	r4, r5
 800bf50:	3b01      	subs	r3, #1
 800bf52:	b2e4      	uxtb	r4, r4
 800bf54:	2b0d      	cmp	r3, #13
 800bf56:	d809      	bhi.n	800bf6c <uxr_serialize_CREATE_Payload+0x44>
 800bf58:	e8df f003 	tbb	[pc, r3]
 800bf5c:	23230a4c 	.word	0x23230a4c
 800bf60:	0a0a0a0a 	.word	0x0a0a0a0a
 800bf64:	12121208 	.word	0x12121208
 800bf68:	3e45      	.short	0x3e45
 800bf6a:	2400      	movs	r4, #0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf70:	f106 0108 	add.w	r1, r6, #8
 800bf74:	4638      	mov	r0, r7
 800bf76:	f7ff fd35 	bl	800b9e4 <uxr_serialize_DATAWRITER_Representation>
 800bf7a:	4004      	ands	r4, r0
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf80:	7a31      	ldrb	r1, [r6, #8]
 800bf82:	4638      	mov	r0, r7
 800bf84:	f001 fbe4 	bl	800d750 <ucdr_serialize_uint8_t>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d0ee      	beq.n	800bf6a <uxr_serialize_CREATE_Payload+0x42>
 800bf8c:	7a33      	ldrb	r3, [r6, #8]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d001      	beq.n	800bf96 <uxr_serialize_CREATE_Payload+0x6e>
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d1ea      	bne.n	800bf6c <uxr_serialize_CREATE_Payload+0x44>
 800bf96:	68f1      	ldr	r1, [r6, #12]
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f002 fbb5 	bl	800e708 <ucdr_serialize_string>
 800bf9e:	4004      	ands	r4, r0
 800bfa0:	e7e4      	b.n	800bf6c <uxr_serialize_CREATE_Payload+0x44>
 800bfa2:	7a31      	ldrb	r1, [r6, #8]
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	f001 fbd3 	bl	800d750 <ucdr_serialize_uint8_t>
 800bfaa:	4605      	mov	r5, r0
 800bfac:	b158      	cbz	r0, 800bfc6 <uxr_serialize_CREATE_Payload+0x9e>
 800bfae:	7a33      	ldrb	r3, [r6, #8]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d034      	beq.n	800c01e <uxr_serialize_CREATE_Payload+0xf6>
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d106      	bne.n	800bfc6 <uxr_serialize_CREATE_Payload+0x9e>
 800bfb8:	68f2      	ldr	r2, [r6, #12]
 800bfba:	f106 0110 	add.w	r1, r6, #16
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	f002 fb76 	bl	800e6b0 <ucdr_serialize_sequence_uint8_t>
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800bfcc:	4638      	mov	r0, r7
 800bfce:	f001 fac9 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800bfd2:	4028      	ands	r0, r5
 800bfd4:	4004      	ands	r4, r0
 800bfd6:	e7c9      	b.n	800bf6c <uxr_serialize_CREATE_Payload+0x44>
 800bfd8:	f106 0108 	add.w	r1, r6, #8
 800bfdc:	4638      	mov	r0, r7
 800bfde:	f7ff fbfb 	bl	800b7d8 <uxr_serialize_CLIENT_Representation>
 800bfe2:	4004      	ands	r4, r0
 800bfe4:	e7c2      	b.n	800bf6c <uxr_serialize_CREATE_Payload+0x44>
 800bfe6:	f106 0108 	add.w	r1, r6, #8
 800bfea:	4638      	mov	r0, r7
 800bfec:	f7ff fcb0 	bl	800b950 <uxr_serialize_AGENT_Representation>
 800bff0:	4004      	ands	r4, r0
 800bff2:	e7bb      	b.n	800bf6c <uxr_serialize_CREATE_Payload+0x44>
 800bff4:	7a31      	ldrb	r1, [r6, #8]
 800bff6:	4638      	mov	r0, r7
 800bff8:	f001 fbaa 	bl	800d750 <ucdr_serialize_uint8_t>
 800bffc:	4605      	mov	r5, r0
 800bffe:	b130      	cbz	r0, 800c00e <uxr_serialize_CREATE_Payload+0xe6>
 800c000:	7a33      	ldrb	r3, [r6, #8]
 800c002:	2b02      	cmp	r3, #2
 800c004:	d011      	beq.n	800c02a <uxr_serialize_CREATE_Payload+0x102>
 800c006:	2b03      	cmp	r3, #3
 800c008:	d015      	beq.n	800c036 <uxr_serialize_CREATE_Payload+0x10e>
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d00d      	beq.n	800c02a <uxr_serialize_CREATE_Payload+0x102>
 800c00e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800c012:	4638      	mov	r0, r7
 800c014:	f002 f8d8 	bl	800e1c8 <ucdr_serialize_int16_t>
 800c018:	4028      	ands	r0, r5
 800c01a:	4004      	ands	r4, r0
 800c01c:	e7a6      	b.n	800bf6c <uxr_serialize_CREATE_Payload+0x44>
 800c01e:	68f1      	ldr	r1, [r6, #12]
 800c020:	4638      	mov	r0, r7
 800c022:	f002 fb71 	bl	800e708 <ucdr_serialize_string>
 800c026:	4605      	mov	r5, r0
 800c028:	e7cd      	b.n	800bfc6 <uxr_serialize_CREATE_Payload+0x9e>
 800c02a:	68f1      	ldr	r1, [r6, #12]
 800c02c:	4638      	mov	r0, r7
 800c02e:	f002 fb6b 	bl	800e708 <ucdr_serialize_string>
 800c032:	4605      	mov	r5, r0
 800c034:	e7eb      	b.n	800c00e <uxr_serialize_CREATE_Payload+0xe6>
 800c036:	68f2      	ldr	r2, [r6, #12]
 800c038:	f106 0110 	add.w	r1, r6, #16
 800c03c:	4638      	mov	r0, r7
 800c03e:	f002 fb37 	bl	800e6b0 <ucdr_serialize_sequence_uint8_t>
 800c042:	4605      	mov	r5, r0
 800c044:	e7e3      	b.n	800c00e <uxr_serialize_CREATE_Payload+0xe6>
 800c046:	bf00      	nop

0800c048 <uxr_deserialize_GET_INFO_Payload>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	2202      	movs	r2, #2
 800c04c:	4605      	mov	r5, r0
 800c04e:	460e      	mov	r6, r1
 800c050:	f001 faec 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c054:	2202      	movs	r2, #2
 800c056:	18b1      	adds	r1, r6, r2
 800c058:	4604      	mov	r4, r0
 800c05a:	4628      	mov	r0, r5
 800c05c:	f001 fae6 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c060:	1d31      	adds	r1, r6, #4
 800c062:	4004      	ands	r4, r0
 800c064:	4628      	mov	r0, r5
 800c066:	f001 feb9 	bl	800dddc <ucdr_deserialize_uint32_t>
 800c06a:	b2e4      	uxtb	r4, r4
 800c06c:	4020      	ands	r0, r4
 800c06e:	bd70      	pop	{r4, r5, r6, pc}

0800c070 <uxr_serialize_DELETE_Payload>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	2202      	movs	r2, #2
 800c074:	4605      	mov	r5, r0
 800c076:	460e      	mov	r6, r1
 800c078:	f001 fa74 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800c07c:	2202      	movs	r2, #2
 800c07e:	4604      	mov	r4, r0
 800c080:	18b1      	adds	r1, r6, r2
 800c082:	4628      	mov	r0, r5
 800c084:	f001 fa6e 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800c088:	4020      	ands	r0, r4
 800c08a:	b2c0      	uxtb	r0, r0
 800c08c:	bd70      	pop	{r4, r5, r6, pc}
 800c08e:	bf00      	nop

0800c090 <uxr_deserialize_STATUS_AGENT_Payload>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	4605      	mov	r5, r0
 800c096:	460e      	mov	r6, r1
 800c098:	f001 fb70 	bl	800d77c <ucdr_deserialize_uint8_t>
 800c09c:	1c71      	adds	r1, r6, #1
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f001 fb6b 	bl	800d77c <ucdr_deserialize_uint8_t>
 800c0a6:	2204      	movs	r2, #4
 800c0a8:	18b1      	adds	r1, r6, r2
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f001 fabd 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c0b2:	f106 0108 	add.w	r1, r6, #8
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f001 fab6 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c0c0:	ea04 0308 	and.w	r3, r4, r8
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	ea03 0407 	and.w	r4, r3, r7
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	f106 010a 	add.w	r1, r6, #10
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f001 faaa 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c0d8:	f106 010c 	add.w	r1, r6, #12
 800c0dc:	4603      	mov	r3, r0
 800c0de:	4628      	mov	r0, r5
 800c0e0:	461d      	mov	r5, r3
 800c0e2:	f001 fb1d 	bl	800d720 <ucdr_deserialize_bool>
 800c0e6:	403c      	ands	r4, r7
 800c0e8:	4025      	ands	r5, r4
 800c0ea:	4028      	ands	r0, r5
 800c0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0f0 <uxr_deserialize_STATUS_Payload>:
 800c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	2202      	movs	r2, #2
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	f001 fa97 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c0fe:	2202      	movs	r2, #2
 800c100:	18b9      	adds	r1, r7, r2
 800c102:	4605      	mov	r5, r0
 800c104:	4630      	mov	r0, r6
 800c106:	f001 fa91 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c10a:	1d39      	adds	r1, r7, #4
 800c10c:	4680      	mov	r8, r0
 800c10e:	4630      	mov	r0, r6
 800c110:	f001 fb34 	bl	800d77c <ucdr_deserialize_uint8_t>
 800c114:	1d79      	adds	r1, r7, #5
 800c116:	4604      	mov	r4, r0
 800c118:	4630      	mov	r0, r6
 800c11a:	f001 fb2f 	bl	800d77c <ucdr_deserialize_uint8_t>
 800c11e:	ea05 0508 	and.w	r5, r5, r8
 800c122:	402c      	ands	r4, r5
 800c124:	4020      	ands	r0, r4
 800c126:	b2c0      	uxtb	r0, r0
 800c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c12c <uxr_serialize_INFO_Payload>:
 800c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	2202      	movs	r2, #2
 800c132:	460c      	mov	r4, r1
 800c134:	4605      	mov	r5, r0
 800c136:	f001 fa15 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800c13a:	2202      	movs	r2, #2
 800c13c:	18a1      	adds	r1, r4, r2
 800c13e:	4680      	mov	r8, r0
 800c140:	4628      	mov	r0, r5
 800c142:	f001 fa0f 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800c146:	7921      	ldrb	r1, [r4, #4]
 800c148:	4607      	mov	r7, r0
 800c14a:	4628      	mov	r0, r5
 800c14c:	f001 fb00 	bl	800d750 <ucdr_serialize_uint8_t>
 800c150:	7961      	ldrb	r1, [r4, #5]
 800c152:	4606      	mov	r6, r0
 800c154:	4628      	mov	r0, r5
 800c156:	f001 fafb 	bl	800d750 <ucdr_serialize_uint8_t>
 800c15a:	ea08 0807 	and.w	r8, r8, r7
 800c15e:	ea06 0608 	and.w	r6, r6, r8
 800c162:	4006      	ands	r6, r0
 800c164:	7a21      	ldrb	r1, [r4, #8]
 800c166:	4628      	mov	r0, r5
 800c168:	f001 fac4 	bl	800d6f4 <ucdr_serialize_bool>
 800c16c:	7a23      	ldrb	r3, [r4, #8]
 800c16e:	b2f7      	uxtb	r7, r6
 800c170:	4606      	mov	r6, r0
 800c172:	b96b      	cbnz	r3, 800c190 <uxr_serialize_INFO_Payload+0x64>
 800c174:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800c178:	4628      	mov	r0, r5
 800c17a:	f001 fabb 	bl	800d6f4 <ucdr_serialize_bool>
 800c17e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800c182:	4030      	ands	r0, r6
 800c184:	b2c6      	uxtb	r6, r0
 800c186:	b983      	cbnz	r3, 800c1aa <uxr_serialize_INFO_Payload+0x7e>
 800c188:	ea06 0007 	and.w	r0, r6, r7
 800c18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c190:	7b21      	ldrb	r1, [r4, #12]
 800c192:	4628      	mov	r0, r5
 800c194:	f001 fadc 	bl	800d750 <ucdr_serialize_uint8_t>
 800c198:	b188      	cbz	r0, 800c1be <uxr_serialize_INFO_Payload+0x92>
 800c19a:	f104 010c 	add.w	r1, r4, #12
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f7ff fc48 	bl	800ba34 <uxr_serialize_ObjectVariant.part.0>
 800c1a4:	4030      	ands	r0, r6
 800c1a6:	b2c6      	uxtb	r6, r0
 800c1a8:	e7e4      	b.n	800c174 <uxr_serialize_INFO_Payload+0x48>
 800c1aa:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f7ff fdb2 	bl	800bd18 <uxr_serialize_ActivityInfoVariant>
 800c1b4:	4006      	ands	r6, r0
 800c1b6:	ea06 0007 	and.w	r0, r6, r7
 800c1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1be:	4606      	mov	r6, r0
 800c1c0:	e7d8      	b.n	800c174 <uxr_serialize_INFO_Payload+0x48>
 800c1c2:	bf00      	nop

0800c1c4 <uxr_serialize_READ_DATA_Payload>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	460e      	mov	r6, r1
 800c1cc:	f001 f9ca 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	18b1      	adds	r1, r6, r2
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	f001 f9c4 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800c1dc:	1d31      	adds	r1, r6, #4
 800c1de:	4004      	ands	r4, r0
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f7ff fe5d 	bl	800bea0 <uxr_serialize_ReadSpecification>
 800c1e6:	b2e4      	uxtb	r4, r4
 800c1e8:	4020      	ands	r0, r4
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}

0800c1ec <uxr_serialize_ACKNACK_Payload>:
 800c1ec:	b570      	push	{r4, r5, r6, lr}
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	460e      	mov	r6, r1
 800c1f2:	f834 1b02 	ldrh.w	r1, [r4], #2
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	f001 fad6 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	4621      	mov	r1, r4
 800c200:	4604      	mov	r4, r0
 800c202:	4628      	mov	r0, r5
 800c204:	f001 f9ae 	bl	800d564 <ucdr_serialize_array_uint8_t>
 800c208:	7931      	ldrb	r1, [r6, #4]
 800c20a:	4004      	ands	r4, r0
 800c20c:	4628      	mov	r0, r5
 800c20e:	f001 fa9f 	bl	800d750 <ucdr_serialize_uint8_t>
 800c212:	b2e4      	uxtb	r4, r4
 800c214:	4020      	ands	r0, r4
 800c216:	bd70      	pop	{r4, r5, r6, pc}

0800c218 <uxr_deserialize_ACKNACK_Payload>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	4605      	mov	r5, r0
 800c21c:	460e      	mov	r6, r1
 800c21e:	f001 fbc3 	bl	800d9a8 <ucdr_deserialize_uint16_t>
 800c222:	2202      	movs	r2, #2
 800c224:	18b1      	adds	r1, r6, r2
 800c226:	4604      	mov	r4, r0
 800c228:	4628      	mov	r0, r5
 800c22a:	f001 f9ff 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c22e:	1d31      	adds	r1, r6, #4
 800c230:	4004      	ands	r4, r0
 800c232:	4628      	mov	r0, r5
 800c234:	f001 faa2 	bl	800d77c <ucdr_deserialize_uint8_t>
 800c238:	b2e4      	uxtb	r4, r4
 800c23a:	4020      	ands	r0, r4
 800c23c:	bd70      	pop	{r4, r5, r6, pc}
 800c23e:	bf00      	nop

0800c240 <uxr_serialize_HEARTBEAT_Payload>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	460d      	mov	r5, r1
 800c244:	8809      	ldrh	r1, [r1, #0]
 800c246:	4606      	mov	r6, r0
 800c248:	f001 faae 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800c24c:	8869      	ldrh	r1, [r5, #2]
 800c24e:	4604      	mov	r4, r0
 800c250:	4630      	mov	r0, r6
 800c252:	f001 faa9 	bl	800d7a8 <ucdr_serialize_uint16_t>
 800c256:	7929      	ldrb	r1, [r5, #4]
 800c258:	4004      	ands	r4, r0
 800c25a:	4630      	mov	r0, r6
 800c25c:	f001 fa78 	bl	800d750 <ucdr_serialize_uint8_t>
 800c260:	b2e4      	uxtb	r4, r4
 800c262:	4020      	ands	r0, r4
 800c264:	bd70      	pop	{r4, r5, r6, pc}
 800c266:	bf00      	nop

0800c268 <uxr_deserialize_HEARTBEAT_Payload>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	4605      	mov	r5, r0
 800c26c:	460e      	mov	r6, r1
 800c26e:	f001 fb9b 	bl	800d9a8 <ucdr_deserialize_uint16_t>
 800c272:	1cb1      	adds	r1, r6, #2
 800c274:	4604      	mov	r4, r0
 800c276:	4628      	mov	r0, r5
 800c278:	f001 fb96 	bl	800d9a8 <ucdr_deserialize_uint16_t>
 800c27c:	1d31      	adds	r1, r6, #4
 800c27e:	4004      	ands	r4, r0
 800c280:	4628      	mov	r0, r5
 800c282:	f001 fa7b 	bl	800d77c <ucdr_deserialize_uint8_t>
 800c286:	b2e4      	uxtb	r4, r4
 800c288:	4020      	ands	r0, r4
 800c28a:	bd70      	pop	{r4, r5, r6, pc}

0800c28c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c290:	4605      	mov	r5, r0
 800c292:	460e      	mov	r6, r1
 800c294:	f002 f88c 	bl	800e3b0 <ucdr_deserialize_int32_t>
 800c298:	1d31      	adds	r1, r6, #4
 800c29a:	4607      	mov	r7, r0
 800c29c:	4628      	mov	r0, r5
 800c29e:	f001 fd9d 	bl	800dddc <ucdr_deserialize_uint32_t>
 800c2a2:	f106 0108 	add.w	r1, r6, #8
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f002 f881 	bl	800e3b0 <ucdr_deserialize_int32_t>
 800c2ae:	f106 010c 	add.w	r1, r6, #12
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f001 fd91 	bl	800dddc <ucdr_deserialize_uint32_t>
 800c2ba:	ea07 0708 	and.w	r7, r7, r8
 800c2be:	403c      	ands	r4, r7
 800c2c0:	f106 0110 	add.w	r1, r6, #16
 800c2c4:	4004      	ands	r4, r0
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f002 f872 	bl	800e3b0 <ucdr_deserialize_int32_t>
 800c2cc:	f106 0114 	add.w	r1, r6, #20
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f001 fd82 	bl	800dddc <ucdr_deserialize_uint32_t>
 800c2d8:	b2e4      	uxtb	r4, r4
 800c2da:	403c      	ands	r4, r7
 800c2dc:	4020      	ands	r0, r4
 800c2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e2:	bf00      	nop

0800c2e4 <uxr_deserialize_SampleIdentity>:
 800c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	220c      	movs	r2, #12
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	f001 f99d 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	f105 010c 	add.w	r1, r5, #12
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f001 f996 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800c300:	f105 010f 	add.w	r1, r5, #15
 800c304:	4680      	mov	r8, r0
 800c306:	4620      	mov	r0, r4
 800c308:	f001 fa38 	bl	800d77c <ucdr_deserialize_uint8_t>
 800c30c:	f105 0110 	add.w	r1, r5, #16
 800c310:	4606      	mov	r6, r0
 800c312:	4620      	mov	r0, r4
 800c314:	f002 f84c 	bl	800e3b0 <ucdr_deserialize_int32_t>
 800c318:	f105 0114 	add.w	r1, r5, #20
 800c31c:	4603      	mov	r3, r0
 800c31e:	4620      	mov	r0, r4
 800c320:	ea07 0708 	and.w	r7, r7, r8
 800c324:	461c      	mov	r4, r3
 800c326:	f001 fd59 	bl	800dddc <ucdr_deserialize_uint32_t>
 800c32a:	403e      	ands	r6, r7
 800c32c:	4034      	ands	r4, r6
 800c32e:	4020      	ands	r0, r4
 800c330:	b2c0      	uxtb	r0, r0
 800c332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c336:	bf00      	nop

0800c338 <rcl_convert_rmw_ret_to_rcl_ret>:
 800c338:	280b      	cmp	r0, #11
 800c33a:	dc0d      	bgt.n	800c358 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	db09      	blt.n	800c354 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c340:	280b      	cmp	r0, #11
 800c342:	d807      	bhi.n	800c354 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c344:	e8df f000 	tbb	[pc, r0]
 800c348:	07060607 	.word	0x07060607
 800c34c:	06060606 	.word	0x06060606
 800c350:	07070606 	.word	0x07070606
 800c354:	2001      	movs	r0, #1
 800c356:	4770      	bx	lr
 800c358:	28cb      	cmp	r0, #203	@ 0xcb
 800c35a:	bf18      	it	ne
 800c35c:	2001      	movne	r0, #1
 800c35e:	4770      	bx	lr

0800c360 <rcl_get_zero_initialized_context>:
 800c360:	4a03      	ldr	r2, [pc, #12]	@ (800c370 <rcl_get_zero_initialized_context+0x10>)
 800c362:	4603      	mov	r3, r0
 800c364:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c368:	e883 0003 	stmia.w	r3, {r0, r1}
 800c36c:	4618      	mov	r0, r3
 800c36e:	4770      	bx	lr
 800c370:	08010e50 	.word	0x08010e50

0800c374 <rcl_context_is_valid>:
 800c374:	b118      	cbz	r0, 800c37e <rcl_context_is_valid+0xa>
 800c376:	6840      	ldr	r0, [r0, #4]
 800c378:	3800      	subs	r0, #0
 800c37a:	bf18      	it	ne
 800c37c:	2001      	movne	r0, #1
 800c37e:	4770      	bx	lr

0800c380 <__cleanup_context>:
 800c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c384:	4606      	mov	r6, r0
 800c386:	6800      	ldr	r0, [r0, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	6073      	str	r3, [r6, #4]
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d049      	beq.n	800c424 <__cleanup_context+0xa4>
 800c390:	6947      	ldr	r7, [r0, #20]
 800c392:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c396:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c39a:	b137      	cbz	r7, 800c3aa <__cleanup_context+0x2a>
 800c39c:	3014      	adds	r0, #20
 800c39e:	f7fc f85b 	bl	8008458 <rcl_init_options_fini>
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d144      	bne.n	800c432 <__cleanup_context+0xb2>
 800c3a8:	6830      	ldr	r0, [r6, #0]
 800c3aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c3ac:	b143      	cbz	r3, 800c3c0 <__cleanup_context+0x40>
 800c3ae:	3028      	adds	r0, #40	@ 0x28
 800c3b0:	f7fc fc3a 	bl	8008c28 <rmw_context_fini>
 800c3b4:	b118      	cbz	r0, 800c3be <__cleanup_context+0x3e>
 800c3b6:	2f00      	cmp	r7, #0
 800c3b8:	d03e      	beq.n	800c438 <__cleanup_context+0xb8>
 800c3ba:	f7fc f9c1 	bl	8008740 <rcutils_reset_error>
 800c3be:	6830      	ldr	r0, [r6, #0]
 800c3c0:	6a03      	ldr	r3, [r0, #32]
 800c3c2:	b1db      	cbz	r3, 800c3fc <__cleanup_context+0x7c>
 800c3c4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800c3c8:	2a01      	cmp	r2, #1
 800c3ca:	f17c 0100 	sbcs.w	r1, ip, #0
 800c3ce:	db11      	blt.n	800c3f4 <__cleanup_context+0x74>
 800c3d0:	2400      	movs	r4, #0
 800c3d2:	4625      	mov	r5, r4
 800c3d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c3d8:	4649      	mov	r1, r9
 800c3da:	b1b8      	cbz	r0, 800c40c <__cleanup_context+0x8c>
 800c3dc:	47c0      	blx	r8
 800c3de:	6833      	ldr	r3, [r6, #0]
 800c3e0:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800c3e4:	3401      	adds	r4, #1
 800c3e6:	f145 0500 	adc.w	r5, r5, #0
 800c3ea:	4294      	cmp	r4, r2
 800c3ec:	eb75 010c 	sbcs.w	r1, r5, ip
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	dbef      	blt.n	800c3d4 <__cleanup_context+0x54>
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	47c0      	blx	r8
 800c3fa:	6830      	ldr	r0, [r6, #0]
 800c3fc:	4649      	mov	r1, r9
 800c3fe:	47c0      	blx	r8
 800c400:	2300      	movs	r3, #0
 800c402:	e9c6 3300 	strd	r3, r3, [r6]
 800c406:	4638      	mov	r0, r7
 800c408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40c:	3401      	adds	r4, #1
 800c40e:	f145 0500 	adc.w	r5, r5, #0
 800c412:	4294      	cmp	r4, r2
 800c414:	eb75 010c 	sbcs.w	r1, r5, ip
 800c418:	dbdc      	blt.n	800c3d4 <__cleanup_context+0x54>
 800c41a:	4618      	mov	r0, r3
 800c41c:	4649      	mov	r1, r9
 800c41e:	47c0      	blx	r8
 800c420:	6830      	ldr	r0, [r6, #0]
 800c422:	e7eb      	b.n	800c3fc <__cleanup_context+0x7c>
 800c424:	4607      	mov	r7, r0
 800c426:	2300      	movs	r3, #0
 800c428:	e9c6 3300 	strd	r3, r3, [r6]
 800c42c:	4638      	mov	r0, r7
 800c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c432:	f7fc f985 	bl	8008740 <rcutils_reset_error>
 800c436:	e7b7      	b.n	800c3a8 <__cleanup_context+0x28>
 800c438:	f7ff ff7e 	bl	800c338 <rcl_convert_rmw_ret_to_rcl_ret>
 800c43c:	4607      	mov	r7, r0
 800c43e:	e7bc      	b.n	800c3ba <__cleanup_context+0x3a>

0800c440 <rcl_init>:
 800c440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c444:	1e05      	subs	r5, r0, #0
 800c446:	b09e      	sub	sp, #120	@ 0x78
 800c448:	460e      	mov	r6, r1
 800c44a:	4690      	mov	r8, r2
 800c44c:	461f      	mov	r7, r3
 800c44e:	f340 809c 	ble.w	800c58a <rcl_init+0x14a>
 800c452:	2900      	cmp	r1, #0
 800c454:	f000 809c 	beq.w	800c590 <rcl_init+0x150>
 800c458:	f1a1 0e04 	sub.w	lr, r1, #4
 800c45c:	f04f 0c00 	mov.w	ip, #0
 800c460:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800c464:	f10c 0c01 	add.w	ip, ip, #1
 800c468:	2c00      	cmp	r4, #0
 800c46a:	f000 8091 	beq.w	800c590 <rcl_init+0x150>
 800c46e:	4565      	cmp	r5, ip
 800c470:	d1f6      	bne.n	800c460 <rcl_init+0x20>
 800c472:	f1b8 0f00 	cmp.w	r8, #0
 800c476:	f000 808b 	beq.w	800c590 <rcl_init+0x150>
 800c47a:	f8d8 4000 	ldr.w	r4, [r8]
 800c47e:	2c00      	cmp	r4, #0
 800c480:	f000 8086 	beq.w	800c590 <rcl_init+0x150>
 800c484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c486:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800c48a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	f8cc 3000 	str.w	r3, [ip]
 800c494:	a819      	add	r0, sp, #100	@ 0x64
 800c496:	f7fc f92f 	bl	80086f8 <rcutils_allocator_is_valid>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d078      	beq.n	800c590 <rcl_init+0x150>
 800c49e:	2f00      	cmp	r7, #0
 800c4a0:	d076      	beq.n	800c590 <rcl_init+0x150>
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d178      	bne.n	800c59a <rcl_init+0x15a>
 800c4a8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800c4ac:	2178      	movs	r1, #120	@ 0x78
 800c4ae:	2001      	movs	r0, #1
 800c4b0:	4798      	blx	r3
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	6038      	str	r0, [r7, #0]
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f000 80b6 	beq.w	800c628 <rcl_init+0x1e8>
 800c4bc:	a802      	add	r0, sp, #8
 800c4be:	f000 fd8d 	bl	800cfdc <rmw_get_zero_initialized_context>
 800c4c2:	a902      	add	r1, sp, #8
 800c4c4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c4c8:	2250      	movs	r2, #80	@ 0x50
 800c4ca:	ac19      	add	r4, sp, #100	@ 0x64
 800c4cc:	f003 fc4d 	bl	800fd6a <memcpy>
 800c4d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4d2:	f8d7 e000 	ldr.w	lr, [r7]
 800c4d6:	46f4      	mov	ip, lr
 800c4d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	f8cc 3000 	str.w	r3, [ip]
 800c4e2:	f10e 0114 	add.w	r1, lr, #20
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	f7fb ffe0 	bl	80084ac <rcl_init_options_copy>
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d144      	bne.n	800c57c <rcl_init+0x13c>
 800c4f2:	f8d7 9000 	ldr.w	r9, [r7]
 800c4f6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800c4fa:	f8c9 0020 	str.w	r0, [r9, #32]
 800c4fe:	f8c9 5018 	str.w	r5, [r9, #24]
 800c502:	f8c9 801c 	str.w	r8, [r9, #28]
 800c506:	2d00      	cmp	r5, #0
 800c508:	d04e      	beq.n	800c5a8 <rcl_init+0x168>
 800c50a:	2e00      	cmp	r6, #0
 800c50c:	d04c      	beq.n	800c5a8 <rcl_init+0x168>
 800c50e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800c512:	2104      	movs	r1, #4
 800c514:	4628      	mov	r0, r5
 800c516:	4798      	blx	r3
 800c518:	f8c9 0020 	str.w	r0, [r9, #32]
 800c51c:	f8d7 9000 	ldr.w	r9, [r7]
 800c520:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800c524:	46ca      	mov	sl, r9
 800c526:	b343      	cbz	r3, 800c57a <rcl_init+0x13a>
 800c528:	2d01      	cmp	r5, #1
 800c52a:	f178 0300 	sbcs.w	r3, r8, #0
 800c52e:	db3b      	blt.n	800c5a8 <rcl_init+0x168>
 800c530:	2400      	movs	r4, #0
 800c532:	3e04      	subs	r6, #4
 800c534:	46a1      	mov	r9, r4
 800c536:	e00b      	b.n	800c550 <rcl_init+0x110>
 800c538:	6831      	ldr	r1, [r6, #0]
 800c53a:	f003 fc16 	bl	800fd6a <memcpy>
 800c53e:	3401      	adds	r4, #1
 800c540:	f149 0900 	adc.w	r9, r9, #0
 800c544:	45c8      	cmp	r8, r9
 800c546:	bf08      	it	eq
 800c548:	42a5      	cmpeq	r5, r4
 800c54a:	d02b      	beq.n	800c5a4 <rcl_init+0x164>
 800c54c:	f8d7 a000 	ldr.w	sl, [r7]
 800c550:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800c554:	f7f3 fe6e 	bl	8000234 <strlen>
 800c558:	1c42      	adds	r2, r0, #1
 800c55a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c55c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800c55e:	f8da a020 	ldr.w	sl, [sl, #32]
 800c562:	9201      	str	r2, [sp, #4]
 800c564:	4610      	mov	r0, r2
 800c566:	4798      	blx	r3
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	9a01      	ldr	r2, [sp, #4]
 800c572:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c576:	2800      	cmp	r0, #0
 800c578:	d1de      	bne.n	800c538 <rcl_init+0xf8>
 800c57a:	240a      	movs	r4, #10
 800c57c:	4638      	mov	r0, r7
 800c57e:	f7ff feff 	bl	800c380 <__cleanup_context>
 800c582:	4620      	mov	r0, r4
 800c584:	b01e      	add	sp, #120	@ 0x78
 800c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58a:	2900      	cmp	r1, #0
 800c58c:	f43f af71 	beq.w	800c472 <rcl_init+0x32>
 800c590:	240b      	movs	r4, #11
 800c592:	4620      	mov	r0, r4
 800c594:	b01e      	add	sp, #120	@ 0x78
 800c596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c59a:	2464      	movs	r4, #100	@ 0x64
 800c59c:	4620      	mov	r0, r4
 800c59e:	b01e      	add	sp, #120	@ 0x78
 800c5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a4:	f8d7 9000 	ldr.w	r9, [r7]
 800c5a8:	4926      	ldr	r1, [pc, #152]	@ (800c644 <rcl_init+0x204>)
 800c5aa:	680b      	ldr	r3, [r1, #0]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	d036      	beq.n	800c61e <rcl_init+0x1de>
 800c5b0:	600b      	str	r3, [r1, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	2400      	movs	r4, #0
 800c5b6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c5ba:	607b      	str	r3, [r7, #4]
 800c5bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c5be:	3301      	adds	r3, #1
 800c5c0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800c5c4:	d034      	beq.n	800c630 <rcl_init+0x1f0>
 800c5c6:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800c5ca:	b93b      	cbnz	r3, 800c5dc <rcl_init+0x19c>
 800c5cc:	3030      	adds	r0, #48	@ 0x30
 800c5ce:	f000 f83b 	bl	800c648 <rcl_get_localhost_only>
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d1d1      	bne.n	800c57c <rcl_init+0x13c>
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	6958      	ldr	r0, [r3, #20]
 800c5dc:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800c5de:	aa18      	add	r2, sp, #96	@ 0x60
 800c5e0:	a917      	add	r1, sp, #92	@ 0x5c
 800c5e2:	f000 fbb3 	bl	800cd4c <rcl_validate_enclave_name>
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d1c7      	bne.n	800c57c <rcl_init+0x13c>
 800c5ec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c5ee:	b9eb      	cbnz	r3, 800c62c <rcl_init+0x1ec>
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	694b      	ldr	r3, [r1, #20]
 800c5f4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c5f6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800c5fa:	f000 fa6f 	bl	800cadc <rcl_get_security_options_from_environment>
 800c5fe:	4604      	mov	r4, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	d1bb      	bne.n	800c57c <rcl_init+0x13c>
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6948      	ldr	r0, [r1, #20]
 800c608:	3128      	adds	r1, #40	@ 0x28
 800c60a:	3018      	adds	r0, #24
 800c60c:	f7fc f9d6 	bl	80089bc <rmw_init>
 800c610:	4604      	mov	r4, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	d0bd      	beq.n	800c592 <rcl_init+0x152>
 800c616:	f7ff fe8f 	bl	800c338 <rcl_convert_rmw_ret_to_rcl_ret>
 800c61a:	4604      	mov	r4, r0
 800c61c:	e7ae      	b.n	800c57c <rcl_init+0x13c>
 800c61e:	2201      	movs	r2, #1
 800c620:	461c      	mov	r4, r3
 800c622:	600a      	str	r2, [r1, #0]
 800c624:	4613      	mov	r3, r2
 800c626:	e7c6      	b.n	800c5b6 <rcl_init+0x176>
 800c628:	240a      	movs	r4, #10
 800c62a:	e7b2      	b.n	800c592 <rcl_init+0x152>
 800c62c:	2401      	movs	r4, #1
 800c62e:	e7a5      	b.n	800c57c <rcl_init+0x13c>
 800c630:	3024      	adds	r0, #36	@ 0x24
 800c632:	f002 fdbf 	bl	800f1b4 <rcl_get_default_domain_id>
 800c636:	4604      	mov	r4, r0
 800c638:	2800      	cmp	r0, #0
 800c63a:	d19f      	bne.n	800c57c <rcl_init+0x13c>
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	6958      	ldr	r0, [r3, #20]
 800c640:	e7c1      	b.n	800c5c6 <rcl_init+0x186>
 800c642:	bf00      	nop
 800c644:	2000a920 	.word	0x2000a920

0800c648 <rcl_get_localhost_only>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	2300      	movs	r3, #0
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	b1b8      	cbz	r0, 800c682 <rcl_get_localhost_only+0x3a>
 800c652:	4604      	mov	r4, r0
 800c654:	a901      	add	r1, sp, #4
 800c656:	480c      	ldr	r0, [pc, #48]	@ (800c688 <rcl_get_localhost_only+0x40>)
 800c658:	f000 fbc0 	bl	800cddc <rcutils_get_env>
 800c65c:	b110      	cbz	r0, 800c664 <rcl_get_localhost_only+0x1c>
 800c65e:	2001      	movs	r0, #1
 800c660:	b002      	add	sp, #8
 800c662:	bd10      	pop	{r4, pc}
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	b113      	cbz	r3, 800c66e <rcl_get_localhost_only+0x26>
 800c668:	781a      	ldrb	r2, [r3, #0]
 800c66a:	2a31      	cmp	r2, #49	@ 0x31
 800c66c:	d004      	beq.n	800c678 <rcl_get_localhost_only+0x30>
 800c66e:	2302      	movs	r3, #2
 800c670:	2000      	movs	r0, #0
 800c672:	7023      	strb	r3, [r4, #0]
 800c674:	b002      	add	sp, #8
 800c676:	bd10      	pop	{r4, pc}
 800c678:	785b      	ldrb	r3, [r3, #1]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1f7      	bne.n	800c66e <rcl_get_localhost_only+0x26>
 800c67e:	2301      	movs	r3, #1
 800c680:	e7f6      	b.n	800c670 <rcl_get_localhost_only+0x28>
 800c682:	200b      	movs	r0, #11
 800c684:	b002      	add	sp, #8
 800c686:	bd10      	pop	{r4, pc}
 800c688:	08010e58 	.word	0x08010e58

0800c68c <rcl_get_zero_initialized_node>:
 800c68c:	4a03      	ldr	r2, [pc, #12]	@ (800c69c <rcl_get_zero_initialized_node+0x10>)
 800c68e:	4603      	mov	r3, r0
 800c690:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c694:	e883 0003 	stmia.w	r3, {r0, r1}
 800c698:	4618      	mov	r0, r3
 800c69a:	4770      	bx	lr
 800c69c:	08010e84 	.word	0x08010e84

0800c6a0 <rcl_node_init>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	b0a9      	sub	sp, #164	@ 0xa4
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c6ac:	a823      	add	r0, sp, #140	@ 0x8c
 800c6ae:	460e      	mov	r6, r1
 800c6b0:	4615      	mov	r5, r2
 800c6b2:	461f      	mov	r7, r3
 800c6b4:	f002 fe42 	bl	800f33c <rcl_guard_condition_get_default_options>
 800c6b8:	f1b8 0f00 	cmp.w	r8, #0
 800c6bc:	f000 80e6 	beq.w	800c88c <rcl_node_init+0x1ec>
 800c6c0:	4640      	mov	r0, r8
 800c6c2:	f7fc f819 	bl	80086f8 <rcutils_allocator_is_valid>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f000 80e0 	beq.w	800c88c <rcl_node_init+0x1ec>
 800c6cc:	2e00      	cmp	r6, #0
 800c6ce:	f000 80dd 	beq.w	800c88c <rcl_node_init+0x1ec>
 800c6d2:	2d00      	cmp	r5, #0
 800c6d4:	f000 80da 	beq.w	800c88c <rcl_node_init+0x1ec>
 800c6d8:	2c00      	cmp	r4, #0
 800c6da:	f000 80d7 	beq.w	800c88c <rcl_node_init+0x1ec>
 800c6de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c6e2:	f1b9 0f00 	cmp.w	r9, #0
 800c6e6:	f040 80fd 	bne.w	800c8e4 <rcl_node_init+0x244>
 800c6ea:	2f00      	cmp	r7, #0
 800c6ec:	f000 80ce 	beq.w	800c88c <rcl_node_init+0x1ec>
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7ff fe3f 	bl	800c374 <rcl_context_is_valid>
 800c6f6:	4682      	mov	sl, r0
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f000 80cd 	beq.w	800c898 <rcl_node_init+0x1f8>
 800c6fe:	464a      	mov	r2, r9
 800c700:	a922      	add	r1, sp, #136	@ 0x88
 800c702:	4630      	mov	r0, r6
 800c704:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800c708:	f000 fce4 	bl	800d0d4 <rmw_validate_node_name>
 800c70c:	4681      	mov	r9, r0
 800c70e:	2800      	cmp	r0, #0
 800c710:	f040 80be 	bne.w	800c890 <rcl_node_init+0x1f0>
 800c714:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c716:	2800      	cmp	r0, #0
 800c718:	f040 80f0 	bne.w	800c8fc <rcl_node_init+0x25c>
 800c71c:	4628      	mov	r0, r5
 800c71e:	f7f3 fd89 	bl	8000234 <strlen>
 800c722:	2800      	cmp	r0, #0
 800c724:	f040 80bb 	bne.w	800c89e <rcl_node_init+0x1fe>
 800c728:	4d7c      	ldr	r5, [pc, #496]	@ (800c91c <rcl_node_init+0x27c>)
 800c72a:	a922      	add	r1, sp, #136	@ 0x88
 800c72c:	2200      	movs	r2, #0
 800c72e:	4628      	mov	r0, r5
 800c730:	f000 fcb2 	bl	800d098 <rmw_validate_namespace>
 800c734:	4681      	mov	r9, r0
 800c736:	2800      	cmp	r0, #0
 800c738:	f040 80aa 	bne.w	800c890 <rcl_node_init+0x1f0>
 800c73c:	4682      	mov	sl, r0
 800c73e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c740:	2800      	cmp	r0, #0
 800c742:	f040 80e0 	bne.w	800c906 <rcl_node_init+0x266>
 800c746:	f8d8 3000 	ldr.w	r3, [r8]
 800c74a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c74e:	2078      	movs	r0, #120	@ 0x78
 800c750:	4798      	blx	r3
 800c752:	4681      	mov	r9, r0
 800c754:	6060      	str	r0, [r4, #4]
 800c756:	2800      	cmp	r0, #0
 800c758:	f000 80ca 	beq.w	800c8f0 <rcl_node_init+0x250>
 800c75c:	2200      	movs	r2, #0
 800c75e:	2300      	movs	r3, #0
 800c760:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800c764:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800c768:	a808      	add	r0, sp, #32
 800c76a:	f000 f8df 	bl	800c92c <rcl_node_get_default_options>
 800c76e:	a908      	add	r1, sp, #32
 800c770:	4648      	mov	r0, r9
 800c772:	2268      	movs	r2, #104	@ 0x68
 800c774:	f003 faf9 	bl	800fd6a <memcpy>
 800c778:	6861      	ldr	r1, [r4, #4]
 800c77a:	6027      	str	r7, [r4, #0]
 800c77c:	4640      	mov	r0, r8
 800c77e:	f000 f8e3 	bl	800c948 <rcl_node_options_copy>
 800c782:	2800      	cmp	r0, #0
 800c784:	d158      	bne.n	800c838 <rcl_node_init+0x198>
 800c786:	4628      	mov	r0, r5
 800c788:	f7f3 fd54 	bl	8000234 <strlen>
 800c78c:	4428      	add	r0, r5
 800c78e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c792:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c796:	2b2f      	cmp	r3, #47	@ 0x2f
 800c798:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	bf0c      	ite	eq
 800c7a0:	4b5f      	ldreq	r3, [pc, #380]	@ (800c920 <rcl_node_init+0x280>)
 800c7a2:	4b60      	ldrne	r3, [pc, #384]	@ (800c924 <rcl_node_init+0x284>)
 800c7a4:	9302      	str	r3, [sp, #8]
 800c7a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c7b0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c7b4:	f000 fb3a 	bl	800ce2c <rcutils_format_string_limit>
 800c7b8:	6823      	ldr	r3, [r4, #0]
 800c7ba:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800c7be:	6818      	ldr	r0, [r3, #0]
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	3028      	adds	r0, #40	@ 0x28
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	6866      	ldr	r6, [r4, #4]
 800c7c8:	f7fc fada 	bl	8008d80 <rmw_create_node>
 800c7cc:	6863      	ldr	r3, [r4, #4]
 800c7ce:	66b0      	str	r0, [r6, #104]	@ 0x68
 800c7d0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d032      	beq.n	800c83c <rcl_node_init+0x19c>
 800c7d6:	f7fc fb67 	bl	8008ea8 <rmw_node_get_graph_guard_condition>
 800c7da:	4681      	mov	r9, r0
 800c7dc:	b360      	cbz	r0, 800c838 <rcl_node_init+0x198>
 800c7de:	f8d8 3000 	ldr.w	r3, [r8]
 800c7e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c7e6:	6866      	ldr	r6, [r4, #4]
 800c7e8:	2008      	movs	r0, #8
 800c7ea:	4798      	blx	r3
 800c7ec:	6863      	ldr	r3, [r4, #4]
 800c7ee:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800c7f0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800c7f4:	f1bb 0f00 	cmp.w	fp, #0
 800c7f8:	d020      	beq.n	800c83c <rcl_node_init+0x19c>
 800c7fa:	a806      	add	r0, sp, #24
 800c7fc:	f002 fd0e 	bl	800f21c <rcl_get_zero_initialized_guard_condition>
 800c800:	a806      	add	r0, sp, #24
 800c802:	c803      	ldmia	r0, {r0, r1}
 800c804:	6863      	ldr	r3, [r4, #4]
 800c806:	46c4      	mov	ip, r8
 800c808:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800c80c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c810:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c814:	ae23      	add	r6, sp, #140	@ 0x8c
 800c816:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c818:	f8dc 3000 	ldr.w	r3, [ip]
 800c81c:	6033      	str	r3, [r6, #0]
 800c81e:	ab28      	add	r3, sp, #160	@ 0xa0
 800c820:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c824:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c828:	4649      	mov	r1, r9
 800c82a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c82c:	463a      	mov	r2, r7
 800c82e:	4670      	mov	r0, lr
 800c830:	f002 fcfe 	bl	800f230 <rcl_guard_condition_init_from_rmw>
 800c834:	4681      	mov	r9, r0
 800c836:	b328      	cbz	r0, 800c884 <rcl_node_init+0x1e4>
 800c838:	6863      	ldr	r3, [r4, #4]
 800c83a:	b1f3      	cbz	r3, 800c87a <rcl_node_init+0x1da>
 800c83c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c83e:	b128      	cbz	r0, 800c84c <rcl_node_init+0x1ac>
 800c840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c844:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c848:	4798      	blx	r3
 800c84a:	6863      	ldr	r3, [r4, #4]
 800c84c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c84e:	b110      	cbz	r0, 800c856 <rcl_node_init+0x1b6>
 800c850:	f7fc faae 	bl	8008db0 <rmw_destroy_node>
 800c854:	6863      	ldr	r3, [r4, #4]
 800c856:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c858:	b148      	cbz	r0, 800c86e <rcl_node_init+0x1ce>
 800c85a:	f002 fd49 	bl	800f2f0 <rcl_guard_condition_fini>
 800c85e:	6863      	ldr	r3, [r4, #4]
 800c860:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c864:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c866:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c86a:	4798      	blx	r3
 800c86c:	6863      	ldr	r3, [r4, #4]
 800c86e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c872:	4618      	mov	r0, r3
 800c874:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c878:	4798      	blx	r3
 800c87a:	2300      	movs	r3, #0
 800c87c:	e9c4 3300 	strd	r3, r3, [r4]
 800c880:	f04f 0901 	mov.w	r9, #1
 800c884:	f1ba 0f00 	cmp.w	sl, #0
 800c888:	d125      	bne.n	800c8d6 <rcl_node_init+0x236>
 800c88a:	e001      	b.n	800c890 <rcl_node_init+0x1f0>
 800c88c:	f04f 090b 	mov.w	r9, #11
 800c890:	4648      	mov	r0, r9
 800c892:	b029      	add	sp, #164	@ 0xa4
 800c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c898:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c89c:	e7f8      	b.n	800c890 <rcl_node_init+0x1f0>
 800c89e:	782b      	ldrb	r3, [r5, #0]
 800c8a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8a2:	f43f af42 	beq.w	800c72a <rcl_node_init+0x8a>
 800c8a6:	9503      	str	r5, [sp, #12]
 800c8a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c928 <rcl_node_init+0x288>)
 800c8b0:	9302      	str	r3, [sp, #8]
 800c8b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8b6:	9301      	str	r3, [sp, #4]
 800c8b8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c8bc:	f000 fab6 	bl	800ce2c <rcutils_format_string_limit>
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	b340      	cbz	r0, 800c916 <rcl_node_init+0x276>
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	a922      	add	r1, sp, #136	@ 0x88
 800c8c8:	9222      	str	r2, [sp, #136]	@ 0x88
 800c8ca:	f000 fbe5 	bl	800d098 <rmw_validate_namespace>
 800c8ce:	4681      	mov	r9, r0
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	f43f af34 	beq.w	800c73e <rcl_node_init+0x9e>
 800c8d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c8de:	4628      	mov	r0, r5
 800c8e0:	4798      	blx	r3
 800c8e2:	e7d5      	b.n	800c890 <rcl_node_init+0x1f0>
 800c8e4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c8e8:	4648      	mov	r0, r9
 800c8ea:	b029      	add	sp, #164	@ 0xa4
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	f04f 090a 	mov.w	r9, #10
 800c8f4:	f1ba 0f00 	cmp.w	sl, #0
 800c8f8:	d1ed      	bne.n	800c8d6 <rcl_node_init+0x236>
 800c8fa:	e7c9      	b.n	800c890 <rcl_node_init+0x1f0>
 800c8fc:	f000 fc3c 	bl	800d178 <rmw_node_name_validation_result_string>
 800c900:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c904:	e7c4      	b.n	800c890 <rcl_node_init+0x1f0>
 800c906:	f000 fbd9 	bl	800d0bc <rmw_namespace_validation_result_string>
 800c90a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c90e:	f1ba 0f00 	cmp.w	sl, #0
 800c912:	d1e0      	bne.n	800c8d6 <rcl_node_init+0x236>
 800c914:	e7bc      	b.n	800c890 <rcl_node_init+0x1f0>
 800c916:	f04f 090a 	mov.w	r9, #10
 800c91a:	e7b9      	b.n	800c890 <rcl_node_init+0x1f0>
 800c91c:	08010c44 	.word	0x08010c44
 800c920:	08010e7c 	.word	0x08010e7c
 800c924:	08010c48 	.word	0x08010c48
 800c928:	08010e78 	.word	0x08010e78

0800c92c <rcl_node_get_default_options>:
 800c92c:	b510      	push	{r4, lr}
 800c92e:	2268      	movs	r2, #104	@ 0x68
 800c930:	4604      	mov	r4, r0
 800c932:	2100      	movs	r1, #0
 800c934:	f003 f97c 	bl	800fc30 <memset>
 800c938:	4620      	mov	r0, r4
 800c93a:	f7fb fecf 	bl	80086dc <rcutils_get_default_allocator>
 800c93e:	2301      	movs	r3, #1
 800c940:	7523      	strb	r3, [r4, #20]
 800c942:	4620      	mov	r0, r4
 800c944:	bd10      	pop	{r4, pc}
 800c946:	bf00      	nop

0800c948 <rcl_node_options_copy>:
 800c948:	b1d0      	cbz	r0, 800c980 <rcl_node_options_copy+0x38>
 800c94a:	b570      	push	{r4, r5, r6, lr}
 800c94c:	460c      	mov	r4, r1
 800c94e:	b1a9      	cbz	r1, 800c97c <rcl_node_options_copy+0x34>
 800c950:	4288      	cmp	r0, r1
 800c952:	4684      	mov	ip, r0
 800c954:	d012      	beq.n	800c97c <rcl_node_options_copy+0x34>
 800c956:	4605      	mov	r5, r0
 800c958:	8a86      	ldrh	r6, [r0, #20]
 800c95a:	468e      	mov	lr, r1
 800c95c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c95e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	f8ce 3000 	str.w	r3, [lr]
 800c968:	f10c 0118 	add.w	r1, ip, #24
 800c96c:	2250      	movs	r2, #80	@ 0x50
 800c96e:	82a6      	strh	r6, [r4, #20]
 800c970:	f104 0018 	add.w	r0, r4, #24
 800c974:	f003 f9f9 	bl	800fd6a <memcpy>
 800c978:	2000      	movs	r0, #0
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	200b      	movs	r0, #11
 800c97e:	bd70      	pop	{r4, r5, r6, pc}
 800c980:	200b      	movs	r0, #11
 800c982:	4770      	bx	lr

0800c984 <exact_match_lookup>:
 800c984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c986:	f102 0708 	add.w	r7, r2, #8
 800c98a:	460b      	mov	r3, r1
 800c98c:	4614      	mov	r4, r2
 800c98e:	4606      	mov	r6, r0
 800c990:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c994:	b085      	sub	sp, #20
 800c996:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c99a:	4618      	mov	r0, r3
 800c99c:	4919      	ldr	r1, [pc, #100]	@ (800ca04 <exact_match_lookup+0x80>)
 800c99e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c9a2:	f000 fa35 	bl	800ce10 <rcutils_join_path>
 800c9a6:	7833      	ldrb	r3, [r6, #0]
 800c9a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	d023      	beq.n	800c9f6 <exact_match_lookup+0x72>
 800c9ae:	f104 030c 	add.w	r3, r4, #12
 800c9b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c9b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c9ba:	1c70      	adds	r0, r6, #1
 800c9bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c9c0:	f000 fa2c 	bl	800ce1c <rcutils_to_native_path>
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800c9ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f000 fa1b 	bl	800ce10 <rcutils_join_path>
 800c9da:	6862      	ldr	r2, [r4, #4]
 800c9dc:	6921      	ldr	r1, [r4, #16]
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	461e      	mov	r6, r3
 800c9e4:	4790      	blx	r2
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	6863      	ldr	r3, [r4, #4]
 800c9ea:	6921      	ldr	r1, [r4, #16]
 800c9ec:	4798      	blx	r3
 800c9ee:	4635      	mov	r5, r6
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	b005      	add	sp, #20
 800c9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f6:	7873      	ldrb	r3, [r6, #1]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1d8      	bne.n	800c9ae <exact_match_lookup+0x2a>
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	b005      	add	sp, #20
 800ca00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca02:	bf00      	nop
 800ca04:	08010ec8 	.word	0x08010ec8

0800ca08 <rcl_get_secure_root>:
 800ca08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	b085      	sub	sp, #20
 800ca0e:	b168      	cbz	r0, 800ca2c <rcl_get_secure_root+0x24>
 800ca10:	4607      	mov	r7, r0
 800ca12:	4608      	mov	r0, r1
 800ca14:	460c      	mov	r4, r1
 800ca16:	f7fb fe6f 	bl	80086f8 <rcutils_allocator_is_valid>
 800ca1a:	b138      	cbz	r0, 800ca2c <rcl_get_secure_root+0x24>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	482d      	ldr	r0, [pc, #180]	@ (800cad4 <rcl_get_secure_root+0xcc>)
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	a903      	add	r1, sp, #12
 800ca24:	f000 f9da 	bl	800cddc <rcutils_get_env>
 800ca28:	4605      	mov	r5, r0
 800ca2a:	b120      	cbz	r0, 800ca36 <rcl_get_secure_root+0x2e>
 800ca2c:	2500      	movs	r5, #0
 800ca2e:	4628      	mov	r0, r5
 800ca30:	b005      	add	sp, #20
 800ca32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	781a      	ldrb	r2, [r3, #0]
 800ca3a:	2a00      	cmp	r2, #0
 800ca3c:	d0f6      	beq.n	800ca2c <rcl_get_secure_root+0x24>
 800ca3e:	f104 090c 	add.w	r9, r4, #12
 800ca42:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ca46:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ca50:	f000 fa52 	bl	800cef8 <rcutils_strdup>
 800ca54:	4680      	mov	r8, r0
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d0e8      	beq.n	800ca2c <rcl_get_secure_root+0x24>
 800ca5a:	481f      	ldr	r0, [pc, #124]	@ (800cad8 <rcl_get_secure_root+0xd0>)
 800ca5c:	9503      	str	r5, [sp, #12]
 800ca5e:	a903      	add	r1, sp, #12
 800ca60:	f000 f9bc 	bl	800cddc <rcutils_get_env>
 800ca64:	b160      	cbz	r0, 800ca80 <rcl_get_secure_root+0x78>
 800ca66:	2600      	movs	r6, #0
 800ca68:	6863      	ldr	r3, [r4, #4]
 800ca6a:	6921      	ldr	r1, [r4, #16]
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	4798      	blx	r3
 800ca70:	4640      	mov	r0, r8
 800ca72:	6863      	ldr	r3, [r4, #4]
 800ca74:	6921      	ldr	r1, [r4, #16]
 800ca76:	4798      	blx	r3
 800ca78:	4628      	mov	r0, r5
 800ca7a:	b005      	add	sp, #20
 800ca7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	781e      	ldrb	r6, [r3, #0]
 800ca84:	b1f6      	cbz	r6, 800cac4 <rcl_get_secure_root+0xbc>
 800ca86:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ca8a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ca94:	f000 fa30 	bl	800cef8 <rcutils_strdup>
 800ca98:	4606      	mov	r6, r0
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d0e3      	beq.n	800ca66 <rcl_get_secure_root+0x5e>
 800ca9e:	4622      	mov	r2, r4
 800caa0:	4641      	mov	r1, r8
 800caa2:	f7ff ff6f 	bl	800c984 <exact_match_lookup>
 800caa6:	4605      	mov	r5, r0
 800caa8:	2d00      	cmp	r5, #0
 800caaa:	d0dd      	beq.n	800ca68 <rcl_get_secure_root+0x60>
 800caac:	4628      	mov	r0, r5
 800caae:	f000 f9ad 	bl	800ce0c <rcutils_is_directory>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d1d7      	bne.n	800ca68 <rcl_get_secure_root+0x60>
 800cab8:	4628      	mov	r0, r5
 800caba:	6921      	ldr	r1, [r4, #16]
 800cabc:	461d      	mov	r5, r3
 800cabe:	6863      	ldr	r3, [r4, #4]
 800cac0:	4798      	blx	r3
 800cac2:	e7d1      	b.n	800ca68 <rcl_get_secure_root+0x60>
 800cac4:	4622      	mov	r2, r4
 800cac6:	4638      	mov	r0, r7
 800cac8:	4641      	mov	r1, r8
 800caca:	f7ff ff5b 	bl	800c984 <exact_match_lookup>
 800cace:	4605      	mov	r5, r0
 800cad0:	e7ea      	b.n	800caa8 <rcl_get_secure_root+0xa0>
 800cad2:	bf00      	nop
 800cad4:	08010ed4 	.word	0x08010ed4
 800cad8:	08010eec 	.word	0x08010eec

0800cadc <rcl_get_security_options_from_environment>:
 800cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	2300      	movs	r3, #0
 800cae4:	4606      	mov	r6, r0
 800cae6:	460f      	mov	r7, r1
 800cae8:	4820      	ldr	r0, [pc, #128]	@ (800cb6c <rcl_get_security_options_from_environment+0x90>)
 800caea:	9301      	str	r3, [sp, #4]
 800caec:	a901      	add	r1, sp, #4
 800caee:	4690      	mov	r8, r2
 800caf0:	f000 f974 	bl	800cddc <rcutils_get_env>
 800caf4:	b120      	cbz	r0, 800cb00 <rcl_get_security_options_from_environment+0x24>
 800caf6:	2501      	movs	r5, #1
 800caf8:	4628      	mov	r0, r5
 800cafa:	b002      	add	sp, #8
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb00:	491b      	ldr	r1, [pc, #108]	@ (800cb70 <rcl_get_security_options_from_environment+0x94>)
 800cb02:	4604      	mov	r4, r0
 800cb04:	9801      	ldr	r0, [sp, #4]
 800cb06:	f7f3 fb8b 	bl	8000220 <strcmp>
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	b9e8      	cbnz	r0, 800cb4a <rcl_get_security_options_from_environment+0x6e>
 800cb0e:	9001      	str	r0, [sp, #4]
 800cb10:	f1b8 0f00 	cmp.w	r8, #0
 800cb14:	d020      	beq.n	800cb58 <rcl_get_security_options_from_environment+0x7c>
 800cb16:	4817      	ldr	r0, [pc, #92]	@ (800cb74 <rcl_get_security_options_from_environment+0x98>)
 800cb18:	a901      	add	r1, sp, #4
 800cb1a:	f000 f95f 	bl	800cddc <rcutils_get_env>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d1e9      	bne.n	800caf6 <rcl_get_security_options_from_environment+0x1a>
 800cb22:	4915      	ldr	r1, [pc, #84]	@ (800cb78 <rcl_get_security_options_from_environment+0x9c>)
 800cb24:	9801      	ldr	r0, [sp, #4]
 800cb26:	f7f3 fb7b 	bl	8000220 <strcmp>
 800cb2a:	fab0 f080 	clz	r0, r0
 800cb2e:	0940      	lsrs	r0, r0, #5
 800cb30:	f888 0000 	strb.w	r0, [r8]
 800cb34:	4639      	mov	r1, r7
 800cb36:	4630      	mov	r0, r6
 800cb38:	f7ff ff66 	bl	800ca08 <rcl_get_secure_root>
 800cb3c:	b170      	cbz	r0, 800cb5c <rcl_get_security_options_from_environment+0x80>
 800cb3e:	f8c8 0004 	str.w	r0, [r8, #4]
 800cb42:	4628      	mov	r0, r5
 800cb44:	b002      	add	sp, #8
 800cb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb4a:	4625      	mov	r5, r4
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f888 4000 	strb.w	r4, [r8]
 800cb52:	b002      	add	sp, #8
 800cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb58:	250b      	movs	r5, #11
 800cb5a:	e7cd      	b.n	800caf8 <rcl_get_security_options_from_environment+0x1c>
 800cb5c:	f898 5000 	ldrb.w	r5, [r8]
 800cb60:	f1a5 0501 	sub.w	r5, r5, #1
 800cb64:	fab5 f585 	clz	r5, r5
 800cb68:	096d      	lsrs	r5, r5, #5
 800cb6a:	e7c5      	b.n	800caf8 <rcl_get_security_options_from_environment+0x1c>
 800cb6c:	08010e8c 	.word	0x08010e8c
 800cb70:	08010ea0 	.word	0x08010ea0
 800cb74:	08010ea8 	.word	0x08010ea8
 800cb78:	08010ec0 	.word	0x08010ec0

0800cb7c <rcl_get_system_time>:
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	f000 b9dd 	b.w	800cf3c <rcutils_system_time_now>
 800cb82:	bf00      	nop

0800cb84 <rcl_get_steady_time>:
 800cb84:	4608      	mov	r0, r1
 800cb86:	f000 ba01 	b.w	800cf8c <rcutils_steady_time_now>
 800cb8a:	bf00      	nop

0800cb8c <rcl_get_ros_time>:
 800cb8c:	7a03      	ldrb	r3, [r0, #8]
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	460c      	mov	r4, r1
 800cb92:	b133      	cbz	r3, 800cba2 <rcl_get_ros_time+0x16>
 800cb94:	2105      	movs	r1, #5
 800cb96:	f000 f8eb 	bl	800cd70 <__atomic_load_8>
 800cb9a:	e9c4 0100 	strd	r0, r1, [r4]
 800cb9e:	2000      	movs	r0, #0
 800cba0:	bd10      	pop	{r4, pc}
 800cba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba6:	4608      	mov	r0, r1
 800cba8:	f000 b9c8 	b.w	800cf3c <rcutils_system_time_now>

0800cbac <rcl_clock_init>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	4605      	mov	r5, r0
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	4614      	mov	r4, r2
 800cbb4:	460e      	mov	r6, r1
 800cbb6:	f7fb fd9f 	bl	80086f8 <rcutils_allocator_is_valid>
 800cbba:	b128      	cbz	r0, 800cbc8 <rcl_clock_init+0x1c>
 800cbbc:	2d03      	cmp	r5, #3
 800cbbe:	d803      	bhi.n	800cbc8 <rcl_clock_init+0x1c>
 800cbc0:	e8df f005 	tbb	[pc, r5]
 800cbc4:	06532e1d 	.word	0x06532e1d
 800cbc8:	f04f 0c0b 	mov.w	ip, #11
 800cbcc:	4660      	mov	r0, ip
 800cbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbd0:	2e00      	cmp	r6, #0
 800cbd2:	d0f9      	beq.n	800cbc8 <rcl_clock_init+0x1c>
 800cbd4:	2c00      	cmp	r4, #0
 800cbd6:	d0f7      	beq.n	800cbc8 <rcl_clock_init+0x1c>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cbde:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800cc94 <rcl_clock_init+0xe8>
 800cbe2:	6133      	str	r3, [r6, #16]
 800cbe4:	f106 0514 	add.w	r5, r6, #20
 800cbe8:	469c      	mov	ip, r3
 800cbea:	2703      	movs	r7, #3
 800cbec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	602b      	str	r3, [r5, #0]
 800cbf4:	7037      	strb	r7, [r6, #0]
 800cbf6:	f8c6 e00c 	str.w	lr, [r6, #12]
 800cbfa:	4660      	mov	r0, ip
 800cbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbfe:	2e00      	cmp	r6, #0
 800cc00:	d0e2      	beq.n	800cbc8 <rcl_clock_init+0x1c>
 800cc02:	2300      	movs	r3, #0
 800cc04:	7033      	strb	r3, [r6, #0]
 800cc06:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cc0a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800cc0e:	469c      	mov	ip, r3
 800cc10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc12:	f106 0514 	add.w	r5, r6, #20
 800cc16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	602b      	str	r3, [r5, #0]
 800cc1c:	4660      	mov	r0, ip
 800cc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc20:	2e00      	cmp	r6, #0
 800cc22:	d0d1      	beq.n	800cbc8 <rcl_clock_init+0x1c>
 800cc24:	2c00      	cmp	r4, #0
 800cc26:	d0cf      	beq.n	800cbc8 <rcl_clock_init+0x1c>
 800cc28:	2700      	movs	r7, #0
 800cc2a:	7037      	strb	r7, [r6, #0]
 800cc2c:	46a4      	mov	ip, r4
 800cc2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc32:	f106 0514 	add.w	r5, r6, #20
 800cc36:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800cc3a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800cc3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc40:	f8dc 3000 	ldr.w	r3, [ip]
 800cc44:	602b      	str	r3, [r5, #0]
 800cc46:	6921      	ldr	r1, [r4, #16]
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	2010      	movs	r0, #16
 800cc4c:	4798      	blx	r3
 800cc4e:	6130      	str	r0, [r6, #16]
 800cc50:	b1d0      	cbz	r0, 800cc88 <rcl_clock_init+0xdc>
 800cc52:	2200      	movs	r2, #0
 800cc54:	2300      	movs	r3, #0
 800cc56:	e9c0 2300 	strd	r2, r3, [r0]
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	7207      	strb	r7, [r0, #8]
 800cc5e:	4a0c      	ldr	r2, [pc, #48]	@ (800cc90 <rcl_clock_init+0xe4>)
 800cc60:	7033      	strb	r3, [r6, #0]
 800cc62:	46bc      	mov	ip, r7
 800cc64:	60f2      	str	r2, [r6, #12]
 800cc66:	4660      	mov	r0, ip
 800cc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d0ac      	beq.n	800cbc8 <rcl_clock_init+0x1c>
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d0aa      	beq.n	800cbc8 <rcl_clock_init+0x1c>
 800cc72:	2300      	movs	r3, #0
 800cc74:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cc78:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800cc98 <rcl_clock_init+0xec>
 800cc7c:	6133      	str	r3, [r6, #16]
 800cc7e:	f106 0514 	add.w	r5, r6, #20
 800cc82:	469c      	mov	ip, r3
 800cc84:	2702      	movs	r7, #2
 800cc86:	e7b1      	b.n	800cbec <rcl_clock_init+0x40>
 800cc88:	f04f 0c0a 	mov.w	ip, #10
 800cc8c:	e79e      	b.n	800cbcc <rcl_clock_init+0x20>
 800cc8e:	bf00      	nop
 800cc90:	0800cb8d 	.word	0x0800cb8d
 800cc94:	0800cb85 	.word	0x0800cb85
 800cc98:	0800cb7d 	.word	0x0800cb7d

0800cc9c <rcl_validate_enclave_name_with_size>:
 800cc9c:	b378      	cbz	r0, 800ccfe <rcl_validate_enclave_name_with_size+0x62>
 800cc9e:	b570      	push	{r4, r5, r6, lr}
 800cca0:	4615      	mov	r5, r2
 800cca2:	b0c2      	sub	sp, #264	@ 0x108
 800cca4:	b302      	cbz	r2, 800cce8 <rcl_validate_enclave_name_with_size+0x4c>
 800cca6:	461e      	mov	r6, r3
 800cca8:	466a      	mov	r2, sp
 800ccaa:	ab01      	add	r3, sp, #4
 800ccac:	460c      	mov	r4, r1
 800ccae:	f000 f9a5 	bl	800cffc <rmw_validate_namespace_with_size>
 800ccb2:	4684      	mov	ip, r0
 800ccb4:	b9e8      	cbnz	r0, 800ccf2 <rcl_validate_enclave_name_with_size+0x56>
 800ccb6:	9b00      	ldr	r3, [sp, #0]
 800ccb8:	b923      	cbnz	r3, 800ccc4 <rcl_validate_enclave_name_with_size+0x28>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	4660      	mov	r0, ip
 800ccc0:	b042      	add	sp, #264	@ 0x108
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	2b07      	cmp	r3, #7
 800ccc6:	d007      	beq.n	800ccd8 <rcl_validate_enclave_name_with_size+0x3c>
 800ccc8:	1e5a      	subs	r2, r3, #1
 800ccca:	2a05      	cmp	r2, #5
 800cccc:	d833      	bhi.n	800cd36 <rcl_validate_enclave_name_with_size+0x9a>
 800ccce:	e8df f002 	tbb	[pc, r2]
 800ccd2:	2c2f      	.short	0x2c2f
 800ccd4:	1a232629 	.word	0x1a232629
 800ccd8:	2cff      	cmp	r4, #255	@ 0xff
 800ccda:	d9ee      	bls.n	800ccba <rcl_validate_enclave_name_with_size+0x1e>
 800ccdc:	602b      	str	r3, [r5, #0]
 800ccde:	2e00      	cmp	r6, #0
 800cce0:	d0ed      	beq.n	800ccbe <rcl_validate_enclave_name_with_size+0x22>
 800cce2:	23fe      	movs	r3, #254	@ 0xfe
 800cce4:	6033      	str	r3, [r6, #0]
 800cce6:	e7ea      	b.n	800ccbe <rcl_validate_enclave_name_with_size+0x22>
 800cce8:	f04f 0c0b 	mov.w	ip, #11
 800ccec:	4660      	mov	r0, ip
 800ccee:	b042      	add	sp, #264	@ 0x108
 800ccf0:	bd70      	pop	{r4, r5, r6, pc}
 800ccf2:	f7ff fb21 	bl	800c338 <rcl_convert_rmw_ret_to_rcl_ret>
 800ccf6:	4684      	mov	ip, r0
 800ccf8:	4660      	mov	r0, ip
 800ccfa:	b042      	add	sp, #264	@ 0x108
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	f04f 0c0b 	mov.w	ip, #11
 800cd02:	4660      	mov	r0, ip
 800cd04:	4770      	bx	lr
 800cd06:	2306      	movs	r3, #6
 800cd08:	602b      	str	r3, [r5, #0]
 800cd0a:	2e00      	cmp	r6, #0
 800cd0c:	d0d7      	beq.n	800ccbe <rcl_validate_enclave_name_with_size+0x22>
 800cd0e:	9b01      	ldr	r3, [sp, #4]
 800cd10:	6033      	str	r3, [r6, #0]
 800cd12:	4660      	mov	r0, ip
 800cd14:	b042      	add	sp, #264	@ 0x108
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	2305      	movs	r3, #5
 800cd1a:	602b      	str	r3, [r5, #0]
 800cd1c:	e7f5      	b.n	800cd0a <rcl_validate_enclave_name_with_size+0x6e>
 800cd1e:	2304      	movs	r3, #4
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	e7f2      	b.n	800cd0a <rcl_validate_enclave_name_with_size+0x6e>
 800cd24:	2303      	movs	r3, #3
 800cd26:	602b      	str	r3, [r5, #0]
 800cd28:	e7ef      	b.n	800cd0a <rcl_validate_enclave_name_with_size+0x6e>
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	602b      	str	r3, [r5, #0]
 800cd2e:	e7ec      	b.n	800cd0a <rcl_validate_enclave_name_with_size+0x6e>
 800cd30:	2301      	movs	r3, #1
 800cd32:	602b      	str	r3, [r5, #0]
 800cd34:	e7e9      	b.n	800cd0a <rcl_validate_enclave_name_with_size+0x6e>
 800cd36:	4a04      	ldr	r2, [pc, #16]	@ (800cd48 <rcl_validate_enclave_name_with_size+0xac>)
 800cd38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cd3c:	a802      	add	r0, sp, #8
 800cd3e:	f000 f8af 	bl	800cea0 <rcutils_snprintf>
 800cd42:	f04f 0c01 	mov.w	ip, #1
 800cd46:	e7ba      	b.n	800ccbe <rcl_validate_enclave_name_with_size+0x22>
 800cd48:	08010f0c 	.word	0x08010f0c

0800cd4c <rcl_validate_enclave_name>:
 800cd4c:	b168      	cbz	r0, 800cd6a <rcl_validate_enclave_name+0x1e>
 800cd4e:	b570      	push	{r4, r5, r6, lr}
 800cd50:	460d      	mov	r5, r1
 800cd52:	4616      	mov	r6, r2
 800cd54:	4604      	mov	r4, r0
 800cd56:	f7f3 fa6d 	bl	8000234 <strlen>
 800cd5a:	4633      	mov	r3, r6
 800cd5c:	4601      	mov	r1, r0
 800cd5e:	462a      	mov	r2, r5
 800cd60:	4620      	mov	r0, r4
 800cd62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd66:	f7ff bf99 	b.w	800cc9c <rcl_validate_enclave_name_with_size>
 800cd6a:	200b      	movs	r0, #11
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop

0800cd70 <__atomic_load_8>:
 800cd70:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800cd74:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800cd78:	4a15      	ldr	r2, [pc, #84]	@ (800cdd0 <__atomic_load_8+0x60>)
 800cd7a:	4b16      	ldr	r3, [pc, #88]	@ (800cdd4 <__atomic_load_8+0x64>)
 800cd7c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800cd80:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800cd84:	fb02 f101 	mul.w	r1, r2, r1
 800cd88:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800cd8c:	fba3 2301 	umull	r2, r3, r3, r1
 800cd90:	091b      	lsrs	r3, r3, #4
 800cd92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cd96:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800cd9a:	b4d0      	push	{r4, r6, r7}
 800cd9c:	4c0e      	ldr	r4, [pc, #56]	@ (800cdd8 <__atomic_load_8+0x68>)
 800cd9e:	1ac9      	subs	r1, r1, r3
 800cda0:	1862      	adds	r2, r4, r1
 800cda2:	f04f 0c01 	mov.w	ip, #1
 800cda6:	e8d2 3f4f 	ldrexb	r3, [r2]
 800cdaa:	e8c2 cf46 	strexb	r6, ip, [r2]
 800cdae:	2e00      	cmp	r6, #0
 800cdb0:	d1f9      	bne.n	800cda6 <__atomic_load_8+0x36>
 800cdb2:	f3bf 8f5b 	dmb	ish
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1f4      	bne.n	800cda6 <__atomic_load_8+0x36>
 800cdbc:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cdc0:	f3bf 8f5b 	dmb	ish
 800cdc4:	5463      	strb	r3, [r4, r1]
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	4639      	mov	r1, r7
 800cdca:	bcd0      	pop	{r4, r6, r7}
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	27d4eb2d 	.word	0x27d4eb2d
 800cdd4:	b21642c9 	.word	0xb21642c9
 800cdd8:	2000a924 	.word	0x2000a924

0800cddc <rcutils_get_env>:
 800cddc:	b168      	cbz	r0, 800cdfa <rcutils_get_env+0x1e>
 800cdde:	b510      	push	{r4, lr}
 800cde0:	460c      	mov	r4, r1
 800cde2:	b129      	cbz	r1, 800cdf0 <rcutils_get_env+0x14>
 800cde4:	f002 fb80 	bl	800f4e8 <getenv>
 800cde8:	b120      	cbz	r0, 800cdf4 <rcutils_get_env+0x18>
 800cdea:	6020      	str	r0, [r4, #0]
 800cdec:	2000      	movs	r0, #0
 800cdee:	bd10      	pop	{r4, pc}
 800cdf0:	4803      	ldr	r0, [pc, #12]	@ (800ce00 <rcutils_get_env+0x24>)
 800cdf2:	bd10      	pop	{r4, pc}
 800cdf4:	4b03      	ldr	r3, [pc, #12]	@ (800ce04 <rcutils_get_env+0x28>)
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	bd10      	pop	{r4, pc}
 800cdfa:	4803      	ldr	r0, [pc, #12]	@ (800ce08 <rcutils_get_env+0x2c>)
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	08010f88 	.word	0x08010f88
 800ce04:	080110ac 	.word	0x080110ac
 800ce08:	08010f6c 	.word	0x08010f6c

0800ce0c <rcutils_is_directory>:
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	4770      	bx	lr

0800ce10 <rcutils_join_path>:
 800ce10:	b082      	sub	sp, #8
 800ce12:	e88d 000c 	stmia.w	sp, {r2, r3}
 800ce16:	2000      	movs	r0, #0
 800ce18:	b002      	add	sp, #8
 800ce1a:	4770      	bx	lr

0800ce1c <rcutils_to_native_path>:
 800ce1c:	b084      	sub	sp, #16
 800ce1e:	a801      	add	r0, sp, #4
 800ce20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ce24:	b004      	add	sp, #16
 800ce26:	2000      	movs	r0, #0
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop

0800ce2c <rcutils_format_string_limit>:
 800ce2c:	b40f      	push	{r0, r1, r2, r3}
 800ce2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce30:	b083      	sub	sp, #12
 800ce32:	ac08      	add	r4, sp, #32
 800ce34:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ce36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ce3a:	b34e      	cbz	r6, 800ce90 <rcutils_format_string_limit+0x64>
 800ce3c:	a808      	add	r0, sp, #32
 800ce3e:	f7fb fc5b 	bl	80086f8 <rcutils_allocator_is_valid>
 800ce42:	b328      	cbz	r0, 800ce90 <rcutils_format_string_limit+0x64>
 800ce44:	2100      	movs	r1, #0
 800ce46:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ce48:	4632      	mov	r2, r6
 800ce4a:	4608      	mov	r0, r1
 800ce4c:	e9cd 3300 	strd	r3, r3, [sp]
 800ce50:	f000 f840 	bl	800ced4 <rcutils_vsnprintf>
 800ce54:	1c43      	adds	r3, r0, #1
 800ce56:	4605      	mov	r5, r0
 800ce58:	d01a      	beq.n	800ce90 <rcutils_format_string_limit+0x64>
 800ce5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce5c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce5e:	1c47      	adds	r7, r0, #1
 800ce60:	429f      	cmp	r7, r3
 800ce62:	bf84      	itt	hi
 800ce64:	461f      	movhi	r7, r3
 800ce66:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	9b08      	ldr	r3, [sp, #32]
 800ce6e:	4798      	blx	r3
 800ce70:	4604      	mov	r4, r0
 800ce72:	b168      	cbz	r0, 800ce90 <rcutils_format_string_limit+0x64>
 800ce74:	9b01      	ldr	r3, [sp, #4]
 800ce76:	4632      	mov	r2, r6
 800ce78:	4639      	mov	r1, r7
 800ce7a:	f000 f82b 	bl	800ced4 <rcutils_vsnprintf>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	db02      	blt.n	800ce88 <rcutils_format_string_limit+0x5c>
 800ce82:	2300      	movs	r3, #0
 800ce84:	5563      	strb	r3, [r4, r5]
 800ce86:	e004      	b.n	800ce92 <rcutils_format_string_limit+0x66>
 800ce88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	4798      	blx	r3
 800ce90:	2400      	movs	r4, #0
 800ce92:	4620      	mov	r0, r4
 800ce94:	b003      	add	sp, #12
 800ce96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce9a:	b004      	add	sp, #16
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop

0800cea0 <rcutils_snprintf>:
 800cea0:	b40c      	push	{r2, r3}
 800cea2:	b530      	push	{r4, r5, lr}
 800cea4:	b083      	sub	sp, #12
 800cea6:	ab06      	add	r3, sp, #24
 800cea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	b152      	cbz	r2, 800cec6 <rcutils_snprintf+0x26>
 800ceb0:	b138      	cbz	r0, 800cec2 <rcutils_snprintf+0x22>
 800ceb2:	b141      	cbz	r1, 800cec6 <rcutils_snprintf+0x26>
 800ceb4:	f002 feae 	bl	800fc14 <vsniprintf>
 800ceb8:	b003      	add	sp, #12
 800ceba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cebe:	b002      	add	sp, #8
 800cec0:	4770      	bx	lr
 800cec2:	2900      	cmp	r1, #0
 800cec4:	d0f6      	beq.n	800ceb4 <rcutils_snprintf+0x14>
 800cec6:	f002 ff23 	bl	800fd10 <__errno>
 800ceca:	2316      	movs	r3, #22
 800cecc:	6003      	str	r3, [r0, #0]
 800cece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ced2:	e7f1      	b.n	800ceb8 <rcutils_snprintf+0x18>

0800ced4 <rcutils_vsnprintf>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	b13a      	cbz	r2, 800cee8 <rcutils_vsnprintf+0x14>
 800ced8:	b120      	cbz	r0, 800cee4 <rcutils_vsnprintf+0x10>
 800ceda:	b129      	cbz	r1, 800cee8 <rcutils_vsnprintf+0x14>
 800cedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cee0:	f002 be98 	b.w	800fc14 <vsniprintf>
 800cee4:	2900      	cmp	r1, #0
 800cee6:	d0f9      	beq.n	800cedc <rcutils_vsnprintf+0x8>
 800cee8:	f002 ff12 	bl	800fd10 <__errno>
 800ceec:	2316      	movs	r3, #22
 800ceee:	6003      	str	r3, [r0, #0]
 800cef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cef4:	bd70      	pop	{r4, r5, r6, pc}
 800cef6:	bf00      	nop

0800cef8 <rcutils_strdup>:
 800cef8:	b084      	sub	sp, #16
 800cefa:	b570      	push	{r4, r5, r6, lr}
 800cefc:	b082      	sub	sp, #8
 800cefe:	ac07      	add	r4, sp, #28
 800cf00:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800cf04:	4605      	mov	r5, r0
 800cf06:	b1b0      	cbz	r0, 800cf36 <rcutils_strdup+0x3e>
 800cf08:	f7f3 f994 	bl	8000234 <strlen>
 800cf0c:	1c42      	adds	r2, r0, #1
 800cf0e:	9b07      	ldr	r3, [sp, #28]
 800cf10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf12:	9201      	str	r2, [sp, #4]
 800cf14:	4606      	mov	r6, r0
 800cf16:	4610      	mov	r0, r2
 800cf18:	4798      	blx	r3
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	b128      	cbz	r0, 800cf2a <rcutils_strdup+0x32>
 800cf1e:	9a01      	ldr	r2, [sp, #4]
 800cf20:	4629      	mov	r1, r5
 800cf22:	f002 ff22 	bl	800fd6a <memcpy>
 800cf26:	2300      	movs	r3, #0
 800cf28:	55a3      	strb	r3, [r4, r6]
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	b002      	add	sp, #8
 800cf2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf32:	b004      	add	sp, #16
 800cf34:	4770      	bx	lr
 800cf36:	4604      	mov	r4, r0
 800cf38:	e7f7      	b.n	800cf2a <rcutils_strdup+0x32>
 800cf3a:	bf00      	nop

0800cf3c <rcutils_system_time_now>:
 800cf3c:	b308      	cbz	r0, 800cf82 <rcutils_system_time_now+0x46>
 800cf3e:	b570      	push	{r4, r5, r6, lr}
 800cf40:	b084      	sub	sp, #16
 800cf42:	4604      	mov	r4, r0
 800cf44:	4669      	mov	r1, sp
 800cf46:	2001      	movs	r0, #1
 800cf48:	f7f4 f92a 	bl	80011a0 <clock_gettime>
 800cf4c:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf50:	2d00      	cmp	r5, #0
 800cf52:	db13      	blt.n	800cf7c <rcutils_system_time_now+0x40>
 800cf54:	9902      	ldr	r1, [sp, #8]
 800cf56:	2900      	cmp	r1, #0
 800cf58:	db0d      	blt.n	800cf76 <rcutils_system_time_now+0x3a>
 800cf5a:	4e0b      	ldr	r6, [pc, #44]	@ (800cf88 <rcutils_system_time_now+0x4c>)
 800cf5c:	fba3 3206 	umull	r3, r2, r3, r6
 800cf60:	185b      	adds	r3, r3, r1
 800cf62:	fb06 2205 	mla	r2, r6, r5, r2
 800cf66:	f04f 0000 	mov.w	r0, #0
 800cf6a:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf6e:	e9c4 3200 	strd	r3, r2, [r4]
 800cf72:	b004      	add	sp, #16
 800cf74:	bd70      	pop	{r4, r5, r6, pc}
 800cf76:	ea53 0205 	orrs.w	r2, r3, r5
 800cf7a:	d1ee      	bne.n	800cf5a <rcutils_system_time_now+0x1e>
 800cf7c:	2002      	movs	r0, #2
 800cf7e:	b004      	add	sp, #16
 800cf80:	bd70      	pop	{r4, r5, r6, pc}
 800cf82:	200b      	movs	r0, #11
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	3b9aca00 	.word	0x3b9aca00

0800cf8c <rcutils_steady_time_now>:
 800cf8c:	b308      	cbz	r0, 800cfd2 <rcutils_steady_time_now+0x46>
 800cf8e:	b570      	push	{r4, r5, r6, lr}
 800cf90:	b084      	sub	sp, #16
 800cf92:	4604      	mov	r4, r0
 800cf94:	4669      	mov	r1, sp
 800cf96:	2000      	movs	r0, #0
 800cf98:	f7f4 f902 	bl	80011a0 <clock_gettime>
 800cf9c:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cfa0:	2d00      	cmp	r5, #0
 800cfa2:	db13      	blt.n	800cfcc <rcutils_steady_time_now+0x40>
 800cfa4:	9902      	ldr	r1, [sp, #8]
 800cfa6:	2900      	cmp	r1, #0
 800cfa8:	db0d      	blt.n	800cfc6 <rcutils_steady_time_now+0x3a>
 800cfaa:	4e0b      	ldr	r6, [pc, #44]	@ (800cfd8 <rcutils_steady_time_now+0x4c>)
 800cfac:	fba3 3206 	umull	r3, r2, r3, r6
 800cfb0:	185b      	adds	r3, r3, r1
 800cfb2:	fb06 2205 	mla	r2, r6, r5, r2
 800cfb6:	f04f 0000 	mov.w	r0, #0
 800cfba:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cfbe:	e9c4 3200 	strd	r3, r2, [r4]
 800cfc2:	b004      	add	sp, #16
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
 800cfc6:	ea53 0205 	orrs.w	r2, r3, r5
 800cfca:	d1ee      	bne.n	800cfaa <rcutils_steady_time_now+0x1e>
 800cfcc:	2002      	movs	r0, #2
 800cfce:	b004      	add	sp, #16
 800cfd0:	bd70      	pop	{r4, r5, r6, pc}
 800cfd2:	200b      	movs	r0, #11
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	3b9aca00 	.word	0x3b9aca00

0800cfdc <rmw_get_zero_initialized_context>:
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	4604      	mov	r4, r0
 800cfe0:	3010      	adds	r0, #16
 800cfe2:	f7fb fbc9 	bl	8008778 <rmw_get_zero_initialized_init_options>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2000      	movs	r0, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	e9c4 0100 	strd	r0, r1, [r4]
 800cff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800cff4:	60a3      	str	r3, [r4, #8]
 800cff6:	4620      	mov	r0, r4
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	bf00      	nop

0800cffc <rmw_validate_namespace_with_size>:
 800cffc:	b340      	cbz	r0, 800d050 <rmw_validate_namespace_with_size+0x54>
 800cffe:	b570      	push	{r4, r5, r6, lr}
 800d000:	4614      	mov	r4, r2
 800d002:	b0c2      	sub	sp, #264	@ 0x108
 800d004:	b332      	cbz	r2, 800d054 <rmw_validate_namespace_with_size+0x58>
 800d006:	2901      	cmp	r1, #1
 800d008:	460d      	mov	r5, r1
 800d00a:	461e      	mov	r6, r3
 800d00c:	d102      	bne.n	800d014 <rmw_validate_namespace_with_size+0x18>
 800d00e:	7803      	ldrb	r3, [r0, #0]
 800d010:	2b2f      	cmp	r3, #47	@ 0x2f
 800d012:	d012      	beq.n	800d03a <rmw_validate_namespace_with_size+0x3e>
 800d014:	aa01      	add	r2, sp, #4
 800d016:	4669      	mov	r1, sp
 800d018:	f002 f9ac 	bl	800f374 <rmw_validate_full_topic_name>
 800d01c:	b978      	cbnz	r0, 800d03e <rmw_validate_namespace_with_size+0x42>
 800d01e:	9b00      	ldr	r3, [sp, #0]
 800d020:	b14b      	cbz	r3, 800d036 <rmw_validate_namespace_with_size+0x3a>
 800d022:	2b07      	cmp	r3, #7
 800d024:	d007      	beq.n	800d036 <rmw_validate_namespace_with_size+0x3a>
 800d026:	1e5a      	subs	r2, r3, #1
 800d028:	2a05      	cmp	r2, #5
 800d02a:	d82b      	bhi.n	800d084 <rmw_validate_namespace_with_size+0x88>
 800d02c:	e8df f002 	tbb	[pc, r2]
 800d030:	1e212427 	.word	0x1e212427
 800d034:	141b      	.short	0x141b
 800d036:	2df5      	cmp	r5, #245	@ 0xf5
 800d038:	d803      	bhi.n	800d042 <rmw_validate_namespace_with_size+0x46>
 800d03a:	2000      	movs	r0, #0
 800d03c:	6020      	str	r0, [r4, #0]
 800d03e:	b042      	add	sp, #264	@ 0x108
 800d040:	bd70      	pop	{r4, r5, r6, pc}
 800d042:	2307      	movs	r3, #7
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	2e00      	cmp	r6, #0
 800d048:	d0f9      	beq.n	800d03e <rmw_validate_namespace_with_size+0x42>
 800d04a:	23f4      	movs	r3, #244	@ 0xf4
 800d04c:	6033      	str	r3, [r6, #0]
 800d04e:	e7f6      	b.n	800d03e <rmw_validate_namespace_with_size+0x42>
 800d050:	200b      	movs	r0, #11
 800d052:	4770      	bx	lr
 800d054:	200b      	movs	r0, #11
 800d056:	e7f2      	b.n	800d03e <rmw_validate_namespace_with_size+0x42>
 800d058:	2306      	movs	r3, #6
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	2e00      	cmp	r6, #0
 800d05e:	d0ee      	beq.n	800d03e <rmw_validate_namespace_with_size+0x42>
 800d060:	9b01      	ldr	r3, [sp, #4]
 800d062:	6033      	str	r3, [r6, #0]
 800d064:	e7eb      	b.n	800d03e <rmw_validate_namespace_with_size+0x42>
 800d066:	2305      	movs	r3, #5
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	e7f7      	b.n	800d05c <rmw_validate_namespace_with_size+0x60>
 800d06c:	2304      	movs	r3, #4
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	e7f4      	b.n	800d05c <rmw_validate_namespace_with_size+0x60>
 800d072:	2303      	movs	r3, #3
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	e7f1      	b.n	800d05c <rmw_validate_namespace_with_size+0x60>
 800d078:	2302      	movs	r3, #2
 800d07a:	6023      	str	r3, [r4, #0]
 800d07c:	e7ee      	b.n	800d05c <rmw_validate_namespace_with_size+0x60>
 800d07e:	2301      	movs	r3, #1
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	e7eb      	b.n	800d05c <rmw_validate_namespace_with_size+0x60>
 800d084:	4a03      	ldr	r2, [pc, #12]	@ (800d094 <rmw_validate_namespace_with_size+0x98>)
 800d086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d08a:	a802      	add	r0, sp, #8
 800d08c:	f7ff ff08 	bl	800cea0 <rcutils_snprintf>
 800d090:	2001      	movs	r0, #1
 800d092:	e7d4      	b.n	800d03e <rmw_validate_namespace_with_size+0x42>
 800d094:	08010fa4 	.word	0x08010fa4

0800d098 <rmw_validate_namespace>:
 800d098:	b168      	cbz	r0, 800d0b6 <rmw_validate_namespace+0x1e>
 800d09a:	b570      	push	{r4, r5, r6, lr}
 800d09c:	460d      	mov	r5, r1
 800d09e:	4616      	mov	r6, r2
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	f7f3 f8c7 	bl	8000234 <strlen>
 800d0a6:	4633      	mov	r3, r6
 800d0a8:	4601      	mov	r1, r0
 800d0aa:	462a      	mov	r2, r5
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0b2:	f7ff bfa3 	b.w	800cffc <rmw_validate_namespace_with_size>
 800d0b6:	200b      	movs	r0, #11
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop

0800d0bc <rmw_namespace_validation_result_string>:
 800d0bc:	2807      	cmp	r0, #7
 800d0be:	bf9a      	itte	ls
 800d0c0:	4b02      	ldrls	r3, [pc, #8]	@ (800d0cc <rmw_namespace_validation_result_string+0x10>)
 800d0c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d0c6:	4802      	ldrhi	r0, [pc, #8]	@ (800d0d0 <rmw_namespace_validation_result_string+0x14>)
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	0801119c 	.word	0x0801119c
 800d0d0:	08010ff4 	.word	0x08010ff4

0800d0d4 <rmw_validate_node_name>:
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d03b      	beq.n	800d150 <rmw_validate_node_name+0x7c>
 800d0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0dc:	460d      	mov	r5, r1
 800d0de:	2900      	cmp	r1, #0
 800d0e0:	d038      	beq.n	800d154 <rmw_validate_node_name+0x80>
 800d0e2:	4616      	mov	r6, r2
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	f7f3 f8a5 	bl	8000234 <strlen>
 800d0ea:	b1e0      	cbz	r0, 800d126 <rmw_validate_node_name+0x52>
 800d0ec:	1e63      	subs	r3, r4, #1
 800d0ee:	eb03 0800 	add.w	r8, r3, r0
 800d0f2:	f1c4 0101 	rsb	r1, r4, #1
 800d0f6:	18cf      	adds	r7, r1, r3
 800d0f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d0fc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800d100:	f02e 0c20 	bic.w	ip, lr, #32
 800d104:	2a09      	cmp	r2, #9
 800d106:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800d10a:	d914      	bls.n	800d136 <rmw_validate_node_name+0x62>
 800d10c:	f1bc 0f19 	cmp.w	ip, #25
 800d110:	d911      	bls.n	800d136 <rmw_validate_node_name+0x62>
 800d112:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800d116:	d00e      	beq.n	800d136 <rmw_validate_node_name+0x62>
 800d118:	2302      	movs	r3, #2
 800d11a:	602b      	str	r3, [r5, #0]
 800d11c:	b106      	cbz	r6, 800d120 <rmw_validate_node_name+0x4c>
 800d11e:	6037      	str	r7, [r6, #0]
 800d120:	2000      	movs	r0, #0
 800d122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d126:	2301      	movs	r3, #1
 800d128:	602b      	str	r3, [r5, #0]
 800d12a:	2e00      	cmp	r6, #0
 800d12c:	d0f8      	beq.n	800d120 <rmw_validate_node_name+0x4c>
 800d12e:	2000      	movs	r0, #0
 800d130:	6030      	str	r0, [r6, #0]
 800d132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d136:	4543      	cmp	r3, r8
 800d138:	d1dd      	bne.n	800d0f6 <rmw_validate_node_name+0x22>
 800d13a:	7822      	ldrb	r2, [r4, #0]
 800d13c:	4b0d      	ldr	r3, [pc, #52]	@ (800d174 <rmw_validate_node_name+0xa0>)
 800d13e:	5cd3      	ldrb	r3, [r2, r3]
 800d140:	f013 0304 	ands.w	r3, r3, #4
 800d144:	d110      	bne.n	800d168 <rmw_validate_node_name+0x94>
 800d146:	28ff      	cmp	r0, #255	@ 0xff
 800d148:	d806      	bhi.n	800d158 <rmw_validate_node_name+0x84>
 800d14a:	602b      	str	r3, [r5, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	e7e8      	b.n	800d122 <rmw_validate_node_name+0x4e>
 800d150:	200b      	movs	r0, #11
 800d152:	4770      	bx	lr
 800d154:	200b      	movs	r0, #11
 800d156:	e7e4      	b.n	800d122 <rmw_validate_node_name+0x4e>
 800d158:	2204      	movs	r2, #4
 800d15a:	602a      	str	r2, [r5, #0]
 800d15c:	2e00      	cmp	r6, #0
 800d15e:	d0df      	beq.n	800d120 <rmw_validate_node_name+0x4c>
 800d160:	22fe      	movs	r2, #254	@ 0xfe
 800d162:	6032      	str	r2, [r6, #0]
 800d164:	4618      	mov	r0, r3
 800d166:	e7dc      	b.n	800d122 <rmw_validate_node_name+0x4e>
 800d168:	2303      	movs	r3, #3
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	2e00      	cmp	r6, #0
 800d16e:	d1de      	bne.n	800d12e <rmw_validate_node_name+0x5a>
 800d170:	e7d6      	b.n	800d120 <rmw_validate_node_name+0x4c>
 800d172:	bf00      	nop
 800d174:	08011360 	.word	0x08011360

0800d178 <rmw_node_name_validation_result_string>:
 800d178:	2804      	cmp	r0, #4
 800d17a:	bf9a      	itte	ls
 800d17c:	4b02      	ldrls	r3, [pc, #8]	@ (800d188 <rmw_node_name_validation_result_string+0x10>)
 800d17e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d182:	4802      	ldrhi	r0, [pc, #8]	@ (800d18c <rmw_node_name_validation_result_string+0x14>)
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	080112a8 	.word	0x080112a8
 800d18c:	080111bc 	.word	0x080111bc

0800d190 <on_status>:
 800d190:	b082      	sub	sp, #8
 800d192:	b002      	add	sp, #8
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop

0800d198 <on_topic>:
 800d198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19c:	4a22      	ldr	r2, [pc, #136]	@ (800d228 <on_topic+0x90>)
 800d19e:	b094      	sub	sp, #80	@ 0x50
 800d1a0:	6812      	ldr	r2, [r2, #0]
 800d1a2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800d1a4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800d1a8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 800d1ac:	b3c2      	cbz	r2, 800d220 <on_topic+0x88>
 800d1ae:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 800d1b2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 800d1b6:	e001      	b.n	800d1bc <on_topic+0x24>
 800d1b8:	6852      	ldr	r2, [r2, #4]
 800d1ba:	b38a      	cbz	r2, 800d220 <on_topic+0x88>
 800d1bc:	6894      	ldr	r4, [r2, #8]
 800d1be:	8aa3      	ldrh	r3, [r4, #20]
 800d1c0:	428b      	cmp	r3, r1
 800d1c2:	d1f9      	bne.n	800d1b8 <on_topic+0x20>
 800d1c4:	7da3      	ldrb	r3, [r4, #22]
 800d1c6:	4283      	cmp	r3, r0
 800d1c8:	d1f6      	bne.n	800d1b8 <on_topic+0x20>
 800d1ca:	2248      	movs	r2, #72	@ 0x48
 800d1cc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d1d0:	4668      	mov	r0, sp
 800d1d2:	f002 fdca 	bl	800fd6a <memcpy>
 800d1d6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800d1da:	cb0c      	ldmia	r3, {r2, r3}
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f7fc f959 	bl	8009494 <rmw_uxrce_get_static_input_buffer_for_entity>
 800d1e2:	4607      	mov	r7, r0
 800d1e4:	b1e0      	cbz	r0, 800d220 <on_topic+0x88>
 800d1e6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800d1ea:	4632      	mov	r2, r6
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f108 0110 	add.w	r1, r8, #16
 800d1f2:	f000 fa1b 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800d1f6:	b930      	cbnz	r0, 800d206 <on_topic+0x6e>
 800d1f8:	480c      	ldr	r0, [pc, #48]	@ (800d22c <on_topic+0x94>)
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	b014      	add	sp, #80	@ 0x50
 800d1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d202:	f000 b8bd 	b.w	800d380 <put_memory>
 800d206:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 800d20a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 800d20e:	f000 f937 	bl	800d480 <rmw_uros_epoch_nanos>
 800d212:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 800d216:	2305      	movs	r3, #5
 800d218:	e942 0102 	strd	r0, r1, [r2, #-8]
 800d21c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 800d220:	b014      	add	sp, #80	@ 0x50
 800d222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d226:	bf00      	nop
 800d228:	2000a8ec 	.word	0x2000a8ec
 800d22c:	2000a8dc 	.word	0x2000a8dc

0800d230 <on_request>:
 800d230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d234:	4823      	ldr	r0, [pc, #140]	@ (800d2c4 <on_request+0x94>)
 800d236:	b094      	sub	sp, #80	@ 0x50
 800d238:	6800      	ldr	r0, [r0, #0]
 800d23a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800d23c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800d240:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d242:	2800      	cmp	r0, #0
 800d244:	d03b      	beq.n	800d2be <on_request+0x8e>
 800d246:	461d      	mov	r5, r3
 800d248:	e001      	b.n	800d24e <on_request+0x1e>
 800d24a:	6840      	ldr	r0, [r0, #4]
 800d24c:	b3b8      	cbz	r0, 800d2be <on_request+0x8e>
 800d24e:	6884      	ldr	r4, [r0, #8]
 800d250:	8b21      	ldrh	r1, [r4, #24]
 800d252:	4291      	cmp	r1, r2
 800d254:	d1f9      	bne.n	800d24a <on_request+0x1a>
 800d256:	2248      	movs	r2, #72	@ 0x48
 800d258:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800d25c:	4668      	mov	r0, sp
 800d25e:	f002 fd84 	bl	800fd6a <memcpy>
 800d262:	f104 0320 	add.w	r3, r4, #32
 800d266:	cb0c      	ldmia	r3, {r2, r3}
 800d268:	4620      	mov	r0, r4
 800d26a:	f7fc f913 	bl	8009494 <rmw_uxrce_get_static_input_buffer_for_entity>
 800d26e:	4680      	mov	r8, r0
 800d270:	b328      	cbz	r0, 800d2be <on_request+0x8e>
 800d272:	4638      	mov	r0, r7
 800d274:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800d278:	4632      	mov	r2, r6
 800d27a:	f107 0110 	add.w	r1, r7, #16
 800d27e:	f000 f9d5 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800d282:	b930      	cbnz	r0, 800d292 <on_request+0x62>
 800d284:	4810      	ldr	r0, [pc, #64]	@ (800d2c8 <on_request+0x98>)
 800d286:	4641      	mov	r1, r8
 800d288:	b014      	add	sp, #80	@ 0x50
 800d28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d28e:	f000 b877 	b.w	800d380 <put_memory>
 800d292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d294:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 800d298:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800d29c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800d2a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d2a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d2ac:	f000 f8e8 	bl	800d480 <rmw_uros_epoch_nanos>
 800d2b0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	e942 0102 	strd	r0, r1, [r2, #-8]
 800d2ba:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800d2be:	b014      	add	sp, #80	@ 0x50
 800d2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c4:	2000a8bc 	.word	0x2000a8bc
 800d2c8:	2000a8dc 	.word	0x2000a8dc

0800d2cc <on_reply>:
 800d2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d0:	4821      	ldr	r0, [pc, #132]	@ (800d358 <on_reply+0x8c>)
 800d2d2:	b094      	sub	sp, #80	@ 0x50
 800d2d4:	6800      	ldr	r0, [r0, #0]
 800d2d6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800d2d8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800d2dc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d2de:	b3b8      	cbz	r0, 800d350 <on_reply+0x84>
 800d2e0:	461d      	mov	r5, r3
 800d2e2:	e001      	b.n	800d2e8 <on_reply+0x1c>
 800d2e4:	6840      	ldr	r0, [r0, #4]
 800d2e6:	b398      	cbz	r0, 800d350 <on_reply+0x84>
 800d2e8:	6884      	ldr	r4, [r0, #8]
 800d2ea:	8b21      	ldrh	r1, [r4, #24]
 800d2ec:	4291      	cmp	r1, r2
 800d2ee:	d1f9      	bne.n	800d2e4 <on_reply+0x18>
 800d2f0:	2248      	movs	r2, #72	@ 0x48
 800d2f2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800d2f6:	4668      	mov	r0, sp
 800d2f8:	f002 fd37 	bl	800fd6a <memcpy>
 800d2fc:	f104 0320 	add.w	r3, r4, #32
 800d300:	cb0c      	ldmia	r3, {r2, r3}
 800d302:	4620      	mov	r0, r4
 800d304:	f7fc f8c6 	bl	8009494 <rmw_uxrce_get_static_input_buffer_for_entity>
 800d308:	4680      	mov	r8, r0
 800d30a:	b308      	cbz	r0, 800d350 <on_reply+0x84>
 800d30c:	4638      	mov	r0, r7
 800d30e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800d312:	4632      	mov	r2, r6
 800d314:	f107 0110 	add.w	r1, r7, #16
 800d318:	f000 f988 	bl	800d62c <ucdr_deserialize_array_uint8_t>
 800d31c:	b930      	cbnz	r0, 800d32c <on_reply+0x60>
 800d31e:	480f      	ldr	r0, [pc, #60]	@ (800d35c <on_reply+0x90>)
 800d320:	4641      	mov	r1, r8
 800d322:	b014      	add	sp, #80	@ 0x50
 800d324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d328:	f000 b82a 	b.w	800d380 <put_memory>
 800d32c:	2200      	movs	r2, #0
 800d32e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 800d332:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 800d336:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 800d33a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 800d33e:	f000 f89f 	bl	800d480 <rmw_uros_epoch_nanos>
 800d342:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800d346:	2304      	movs	r3, #4
 800d348:	e942 0102 	strd	r0, r1, [r2, #-8]
 800d34c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 800d350:	b014      	add	sp, #80	@ 0x50
 800d352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d356:	bf00      	nop
 800d358:	20005fcc 	.word	0x20005fcc
 800d35c:	2000a8dc 	.word	0x2000a8dc

0800d360 <get_memory>:
 800d360:	4603      	mov	r3, r0
 800d362:	6840      	ldr	r0, [r0, #4]
 800d364:	b158      	cbz	r0, 800d37e <get_memory+0x1e>
 800d366:	6842      	ldr	r2, [r0, #4]
 800d368:	605a      	str	r2, [r3, #4]
 800d36a:	b10a      	cbz	r2, 800d370 <get_memory+0x10>
 800d36c:	2100      	movs	r1, #0
 800d36e:	6011      	str	r1, [r2, #0]
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	6042      	str	r2, [r0, #4]
 800d374:	b102      	cbz	r2, 800d378 <get_memory+0x18>
 800d376:	6010      	str	r0, [r2, #0]
 800d378:	2200      	movs	r2, #0
 800d37a:	6002      	str	r2, [r0, #0]
 800d37c:	6018      	str	r0, [r3, #0]
 800d37e:	4770      	bx	lr

0800d380 <put_memory>:
 800d380:	680b      	ldr	r3, [r1, #0]
 800d382:	b10b      	cbz	r3, 800d388 <put_memory+0x8>
 800d384:	684a      	ldr	r2, [r1, #4]
 800d386:	605a      	str	r2, [r3, #4]
 800d388:	684a      	ldr	r2, [r1, #4]
 800d38a:	b102      	cbz	r2, 800d38e <put_memory+0xe>
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	6803      	ldr	r3, [r0, #0]
 800d390:	428b      	cmp	r3, r1
 800d392:	6843      	ldr	r3, [r0, #4]
 800d394:	bf08      	it	eq
 800d396:	6002      	streq	r2, [r0, #0]
 800d398:	604b      	str	r3, [r1, #4]
 800d39a:	b103      	cbz	r3, 800d39e <put_memory+0x1e>
 800d39c:	6019      	str	r1, [r3, #0]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	600b      	str	r3, [r1, #0]
 800d3a2:	6041      	str	r1, [r0, #4]
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop

0800d3a8 <rmw_destroy_client>:
 800d3a8:	b570      	push	{r4, r5, r6, lr}
 800d3aa:	b128      	cbz	r0, 800d3b8 <rmw_destroy_client+0x10>
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	6800      	ldr	r0, [r0, #0]
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	f7fc f8db 	bl	800956c <is_uxrce_rmw_identifier_valid>
 800d3b6:	b910      	cbnz	r0, 800d3be <rmw_destroy_client+0x16>
 800d3b8:	2401      	movs	r4, #1
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	bd70      	pop	{r4, r5, r6, pc}
 800d3be:	6863      	ldr	r3, [r4, #4]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d0f9      	beq.n	800d3b8 <rmw_destroy_client+0x10>
 800d3c4:	2d00      	cmp	r5, #0
 800d3c6:	d0f7      	beq.n	800d3b8 <rmw_destroy_client+0x10>
 800d3c8:	6828      	ldr	r0, [r5, #0]
 800d3ca:	f7fc f8cf 	bl	800956c <is_uxrce_rmw_identifier_valid>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d0f2      	beq.n	800d3b8 <rmw_destroy_client+0x10>
 800d3d2:	686e      	ldr	r6, [r5, #4]
 800d3d4:	2e00      	cmp	r6, #0
 800d3d6:	d0ef      	beq.n	800d3b8 <rmw_destroy_client+0x10>
 800d3d8:	6864      	ldr	r4, [r4, #4]
 800d3da:	6932      	ldr	r2, [r6, #16]
 800d3dc:	6920      	ldr	r0, [r4, #16]
 800d3de:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d3e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d3e6:	6819      	ldr	r1, [r3, #0]
 800d3e8:	f7fc fa3e 	bl	8009868 <uxr_buffer_cancel_data>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	6920      	ldr	r0, [r4, #16]
 800d3f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d3f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d3f8:	f7fc f89c 	bl	8009534 <run_xrce_session>
 800d3fc:	6920      	ldr	r0, [r4, #16]
 800d3fe:	6932      	ldr	r2, [r6, #16]
 800d400:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d404:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d408:	6819      	ldr	r1, [r3, #0]
 800d40a:	f7fc f8bd 	bl	8009588 <uxr_buffer_delete_entity>
 800d40e:	4602      	mov	r2, r0
 800d410:	6920      	ldr	r0, [r4, #16]
 800d412:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d416:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d41a:	f7fc f88b 	bl	8009534 <run_xrce_session>
 800d41e:	2800      	cmp	r0, #0
 800d420:	4628      	mov	r0, r5
 800d422:	bf14      	ite	ne
 800d424:	2400      	movne	r4, #0
 800d426:	2402      	moveq	r4, #2
 800d428:	f7fc f812 	bl	8009450 <rmw_uxrce_fini_client_memory>
 800d42c:	e7c5      	b.n	800d3ba <rmw_destroy_client+0x12>
 800d42e:	bf00      	nop

0800d430 <rmw_get_implementation_identifier>:
 800d430:	4b01      	ldr	r3, [pc, #4]	@ (800d438 <rmw_get_implementation_identifier+0x8>)
 800d432:	6818      	ldr	r0, [r3, #0]
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	080112d4 	.word	0x080112d4

0800d43c <destroy_topic>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	6985      	ldr	r5, [r0, #24]
 800d440:	b1d5      	cbz	r5, 800d478 <destroy_topic+0x3c>
 800d442:	4604      	mov	r4, r0
 800d444:	6928      	ldr	r0, [r5, #16]
 800d446:	6922      	ldr	r2, [r4, #16]
 800d448:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d44c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d450:	6819      	ldr	r1, [r3, #0]
 800d452:	f7fc f899 	bl	8009588 <uxr_buffer_delete_entity>
 800d456:	4602      	mov	r2, r0
 800d458:	6928      	ldr	r0, [r5, #16]
 800d45a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d45e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d462:	f7fc f867 	bl	8009534 <run_xrce_session>
 800d466:	2800      	cmp	r0, #0
 800d468:	4620      	mov	r0, r4
 800d46a:	bf14      	ite	ne
 800d46c:	2400      	movne	r4, #0
 800d46e:	2402      	moveq	r4, #2
 800d470:	f7fc f804 	bl	800947c <rmw_uxrce_fini_topic_memory>
 800d474:	4620      	mov	r0, r4
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	2401      	movs	r4, #1
 800d47a:	4620      	mov	r0, r4
 800d47c:	bd38      	pop	{r3, r4, r5, pc}
 800d47e:	bf00      	nop

0800d480 <rmw_uros_epoch_nanos>:
 800d480:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <rmw_uros_epoch_nanos+0x18>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	b123      	cbz	r3, 800d490 <rmw_uros_epoch_nanos+0x10>
 800d486:	6898      	ldr	r0, [r3, #8]
 800d488:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d48c:	f7fc bbf6 	b.w	8009c7c <uxr_epoch_nanos>
 800d490:	2000      	movs	r0, #0
 800d492:	2100      	movs	r1, #0
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	2000a8cc 	.word	0x2000a8cc

0800d49c <ucdr_serialize_endian_array_char>:
 800d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	461f      	mov	r7, r3
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	4690      	mov	r8, r2
 800d4a8:	f001 f812 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d4ac:	b9e0      	cbnz	r0, 800d4e8 <ucdr_serialize_endian_array_char+0x4c>
 800d4ae:	463e      	mov	r6, r7
 800d4b0:	e009      	b.n	800d4c6 <ucdr_serialize_endian_array_char+0x2a>
 800d4b2:	68a8      	ldr	r0, [r5, #8]
 800d4b4:	f002 fc59 	bl	800fd6a <memcpy>
 800d4b8:	68ab      	ldr	r3, [r5, #8]
 800d4ba:	6928      	ldr	r0, [r5, #16]
 800d4bc:	4423      	add	r3, r4
 800d4be:	4420      	add	r0, r4
 800d4c0:	1b36      	subs	r6, r6, r4
 800d4c2:	60ab      	str	r3, [r5, #8]
 800d4c4:	6128      	str	r0, [r5, #16]
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f001 f888 	bl	800e5e0 <ucdr_check_final_buffer_behavior_array>
 800d4d0:	1bb9      	subs	r1, r7, r6
 800d4d2:	4441      	add	r1, r8
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d1ea      	bne.n	800d4b2 <ucdr_serialize_endian_array_char+0x16>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	7da8      	ldrb	r0, [r5, #22]
 800d4e0:	756b      	strb	r3, [r5, #21]
 800d4e2:	4058      	eors	r0, r3
 800d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e8:	463a      	mov	r2, r7
 800d4ea:	68a8      	ldr	r0, [r5, #8]
 800d4ec:	4641      	mov	r1, r8
 800d4ee:	f002 fc3c 	bl	800fd6a <memcpy>
 800d4f2:	68aa      	ldr	r2, [r5, #8]
 800d4f4:	692b      	ldr	r3, [r5, #16]
 800d4f6:	443a      	add	r2, r7
 800d4f8:	443b      	add	r3, r7
 800d4fa:	60aa      	str	r2, [r5, #8]
 800d4fc:	612b      	str	r3, [r5, #16]
 800d4fe:	e7ed      	b.n	800d4dc <ucdr_serialize_endian_array_char+0x40>

0800d500 <ucdr_deserialize_endian_array_char>:
 800d500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d504:	4619      	mov	r1, r3
 800d506:	461f      	mov	r7, r3
 800d508:	4605      	mov	r5, r0
 800d50a:	4690      	mov	r8, r2
 800d50c:	f000 ffe0 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d510:	b9e0      	cbnz	r0, 800d54c <ucdr_deserialize_endian_array_char+0x4c>
 800d512:	463e      	mov	r6, r7
 800d514:	e009      	b.n	800d52a <ucdr_deserialize_endian_array_char+0x2a>
 800d516:	68a9      	ldr	r1, [r5, #8]
 800d518:	f002 fc27 	bl	800fd6a <memcpy>
 800d51c:	68ab      	ldr	r3, [r5, #8]
 800d51e:	6928      	ldr	r0, [r5, #16]
 800d520:	4423      	add	r3, r4
 800d522:	4420      	add	r0, r4
 800d524:	1b36      	subs	r6, r6, r4
 800d526:	60ab      	str	r3, [r5, #8]
 800d528:	6128      	str	r0, [r5, #16]
 800d52a:	2201      	movs	r2, #1
 800d52c:	4631      	mov	r1, r6
 800d52e:	4628      	mov	r0, r5
 800d530:	f001 f856 	bl	800e5e0 <ucdr_check_final_buffer_behavior_array>
 800d534:	4604      	mov	r4, r0
 800d536:	1bb8      	subs	r0, r7, r6
 800d538:	4440      	add	r0, r8
 800d53a:	4622      	mov	r2, r4
 800d53c:	2c00      	cmp	r4, #0
 800d53e:	d1ea      	bne.n	800d516 <ucdr_deserialize_endian_array_char+0x16>
 800d540:	2301      	movs	r3, #1
 800d542:	7da8      	ldrb	r0, [r5, #22]
 800d544:	756b      	strb	r3, [r5, #21]
 800d546:	4058      	eors	r0, r3
 800d548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54c:	463a      	mov	r2, r7
 800d54e:	68a9      	ldr	r1, [r5, #8]
 800d550:	4640      	mov	r0, r8
 800d552:	f002 fc0a 	bl	800fd6a <memcpy>
 800d556:	68aa      	ldr	r2, [r5, #8]
 800d558:	692b      	ldr	r3, [r5, #16]
 800d55a:	443a      	add	r2, r7
 800d55c:	443b      	add	r3, r7
 800d55e:	60aa      	str	r2, [r5, #8]
 800d560:	612b      	str	r3, [r5, #16]
 800d562:	e7ed      	b.n	800d540 <ucdr_deserialize_endian_array_char+0x40>

0800d564 <ucdr_serialize_array_uint8_t>:
 800d564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d568:	4688      	mov	r8, r1
 800d56a:	4611      	mov	r1, r2
 800d56c:	4617      	mov	r7, r2
 800d56e:	4605      	mov	r5, r0
 800d570:	f000 ffae 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d574:	b9e0      	cbnz	r0, 800d5b0 <ucdr_serialize_array_uint8_t+0x4c>
 800d576:	463e      	mov	r6, r7
 800d578:	e009      	b.n	800d58e <ucdr_serialize_array_uint8_t+0x2a>
 800d57a:	68a8      	ldr	r0, [r5, #8]
 800d57c:	f002 fbf5 	bl	800fd6a <memcpy>
 800d580:	68aa      	ldr	r2, [r5, #8]
 800d582:	692b      	ldr	r3, [r5, #16]
 800d584:	4422      	add	r2, r4
 800d586:	4423      	add	r3, r4
 800d588:	1b36      	subs	r6, r6, r4
 800d58a:	60aa      	str	r2, [r5, #8]
 800d58c:	612b      	str	r3, [r5, #16]
 800d58e:	4631      	mov	r1, r6
 800d590:	2201      	movs	r2, #1
 800d592:	4628      	mov	r0, r5
 800d594:	f001 f824 	bl	800e5e0 <ucdr_check_final_buffer_behavior_array>
 800d598:	1bb9      	subs	r1, r7, r6
 800d59a:	4441      	add	r1, r8
 800d59c:	4604      	mov	r4, r0
 800d59e:	4602      	mov	r2, r0
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1ea      	bne.n	800d57a <ucdr_serialize_array_uint8_t+0x16>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	7da8      	ldrb	r0, [r5, #22]
 800d5a8:	756b      	strb	r3, [r5, #21]
 800d5aa:	4058      	eors	r0, r3
 800d5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b0:	463a      	mov	r2, r7
 800d5b2:	68a8      	ldr	r0, [r5, #8]
 800d5b4:	4641      	mov	r1, r8
 800d5b6:	f002 fbd8 	bl	800fd6a <memcpy>
 800d5ba:	68aa      	ldr	r2, [r5, #8]
 800d5bc:	692b      	ldr	r3, [r5, #16]
 800d5be:	443a      	add	r2, r7
 800d5c0:	443b      	add	r3, r7
 800d5c2:	60aa      	str	r2, [r5, #8]
 800d5c4:	612b      	str	r3, [r5, #16]
 800d5c6:	e7ed      	b.n	800d5a4 <ucdr_serialize_array_uint8_t+0x40>

0800d5c8 <ucdr_serialize_endian_array_uint8_t>:
 800d5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	461f      	mov	r7, r3
 800d5d0:	4605      	mov	r5, r0
 800d5d2:	4690      	mov	r8, r2
 800d5d4:	f000 ff7c 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d5d8:	b9e0      	cbnz	r0, 800d614 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d5da:	463e      	mov	r6, r7
 800d5dc:	e009      	b.n	800d5f2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800d5de:	68a8      	ldr	r0, [r5, #8]
 800d5e0:	f002 fbc3 	bl	800fd6a <memcpy>
 800d5e4:	68ab      	ldr	r3, [r5, #8]
 800d5e6:	6928      	ldr	r0, [r5, #16]
 800d5e8:	4423      	add	r3, r4
 800d5ea:	4420      	add	r0, r4
 800d5ec:	1b36      	subs	r6, r6, r4
 800d5ee:	60ab      	str	r3, [r5, #8]
 800d5f0:	6128      	str	r0, [r5, #16]
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 fff2 	bl	800e5e0 <ucdr_check_final_buffer_behavior_array>
 800d5fc:	1bb9      	subs	r1, r7, r6
 800d5fe:	4441      	add	r1, r8
 800d600:	4604      	mov	r4, r0
 800d602:	4602      	mov	r2, r0
 800d604:	2800      	cmp	r0, #0
 800d606:	d1ea      	bne.n	800d5de <ucdr_serialize_endian_array_uint8_t+0x16>
 800d608:	2301      	movs	r3, #1
 800d60a:	7da8      	ldrb	r0, [r5, #22]
 800d60c:	756b      	strb	r3, [r5, #21]
 800d60e:	4058      	eors	r0, r3
 800d610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d614:	463a      	mov	r2, r7
 800d616:	68a8      	ldr	r0, [r5, #8]
 800d618:	4641      	mov	r1, r8
 800d61a:	f002 fba6 	bl	800fd6a <memcpy>
 800d61e:	68aa      	ldr	r2, [r5, #8]
 800d620:	692b      	ldr	r3, [r5, #16]
 800d622:	443a      	add	r2, r7
 800d624:	443b      	add	r3, r7
 800d626:	60aa      	str	r2, [r5, #8]
 800d628:	612b      	str	r3, [r5, #16]
 800d62a:	e7ed      	b.n	800d608 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d62c <ucdr_deserialize_array_uint8_t>:
 800d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d630:	4688      	mov	r8, r1
 800d632:	4611      	mov	r1, r2
 800d634:	4617      	mov	r7, r2
 800d636:	4605      	mov	r5, r0
 800d638:	f000 ff4a 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d63c:	b9e0      	cbnz	r0, 800d678 <ucdr_deserialize_array_uint8_t+0x4c>
 800d63e:	463e      	mov	r6, r7
 800d640:	e009      	b.n	800d656 <ucdr_deserialize_array_uint8_t+0x2a>
 800d642:	68a9      	ldr	r1, [r5, #8]
 800d644:	f002 fb91 	bl	800fd6a <memcpy>
 800d648:	68aa      	ldr	r2, [r5, #8]
 800d64a:	692b      	ldr	r3, [r5, #16]
 800d64c:	4422      	add	r2, r4
 800d64e:	4423      	add	r3, r4
 800d650:	1b36      	subs	r6, r6, r4
 800d652:	60aa      	str	r2, [r5, #8]
 800d654:	612b      	str	r3, [r5, #16]
 800d656:	2201      	movs	r2, #1
 800d658:	4631      	mov	r1, r6
 800d65a:	4628      	mov	r0, r5
 800d65c:	f000 ffc0 	bl	800e5e0 <ucdr_check_final_buffer_behavior_array>
 800d660:	4604      	mov	r4, r0
 800d662:	1bb8      	subs	r0, r7, r6
 800d664:	4440      	add	r0, r8
 800d666:	4622      	mov	r2, r4
 800d668:	2c00      	cmp	r4, #0
 800d66a:	d1ea      	bne.n	800d642 <ucdr_deserialize_array_uint8_t+0x16>
 800d66c:	2301      	movs	r3, #1
 800d66e:	7da8      	ldrb	r0, [r5, #22]
 800d670:	756b      	strb	r3, [r5, #21]
 800d672:	4058      	eors	r0, r3
 800d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d678:	463a      	mov	r2, r7
 800d67a:	68a9      	ldr	r1, [r5, #8]
 800d67c:	4640      	mov	r0, r8
 800d67e:	f002 fb74 	bl	800fd6a <memcpy>
 800d682:	68aa      	ldr	r2, [r5, #8]
 800d684:	692b      	ldr	r3, [r5, #16]
 800d686:	443a      	add	r2, r7
 800d688:	443b      	add	r3, r7
 800d68a:	60aa      	str	r2, [r5, #8]
 800d68c:	612b      	str	r3, [r5, #16]
 800d68e:	e7ed      	b.n	800d66c <ucdr_deserialize_array_uint8_t+0x40>

0800d690 <ucdr_deserialize_endian_array_uint8_t>:
 800d690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d694:	4619      	mov	r1, r3
 800d696:	461f      	mov	r7, r3
 800d698:	4605      	mov	r5, r0
 800d69a:	4690      	mov	r8, r2
 800d69c:	f000 ff18 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d6a0:	b9e0      	cbnz	r0, 800d6dc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800d6a2:	463e      	mov	r6, r7
 800d6a4:	e009      	b.n	800d6ba <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800d6a6:	68a9      	ldr	r1, [r5, #8]
 800d6a8:	f002 fb5f 	bl	800fd6a <memcpy>
 800d6ac:	68ab      	ldr	r3, [r5, #8]
 800d6ae:	6928      	ldr	r0, [r5, #16]
 800d6b0:	4423      	add	r3, r4
 800d6b2:	4420      	add	r0, r4
 800d6b4:	1b36      	subs	r6, r6, r4
 800d6b6:	60ab      	str	r3, [r5, #8]
 800d6b8:	6128      	str	r0, [r5, #16]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	4631      	mov	r1, r6
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f000 ff8e 	bl	800e5e0 <ucdr_check_final_buffer_behavior_array>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	1bb8      	subs	r0, r7, r6
 800d6c8:	4440      	add	r0, r8
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	2c00      	cmp	r4, #0
 800d6ce:	d1ea      	bne.n	800d6a6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	7da8      	ldrb	r0, [r5, #22]
 800d6d4:	756b      	strb	r3, [r5, #21]
 800d6d6:	4058      	eors	r0, r3
 800d6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6dc:	463a      	mov	r2, r7
 800d6de:	68a9      	ldr	r1, [r5, #8]
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	f002 fb42 	bl	800fd6a <memcpy>
 800d6e6:	68aa      	ldr	r2, [r5, #8]
 800d6e8:	692b      	ldr	r3, [r5, #16]
 800d6ea:	443a      	add	r2, r7
 800d6ec:	443b      	add	r3, r7
 800d6ee:	60aa      	str	r2, [r5, #8]
 800d6f0:	612b      	str	r3, [r5, #16]
 800d6f2:	e7ed      	b.n	800d6d0 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800d6f4 <ucdr_serialize_bool>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	460d      	mov	r5, r1
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	f000 fef4 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d700:	b148      	cbz	r0, 800d716 <ucdr_serialize_bool+0x22>
 800d702:	68a3      	ldr	r3, [r4, #8]
 800d704:	701d      	strb	r5, [r3, #0]
 800d706:	68a2      	ldr	r2, [r4, #8]
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	2101      	movs	r1, #1
 800d70c:	440a      	add	r2, r1
 800d70e:	440b      	add	r3, r1
 800d710:	60a2      	str	r2, [r4, #8]
 800d712:	6123      	str	r3, [r4, #16]
 800d714:	7561      	strb	r1, [r4, #21]
 800d716:	7da0      	ldrb	r0, [r4, #22]
 800d718:	f080 0001 	eor.w	r0, r0, #1
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	bf00      	nop

0800d720 <ucdr_deserialize_bool>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	460d      	mov	r5, r1
 800d724:	2101      	movs	r1, #1
 800d726:	4604      	mov	r4, r0
 800d728:	f000 fede 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d72c:	b160      	cbz	r0, 800d748 <ucdr_deserialize_bool+0x28>
 800d72e:	68a2      	ldr	r2, [r4, #8]
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d736:	3900      	subs	r1, #0
 800d738:	bf18      	it	ne
 800d73a:	2101      	movne	r1, #1
 800d73c:	7029      	strb	r1, [r5, #0]
 800d73e:	3301      	adds	r3, #1
 800d740:	2101      	movs	r1, #1
 800d742:	60a2      	str	r2, [r4, #8]
 800d744:	6123      	str	r3, [r4, #16]
 800d746:	7561      	strb	r1, [r4, #21]
 800d748:	7da0      	ldrb	r0, [r4, #22]
 800d74a:	f080 0001 	eor.w	r0, r0, #1
 800d74e:	bd38      	pop	{r3, r4, r5, pc}

0800d750 <ucdr_serialize_uint8_t>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	460d      	mov	r5, r1
 800d754:	2101      	movs	r1, #1
 800d756:	4604      	mov	r4, r0
 800d758:	f000 fec6 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d75c:	b148      	cbz	r0, 800d772 <ucdr_serialize_uint8_t+0x22>
 800d75e:	68a3      	ldr	r3, [r4, #8]
 800d760:	701d      	strb	r5, [r3, #0]
 800d762:	68a2      	ldr	r2, [r4, #8]
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	2101      	movs	r1, #1
 800d768:	440a      	add	r2, r1
 800d76a:	440b      	add	r3, r1
 800d76c:	60a2      	str	r2, [r4, #8]
 800d76e:	6123      	str	r3, [r4, #16]
 800d770:	7561      	strb	r1, [r4, #21]
 800d772:	7da0      	ldrb	r0, [r4, #22]
 800d774:	f080 0001 	eor.w	r0, r0, #1
 800d778:	bd38      	pop	{r3, r4, r5, pc}
 800d77a:	bf00      	nop

0800d77c <ucdr_deserialize_uint8_t>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	460d      	mov	r5, r1
 800d780:	2101      	movs	r1, #1
 800d782:	4604      	mov	r4, r0
 800d784:	f000 feb0 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d788:	b150      	cbz	r0, 800d7a0 <ucdr_deserialize_uint8_t+0x24>
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	702b      	strb	r3, [r5, #0]
 800d790:	68a2      	ldr	r2, [r4, #8]
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	2101      	movs	r1, #1
 800d796:	440a      	add	r2, r1
 800d798:	440b      	add	r3, r1
 800d79a:	60a2      	str	r2, [r4, #8]
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	7561      	strb	r1, [r4, #21]
 800d7a0:	7da0      	ldrb	r0, [r4, #22]
 800d7a2:	f080 0001 	eor.w	r0, r0, #1
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}

0800d7a8 <ucdr_serialize_uint16_t>:
 800d7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ac:	b082      	sub	sp, #8
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	2102      	movs	r1, #2
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d7b8:	f000 feea 	bl	800e590 <ucdr_buffer_alignment>
 800d7bc:	4601      	mov	r1, r0
 800d7be:	4620      	mov	r0, r4
 800d7c0:	7d67      	ldrb	r7, [r4, #21]
 800d7c2:	f000 ff29 	bl	800e618 <ucdr_advance_buffer>
 800d7c6:	2102      	movs	r1, #2
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f000 fe81 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d7ce:	bb78      	cbnz	r0, 800d830 <ucdr_serialize_uint16_t+0x88>
 800d7d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7d4:	42ab      	cmp	r3, r5
 800d7d6:	d926      	bls.n	800d826 <ucdr_serialize_uint16_t+0x7e>
 800d7d8:	1b5e      	subs	r6, r3, r5
 800d7da:	60a3      	str	r3, [r4, #8]
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	f1c6 0802 	rsb	r8, r6, #2
 800d7e2:	4433      	add	r3, r6
 800d7e4:	6123      	str	r3, [r4, #16]
 800d7e6:	4641      	mov	r1, r8
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 fe7d 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d03b      	beq.n	800d86a <ucdr_serialize_uint16_t+0xc2>
 800d7f2:	7d23      	ldrb	r3, [r4, #20]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d04a      	beq.n	800d88e <ucdr_serialize_uint16_t+0xe6>
 800d7f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d7fc:	702b      	strb	r3, [r5, #0]
 800d7fe:	2e00      	cmp	r6, #0
 800d800:	d040      	beq.n	800d884 <ucdr_serialize_uint16_t+0xdc>
 800d802:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d806:	706b      	strb	r3, [r5, #1]
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	68a2      	ldr	r2, [r4, #8]
 800d80c:	7da0      	ldrb	r0, [r4, #22]
 800d80e:	3302      	adds	r3, #2
 800d810:	1b9e      	subs	r6, r3, r6
 800d812:	4442      	add	r2, r8
 800d814:	2302      	movs	r3, #2
 800d816:	f080 0001 	eor.w	r0, r0, #1
 800d81a:	60a2      	str	r2, [r4, #8]
 800d81c:	6126      	str	r6, [r4, #16]
 800d81e:	7563      	strb	r3, [r4, #21]
 800d820:	b002      	add	sp, #8
 800d822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d826:	2102      	movs	r1, #2
 800d828:	4620      	mov	r0, r4
 800d82a:	f000 fe5d 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d82e:	b190      	cbz	r0, 800d856 <ucdr_serialize_uint16_t+0xae>
 800d830:	7d23      	ldrb	r3, [r4, #20]
 800d832:	2b01      	cmp	r3, #1
 800d834:	68a3      	ldr	r3, [r4, #8]
 800d836:	d014      	beq.n	800d862 <ucdr_serialize_uint16_t+0xba>
 800d838:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d83c:	701a      	strb	r2, [r3, #0]
 800d83e:	68a3      	ldr	r3, [r4, #8]
 800d840:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d844:	705a      	strb	r2, [r3, #1]
 800d846:	68a2      	ldr	r2, [r4, #8]
 800d848:	6923      	ldr	r3, [r4, #16]
 800d84a:	3202      	adds	r2, #2
 800d84c:	3302      	adds	r3, #2
 800d84e:	2102      	movs	r1, #2
 800d850:	60a2      	str	r2, [r4, #8]
 800d852:	6123      	str	r3, [r4, #16]
 800d854:	7561      	strb	r1, [r4, #21]
 800d856:	7da0      	ldrb	r0, [r4, #22]
 800d858:	f080 0001 	eor.w	r0, r0, #1
 800d85c:	b002      	add	sp, #8
 800d85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d862:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d866:	801a      	strh	r2, [r3, #0]
 800d868:	e7ed      	b.n	800d846 <ucdr_serialize_uint16_t+0x9e>
 800d86a:	68a2      	ldr	r2, [r4, #8]
 800d86c:	6923      	ldr	r3, [r4, #16]
 800d86e:	7da0      	ldrb	r0, [r4, #22]
 800d870:	7567      	strb	r7, [r4, #21]
 800d872:	1b92      	subs	r2, r2, r6
 800d874:	1b9b      	subs	r3, r3, r6
 800d876:	f080 0001 	eor.w	r0, r0, #1
 800d87a:	60a2      	str	r2, [r4, #8]
 800d87c:	6123      	str	r3, [r4, #16]
 800d87e:	b002      	add	sp, #8
 800d880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d884:	68a3      	ldr	r3, [r4, #8]
 800d886:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d88a:	701a      	strb	r2, [r3, #0]
 800d88c:	e7bc      	b.n	800d808 <ucdr_serialize_uint16_t+0x60>
 800d88e:	4628      	mov	r0, r5
 800d890:	f10d 0506 	add.w	r5, sp, #6
 800d894:	4629      	mov	r1, r5
 800d896:	4632      	mov	r2, r6
 800d898:	f002 fa67 	bl	800fd6a <memcpy>
 800d89c:	68a0      	ldr	r0, [r4, #8]
 800d89e:	4642      	mov	r2, r8
 800d8a0:	19a9      	adds	r1, r5, r6
 800d8a2:	f002 fa62 	bl	800fd6a <memcpy>
 800d8a6:	e7af      	b.n	800d808 <ucdr_serialize_uint16_t+0x60>

0800d8a8 <ucdr_serialize_endian_uint16_t>:
 800d8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	460d      	mov	r5, r1
 800d8b0:	2102      	movs	r1, #2
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d8b8:	f000 fe6a 	bl	800e590 <ucdr_buffer_alignment>
 800d8bc:	4601      	mov	r1, r0
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d8c4:	f000 fea8 	bl	800e618 <ucdr_advance_buffer>
 800d8c8:	2102      	movs	r1, #2
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 fe00 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d8d0:	bb70      	cbnz	r0, 800d930 <ucdr_serialize_endian_uint16_t+0x88>
 800d8d2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d8d6:	42be      	cmp	r6, r7
 800d8d8:	d925      	bls.n	800d926 <ucdr_serialize_endian_uint16_t+0x7e>
 800d8da:	6923      	ldr	r3, [r4, #16]
 800d8dc:	60a6      	str	r6, [r4, #8]
 800d8de:	1bf6      	subs	r6, r6, r7
 800d8e0:	4433      	add	r3, r6
 800d8e2:	f1c6 0902 	rsb	r9, r6, #2
 800d8e6:	6123      	str	r3, [r4, #16]
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 fdfc 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d039      	beq.n	800d968 <ucdr_serialize_endian_uint16_t+0xc0>
 800d8f4:	2d01      	cmp	r5, #1
 800d8f6:	d04a      	beq.n	800d98e <ucdr_serialize_endian_uint16_t+0xe6>
 800d8f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8fc:	703b      	strb	r3, [r7, #0]
 800d8fe:	2e00      	cmp	r6, #0
 800d900:	d040      	beq.n	800d984 <ucdr_serialize_endian_uint16_t+0xdc>
 800d902:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d906:	707b      	strb	r3, [r7, #1]
 800d908:	6923      	ldr	r3, [r4, #16]
 800d90a:	68a2      	ldr	r2, [r4, #8]
 800d90c:	7da0      	ldrb	r0, [r4, #22]
 800d90e:	3302      	adds	r3, #2
 800d910:	444a      	add	r2, r9
 800d912:	1b9b      	subs	r3, r3, r6
 800d914:	2102      	movs	r1, #2
 800d916:	f080 0001 	eor.w	r0, r0, #1
 800d91a:	60a2      	str	r2, [r4, #8]
 800d91c:	6123      	str	r3, [r4, #16]
 800d91e:	7561      	strb	r1, [r4, #21]
 800d920:	b003      	add	sp, #12
 800d922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d926:	2102      	movs	r1, #2
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 fddd 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d92e:	b188      	cbz	r0, 800d954 <ucdr_serialize_endian_uint16_t+0xac>
 800d930:	2d01      	cmp	r5, #1
 800d932:	68a3      	ldr	r3, [r4, #8]
 800d934:	d014      	beq.n	800d960 <ucdr_serialize_endian_uint16_t+0xb8>
 800d936:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d93a:	701a      	strb	r2, [r3, #0]
 800d93c:	68a3      	ldr	r3, [r4, #8]
 800d93e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d942:	705a      	strb	r2, [r3, #1]
 800d944:	68a2      	ldr	r2, [r4, #8]
 800d946:	6923      	ldr	r3, [r4, #16]
 800d948:	3202      	adds	r2, #2
 800d94a:	3302      	adds	r3, #2
 800d94c:	2102      	movs	r1, #2
 800d94e:	60a2      	str	r2, [r4, #8]
 800d950:	6123      	str	r3, [r4, #16]
 800d952:	7561      	strb	r1, [r4, #21]
 800d954:	7da0      	ldrb	r0, [r4, #22]
 800d956:	f080 0001 	eor.w	r0, r0, #1
 800d95a:	b003      	add	sp, #12
 800d95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d960:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d964:	801a      	strh	r2, [r3, #0]
 800d966:	e7ed      	b.n	800d944 <ucdr_serialize_endian_uint16_t+0x9c>
 800d968:	68a2      	ldr	r2, [r4, #8]
 800d96a:	6923      	ldr	r3, [r4, #16]
 800d96c:	7da0      	ldrb	r0, [r4, #22]
 800d96e:	f884 8015 	strb.w	r8, [r4, #21]
 800d972:	1b92      	subs	r2, r2, r6
 800d974:	1b9b      	subs	r3, r3, r6
 800d976:	f080 0001 	eor.w	r0, r0, #1
 800d97a:	60a2      	str	r2, [r4, #8]
 800d97c:	6123      	str	r3, [r4, #16]
 800d97e:	b003      	add	sp, #12
 800d980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d984:	68a3      	ldr	r3, [r4, #8]
 800d986:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d98a:	701a      	strb	r2, [r3, #0]
 800d98c:	e7bc      	b.n	800d908 <ucdr_serialize_endian_uint16_t+0x60>
 800d98e:	f10d 0506 	add.w	r5, sp, #6
 800d992:	4629      	mov	r1, r5
 800d994:	4632      	mov	r2, r6
 800d996:	4638      	mov	r0, r7
 800d998:	f002 f9e7 	bl	800fd6a <memcpy>
 800d99c:	68a0      	ldr	r0, [r4, #8]
 800d99e:	464a      	mov	r2, r9
 800d9a0:	19a9      	adds	r1, r5, r6
 800d9a2:	f002 f9e2 	bl	800fd6a <memcpy>
 800d9a6:	e7af      	b.n	800d908 <ucdr_serialize_endian_uint16_t+0x60>

0800d9a8 <ucdr_deserialize_uint16_t>:
 800d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ac:	460d      	mov	r5, r1
 800d9ae:	2102      	movs	r1, #2
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	f000 fded 	bl	800e590 <ucdr_buffer_alignment>
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9be:	f000 fe2b 	bl	800e618 <ucdr_advance_buffer>
 800d9c2:	2102      	movs	r1, #2
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f000 fd83 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800d9ca:	bb60      	cbnz	r0, 800da26 <ucdr_deserialize_uint16_t+0x7e>
 800d9cc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d9d0:	42be      	cmp	r6, r7
 800d9d2:	d923      	bls.n	800da1c <ucdr_deserialize_uint16_t+0x74>
 800d9d4:	6923      	ldr	r3, [r4, #16]
 800d9d6:	60a6      	str	r6, [r4, #8]
 800d9d8:	1bf6      	subs	r6, r6, r7
 800d9da:	4433      	add	r3, r6
 800d9dc:	f1c6 0902 	rsb	r9, r6, #2
 800d9e0:	6123      	str	r3, [r4, #16]
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fd7f 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d034      	beq.n	800da58 <ucdr_deserialize_uint16_t+0xb0>
 800d9ee:	7d23      	ldrb	r3, [r4, #20]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d042      	beq.n	800da7a <ucdr_deserialize_uint16_t+0xd2>
 800d9f4:	787b      	ldrb	r3, [r7, #1]
 800d9f6:	702b      	strb	r3, [r5, #0]
 800d9f8:	2e00      	cmp	r6, #0
 800d9fa:	d03a      	beq.n	800da72 <ucdr_deserialize_uint16_t+0xca>
 800d9fc:	783b      	ldrb	r3, [r7, #0]
 800d9fe:	706b      	strb	r3, [r5, #1]
 800da00:	6923      	ldr	r3, [r4, #16]
 800da02:	68a2      	ldr	r2, [r4, #8]
 800da04:	7da0      	ldrb	r0, [r4, #22]
 800da06:	2102      	movs	r1, #2
 800da08:	3302      	adds	r3, #2
 800da0a:	444a      	add	r2, r9
 800da0c:	1b9b      	subs	r3, r3, r6
 800da0e:	7561      	strb	r1, [r4, #21]
 800da10:	60a2      	str	r2, [r4, #8]
 800da12:	6123      	str	r3, [r4, #16]
 800da14:	f080 0001 	eor.w	r0, r0, #1
 800da18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da1c:	2102      	movs	r1, #2
 800da1e:	4620      	mov	r0, r4
 800da20:	f000 fd62 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800da24:	b180      	cbz	r0, 800da48 <ucdr_deserialize_uint16_t+0xa0>
 800da26:	7d23      	ldrb	r3, [r4, #20]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	68a3      	ldr	r3, [r4, #8]
 800da2c:	d011      	beq.n	800da52 <ucdr_deserialize_uint16_t+0xaa>
 800da2e:	785b      	ldrb	r3, [r3, #1]
 800da30:	702b      	strb	r3, [r5, #0]
 800da32:	68a3      	ldr	r3, [r4, #8]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	706b      	strb	r3, [r5, #1]
 800da38:	68a2      	ldr	r2, [r4, #8]
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	3202      	adds	r2, #2
 800da3e:	3302      	adds	r3, #2
 800da40:	2102      	movs	r1, #2
 800da42:	60a2      	str	r2, [r4, #8]
 800da44:	6123      	str	r3, [r4, #16]
 800da46:	7561      	strb	r1, [r4, #21]
 800da48:	7da0      	ldrb	r0, [r4, #22]
 800da4a:	f080 0001 	eor.w	r0, r0, #1
 800da4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	802b      	strh	r3, [r5, #0]
 800da56:	e7ef      	b.n	800da38 <ucdr_deserialize_uint16_t+0x90>
 800da58:	68a2      	ldr	r2, [r4, #8]
 800da5a:	6923      	ldr	r3, [r4, #16]
 800da5c:	7da0      	ldrb	r0, [r4, #22]
 800da5e:	f884 8015 	strb.w	r8, [r4, #21]
 800da62:	1b92      	subs	r2, r2, r6
 800da64:	1b9b      	subs	r3, r3, r6
 800da66:	60a2      	str	r2, [r4, #8]
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	f080 0001 	eor.w	r0, r0, #1
 800da6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da72:	68a3      	ldr	r3, [r4, #8]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	706b      	strb	r3, [r5, #1]
 800da78:	e7c2      	b.n	800da00 <ucdr_deserialize_uint16_t+0x58>
 800da7a:	4639      	mov	r1, r7
 800da7c:	4632      	mov	r2, r6
 800da7e:	4628      	mov	r0, r5
 800da80:	f002 f973 	bl	800fd6a <memcpy>
 800da84:	68a1      	ldr	r1, [r4, #8]
 800da86:	464a      	mov	r2, r9
 800da88:	19a8      	adds	r0, r5, r6
 800da8a:	f002 f96e 	bl	800fd6a <memcpy>
 800da8e:	e7b7      	b.n	800da00 <ucdr_deserialize_uint16_t+0x58>

0800da90 <ucdr_deserialize_endian_uint16_t>:
 800da90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da94:	460e      	mov	r6, r1
 800da96:	2102      	movs	r1, #2
 800da98:	4604      	mov	r4, r0
 800da9a:	4615      	mov	r5, r2
 800da9c:	f000 fd78 	bl	800e590 <ucdr_buffer_alignment>
 800daa0:	4601      	mov	r1, r0
 800daa2:	4620      	mov	r0, r4
 800daa4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800daa8:	f000 fdb6 	bl	800e618 <ucdr_advance_buffer>
 800daac:	2102      	movs	r1, #2
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 fd0e 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800dab4:	bb70      	cbnz	r0, 800db14 <ucdr_deserialize_endian_uint16_t+0x84>
 800dab6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800daba:	4547      	cmp	r7, r8
 800dabc:	d925      	bls.n	800db0a <ucdr_deserialize_endian_uint16_t+0x7a>
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	60a7      	str	r7, [r4, #8]
 800dac2:	eba7 0708 	sub.w	r7, r7, r8
 800dac6:	443b      	add	r3, r7
 800dac8:	f1c7 0a02 	rsb	sl, r7, #2
 800dacc:	6123      	str	r3, [r4, #16]
 800dace:	4651      	mov	r1, sl
 800dad0:	4620      	mov	r0, r4
 800dad2:	f000 fd09 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d034      	beq.n	800db44 <ucdr_deserialize_endian_uint16_t+0xb4>
 800dada:	2e01      	cmp	r6, #1
 800dadc:	d043      	beq.n	800db66 <ucdr_deserialize_endian_uint16_t+0xd6>
 800dade:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dae2:	702b      	strb	r3, [r5, #0]
 800dae4:	2f00      	cmp	r7, #0
 800dae6:	d03a      	beq.n	800db5e <ucdr_deserialize_endian_uint16_t+0xce>
 800dae8:	f898 3000 	ldrb.w	r3, [r8]
 800daec:	706b      	strb	r3, [r5, #1]
 800daee:	6923      	ldr	r3, [r4, #16]
 800daf0:	68a2      	ldr	r2, [r4, #8]
 800daf2:	7da0      	ldrb	r0, [r4, #22]
 800daf4:	2102      	movs	r1, #2
 800daf6:	3302      	adds	r3, #2
 800daf8:	4452      	add	r2, sl
 800dafa:	1bdb      	subs	r3, r3, r7
 800dafc:	7561      	strb	r1, [r4, #21]
 800dafe:	60a2      	str	r2, [r4, #8]
 800db00:	6123      	str	r3, [r4, #16]
 800db02:	f080 0001 	eor.w	r0, r0, #1
 800db06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db0a:	2102      	movs	r1, #2
 800db0c:	4620      	mov	r0, r4
 800db0e:	f000 fceb 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800db12:	b178      	cbz	r0, 800db34 <ucdr_deserialize_endian_uint16_t+0xa4>
 800db14:	2e01      	cmp	r6, #1
 800db16:	68a3      	ldr	r3, [r4, #8]
 800db18:	d011      	beq.n	800db3e <ucdr_deserialize_endian_uint16_t+0xae>
 800db1a:	785b      	ldrb	r3, [r3, #1]
 800db1c:	702b      	strb	r3, [r5, #0]
 800db1e:	68a3      	ldr	r3, [r4, #8]
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	706b      	strb	r3, [r5, #1]
 800db24:	68a2      	ldr	r2, [r4, #8]
 800db26:	6923      	ldr	r3, [r4, #16]
 800db28:	3202      	adds	r2, #2
 800db2a:	3302      	adds	r3, #2
 800db2c:	2102      	movs	r1, #2
 800db2e:	60a2      	str	r2, [r4, #8]
 800db30:	6123      	str	r3, [r4, #16]
 800db32:	7561      	strb	r1, [r4, #21]
 800db34:	7da0      	ldrb	r0, [r4, #22]
 800db36:	f080 0001 	eor.w	r0, r0, #1
 800db3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	802b      	strh	r3, [r5, #0]
 800db42:	e7ef      	b.n	800db24 <ucdr_deserialize_endian_uint16_t+0x94>
 800db44:	68a2      	ldr	r2, [r4, #8]
 800db46:	6923      	ldr	r3, [r4, #16]
 800db48:	7da0      	ldrb	r0, [r4, #22]
 800db4a:	f884 9015 	strb.w	r9, [r4, #21]
 800db4e:	1bd2      	subs	r2, r2, r7
 800db50:	1bdb      	subs	r3, r3, r7
 800db52:	60a2      	str	r2, [r4, #8]
 800db54:	6123      	str	r3, [r4, #16]
 800db56:	f080 0001 	eor.w	r0, r0, #1
 800db5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5e:	68a3      	ldr	r3, [r4, #8]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	706b      	strb	r3, [r5, #1]
 800db64:	e7c3      	b.n	800daee <ucdr_deserialize_endian_uint16_t+0x5e>
 800db66:	4641      	mov	r1, r8
 800db68:	463a      	mov	r2, r7
 800db6a:	4628      	mov	r0, r5
 800db6c:	f002 f8fd 	bl	800fd6a <memcpy>
 800db70:	68a1      	ldr	r1, [r4, #8]
 800db72:	4652      	mov	r2, sl
 800db74:	19e8      	adds	r0, r5, r7
 800db76:	f002 f8f8 	bl	800fd6a <memcpy>
 800db7a:	e7b8      	b.n	800daee <ucdr_deserialize_endian_uint16_t+0x5e>

0800db7c <ucdr_serialize_uint32_t>:
 800db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db80:	b082      	sub	sp, #8
 800db82:	4604      	mov	r4, r0
 800db84:	9101      	str	r1, [sp, #4]
 800db86:	2104      	movs	r1, #4
 800db88:	f000 fd02 	bl	800e590 <ucdr_buffer_alignment>
 800db8c:	4601      	mov	r1, r0
 800db8e:	4620      	mov	r0, r4
 800db90:	7d67      	ldrb	r7, [r4, #21]
 800db92:	f000 fd41 	bl	800e618 <ucdr_advance_buffer>
 800db96:	2104      	movs	r1, #4
 800db98:	4620      	mov	r0, r4
 800db9a:	f000 fc99 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d139      	bne.n	800dc16 <ucdr_serialize_uint32_t+0x9a>
 800dba2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dba6:	42ab      	cmp	r3, r5
 800dba8:	d930      	bls.n	800dc0c <ucdr_serialize_uint32_t+0x90>
 800dbaa:	1b5e      	subs	r6, r3, r5
 800dbac:	60a3      	str	r3, [r4, #8]
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	f1c6 0804 	rsb	r8, r6, #4
 800dbb4:	4433      	add	r3, r6
 800dbb6:	6123      	str	r3, [r4, #16]
 800dbb8:	4641      	mov	r1, r8
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 fc94 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d04c      	beq.n	800dc5e <ucdr_serialize_uint32_t+0xe2>
 800dbc4:	7d23      	ldrb	r3, [r4, #20]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d063      	beq.n	800dc92 <ucdr_serialize_uint32_t+0x116>
 800dbca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dbce:	702b      	strb	r3, [r5, #0]
 800dbd0:	2e00      	cmp	r6, #0
 800dbd2:	d051      	beq.n	800dc78 <ucdr_serialize_uint32_t+0xfc>
 800dbd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dbd8:	706b      	strb	r3, [r5, #1]
 800dbda:	2e01      	cmp	r6, #1
 800dbdc:	d050      	beq.n	800dc80 <ucdr_serialize_uint32_t+0x104>
 800dbde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dbe2:	70ab      	strb	r3, [r5, #2]
 800dbe4:	2e02      	cmp	r6, #2
 800dbe6:	d04f      	beq.n	800dc88 <ucdr_serialize_uint32_t+0x10c>
 800dbe8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dbec:	70eb      	strb	r3, [r5, #3]
 800dbee:	6923      	ldr	r3, [r4, #16]
 800dbf0:	68a2      	ldr	r2, [r4, #8]
 800dbf2:	7da0      	ldrb	r0, [r4, #22]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	1b9e      	subs	r6, r3, r6
 800dbf8:	4442      	add	r2, r8
 800dbfa:	2304      	movs	r3, #4
 800dbfc:	f080 0001 	eor.w	r0, r0, #1
 800dc00:	60a2      	str	r2, [r4, #8]
 800dc02:	6126      	str	r6, [r4, #16]
 800dc04:	7563      	strb	r3, [r4, #21]
 800dc06:	b002      	add	sp, #8
 800dc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc0c:	2104      	movs	r1, #4
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f000 fc6a 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800dc14:	b1d0      	cbz	r0, 800dc4c <ucdr_serialize_uint32_t+0xd0>
 800dc16:	7d23      	ldrb	r3, [r4, #20]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	68a3      	ldr	r3, [r4, #8]
 800dc1c:	d01c      	beq.n	800dc58 <ucdr_serialize_uint32_t+0xdc>
 800dc1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dc22:	701a      	strb	r2, [r3, #0]
 800dc24:	68a3      	ldr	r3, [r4, #8]
 800dc26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc2a:	705a      	strb	r2, [r3, #1]
 800dc2c:	68a3      	ldr	r3, [r4, #8]
 800dc2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc32:	709a      	strb	r2, [r3, #2]
 800dc34:	68a3      	ldr	r3, [r4, #8]
 800dc36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc3a:	70da      	strb	r2, [r3, #3]
 800dc3c:	68a2      	ldr	r2, [r4, #8]
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	3204      	adds	r2, #4
 800dc42:	3304      	adds	r3, #4
 800dc44:	2104      	movs	r1, #4
 800dc46:	60a2      	str	r2, [r4, #8]
 800dc48:	6123      	str	r3, [r4, #16]
 800dc4a:	7561      	strb	r1, [r4, #21]
 800dc4c:	7da0      	ldrb	r0, [r4, #22]
 800dc4e:	f080 0001 	eor.w	r0, r0, #1
 800dc52:	b002      	add	sp, #8
 800dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc58:	9a01      	ldr	r2, [sp, #4]
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	e7ee      	b.n	800dc3c <ucdr_serialize_uint32_t+0xc0>
 800dc5e:	68a2      	ldr	r2, [r4, #8]
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	7da0      	ldrb	r0, [r4, #22]
 800dc64:	7567      	strb	r7, [r4, #21]
 800dc66:	1b92      	subs	r2, r2, r6
 800dc68:	1b9b      	subs	r3, r3, r6
 800dc6a:	f080 0001 	eor.w	r0, r0, #1
 800dc6e:	60a2      	str	r2, [r4, #8]
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	b002      	add	sp, #8
 800dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc7e:	701a      	strb	r2, [r3, #0]
 800dc80:	68a3      	ldr	r3, [r4, #8]
 800dc82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc86:	701a      	strb	r2, [r3, #0]
 800dc88:	68a3      	ldr	r3, [r4, #8]
 800dc8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc8e:	701a      	strb	r2, [r3, #0]
 800dc90:	e7ad      	b.n	800dbee <ucdr_serialize_uint32_t+0x72>
 800dc92:	4628      	mov	r0, r5
 800dc94:	ad01      	add	r5, sp, #4
 800dc96:	4629      	mov	r1, r5
 800dc98:	4632      	mov	r2, r6
 800dc9a:	f002 f866 	bl	800fd6a <memcpy>
 800dc9e:	68a0      	ldr	r0, [r4, #8]
 800dca0:	4642      	mov	r2, r8
 800dca2:	19a9      	adds	r1, r5, r6
 800dca4:	f002 f861 	bl	800fd6a <memcpy>
 800dca8:	e7a1      	b.n	800dbee <ucdr_serialize_uint32_t+0x72>
 800dcaa:	bf00      	nop

0800dcac <ucdr_serialize_endian_uint32_t>:
 800dcac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	460d      	mov	r5, r1
 800dcb4:	2104      	movs	r1, #4
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	9201      	str	r2, [sp, #4]
 800dcba:	f000 fc69 	bl	800e590 <ucdr_buffer_alignment>
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dcc6:	f000 fca7 	bl	800e618 <ucdr_advance_buffer>
 800dcca:	2104      	movs	r1, #4
 800dccc:	4620      	mov	r0, r4
 800dcce:	f000 fbff 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d138      	bne.n	800dd48 <ucdr_serialize_endian_uint32_t+0x9c>
 800dcd6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dcda:	42b7      	cmp	r7, r6
 800dcdc:	d92f      	bls.n	800dd3e <ucdr_serialize_endian_uint32_t+0x92>
 800dcde:	6923      	ldr	r3, [r4, #16]
 800dce0:	60a7      	str	r7, [r4, #8]
 800dce2:	1bbf      	subs	r7, r7, r6
 800dce4:	443b      	add	r3, r7
 800dce6:	f1c7 0904 	rsb	r9, r7, #4
 800dcea:	6123      	str	r3, [r4, #16]
 800dcec:	4649      	mov	r1, r9
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f000 fbfa 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d04a      	beq.n	800dd8e <ucdr_serialize_endian_uint32_t+0xe2>
 800dcf8:	2d01      	cmp	r5, #1
 800dcfa:	d063      	beq.n	800ddc4 <ucdr_serialize_endian_uint32_t+0x118>
 800dcfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd00:	7033      	strb	r3, [r6, #0]
 800dd02:	2f00      	cmp	r7, #0
 800dd04:	d051      	beq.n	800ddaa <ucdr_serialize_endian_uint32_t+0xfe>
 800dd06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd0a:	7073      	strb	r3, [r6, #1]
 800dd0c:	2f01      	cmp	r7, #1
 800dd0e:	d050      	beq.n	800ddb2 <ucdr_serialize_endian_uint32_t+0x106>
 800dd10:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dd14:	70b3      	strb	r3, [r6, #2]
 800dd16:	2f02      	cmp	r7, #2
 800dd18:	d04f      	beq.n	800ddba <ucdr_serialize_endian_uint32_t+0x10e>
 800dd1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd1e:	70f3      	strb	r3, [r6, #3]
 800dd20:	6923      	ldr	r3, [r4, #16]
 800dd22:	68a2      	ldr	r2, [r4, #8]
 800dd24:	7da0      	ldrb	r0, [r4, #22]
 800dd26:	3304      	adds	r3, #4
 800dd28:	444a      	add	r2, r9
 800dd2a:	1bdb      	subs	r3, r3, r7
 800dd2c:	2104      	movs	r1, #4
 800dd2e:	f080 0001 	eor.w	r0, r0, #1
 800dd32:	60a2      	str	r2, [r4, #8]
 800dd34:	6123      	str	r3, [r4, #16]
 800dd36:	7561      	strb	r1, [r4, #21]
 800dd38:	b003      	add	sp, #12
 800dd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd3e:	2104      	movs	r1, #4
 800dd40:	4620      	mov	r0, r4
 800dd42:	f000 fbd1 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800dd46:	b1c8      	cbz	r0, 800dd7c <ucdr_serialize_endian_uint32_t+0xd0>
 800dd48:	2d01      	cmp	r5, #1
 800dd4a:	68a3      	ldr	r3, [r4, #8]
 800dd4c:	d01c      	beq.n	800dd88 <ucdr_serialize_endian_uint32_t+0xdc>
 800dd4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd52:	701a      	strb	r2, [r3, #0]
 800dd54:	68a3      	ldr	r3, [r4, #8]
 800dd56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd5a:	705a      	strb	r2, [r3, #1]
 800dd5c:	68a3      	ldr	r3, [r4, #8]
 800dd5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd62:	709a      	strb	r2, [r3, #2]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd6a:	70da      	strb	r2, [r3, #3]
 800dd6c:	68a2      	ldr	r2, [r4, #8]
 800dd6e:	6923      	ldr	r3, [r4, #16]
 800dd70:	3204      	adds	r2, #4
 800dd72:	3304      	adds	r3, #4
 800dd74:	2104      	movs	r1, #4
 800dd76:	60a2      	str	r2, [r4, #8]
 800dd78:	6123      	str	r3, [r4, #16]
 800dd7a:	7561      	strb	r1, [r4, #21]
 800dd7c:	7da0      	ldrb	r0, [r4, #22]
 800dd7e:	f080 0001 	eor.w	r0, r0, #1
 800dd82:	b003      	add	sp, #12
 800dd84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd88:	9a01      	ldr	r2, [sp, #4]
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	e7ee      	b.n	800dd6c <ucdr_serialize_endian_uint32_t+0xc0>
 800dd8e:	68a2      	ldr	r2, [r4, #8]
 800dd90:	6923      	ldr	r3, [r4, #16]
 800dd92:	7da0      	ldrb	r0, [r4, #22]
 800dd94:	f884 8015 	strb.w	r8, [r4, #21]
 800dd98:	1bd2      	subs	r2, r2, r7
 800dd9a:	1bdb      	subs	r3, r3, r7
 800dd9c:	f080 0001 	eor.w	r0, r0, #1
 800dda0:	60a2      	str	r2, [r4, #8]
 800dda2:	6123      	str	r3, [r4, #16]
 800dda4:	b003      	add	sp, #12
 800dda6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddaa:	68a3      	ldr	r3, [r4, #8]
 800ddac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	68a3      	ldr	r3, [r4, #8]
 800ddb4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	68a3      	ldr	r3, [r4, #8]
 800ddbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddc0:	701a      	strb	r2, [r3, #0]
 800ddc2:	e7ad      	b.n	800dd20 <ucdr_serialize_endian_uint32_t+0x74>
 800ddc4:	ad01      	add	r5, sp, #4
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	463a      	mov	r2, r7
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f001 ffcd 	bl	800fd6a <memcpy>
 800ddd0:	68a0      	ldr	r0, [r4, #8]
 800ddd2:	464a      	mov	r2, r9
 800ddd4:	19e9      	adds	r1, r5, r7
 800ddd6:	f001 ffc8 	bl	800fd6a <memcpy>
 800ddda:	e7a1      	b.n	800dd20 <ucdr_serialize_endian_uint32_t+0x74>

0800dddc <ucdr_deserialize_uint32_t>:
 800dddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dde0:	460d      	mov	r5, r1
 800dde2:	2104      	movs	r1, #4
 800dde4:	4604      	mov	r4, r0
 800dde6:	f000 fbd3 	bl	800e590 <ucdr_buffer_alignment>
 800ddea:	4601      	mov	r1, r0
 800ddec:	4620      	mov	r0, r4
 800ddee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ddf2:	f000 fc11 	bl	800e618 <ucdr_advance_buffer>
 800ddf6:	2104      	movs	r1, #4
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f000 fb69 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d138      	bne.n	800de74 <ucdr_deserialize_uint32_t+0x98>
 800de02:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800de06:	42b7      	cmp	r7, r6
 800de08:	d92f      	bls.n	800de6a <ucdr_deserialize_uint32_t+0x8e>
 800de0a:	6923      	ldr	r3, [r4, #16]
 800de0c:	60a7      	str	r7, [r4, #8]
 800de0e:	1bbf      	subs	r7, r7, r6
 800de10:	443b      	add	r3, r7
 800de12:	f1c7 0904 	rsb	r9, r7, #4
 800de16:	6123      	str	r3, [r4, #16]
 800de18:	4649      	mov	r1, r9
 800de1a:	4620      	mov	r0, r4
 800de1c:	f000 fb64 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800de20:	2800      	cmp	r0, #0
 800de22:	d046      	beq.n	800deb2 <ucdr_deserialize_uint32_t+0xd6>
 800de24:	7d23      	ldrb	r3, [r4, #20]
 800de26:	2b01      	cmp	r3, #1
 800de28:	d05c      	beq.n	800dee4 <ucdr_deserialize_uint32_t+0x108>
 800de2a:	78f3      	ldrb	r3, [r6, #3]
 800de2c:	702b      	strb	r3, [r5, #0]
 800de2e:	2f00      	cmp	r7, #0
 800de30:	d04c      	beq.n	800decc <ucdr_deserialize_uint32_t+0xf0>
 800de32:	78b3      	ldrb	r3, [r6, #2]
 800de34:	706b      	strb	r3, [r5, #1]
 800de36:	2f01      	cmp	r7, #1
 800de38:	f105 0302 	add.w	r3, r5, #2
 800de3c:	d04a      	beq.n	800ded4 <ucdr_deserialize_uint32_t+0xf8>
 800de3e:	7873      	ldrb	r3, [r6, #1]
 800de40:	70ab      	strb	r3, [r5, #2]
 800de42:	2f02      	cmp	r7, #2
 800de44:	f105 0303 	add.w	r3, r5, #3
 800de48:	d048      	beq.n	800dedc <ucdr_deserialize_uint32_t+0x100>
 800de4a:	7833      	ldrb	r3, [r6, #0]
 800de4c:	70eb      	strb	r3, [r5, #3]
 800de4e:	6923      	ldr	r3, [r4, #16]
 800de50:	68a2      	ldr	r2, [r4, #8]
 800de52:	7da0      	ldrb	r0, [r4, #22]
 800de54:	2104      	movs	r1, #4
 800de56:	3304      	adds	r3, #4
 800de58:	444a      	add	r2, r9
 800de5a:	1bdb      	subs	r3, r3, r7
 800de5c:	7561      	strb	r1, [r4, #21]
 800de5e:	60a2      	str	r2, [r4, #8]
 800de60:	6123      	str	r3, [r4, #16]
 800de62:	f080 0001 	eor.w	r0, r0, #1
 800de66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de6a:	2104      	movs	r1, #4
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fb3b 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800de72:	b1b0      	cbz	r0, 800dea2 <ucdr_deserialize_uint32_t+0xc6>
 800de74:	7d23      	ldrb	r3, [r4, #20]
 800de76:	2b01      	cmp	r3, #1
 800de78:	68a3      	ldr	r3, [r4, #8]
 800de7a:	d017      	beq.n	800deac <ucdr_deserialize_uint32_t+0xd0>
 800de7c:	78db      	ldrb	r3, [r3, #3]
 800de7e:	702b      	strb	r3, [r5, #0]
 800de80:	68a3      	ldr	r3, [r4, #8]
 800de82:	789b      	ldrb	r3, [r3, #2]
 800de84:	706b      	strb	r3, [r5, #1]
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	785b      	ldrb	r3, [r3, #1]
 800de8a:	70ab      	strb	r3, [r5, #2]
 800de8c:	68a3      	ldr	r3, [r4, #8]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	70eb      	strb	r3, [r5, #3]
 800de92:	68a2      	ldr	r2, [r4, #8]
 800de94:	6923      	ldr	r3, [r4, #16]
 800de96:	3204      	adds	r2, #4
 800de98:	3304      	adds	r3, #4
 800de9a:	2104      	movs	r1, #4
 800de9c:	60a2      	str	r2, [r4, #8]
 800de9e:	6123      	str	r3, [r4, #16]
 800dea0:	7561      	strb	r1, [r4, #21]
 800dea2:	7da0      	ldrb	r0, [r4, #22]
 800dea4:	f080 0001 	eor.w	r0, r0, #1
 800dea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	602b      	str	r3, [r5, #0]
 800deb0:	e7ef      	b.n	800de92 <ucdr_deserialize_uint32_t+0xb6>
 800deb2:	68a2      	ldr	r2, [r4, #8]
 800deb4:	6923      	ldr	r3, [r4, #16]
 800deb6:	7da0      	ldrb	r0, [r4, #22]
 800deb8:	f884 8015 	strb.w	r8, [r4, #21]
 800debc:	1bd2      	subs	r2, r2, r7
 800debe:	1bdb      	subs	r3, r3, r7
 800dec0:	60a2      	str	r2, [r4, #8]
 800dec2:	6123      	str	r3, [r4, #16]
 800dec4:	f080 0001 	eor.w	r0, r0, #1
 800dec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800decc:	68a3      	ldr	r3, [r4, #8]
 800dece:	789b      	ldrb	r3, [r3, #2]
 800ded0:	706b      	strb	r3, [r5, #1]
 800ded2:	1cab      	adds	r3, r5, #2
 800ded4:	68a2      	ldr	r2, [r4, #8]
 800ded6:	7852      	ldrb	r2, [r2, #1]
 800ded8:	f803 2b01 	strb.w	r2, [r3], #1
 800dedc:	68a2      	ldr	r2, [r4, #8]
 800dede:	7812      	ldrb	r2, [r2, #0]
 800dee0:	701a      	strb	r2, [r3, #0]
 800dee2:	e7b4      	b.n	800de4e <ucdr_deserialize_uint32_t+0x72>
 800dee4:	4631      	mov	r1, r6
 800dee6:	463a      	mov	r2, r7
 800dee8:	4628      	mov	r0, r5
 800deea:	f001 ff3e 	bl	800fd6a <memcpy>
 800deee:	68a1      	ldr	r1, [r4, #8]
 800def0:	464a      	mov	r2, r9
 800def2:	19e8      	adds	r0, r5, r7
 800def4:	f001 ff39 	bl	800fd6a <memcpy>
 800def8:	e7a9      	b.n	800de4e <ucdr_deserialize_uint32_t+0x72>
 800defa:	bf00      	nop

0800defc <ucdr_deserialize_endian_uint32_t>:
 800defc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df00:	460e      	mov	r6, r1
 800df02:	2104      	movs	r1, #4
 800df04:	4604      	mov	r4, r0
 800df06:	4615      	mov	r5, r2
 800df08:	f000 fb42 	bl	800e590 <ucdr_buffer_alignment>
 800df0c:	4601      	mov	r1, r0
 800df0e:	4620      	mov	r0, r4
 800df10:	f894 9015 	ldrb.w	r9, [r4, #21]
 800df14:	f000 fb80 	bl	800e618 <ucdr_advance_buffer>
 800df18:	2104      	movs	r1, #4
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 fad8 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800df20:	2800      	cmp	r0, #0
 800df22:	d13c      	bne.n	800df9e <ucdr_deserialize_endian_uint32_t+0xa2>
 800df24:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800df28:	42bb      	cmp	r3, r7
 800df2a:	d933      	bls.n	800df94 <ucdr_deserialize_endian_uint32_t+0x98>
 800df2c:	eba3 0807 	sub.w	r8, r3, r7
 800df30:	60a3      	str	r3, [r4, #8]
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	f1c8 0a04 	rsb	sl, r8, #4
 800df38:	4443      	add	r3, r8
 800df3a:	6123      	str	r3, [r4, #16]
 800df3c:	4651      	mov	r1, sl
 800df3e:	4620      	mov	r0, r4
 800df40:	f000 fad2 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800df44:	2800      	cmp	r0, #0
 800df46:	d048      	beq.n	800dfda <ucdr_deserialize_endian_uint32_t+0xde>
 800df48:	2e01      	cmp	r6, #1
 800df4a:	d061      	beq.n	800e010 <ucdr_deserialize_endian_uint32_t+0x114>
 800df4c:	78fb      	ldrb	r3, [r7, #3]
 800df4e:	702b      	strb	r3, [r5, #0]
 800df50:	f1b8 0f00 	cmp.w	r8, #0
 800df54:	d050      	beq.n	800dff8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800df56:	78bb      	ldrb	r3, [r7, #2]
 800df58:	706b      	strb	r3, [r5, #1]
 800df5a:	f1b8 0f01 	cmp.w	r8, #1
 800df5e:	f105 0302 	add.w	r3, r5, #2
 800df62:	d04d      	beq.n	800e000 <ucdr_deserialize_endian_uint32_t+0x104>
 800df64:	787b      	ldrb	r3, [r7, #1]
 800df66:	70ab      	strb	r3, [r5, #2]
 800df68:	f1b8 0f02 	cmp.w	r8, #2
 800df6c:	f105 0303 	add.w	r3, r5, #3
 800df70:	d04a      	beq.n	800e008 <ucdr_deserialize_endian_uint32_t+0x10c>
 800df72:	783b      	ldrb	r3, [r7, #0]
 800df74:	70eb      	strb	r3, [r5, #3]
 800df76:	6923      	ldr	r3, [r4, #16]
 800df78:	68a2      	ldr	r2, [r4, #8]
 800df7a:	7da0      	ldrb	r0, [r4, #22]
 800df7c:	2104      	movs	r1, #4
 800df7e:	3304      	adds	r3, #4
 800df80:	4452      	add	r2, sl
 800df82:	eba3 0308 	sub.w	r3, r3, r8
 800df86:	7561      	strb	r1, [r4, #21]
 800df88:	60a2      	str	r2, [r4, #8]
 800df8a:	6123      	str	r3, [r4, #16]
 800df8c:	f080 0001 	eor.w	r0, r0, #1
 800df90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df94:	2104      	movs	r1, #4
 800df96:	4620      	mov	r0, r4
 800df98:	f000 faa6 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800df9c:	b1a8      	cbz	r0, 800dfca <ucdr_deserialize_endian_uint32_t+0xce>
 800df9e:	2e01      	cmp	r6, #1
 800dfa0:	68a3      	ldr	r3, [r4, #8]
 800dfa2:	d017      	beq.n	800dfd4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800dfa4:	78db      	ldrb	r3, [r3, #3]
 800dfa6:	702b      	strb	r3, [r5, #0]
 800dfa8:	68a3      	ldr	r3, [r4, #8]
 800dfaa:	789b      	ldrb	r3, [r3, #2]
 800dfac:	706b      	strb	r3, [r5, #1]
 800dfae:	68a3      	ldr	r3, [r4, #8]
 800dfb0:	785b      	ldrb	r3, [r3, #1]
 800dfb2:	70ab      	strb	r3, [r5, #2]
 800dfb4:	68a3      	ldr	r3, [r4, #8]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	70eb      	strb	r3, [r5, #3]
 800dfba:	68a2      	ldr	r2, [r4, #8]
 800dfbc:	6923      	ldr	r3, [r4, #16]
 800dfbe:	3204      	adds	r2, #4
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	2104      	movs	r1, #4
 800dfc4:	60a2      	str	r2, [r4, #8]
 800dfc6:	6123      	str	r3, [r4, #16]
 800dfc8:	7561      	strb	r1, [r4, #21]
 800dfca:	7da0      	ldrb	r0, [r4, #22]
 800dfcc:	f080 0001 	eor.w	r0, r0, #1
 800dfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	602b      	str	r3, [r5, #0]
 800dfd8:	e7ef      	b.n	800dfba <ucdr_deserialize_endian_uint32_t+0xbe>
 800dfda:	68a2      	ldr	r2, [r4, #8]
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	7da0      	ldrb	r0, [r4, #22]
 800dfe0:	f884 9015 	strb.w	r9, [r4, #21]
 800dfe4:	eba2 0208 	sub.w	r2, r2, r8
 800dfe8:	eba3 0308 	sub.w	r3, r3, r8
 800dfec:	60a2      	str	r2, [r4, #8]
 800dfee:	6123      	str	r3, [r4, #16]
 800dff0:	f080 0001 	eor.w	r0, r0, #1
 800dff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff8:	68a3      	ldr	r3, [r4, #8]
 800dffa:	789b      	ldrb	r3, [r3, #2]
 800dffc:	706b      	strb	r3, [r5, #1]
 800dffe:	1cab      	adds	r3, r5, #2
 800e000:	68a2      	ldr	r2, [r4, #8]
 800e002:	7852      	ldrb	r2, [r2, #1]
 800e004:	f803 2b01 	strb.w	r2, [r3], #1
 800e008:	68a2      	ldr	r2, [r4, #8]
 800e00a:	7812      	ldrb	r2, [r2, #0]
 800e00c:	701a      	strb	r2, [r3, #0]
 800e00e:	e7b2      	b.n	800df76 <ucdr_deserialize_endian_uint32_t+0x7a>
 800e010:	4639      	mov	r1, r7
 800e012:	4642      	mov	r2, r8
 800e014:	4628      	mov	r0, r5
 800e016:	f001 fea8 	bl	800fd6a <memcpy>
 800e01a:	68a1      	ldr	r1, [r4, #8]
 800e01c:	4652      	mov	r2, sl
 800e01e:	eb05 0008 	add.w	r0, r5, r8
 800e022:	f001 fea2 	bl	800fd6a <memcpy>
 800e026:	e7a6      	b.n	800df76 <ucdr_deserialize_endian_uint32_t+0x7a>

0800e028 <ucdr_serialize_uint64_t>:
 800e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e02c:	2108      	movs	r1, #8
 800e02e:	b082      	sub	sp, #8
 800e030:	4604      	mov	r4, r0
 800e032:	e9cd 2300 	strd	r2, r3, [sp]
 800e036:	f000 faab 	bl	800e590 <ucdr_buffer_alignment>
 800e03a:	4601      	mov	r1, r0
 800e03c:	4620      	mov	r0, r4
 800e03e:	7d67      	ldrb	r7, [r4, #21]
 800e040:	f000 faea 	bl	800e618 <ucdr_advance_buffer>
 800e044:	2108      	movs	r1, #8
 800e046:	4620      	mov	r0, r4
 800e048:	f000 fa42 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d14e      	bne.n	800e0ee <ucdr_serialize_uint64_t+0xc6>
 800e050:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e054:	42ab      	cmp	r3, r5
 800e056:	d945      	bls.n	800e0e4 <ucdr_serialize_uint64_t+0xbc>
 800e058:	1b5e      	subs	r6, r3, r5
 800e05a:	60a3      	str	r3, [r4, #8]
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	f1c6 0808 	rsb	r8, r6, #8
 800e062:	4433      	add	r3, r6
 800e064:	6123      	str	r3, [r4, #16]
 800e066:	4641      	mov	r1, r8
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 fa3d 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d074      	beq.n	800e15c <ucdr_serialize_uint64_t+0x134>
 800e072:	7d23      	ldrb	r3, [r4, #20]
 800e074:	2b01      	cmp	r3, #1
 800e076:	f000 809b 	beq.w	800e1b0 <ucdr_serialize_uint64_t+0x188>
 800e07a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e07e:	702b      	strb	r3, [r5, #0]
 800e080:	2e00      	cmp	r6, #0
 800e082:	d078      	beq.n	800e176 <ucdr_serialize_uint64_t+0x14e>
 800e084:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e088:	706b      	strb	r3, [r5, #1]
 800e08a:	2e01      	cmp	r6, #1
 800e08c:	d077      	beq.n	800e17e <ucdr_serialize_uint64_t+0x156>
 800e08e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e092:	70ab      	strb	r3, [r5, #2]
 800e094:	2e02      	cmp	r6, #2
 800e096:	d076      	beq.n	800e186 <ucdr_serialize_uint64_t+0x15e>
 800e098:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e09c:	70eb      	strb	r3, [r5, #3]
 800e09e:	2e03      	cmp	r6, #3
 800e0a0:	d075      	beq.n	800e18e <ucdr_serialize_uint64_t+0x166>
 800e0a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e0a6:	712b      	strb	r3, [r5, #4]
 800e0a8:	2e04      	cmp	r6, #4
 800e0aa:	d074      	beq.n	800e196 <ucdr_serialize_uint64_t+0x16e>
 800e0ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e0b0:	716b      	strb	r3, [r5, #5]
 800e0b2:	2e05      	cmp	r6, #5
 800e0b4:	d073      	beq.n	800e19e <ucdr_serialize_uint64_t+0x176>
 800e0b6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e0ba:	71ab      	strb	r3, [r5, #6]
 800e0bc:	2e06      	cmp	r6, #6
 800e0be:	d072      	beq.n	800e1a6 <ucdr_serialize_uint64_t+0x17e>
 800e0c0:	f89d 3000 	ldrb.w	r3, [sp]
 800e0c4:	71eb      	strb	r3, [r5, #7]
 800e0c6:	6923      	ldr	r3, [r4, #16]
 800e0c8:	68a2      	ldr	r2, [r4, #8]
 800e0ca:	7da0      	ldrb	r0, [r4, #22]
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	1b9e      	subs	r6, r3, r6
 800e0d0:	4442      	add	r2, r8
 800e0d2:	2308      	movs	r3, #8
 800e0d4:	f080 0001 	eor.w	r0, r0, #1
 800e0d8:	60a2      	str	r2, [r4, #8]
 800e0da:	6126      	str	r6, [r4, #16]
 800e0dc:	7563      	strb	r3, [r4, #21]
 800e0de:	b002      	add	sp, #8
 800e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e4:	2108      	movs	r1, #8
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 f9fe 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e0ec:	b350      	cbz	r0, 800e144 <ucdr_serialize_uint64_t+0x11c>
 800e0ee:	7d23      	ldrb	r3, [r4, #20]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d02d      	beq.n	800e150 <ucdr_serialize_uint64_t+0x128>
 800e0f4:	68a3      	ldr	r3, [r4, #8]
 800e0f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e0fa:	701a      	strb	r2, [r3, #0]
 800e0fc:	68a3      	ldr	r3, [r4, #8]
 800e0fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e102:	705a      	strb	r2, [r3, #1]
 800e104:	68a3      	ldr	r3, [r4, #8]
 800e106:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e10a:	709a      	strb	r2, [r3, #2]
 800e10c:	68a3      	ldr	r3, [r4, #8]
 800e10e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e112:	70da      	strb	r2, [r3, #3]
 800e114:	68a3      	ldr	r3, [r4, #8]
 800e116:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e11a:	711a      	strb	r2, [r3, #4]
 800e11c:	68a3      	ldr	r3, [r4, #8]
 800e11e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e122:	715a      	strb	r2, [r3, #5]
 800e124:	68a3      	ldr	r3, [r4, #8]
 800e126:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e12a:	719a      	strb	r2, [r3, #6]
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	f89d 2000 	ldrb.w	r2, [sp]
 800e132:	71da      	strb	r2, [r3, #7]
 800e134:	68a2      	ldr	r2, [r4, #8]
 800e136:	6923      	ldr	r3, [r4, #16]
 800e138:	3208      	adds	r2, #8
 800e13a:	3308      	adds	r3, #8
 800e13c:	2108      	movs	r1, #8
 800e13e:	60a2      	str	r2, [r4, #8]
 800e140:	6123      	str	r3, [r4, #16]
 800e142:	7561      	strb	r1, [r4, #21]
 800e144:	7da0      	ldrb	r0, [r4, #22]
 800e146:	f080 0001 	eor.w	r0, r0, #1
 800e14a:	b002      	add	sp, #8
 800e14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e150:	466b      	mov	r3, sp
 800e152:	cb03      	ldmia	r3!, {r0, r1}
 800e154:	68a3      	ldr	r3, [r4, #8]
 800e156:	6018      	str	r0, [r3, #0]
 800e158:	6059      	str	r1, [r3, #4]
 800e15a:	e7eb      	b.n	800e134 <ucdr_serialize_uint64_t+0x10c>
 800e15c:	68a2      	ldr	r2, [r4, #8]
 800e15e:	6923      	ldr	r3, [r4, #16]
 800e160:	7da0      	ldrb	r0, [r4, #22]
 800e162:	7567      	strb	r7, [r4, #21]
 800e164:	1b92      	subs	r2, r2, r6
 800e166:	1b9b      	subs	r3, r3, r6
 800e168:	f080 0001 	eor.w	r0, r0, #1
 800e16c:	60a2      	str	r2, [r4, #8]
 800e16e:	6123      	str	r3, [r4, #16]
 800e170:	b002      	add	sp, #8
 800e172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e176:	68a3      	ldr	r3, [r4, #8]
 800e178:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	68a3      	ldr	r3, [r4, #8]
 800e188:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e194:	701a      	strb	r2, [r3, #0]
 800e196:	68a3      	ldr	r3, [r4, #8]
 800e198:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e19c:	701a      	strb	r2, [r3, #0]
 800e19e:	68a3      	ldr	r3, [r4, #8]
 800e1a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e1a4:	701a      	strb	r2, [r3, #0]
 800e1a6:	68a3      	ldr	r3, [r4, #8]
 800e1a8:	f89d 2000 	ldrb.w	r2, [sp]
 800e1ac:	701a      	strb	r2, [r3, #0]
 800e1ae:	e78a      	b.n	800e0c6 <ucdr_serialize_uint64_t+0x9e>
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	466d      	mov	r5, sp
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	4632      	mov	r2, r6
 800e1b8:	f001 fdd7 	bl	800fd6a <memcpy>
 800e1bc:	68a0      	ldr	r0, [r4, #8]
 800e1be:	4642      	mov	r2, r8
 800e1c0:	19a9      	adds	r1, r5, r6
 800e1c2:	f001 fdd2 	bl	800fd6a <memcpy>
 800e1c6:	e77e      	b.n	800e0c6 <ucdr_serialize_uint64_t+0x9e>

0800e1c8 <ucdr_serialize_int16_t>:
 800e1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1cc:	b082      	sub	sp, #8
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	2102      	movs	r1, #2
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e1d8:	f000 f9da 	bl	800e590 <ucdr_buffer_alignment>
 800e1dc:	4601      	mov	r1, r0
 800e1de:	4620      	mov	r0, r4
 800e1e0:	7d67      	ldrb	r7, [r4, #21]
 800e1e2:	f000 fa19 	bl	800e618 <ucdr_advance_buffer>
 800e1e6:	2102      	movs	r1, #2
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f000 f971 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800e1ee:	bb78      	cbnz	r0, 800e250 <ucdr_serialize_int16_t+0x88>
 800e1f0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e1f4:	42ab      	cmp	r3, r5
 800e1f6:	d926      	bls.n	800e246 <ucdr_serialize_int16_t+0x7e>
 800e1f8:	1b5e      	subs	r6, r3, r5
 800e1fa:	60a3      	str	r3, [r4, #8]
 800e1fc:	6923      	ldr	r3, [r4, #16]
 800e1fe:	f1c6 0802 	rsb	r8, r6, #2
 800e202:	4433      	add	r3, r6
 800e204:	6123      	str	r3, [r4, #16]
 800e206:	4641      	mov	r1, r8
 800e208:	4620      	mov	r0, r4
 800e20a:	f000 f96d 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d03b      	beq.n	800e28a <ucdr_serialize_int16_t+0xc2>
 800e212:	7d23      	ldrb	r3, [r4, #20]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d04a      	beq.n	800e2ae <ucdr_serialize_int16_t+0xe6>
 800e218:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e21c:	702b      	strb	r3, [r5, #0]
 800e21e:	2e00      	cmp	r6, #0
 800e220:	d040      	beq.n	800e2a4 <ucdr_serialize_int16_t+0xdc>
 800e222:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e226:	706b      	strb	r3, [r5, #1]
 800e228:	6923      	ldr	r3, [r4, #16]
 800e22a:	68a2      	ldr	r2, [r4, #8]
 800e22c:	7da0      	ldrb	r0, [r4, #22]
 800e22e:	3302      	adds	r3, #2
 800e230:	1b9e      	subs	r6, r3, r6
 800e232:	4442      	add	r2, r8
 800e234:	2302      	movs	r3, #2
 800e236:	f080 0001 	eor.w	r0, r0, #1
 800e23a:	60a2      	str	r2, [r4, #8]
 800e23c:	6126      	str	r6, [r4, #16]
 800e23e:	7563      	strb	r3, [r4, #21]
 800e240:	b002      	add	sp, #8
 800e242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e246:	2102      	movs	r1, #2
 800e248:	4620      	mov	r0, r4
 800e24a:	f000 f94d 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e24e:	b190      	cbz	r0, 800e276 <ucdr_serialize_int16_t+0xae>
 800e250:	7d23      	ldrb	r3, [r4, #20]
 800e252:	2b01      	cmp	r3, #1
 800e254:	68a3      	ldr	r3, [r4, #8]
 800e256:	d014      	beq.n	800e282 <ucdr_serialize_int16_t+0xba>
 800e258:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e25c:	701a      	strb	r2, [r3, #0]
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e264:	705a      	strb	r2, [r3, #1]
 800e266:	68a2      	ldr	r2, [r4, #8]
 800e268:	6923      	ldr	r3, [r4, #16]
 800e26a:	3202      	adds	r2, #2
 800e26c:	3302      	adds	r3, #2
 800e26e:	2102      	movs	r1, #2
 800e270:	60a2      	str	r2, [r4, #8]
 800e272:	6123      	str	r3, [r4, #16]
 800e274:	7561      	strb	r1, [r4, #21]
 800e276:	7da0      	ldrb	r0, [r4, #22]
 800e278:	f080 0001 	eor.w	r0, r0, #1
 800e27c:	b002      	add	sp, #8
 800e27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e282:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e286:	801a      	strh	r2, [r3, #0]
 800e288:	e7ed      	b.n	800e266 <ucdr_serialize_int16_t+0x9e>
 800e28a:	68a2      	ldr	r2, [r4, #8]
 800e28c:	6923      	ldr	r3, [r4, #16]
 800e28e:	7da0      	ldrb	r0, [r4, #22]
 800e290:	7567      	strb	r7, [r4, #21]
 800e292:	1b92      	subs	r2, r2, r6
 800e294:	1b9b      	subs	r3, r3, r6
 800e296:	f080 0001 	eor.w	r0, r0, #1
 800e29a:	60a2      	str	r2, [r4, #8]
 800e29c:	6123      	str	r3, [r4, #16]
 800e29e:	b002      	add	sp, #8
 800e2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a4:	68a3      	ldr	r3, [r4, #8]
 800e2a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2aa:	701a      	strb	r2, [r3, #0]
 800e2ac:	e7bc      	b.n	800e228 <ucdr_serialize_int16_t+0x60>
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f10d 0506 	add.w	r5, sp, #6
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	4632      	mov	r2, r6
 800e2b8:	f001 fd57 	bl	800fd6a <memcpy>
 800e2bc:	68a0      	ldr	r0, [r4, #8]
 800e2be:	4642      	mov	r2, r8
 800e2c0:	19a9      	adds	r1, r5, r6
 800e2c2:	f001 fd52 	bl	800fd6a <memcpy>
 800e2c6:	e7af      	b.n	800e228 <ucdr_serialize_int16_t+0x60>

0800e2c8 <ucdr_deserialize_int16_t>:
 800e2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2cc:	460d      	mov	r5, r1
 800e2ce:	2102      	movs	r1, #2
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	f000 f95d 	bl	800e590 <ucdr_buffer_alignment>
 800e2d6:	4601      	mov	r1, r0
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e2de:	f000 f99b 	bl	800e618 <ucdr_advance_buffer>
 800e2e2:	2102      	movs	r1, #2
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 f8f3 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800e2ea:	bb60      	cbnz	r0, 800e346 <ucdr_deserialize_int16_t+0x7e>
 800e2ec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e2f0:	42be      	cmp	r6, r7
 800e2f2:	d923      	bls.n	800e33c <ucdr_deserialize_int16_t+0x74>
 800e2f4:	6923      	ldr	r3, [r4, #16]
 800e2f6:	60a6      	str	r6, [r4, #8]
 800e2f8:	1bf6      	subs	r6, r6, r7
 800e2fa:	4433      	add	r3, r6
 800e2fc:	f1c6 0902 	rsb	r9, r6, #2
 800e300:	6123      	str	r3, [r4, #16]
 800e302:	4649      	mov	r1, r9
 800e304:	4620      	mov	r0, r4
 800e306:	f000 f8ef 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d034      	beq.n	800e378 <ucdr_deserialize_int16_t+0xb0>
 800e30e:	7d23      	ldrb	r3, [r4, #20]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d042      	beq.n	800e39a <ucdr_deserialize_int16_t+0xd2>
 800e314:	787b      	ldrb	r3, [r7, #1]
 800e316:	702b      	strb	r3, [r5, #0]
 800e318:	2e00      	cmp	r6, #0
 800e31a:	d03a      	beq.n	800e392 <ucdr_deserialize_int16_t+0xca>
 800e31c:	783b      	ldrb	r3, [r7, #0]
 800e31e:	706b      	strb	r3, [r5, #1]
 800e320:	6923      	ldr	r3, [r4, #16]
 800e322:	68a2      	ldr	r2, [r4, #8]
 800e324:	7da0      	ldrb	r0, [r4, #22]
 800e326:	2102      	movs	r1, #2
 800e328:	3302      	adds	r3, #2
 800e32a:	444a      	add	r2, r9
 800e32c:	1b9b      	subs	r3, r3, r6
 800e32e:	7561      	strb	r1, [r4, #21]
 800e330:	60a2      	str	r2, [r4, #8]
 800e332:	6123      	str	r3, [r4, #16]
 800e334:	f080 0001 	eor.w	r0, r0, #1
 800e338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e33c:	2102      	movs	r1, #2
 800e33e:	4620      	mov	r0, r4
 800e340:	f000 f8d2 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e344:	b180      	cbz	r0, 800e368 <ucdr_deserialize_int16_t+0xa0>
 800e346:	7d23      	ldrb	r3, [r4, #20]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	68a3      	ldr	r3, [r4, #8]
 800e34c:	d011      	beq.n	800e372 <ucdr_deserialize_int16_t+0xaa>
 800e34e:	785b      	ldrb	r3, [r3, #1]
 800e350:	702b      	strb	r3, [r5, #0]
 800e352:	68a3      	ldr	r3, [r4, #8]
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	706b      	strb	r3, [r5, #1]
 800e358:	68a2      	ldr	r2, [r4, #8]
 800e35a:	6923      	ldr	r3, [r4, #16]
 800e35c:	3202      	adds	r2, #2
 800e35e:	3302      	adds	r3, #2
 800e360:	2102      	movs	r1, #2
 800e362:	60a2      	str	r2, [r4, #8]
 800e364:	6123      	str	r3, [r4, #16]
 800e366:	7561      	strb	r1, [r4, #21]
 800e368:	7da0      	ldrb	r0, [r4, #22]
 800e36a:	f080 0001 	eor.w	r0, r0, #1
 800e36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e372:	881b      	ldrh	r3, [r3, #0]
 800e374:	802b      	strh	r3, [r5, #0]
 800e376:	e7ef      	b.n	800e358 <ucdr_deserialize_int16_t+0x90>
 800e378:	68a2      	ldr	r2, [r4, #8]
 800e37a:	6923      	ldr	r3, [r4, #16]
 800e37c:	7da0      	ldrb	r0, [r4, #22]
 800e37e:	f884 8015 	strb.w	r8, [r4, #21]
 800e382:	1b92      	subs	r2, r2, r6
 800e384:	1b9b      	subs	r3, r3, r6
 800e386:	60a2      	str	r2, [r4, #8]
 800e388:	6123      	str	r3, [r4, #16]
 800e38a:	f080 0001 	eor.w	r0, r0, #1
 800e38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e392:	68a3      	ldr	r3, [r4, #8]
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	706b      	strb	r3, [r5, #1]
 800e398:	e7c2      	b.n	800e320 <ucdr_deserialize_int16_t+0x58>
 800e39a:	4639      	mov	r1, r7
 800e39c:	4632      	mov	r2, r6
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f001 fce3 	bl	800fd6a <memcpy>
 800e3a4:	68a1      	ldr	r1, [r4, #8]
 800e3a6:	464a      	mov	r2, r9
 800e3a8:	19a8      	adds	r0, r5, r6
 800e3aa:	f001 fcde 	bl	800fd6a <memcpy>
 800e3ae:	e7b7      	b.n	800e320 <ucdr_deserialize_int16_t+0x58>

0800e3b0 <ucdr_deserialize_int32_t>:
 800e3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	2104      	movs	r1, #4
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	f000 f8e9 	bl	800e590 <ucdr_buffer_alignment>
 800e3be:	4601      	mov	r1, r0
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e3c6:	f000 f927 	bl	800e618 <ucdr_advance_buffer>
 800e3ca:	2104      	movs	r1, #4
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 f87f 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d138      	bne.n	800e448 <ucdr_deserialize_int32_t+0x98>
 800e3d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e3da:	42b7      	cmp	r7, r6
 800e3dc:	d92f      	bls.n	800e43e <ucdr_deserialize_int32_t+0x8e>
 800e3de:	6923      	ldr	r3, [r4, #16]
 800e3e0:	60a7      	str	r7, [r4, #8]
 800e3e2:	1bbf      	subs	r7, r7, r6
 800e3e4:	443b      	add	r3, r7
 800e3e6:	f1c7 0904 	rsb	r9, r7, #4
 800e3ea:	6123      	str	r3, [r4, #16]
 800e3ec:	4649      	mov	r1, r9
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 f87a 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d046      	beq.n	800e486 <ucdr_deserialize_int32_t+0xd6>
 800e3f8:	7d23      	ldrb	r3, [r4, #20]
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d05c      	beq.n	800e4b8 <ucdr_deserialize_int32_t+0x108>
 800e3fe:	78f3      	ldrb	r3, [r6, #3]
 800e400:	702b      	strb	r3, [r5, #0]
 800e402:	2f00      	cmp	r7, #0
 800e404:	d04c      	beq.n	800e4a0 <ucdr_deserialize_int32_t+0xf0>
 800e406:	78b3      	ldrb	r3, [r6, #2]
 800e408:	706b      	strb	r3, [r5, #1]
 800e40a:	2f01      	cmp	r7, #1
 800e40c:	f105 0302 	add.w	r3, r5, #2
 800e410:	d04a      	beq.n	800e4a8 <ucdr_deserialize_int32_t+0xf8>
 800e412:	7873      	ldrb	r3, [r6, #1]
 800e414:	70ab      	strb	r3, [r5, #2]
 800e416:	2f02      	cmp	r7, #2
 800e418:	f105 0303 	add.w	r3, r5, #3
 800e41c:	d048      	beq.n	800e4b0 <ucdr_deserialize_int32_t+0x100>
 800e41e:	7833      	ldrb	r3, [r6, #0]
 800e420:	70eb      	strb	r3, [r5, #3]
 800e422:	6923      	ldr	r3, [r4, #16]
 800e424:	68a2      	ldr	r2, [r4, #8]
 800e426:	7da0      	ldrb	r0, [r4, #22]
 800e428:	2104      	movs	r1, #4
 800e42a:	3304      	adds	r3, #4
 800e42c:	444a      	add	r2, r9
 800e42e:	1bdb      	subs	r3, r3, r7
 800e430:	7561      	strb	r1, [r4, #21]
 800e432:	60a2      	str	r2, [r4, #8]
 800e434:	6123      	str	r3, [r4, #16]
 800e436:	f080 0001 	eor.w	r0, r0, #1
 800e43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e43e:	2104      	movs	r1, #4
 800e440:	4620      	mov	r0, r4
 800e442:	f000 f851 	bl	800e4e8 <ucdr_check_final_buffer_behavior>
 800e446:	b1b0      	cbz	r0, 800e476 <ucdr_deserialize_int32_t+0xc6>
 800e448:	7d23      	ldrb	r3, [r4, #20]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	68a3      	ldr	r3, [r4, #8]
 800e44e:	d017      	beq.n	800e480 <ucdr_deserialize_int32_t+0xd0>
 800e450:	78db      	ldrb	r3, [r3, #3]
 800e452:	702b      	strb	r3, [r5, #0]
 800e454:	68a3      	ldr	r3, [r4, #8]
 800e456:	789b      	ldrb	r3, [r3, #2]
 800e458:	706b      	strb	r3, [r5, #1]
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	785b      	ldrb	r3, [r3, #1]
 800e45e:	70ab      	strb	r3, [r5, #2]
 800e460:	68a3      	ldr	r3, [r4, #8]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	70eb      	strb	r3, [r5, #3]
 800e466:	68a2      	ldr	r2, [r4, #8]
 800e468:	6923      	ldr	r3, [r4, #16]
 800e46a:	3204      	adds	r2, #4
 800e46c:	3304      	adds	r3, #4
 800e46e:	2104      	movs	r1, #4
 800e470:	60a2      	str	r2, [r4, #8]
 800e472:	6123      	str	r3, [r4, #16]
 800e474:	7561      	strb	r1, [r4, #21]
 800e476:	7da0      	ldrb	r0, [r4, #22]
 800e478:	f080 0001 	eor.w	r0, r0, #1
 800e47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	e7ef      	b.n	800e466 <ucdr_deserialize_int32_t+0xb6>
 800e486:	68a2      	ldr	r2, [r4, #8]
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	7da0      	ldrb	r0, [r4, #22]
 800e48c:	f884 8015 	strb.w	r8, [r4, #21]
 800e490:	1bd2      	subs	r2, r2, r7
 800e492:	1bdb      	subs	r3, r3, r7
 800e494:	60a2      	str	r2, [r4, #8]
 800e496:	6123      	str	r3, [r4, #16]
 800e498:	f080 0001 	eor.w	r0, r0, #1
 800e49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a0:	68a3      	ldr	r3, [r4, #8]
 800e4a2:	789b      	ldrb	r3, [r3, #2]
 800e4a4:	706b      	strb	r3, [r5, #1]
 800e4a6:	1cab      	adds	r3, r5, #2
 800e4a8:	68a2      	ldr	r2, [r4, #8]
 800e4aa:	7852      	ldrb	r2, [r2, #1]
 800e4ac:	f803 2b01 	strb.w	r2, [r3], #1
 800e4b0:	68a2      	ldr	r2, [r4, #8]
 800e4b2:	7812      	ldrb	r2, [r2, #0]
 800e4b4:	701a      	strb	r2, [r3, #0]
 800e4b6:	e7b4      	b.n	800e422 <ucdr_deserialize_int32_t+0x72>
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	463a      	mov	r2, r7
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f001 fc54 	bl	800fd6a <memcpy>
 800e4c2:	68a1      	ldr	r1, [r4, #8]
 800e4c4:	464a      	mov	r2, r9
 800e4c6:	19e8      	adds	r0, r5, r7
 800e4c8:	f001 fc4f 	bl	800fd6a <memcpy>
 800e4cc:	e7a9      	b.n	800e422 <ucdr_deserialize_int32_t+0x72>
 800e4ce:	bf00      	nop

0800e4d0 <ucdr_check_buffer_available_for>:
 800e4d0:	7d83      	ldrb	r3, [r0, #22]
 800e4d2:	b93b      	cbnz	r3, 800e4e4 <ucdr_check_buffer_available_for+0x14>
 800e4d4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e4d8:	4419      	add	r1, r3
 800e4da:	4288      	cmp	r0, r1
 800e4dc:	bf34      	ite	cc
 800e4de:	2000      	movcc	r0, #0
 800e4e0:	2001      	movcs	r0, #1
 800e4e2:	4770      	bx	lr
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	4770      	bx	lr

0800e4e8 <ucdr_check_final_buffer_behavior>:
 800e4e8:	7d83      	ldrb	r3, [r0, #22]
 800e4ea:	b943      	cbnz	r3, 800e4fe <ucdr_check_final_buffer_behavior+0x16>
 800e4ec:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e4f0:	4291      	cmp	r1, r2
 800e4f2:	b510      	push	{r4, lr}
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	d205      	bcs.n	800e504 <ucdr_check_final_buffer_behavior+0x1c>
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	2300      	movs	r3, #0
 800e500:	4618      	mov	r0, r3
 800e502:	4770      	bx	lr
 800e504:	6982      	ldr	r2, [r0, #24]
 800e506:	b13a      	cbz	r2, 800e518 <ucdr_check_final_buffer_behavior+0x30>
 800e508:	69c1      	ldr	r1, [r0, #28]
 800e50a:	4790      	blx	r2
 800e50c:	f080 0301 	eor.w	r3, r0, #1
 800e510:	b2db      	uxtb	r3, r3
 800e512:	75a0      	strb	r0, [r4, #22]
 800e514:	4618      	mov	r0, r3
 800e516:	bd10      	pop	{r4, pc}
 800e518:	2001      	movs	r0, #1
 800e51a:	75a0      	strb	r0, [r4, #22]
 800e51c:	e7fa      	b.n	800e514 <ucdr_check_final_buffer_behavior+0x2c>
 800e51e:	bf00      	nop

0800e520 <ucdr_set_on_full_buffer_callback>:
 800e520:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop

0800e528 <ucdr_init_buffer_origin_offset_endian>:
 800e528:	b410      	push	{r4}
 800e52a:	9c01      	ldr	r4, [sp, #4]
 800e52c:	6001      	str	r1, [r0, #0]
 800e52e:	440a      	add	r2, r1
 800e530:	6042      	str	r2, [r0, #4]
 800e532:	190a      	adds	r2, r1, r4
 800e534:	441c      	add	r4, r3
 800e536:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e53a:	6082      	str	r2, [r0, #8]
 800e53c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e540:	7503      	strb	r3, [r0, #20]
 800e542:	2200      	movs	r2, #0
 800e544:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e54c:	7542      	strb	r2, [r0, #21]
 800e54e:	7582      	strb	r2, [r0, #22]
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop

0800e554 <ucdr_init_buffer_origin_offset>:
 800e554:	b510      	push	{r4, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	9c04      	ldr	r4, [sp, #16]
 800e55a:	9400      	str	r4, [sp, #0]
 800e55c:	2401      	movs	r4, #1
 800e55e:	9401      	str	r4, [sp, #4]
 800e560:	f7ff ffe2 	bl	800e528 <ucdr_init_buffer_origin_offset_endian>
 800e564:	b002      	add	sp, #8
 800e566:	bd10      	pop	{r4, pc}

0800e568 <ucdr_init_buffer_origin>:
 800e568:	b510      	push	{r4, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	2400      	movs	r4, #0
 800e56e:	9400      	str	r4, [sp, #0]
 800e570:	f7ff fff0 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800e574:	b002      	add	sp, #8
 800e576:	bd10      	pop	{r4, pc}

0800e578 <ucdr_init_buffer>:
 800e578:	2300      	movs	r3, #0
 800e57a:	f7ff bff5 	b.w	800e568 <ucdr_init_buffer_origin>
 800e57e:	bf00      	nop

0800e580 <ucdr_alignment>:
 800e580:	fbb0 f3f1 	udiv	r3, r0, r1
 800e584:	fb03 0011 	mls	r0, r3, r1, r0
 800e588:	1a08      	subs	r0, r1, r0
 800e58a:	3901      	subs	r1, #1
 800e58c:	4008      	ands	r0, r1
 800e58e:	4770      	bx	lr

0800e590 <ucdr_buffer_alignment>:
 800e590:	7d43      	ldrb	r3, [r0, #21]
 800e592:	428b      	cmp	r3, r1
 800e594:	d208      	bcs.n	800e5a8 <ucdr_buffer_alignment+0x18>
 800e596:	6900      	ldr	r0, [r0, #16]
 800e598:	fbb0 f3f1 	udiv	r3, r0, r1
 800e59c:	fb01 0013 	mls	r0, r1, r3, r0
 800e5a0:	1a08      	subs	r0, r1, r0
 800e5a2:	3901      	subs	r1, #1
 800e5a4:	4008      	ands	r0, r1
 800e5a6:	4770      	bx	lr
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	4770      	bx	lr

0800e5ac <ucdr_align_to>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	460d      	mov	r5, r1
 800e5b2:	f7ff ffed 	bl	800e590 <ucdr_buffer_alignment>
 800e5b6:	68a3      	ldr	r3, [r4, #8]
 800e5b8:	6921      	ldr	r1, [r4, #16]
 800e5ba:	7565      	strb	r5, [r4, #21]
 800e5bc:	181a      	adds	r2, r3, r0
 800e5be:	6863      	ldr	r3, [r4, #4]
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	4408      	add	r0, r1
 800e5c4:	bf28      	it	cs
 800e5c6:	4613      	movcs	r3, r2
 800e5c8:	6120      	str	r0, [r4, #16]
 800e5ca:	60a3      	str	r3, [r4, #8]
 800e5cc:	bd38      	pop	{r3, r4, r5, pc}
 800e5ce:	bf00      	nop

0800e5d0 <ucdr_buffer_length>:
 800e5d0:	6882      	ldr	r2, [r0, #8]
 800e5d2:	6800      	ldr	r0, [r0, #0]
 800e5d4:	1a10      	subs	r0, r2, r0
 800e5d6:	4770      	bx	lr

0800e5d8 <ucdr_buffer_remaining>:
 800e5d8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e5dc:	1a10      	subs	r0, r2, r0
 800e5de:	4770      	bx	lr

0800e5e0 <ucdr_check_final_buffer_behavior_array>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	7d83      	ldrb	r3, [r0, #22]
 800e5e4:	b963      	cbnz	r3, 800e600 <ucdr_check_final_buffer_behavior_array+0x20>
 800e5e6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	d308      	bcc.n	800e604 <ucdr_check_final_buffer_behavior_array+0x24>
 800e5f2:	b139      	cbz	r1, 800e604 <ucdr_check_final_buffer_behavior_array+0x24>
 800e5f4:	6983      	ldr	r3, [r0, #24]
 800e5f6:	b163      	cbz	r3, 800e612 <ucdr_check_final_buffer_behavior_array+0x32>
 800e5f8:	69c1      	ldr	r1, [r0, #28]
 800e5fa:	4798      	blx	r3
 800e5fc:	75a0      	strb	r0, [r4, #22]
 800e5fe:	b108      	cbz	r0, 800e604 <ucdr_check_final_buffer_behavior_array+0x24>
 800e600:	2000      	movs	r0, #0
 800e602:	bd38      	pop	{r3, r4, r5, pc}
 800e604:	4620      	mov	r0, r4
 800e606:	f7ff ffe7 	bl	800e5d8 <ucdr_buffer_remaining>
 800e60a:	42a8      	cmp	r0, r5
 800e60c:	bf28      	it	cs
 800e60e:	4628      	movcs	r0, r5
 800e610:	bd38      	pop	{r3, r4, r5, pc}
 800e612:	2301      	movs	r3, #1
 800e614:	7583      	strb	r3, [r0, #22]
 800e616:	e7f3      	b.n	800e600 <ucdr_check_final_buffer_behavior_array+0x20>

0800e618 <ucdr_advance_buffer>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4604      	mov	r4, r0
 800e61c:	460d      	mov	r5, r1
 800e61e:	f7ff ff57 	bl	800e4d0 <ucdr_check_buffer_available_for>
 800e622:	b178      	cbz	r0, 800e644 <ucdr_advance_buffer+0x2c>
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	68a2      	ldr	r2, [r4, #8]
 800e628:	442b      	add	r3, r5
 800e62a:	6123      	str	r3, [r4, #16]
 800e62c:	2301      	movs	r3, #1
 800e62e:	442a      	add	r2, r5
 800e630:	7563      	strb	r3, [r4, #21]
 800e632:	60a2      	str	r2, [r4, #8]
 800e634:	bd38      	pop	{r3, r4, r5, pc}
 800e636:	68a2      	ldr	r2, [r4, #8]
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	4402      	add	r2, r0
 800e63c:	4403      	add	r3, r0
 800e63e:	1a2d      	subs	r5, r5, r0
 800e640:	60a2      	str	r2, [r4, #8]
 800e642:	6123      	str	r3, [r4, #16]
 800e644:	4629      	mov	r1, r5
 800e646:	2201      	movs	r2, #1
 800e648:	4620      	mov	r0, r4
 800e64a:	f7ff ffc9 	bl	800e5e0 <ucdr_check_final_buffer_behavior_array>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d1f1      	bne.n	800e636 <ucdr_advance_buffer+0x1e>
 800e652:	2301      	movs	r3, #1
 800e654:	7563      	strb	r3, [r4, #21]
 800e656:	bd38      	pop	{r3, r4, r5, pc}

0800e658 <ucdr_serialize_sequence_char>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	4615      	mov	r5, r2
 800e65c:	460e      	mov	r6, r1
 800e65e:	7d01      	ldrb	r1, [r0, #20]
 800e660:	4604      	mov	r4, r0
 800e662:	f7ff fb23 	bl	800dcac <ucdr_serialize_endian_uint32_t>
 800e666:	b90d      	cbnz	r5, 800e66c <ucdr_serialize_sequence_char+0x14>
 800e668:	2001      	movs	r0, #1
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	7d21      	ldrb	r1, [r4, #20]
 800e66e:	462b      	mov	r3, r5
 800e670:	4632      	mov	r2, r6
 800e672:	4620      	mov	r0, r4
 800e674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e678:	f7fe bf10 	b.w	800d49c <ucdr_serialize_endian_array_char>

0800e67c <ucdr_deserialize_sequence_char>:
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e680:	461d      	mov	r5, r3
 800e682:	4616      	mov	r6, r2
 800e684:	460f      	mov	r7, r1
 800e686:	461a      	mov	r2, r3
 800e688:	7d01      	ldrb	r1, [r0, #20]
 800e68a:	4604      	mov	r4, r0
 800e68c:	f7ff fc36 	bl	800defc <ucdr_deserialize_endian_uint32_t>
 800e690:	682b      	ldr	r3, [r5, #0]
 800e692:	429e      	cmp	r6, r3
 800e694:	bf3c      	itt	cc
 800e696:	2201      	movcc	r2, #1
 800e698:	75a2      	strbcc	r2, [r4, #22]
 800e69a:	b913      	cbnz	r3, 800e6a2 <ucdr_deserialize_sequence_char+0x26>
 800e69c:	2001      	movs	r0, #1
 800e69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a2:	7d21      	ldrb	r1, [r4, #20]
 800e6a4:	463a      	mov	r2, r7
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ac:	f7fe bf28 	b.w	800d500 <ucdr_deserialize_endian_array_char>

0800e6b0 <ucdr_serialize_sequence_uint8_t>:
 800e6b0:	b570      	push	{r4, r5, r6, lr}
 800e6b2:	4615      	mov	r5, r2
 800e6b4:	460e      	mov	r6, r1
 800e6b6:	7d01      	ldrb	r1, [r0, #20]
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	f7ff faf7 	bl	800dcac <ucdr_serialize_endian_uint32_t>
 800e6be:	b90d      	cbnz	r5, 800e6c4 <ucdr_serialize_sequence_uint8_t+0x14>
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	7d21      	ldrb	r1, [r4, #20]
 800e6c6:	462b      	mov	r3, r5
 800e6c8:	4632      	mov	r2, r6
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6d0:	f7fe bf7a 	b.w	800d5c8 <ucdr_serialize_endian_array_uint8_t>

0800e6d4 <ucdr_deserialize_sequence_uint8_t>:
 800e6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d8:	461d      	mov	r5, r3
 800e6da:	4616      	mov	r6, r2
 800e6dc:	460f      	mov	r7, r1
 800e6de:	461a      	mov	r2, r3
 800e6e0:	7d01      	ldrb	r1, [r0, #20]
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	f7ff fc0a 	bl	800defc <ucdr_deserialize_endian_uint32_t>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	429e      	cmp	r6, r3
 800e6ec:	bf3c      	itt	cc
 800e6ee:	2201      	movcc	r2, #1
 800e6f0:	75a2      	strbcc	r2, [r4, #22]
 800e6f2:	b913      	cbnz	r3, 800e6fa <ucdr_deserialize_sequence_uint8_t+0x26>
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6fa:	7d21      	ldrb	r1, [r4, #20]
 800e6fc:	463a      	mov	r2, r7
 800e6fe:	4620      	mov	r0, r4
 800e700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e704:	f7fe bfc4 	b.w	800d690 <ucdr_deserialize_endian_array_uint8_t>

0800e708 <ucdr_serialize_string>:
 800e708:	b510      	push	{r4, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	4604      	mov	r4, r0
 800e70e:	4608      	mov	r0, r1
 800e710:	9101      	str	r1, [sp, #4]
 800e712:	f7f1 fd8f 	bl	8000234 <strlen>
 800e716:	9901      	ldr	r1, [sp, #4]
 800e718:	1c42      	adds	r2, r0, #1
 800e71a:	4620      	mov	r0, r4
 800e71c:	b002      	add	sp, #8
 800e71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e722:	f7ff bf99 	b.w	800e658 <ucdr_serialize_sequence_char>
 800e726:	bf00      	nop

0800e728 <ucdr_deserialize_string>:
 800e728:	b500      	push	{lr}
 800e72a:	b083      	sub	sp, #12
 800e72c:	ab01      	add	r3, sp, #4
 800e72e:	f7ff ffa5 	bl	800e67c <ucdr_deserialize_sequence_char>
 800e732:	b003      	add	sp, #12
 800e734:	f85d fb04 	ldr.w	pc, [sp], #4

0800e738 <uxr_init_input_best_effort_stream>:
 800e738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e73c:	8003      	strh	r3, [r0, #0]
 800e73e:	4770      	bx	lr

0800e740 <uxr_reset_input_best_effort_stream>:
 800e740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e744:	8003      	strh	r3, [r0, #0]
 800e746:	4770      	bx	lr

0800e748 <uxr_receive_best_effort_message>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	4604      	mov	r4, r0
 800e74c:	8800      	ldrh	r0, [r0, #0]
 800e74e:	460d      	mov	r5, r1
 800e750:	f000 fd18 	bl	800f184 <uxr_seq_num_cmp>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800e75c:	bfb8      	it	lt
 800e75e:	8025      	strhlt	r5, [r4, #0]
 800e760:	bd38      	pop	{r3, r4, r5, pc}
 800e762:	bf00      	nop

0800e764 <on_full_input_buffer>:
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	4605      	mov	r5, r0
 800e768:	460c      	mov	r4, r1
 800e76a:	682b      	ldr	r3, [r5, #0]
 800e76c:	6809      	ldr	r1, [r1, #0]
 800e76e:	8920      	ldrh	r0, [r4, #8]
 800e770:	6862      	ldr	r2, [r4, #4]
 800e772:	fbb2 f2f0 	udiv	r2, r2, r0
 800e776:	eba3 0c01 	sub.w	ip, r3, r1
 800e77a:	fbbc fcf2 	udiv	ip, ip, r2
 800e77e:	f10c 0c01 	add.w	ip, ip, #1
 800e782:	fa1f f38c 	uxth.w	r3, ip
 800e786:	fbb3 f6f0 	udiv	r6, r3, r0
 800e78a:	fb00 3316 	mls	r3, r0, r6, r3
 800e78e:	b29b      	uxth	r3, r3
 800e790:	fb02 f303 	mul.w	r3, r2, r3
 800e794:	1d18      	adds	r0, r3, #4
 800e796:	4408      	add	r0, r1
 800e798:	7d26      	ldrb	r6, [r4, #20]
 800e79a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e79e:	b116      	cbz	r6, 800e7a6 <on_full_input_buffer+0x42>
 800e7a0:	2600      	movs	r6, #0
 800e7a2:	f840 6c04 	str.w	r6, [r0, #-4]
 800e7a6:	2a03      	cmp	r2, #3
 800e7a8:	d801      	bhi.n	800e7ae <on_full_input_buffer+0x4a>
 800e7aa:	2001      	movs	r0, #1
 800e7ac:	bd70      	pop	{r4, r5, r6, pc}
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	4419      	add	r1, r3
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	692b      	ldr	r3, [r5, #16]
 800e7b6:	3a04      	subs	r2, #4
 800e7b8:	f7ff fed6 	bl	800e568 <ucdr_init_buffer_origin>
 800e7bc:	4628      	mov	r0, r5
 800e7be:	4903      	ldr	r1, [pc, #12]	@ (800e7cc <on_full_input_buffer+0x68>)
 800e7c0:	4622      	mov	r2, r4
 800e7c2:	f7ff fead 	bl	800e520 <ucdr_set_on_full_buffer_callback>
 800e7c6:	2000      	movs	r0, #0
 800e7c8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ca:	bf00      	nop
 800e7cc:	0800e765 	.word	0x0800e765

0800e7d0 <uxr_init_input_reliable_stream>:
 800e7d0:	b500      	push	{lr}
 800e7d2:	e9c0 1200 	strd	r1, r2, [r0]
 800e7d6:	f04f 0e00 	mov.w	lr, #0
 800e7da:	9a01      	ldr	r2, [sp, #4]
 800e7dc:	8103      	strh	r3, [r0, #8]
 800e7de:	6102      	str	r2, [r0, #16]
 800e7e0:	f880 e014 	strb.w	lr, [r0, #20]
 800e7e4:	b1d3      	cbz	r3, 800e81c <uxr_init_input_reliable_stream+0x4c>
 800e7e6:	f8c1 e000 	str.w	lr, [r1]
 800e7ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e7ee:	f1bc 0f01 	cmp.w	ip, #1
 800e7f2:	d913      	bls.n	800e81c <uxr_init_input_reliable_stream+0x4c>
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	fbb3 f1fc 	udiv	r1, r3, ip
 800e7fa:	fb0c 3111 	mls	r1, ip, r1, r3
 800e7fe:	b289      	uxth	r1, r1
 800e800:	6842      	ldr	r2, [r0, #4]
 800e802:	fbb2 f2fc 	udiv	r2, r2, ip
 800e806:	fb01 f202 	mul.w	r2, r1, r2
 800e80a:	6801      	ldr	r1, [r0, #0]
 800e80c:	f841 e002 	str.w	lr, [r1, r2]
 800e810:	3301      	adds	r3, #1
 800e812:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e816:	b29b      	uxth	r3, r3
 800e818:	459c      	cmp	ip, r3
 800e81a:	d8ec      	bhi.n	800e7f6 <uxr_init_input_reliable_stream+0x26>
 800e81c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e820:	60c3      	str	r3, [r0, #12]
 800e822:	f85d fb04 	ldr.w	pc, [sp], #4
 800e826:	bf00      	nop

0800e828 <uxr_reset_input_reliable_stream>:
 800e828:	8901      	ldrh	r1, [r0, #8]
 800e82a:	b1e9      	cbz	r1, 800e868 <uxr_reset_input_reliable_stream+0x40>
 800e82c:	f04f 0c00 	mov.w	ip, #0
 800e830:	b500      	push	{lr}
 800e832:	4663      	mov	r3, ip
 800e834:	46e6      	mov	lr, ip
 800e836:	fbb3 f2f1 	udiv	r2, r3, r1
 800e83a:	fb01 3312 	mls	r3, r1, r2, r3
 800e83e:	b29b      	uxth	r3, r3
 800e840:	6842      	ldr	r2, [r0, #4]
 800e842:	fbb2 f2f1 	udiv	r2, r2, r1
 800e846:	fb02 f303 	mul.w	r3, r2, r3
 800e84a:	6802      	ldr	r2, [r0, #0]
 800e84c:	f842 e003 	str.w	lr, [r2, r3]
 800e850:	f10c 0c01 	add.w	ip, ip, #1
 800e854:	8901      	ldrh	r1, [r0, #8]
 800e856:	fa1f f38c 	uxth.w	r3, ip
 800e85a:	4299      	cmp	r1, r3
 800e85c:	d8eb      	bhi.n	800e836 <uxr_reset_input_reliable_stream+0xe>
 800e85e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e862:	60c3      	str	r3, [r0, #12]
 800e864:	f85d fb04 	ldr.w	pc, [sp], #4
 800e868:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e86c:	60c3      	str	r3, [r0, #12]
 800e86e:	4770      	bx	lr

0800e870 <uxr_receive_reliable_message>:
 800e870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e874:	4604      	mov	r4, r0
 800e876:	460d      	mov	r5, r1
 800e878:	8901      	ldrh	r1, [r0, #8]
 800e87a:	8980      	ldrh	r0, [r0, #12]
 800e87c:	4690      	mov	r8, r2
 800e87e:	461f      	mov	r7, r3
 800e880:	f000 fc78 	bl	800f174 <uxr_seq_num_add>
 800e884:	4629      	mov	r1, r5
 800e886:	4606      	mov	r6, r0
 800e888:	89a0      	ldrh	r0, [r4, #12]
 800e88a:	f000 fc7b 	bl	800f184 <uxr_seq_num_cmp>
 800e88e:	2800      	cmp	r0, #0
 800e890:	db0a      	blt.n	800e8a8 <uxr_receive_reliable_message+0x38>
 800e892:	2600      	movs	r6, #0
 800e894:	89e0      	ldrh	r0, [r4, #14]
 800e896:	4629      	mov	r1, r5
 800e898:	f000 fc74 	bl	800f184 <uxr_seq_num_cmp>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	da00      	bge.n	800e8a2 <uxr_receive_reliable_message+0x32>
 800e8a0:	81e5      	strh	r5, [r4, #14]
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	f000 fc6a 	bl	800f184 <uxr_seq_num_cmp>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	dbee      	blt.n	800e892 <uxr_receive_reliable_message+0x22>
 800e8b4:	6923      	ldr	r3, [r4, #16]
 800e8b6:	4640      	mov	r0, r8
 800e8b8:	4798      	blx	r3
 800e8ba:	2101      	movs	r1, #1
 800e8bc:	4681      	mov	r9, r0
 800e8be:	89a0      	ldrh	r0, [r4, #12]
 800e8c0:	f000 fc58 	bl	800f174 <uxr_seq_num_add>
 800e8c4:	f1b9 0f00 	cmp.w	r9, #0
 800e8c8:	d101      	bne.n	800e8ce <uxr_receive_reliable_message+0x5e>
 800e8ca:	4285      	cmp	r5, r0
 800e8cc:	d047      	beq.n	800e95e <uxr_receive_reliable_message+0xee>
 800e8ce:	8922      	ldrh	r2, [r4, #8]
 800e8d0:	fbb5 f0f2 	udiv	r0, r5, r2
 800e8d4:	fb02 5010 	mls	r0, r2, r0, r5
 800e8d8:	b280      	uxth	r0, r0
 800e8da:	6863      	ldr	r3, [r4, #4]
 800e8dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8e0:	fb00 f303 	mul.w	r3, r0, r3
 800e8e4:	6820      	ldr	r0, [r4, #0]
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	4418      	add	r0, r3
 800e8ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1cf      	bne.n	800e892 <uxr_receive_reliable_message+0x22>
 800e8f2:	4641      	mov	r1, r8
 800e8f4:	463a      	mov	r2, r7
 800e8f6:	f001 fa38 	bl	800fd6a <memcpy>
 800e8fa:	8921      	ldrh	r1, [r4, #8]
 800e8fc:	fbb5 f2f1 	udiv	r2, r5, r1
 800e900:	fb01 5212 	mls	r2, r1, r2, r5
 800e904:	b292      	uxth	r2, r2
 800e906:	6863      	ldr	r3, [r4, #4]
 800e908:	fbb3 f3f1 	udiv	r3, r3, r1
 800e90c:	fb02 f303 	mul.w	r3, r2, r3
 800e910:	6822      	ldr	r2, [r4, #0]
 800e912:	50d7      	str	r7, [r2, r3]
 800e914:	9a08      	ldr	r2, [sp, #32]
 800e916:	2301      	movs	r3, #1
 800e918:	7013      	strb	r3, [r2, #0]
 800e91a:	f1b9 0f00 	cmp.w	r9, #0
 800e91e:	d0b8      	beq.n	800e892 <uxr_receive_reliable_message+0x22>
 800e920:	89a6      	ldrh	r6, [r4, #12]
 800e922:	4630      	mov	r0, r6
 800e924:	2101      	movs	r1, #1
 800e926:	f000 fc25 	bl	800f174 <uxr_seq_num_add>
 800e92a:	8922      	ldrh	r2, [r4, #8]
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e932:	4606      	mov	r6, r0
 800e934:	fbb0 f0f2 	udiv	r0, r0, r2
 800e938:	fb02 6010 	mls	r0, r2, r0, r6
 800e93c:	b280      	uxth	r0, r0
 800e93e:	fb00 f303 	mul.w	r3, r0, r3
 800e942:	6820      	ldr	r0, [r4, #0]
 800e944:	3304      	adds	r3, #4
 800e946:	4418      	add	r0, r3
 800e948:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d0a0      	beq.n	800e892 <uxr_receive_reliable_message+0x22>
 800e950:	6923      	ldr	r3, [r4, #16]
 800e952:	4798      	blx	r3
 800e954:	2802      	cmp	r0, #2
 800e956:	d008      	beq.n	800e96a <uxr_receive_reliable_message+0xfa>
 800e958:	2801      	cmp	r0, #1
 800e95a:	d0e2      	beq.n	800e922 <uxr_receive_reliable_message+0xb2>
 800e95c:	e799      	b.n	800e892 <uxr_receive_reliable_message+0x22>
 800e95e:	9b08      	ldr	r3, [sp, #32]
 800e960:	81a5      	strh	r5, [r4, #12]
 800e962:	2601      	movs	r6, #1
 800e964:	f883 9000 	strb.w	r9, [r3]
 800e968:	e794      	b.n	800e894 <uxr_receive_reliable_message+0x24>
 800e96a:	2601      	movs	r6, #1
 800e96c:	e792      	b.n	800e894 <uxr_receive_reliable_message+0x24>
 800e96e:	bf00      	nop

0800e970 <uxr_next_input_reliable_buffer_available>:
 800e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e974:	4604      	mov	r4, r0
 800e976:	460f      	mov	r7, r1
 800e978:	8980      	ldrh	r0, [r0, #12]
 800e97a:	2101      	movs	r1, #1
 800e97c:	4690      	mov	r8, r2
 800e97e:	f000 fbf9 	bl	800f174 <uxr_seq_num_add>
 800e982:	8922      	ldrh	r2, [r4, #8]
 800e984:	fbb0 f6f2 	udiv	r6, r0, r2
 800e988:	fb02 0616 	mls	r6, r2, r6, r0
 800e98c:	b2b6      	uxth	r6, r6
 800e98e:	6863      	ldr	r3, [r4, #4]
 800e990:	fbb3 f3f2 	udiv	r3, r3, r2
 800e994:	fb06 f303 	mul.w	r3, r6, r3
 800e998:	6826      	ldr	r6, [r4, #0]
 800e99a:	3304      	adds	r3, #4
 800e99c:	441e      	add	r6, r3
 800e99e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800e9a2:	f1b9 0f00 	cmp.w	r9, #0
 800e9a6:	d023      	beq.n	800e9f0 <uxr_next_input_reliable_buffer_available+0x80>
 800e9a8:	6923      	ldr	r3, [r4, #16]
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	4798      	blx	r3
 800e9b0:	4682      	mov	sl, r0
 800e9b2:	b300      	cbz	r0, 800e9f6 <uxr_next_input_reliable_buffer_available+0x86>
 800e9b4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800e9b8:	2101      	movs	r1, #1
 800e9ba:	4650      	mov	r0, sl
 800e9bc:	f000 fbda 	bl	800f174 <uxr_seq_num_add>
 800e9c0:	8921      	ldrh	r1, [r4, #8]
 800e9c2:	fbb0 f2f1 	udiv	r2, r0, r1
 800e9c6:	4682      	mov	sl, r0
 800e9c8:	fb01 0212 	mls	r2, r1, r2, r0
 800e9cc:	e9d4 0300 	ldrd	r0, r3, [r4]
 800e9d0:	b292      	uxth	r2, r2
 800e9d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9d6:	fb02 f303 	mul.w	r3, r2, r3
 800e9da:	3304      	adds	r3, #4
 800e9dc:	4418      	add	r0, r3
 800e9de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e9e2:	b12b      	cbz	r3, 800e9f0 <uxr_next_input_reliable_buffer_available+0x80>
 800e9e4:	6923      	ldr	r3, [r4, #16]
 800e9e6:	4798      	blx	r3
 800e9e8:	2802      	cmp	r0, #2
 800e9ea:	d01b      	beq.n	800ea24 <uxr_next_input_reliable_buffer_available+0xb4>
 800e9ec:	2801      	cmp	r0, #1
 800e9ee:	d0e3      	beq.n	800e9b8 <uxr_next_input_reliable_buffer_available+0x48>
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9f6:	464a      	mov	r2, r9
 800e9f8:	4631      	mov	r1, r6
 800e9fa:	4638      	mov	r0, r7
 800e9fc:	f7ff fdbc 	bl	800e578 <ucdr_init_buffer>
 800ea00:	8921      	ldrh	r1, [r4, #8]
 800ea02:	fbb5 f2f1 	udiv	r2, r5, r1
 800ea06:	fb01 5212 	mls	r2, r1, r2, r5
 800ea0a:	b292      	uxth	r2, r2
 800ea0c:	6863      	ldr	r3, [r4, #4]
 800ea0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea12:	fb02 f303 	mul.w	r3, r2, r3
 800ea16:	6822      	ldr	r2, [r4, #0]
 800ea18:	f842 a003 	str.w	sl, [r2, r3]
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	81a5      	strh	r5, [r4, #12]
 800ea20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea24:	8920      	ldrh	r0, [r4, #8]
 800ea26:	fbb5 f3f0 	udiv	r3, r5, r0
 800ea2a:	fb00 5513 	mls	r5, r0, r3, r5
 800ea2e:	b2ad      	uxth	r5, r5
 800ea30:	6863      	ldr	r3, [r4, #4]
 800ea32:	fbb3 f3f0 	udiv	r3, r3, r0
 800ea36:	fb03 f505 	mul.w	r5, r3, r5
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	5158      	str	r0, [r3, r5]
 800ea40:	eb06 0108 	add.w	r1, r6, r8
 800ea44:	eba9 0208 	sub.w	r2, r9, r8
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f7ff fd95 	bl	800e578 <ucdr_init_buffer>
 800ea4e:	4638      	mov	r0, r7
 800ea50:	4903      	ldr	r1, [pc, #12]	@ (800ea60 <uxr_next_input_reliable_buffer_available+0xf0>)
 800ea52:	4622      	mov	r2, r4
 800ea54:	f7ff fd64 	bl	800e520 <ucdr_set_on_full_buffer_callback>
 800ea58:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	e7c8      	b.n	800e9f2 <uxr_next_input_reliable_buffer_available+0x82>
 800ea60:	0800e765 	.word	0x0800e765

0800ea64 <uxr_process_heartbeat>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4611      	mov	r1, r2
 800ea68:	4604      	mov	r4, r0
 800ea6a:	89c0      	ldrh	r0, [r0, #14]
 800ea6c:	4615      	mov	r5, r2
 800ea6e:	f000 fb89 	bl	800f184 <uxr_seq_num_cmp>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	bfb8      	it	lt
 800ea76:	81e5      	strhlt	r5, [r4, #14]
 800ea78:	bd38      	pop	{r3, r4, r5, pc}
 800ea7a:	bf00      	nop

0800ea7c <uxr_compute_acknack>:
 800ea7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea80:	8903      	ldrh	r3, [r0, #8]
 800ea82:	8985      	ldrh	r5, [r0, #12]
 800ea84:	4604      	mov	r4, r0
 800ea86:	460e      	mov	r6, r1
 800ea88:	b1d3      	cbz	r3, 800eac0 <uxr_compute_acknack+0x44>
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	2701      	movs	r7, #1
 800ea8e:	e003      	b.n	800ea98 <uxr_compute_acknack+0x1c>
 800ea90:	4567      	cmp	r7, ip
 800ea92:	d215      	bcs.n	800eac0 <uxr_compute_acknack+0x44>
 800ea94:	89a0      	ldrh	r0, [r4, #12]
 800ea96:	3701      	adds	r7, #1
 800ea98:	b2b9      	uxth	r1, r7
 800ea9a:	f000 fb6b 	bl	800f174 <uxr_seq_num_add>
 800ea9e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800eaa2:	fbb0 f3fc 	udiv	r3, r0, ip
 800eaa6:	fb0c 0313 	mls	r3, ip, r3, r0
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	e9d4 1300 	ldrd	r1, r3, [r4]
 800eab0:	fbb3 f3fc 	udiv	r3, r3, ip
 800eab4:	fb02 f303 	mul.w	r3, r2, r3
 800eab8:	58cb      	ldr	r3, [r1, r3]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1e8      	bne.n	800ea90 <uxr_compute_acknack+0x14>
 800eabe:	4605      	mov	r5, r0
 800eac0:	8035      	strh	r5, [r6, #0]
 800eac2:	2101      	movs	r1, #1
 800eac4:	4628      	mov	r0, r5
 800eac6:	89e7      	ldrh	r7, [r4, #14]
 800eac8:	f000 fb58 	bl	800f17c <uxr_seq_num_sub>
 800eacc:	4601      	mov	r1, r0
 800eace:	4638      	mov	r0, r7
 800ead0:	f000 fb54 	bl	800f17c <uxr_seq_num_sub>
 800ead4:	4605      	mov	r5, r0
 800ead6:	b318      	cbz	r0, 800eb20 <uxr_compute_acknack+0xa4>
 800ead8:	f04f 0900 	mov.w	r9, #0
 800eadc:	464f      	mov	r7, r9
 800eade:	f04f 0801 	mov.w	r8, #1
 800eae2:	fa1f f189 	uxth.w	r1, r9
 800eae6:	8830      	ldrh	r0, [r6, #0]
 800eae8:	f000 fb44 	bl	800f174 <uxr_seq_num_add>
 800eaec:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800eaf0:	fbb0 f3fc 	udiv	r3, r0, ip
 800eaf4:	e9d4 1200 	ldrd	r1, r2, [r4]
 800eaf8:	fb03 001c 	mls	r0, r3, ip, r0
 800eafc:	b283      	uxth	r3, r0
 800eafe:	fbb2 f2fc 	udiv	r2, r2, ip
 800eb02:	fb02 f303 	mul.w	r3, r2, r3
 800eb06:	fa08 f209 	lsl.w	r2, r8, r9
 800eb0a:	58cb      	ldr	r3, [r1, r3]
 800eb0c:	f109 0901 	add.w	r9, r9, #1
 800eb10:	b90b      	cbnz	r3, 800eb16 <uxr_compute_acknack+0x9a>
 800eb12:	4317      	orrs	r7, r2
 800eb14:	b2bf      	uxth	r7, r7
 800eb16:	454d      	cmp	r5, r9
 800eb18:	d1e3      	bne.n	800eae2 <uxr_compute_acknack+0x66>
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb20:	4607      	mov	r7, r0
 800eb22:	4638      	mov	r0, r7
 800eb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800eb28 <uxr_init_output_best_effort_stream>:
 800eb28:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800eb2c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800eb30:	6001      	str	r1, [r0, #0]
 800eb32:	7303      	strb	r3, [r0, #12]
 800eb34:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop

0800eb3c <uxr_reset_output_best_effort_stream>:
 800eb3c:	7b02      	ldrb	r2, [r0, #12]
 800eb3e:	6042      	str	r2, [r0, #4]
 800eb40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eb44:	81c3      	strh	r3, [r0, #14]
 800eb46:	4770      	bx	lr

0800eb48 <uxr_prepare_best_effort_buffer_to_write>:
 800eb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	b083      	sub	sp, #12
 800eb4e:	6840      	ldr	r0, [r0, #4]
 800eb50:	460d      	mov	r5, r1
 800eb52:	4616      	mov	r6, r2
 800eb54:	f7fc fda4 	bl	800b6a0 <uxr_submessage_padding>
 800eb58:	6863      	ldr	r3, [r4, #4]
 800eb5a:	4418      	add	r0, r3
 800eb5c:	68a3      	ldr	r3, [r4, #8]
 800eb5e:	1942      	adds	r2, r0, r5
 800eb60:	4293      	cmp	r3, r2
 800eb62:	bf2c      	ite	cs
 800eb64:	2701      	movcs	r7, #1
 800eb66:	2700      	movcc	r7, #0
 800eb68:	d202      	bcs.n	800eb70 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	b003      	add	sp, #12
 800eb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb70:	9000      	str	r0, [sp, #0]
 800eb72:	6821      	ldr	r1, [r4, #0]
 800eb74:	4630      	mov	r0, r6
 800eb76:	2300      	movs	r3, #0
 800eb78:	f7ff fcec 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800eb7c:	6861      	ldr	r1, [r4, #4]
 800eb7e:	4638      	mov	r0, r7
 800eb80:	4429      	add	r1, r5
 800eb82:	6061      	str	r1, [r4, #4]
 800eb84:	b003      	add	sp, #12
 800eb86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb88 <uxr_prepare_best_effort_buffer_to_send>:
 800eb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	461d      	mov	r5, r3
 800eb90:	6840      	ldr	r0, [r0, #4]
 800eb92:	7b23      	ldrb	r3, [r4, #12]
 800eb94:	4298      	cmp	r0, r3
 800eb96:	bf8c      	ite	hi
 800eb98:	2601      	movhi	r6, #1
 800eb9a:	2600      	movls	r6, #0
 800eb9c:	d802      	bhi.n	800eba4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800eb9e:	4630      	mov	r0, r6
 800eba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba4:	4688      	mov	r8, r1
 800eba6:	89e0      	ldrh	r0, [r4, #14]
 800eba8:	2101      	movs	r1, #1
 800ebaa:	4617      	mov	r7, r2
 800ebac:	f000 fae2 	bl	800f174 <uxr_seq_num_add>
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	81e0      	strh	r0, [r4, #14]
 800ebb4:	8028      	strh	r0, [r5, #0]
 800ebb6:	f8c8 3000 	str.w	r3, [r8]
 800ebba:	6863      	ldr	r3, [r4, #4]
 800ebbc:	603b      	str	r3, [r7, #0]
 800ebbe:	7b23      	ldrb	r3, [r4, #12]
 800ebc0:	6063      	str	r3, [r4, #4]
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ebc8 <on_full_output_buffer>:
 800ebc8:	b538      	push	{r3, r4, r5, lr}
 800ebca:	6802      	ldr	r2, [r0, #0]
 800ebcc:	460c      	mov	r4, r1
 800ebce:	6809      	ldr	r1, [r1, #0]
 800ebd0:	8923      	ldrh	r3, [r4, #8]
 800ebd2:	eba2 0c01 	sub.w	ip, r2, r1
 800ebd6:	6862      	ldr	r2, [r4, #4]
 800ebd8:	fbb2 f2f3 	udiv	r2, r2, r3
 800ebdc:	fbbc fcf2 	udiv	ip, ip, r2
 800ebe0:	f10c 0c01 	add.w	ip, ip, #1
 800ebe4:	fa1f fc8c 	uxth.w	ip, ip
 800ebe8:	fbbc fef3 	udiv	lr, ip, r3
 800ebec:	fb03 c31e 	mls	r3, r3, lr, ip
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	fb02 f303 	mul.w	r3, r2, r3
 800ebf6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800ebfa:	58ca      	ldr	r2, [r1, r3]
 800ebfc:	4463      	add	r3, ip
 800ebfe:	eba2 020c 	sub.w	r2, r2, ip
 800ec02:	3308      	adds	r3, #8
 800ec04:	4605      	mov	r5, r0
 800ec06:	4419      	add	r1, r3
 800ec08:	3a04      	subs	r2, #4
 800ec0a:	6903      	ldr	r3, [r0, #16]
 800ec0c:	f7ff fcac 	bl	800e568 <ucdr_init_buffer_origin>
 800ec10:	4628      	mov	r0, r5
 800ec12:	4903      	ldr	r1, [pc, #12]	@ (800ec20 <on_full_output_buffer+0x58>)
 800ec14:	4622      	mov	r2, r4
 800ec16:	f7ff fc83 	bl	800e520 <ucdr_set_on_full_buffer_callback>
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	bd38      	pop	{r3, r4, r5, pc}
 800ec1e:	bf00      	nop
 800ec20:	0800ebc9 	.word	0x0800ebc9

0800ec24 <uxr_init_output_reliable_stream>:
 800ec24:	b410      	push	{r4}
 800ec26:	f89d c004 	ldrb.w	ip, [sp, #4]
 800ec2a:	8103      	strh	r3, [r0, #8]
 800ec2c:	e9c0 1200 	strd	r1, r2, [r0]
 800ec30:	f880 c00c 	strb.w	ip, [r0, #12]
 800ec34:	b1d3      	cbz	r3, 800ec6c <uxr_init_output_reliable_stream+0x48>
 800ec36:	f8c1 c000 	str.w	ip, [r1]
 800ec3a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ec3e:	f1bc 0f01 	cmp.w	ip, #1
 800ec42:	d913      	bls.n	800ec6c <uxr_init_output_reliable_stream+0x48>
 800ec44:	2301      	movs	r3, #1
 800ec46:	fbb3 f1fc 	udiv	r1, r3, ip
 800ec4a:	fb0c 3111 	mls	r1, ip, r1, r3
 800ec4e:	b289      	uxth	r1, r1
 800ec50:	6842      	ldr	r2, [r0, #4]
 800ec52:	6804      	ldr	r4, [r0, #0]
 800ec54:	fbb2 f2fc 	udiv	r2, r2, ip
 800ec58:	fb01 f202 	mul.w	r2, r1, r2
 800ec5c:	7b01      	ldrb	r1, [r0, #12]
 800ec5e:	50a1      	str	r1, [r4, r2]
 800ec60:	3301      	adds	r3, #1
 800ec62:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	459c      	cmp	ip, r3
 800ec6a:	d8ec      	bhi.n	800ec46 <uxr_init_output_reliable_stream+0x22>
 800ec6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec70:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ec74:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800ec78:	4905      	ldr	r1, [pc, #20]	@ (800ec90 <uxr_init_output_reliable_stream+0x6c>)
 800ec7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec7e:	f8c0 100e 	str.w	r1, [r0, #14]
 800ec82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec86:	2300      	movs	r3, #0
 800ec88:	8242      	strh	r2, [r0, #18]
 800ec8a:	8403      	strh	r3, [r0, #32]
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	ffff0000 	.word	0xffff0000

0800ec94 <uxr_reset_output_reliable_stream>:
 800ec94:	8901      	ldrh	r1, [r0, #8]
 800ec96:	b1b1      	cbz	r1, 800ecc6 <uxr_reset_output_reliable_stream+0x32>
 800ec98:	f04f 0c00 	mov.w	ip, #0
 800ec9c:	4663      	mov	r3, ip
 800ec9e:	fbb3 f2f1 	udiv	r2, r3, r1
 800eca2:	fb01 3312 	mls	r3, r1, r2, r3
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	6842      	ldr	r2, [r0, #4]
 800ecaa:	fbb2 f2f1 	udiv	r2, r2, r1
 800ecae:	6801      	ldr	r1, [r0, #0]
 800ecb0:	fb02 f303 	mul.w	r3, r2, r3
 800ecb4:	7b02      	ldrb	r2, [r0, #12]
 800ecb6:	50ca      	str	r2, [r1, r3]
 800ecb8:	f10c 0c01 	add.w	ip, ip, #1
 800ecbc:	8901      	ldrh	r1, [r0, #8]
 800ecbe:	fa1f f38c 	uxth.w	r3, ip
 800ecc2:	4299      	cmp	r1, r3
 800ecc4:	d8eb      	bhi.n	800ec9e <uxr_reset_output_reliable_stream+0xa>
 800ecc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ecca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ecce:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800ecd2:	4904      	ldr	r1, [pc, #16]	@ (800ece4 <uxr_reset_output_reliable_stream+0x50>)
 800ecd4:	f8c0 100e 	str.w	r1, [r0, #14]
 800ecd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ecdc:	2300      	movs	r3, #0
 800ecde:	8242      	strh	r2, [r0, #18]
 800ece0:	8403      	strh	r3, [r0, #32]
 800ece2:	4770      	bx	lr
 800ece4:	ffff0000 	.word	0xffff0000

0800ece8 <uxr_prepare_reliable_buffer_to_write>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	4604      	mov	r4, r0
 800ecee:	b091      	sub	sp, #68	@ 0x44
 800ecf0:	8900      	ldrh	r0, [r0, #8]
 800ecf2:	89e6      	ldrh	r6, [r4, #14]
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	9204      	str	r2, [sp, #16]
 800ecf8:	fbb6 f2f0 	udiv	r2, r6, r0
 800ecfc:	fb00 6212 	mls	r2, r0, r2, r6
 800ed00:	b292      	uxth	r2, r2
 800ed02:	6865      	ldr	r5, [r4, #4]
 800ed04:	fbb5 f5f0 	udiv	r5, r5, r0
 800ed08:	fb05 3202 	mla	r2, r5, r2, r3
 800ed0c:	3204      	adds	r2, #4
 800ed0e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800ed12:	f894 900c 	ldrb.w	r9, [r4, #12]
 800ed16:	9203      	str	r2, [sp, #12]
 800ed18:	468b      	mov	fp, r1
 800ed1a:	1f2f      	subs	r7, r5, #4
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	f000 814c 	beq.w	800efba <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800ed22:	f04f 0c00 	mov.w	ip, #0
 800ed26:	46e2      	mov	sl, ip
 800ed28:	4661      	mov	r1, ip
 800ed2a:	fbb1 f2f0 	udiv	r2, r1, r0
 800ed2e:	fb00 1212 	mls	r2, r0, r2, r1
 800ed32:	b292      	uxth	r2, r2
 800ed34:	fb05 f202 	mul.w	r2, r5, r2
 800ed38:	f10c 0c01 	add.w	ip, ip, #1
 800ed3c:	589a      	ldr	r2, [r3, r2]
 800ed3e:	454a      	cmp	r2, r9
 800ed40:	bf08      	it	eq
 800ed42:	f10a 0a01 	addeq.w	sl, sl, #1
 800ed46:	fa1f f18c 	uxth.w	r1, ip
 800ed4a:	bf08      	it	eq
 800ed4c:	fa1f fa8a 	uxtheq.w	sl, sl
 800ed50:	4281      	cmp	r1, r0
 800ed52:	d3ea      	bcc.n	800ed2a <uxr_prepare_reliable_buffer_to_write+0x42>
 800ed54:	4640      	mov	r0, r8
 800ed56:	2104      	movs	r1, #4
 800ed58:	f8cd a014 	str.w	sl, [sp, #20]
 800ed5c:	f7ff fc10 	bl	800e580 <ucdr_alignment>
 800ed60:	4480      	add	r8, r0
 800ed62:	eb08 020b 	add.w	r2, r8, fp
 800ed66:	42ba      	cmp	r2, r7
 800ed68:	f240 80cd 	bls.w	800ef06 <uxr_prepare_reliable_buffer_to_write+0x21e>
 800ed6c:	7b22      	ldrb	r2, [r4, #12]
 800ed6e:	445a      	add	r2, fp
 800ed70:	42ba      	cmp	r2, r7
 800ed72:	f240 80b5 	bls.w	800eee0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800ed76:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 800ed7a:	33fc      	adds	r3, #252	@ 0xfc
 800ed7c:	b2ba      	uxth	r2, r7
 800ed7e:	4413      	add	r3, r2
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	fb0a f903 	mul.w	r9, sl, r3
 800ed86:	45d9      	cmp	r9, fp
 800ed88:	9305      	str	r3, [sp, #20]
 800ed8a:	9306      	str	r3, [sp, #24]
 800ed8c:	f0c0 80b7 	bcc.w	800eefe <uxr_prepare_reliable_buffer_to_write+0x216>
 800ed90:	f108 0304 	add.w	r3, r8, #4
 800ed94:	42bb      	cmp	r3, r7
 800ed96:	f080 80db 	bcs.w	800ef50 <uxr_prepare_reliable_buffer_to_write+0x268>
 800ed9a:	f1a2 0904 	sub.w	r9, r2, #4
 800ed9e:	eba9 0908 	sub.w	r9, r9, r8
 800eda2:	9b05      	ldr	r3, [sp, #20]
 800eda4:	fa1f f989 	uxth.w	r9, r9
 800eda8:	ebab 0b09 	sub.w	fp, fp, r9
 800edac:	fbbb f2f3 	udiv	r2, fp, r3
 800edb0:	fb03 b312 	mls	r3, r3, r2, fp
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f000 80c8 	beq.w	800ef4a <uxr_prepare_reliable_buffer_to_write+0x262>
 800edba:	3201      	adds	r2, #1
 800edbc:	b292      	uxth	r2, r2
 800edbe:	9306      	str	r3, [sp, #24]
 800edc0:	4552      	cmp	r2, sl
 800edc2:	f200 809c 	bhi.w	800eefe <uxr_prepare_reliable_buffer_to_write+0x216>
 800edc6:	f10d 0b20 	add.w	fp, sp, #32
 800edca:	2a00      	cmp	r2, #0
 800edcc:	d042      	beq.n	800ee54 <uxr_prepare_reliable_buffer_to_write+0x16c>
 800edce:	f8cd 801c 	str.w	r8, [sp, #28]
 800edd2:	f04f 0a00 	mov.w	sl, #0
 800edd6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800edda:	9505      	str	r5, [sp, #20]
 800eddc:	f10d 0b20 	add.w	fp, sp, #32
 800ede0:	4615      	mov	r5, r2
 800ede2:	e000      	b.n	800ede6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 800ede4:	46c1      	mov	r9, r8
 800ede6:	8920      	ldrh	r0, [r4, #8]
 800ede8:	fbb6 f2f0 	udiv	r2, r6, r0
 800edec:	fb00 6112 	mls	r1, r0, r2, r6
 800edf0:	b28a      	uxth	r2, r1
 800edf2:	6863      	ldr	r3, [r4, #4]
 800edf4:	fbb3 f1f0 	udiv	r1, r3, r0
 800edf8:	6823      	ldr	r3, [r4, #0]
 800edfa:	fb02 f101 	mul.w	r1, r2, r1
 800edfe:	3104      	adds	r1, #4
 800ee00:	4419      	add	r1, r3
 800ee02:	4658      	mov	r0, fp
 800ee04:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800ee08:	9200      	str	r2, [sp, #0]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	463a      	mov	r2, r7
 800ee0e:	f7ff fba1 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800ee12:	464a      	mov	r2, r9
 800ee14:	2300      	movs	r3, #0
 800ee16:	210d      	movs	r1, #13
 800ee18:	4658      	mov	r0, fp
 800ee1a:	f7fc fc01 	bl	800b620 <uxr_buffer_submessage_header>
 800ee1e:	8921      	ldrh	r1, [r4, #8]
 800ee20:	fbb6 f2f1 	udiv	r2, r6, r1
 800ee24:	fb01 6212 	mls	r2, r1, r2, r6
 800ee28:	b292      	uxth	r2, r2
 800ee2a:	6863      	ldr	r3, [r4, #4]
 800ee2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee30:	fb02 f303 	mul.w	r3, r2, r3
 800ee34:	6822      	ldr	r2, [r4, #0]
 800ee36:	4630      	mov	r0, r6
 800ee38:	50d7      	str	r7, [r2, r3]
 800ee3a:	2101      	movs	r1, #1
 800ee3c:	f000 f99a 	bl	800f174 <uxr_seq_num_add>
 800ee40:	f10a 0a01 	add.w	sl, sl, #1
 800ee44:	fa1f f38a 	uxth.w	r3, sl
 800ee48:	429d      	cmp	r5, r3
 800ee4a:	4606      	mov	r6, r0
 800ee4c:	d8ca      	bhi.n	800ede4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 800ee4e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ee52:	9d05      	ldr	r5, [sp, #20]
 800ee54:	8920      	ldrh	r0, [r4, #8]
 800ee56:	fbb6 f3f0 	udiv	r3, r6, r0
 800ee5a:	fb00 6313 	mls	r3, r0, r3, r6
 800ee5e:	b299      	uxth	r1, r3
 800ee60:	6863      	ldr	r3, [r4, #4]
 800ee62:	fbb3 f3f0 	udiv	r3, r3, r0
 800ee66:	fb01 f303 	mul.w	r3, r1, r3
 800ee6a:	6821      	ldr	r1, [r4, #0]
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	4419      	add	r1, r3
 800ee70:	463a      	mov	r2, r7
 800ee72:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800ee76:	9000      	str	r0, [sp, #0]
 800ee78:	2300      	movs	r3, #0
 800ee7a:	4658      	mov	r0, fp
 800ee7c:	f7ff fb6a 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800ee80:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800ee84:	4658      	mov	r0, fp
 800ee86:	fa1f f289 	uxth.w	r2, r9
 800ee8a:	2302      	movs	r3, #2
 800ee8c:	210d      	movs	r1, #13
 800ee8e:	f7fc fbc7 	bl	800b620 <uxr_buffer_submessage_header>
 800ee92:	9b03      	ldr	r3, [sp, #12]
 800ee94:	8927      	ldrh	r7, [r4, #8]
 800ee96:	7b20      	ldrb	r0, [r4, #12]
 800ee98:	f108 0104 	add.w	r1, r8, #4
 800ee9c:	440b      	add	r3, r1
 800ee9e:	4619      	mov	r1, r3
 800eea0:	fbb6 f3f7 	udiv	r3, r6, r7
 800eea4:	fb07 6313 	mls	r3, r7, r3, r6
 800eea8:	f1a5 0208 	sub.w	r2, r5, #8
 800eeac:	b29d      	uxth	r5, r3
 800eeae:	3004      	adds	r0, #4
 800eeb0:	6863      	ldr	r3, [r4, #4]
 800eeb2:	fbb3 f3f7 	udiv	r3, r3, r7
 800eeb6:	fb05 f303 	mul.w	r3, r5, r3
 800eeba:	6825      	ldr	r5, [r4, #0]
 800eebc:	4448      	add	r0, r9
 800eebe:	50e8      	str	r0, [r5, r3]
 800eec0:	9d04      	ldr	r5, [sp, #16]
 800eec2:	eba2 0208 	sub.w	r2, r2, r8
 800eec6:	4628      	mov	r0, r5
 800eec8:	f7ff fb56 	bl	800e578 <ucdr_init_buffer>
 800eecc:	4628      	mov	r0, r5
 800eece:	493c      	ldr	r1, [pc, #240]	@ (800efc0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800eed0:	4622      	mov	r2, r4
 800eed2:	f7ff fb25 	bl	800e520 <ucdr_set_on_full_buffer_callback>
 800eed6:	2001      	movs	r0, #1
 800eed8:	81e6      	strh	r6, [r4, #14]
 800eeda:	b011      	add	sp, #68	@ 0x44
 800eedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee0:	2101      	movs	r1, #1
 800eee2:	89e0      	ldrh	r0, [r4, #14]
 800eee4:	f000 f946 	bl	800f174 <uxr_seq_num_add>
 800eee8:	8921      	ldrh	r1, [r4, #8]
 800eeea:	4605      	mov	r5, r0
 800eeec:	8a60      	ldrh	r0, [r4, #18]
 800eeee:	f000 f941 	bl	800f174 <uxr_seq_num_add>
 800eef2:	4601      	mov	r1, r0
 800eef4:	4628      	mov	r0, r5
 800eef6:	f000 f945 	bl	800f184 <uxr_seq_num_cmp>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	dd42      	ble.n	800ef84 <uxr_prepare_reliable_buffer_to_write+0x29c>
 800eefe:	2000      	movs	r0, #0
 800ef00:	b011      	add	sp, #68	@ 0x44
 800ef02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef06:	8921      	ldrh	r1, [r4, #8]
 800ef08:	8a60      	ldrh	r0, [r4, #18]
 800ef0a:	9205      	str	r2, [sp, #20]
 800ef0c:	f000 f932 	bl	800f174 <uxr_seq_num_add>
 800ef10:	4601      	mov	r1, r0
 800ef12:	4630      	mov	r0, r6
 800ef14:	f000 f936 	bl	800f184 <uxr_seq_num_cmp>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	9a05      	ldr	r2, [sp, #20]
 800ef1c:	dcef      	bgt.n	800eefe <uxr_prepare_reliable_buffer_to_write+0x216>
 800ef1e:	8927      	ldrh	r7, [r4, #8]
 800ef20:	fbb6 f3f7 	udiv	r3, r6, r7
 800ef24:	fb07 6313 	mls	r3, r7, r3, r6
 800ef28:	b29d      	uxth	r5, r3
 800ef2a:	6863      	ldr	r3, [r4, #4]
 800ef2c:	6824      	ldr	r4, [r4, #0]
 800ef2e:	fbb3 f3f7 	udiv	r3, r3, r7
 800ef32:	fb05 f303 	mul.w	r3, r5, r3
 800ef36:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800ef3a:	50e2      	str	r2, [r4, r3]
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f8cd 8000 	str.w	r8, [sp]
 800ef42:	f7ff fb07 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800ef46:	2001      	movs	r0, #1
 800ef48:	e7da      	b.n	800ef00 <uxr_prepare_reliable_buffer_to_write+0x218>
 800ef4a:	b293      	uxth	r3, r2
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	e737      	b.n	800edc0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800ef50:	4630      	mov	r0, r6
 800ef52:	2101      	movs	r1, #1
 800ef54:	9207      	str	r2, [sp, #28]
 800ef56:	f000 f90d 	bl	800f174 <uxr_seq_num_add>
 800ef5a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800ef5e:	fbb0 f1fc 	udiv	r1, r0, ip
 800ef62:	fb0c 0111 	mls	r1, ip, r1, r0
 800ef66:	4606      	mov	r6, r0
 800ef68:	b288      	uxth	r0, r1
 800ef6a:	6863      	ldr	r3, [r4, #4]
 800ef6c:	fbb3 f1fc 	udiv	r1, r3, ip
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	9a07      	ldr	r2, [sp, #28]
 800ef74:	fb00 f101 	mul.w	r1, r0, r1
 800ef78:	3104      	adds	r1, #4
 800ef7a:	440b      	add	r3, r1
 800ef7c:	9303      	str	r3, [sp, #12]
 800ef7e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800ef82:	e70a      	b.n	800ed9a <uxr_prepare_reliable_buffer_to_write+0xb2>
 800ef84:	8921      	ldrh	r1, [r4, #8]
 800ef86:	fbb5 f3f1 	udiv	r3, r5, r1
 800ef8a:	fb01 5313 	mls	r3, r1, r3, r5
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	6863      	ldr	r3, [r4, #4]
 800ef92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef96:	6821      	ldr	r1, [r4, #0]
 800ef98:	9804      	ldr	r0, [sp, #16]
 800ef9a:	fb02 f303 	mul.w	r3, r2, r3
 800ef9e:	3304      	adds	r3, #4
 800efa0:	7b22      	ldrb	r2, [r4, #12]
 800efa2:	4419      	add	r1, r3
 800efa4:	445a      	add	r2, fp
 800efa6:	f841 2c04 	str.w	r2, [r1, #-4]
 800efaa:	7b23      	ldrb	r3, [r4, #12]
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	2300      	movs	r3, #0
 800efb0:	f7ff fad0 	bl	800e554 <ucdr_init_buffer_origin_offset>
 800efb4:	81e5      	strh	r5, [r4, #14]
 800efb6:	2001      	movs	r0, #1
 800efb8:	e7a2      	b.n	800ef00 <uxr_prepare_reliable_buffer_to_write+0x218>
 800efba:	4682      	mov	sl, r0
 800efbc:	e6ca      	b.n	800ed54 <uxr_prepare_reliable_buffer_to_write+0x6c>
 800efbe:	bf00      	nop
 800efc0:	0800ebc9 	.word	0x0800ebc9

0800efc4 <uxr_prepare_next_reliable_buffer_to_send>:
 800efc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc6:	4604      	mov	r4, r0
 800efc8:	460f      	mov	r7, r1
 800efca:	8a00      	ldrh	r0, [r0, #16]
 800efcc:	2101      	movs	r1, #1
 800efce:	4616      	mov	r6, r2
 800efd0:	461d      	mov	r5, r3
 800efd2:	f000 f8cf 	bl	800f174 <uxr_seq_num_add>
 800efd6:	8028      	strh	r0, [r5, #0]
 800efd8:	8922      	ldrh	r2, [r4, #8]
 800efda:	fbb0 f3f2 	udiv	r3, r0, r2
 800efde:	fb02 0c13 	mls	ip, r2, r3, r0
 800efe2:	fa1f fc8c 	uxth.w	ip, ip
 800efe6:	6863      	ldr	r3, [r4, #4]
 800efe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800efec:	fb0c fc03 	mul.w	ip, ip, r3
 800eff0:	6823      	ldr	r3, [r4, #0]
 800eff2:	89e1      	ldrh	r1, [r4, #14]
 800eff4:	f10c 0c04 	add.w	ip, ip, #4
 800eff8:	4463      	add	r3, ip
 800effa:	603b      	str	r3, [r7, #0]
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	449c      	add	ip, r3
 800f000:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800f004:	6033      	str	r3, [r6, #0]
 800f006:	f000 f8bd 	bl	800f184 <uxr_seq_num_cmp>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	dd01      	ble.n	800f012 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800f00e:	2000      	movs	r0, #0
 800f010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f012:	7b23      	ldrb	r3, [r4, #12]
 800f014:	6832      	ldr	r2, [r6, #0]
 800f016:	429a      	cmp	r2, r3
 800f018:	d9f9      	bls.n	800f00e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f01a:	8a61      	ldrh	r1, [r4, #18]
 800f01c:	8a20      	ldrh	r0, [r4, #16]
 800f01e:	f000 f8ad 	bl	800f17c <uxr_seq_num_sub>
 800f022:	8923      	ldrh	r3, [r4, #8]
 800f024:	4283      	cmp	r3, r0
 800f026:	d0f2      	beq.n	800f00e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f028:	8828      	ldrh	r0, [r5, #0]
 800f02a:	89e3      	ldrh	r3, [r4, #14]
 800f02c:	8220      	strh	r0, [r4, #16]
 800f02e:	4298      	cmp	r0, r3
 800f030:	d001      	beq.n	800f036 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800f032:	2001      	movs	r0, #1
 800f034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f036:	2101      	movs	r1, #1
 800f038:	f000 f89c 	bl	800f174 <uxr_seq_num_add>
 800f03c:	81e0      	strh	r0, [r4, #14]
 800f03e:	2001      	movs	r0, #1
 800f040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f042:	bf00      	nop

0800f044 <uxr_update_output_stream_heartbeat_timestamp>:
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	8a01      	ldrh	r1, [r0, #16]
 800f048:	4604      	mov	r4, r0
 800f04a:	8a40      	ldrh	r0, [r0, #18]
 800f04c:	4615      	mov	r5, r2
 800f04e:	461e      	mov	r6, r3
 800f050:	f000 f898 	bl	800f184 <uxr_seq_num_cmp>
 800f054:	2800      	cmp	r0, #0
 800f056:	db07      	blt.n	800f068 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800f058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f05c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f060:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800f064:	2000      	movs	r0, #0
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	f894 0020 	ldrb.w	r0, [r4, #32]
 800f06c:	b940      	cbnz	r0, 800f080 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800f06e:	2301      	movs	r3, #1
 800f070:	f884 3020 	strb.w	r3, [r4, #32]
 800f074:	3564      	adds	r5, #100	@ 0x64
 800f076:	f146 0600 	adc.w	r6, r6, #0
 800f07a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800f07e:	bd70      	pop	{r4, r5, r6, pc}
 800f080:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800f084:	4295      	cmp	r5, r2
 800f086:	eb76 0303 	sbcs.w	r3, r6, r3
 800f08a:	bfa5      	ittet	ge
 800f08c:	3001      	addge	r0, #1
 800f08e:	f884 0020 	strbge.w	r0, [r4, #32]
 800f092:	2000      	movlt	r0, #0
 800f094:	2001      	movge	r0, #1
 800f096:	e7ed      	b.n	800f074 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800f098 <uxr_begin_output_nack_buffer_it>:
 800f098:	8a40      	ldrh	r0, [r0, #18]
 800f09a:	4770      	bx	lr

0800f09c <uxr_next_reliable_nack_buffer_to_send>:
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	f1b8 0f00 	cmp.w	r8, #0
 800f0aa:	d011      	beq.n	800f0d0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	8818      	ldrh	r0, [r3, #0]
 800f0b0:	460e      	mov	r6, r1
 800f0b2:	4617      	mov	r7, r2
 800f0b4:	461d      	mov	r5, r3
 800f0b6:	2101      	movs	r1, #1
 800f0b8:	f000 f85c 	bl	800f174 <uxr_seq_num_add>
 800f0bc:	8028      	strh	r0, [r5, #0]
 800f0be:	8a21      	ldrh	r1, [r4, #16]
 800f0c0:	f000 f860 	bl	800f184 <uxr_seq_num_cmp>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	dd07      	ble.n	800f0d8 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800f0c8:	f04f 0800 	mov.w	r8, #0
 800f0cc:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 800f0d0:	4640      	mov	r0, r8
 800f0d2:	b002      	add	sp, #8
 800f0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d8:	8921      	ldrh	r1, [r4, #8]
 800f0da:	8828      	ldrh	r0, [r5, #0]
 800f0dc:	6823      	ldr	r3, [r4, #0]
 800f0de:	fbb0 f2f1 	udiv	r2, r0, r1
 800f0e2:	fb01 0c12 	mls	ip, r1, r2, r0
 800f0e6:	fa1f f28c 	uxth.w	r2, ip
 800f0ea:	9301      	str	r3, [sp, #4]
 800f0ec:	6863      	ldr	r3, [r4, #4]
 800f0ee:	fbb3 fcf1 	udiv	ip, r3, r1
 800f0f2:	9b01      	ldr	r3, [sp, #4]
 800f0f4:	fb02 fc0c 	mul.w	ip, r2, ip
 800f0f8:	f10c 0c04 	add.w	ip, ip, #4
 800f0fc:	4463      	add	r3, ip
 800f0fe:	6033      	str	r3, [r6, #0]
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	4463      	add	r3, ip
 800f104:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f108:	603b      	str	r3, [r7, #0]
 800f10a:	7b22      	ldrb	r2, [r4, #12]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d0d2      	beq.n	800f0b6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800f110:	4640      	mov	r0, r8
 800f112:	b002      	add	sp, #8
 800f114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f118 <uxr_process_acknack>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	4604      	mov	r4, r0
 800f11c:	460e      	mov	r6, r1
 800f11e:	4610      	mov	r0, r2
 800f120:	2101      	movs	r1, #1
 800f122:	f000 f82b 	bl	800f17c <uxr_seq_num_sub>
 800f126:	8a61      	ldrh	r1, [r4, #18]
 800f128:	f000 f828 	bl	800f17c <uxr_seq_num_sub>
 800f12c:	b1c0      	cbz	r0, 800f160 <uxr_process_acknack+0x48>
 800f12e:	4605      	mov	r5, r0
 800f130:	2700      	movs	r7, #0
 800f132:	2101      	movs	r1, #1
 800f134:	8a60      	ldrh	r0, [r4, #18]
 800f136:	f000 f81d 	bl	800f174 <uxr_seq_num_add>
 800f13a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f13e:	fbb0 f1fc 	udiv	r1, r0, ip
 800f142:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f146:	fb0c 0111 	mls	r1, ip, r1, r0
 800f14a:	b289      	uxth	r1, r1
 800f14c:	3701      	adds	r7, #1
 800f14e:	fbb3 f3fc 	udiv	r3, r3, ip
 800f152:	fb01 f303 	mul.w	r3, r1, r3
 800f156:	42bd      	cmp	r5, r7
 800f158:	7b21      	ldrb	r1, [r4, #12]
 800f15a:	8260      	strh	r0, [r4, #18]
 800f15c:	50d1      	str	r1, [r2, r3]
 800f15e:	d1e8      	bne.n	800f132 <uxr_process_acknack+0x1a>
 800f160:	3e00      	subs	r6, #0
 800f162:	f04f 0300 	mov.w	r3, #0
 800f166:	bf18      	it	ne
 800f168:	2601      	movne	r6, #1
 800f16a:	f884 3020 	strb.w	r3, [r4, #32]
 800f16e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 800f172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f174 <uxr_seq_num_add>:
 800f174:	4408      	add	r0, r1
 800f176:	b280      	uxth	r0, r0
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop

0800f17c <uxr_seq_num_sub>:
 800f17c:	1a40      	subs	r0, r0, r1
 800f17e:	b280      	uxth	r0, r0
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop

0800f184 <uxr_seq_num_cmp>:
 800f184:	4288      	cmp	r0, r1
 800f186:	d011      	beq.n	800f1ac <uxr_seq_num_cmp+0x28>
 800f188:	d309      	bcc.n	800f19e <uxr_seq_num_cmp+0x1a>
 800f18a:	4288      	cmp	r0, r1
 800f18c:	d910      	bls.n	800f1b0 <uxr_seq_num_cmp+0x2c>
 800f18e:	1a40      	subs	r0, r0, r1
 800f190:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800f194:	bfd4      	ite	le
 800f196:	2001      	movle	r0, #1
 800f198:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 800f19c:	4770      	bx	lr
 800f19e:	1a0b      	subs	r3, r1, r0
 800f1a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1a4:	daf1      	bge.n	800f18a <uxr_seq_num_cmp+0x6>
 800f1a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1aa:	4770      	bx	lr
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	4770      	bx	lr
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	4770      	bx	lr

0800f1b4 <rcl_get_default_domain_id>:
 800f1b4:	b530      	push	{r4, r5, lr}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	b1d0      	cbz	r0, 800f1f4 <rcl_get_default_domain_id+0x40>
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4669      	mov	r1, sp
 800f1c2:	4815      	ldr	r0, [pc, #84]	@ (800f218 <rcl_get_default_domain_id+0x64>)
 800f1c4:	f7fd fe0a 	bl	800cddc <rcutils_get_env>
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	b110      	cbz	r0, 800f1d2 <rcl_get_default_domain_id+0x1e>
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	b003      	add	sp, #12
 800f1d0:	bd30      	pop	{r4, r5, pc}
 800f1d2:	9b00      	ldr	r3, [sp, #0]
 800f1d4:	b18b      	cbz	r3, 800f1fa <rcl_get_default_domain_id+0x46>
 800f1d6:	7818      	ldrb	r0, [r3, #0]
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d0f8      	beq.n	800f1ce <rcl_get_default_domain_id+0x1a>
 800f1dc:	a901      	add	r1, sp, #4
 800f1de:	4618      	mov	r0, r3
 800f1e0:	9201      	str	r2, [sp, #4]
 800f1e2:	f000 fb97 	bl	800f914 <strtoul>
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	b150      	cbz	r0, 800f200 <rcl_get_default_domain_id+0x4c>
 800f1ea:	1c43      	adds	r3, r0, #1
 800f1ec:	d00d      	beq.n	800f20a <rcl_get_default_domain_id+0x56>
 800f1ee:	6025      	str	r5, [r4, #0]
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	e7ec      	b.n	800f1ce <rcl_get_default_domain_id+0x1a>
 800f1f4:	200b      	movs	r0, #11
 800f1f6:	b003      	add	sp, #12
 800f1f8:	bd30      	pop	{r4, r5, pc}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	b003      	add	sp, #12
 800f1fe:	bd30      	pop	{r4, r5, pc}
 800f200:	9b01      	ldr	r3, [sp, #4]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d0f2      	beq.n	800f1ee <rcl_get_default_domain_id+0x3a>
 800f208:	e7e0      	b.n	800f1cc <rcl_get_default_domain_id+0x18>
 800f20a:	f000 fd81 	bl	800fd10 <__errno>
 800f20e:	6803      	ldr	r3, [r0, #0]
 800f210:	2b22      	cmp	r3, #34	@ 0x22
 800f212:	d1ec      	bne.n	800f1ee <rcl_get_default_domain_id+0x3a>
 800f214:	e7da      	b.n	800f1cc <rcl_get_default_domain_id+0x18>
 800f216:	bf00      	nop
 800f218:	080112d8 	.word	0x080112d8

0800f21c <rcl_get_zero_initialized_guard_condition>:
 800f21c:	4a03      	ldr	r2, [pc, #12]	@ (800f22c <rcl_get_zero_initialized_guard_condition+0x10>)
 800f21e:	4603      	mov	r3, r0
 800f220:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f224:	e883 0003 	stmia.w	r3, {r0, r1}
 800f228:	4618      	mov	r0, r3
 800f22a:	4770      	bx	lr
 800f22c:	080112e8 	.word	0x080112e8

0800f230 <rcl_guard_condition_init_from_rmw>:
 800f230:	b082      	sub	sp, #8
 800f232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f236:	b086      	sub	sp, #24
 800f238:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f23c:	4604      	mov	r4, r0
 800f23e:	f84c 3f04 	str.w	r3, [ip, #4]!
 800f242:	460e      	mov	r6, r1
 800f244:	4617      	mov	r7, r2
 800f246:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f24a:	f10d 0e04 	add.w	lr, sp, #4
 800f24e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f252:	f8dc 3000 	ldr.w	r3, [ip]
 800f256:	f8ce 3000 	str.w	r3, [lr]
 800f25a:	a801      	add	r0, sp, #4
 800f25c:	f7f9 fa4c 	bl	80086f8 <rcutils_allocator_is_valid>
 800f260:	b350      	cbz	r0, 800f2b8 <rcl_guard_condition_init_from_rmw+0x88>
 800f262:	b34c      	cbz	r4, 800f2b8 <rcl_guard_condition_init_from_rmw+0x88>
 800f264:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f268:	f1b8 0f00 	cmp.w	r8, #0
 800f26c:	d11e      	bne.n	800f2ac <rcl_guard_condition_init_from_rmw+0x7c>
 800f26e:	b31f      	cbz	r7, 800f2b8 <rcl_guard_condition_init_from_rmw+0x88>
 800f270:	4638      	mov	r0, r7
 800f272:	f7fd f87f 	bl	800c374 <rcl_context_is_valid>
 800f276:	b328      	cbz	r0, 800f2c4 <rcl_guard_condition_init_from_rmw+0x94>
 800f278:	9b01      	ldr	r3, [sp, #4]
 800f27a:	9905      	ldr	r1, [sp, #20]
 800f27c:	201c      	movs	r0, #28
 800f27e:	4798      	blx	r3
 800f280:	4605      	mov	r5, r0
 800f282:	6060      	str	r0, [r4, #4]
 800f284:	b358      	cbz	r0, 800f2de <rcl_guard_condition_init_from_rmw+0xae>
 800f286:	b1fe      	cbz	r6, 800f2c8 <rcl_guard_condition_init_from_rmw+0x98>
 800f288:	6006      	str	r6, [r0, #0]
 800f28a:	f880 8004 	strb.w	r8, [r0, #4]
 800f28e:	ac01      	add	r4, sp, #4
 800f290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f292:	f105 0c08 	add.w	ip, r5, #8
 800f296:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	f8cc 3000 	str.w	r3, [ip]
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	b006      	add	sp, #24
 800f2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	b002      	add	sp, #8
 800f2aa:	4770      	bx	lr
 800f2ac:	2064      	movs	r0, #100	@ 0x64
 800f2ae:	b006      	add	sp, #24
 800f2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b4:	b002      	add	sp, #8
 800f2b6:	4770      	bx	lr
 800f2b8:	200b      	movs	r0, #11
 800f2ba:	b006      	add	sp, #24
 800f2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c0:	b002      	add	sp, #8
 800f2c2:	4770      	bx	lr
 800f2c4:	2065      	movs	r0, #101	@ 0x65
 800f2c6:	e7f2      	b.n	800f2ae <rcl_guard_condition_init_from_rmw+0x7e>
 800f2c8:	6838      	ldr	r0, [r7, #0]
 800f2ca:	3028      	adds	r0, #40	@ 0x28
 800f2cc:	f000 f8c8 	bl	800f460 <rmw_create_guard_condition>
 800f2d0:	6028      	str	r0, [r5, #0]
 800f2d2:	6865      	ldr	r5, [r4, #4]
 800f2d4:	682e      	ldr	r6, [r5, #0]
 800f2d6:	b126      	cbz	r6, 800f2e2 <rcl_guard_condition_init_from_rmw+0xb2>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	712b      	strb	r3, [r5, #4]
 800f2dc:	e7d7      	b.n	800f28e <rcl_guard_condition_init_from_rmw+0x5e>
 800f2de:	200a      	movs	r0, #10
 800f2e0:	e7e5      	b.n	800f2ae <rcl_guard_condition_init_from_rmw+0x7e>
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	9b02      	ldr	r3, [sp, #8]
 800f2e6:	9905      	ldr	r1, [sp, #20]
 800f2e8:	4798      	blx	r3
 800f2ea:	6066      	str	r6, [r4, #4]
 800f2ec:	2001      	movs	r0, #1
 800f2ee:	e7de      	b.n	800f2ae <rcl_guard_condition_init_from_rmw+0x7e>

0800f2f0 <rcl_guard_condition_fini>:
 800f2f0:	b570      	push	{r4, r5, r6, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	b1f0      	cbz	r0, 800f334 <rcl_guard_condition_fini+0x44>
 800f2f6:	6843      	ldr	r3, [r0, #4]
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	b163      	cbz	r3, 800f316 <rcl_guard_condition_fini+0x26>
 800f2fc:	6818      	ldr	r0, [r3, #0]
 800f2fe:	68de      	ldr	r6, [r3, #12]
 800f300:	6999      	ldr	r1, [r3, #24]
 800f302:	b160      	cbz	r0, 800f31e <rcl_guard_condition_fini+0x2e>
 800f304:	791d      	ldrb	r5, [r3, #4]
 800f306:	b965      	cbnz	r5, 800f322 <rcl_guard_condition_fini+0x32>
 800f308:	4618      	mov	r0, r3
 800f30a:	47b0      	blx	r6
 800f30c:	2300      	movs	r3, #0
 800f30e:	4628      	mov	r0, r5
 800f310:	6063      	str	r3, [r4, #4]
 800f312:	b002      	add	sp, #8
 800f314:	bd70      	pop	{r4, r5, r6, pc}
 800f316:	461d      	mov	r5, r3
 800f318:	4628      	mov	r0, r5
 800f31a:	b002      	add	sp, #8
 800f31c:	bd70      	pop	{r4, r5, r6, pc}
 800f31e:	4605      	mov	r5, r0
 800f320:	e7f2      	b.n	800f308 <rcl_guard_condition_fini+0x18>
 800f322:	9101      	str	r1, [sp, #4]
 800f324:	f000 f8b0 	bl	800f488 <rmw_destroy_guard_condition>
 800f328:	1e05      	subs	r5, r0, #0
 800f32a:	6863      	ldr	r3, [r4, #4]
 800f32c:	9901      	ldr	r1, [sp, #4]
 800f32e:	bf18      	it	ne
 800f330:	2501      	movne	r5, #1
 800f332:	e7e9      	b.n	800f308 <rcl_guard_condition_fini+0x18>
 800f334:	250b      	movs	r5, #11
 800f336:	4628      	mov	r0, r5
 800f338:	b002      	add	sp, #8
 800f33a:	bd70      	pop	{r4, r5, r6, pc}

0800f33c <rcl_guard_condition_get_default_options>:
 800f33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f33e:	b087      	sub	sp, #28
 800f340:	4606      	mov	r6, r0
 800f342:	4668      	mov	r0, sp
 800f344:	f7f9 f9ca 	bl	80086dc <rcutils_get_default_allocator>
 800f348:	4b09      	ldr	r3, [pc, #36]	@ (800f370 <rcl_guard_condition_get_default_options+0x34>)
 800f34a:	46ee      	mov	lr, sp
 800f34c:	469c      	mov	ip, r3
 800f34e:	461d      	mov	r5, r3
 800f350:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f354:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f35a:	4634      	mov	r4, r6
 800f35c:	f8de 7000 	ldr.w	r7, [lr]
 800f360:	f8cc 7000 	str.w	r7, [ip]
 800f364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f366:	4630      	mov	r0, r6
 800f368:	6027      	str	r7, [r4, #0]
 800f36a:	b007      	add	sp, #28
 800f36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f36e:	bf00      	nop
 800f370:	2000a93c 	.word	0x2000a93c

0800f374 <rmw_validate_full_topic_name>:
 800f374:	2800      	cmp	r0, #0
 800f376:	d057      	beq.n	800f428 <rmw_validate_full_topic_name+0xb4>
 800f378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f37c:	460d      	mov	r5, r1
 800f37e:	2900      	cmp	r1, #0
 800f380:	d054      	beq.n	800f42c <rmw_validate_full_topic_name+0xb8>
 800f382:	4616      	mov	r6, r2
 800f384:	4604      	mov	r4, r0
 800f386:	f7f0 ff55 	bl	8000234 <strlen>
 800f38a:	b148      	cbz	r0, 800f3a0 <rmw_validate_full_topic_name+0x2c>
 800f38c:	7823      	ldrb	r3, [r4, #0]
 800f38e:	2b2f      	cmp	r3, #47	@ 0x2f
 800f390:	d00d      	beq.n	800f3ae <rmw_validate_full_topic_name+0x3a>
 800f392:	2302      	movs	r3, #2
 800f394:	602b      	str	r3, [r5, #0]
 800f396:	b13e      	cbz	r6, 800f3a8 <rmw_validate_full_topic_name+0x34>
 800f398:	2000      	movs	r0, #0
 800f39a:	6030      	str	r0, [r6, #0]
 800f39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	602b      	str	r3, [r5, #0]
 800f3a4:	2e00      	cmp	r6, #0
 800f3a6:	d1f7      	bne.n	800f398 <rmw_validate_full_topic_name+0x24>
 800f3a8:	2000      	movs	r0, #0
 800f3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ae:	1e43      	subs	r3, r0, #1
 800f3b0:	5ce2      	ldrb	r2, [r4, r3]
 800f3b2:	2a2f      	cmp	r2, #47	@ 0x2f
 800f3b4:	d03c      	beq.n	800f430 <rmw_validate_full_topic_name+0xbc>
 800f3b6:	1e63      	subs	r3, r4, #1
 800f3b8:	eb03 0800 	add.w	r8, r3, r0
 800f3bc:	f1c4 0e01 	rsb	lr, r4, #1
 800f3c0:	eb0e 0703 	add.w	r7, lr, r3
 800f3c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f3c8:	f021 0220 	bic.w	r2, r1, #32
 800f3cc:	3a41      	subs	r2, #65	@ 0x41
 800f3ce:	2a19      	cmp	r2, #25
 800f3d0:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800f3d4:	d90b      	bls.n	800f3ee <rmw_validate_full_topic_name+0x7a>
 800f3d6:	295f      	cmp	r1, #95	@ 0x5f
 800f3d8:	d009      	beq.n	800f3ee <rmw_validate_full_topic_name+0x7a>
 800f3da:	f1bc 0f0a 	cmp.w	ip, #10
 800f3de:	d906      	bls.n	800f3ee <rmw_validate_full_topic_name+0x7a>
 800f3e0:	2304      	movs	r3, #4
 800f3e2:	602b      	str	r3, [r5, #0]
 800f3e4:	2e00      	cmp	r6, #0
 800f3e6:	d0df      	beq.n	800f3a8 <rmw_validate_full_topic_name+0x34>
 800f3e8:	6037      	str	r7, [r6, #0]
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e7d6      	b.n	800f39c <rmw_validate_full_topic_name+0x28>
 800f3ee:	4543      	cmp	r3, r8
 800f3f0:	d1e6      	bne.n	800f3c0 <rmw_validate_full_topic_name+0x4c>
 800f3f2:	4f1a      	ldr	r7, [pc, #104]	@ (800f45c <rmw_validate_full_topic_name+0xe8>)
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e004      	b.n	800f402 <rmw_validate_full_topic_name+0x8e>
 800f3f8:	4298      	cmp	r0, r3
 800f3fa:	f104 0401 	add.w	r4, r4, #1
 800f3fe:	d91c      	bls.n	800f43a <rmw_validate_full_topic_name+0xc6>
 800f400:	4613      	mov	r3, r2
 800f402:	4298      	cmp	r0, r3
 800f404:	f103 0201 	add.w	r2, r3, #1
 800f408:	d0f6      	beq.n	800f3f8 <rmw_validate_full_topic_name+0x84>
 800f40a:	7821      	ldrb	r1, [r4, #0]
 800f40c:	292f      	cmp	r1, #47	@ 0x2f
 800f40e:	d1f3      	bne.n	800f3f8 <rmw_validate_full_topic_name+0x84>
 800f410:	7861      	ldrb	r1, [r4, #1]
 800f412:	292f      	cmp	r1, #47	@ 0x2f
 800f414:	d01c      	beq.n	800f450 <rmw_validate_full_topic_name+0xdc>
 800f416:	5dc9      	ldrb	r1, [r1, r7]
 800f418:	0749      	lsls	r1, r1, #29
 800f41a:	d5ed      	bpl.n	800f3f8 <rmw_validate_full_topic_name+0x84>
 800f41c:	2206      	movs	r2, #6
 800f41e:	602a      	str	r2, [r5, #0]
 800f420:	2e00      	cmp	r6, #0
 800f422:	d0c1      	beq.n	800f3a8 <rmw_validate_full_topic_name+0x34>
 800f424:	6033      	str	r3, [r6, #0]
 800f426:	e7bf      	b.n	800f3a8 <rmw_validate_full_topic_name+0x34>
 800f428:	200b      	movs	r0, #11
 800f42a:	4770      	bx	lr
 800f42c:	200b      	movs	r0, #11
 800f42e:	e7b5      	b.n	800f39c <rmw_validate_full_topic_name+0x28>
 800f430:	2203      	movs	r2, #3
 800f432:	602a      	str	r2, [r5, #0]
 800f434:	2e00      	cmp	r6, #0
 800f436:	d1f5      	bne.n	800f424 <rmw_validate_full_topic_name+0xb0>
 800f438:	e7b6      	b.n	800f3a8 <rmw_validate_full_topic_name+0x34>
 800f43a:	28f7      	cmp	r0, #247	@ 0xf7
 800f43c:	d802      	bhi.n	800f444 <rmw_validate_full_topic_name+0xd0>
 800f43e:	2000      	movs	r0, #0
 800f440:	6028      	str	r0, [r5, #0]
 800f442:	e7ab      	b.n	800f39c <rmw_validate_full_topic_name+0x28>
 800f444:	2307      	movs	r3, #7
 800f446:	602b      	str	r3, [r5, #0]
 800f448:	2e00      	cmp	r6, #0
 800f44a:	d0ad      	beq.n	800f3a8 <rmw_validate_full_topic_name+0x34>
 800f44c:	23f6      	movs	r3, #246	@ 0xf6
 800f44e:	e7e9      	b.n	800f424 <rmw_validate_full_topic_name+0xb0>
 800f450:	2205      	movs	r2, #5
 800f452:	602a      	str	r2, [r5, #0]
 800f454:	2e00      	cmp	r6, #0
 800f456:	d1e5      	bne.n	800f424 <rmw_validate_full_topic_name+0xb0>
 800f458:	e7a6      	b.n	800f3a8 <rmw_validate_full_topic_name+0x34>
 800f45a:	bf00      	nop
 800f45c:	08011360 	.word	0x08011360

0800f460 <rmw_create_guard_condition>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4605      	mov	r5, r0
 800f464:	4807      	ldr	r0, [pc, #28]	@ (800f484 <rmw_create_guard_condition+0x24>)
 800f466:	f7fd ff7b 	bl	800d360 <get_memory>
 800f46a:	b148      	cbz	r0, 800f480 <rmw_create_guard_condition+0x20>
 800f46c:	6884      	ldr	r4, [r0, #8]
 800f46e:	2300      	movs	r3, #0
 800f470:	7423      	strb	r3, [r4, #16]
 800f472:	61e5      	str	r5, [r4, #28]
 800f474:	f7fd ffdc 	bl	800d430 <rmw_get_implementation_identifier>
 800f478:	e9c4 0405 	strd	r0, r4, [r4, #20]
 800f47c:	f104 0014 	add.w	r0, r4, #20
 800f480:	bd38      	pop	{r3, r4, r5, pc}
 800f482:	bf00      	nop
 800f484:	2000a87c 	.word	0x2000a87c

0800f488 <rmw_destroy_guard_condition>:
 800f488:	b508      	push	{r3, lr}
 800f48a:	4b08      	ldr	r3, [pc, #32]	@ (800f4ac <rmw_destroy_guard_condition+0x24>)
 800f48c:	6819      	ldr	r1, [r3, #0]
 800f48e:	b911      	cbnz	r1, 800f496 <rmw_destroy_guard_condition+0xe>
 800f490:	e00a      	b.n	800f4a8 <rmw_destroy_guard_condition+0x20>
 800f492:	6849      	ldr	r1, [r1, #4]
 800f494:	b141      	cbz	r1, 800f4a8 <rmw_destroy_guard_condition+0x20>
 800f496:	688b      	ldr	r3, [r1, #8]
 800f498:	3314      	adds	r3, #20
 800f49a:	4298      	cmp	r0, r3
 800f49c:	d1f9      	bne.n	800f492 <rmw_destroy_guard_condition+0xa>
 800f49e:	4803      	ldr	r0, [pc, #12]	@ (800f4ac <rmw_destroy_guard_condition+0x24>)
 800f4a0:	f7fd ff6e 	bl	800d380 <put_memory>
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	bd08      	pop	{r3, pc}
 800f4a8:	2001      	movs	r0, #1
 800f4aa:	bd08      	pop	{r3, pc}
 800f4ac:	2000a87c 	.word	0x2000a87c

0800f4b0 <calloc>:
 800f4b0:	4b02      	ldr	r3, [pc, #8]	@ (800f4bc <calloc+0xc>)
 800f4b2:	460a      	mov	r2, r1
 800f4b4:	4601      	mov	r1, r0
 800f4b6:	6818      	ldr	r0, [r3, #0]
 800f4b8:	f000 b802 	b.w	800f4c0 <_calloc_r>
 800f4bc:	20000034 	.word	0x20000034

0800f4c0 <_calloc_r>:
 800f4c0:	b570      	push	{r4, r5, r6, lr}
 800f4c2:	fba1 5402 	umull	r5, r4, r1, r2
 800f4c6:	b93c      	cbnz	r4, 800f4d8 <_calloc_r+0x18>
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	f000 f887 	bl	800f5dc <_malloc_r>
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	b928      	cbnz	r0, 800f4de <_calloc_r+0x1e>
 800f4d2:	2600      	movs	r6, #0
 800f4d4:	4630      	mov	r0, r6
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}
 800f4d8:	220c      	movs	r2, #12
 800f4da:	6002      	str	r2, [r0, #0]
 800f4dc:	e7f9      	b.n	800f4d2 <_calloc_r+0x12>
 800f4de:	462a      	mov	r2, r5
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	f000 fba5 	bl	800fc30 <memset>
 800f4e6:	e7f5      	b.n	800f4d4 <_calloc_r+0x14>

0800f4e8 <getenv>:
 800f4e8:	b507      	push	{r0, r1, r2, lr}
 800f4ea:	4b04      	ldr	r3, [pc, #16]	@ (800f4fc <getenv+0x14>)
 800f4ec:	4601      	mov	r1, r0
 800f4ee:	aa01      	add	r2, sp, #4
 800f4f0:	6818      	ldr	r0, [r3, #0]
 800f4f2:	f000 f805 	bl	800f500 <_findenv_r>
 800f4f6:	b003      	add	sp, #12
 800f4f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4fc:	20000034 	.word	0x20000034

0800f500 <_findenv_r>:
 800f500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f504:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800f574 <_findenv_r+0x74>
 800f508:	4606      	mov	r6, r0
 800f50a:	4689      	mov	r9, r1
 800f50c:	4617      	mov	r7, r2
 800f50e:	f000 fc59 	bl	800fdc4 <__env_lock>
 800f512:	f8da 4000 	ldr.w	r4, [sl]
 800f516:	b134      	cbz	r4, 800f526 <_findenv_r+0x26>
 800f518:	464b      	mov	r3, r9
 800f51a:	4698      	mov	r8, r3
 800f51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f520:	b13a      	cbz	r2, 800f532 <_findenv_r+0x32>
 800f522:	2a3d      	cmp	r2, #61	@ 0x3d
 800f524:	d1f9      	bne.n	800f51a <_findenv_r+0x1a>
 800f526:	4630      	mov	r0, r6
 800f528:	f000 fc52 	bl	800fdd0 <__env_unlock>
 800f52c:	2000      	movs	r0, #0
 800f52e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f532:	eba8 0809 	sub.w	r8, r8, r9
 800f536:	46a3      	mov	fp, r4
 800f538:	f854 0b04 	ldr.w	r0, [r4], #4
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d0f2      	beq.n	800f526 <_findenv_r+0x26>
 800f540:	4642      	mov	r2, r8
 800f542:	4649      	mov	r1, r9
 800f544:	f000 fb7c 	bl	800fc40 <strncmp>
 800f548:	2800      	cmp	r0, #0
 800f54a:	d1f4      	bne.n	800f536 <_findenv_r+0x36>
 800f54c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f550:	eb03 0508 	add.w	r5, r3, r8
 800f554:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f558:	2b3d      	cmp	r3, #61	@ 0x3d
 800f55a:	d1ec      	bne.n	800f536 <_findenv_r+0x36>
 800f55c:	f8da 3000 	ldr.w	r3, [sl]
 800f560:	ebab 0303 	sub.w	r3, fp, r3
 800f564:	109b      	asrs	r3, r3, #2
 800f566:	4630      	mov	r0, r6
 800f568:	603b      	str	r3, [r7, #0]
 800f56a:	f000 fc31 	bl	800fdd0 <__env_unlock>
 800f56e:	1c68      	adds	r0, r5, #1
 800f570:	e7dd      	b.n	800f52e <_findenv_r+0x2e>
 800f572:	bf00      	nop
 800f574:	20000000 	.word	0x20000000

0800f578 <malloc>:
 800f578:	4b02      	ldr	r3, [pc, #8]	@ (800f584 <malloc+0xc>)
 800f57a:	4601      	mov	r1, r0
 800f57c:	6818      	ldr	r0, [r3, #0]
 800f57e:	f000 b82d 	b.w	800f5dc <_malloc_r>
 800f582:	bf00      	nop
 800f584:	20000034 	.word	0x20000034

0800f588 <free>:
 800f588:	4b02      	ldr	r3, [pc, #8]	@ (800f594 <free+0xc>)
 800f58a:	4601      	mov	r1, r0
 800f58c:	6818      	ldr	r0, [r3, #0]
 800f58e:	f000 bc25 	b.w	800fddc <_free_r>
 800f592:	bf00      	nop
 800f594:	20000034 	.word	0x20000034

0800f598 <sbrk_aligned>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	4e0f      	ldr	r6, [pc, #60]	@ (800f5d8 <sbrk_aligned+0x40>)
 800f59c:	460c      	mov	r4, r1
 800f59e:	6831      	ldr	r1, [r6, #0]
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	b911      	cbnz	r1, 800f5aa <sbrk_aligned+0x12>
 800f5a4:	f000 fb92 	bl	800fccc <_sbrk_r>
 800f5a8:	6030      	str	r0, [r6, #0]
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f000 fb8d 	bl	800fccc <_sbrk_r>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	d103      	bne.n	800f5be <sbrk_aligned+0x26>
 800f5b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	bd70      	pop	{r4, r5, r6, pc}
 800f5be:	1cc4      	adds	r4, r0, #3
 800f5c0:	f024 0403 	bic.w	r4, r4, #3
 800f5c4:	42a0      	cmp	r0, r4
 800f5c6:	d0f8      	beq.n	800f5ba <sbrk_aligned+0x22>
 800f5c8:	1a21      	subs	r1, r4, r0
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	f000 fb7e 	bl	800fccc <_sbrk_r>
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	d1f2      	bne.n	800f5ba <sbrk_aligned+0x22>
 800f5d4:	e7ef      	b.n	800f5b6 <sbrk_aligned+0x1e>
 800f5d6:	bf00      	nop
 800f5d8:	2000a950 	.word	0x2000a950

0800f5dc <_malloc_r>:
 800f5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e0:	1ccd      	adds	r5, r1, #3
 800f5e2:	f025 0503 	bic.w	r5, r5, #3
 800f5e6:	3508      	adds	r5, #8
 800f5e8:	2d0c      	cmp	r5, #12
 800f5ea:	bf38      	it	cc
 800f5ec:	250c      	movcc	r5, #12
 800f5ee:	2d00      	cmp	r5, #0
 800f5f0:	4606      	mov	r6, r0
 800f5f2:	db01      	blt.n	800f5f8 <_malloc_r+0x1c>
 800f5f4:	42a9      	cmp	r1, r5
 800f5f6:	d904      	bls.n	800f602 <_malloc_r+0x26>
 800f5f8:	230c      	movs	r3, #12
 800f5fa:	6033      	str	r3, [r6, #0]
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6d8 <_malloc_r+0xfc>
 800f606:	f000 f869 	bl	800f6dc <__malloc_lock>
 800f60a:	f8d8 3000 	ldr.w	r3, [r8]
 800f60e:	461c      	mov	r4, r3
 800f610:	bb44      	cbnz	r4, 800f664 <_malloc_r+0x88>
 800f612:	4629      	mov	r1, r5
 800f614:	4630      	mov	r0, r6
 800f616:	f7ff ffbf 	bl	800f598 <sbrk_aligned>
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	4604      	mov	r4, r0
 800f61e:	d158      	bne.n	800f6d2 <_malloc_r+0xf6>
 800f620:	f8d8 4000 	ldr.w	r4, [r8]
 800f624:	4627      	mov	r7, r4
 800f626:	2f00      	cmp	r7, #0
 800f628:	d143      	bne.n	800f6b2 <_malloc_r+0xd6>
 800f62a:	2c00      	cmp	r4, #0
 800f62c:	d04b      	beq.n	800f6c6 <_malloc_r+0xea>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	4639      	mov	r1, r7
 800f632:	4630      	mov	r0, r6
 800f634:	eb04 0903 	add.w	r9, r4, r3
 800f638:	f000 fb48 	bl	800fccc <_sbrk_r>
 800f63c:	4581      	cmp	r9, r0
 800f63e:	d142      	bne.n	800f6c6 <_malloc_r+0xea>
 800f640:	6821      	ldr	r1, [r4, #0]
 800f642:	1a6d      	subs	r5, r5, r1
 800f644:	4629      	mov	r1, r5
 800f646:	4630      	mov	r0, r6
 800f648:	f7ff ffa6 	bl	800f598 <sbrk_aligned>
 800f64c:	3001      	adds	r0, #1
 800f64e:	d03a      	beq.n	800f6c6 <_malloc_r+0xea>
 800f650:	6823      	ldr	r3, [r4, #0]
 800f652:	442b      	add	r3, r5
 800f654:	6023      	str	r3, [r4, #0]
 800f656:	f8d8 3000 	ldr.w	r3, [r8]
 800f65a:	685a      	ldr	r2, [r3, #4]
 800f65c:	bb62      	cbnz	r2, 800f6b8 <_malloc_r+0xdc>
 800f65e:	f8c8 7000 	str.w	r7, [r8]
 800f662:	e00f      	b.n	800f684 <_malloc_r+0xa8>
 800f664:	6822      	ldr	r2, [r4, #0]
 800f666:	1b52      	subs	r2, r2, r5
 800f668:	d420      	bmi.n	800f6ac <_malloc_r+0xd0>
 800f66a:	2a0b      	cmp	r2, #11
 800f66c:	d917      	bls.n	800f69e <_malloc_r+0xc2>
 800f66e:	1961      	adds	r1, r4, r5
 800f670:	42a3      	cmp	r3, r4
 800f672:	6025      	str	r5, [r4, #0]
 800f674:	bf18      	it	ne
 800f676:	6059      	strne	r1, [r3, #4]
 800f678:	6863      	ldr	r3, [r4, #4]
 800f67a:	bf08      	it	eq
 800f67c:	f8c8 1000 	streq.w	r1, [r8]
 800f680:	5162      	str	r2, [r4, r5]
 800f682:	604b      	str	r3, [r1, #4]
 800f684:	4630      	mov	r0, r6
 800f686:	f000 f82f 	bl	800f6e8 <__malloc_unlock>
 800f68a:	f104 000b 	add.w	r0, r4, #11
 800f68e:	1d23      	adds	r3, r4, #4
 800f690:	f020 0007 	bic.w	r0, r0, #7
 800f694:	1ac2      	subs	r2, r0, r3
 800f696:	bf1c      	itt	ne
 800f698:	1a1b      	subne	r3, r3, r0
 800f69a:	50a3      	strne	r3, [r4, r2]
 800f69c:	e7af      	b.n	800f5fe <_malloc_r+0x22>
 800f69e:	6862      	ldr	r2, [r4, #4]
 800f6a0:	42a3      	cmp	r3, r4
 800f6a2:	bf0c      	ite	eq
 800f6a4:	f8c8 2000 	streq.w	r2, [r8]
 800f6a8:	605a      	strne	r2, [r3, #4]
 800f6aa:	e7eb      	b.n	800f684 <_malloc_r+0xa8>
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	6864      	ldr	r4, [r4, #4]
 800f6b0:	e7ae      	b.n	800f610 <_malloc_r+0x34>
 800f6b2:	463c      	mov	r4, r7
 800f6b4:	687f      	ldr	r7, [r7, #4]
 800f6b6:	e7b6      	b.n	800f626 <_malloc_r+0x4a>
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	42a3      	cmp	r3, r4
 800f6be:	d1fb      	bne.n	800f6b8 <_malloc_r+0xdc>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	6053      	str	r3, [r2, #4]
 800f6c4:	e7de      	b.n	800f684 <_malloc_r+0xa8>
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	6033      	str	r3, [r6, #0]
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f000 f80c 	bl	800f6e8 <__malloc_unlock>
 800f6d0:	e794      	b.n	800f5fc <_malloc_r+0x20>
 800f6d2:	6005      	str	r5, [r0, #0]
 800f6d4:	e7d6      	b.n	800f684 <_malloc_r+0xa8>
 800f6d6:	bf00      	nop
 800f6d8:	2000a954 	.word	0x2000a954

0800f6dc <__malloc_lock>:
 800f6dc:	4801      	ldr	r0, [pc, #4]	@ (800f6e4 <__malloc_lock+0x8>)
 800f6de:	f000 bb42 	b.w	800fd66 <__retarget_lock_acquire_recursive>
 800f6e2:	bf00      	nop
 800f6e4:	2000aa99 	.word	0x2000aa99

0800f6e8 <__malloc_unlock>:
 800f6e8:	4801      	ldr	r0, [pc, #4]	@ (800f6f0 <__malloc_unlock+0x8>)
 800f6ea:	f000 bb3d 	b.w	800fd68 <__retarget_lock_release_recursive>
 800f6ee:	bf00      	nop
 800f6f0:	2000aa99 	.word	0x2000aa99

0800f6f4 <srand>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4b10      	ldr	r3, [pc, #64]	@ (800f738 <srand+0x44>)
 800f6f8:	681d      	ldr	r5, [r3, #0]
 800f6fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	b9b3      	cbnz	r3, 800f72e <srand+0x3a>
 800f700:	2018      	movs	r0, #24
 800f702:	f7ff ff39 	bl	800f578 <malloc>
 800f706:	4602      	mov	r2, r0
 800f708:	6328      	str	r0, [r5, #48]	@ 0x30
 800f70a:	b920      	cbnz	r0, 800f716 <srand+0x22>
 800f70c:	4b0b      	ldr	r3, [pc, #44]	@ (800f73c <srand+0x48>)
 800f70e:	480c      	ldr	r0, [pc, #48]	@ (800f740 <srand+0x4c>)
 800f710:	2146      	movs	r1, #70	@ 0x46
 800f712:	f000 fb39 	bl	800fd88 <__assert_func>
 800f716:	490b      	ldr	r1, [pc, #44]	@ (800f744 <srand+0x50>)
 800f718:	4b0b      	ldr	r3, [pc, #44]	@ (800f748 <srand+0x54>)
 800f71a:	e9c0 1300 	strd	r1, r3, [r0]
 800f71e:	4b0b      	ldr	r3, [pc, #44]	@ (800f74c <srand+0x58>)
 800f720:	6083      	str	r3, [r0, #8]
 800f722:	230b      	movs	r3, #11
 800f724:	8183      	strh	r3, [r0, #12]
 800f726:	2100      	movs	r1, #0
 800f728:	2001      	movs	r0, #1
 800f72a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f72e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f730:	2200      	movs	r2, #0
 800f732:	611c      	str	r4, [r3, #16]
 800f734:	615a      	str	r2, [r3, #20]
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	20000034 	.word	0x20000034
 800f73c:	080112f0 	.word	0x080112f0
 800f740:	08011307 	.word	0x08011307
 800f744:	abcd330e 	.word	0xabcd330e
 800f748:	e66d1234 	.word	0xe66d1234
 800f74c:	0005deec 	.word	0x0005deec

0800f750 <rand>:
 800f750:	4b16      	ldr	r3, [pc, #88]	@ (800f7ac <rand+0x5c>)
 800f752:	b510      	push	{r4, lr}
 800f754:	681c      	ldr	r4, [r3, #0]
 800f756:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f758:	b9b3      	cbnz	r3, 800f788 <rand+0x38>
 800f75a:	2018      	movs	r0, #24
 800f75c:	f7ff ff0c 	bl	800f578 <malloc>
 800f760:	4602      	mov	r2, r0
 800f762:	6320      	str	r0, [r4, #48]	@ 0x30
 800f764:	b920      	cbnz	r0, 800f770 <rand+0x20>
 800f766:	4b12      	ldr	r3, [pc, #72]	@ (800f7b0 <rand+0x60>)
 800f768:	4812      	ldr	r0, [pc, #72]	@ (800f7b4 <rand+0x64>)
 800f76a:	2152      	movs	r1, #82	@ 0x52
 800f76c:	f000 fb0c 	bl	800fd88 <__assert_func>
 800f770:	4911      	ldr	r1, [pc, #68]	@ (800f7b8 <rand+0x68>)
 800f772:	4b12      	ldr	r3, [pc, #72]	@ (800f7bc <rand+0x6c>)
 800f774:	e9c0 1300 	strd	r1, r3, [r0]
 800f778:	4b11      	ldr	r3, [pc, #68]	@ (800f7c0 <rand+0x70>)
 800f77a:	6083      	str	r3, [r0, #8]
 800f77c:	230b      	movs	r3, #11
 800f77e:	8183      	strh	r3, [r0, #12]
 800f780:	2100      	movs	r1, #0
 800f782:	2001      	movs	r0, #1
 800f784:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f788:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f78a:	480e      	ldr	r0, [pc, #56]	@ (800f7c4 <rand+0x74>)
 800f78c:	690b      	ldr	r3, [r1, #16]
 800f78e:	694c      	ldr	r4, [r1, #20]
 800f790:	4a0d      	ldr	r2, [pc, #52]	@ (800f7c8 <rand+0x78>)
 800f792:	4358      	muls	r0, r3
 800f794:	fb02 0004 	mla	r0, r2, r4, r0
 800f798:	fba3 3202 	umull	r3, r2, r3, r2
 800f79c:	3301      	adds	r3, #1
 800f79e:	eb40 0002 	adc.w	r0, r0, r2
 800f7a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f7a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f7aa:	bd10      	pop	{r4, pc}
 800f7ac:	20000034 	.word	0x20000034
 800f7b0:	080112f0 	.word	0x080112f0
 800f7b4:	08011307 	.word	0x08011307
 800f7b8:	abcd330e 	.word	0xabcd330e
 800f7bc:	e66d1234 	.word	0xe66d1234
 800f7c0:	0005deec 	.word	0x0005deec
 800f7c4:	5851f42d 	.word	0x5851f42d
 800f7c8:	4c957f2d 	.word	0x4c957f2d

0800f7cc <realloc>:
 800f7cc:	4b02      	ldr	r3, [pc, #8]	@ (800f7d8 <realloc+0xc>)
 800f7ce:	460a      	mov	r2, r1
 800f7d0:	4601      	mov	r1, r0
 800f7d2:	6818      	ldr	r0, [r3, #0]
 800f7d4:	f000 b802 	b.w	800f7dc <_realloc_r>
 800f7d8:	20000034 	.word	0x20000034

0800f7dc <_realloc_r>:
 800f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e0:	4680      	mov	r8, r0
 800f7e2:	4615      	mov	r5, r2
 800f7e4:	460c      	mov	r4, r1
 800f7e6:	b921      	cbnz	r1, 800f7f2 <_realloc_r+0x16>
 800f7e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	f7ff bef5 	b.w	800f5dc <_malloc_r>
 800f7f2:	b92a      	cbnz	r2, 800f800 <_realloc_r+0x24>
 800f7f4:	f000 faf2 	bl	800fddc <_free_r>
 800f7f8:	2400      	movs	r4, #0
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f800:	f000 fb36 	bl	800fe70 <_malloc_usable_size_r>
 800f804:	4285      	cmp	r5, r0
 800f806:	4606      	mov	r6, r0
 800f808:	d802      	bhi.n	800f810 <_realloc_r+0x34>
 800f80a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f80e:	d8f4      	bhi.n	800f7fa <_realloc_r+0x1e>
 800f810:	4629      	mov	r1, r5
 800f812:	4640      	mov	r0, r8
 800f814:	f7ff fee2 	bl	800f5dc <_malloc_r>
 800f818:	4607      	mov	r7, r0
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d0ec      	beq.n	800f7f8 <_realloc_r+0x1c>
 800f81e:	42b5      	cmp	r5, r6
 800f820:	462a      	mov	r2, r5
 800f822:	4621      	mov	r1, r4
 800f824:	bf28      	it	cs
 800f826:	4632      	movcs	r2, r6
 800f828:	f000 fa9f 	bl	800fd6a <memcpy>
 800f82c:	4621      	mov	r1, r4
 800f82e:	4640      	mov	r0, r8
 800f830:	f000 fad4 	bl	800fddc <_free_r>
 800f834:	463c      	mov	r4, r7
 800f836:	e7e0      	b.n	800f7fa <_realloc_r+0x1e>

0800f838 <_strtoul_l.constprop.0>:
 800f838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f83c:	4e34      	ldr	r6, [pc, #208]	@ (800f910 <_strtoul_l.constprop.0+0xd8>)
 800f83e:	4686      	mov	lr, r0
 800f840:	460d      	mov	r5, r1
 800f842:	4628      	mov	r0, r5
 800f844:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f848:	5d37      	ldrb	r7, [r6, r4]
 800f84a:	f017 0708 	ands.w	r7, r7, #8
 800f84e:	d1f8      	bne.n	800f842 <_strtoul_l.constprop.0+0xa>
 800f850:	2c2d      	cmp	r4, #45	@ 0x2d
 800f852:	d12f      	bne.n	800f8b4 <_strtoul_l.constprop.0+0x7c>
 800f854:	782c      	ldrb	r4, [r5, #0]
 800f856:	2701      	movs	r7, #1
 800f858:	1c85      	adds	r5, r0, #2
 800f85a:	f033 0010 	bics.w	r0, r3, #16
 800f85e:	d109      	bne.n	800f874 <_strtoul_l.constprop.0+0x3c>
 800f860:	2c30      	cmp	r4, #48	@ 0x30
 800f862:	d12c      	bne.n	800f8be <_strtoul_l.constprop.0+0x86>
 800f864:	7828      	ldrb	r0, [r5, #0]
 800f866:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f86a:	2858      	cmp	r0, #88	@ 0x58
 800f86c:	d127      	bne.n	800f8be <_strtoul_l.constprop.0+0x86>
 800f86e:	786c      	ldrb	r4, [r5, #1]
 800f870:	2310      	movs	r3, #16
 800f872:	3502      	adds	r5, #2
 800f874:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800f878:	2600      	movs	r6, #0
 800f87a:	fbb8 f8f3 	udiv	r8, r8, r3
 800f87e:	fb03 f908 	mul.w	r9, r3, r8
 800f882:	ea6f 0909 	mvn.w	r9, r9
 800f886:	4630      	mov	r0, r6
 800f888:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f88c:	f1bc 0f09 	cmp.w	ip, #9
 800f890:	d81c      	bhi.n	800f8cc <_strtoul_l.constprop.0+0x94>
 800f892:	4664      	mov	r4, ip
 800f894:	42a3      	cmp	r3, r4
 800f896:	dd2a      	ble.n	800f8ee <_strtoul_l.constprop.0+0xb6>
 800f898:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800f89c:	d007      	beq.n	800f8ae <_strtoul_l.constprop.0+0x76>
 800f89e:	4580      	cmp	r8, r0
 800f8a0:	d322      	bcc.n	800f8e8 <_strtoul_l.constprop.0+0xb0>
 800f8a2:	d101      	bne.n	800f8a8 <_strtoul_l.constprop.0+0x70>
 800f8a4:	45a1      	cmp	r9, r4
 800f8a6:	db1f      	blt.n	800f8e8 <_strtoul_l.constprop.0+0xb0>
 800f8a8:	fb00 4003 	mla	r0, r0, r3, r4
 800f8ac:	2601      	movs	r6, #1
 800f8ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8b2:	e7e9      	b.n	800f888 <_strtoul_l.constprop.0+0x50>
 800f8b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800f8b6:	bf04      	itt	eq
 800f8b8:	782c      	ldrbeq	r4, [r5, #0]
 800f8ba:	1c85      	addeq	r5, r0, #2
 800f8bc:	e7cd      	b.n	800f85a <_strtoul_l.constprop.0+0x22>
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1d8      	bne.n	800f874 <_strtoul_l.constprop.0+0x3c>
 800f8c2:	2c30      	cmp	r4, #48	@ 0x30
 800f8c4:	bf0c      	ite	eq
 800f8c6:	2308      	moveq	r3, #8
 800f8c8:	230a      	movne	r3, #10
 800f8ca:	e7d3      	b.n	800f874 <_strtoul_l.constprop.0+0x3c>
 800f8cc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f8d0:	f1bc 0f19 	cmp.w	ip, #25
 800f8d4:	d801      	bhi.n	800f8da <_strtoul_l.constprop.0+0xa2>
 800f8d6:	3c37      	subs	r4, #55	@ 0x37
 800f8d8:	e7dc      	b.n	800f894 <_strtoul_l.constprop.0+0x5c>
 800f8da:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f8de:	f1bc 0f19 	cmp.w	ip, #25
 800f8e2:	d804      	bhi.n	800f8ee <_strtoul_l.constprop.0+0xb6>
 800f8e4:	3c57      	subs	r4, #87	@ 0x57
 800f8e6:	e7d5      	b.n	800f894 <_strtoul_l.constprop.0+0x5c>
 800f8e8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800f8ec:	e7df      	b.n	800f8ae <_strtoul_l.constprop.0+0x76>
 800f8ee:	1c73      	adds	r3, r6, #1
 800f8f0:	d106      	bne.n	800f900 <_strtoul_l.constprop.0+0xc8>
 800f8f2:	2322      	movs	r3, #34	@ 0x22
 800f8f4:	f8ce 3000 	str.w	r3, [lr]
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	b932      	cbnz	r2, 800f90a <_strtoul_l.constprop.0+0xd2>
 800f8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f900:	b107      	cbz	r7, 800f904 <_strtoul_l.constprop.0+0xcc>
 800f902:	4240      	negs	r0, r0
 800f904:	2a00      	cmp	r2, #0
 800f906:	d0f9      	beq.n	800f8fc <_strtoul_l.constprop.0+0xc4>
 800f908:	b106      	cbz	r6, 800f90c <_strtoul_l.constprop.0+0xd4>
 800f90a:	1e69      	subs	r1, r5, #1
 800f90c:	6011      	str	r1, [r2, #0]
 800f90e:	e7f5      	b.n	800f8fc <_strtoul_l.constprop.0+0xc4>
 800f910:	08011360 	.word	0x08011360

0800f914 <strtoul>:
 800f914:	4613      	mov	r3, r2
 800f916:	460a      	mov	r2, r1
 800f918:	4601      	mov	r1, r0
 800f91a:	4802      	ldr	r0, [pc, #8]	@ (800f924 <strtoul+0x10>)
 800f91c:	6800      	ldr	r0, [r0, #0]
 800f91e:	f7ff bf8b 	b.w	800f838 <_strtoul_l.constprop.0>
 800f922:	bf00      	nop
 800f924:	20000034 	.word	0x20000034

0800f928 <std>:
 800f928:	2300      	movs	r3, #0
 800f92a:	b510      	push	{r4, lr}
 800f92c:	4604      	mov	r4, r0
 800f92e:	e9c0 3300 	strd	r3, r3, [r0]
 800f932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f936:	6083      	str	r3, [r0, #8]
 800f938:	8181      	strh	r1, [r0, #12]
 800f93a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f93c:	81c2      	strh	r2, [r0, #14]
 800f93e:	6183      	str	r3, [r0, #24]
 800f940:	4619      	mov	r1, r3
 800f942:	2208      	movs	r2, #8
 800f944:	305c      	adds	r0, #92	@ 0x5c
 800f946:	f000 f973 	bl	800fc30 <memset>
 800f94a:	4b0d      	ldr	r3, [pc, #52]	@ (800f980 <std+0x58>)
 800f94c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f94e:	4b0d      	ldr	r3, [pc, #52]	@ (800f984 <std+0x5c>)
 800f950:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f952:	4b0d      	ldr	r3, [pc, #52]	@ (800f988 <std+0x60>)
 800f954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f956:	4b0d      	ldr	r3, [pc, #52]	@ (800f98c <std+0x64>)
 800f958:	6323      	str	r3, [r4, #48]	@ 0x30
 800f95a:	4b0d      	ldr	r3, [pc, #52]	@ (800f990 <std+0x68>)
 800f95c:	6224      	str	r4, [r4, #32]
 800f95e:	429c      	cmp	r4, r3
 800f960:	d006      	beq.n	800f970 <std+0x48>
 800f962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f966:	4294      	cmp	r4, r2
 800f968:	d002      	beq.n	800f970 <std+0x48>
 800f96a:	33d0      	adds	r3, #208	@ 0xd0
 800f96c:	429c      	cmp	r4, r3
 800f96e:	d105      	bne.n	800f97c <std+0x54>
 800f970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f978:	f000 b9f4 	b.w	800fd64 <__retarget_lock_init_recursive>
 800f97c:	bd10      	pop	{r4, pc}
 800f97e:	bf00      	nop
 800f980:	0800fb39 	.word	0x0800fb39
 800f984:	0800fb5b 	.word	0x0800fb5b
 800f988:	0800fb93 	.word	0x0800fb93
 800f98c:	0800fbb7 	.word	0x0800fbb7
 800f990:	2000a958 	.word	0x2000a958

0800f994 <stdio_exit_handler>:
 800f994:	4a02      	ldr	r2, [pc, #8]	@ (800f9a0 <stdio_exit_handler+0xc>)
 800f996:	4903      	ldr	r1, [pc, #12]	@ (800f9a4 <stdio_exit_handler+0x10>)
 800f998:	4803      	ldr	r0, [pc, #12]	@ (800f9a8 <stdio_exit_handler+0x14>)
 800f99a:	f000 b869 	b.w	800fa70 <_fwalk_sglue>
 800f99e:	bf00      	nop
 800f9a0:	20000028 	.word	0x20000028
 800f9a4:	080107d9 	.word	0x080107d9
 800f9a8:	20000038 	.word	0x20000038

0800f9ac <cleanup_stdio>:
 800f9ac:	6841      	ldr	r1, [r0, #4]
 800f9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e0 <cleanup_stdio+0x34>)
 800f9b0:	4299      	cmp	r1, r3
 800f9b2:	b510      	push	{r4, lr}
 800f9b4:	4604      	mov	r4, r0
 800f9b6:	d001      	beq.n	800f9bc <cleanup_stdio+0x10>
 800f9b8:	f000 ff0e 	bl	80107d8 <_fflush_r>
 800f9bc:	68a1      	ldr	r1, [r4, #8]
 800f9be:	4b09      	ldr	r3, [pc, #36]	@ (800f9e4 <cleanup_stdio+0x38>)
 800f9c0:	4299      	cmp	r1, r3
 800f9c2:	d002      	beq.n	800f9ca <cleanup_stdio+0x1e>
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f000 ff07 	bl	80107d8 <_fflush_r>
 800f9ca:	68e1      	ldr	r1, [r4, #12]
 800f9cc:	4b06      	ldr	r3, [pc, #24]	@ (800f9e8 <cleanup_stdio+0x3c>)
 800f9ce:	4299      	cmp	r1, r3
 800f9d0:	d004      	beq.n	800f9dc <cleanup_stdio+0x30>
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9d8:	f000 befe 	b.w	80107d8 <_fflush_r>
 800f9dc:	bd10      	pop	{r4, pc}
 800f9de:	bf00      	nop
 800f9e0:	2000a958 	.word	0x2000a958
 800f9e4:	2000a9c0 	.word	0x2000a9c0
 800f9e8:	2000aa28 	.word	0x2000aa28

0800f9ec <global_stdio_init.part.0>:
 800f9ec:	b510      	push	{r4, lr}
 800f9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800fa1c <global_stdio_init.part.0+0x30>)
 800f9f0:	4c0b      	ldr	r4, [pc, #44]	@ (800fa20 <global_stdio_init.part.0+0x34>)
 800f9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800fa24 <global_stdio_init.part.0+0x38>)
 800f9f4:	601a      	str	r2, [r3, #0]
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	2104      	movs	r1, #4
 800f9fc:	f7ff ff94 	bl	800f928 <std>
 800fa00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fa04:	2201      	movs	r2, #1
 800fa06:	2109      	movs	r1, #9
 800fa08:	f7ff ff8e 	bl	800f928 <std>
 800fa0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fa10:	2202      	movs	r2, #2
 800fa12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa16:	2112      	movs	r1, #18
 800fa18:	f7ff bf86 	b.w	800f928 <std>
 800fa1c:	2000aa90 	.word	0x2000aa90
 800fa20:	2000a958 	.word	0x2000a958
 800fa24:	0800f995 	.word	0x0800f995

0800fa28 <__sfp_lock_acquire>:
 800fa28:	4801      	ldr	r0, [pc, #4]	@ (800fa30 <__sfp_lock_acquire+0x8>)
 800fa2a:	f000 b99c 	b.w	800fd66 <__retarget_lock_acquire_recursive>
 800fa2e:	bf00      	nop
 800fa30:	2000aa9a 	.word	0x2000aa9a

0800fa34 <__sfp_lock_release>:
 800fa34:	4801      	ldr	r0, [pc, #4]	@ (800fa3c <__sfp_lock_release+0x8>)
 800fa36:	f000 b997 	b.w	800fd68 <__retarget_lock_release_recursive>
 800fa3a:	bf00      	nop
 800fa3c:	2000aa9a 	.word	0x2000aa9a

0800fa40 <__sinit>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	4604      	mov	r4, r0
 800fa44:	f7ff fff0 	bl	800fa28 <__sfp_lock_acquire>
 800fa48:	6a23      	ldr	r3, [r4, #32]
 800fa4a:	b11b      	cbz	r3, 800fa54 <__sinit+0x14>
 800fa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa50:	f7ff bff0 	b.w	800fa34 <__sfp_lock_release>
 800fa54:	4b04      	ldr	r3, [pc, #16]	@ (800fa68 <__sinit+0x28>)
 800fa56:	6223      	str	r3, [r4, #32]
 800fa58:	4b04      	ldr	r3, [pc, #16]	@ (800fa6c <__sinit+0x2c>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d1f5      	bne.n	800fa4c <__sinit+0xc>
 800fa60:	f7ff ffc4 	bl	800f9ec <global_stdio_init.part.0>
 800fa64:	e7f2      	b.n	800fa4c <__sinit+0xc>
 800fa66:	bf00      	nop
 800fa68:	0800f9ad 	.word	0x0800f9ad
 800fa6c:	2000aa90 	.word	0x2000aa90

0800fa70 <_fwalk_sglue>:
 800fa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa74:	4607      	mov	r7, r0
 800fa76:	4688      	mov	r8, r1
 800fa78:	4614      	mov	r4, r2
 800fa7a:	2600      	movs	r6, #0
 800fa7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa80:	f1b9 0901 	subs.w	r9, r9, #1
 800fa84:	d505      	bpl.n	800fa92 <_fwalk_sglue+0x22>
 800fa86:	6824      	ldr	r4, [r4, #0]
 800fa88:	2c00      	cmp	r4, #0
 800fa8a:	d1f7      	bne.n	800fa7c <_fwalk_sglue+0xc>
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa92:	89ab      	ldrh	r3, [r5, #12]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d907      	bls.n	800faa8 <_fwalk_sglue+0x38>
 800fa98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	d003      	beq.n	800faa8 <_fwalk_sglue+0x38>
 800faa0:	4629      	mov	r1, r5
 800faa2:	4638      	mov	r0, r7
 800faa4:	47c0      	blx	r8
 800faa6:	4306      	orrs	r6, r0
 800faa8:	3568      	adds	r5, #104	@ 0x68
 800faaa:	e7e9      	b.n	800fa80 <_fwalk_sglue+0x10>

0800faac <iprintf>:
 800faac:	b40f      	push	{r0, r1, r2, r3}
 800faae:	b507      	push	{r0, r1, r2, lr}
 800fab0:	4906      	ldr	r1, [pc, #24]	@ (800facc <iprintf+0x20>)
 800fab2:	ab04      	add	r3, sp, #16
 800fab4:	6808      	ldr	r0, [r1, #0]
 800fab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800faba:	6881      	ldr	r1, [r0, #8]
 800fabc:	9301      	str	r3, [sp, #4]
 800fabe:	f000 fb61 	bl	8010184 <_vfiprintf_r>
 800fac2:	b003      	add	sp, #12
 800fac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fac8:	b004      	add	sp, #16
 800faca:	4770      	bx	lr
 800facc:	20000034 	.word	0x20000034

0800fad0 <sniprintf>:
 800fad0:	b40c      	push	{r2, r3}
 800fad2:	b530      	push	{r4, r5, lr}
 800fad4:	4b17      	ldr	r3, [pc, #92]	@ (800fb34 <sniprintf+0x64>)
 800fad6:	1e0c      	subs	r4, r1, #0
 800fad8:	681d      	ldr	r5, [r3, #0]
 800fada:	b09d      	sub	sp, #116	@ 0x74
 800fadc:	da08      	bge.n	800faf0 <sniprintf+0x20>
 800fade:	238b      	movs	r3, #139	@ 0x8b
 800fae0:	602b      	str	r3, [r5, #0]
 800fae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fae6:	b01d      	add	sp, #116	@ 0x74
 800fae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800faec:	b002      	add	sp, #8
 800faee:	4770      	bx	lr
 800faf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800faf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800faf8:	bf14      	ite	ne
 800fafa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800fafe:	4623      	moveq	r3, r4
 800fb00:	9304      	str	r3, [sp, #16]
 800fb02:	9307      	str	r3, [sp, #28]
 800fb04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb08:	9002      	str	r0, [sp, #8]
 800fb0a:	9006      	str	r0, [sp, #24]
 800fb0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fb12:	ab21      	add	r3, sp, #132	@ 0x84
 800fb14:	a902      	add	r1, sp, #8
 800fb16:	4628      	mov	r0, r5
 800fb18:	9301      	str	r3, [sp, #4]
 800fb1a:	f000 fa0d 	bl	800ff38 <_svfiprintf_r>
 800fb1e:	1c43      	adds	r3, r0, #1
 800fb20:	bfbc      	itt	lt
 800fb22:	238b      	movlt	r3, #139	@ 0x8b
 800fb24:	602b      	strlt	r3, [r5, #0]
 800fb26:	2c00      	cmp	r4, #0
 800fb28:	d0dd      	beq.n	800fae6 <sniprintf+0x16>
 800fb2a:	9b02      	ldr	r3, [sp, #8]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	e7d9      	b.n	800fae6 <sniprintf+0x16>
 800fb32:	bf00      	nop
 800fb34:	20000034 	.word	0x20000034

0800fb38 <__sread>:
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb40:	f000 f8b2 	bl	800fca8 <_read_r>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	bfab      	itete	ge
 800fb48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fb4a:	89a3      	ldrhlt	r3, [r4, #12]
 800fb4c:	181b      	addge	r3, r3, r0
 800fb4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fb52:	bfac      	ite	ge
 800fb54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fb56:	81a3      	strhlt	r3, [r4, #12]
 800fb58:	bd10      	pop	{r4, pc}

0800fb5a <__swrite>:
 800fb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb5e:	461f      	mov	r7, r3
 800fb60:	898b      	ldrh	r3, [r1, #12]
 800fb62:	05db      	lsls	r3, r3, #23
 800fb64:	4605      	mov	r5, r0
 800fb66:	460c      	mov	r4, r1
 800fb68:	4616      	mov	r6, r2
 800fb6a:	d505      	bpl.n	800fb78 <__swrite+0x1e>
 800fb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb70:	2302      	movs	r3, #2
 800fb72:	2200      	movs	r2, #0
 800fb74:	f000 f886 	bl	800fc84 <_lseek_r>
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb82:	81a3      	strh	r3, [r4, #12]
 800fb84:	4632      	mov	r2, r6
 800fb86:	463b      	mov	r3, r7
 800fb88:	4628      	mov	r0, r5
 800fb8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb8e:	f000 b8ad 	b.w	800fcec <_write_r>

0800fb92 <__sseek>:
 800fb92:	b510      	push	{r4, lr}
 800fb94:	460c      	mov	r4, r1
 800fb96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb9a:	f000 f873 	bl	800fc84 <_lseek_r>
 800fb9e:	1c43      	adds	r3, r0, #1
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	bf15      	itete	ne
 800fba4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fba6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fbaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fbae:	81a3      	strheq	r3, [r4, #12]
 800fbb0:	bf18      	it	ne
 800fbb2:	81a3      	strhne	r3, [r4, #12]
 800fbb4:	bd10      	pop	{r4, pc}

0800fbb6 <__sclose>:
 800fbb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbba:	f000 b853 	b.w	800fc64 <_close_r>

0800fbbe <_vsniprintf_r>:
 800fbbe:	b530      	push	{r4, r5, lr}
 800fbc0:	4614      	mov	r4, r2
 800fbc2:	2c00      	cmp	r4, #0
 800fbc4:	b09b      	sub	sp, #108	@ 0x6c
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	461a      	mov	r2, r3
 800fbca:	da05      	bge.n	800fbd8 <_vsniprintf_r+0x1a>
 800fbcc:	238b      	movs	r3, #139	@ 0x8b
 800fbce:	6003      	str	r3, [r0, #0]
 800fbd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbd4:	b01b      	add	sp, #108	@ 0x6c
 800fbd6:	bd30      	pop	{r4, r5, pc}
 800fbd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fbdc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fbe0:	bf14      	ite	ne
 800fbe2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800fbe6:	4623      	moveq	r3, r4
 800fbe8:	9302      	str	r3, [sp, #8]
 800fbea:	9305      	str	r3, [sp, #20]
 800fbec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbf0:	9100      	str	r1, [sp, #0]
 800fbf2:	9104      	str	r1, [sp, #16]
 800fbf4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fbf8:	4669      	mov	r1, sp
 800fbfa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fbfc:	f000 f99c 	bl	800ff38 <_svfiprintf_r>
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	bfbc      	itt	lt
 800fc04:	238b      	movlt	r3, #139	@ 0x8b
 800fc06:	602b      	strlt	r3, [r5, #0]
 800fc08:	2c00      	cmp	r4, #0
 800fc0a:	d0e3      	beq.n	800fbd4 <_vsniprintf_r+0x16>
 800fc0c:	9b00      	ldr	r3, [sp, #0]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	701a      	strb	r2, [r3, #0]
 800fc12:	e7df      	b.n	800fbd4 <_vsniprintf_r+0x16>

0800fc14 <vsniprintf>:
 800fc14:	b507      	push	{r0, r1, r2, lr}
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	460a      	mov	r2, r1
 800fc1c:	4601      	mov	r1, r0
 800fc1e:	4803      	ldr	r0, [pc, #12]	@ (800fc2c <vsniprintf+0x18>)
 800fc20:	6800      	ldr	r0, [r0, #0]
 800fc22:	f7ff ffcc 	bl	800fbbe <_vsniprintf_r>
 800fc26:	b003      	add	sp, #12
 800fc28:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc2c:	20000034 	.word	0x20000034

0800fc30 <memset>:
 800fc30:	4402      	add	r2, r0
 800fc32:	4603      	mov	r3, r0
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d100      	bne.n	800fc3a <memset+0xa>
 800fc38:	4770      	bx	lr
 800fc3a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc3e:	e7f9      	b.n	800fc34 <memset+0x4>

0800fc40 <strncmp>:
 800fc40:	b510      	push	{r4, lr}
 800fc42:	b16a      	cbz	r2, 800fc60 <strncmp+0x20>
 800fc44:	3901      	subs	r1, #1
 800fc46:	1884      	adds	r4, r0, r2
 800fc48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d103      	bne.n	800fc5c <strncmp+0x1c>
 800fc54:	42a0      	cmp	r0, r4
 800fc56:	d001      	beq.n	800fc5c <strncmp+0x1c>
 800fc58:	2a00      	cmp	r2, #0
 800fc5a:	d1f5      	bne.n	800fc48 <strncmp+0x8>
 800fc5c:	1ad0      	subs	r0, r2, r3
 800fc5e:	bd10      	pop	{r4, pc}
 800fc60:	4610      	mov	r0, r2
 800fc62:	e7fc      	b.n	800fc5e <strncmp+0x1e>

0800fc64 <_close_r>:
 800fc64:	b538      	push	{r3, r4, r5, lr}
 800fc66:	4d06      	ldr	r5, [pc, #24]	@ (800fc80 <_close_r+0x1c>)
 800fc68:	2300      	movs	r3, #0
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	4608      	mov	r0, r1
 800fc6e:	602b      	str	r3, [r5, #0]
 800fc70:	f7f1 fc4c 	bl	800150c <_close>
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	d102      	bne.n	800fc7e <_close_r+0x1a>
 800fc78:	682b      	ldr	r3, [r5, #0]
 800fc7a:	b103      	cbz	r3, 800fc7e <_close_r+0x1a>
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	bd38      	pop	{r3, r4, r5, pc}
 800fc80:	2000aa94 	.word	0x2000aa94

0800fc84 <_lseek_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4d07      	ldr	r5, [pc, #28]	@ (800fca4 <_lseek_r+0x20>)
 800fc88:	4604      	mov	r4, r0
 800fc8a:	4608      	mov	r0, r1
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	2200      	movs	r2, #0
 800fc90:	602a      	str	r2, [r5, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	f7f1 fc61 	bl	800155a <_lseek>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d102      	bne.n	800fca2 <_lseek_r+0x1e>
 800fc9c:	682b      	ldr	r3, [r5, #0]
 800fc9e:	b103      	cbz	r3, 800fca2 <_lseek_r+0x1e>
 800fca0:	6023      	str	r3, [r4, #0]
 800fca2:	bd38      	pop	{r3, r4, r5, pc}
 800fca4:	2000aa94 	.word	0x2000aa94

0800fca8 <_read_r>:
 800fca8:	b538      	push	{r3, r4, r5, lr}
 800fcaa:	4d07      	ldr	r5, [pc, #28]	@ (800fcc8 <_read_r+0x20>)
 800fcac:	4604      	mov	r4, r0
 800fcae:	4608      	mov	r0, r1
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	602a      	str	r2, [r5, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f7f1 fbef 	bl	800149a <_read>
 800fcbc:	1c43      	adds	r3, r0, #1
 800fcbe:	d102      	bne.n	800fcc6 <_read_r+0x1e>
 800fcc0:	682b      	ldr	r3, [r5, #0]
 800fcc2:	b103      	cbz	r3, 800fcc6 <_read_r+0x1e>
 800fcc4:	6023      	str	r3, [r4, #0]
 800fcc6:	bd38      	pop	{r3, r4, r5, pc}
 800fcc8:	2000aa94 	.word	0x2000aa94

0800fccc <_sbrk_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d06      	ldr	r5, [pc, #24]	@ (800fce8 <_sbrk_r+0x1c>)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	602b      	str	r3, [r5, #0]
 800fcd8:	f7f1 fc4c 	bl	8001574 <_sbrk>
 800fcdc:	1c43      	adds	r3, r0, #1
 800fcde:	d102      	bne.n	800fce6 <_sbrk_r+0x1a>
 800fce0:	682b      	ldr	r3, [r5, #0]
 800fce2:	b103      	cbz	r3, 800fce6 <_sbrk_r+0x1a>
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	bd38      	pop	{r3, r4, r5, pc}
 800fce8:	2000aa94 	.word	0x2000aa94

0800fcec <_write_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4d07      	ldr	r5, [pc, #28]	@ (800fd0c <_write_r+0x20>)
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	602a      	str	r2, [r5, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f1 fbea 	bl	80014d4 <_write>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_write_r+0x1e>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_write_r+0x1e>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	2000aa94 	.word	0x2000aa94

0800fd10 <__errno>:
 800fd10:	4b01      	ldr	r3, [pc, #4]	@ (800fd18 <__errno+0x8>)
 800fd12:	6818      	ldr	r0, [r3, #0]
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20000034 	.word	0x20000034

0800fd1c <__libc_init_array>:
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	4d0d      	ldr	r5, [pc, #52]	@ (800fd54 <__libc_init_array+0x38>)
 800fd20:	4c0d      	ldr	r4, [pc, #52]	@ (800fd58 <__libc_init_array+0x3c>)
 800fd22:	1b64      	subs	r4, r4, r5
 800fd24:	10a4      	asrs	r4, r4, #2
 800fd26:	2600      	movs	r6, #0
 800fd28:	42a6      	cmp	r6, r4
 800fd2a:	d109      	bne.n	800fd40 <__libc_init_array+0x24>
 800fd2c:	4d0b      	ldr	r5, [pc, #44]	@ (800fd5c <__libc_init_array+0x40>)
 800fd2e:	4c0c      	ldr	r4, [pc, #48]	@ (800fd60 <__libc_init_array+0x44>)
 800fd30:	f000 ff0a 	bl	8010b48 <_init>
 800fd34:	1b64      	subs	r4, r4, r5
 800fd36:	10a4      	asrs	r4, r4, #2
 800fd38:	2600      	movs	r6, #0
 800fd3a:	42a6      	cmp	r6, r4
 800fd3c:	d105      	bne.n	800fd4a <__libc_init_array+0x2e>
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd44:	4798      	blx	r3
 800fd46:	3601      	adds	r6, #1
 800fd48:	e7ee      	b.n	800fd28 <__libc_init_array+0xc>
 800fd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd4e:	4798      	blx	r3
 800fd50:	3601      	adds	r6, #1
 800fd52:	e7f2      	b.n	800fd3a <__libc_init_array+0x1e>
 800fd54:	080114d8 	.word	0x080114d8
 800fd58:	080114d8 	.word	0x080114d8
 800fd5c:	080114d8 	.word	0x080114d8
 800fd60:	080114dc 	.word	0x080114dc

0800fd64 <__retarget_lock_init_recursive>:
 800fd64:	4770      	bx	lr

0800fd66 <__retarget_lock_acquire_recursive>:
 800fd66:	4770      	bx	lr

0800fd68 <__retarget_lock_release_recursive>:
 800fd68:	4770      	bx	lr

0800fd6a <memcpy>:
 800fd6a:	440a      	add	r2, r1
 800fd6c:	4291      	cmp	r1, r2
 800fd6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fd72:	d100      	bne.n	800fd76 <memcpy+0xc>
 800fd74:	4770      	bx	lr
 800fd76:	b510      	push	{r4, lr}
 800fd78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd80:	4291      	cmp	r1, r2
 800fd82:	d1f9      	bne.n	800fd78 <memcpy+0xe>
 800fd84:	bd10      	pop	{r4, pc}
	...

0800fd88 <__assert_func>:
 800fd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd8a:	4614      	mov	r4, r2
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	4b09      	ldr	r3, [pc, #36]	@ (800fdb4 <__assert_func+0x2c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4605      	mov	r5, r0
 800fd94:	68d8      	ldr	r0, [r3, #12]
 800fd96:	b954      	cbnz	r4, 800fdae <__assert_func+0x26>
 800fd98:	4b07      	ldr	r3, [pc, #28]	@ (800fdb8 <__assert_func+0x30>)
 800fd9a:	461c      	mov	r4, r3
 800fd9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fda0:	9100      	str	r1, [sp, #0]
 800fda2:	462b      	mov	r3, r5
 800fda4:	4905      	ldr	r1, [pc, #20]	@ (800fdbc <__assert_func+0x34>)
 800fda6:	f000 fd3f 	bl	8010828 <fiprintf>
 800fdaa:	f000 fdfd 	bl	80109a8 <abort>
 800fdae:	4b04      	ldr	r3, [pc, #16]	@ (800fdc0 <__assert_func+0x38>)
 800fdb0:	e7f4      	b.n	800fd9c <__assert_func+0x14>
 800fdb2:	bf00      	nop
 800fdb4:	20000034 	.word	0x20000034
 800fdb8:	0801149b 	.word	0x0801149b
 800fdbc:	0801146d 	.word	0x0801146d
 800fdc0:	08011460 	.word	0x08011460

0800fdc4 <__env_lock>:
 800fdc4:	4801      	ldr	r0, [pc, #4]	@ (800fdcc <__env_lock+0x8>)
 800fdc6:	f7ff bfce 	b.w	800fd66 <__retarget_lock_acquire_recursive>
 800fdca:	bf00      	nop
 800fdcc:	2000aa98 	.word	0x2000aa98

0800fdd0 <__env_unlock>:
 800fdd0:	4801      	ldr	r0, [pc, #4]	@ (800fdd8 <__env_unlock+0x8>)
 800fdd2:	f7ff bfc9 	b.w	800fd68 <__retarget_lock_release_recursive>
 800fdd6:	bf00      	nop
 800fdd8:	2000aa98 	.word	0x2000aa98

0800fddc <_free_r>:
 800fddc:	b538      	push	{r3, r4, r5, lr}
 800fdde:	4605      	mov	r5, r0
 800fde0:	2900      	cmp	r1, #0
 800fde2:	d041      	beq.n	800fe68 <_free_r+0x8c>
 800fde4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fde8:	1f0c      	subs	r4, r1, #4
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	bfb8      	it	lt
 800fdee:	18e4      	addlt	r4, r4, r3
 800fdf0:	f7ff fc74 	bl	800f6dc <__malloc_lock>
 800fdf4:	4a1d      	ldr	r2, [pc, #116]	@ (800fe6c <_free_r+0x90>)
 800fdf6:	6813      	ldr	r3, [r2, #0]
 800fdf8:	b933      	cbnz	r3, 800fe08 <_free_r+0x2c>
 800fdfa:	6063      	str	r3, [r4, #4]
 800fdfc:	6014      	str	r4, [r2, #0]
 800fdfe:	4628      	mov	r0, r5
 800fe00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe04:	f7ff bc70 	b.w	800f6e8 <__malloc_unlock>
 800fe08:	42a3      	cmp	r3, r4
 800fe0a:	d908      	bls.n	800fe1e <_free_r+0x42>
 800fe0c:	6820      	ldr	r0, [r4, #0]
 800fe0e:	1821      	adds	r1, r4, r0
 800fe10:	428b      	cmp	r3, r1
 800fe12:	bf01      	itttt	eq
 800fe14:	6819      	ldreq	r1, [r3, #0]
 800fe16:	685b      	ldreq	r3, [r3, #4]
 800fe18:	1809      	addeq	r1, r1, r0
 800fe1a:	6021      	streq	r1, [r4, #0]
 800fe1c:	e7ed      	b.n	800fdfa <_free_r+0x1e>
 800fe1e:	461a      	mov	r2, r3
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	b10b      	cbz	r3, 800fe28 <_free_r+0x4c>
 800fe24:	42a3      	cmp	r3, r4
 800fe26:	d9fa      	bls.n	800fe1e <_free_r+0x42>
 800fe28:	6811      	ldr	r1, [r2, #0]
 800fe2a:	1850      	adds	r0, r2, r1
 800fe2c:	42a0      	cmp	r0, r4
 800fe2e:	d10b      	bne.n	800fe48 <_free_r+0x6c>
 800fe30:	6820      	ldr	r0, [r4, #0]
 800fe32:	4401      	add	r1, r0
 800fe34:	1850      	adds	r0, r2, r1
 800fe36:	4283      	cmp	r3, r0
 800fe38:	6011      	str	r1, [r2, #0]
 800fe3a:	d1e0      	bne.n	800fdfe <_free_r+0x22>
 800fe3c:	6818      	ldr	r0, [r3, #0]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	6053      	str	r3, [r2, #4]
 800fe42:	4408      	add	r0, r1
 800fe44:	6010      	str	r0, [r2, #0]
 800fe46:	e7da      	b.n	800fdfe <_free_r+0x22>
 800fe48:	d902      	bls.n	800fe50 <_free_r+0x74>
 800fe4a:	230c      	movs	r3, #12
 800fe4c:	602b      	str	r3, [r5, #0]
 800fe4e:	e7d6      	b.n	800fdfe <_free_r+0x22>
 800fe50:	6820      	ldr	r0, [r4, #0]
 800fe52:	1821      	adds	r1, r4, r0
 800fe54:	428b      	cmp	r3, r1
 800fe56:	bf04      	itt	eq
 800fe58:	6819      	ldreq	r1, [r3, #0]
 800fe5a:	685b      	ldreq	r3, [r3, #4]
 800fe5c:	6063      	str	r3, [r4, #4]
 800fe5e:	bf04      	itt	eq
 800fe60:	1809      	addeq	r1, r1, r0
 800fe62:	6021      	streq	r1, [r4, #0]
 800fe64:	6054      	str	r4, [r2, #4]
 800fe66:	e7ca      	b.n	800fdfe <_free_r+0x22>
 800fe68:	bd38      	pop	{r3, r4, r5, pc}
 800fe6a:	bf00      	nop
 800fe6c:	2000a954 	.word	0x2000a954

0800fe70 <_malloc_usable_size_r>:
 800fe70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe74:	1f18      	subs	r0, r3, #4
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	bfbc      	itt	lt
 800fe7a:	580b      	ldrlt	r3, [r1, r0]
 800fe7c:	18c0      	addlt	r0, r0, r3
 800fe7e:	4770      	bx	lr

0800fe80 <__ssputs_r>:
 800fe80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe84:	688e      	ldr	r6, [r1, #8]
 800fe86:	461f      	mov	r7, r3
 800fe88:	42be      	cmp	r6, r7
 800fe8a:	680b      	ldr	r3, [r1, #0]
 800fe8c:	4682      	mov	sl, r0
 800fe8e:	460c      	mov	r4, r1
 800fe90:	4690      	mov	r8, r2
 800fe92:	d82d      	bhi.n	800fef0 <__ssputs_r+0x70>
 800fe94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe9c:	d026      	beq.n	800feec <__ssputs_r+0x6c>
 800fe9e:	6965      	ldr	r5, [r4, #20]
 800fea0:	6909      	ldr	r1, [r1, #16]
 800fea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fea6:	eba3 0901 	sub.w	r9, r3, r1
 800feaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800feae:	1c7b      	adds	r3, r7, #1
 800feb0:	444b      	add	r3, r9
 800feb2:	106d      	asrs	r5, r5, #1
 800feb4:	429d      	cmp	r5, r3
 800feb6:	bf38      	it	cc
 800feb8:	461d      	movcc	r5, r3
 800feba:	0553      	lsls	r3, r2, #21
 800febc:	d527      	bpl.n	800ff0e <__ssputs_r+0x8e>
 800febe:	4629      	mov	r1, r5
 800fec0:	f7ff fb8c 	bl	800f5dc <_malloc_r>
 800fec4:	4606      	mov	r6, r0
 800fec6:	b360      	cbz	r0, 800ff22 <__ssputs_r+0xa2>
 800fec8:	6921      	ldr	r1, [r4, #16]
 800feca:	464a      	mov	r2, r9
 800fecc:	f7ff ff4d 	bl	800fd6a <memcpy>
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feda:	81a3      	strh	r3, [r4, #12]
 800fedc:	6126      	str	r6, [r4, #16]
 800fede:	6165      	str	r5, [r4, #20]
 800fee0:	444e      	add	r6, r9
 800fee2:	eba5 0509 	sub.w	r5, r5, r9
 800fee6:	6026      	str	r6, [r4, #0]
 800fee8:	60a5      	str	r5, [r4, #8]
 800feea:	463e      	mov	r6, r7
 800feec:	42be      	cmp	r6, r7
 800feee:	d900      	bls.n	800fef2 <__ssputs_r+0x72>
 800fef0:	463e      	mov	r6, r7
 800fef2:	6820      	ldr	r0, [r4, #0]
 800fef4:	4632      	mov	r2, r6
 800fef6:	4641      	mov	r1, r8
 800fef8:	f000 fd3c 	bl	8010974 <memmove>
 800fefc:	68a3      	ldr	r3, [r4, #8]
 800fefe:	1b9b      	subs	r3, r3, r6
 800ff00:	60a3      	str	r3, [r4, #8]
 800ff02:	6823      	ldr	r3, [r4, #0]
 800ff04:	4433      	add	r3, r6
 800ff06:	6023      	str	r3, [r4, #0]
 800ff08:	2000      	movs	r0, #0
 800ff0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff0e:	462a      	mov	r2, r5
 800ff10:	f7ff fc64 	bl	800f7dc <_realloc_r>
 800ff14:	4606      	mov	r6, r0
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d1e0      	bne.n	800fedc <__ssputs_r+0x5c>
 800ff1a:	6921      	ldr	r1, [r4, #16]
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	f7ff ff5d 	bl	800fddc <_free_r>
 800ff22:	230c      	movs	r3, #12
 800ff24:	f8ca 3000 	str.w	r3, [sl]
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff2e:	81a3      	strh	r3, [r4, #12]
 800ff30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff34:	e7e9      	b.n	800ff0a <__ssputs_r+0x8a>
	...

0800ff38 <_svfiprintf_r>:
 800ff38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3c:	4698      	mov	r8, r3
 800ff3e:	898b      	ldrh	r3, [r1, #12]
 800ff40:	061b      	lsls	r3, r3, #24
 800ff42:	b09d      	sub	sp, #116	@ 0x74
 800ff44:	4607      	mov	r7, r0
 800ff46:	460d      	mov	r5, r1
 800ff48:	4614      	mov	r4, r2
 800ff4a:	d510      	bpl.n	800ff6e <_svfiprintf_r+0x36>
 800ff4c:	690b      	ldr	r3, [r1, #16]
 800ff4e:	b973      	cbnz	r3, 800ff6e <_svfiprintf_r+0x36>
 800ff50:	2140      	movs	r1, #64	@ 0x40
 800ff52:	f7ff fb43 	bl	800f5dc <_malloc_r>
 800ff56:	6028      	str	r0, [r5, #0]
 800ff58:	6128      	str	r0, [r5, #16]
 800ff5a:	b930      	cbnz	r0, 800ff6a <_svfiprintf_r+0x32>
 800ff5c:	230c      	movs	r3, #12
 800ff5e:	603b      	str	r3, [r7, #0]
 800ff60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff64:	b01d      	add	sp, #116	@ 0x74
 800ff66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6a:	2340      	movs	r3, #64	@ 0x40
 800ff6c:	616b      	str	r3, [r5, #20]
 800ff6e:	2300      	movs	r3, #0
 800ff70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff72:	2320      	movs	r3, #32
 800ff74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff7c:	2330      	movs	r3, #48	@ 0x30
 800ff7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801011c <_svfiprintf_r+0x1e4>
 800ff82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff86:	f04f 0901 	mov.w	r9, #1
 800ff8a:	4623      	mov	r3, r4
 800ff8c:	469a      	mov	sl, r3
 800ff8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff92:	b10a      	cbz	r2, 800ff98 <_svfiprintf_r+0x60>
 800ff94:	2a25      	cmp	r2, #37	@ 0x25
 800ff96:	d1f9      	bne.n	800ff8c <_svfiprintf_r+0x54>
 800ff98:	ebba 0b04 	subs.w	fp, sl, r4
 800ff9c:	d00b      	beq.n	800ffb6 <_svfiprintf_r+0x7e>
 800ff9e:	465b      	mov	r3, fp
 800ffa0:	4622      	mov	r2, r4
 800ffa2:	4629      	mov	r1, r5
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	f7ff ff6b 	bl	800fe80 <__ssputs_r>
 800ffaa:	3001      	adds	r0, #1
 800ffac:	f000 80a7 	beq.w	80100fe <_svfiprintf_r+0x1c6>
 800ffb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffb2:	445a      	add	r2, fp
 800ffb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffb6:	f89a 3000 	ldrb.w	r3, [sl]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f000 809f 	beq.w	80100fe <_svfiprintf_r+0x1c6>
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffca:	f10a 0a01 	add.w	sl, sl, #1
 800ffce:	9304      	str	r3, [sp, #16]
 800ffd0:	9307      	str	r3, [sp, #28]
 800ffd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffd6:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffd8:	4654      	mov	r4, sl
 800ffda:	2205      	movs	r2, #5
 800ffdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffe0:	484e      	ldr	r0, [pc, #312]	@ (801011c <_svfiprintf_r+0x1e4>)
 800ffe2:	f7f0 f935 	bl	8000250 <memchr>
 800ffe6:	9a04      	ldr	r2, [sp, #16]
 800ffe8:	b9d8      	cbnz	r0, 8010022 <_svfiprintf_r+0xea>
 800ffea:	06d0      	lsls	r0, r2, #27
 800ffec:	bf44      	itt	mi
 800ffee:	2320      	movmi	r3, #32
 800fff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fff4:	0711      	lsls	r1, r2, #28
 800fff6:	bf44      	itt	mi
 800fff8:	232b      	movmi	r3, #43	@ 0x2b
 800fffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fffe:	f89a 3000 	ldrb.w	r3, [sl]
 8010002:	2b2a      	cmp	r3, #42	@ 0x2a
 8010004:	d015      	beq.n	8010032 <_svfiprintf_r+0xfa>
 8010006:	9a07      	ldr	r2, [sp, #28]
 8010008:	4654      	mov	r4, sl
 801000a:	2000      	movs	r0, #0
 801000c:	f04f 0c0a 	mov.w	ip, #10
 8010010:	4621      	mov	r1, r4
 8010012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010016:	3b30      	subs	r3, #48	@ 0x30
 8010018:	2b09      	cmp	r3, #9
 801001a:	d94b      	bls.n	80100b4 <_svfiprintf_r+0x17c>
 801001c:	b1b0      	cbz	r0, 801004c <_svfiprintf_r+0x114>
 801001e:	9207      	str	r2, [sp, #28]
 8010020:	e014      	b.n	801004c <_svfiprintf_r+0x114>
 8010022:	eba0 0308 	sub.w	r3, r0, r8
 8010026:	fa09 f303 	lsl.w	r3, r9, r3
 801002a:	4313      	orrs	r3, r2
 801002c:	9304      	str	r3, [sp, #16]
 801002e:	46a2      	mov	sl, r4
 8010030:	e7d2      	b.n	800ffd8 <_svfiprintf_r+0xa0>
 8010032:	9b03      	ldr	r3, [sp, #12]
 8010034:	1d19      	adds	r1, r3, #4
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	9103      	str	r1, [sp, #12]
 801003a:	2b00      	cmp	r3, #0
 801003c:	bfbb      	ittet	lt
 801003e:	425b      	neglt	r3, r3
 8010040:	f042 0202 	orrlt.w	r2, r2, #2
 8010044:	9307      	strge	r3, [sp, #28]
 8010046:	9307      	strlt	r3, [sp, #28]
 8010048:	bfb8      	it	lt
 801004a:	9204      	strlt	r2, [sp, #16]
 801004c:	7823      	ldrb	r3, [r4, #0]
 801004e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010050:	d10a      	bne.n	8010068 <_svfiprintf_r+0x130>
 8010052:	7863      	ldrb	r3, [r4, #1]
 8010054:	2b2a      	cmp	r3, #42	@ 0x2a
 8010056:	d132      	bne.n	80100be <_svfiprintf_r+0x186>
 8010058:	9b03      	ldr	r3, [sp, #12]
 801005a:	1d1a      	adds	r2, r3, #4
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	9203      	str	r2, [sp, #12]
 8010060:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010064:	3402      	adds	r4, #2
 8010066:	9305      	str	r3, [sp, #20]
 8010068:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801012c <_svfiprintf_r+0x1f4>
 801006c:	7821      	ldrb	r1, [r4, #0]
 801006e:	2203      	movs	r2, #3
 8010070:	4650      	mov	r0, sl
 8010072:	f7f0 f8ed 	bl	8000250 <memchr>
 8010076:	b138      	cbz	r0, 8010088 <_svfiprintf_r+0x150>
 8010078:	9b04      	ldr	r3, [sp, #16]
 801007a:	eba0 000a 	sub.w	r0, r0, sl
 801007e:	2240      	movs	r2, #64	@ 0x40
 8010080:	4082      	lsls	r2, r0
 8010082:	4313      	orrs	r3, r2
 8010084:	3401      	adds	r4, #1
 8010086:	9304      	str	r3, [sp, #16]
 8010088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801008c:	4824      	ldr	r0, [pc, #144]	@ (8010120 <_svfiprintf_r+0x1e8>)
 801008e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010092:	2206      	movs	r2, #6
 8010094:	f7f0 f8dc 	bl	8000250 <memchr>
 8010098:	2800      	cmp	r0, #0
 801009a:	d036      	beq.n	801010a <_svfiprintf_r+0x1d2>
 801009c:	4b21      	ldr	r3, [pc, #132]	@ (8010124 <_svfiprintf_r+0x1ec>)
 801009e:	bb1b      	cbnz	r3, 80100e8 <_svfiprintf_r+0x1b0>
 80100a0:	9b03      	ldr	r3, [sp, #12]
 80100a2:	3307      	adds	r3, #7
 80100a4:	f023 0307 	bic.w	r3, r3, #7
 80100a8:	3308      	adds	r3, #8
 80100aa:	9303      	str	r3, [sp, #12]
 80100ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ae:	4433      	add	r3, r6
 80100b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80100b2:	e76a      	b.n	800ff8a <_svfiprintf_r+0x52>
 80100b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80100b8:	460c      	mov	r4, r1
 80100ba:	2001      	movs	r0, #1
 80100bc:	e7a8      	b.n	8010010 <_svfiprintf_r+0xd8>
 80100be:	2300      	movs	r3, #0
 80100c0:	3401      	adds	r4, #1
 80100c2:	9305      	str	r3, [sp, #20]
 80100c4:	4619      	mov	r1, r3
 80100c6:	f04f 0c0a 	mov.w	ip, #10
 80100ca:	4620      	mov	r0, r4
 80100cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100d0:	3a30      	subs	r2, #48	@ 0x30
 80100d2:	2a09      	cmp	r2, #9
 80100d4:	d903      	bls.n	80100de <_svfiprintf_r+0x1a6>
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d0c6      	beq.n	8010068 <_svfiprintf_r+0x130>
 80100da:	9105      	str	r1, [sp, #20]
 80100dc:	e7c4      	b.n	8010068 <_svfiprintf_r+0x130>
 80100de:	fb0c 2101 	mla	r1, ip, r1, r2
 80100e2:	4604      	mov	r4, r0
 80100e4:	2301      	movs	r3, #1
 80100e6:	e7f0      	b.n	80100ca <_svfiprintf_r+0x192>
 80100e8:	ab03      	add	r3, sp, #12
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	462a      	mov	r2, r5
 80100ee:	4b0e      	ldr	r3, [pc, #56]	@ (8010128 <_svfiprintf_r+0x1f0>)
 80100f0:	a904      	add	r1, sp, #16
 80100f2:	4638      	mov	r0, r7
 80100f4:	f3af 8000 	nop.w
 80100f8:	1c42      	adds	r2, r0, #1
 80100fa:	4606      	mov	r6, r0
 80100fc:	d1d6      	bne.n	80100ac <_svfiprintf_r+0x174>
 80100fe:	89ab      	ldrh	r3, [r5, #12]
 8010100:	065b      	lsls	r3, r3, #25
 8010102:	f53f af2d 	bmi.w	800ff60 <_svfiprintf_r+0x28>
 8010106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010108:	e72c      	b.n	800ff64 <_svfiprintf_r+0x2c>
 801010a:	ab03      	add	r3, sp, #12
 801010c:	9300      	str	r3, [sp, #0]
 801010e:	462a      	mov	r2, r5
 8010110:	4b05      	ldr	r3, [pc, #20]	@ (8010128 <_svfiprintf_r+0x1f0>)
 8010112:	a904      	add	r1, sp, #16
 8010114:	4638      	mov	r0, r7
 8010116:	f000 f9bb 	bl	8010490 <_printf_i>
 801011a:	e7ed      	b.n	80100f8 <_svfiprintf_r+0x1c0>
 801011c:	0801149c 	.word	0x0801149c
 8010120:	080114a6 	.word	0x080114a6
 8010124:	00000000 	.word	0x00000000
 8010128:	0800fe81 	.word	0x0800fe81
 801012c:	080114a2 	.word	0x080114a2

08010130 <__sfputc_r>:
 8010130:	6893      	ldr	r3, [r2, #8]
 8010132:	3b01      	subs	r3, #1
 8010134:	2b00      	cmp	r3, #0
 8010136:	b410      	push	{r4}
 8010138:	6093      	str	r3, [r2, #8]
 801013a:	da08      	bge.n	801014e <__sfputc_r+0x1e>
 801013c:	6994      	ldr	r4, [r2, #24]
 801013e:	42a3      	cmp	r3, r4
 8010140:	db01      	blt.n	8010146 <__sfputc_r+0x16>
 8010142:	290a      	cmp	r1, #10
 8010144:	d103      	bne.n	801014e <__sfputc_r+0x1e>
 8010146:	f85d 4b04 	ldr.w	r4, [sp], #4
 801014a:	f000 bb7f 	b.w	801084c <__swbuf_r>
 801014e:	6813      	ldr	r3, [r2, #0]
 8010150:	1c58      	adds	r0, r3, #1
 8010152:	6010      	str	r0, [r2, #0]
 8010154:	7019      	strb	r1, [r3, #0]
 8010156:	4608      	mov	r0, r1
 8010158:	f85d 4b04 	ldr.w	r4, [sp], #4
 801015c:	4770      	bx	lr

0801015e <__sfputs_r>:
 801015e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010160:	4606      	mov	r6, r0
 8010162:	460f      	mov	r7, r1
 8010164:	4614      	mov	r4, r2
 8010166:	18d5      	adds	r5, r2, r3
 8010168:	42ac      	cmp	r4, r5
 801016a:	d101      	bne.n	8010170 <__sfputs_r+0x12>
 801016c:	2000      	movs	r0, #0
 801016e:	e007      	b.n	8010180 <__sfputs_r+0x22>
 8010170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010174:	463a      	mov	r2, r7
 8010176:	4630      	mov	r0, r6
 8010178:	f7ff ffda 	bl	8010130 <__sfputc_r>
 801017c:	1c43      	adds	r3, r0, #1
 801017e:	d1f3      	bne.n	8010168 <__sfputs_r+0xa>
 8010180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010184 <_vfiprintf_r>:
 8010184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010188:	460d      	mov	r5, r1
 801018a:	b09d      	sub	sp, #116	@ 0x74
 801018c:	4614      	mov	r4, r2
 801018e:	4698      	mov	r8, r3
 8010190:	4606      	mov	r6, r0
 8010192:	b118      	cbz	r0, 801019c <_vfiprintf_r+0x18>
 8010194:	6a03      	ldr	r3, [r0, #32]
 8010196:	b90b      	cbnz	r3, 801019c <_vfiprintf_r+0x18>
 8010198:	f7ff fc52 	bl	800fa40 <__sinit>
 801019c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801019e:	07d9      	lsls	r1, r3, #31
 80101a0:	d405      	bmi.n	80101ae <_vfiprintf_r+0x2a>
 80101a2:	89ab      	ldrh	r3, [r5, #12]
 80101a4:	059a      	lsls	r2, r3, #22
 80101a6:	d402      	bmi.n	80101ae <_vfiprintf_r+0x2a>
 80101a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101aa:	f7ff fddc 	bl	800fd66 <__retarget_lock_acquire_recursive>
 80101ae:	89ab      	ldrh	r3, [r5, #12]
 80101b0:	071b      	lsls	r3, r3, #28
 80101b2:	d501      	bpl.n	80101b8 <_vfiprintf_r+0x34>
 80101b4:	692b      	ldr	r3, [r5, #16]
 80101b6:	b99b      	cbnz	r3, 80101e0 <_vfiprintf_r+0x5c>
 80101b8:	4629      	mov	r1, r5
 80101ba:	4630      	mov	r0, r6
 80101bc:	f000 fb84 	bl	80108c8 <__swsetup_r>
 80101c0:	b170      	cbz	r0, 80101e0 <_vfiprintf_r+0x5c>
 80101c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101c4:	07dc      	lsls	r4, r3, #31
 80101c6:	d504      	bpl.n	80101d2 <_vfiprintf_r+0x4e>
 80101c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101cc:	b01d      	add	sp, #116	@ 0x74
 80101ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d2:	89ab      	ldrh	r3, [r5, #12]
 80101d4:	0598      	lsls	r0, r3, #22
 80101d6:	d4f7      	bmi.n	80101c8 <_vfiprintf_r+0x44>
 80101d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101da:	f7ff fdc5 	bl	800fd68 <__retarget_lock_release_recursive>
 80101de:	e7f3      	b.n	80101c8 <_vfiprintf_r+0x44>
 80101e0:	2300      	movs	r3, #0
 80101e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80101e4:	2320      	movs	r3, #32
 80101e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80101ee:	2330      	movs	r3, #48	@ 0x30
 80101f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103a0 <_vfiprintf_r+0x21c>
 80101f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101f8:	f04f 0901 	mov.w	r9, #1
 80101fc:	4623      	mov	r3, r4
 80101fe:	469a      	mov	sl, r3
 8010200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010204:	b10a      	cbz	r2, 801020a <_vfiprintf_r+0x86>
 8010206:	2a25      	cmp	r2, #37	@ 0x25
 8010208:	d1f9      	bne.n	80101fe <_vfiprintf_r+0x7a>
 801020a:	ebba 0b04 	subs.w	fp, sl, r4
 801020e:	d00b      	beq.n	8010228 <_vfiprintf_r+0xa4>
 8010210:	465b      	mov	r3, fp
 8010212:	4622      	mov	r2, r4
 8010214:	4629      	mov	r1, r5
 8010216:	4630      	mov	r0, r6
 8010218:	f7ff ffa1 	bl	801015e <__sfputs_r>
 801021c:	3001      	adds	r0, #1
 801021e:	f000 80a7 	beq.w	8010370 <_vfiprintf_r+0x1ec>
 8010222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010224:	445a      	add	r2, fp
 8010226:	9209      	str	r2, [sp, #36]	@ 0x24
 8010228:	f89a 3000 	ldrb.w	r3, [sl]
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 809f 	beq.w	8010370 <_vfiprintf_r+0x1ec>
 8010232:	2300      	movs	r3, #0
 8010234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801023c:	f10a 0a01 	add.w	sl, sl, #1
 8010240:	9304      	str	r3, [sp, #16]
 8010242:	9307      	str	r3, [sp, #28]
 8010244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010248:	931a      	str	r3, [sp, #104]	@ 0x68
 801024a:	4654      	mov	r4, sl
 801024c:	2205      	movs	r2, #5
 801024e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010252:	4853      	ldr	r0, [pc, #332]	@ (80103a0 <_vfiprintf_r+0x21c>)
 8010254:	f7ef fffc 	bl	8000250 <memchr>
 8010258:	9a04      	ldr	r2, [sp, #16]
 801025a:	b9d8      	cbnz	r0, 8010294 <_vfiprintf_r+0x110>
 801025c:	06d1      	lsls	r1, r2, #27
 801025e:	bf44      	itt	mi
 8010260:	2320      	movmi	r3, #32
 8010262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010266:	0713      	lsls	r3, r2, #28
 8010268:	bf44      	itt	mi
 801026a:	232b      	movmi	r3, #43	@ 0x2b
 801026c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010270:	f89a 3000 	ldrb.w	r3, [sl]
 8010274:	2b2a      	cmp	r3, #42	@ 0x2a
 8010276:	d015      	beq.n	80102a4 <_vfiprintf_r+0x120>
 8010278:	9a07      	ldr	r2, [sp, #28]
 801027a:	4654      	mov	r4, sl
 801027c:	2000      	movs	r0, #0
 801027e:	f04f 0c0a 	mov.w	ip, #10
 8010282:	4621      	mov	r1, r4
 8010284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010288:	3b30      	subs	r3, #48	@ 0x30
 801028a:	2b09      	cmp	r3, #9
 801028c:	d94b      	bls.n	8010326 <_vfiprintf_r+0x1a2>
 801028e:	b1b0      	cbz	r0, 80102be <_vfiprintf_r+0x13a>
 8010290:	9207      	str	r2, [sp, #28]
 8010292:	e014      	b.n	80102be <_vfiprintf_r+0x13a>
 8010294:	eba0 0308 	sub.w	r3, r0, r8
 8010298:	fa09 f303 	lsl.w	r3, r9, r3
 801029c:	4313      	orrs	r3, r2
 801029e:	9304      	str	r3, [sp, #16]
 80102a0:	46a2      	mov	sl, r4
 80102a2:	e7d2      	b.n	801024a <_vfiprintf_r+0xc6>
 80102a4:	9b03      	ldr	r3, [sp, #12]
 80102a6:	1d19      	adds	r1, r3, #4
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	9103      	str	r1, [sp, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	bfbb      	ittet	lt
 80102b0:	425b      	neglt	r3, r3
 80102b2:	f042 0202 	orrlt.w	r2, r2, #2
 80102b6:	9307      	strge	r3, [sp, #28]
 80102b8:	9307      	strlt	r3, [sp, #28]
 80102ba:	bfb8      	it	lt
 80102bc:	9204      	strlt	r2, [sp, #16]
 80102be:	7823      	ldrb	r3, [r4, #0]
 80102c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80102c2:	d10a      	bne.n	80102da <_vfiprintf_r+0x156>
 80102c4:	7863      	ldrb	r3, [r4, #1]
 80102c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80102c8:	d132      	bne.n	8010330 <_vfiprintf_r+0x1ac>
 80102ca:	9b03      	ldr	r3, [sp, #12]
 80102cc:	1d1a      	adds	r2, r3, #4
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	9203      	str	r2, [sp, #12]
 80102d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102d6:	3402      	adds	r4, #2
 80102d8:	9305      	str	r3, [sp, #20]
 80102da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80103b0 <_vfiprintf_r+0x22c>
 80102de:	7821      	ldrb	r1, [r4, #0]
 80102e0:	2203      	movs	r2, #3
 80102e2:	4650      	mov	r0, sl
 80102e4:	f7ef ffb4 	bl	8000250 <memchr>
 80102e8:	b138      	cbz	r0, 80102fa <_vfiprintf_r+0x176>
 80102ea:	9b04      	ldr	r3, [sp, #16]
 80102ec:	eba0 000a 	sub.w	r0, r0, sl
 80102f0:	2240      	movs	r2, #64	@ 0x40
 80102f2:	4082      	lsls	r2, r0
 80102f4:	4313      	orrs	r3, r2
 80102f6:	3401      	adds	r4, #1
 80102f8:	9304      	str	r3, [sp, #16]
 80102fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102fe:	4829      	ldr	r0, [pc, #164]	@ (80103a4 <_vfiprintf_r+0x220>)
 8010300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010304:	2206      	movs	r2, #6
 8010306:	f7ef ffa3 	bl	8000250 <memchr>
 801030a:	2800      	cmp	r0, #0
 801030c:	d03f      	beq.n	801038e <_vfiprintf_r+0x20a>
 801030e:	4b26      	ldr	r3, [pc, #152]	@ (80103a8 <_vfiprintf_r+0x224>)
 8010310:	bb1b      	cbnz	r3, 801035a <_vfiprintf_r+0x1d6>
 8010312:	9b03      	ldr	r3, [sp, #12]
 8010314:	3307      	adds	r3, #7
 8010316:	f023 0307 	bic.w	r3, r3, #7
 801031a:	3308      	adds	r3, #8
 801031c:	9303      	str	r3, [sp, #12]
 801031e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010320:	443b      	add	r3, r7
 8010322:	9309      	str	r3, [sp, #36]	@ 0x24
 8010324:	e76a      	b.n	80101fc <_vfiprintf_r+0x78>
 8010326:	fb0c 3202 	mla	r2, ip, r2, r3
 801032a:	460c      	mov	r4, r1
 801032c:	2001      	movs	r0, #1
 801032e:	e7a8      	b.n	8010282 <_vfiprintf_r+0xfe>
 8010330:	2300      	movs	r3, #0
 8010332:	3401      	adds	r4, #1
 8010334:	9305      	str	r3, [sp, #20]
 8010336:	4619      	mov	r1, r3
 8010338:	f04f 0c0a 	mov.w	ip, #10
 801033c:	4620      	mov	r0, r4
 801033e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010342:	3a30      	subs	r2, #48	@ 0x30
 8010344:	2a09      	cmp	r2, #9
 8010346:	d903      	bls.n	8010350 <_vfiprintf_r+0x1cc>
 8010348:	2b00      	cmp	r3, #0
 801034a:	d0c6      	beq.n	80102da <_vfiprintf_r+0x156>
 801034c:	9105      	str	r1, [sp, #20]
 801034e:	e7c4      	b.n	80102da <_vfiprintf_r+0x156>
 8010350:	fb0c 2101 	mla	r1, ip, r1, r2
 8010354:	4604      	mov	r4, r0
 8010356:	2301      	movs	r3, #1
 8010358:	e7f0      	b.n	801033c <_vfiprintf_r+0x1b8>
 801035a:	ab03      	add	r3, sp, #12
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	462a      	mov	r2, r5
 8010360:	4b12      	ldr	r3, [pc, #72]	@ (80103ac <_vfiprintf_r+0x228>)
 8010362:	a904      	add	r1, sp, #16
 8010364:	4630      	mov	r0, r6
 8010366:	f3af 8000 	nop.w
 801036a:	4607      	mov	r7, r0
 801036c:	1c78      	adds	r0, r7, #1
 801036e:	d1d6      	bne.n	801031e <_vfiprintf_r+0x19a>
 8010370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010372:	07d9      	lsls	r1, r3, #31
 8010374:	d405      	bmi.n	8010382 <_vfiprintf_r+0x1fe>
 8010376:	89ab      	ldrh	r3, [r5, #12]
 8010378:	059a      	lsls	r2, r3, #22
 801037a:	d402      	bmi.n	8010382 <_vfiprintf_r+0x1fe>
 801037c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801037e:	f7ff fcf3 	bl	800fd68 <__retarget_lock_release_recursive>
 8010382:	89ab      	ldrh	r3, [r5, #12]
 8010384:	065b      	lsls	r3, r3, #25
 8010386:	f53f af1f 	bmi.w	80101c8 <_vfiprintf_r+0x44>
 801038a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801038c:	e71e      	b.n	80101cc <_vfiprintf_r+0x48>
 801038e:	ab03      	add	r3, sp, #12
 8010390:	9300      	str	r3, [sp, #0]
 8010392:	462a      	mov	r2, r5
 8010394:	4b05      	ldr	r3, [pc, #20]	@ (80103ac <_vfiprintf_r+0x228>)
 8010396:	a904      	add	r1, sp, #16
 8010398:	4630      	mov	r0, r6
 801039a:	f000 f879 	bl	8010490 <_printf_i>
 801039e:	e7e4      	b.n	801036a <_vfiprintf_r+0x1e6>
 80103a0:	0801149c 	.word	0x0801149c
 80103a4:	080114a6 	.word	0x080114a6
 80103a8:	00000000 	.word	0x00000000
 80103ac:	0801015f 	.word	0x0801015f
 80103b0:	080114a2 	.word	0x080114a2

080103b4 <_printf_common>:
 80103b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103b8:	4616      	mov	r6, r2
 80103ba:	4698      	mov	r8, r3
 80103bc:	688a      	ldr	r2, [r1, #8]
 80103be:	690b      	ldr	r3, [r1, #16]
 80103c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80103c4:	4293      	cmp	r3, r2
 80103c6:	bfb8      	it	lt
 80103c8:	4613      	movlt	r3, r2
 80103ca:	6033      	str	r3, [r6, #0]
 80103cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80103d0:	4607      	mov	r7, r0
 80103d2:	460c      	mov	r4, r1
 80103d4:	b10a      	cbz	r2, 80103da <_printf_common+0x26>
 80103d6:	3301      	adds	r3, #1
 80103d8:	6033      	str	r3, [r6, #0]
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	0699      	lsls	r1, r3, #26
 80103de:	bf42      	ittt	mi
 80103e0:	6833      	ldrmi	r3, [r6, #0]
 80103e2:	3302      	addmi	r3, #2
 80103e4:	6033      	strmi	r3, [r6, #0]
 80103e6:	6825      	ldr	r5, [r4, #0]
 80103e8:	f015 0506 	ands.w	r5, r5, #6
 80103ec:	d106      	bne.n	80103fc <_printf_common+0x48>
 80103ee:	f104 0a19 	add.w	sl, r4, #25
 80103f2:	68e3      	ldr	r3, [r4, #12]
 80103f4:	6832      	ldr	r2, [r6, #0]
 80103f6:	1a9b      	subs	r3, r3, r2
 80103f8:	42ab      	cmp	r3, r5
 80103fa:	dc26      	bgt.n	801044a <_printf_common+0x96>
 80103fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010400:	6822      	ldr	r2, [r4, #0]
 8010402:	3b00      	subs	r3, #0
 8010404:	bf18      	it	ne
 8010406:	2301      	movne	r3, #1
 8010408:	0692      	lsls	r2, r2, #26
 801040a:	d42b      	bmi.n	8010464 <_printf_common+0xb0>
 801040c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010410:	4641      	mov	r1, r8
 8010412:	4638      	mov	r0, r7
 8010414:	47c8      	blx	r9
 8010416:	3001      	adds	r0, #1
 8010418:	d01e      	beq.n	8010458 <_printf_common+0xa4>
 801041a:	6823      	ldr	r3, [r4, #0]
 801041c:	6922      	ldr	r2, [r4, #16]
 801041e:	f003 0306 	and.w	r3, r3, #6
 8010422:	2b04      	cmp	r3, #4
 8010424:	bf02      	ittt	eq
 8010426:	68e5      	ldreq	r5, [r4, #12]
 8010428:	6833      	ldreq	r3, [r6, #0]
 801042a:	1aed      	subeq	r5, r5, r3
 801042c:	68a3      	ldr	r3, [r4, #8]
 801042e:	bf0c      	ite	eq
 8010430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010434:	2500      	movne	r5, #0
 8010436:	4293      	cmp	r3, r2
 8010438:	bfc4      	itt	gt
 801043a:	1a9b      	subgt	r3, r3, r2
 801043c:	18ed      	addgt	r5, r5, r3
 801043e:	2600      	movs	r6, #0
 8010440:	341a      	adds	r4, #26
 8010442:	42b5      	cmp	r5, r6
 8010444:	d11a      	bne.n	801047c <_printf_common+0xc8>
 8010446:	2000      	movs	r0, #0
 8010448:	e008      	b.n	801045c <_printf_common+0xa8>
 801044a:	2301      	movs	r3, #1
 801044c:	4652      	mov	r2, sl
 801044e:	4641      	mov	r1, r8
 8010450:	4638      	mov	r0, r7
 8010452:	47c8      	blx	r9
 8010454:	3001      	adds	r0, #1
 8010456:	d103      	bne.n	8010460 <_printf_common+0xac>
 8010458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010460:	3501      	adds	r5, #1
 8010462:	e7c6      	b.n	80103f2 <_printf_common+0x3e>
 8010464:	18e1      	adds	r1, r4, r3
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	2030      	movs	r0, #48	@ 0x30
 801046a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801046e:	4422      	add	r2, r4
 8010470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010478:	3302      	adds	r3, #2
 801047a:	e7c7      	b.n	801040c <_printf_common+0x58>
 801047c:	2301      	movs	r3, #1
 801047e:	4622      	mov	r2, r4
 8010480:	4641      	mov	r1, r8
 8010482:	4638      	mov	r0, r7
 8010484:	47c8      	blx	r9
 8010486:	3001      	adds	r0, #1
 8010488:	d0e6      	beq.n	8010458 <_printf_common+0xa4>
 801048a:	3601      	adds	r6, #1
 801048c:	e7d9      	b.n	8010442 <_printf_common+0x8e>
	...

08010490 <_printf_i>:
 8010490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010494:	7e0f      	ldrb	r7, [r1, #24]
 8010496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010498:	2f78      	cmp	r7, #120	@ 0x78
 801049a:	4691      	mov	r9, r2
 801049c:	4680      	mov	r8, r0
 801049e:	460c      	mov	r4, r1
 80104a0:	469a      	mov	sl, r3
 80104a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104a6:	d807      	bhi.n	80104b8 <_printf_i+0x28>
 80104a8:	2f62      	cmp	r7, #98	@ 0x62
 80104aa:	d80a      	bhi.n	80104c2 <_printf_i+0x32>
 80104ac:	2f00      	cmp	r7, #0
 80104ae:	f000 80d2 	beq.w	8010656 <_printf_i+0x1c6>
 80104b2:	2f58      	cmp	r7, #88	@ 0x58
 80104b4:	f000 80b9 	beq.w	801062a <_printf_i+0x19a>
 80104b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80104bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80104c0:	e03a      	b.n	8010538 <_printf_i+0xa8>
 80104c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80104c6:	2b15      	cmp	r3, #21
 80104c8:	d8f6      	bhi.n	80104b8 <_printf_i+0x28>
 80104ca:	a101      	add	r1, pc, #4	@ (adr r1, 80104d0 <_printf_i+0x40>)
 80104cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80104d0:	08010529 	.word	0x08010529
 80104d4:	0801053d 	.word	0x0801053d
 80104d8:	080104b9 	.word	0x080104b9
 80104dc:	080104b9 	.word	0x080104b9
 80104e0:	080104b9 	.word	0x080104b9
 80104e4:	080104b9 	.word	0x080104b9
 80104e8:	0801053d 	.word	0x0801053d
 80104ec:	080104b9 	.word	0x080104b9
 80104f0:	080104b9 	.word	0x080104b9
 80104f4:	080104b9 	.word	0x080104b9
 80104f8:	080104b9 	.word	0x080104b9
 80104fc:	0801063d 	.word	0x0801063d
 8010500:	08010567 	.word	0x08010567
 8010504:	080105f7 	.word	0x080105f7
 8010508:	080104b9 	.word	0x080104b9
 801050c:	080104b9 	.word	0x080104b9
 8010510:	0801065f 	.word	0x0801065f
 8010514:	080104b9 	.word	0x080104b9
 8010518:	08010567 	.word	0x08010567
 801051c:	080104b9 	.word	0x080104b9
 8010520:	080104b9 	.word	0x080104b9
 8010524:	080105ff 	.word	0x080105ff
 8010528:	6833      	ldr	r3, [r6, #0]
 801052a:	1d1a      	adds	r2, r3, #4
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	6032      	str	r2, [r6, #0]
 8010530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010538:	2301      	movs	r3, #1
 801053a:	e09d      	b.n	8010678 <_printf_i+0x1e8>
 801053c:	6833      	ldr	r3, [r6, #0]
 801053e:	6820      	ldr	r0, [r4, #0]
 8010540:	1d19      	adds	r1, r3, #4
 8010542:	6031      	str	r1, [r6, #0]
 8010544:	0606      	lsls	r6, r0, #24
 8010546:	d501      	bpl.n	801054c <_printf_i+0xbc>
 8010548:	681d      	ldr	r5, [r3, #0]
 801054a:	e003      	b.n	8010554 <_printf_i+0xc4>
 801054c:	0645      	lsls	r5, r0, #25
 801054e:	d5fb      	bpl.n	8010548 <_printf_i+0xb8>
 8010550:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010554:	2d00      	cmp	r5, #0
 8010556:	da03      	bge.n	8010560 <_printf_i+0xd0>
 8010558:	232d      	movs	r3, #45	@ 0x2d
 801055a:	426d      	negs	r5, r5
 801055c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010560:	4859      	ldr	r0, [pc, #356]	@ (80106c8 <_printf_i+0x238>)
 8010562:	230a      	movs	r3, #10
 8010564:	e011      	b.n	801058a <_printf_i+0xfa>
 8010566:	6821      	ldr	r1, [r4, #0]
 8010568:	6833      	ldr	r3, [r6, #0]
 801056a:	0608      	lsls	r0, r1, #24
 801056c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010570:	d402      	bmi.n	8010578 <_printf_i+0xe8>
 8010572:	0649      	lsls	r1, r1, #25
 8010574:	bf48      	it	mi
 8010576:	b2ad      	uxthmi	r5, r5
 8010578:	2f6f      	cmp	r7, #111	@ 0x6f
 801057a:	4853      	ldr	r0, [pc, #332]	@ (80106c8 <_printf_i+0x238>)
 801057c:	6033      	str	r3, [r6, #0]
 801057e:	bf14      	ite	ne
 8010580:	230a      	movne	r3, #10
 8010582:	2308      	moveq	r3, #8
 8010584:	2100      	movs	r1, #0
 8010586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801058a:	6866      	ldr	r6, [r4, #4]
 801058c:	60a6      	str	r6, [r4, #8]
 801058e:	2e00      	cmp	r6, #0
 8010590:	bfa2      	ittt	ge
 8010592:	6821      	ldrge	r1, [r4, #0]
 8010594:	f021 0104 	bicge.w	r1, r1, #4
 8010598:	6021      	strge	r1, [r4, #0]
 801059a:	b90d      	cbnz	r5, 80105a0 <_printf_i+0x110>
 801059c:	2e00      	cmp	r6, #0
 801059e:	d04b      	beq.n	8010638 <_printf_i+0x1a8>
 80105a0:	4616      	mov	r6, r2
 80105a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80105a6:	fb03 5711 	mls	r7, r3, r1, r5
 80105aa:	5dc7      	ldrb	r7, [r0, r7]
 80105ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105b0:	462f      	mov	r7, r5
 80105b2:	42bb      	cmp	r3, r7
 80105b4:	460d      	mov	r5, r1
 80105b6:	d9f4      	bls.n	80105a2 <_printf_i+0x112>
 80105b8:	2b08      	cmp	r3, #8
 80105ba:	d10b      	bne.n	80105d4 <_printf_i+0x144>
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	07df      	lsls	r7, r3, #31
 80105c0:	d508      	bpl.n	80105d4 <_printf_i+0x144>
 80105c2:	6923      	ldr	r3, [r4, #16]
 80105c4:	6861      	ldr	r1, [r4, #4]
 80105c6:	4299      	cmp	r1, r3
 80105c8:	bfde      	ittt	le
 80105ca:	2330      	movle	r3, #48	@ 0x30
 80105cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80105d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80105d4:	1b92      	subs	r2, r2, r6
 80105d6:	6122      	str	r2, [r4, #16]
 80105d8:	f8cd a000 	str.w	sl, [sp]
 80105dc:	464b      	mov	r3, r9
 80105de:	aa03      	add	r2, sp, #12
 80105e0:	4621      	mov	r1, r4
 80105e2:	4640      	mov	r0, r8
 80105e4:	f7ff fee6 	bl	80103b4 <_printf_common>
 80105e8:	3001      	adds	r0, #1
 80105ea:	d14a      	bne.n	8010682 <_printf_i+0x1f2>
 80105ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105f0:	b004      	add	sp, #16
 80105f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f6:	6823      	ldr	r3, [r4, #0]
 80105f8:	f043 0320 	orr.w	r3, r3, #32
 80105fc:	6023      	str	r3, [r4, #0]
 80105fe:	4833      	ldr	r0, [pc, #204]	@ (80106cc <_printf_i+0x23c>)
 8010600:	2778      	movs	r7, #120	@ 0x78
 8010602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010606:	6823      	ldr	r3, [r4, #0]
 8010608:	6831      	ldr	r1, [r6, #0]
 801060a:	061f      	lsls	r7, r3, #24
 801060c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010610:	d402      	bmi.n	8010618 <_printf_i+0x188>
 8010612:	065f      	lsls	r7, r3, #25
 8010614:	bf48      	it	mi
 8010616:	b2ad      	uxthmi	r5, r5
 8010618:	6031      	str	r1, [r6, #0]
 801061a:	07d9      	lsls	r1, r3, #31
 801061c:	bf44      	itt	mi
 801061e:	f043 0320 	orrmi.w	r3, r3, #32
 8010622:	6023      	strmi	r3, [r4, #0]
 8010624:	b11d      	cbz	r5, 801062e <_printf_i+0x19e>
 8010626:	2310      	movs	r3, #16
 8010628:	e7ac      	b.n	8010584 <_printf_i+0xf4>
 801062a:	4827      	ldr	r0, [pc, #156]	@ (80106c8 <_printf_i+0x238>)
 801062c:	e7e9      	b.n	8010602 <_printf_i+0x172>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	f023 0320 	bic.w	r3, r3, #32
 8010634:	6023      	str	r3, [r4, #0]
 8010636:	e7f6      	b.n	8010626 <_printf_i+0x196>
 8010638:	4616      	mov	r6, r2
 801063a:	e7bd      	b.n	80105b8 <_printf_i+0x128>
 801063c:	6833      	ldr	r3, [r6, #0]
 801063e:	6825      	ldr	r5, [r4, #0]
 8010640:	6961      	ldr	r1, [r4, #20]
 8010642:	1d18      	adds	r0, r3, #4
 8010644:	6030      	str	r0, [r6, #0]
 8010646:	062e      	lsls	r6, r5, #24
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	d501      	bpl.n	8010650 <_printf_i+0x1c0>
 801064c:	6019      	str	r1, [r3, #0]
 801064e:	e002      	b.n	8010656 <_printf_i+0x1c6>
 8010650:	0668      	lsls	r0, r5, #25
 8010652:	d5fb      	bpl.n	801064c <_printf_i+0x1bc>
 8010654:	8019      	strh	r1, [r3, #0]
 8010656:	2300      	movs	r3, #0
 8010658:	6123      	str	r3, [r4, #16]
 801065a:	4616      	mov	r6, r2
 801065c:	e7bc      	b.n	80105d8 <_printf_i+0x148>
 801065e:	6833      	ldr	r3, [r6, #0]
 8010660:	1d1a      	adds	r2, r3, #4
 8010662:	6032      	str	r2, [r6, #0]
 8010664:	681e      	ldr	r6, [r3, #0]
 8010666:	6862      	ldr	r2, [r4, #4]
 8010668:	2100      	movs	r1, #0
 801066a:	4630      	mov	r0, r6
 801066c:	f7ef fdf0 	bl	8000250 <memchr>
 8010670:	b108      	cbz	r0, 8010676 <_printf_i+0x1e6>
 8010672:	1b80      	subs	r0, r0, r6
 8010674:	6060      	str	r0, [r4, #4]
 8010676:	6863      	ldr	r3, [r4, #4]
 8010678:	6123      	str	r3, [r4, #16]
 801067a:	2300      	movs	r3, #0
 801067c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010680:	e7aa      	b.n	80105d8 <_printf_i+0x148>
 8010682:	6923      	ldr	r3, [r4, #16]
 8010684:	4632      	mov	r2, r6
 8010686:	4649      	mov	r1, r9
 8010688:	4640      	mov	r0, r8
 801068a:	47d0      	blx	sl
 801068c:	3001      	adds	r0, #1
 801068e:	d0ad      	beq.n	80105ec <_printf_i+0x15c>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	079b      	lsls	r3, r3, #30
 8010694:	d413      	bmi.n	80106be <_printf_i+0x22e>
 8010696:	68e0      	ldr	r0, [r4, #12]
 8010698:	9b03      	ldr	r3, [sp, #12]
 801069a:	4298      	cmp	r0, r3
 801069c:	bfb8      	it	lt
 801069e:	4618      	movlt	r0, r3
 80106a0:	e7a6      	b.n	80105f0 <_printf_i+0x160>
 80106a2:	2301      	movs	r3, #1
 80106a4:	4632      	mov	r2, r6
 80106a6:	4649      	mov	r1, r9
 80106a8:	4640      	mov	r0, r8
 80106aa:	47d0      	blx	sl
 80106ac:	3001      	adds	r0, #1
 80106ae:	d09d      	beq.n	80105ec <_printf_i+0x15c>
 80106b0:	3501      	adds	r5, #1
 80106b2:	68e3      	ldr	r3, [r4, #12]
 80106b4:	9903      	ldr	r1, [sp, #12]
 80106b6:	1a5b      	subs	r3, r3, r1
 80106b8:	42ab      	cmp	r3, r5
 80106ba:	dcf2      	bgt.n	80106a2 <_printf_i+0x212>
 80106bc:	e7eb      	b.n	8010696 <_printf_i+0x206>
 80106be:	2500      	movs	r5, #0
 80106c0:	f104 0619 	add.w	r6, r4, #25
 80106c4:	e7f5      	b.n	80106b2 <_printf_i+0x222>
 80106c6:	bf00      	nop
 80106c8:	080114ad 	.word	0x080114ad
 80106cc:	080114be 	.word	0x080114be

080106d0 <__sflush_r>:
 80106d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d8:	0716      	lsls	r6, r2, #28
 80106da:	4605      	mov	r5, r0
 80106dc:	460c      	mov	r4, r1
 80106de:	d454      	bmi.n	801078a <__sflush_r+0xba>
 80106e0:	684b      	ldr	r3, [r1, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	dc02      	bgt.n	80106ec <__sflush_r+0x1c>
 80106e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	dd48      	ble.n	801077e <__sflush_r+0xae>
 80106ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106ee:	2e00      	cmp	r6, #0
 80106f0:	d045      	beq.n	801077e <__sflush_r+0xae>
 80106f2:	2300      	movs	r3, #0
 80106f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80106f8:	682f      	ldr	r7, [r5, #0]
 80106fa:	6a21      	ldr	r1, [r4, #32]
 80106fc:	602b      	str	r3, [r5, #0]
 80106fe:	d030      	beq.n	8010762 <__sflush_r+0x92>
 8010700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010702:	89a3      	ldrh	r3, [r4, #12]
 8010704:	0759      	lsls	r1, r3, #29
 8010706:	d505      	bpl.n	8010714 <__sflush_r+0x44>
 8010708:	6863      	ldr	r3, [r4, #4]
 801070a:	1ad2      	subs	r2, r2, r3
 801070c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801070e:	b10b      	cbz	r3, 8010714 <__sflush_r+0x44>
 8010710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010712:	1ad2      	subs	r2, r2, r3
 8010714:	2300      	movs	r3, #0
 8010716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010718:	6a21      	ldr	r1, [r4, #32]
 801071a:	4628      	mov	r0, r5
 801071c:	47b0      	blx	r6
 801071e:	1c43      	adds	r3, r0, #1
 8010720:	89a3      	ldrh	r3, [r4, #12]
 8010722:	d106      	bne.n	8010732 <__sflush_r+0x62>
 8010724:	6829      	ldr	r1, [r5, #0]
 8010726:	291d      	cmp	r1, #29
 8010728:	d82b      	bhi.n	8010782 <__sflush_r+0xb2>
 801072a:	4a2a      	ldr	r2, [pc, #168]	@ (80107d4 <__sflush_r+0x104>)
 801072c:	410a      	asrs	r2, r1
 801072e:	07d6      	lsls	r6, r2, #31
 8010730:	d427      	bmi.n	8010782 <__sflush_r+0xb2>
 8010732:	2200      	movs	r2, #0
 8010734:	6062      	str	r2, [r4, #4]
 8010736:	04d9      	lsls	r1, r3, #19
 8010738:	6922      	ldr	r2, [r4, #16]
 801073a:	6022      	str	r2, [r4, #0]
 801073c:	d504      	bpl.n	8010748 <__sflush_r+0x78>
 801073e:	1c42      	adds	r2, r0, #1
 8010740:	d101      	bne.n	8010746 <__sflush_r+0x76>
 8010742:	682b      	ldr	r3, [r5, #0]
 8010744:	b903      	cbnz	r3, 8010748 <__sflush_r+0x78>
 8010746:	6560      	str	r0, [r4, #84]	@ 0x54
 8010748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801074a:	602f      	str	r7, [r5, #0]
 801074c:	b1b9      	cbz	r1, 801077e <__sflush_r+0xae>
 801074e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010752:	4299      	cmp	r1, r3
 8010754:	d002      	beq.n	801075c <__sflush_r+0x8c>
 8010756:	4628      	mov	r0, r5
 8010758:	f7ff fb40 	bl	800fddc <_free_r>
 801075c:	2300      	movs	r3, #0
 801075e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010760:	e00d      	b.n	801077e <__sflush_r+0xae>
 8010762:	2301      	movs	r3, #1
 8010764:	4628      	mov	r0, r5
 8010766:	47b0      	blx	r6
 8010768:	4602      	mov	r2, r0
 801076a:	1c50      	adds	r0, r2, #1
 801076c:	d1c9      	bne.n	8010702 <__sflush_r+0x32>
 801076e:	682b      	ldr	r3, [r5, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d0c6      	beq.n	8010702 <__sflush_r+0x32>
 8010774:	2b1d      	cmp	r3, #29
 8010776:	d001      	beq.n	801077c <__sflush_r+0xac>
 8010778:	2b16      	cmp	r3, #22
 801077a:	d11e      	bne.n	80107ba <__sflush_r+0xea>
 801077c:	602f      	str	r7, [r5, #0]
 801077e:	2000      	movs	r0, #0
 8010780:	e022      	b.n	80107c8 <__sflush_r+0xf8>
 8010782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010786:	b21b      	sxth	r3, r3
 8010788:	e01b      	b.n	80107c2 <__sflush_r+0xf2>
 801078a:	690f      	ldr	r7, [r1, #16]
 801078c:	2f00      	cmp	r7, #0
 801078e:	d0f6      	beq.n	801077e <__sflush_r+0xae>
 8010790:	0793      	lsls	r3, r2, #30
 8010792:	680e      	ldr	r6, [r1, #0]
 8010794:	bf08      	it	eq
 8010796:	694b      	ldreq	r3, [r1, #20]
 8010798:	600f      	str	r7, [r1, #0]
 801079a:	bf18      	it	ne
 801079c:	2300      	movne	r3, #0
 801079e:	eba6 0807 	sub.w	r8, r6, r7
 80107a2:	608b      	str	r3, [r1, #8]
 80107a4:	f1b8 0f00 	cmp.w	r8, #0
 80107a8:	dde9      	ble.n	801077e <__sflush_r+0xae>
 80107aa:	6a21      	ldr	r1, [r4, #32]
 80107ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80107ae:	4643      	mov	r3, r8
 80107b0:	463a      	mov	r2, r7
 80107b2:	4628      	mov	r0, r5
 80107b4:	47b0      	blx	r6
 80107b6:	2800      	cmp	r0, #0
 80107b8:	dc08      	bgt.n	80107cc <__sflush_r+0xfc>
 80107ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107cc:	4407      	add	r7, r0
 80107ce:	eba8 0800 	sub.w	r8, r8, r0
 80107d2:	e7e7      	b.n	80107a4 <__sflush_r+0xd4>
 80107d4:	dfbffffe 	.word	0xdfbffffe

080107d8 <_fflush_r>:
 80107d8:	b538      	push	{r3, r4, r5, lr}
 80107da:	690b      	ldr	r3, [r1, #16]
 80107dc:	4605      	mov	r5, r0
 80107de:	460c      	mov	r4, r1
 80107e0:	b913      	cbnz	r3, 80107e8 <_fflush_r+0x10>
 80107e2:	2500      	movs	r5, #0
 80107e4:	4628      	mov	r0, r5
 80107e6:	bd38      	pop	{r3, r4, r5, pc}
 80107e8:	b118      	cbz	r0, 80107f2 <_fflush_r+0x1a>
 80107ea:	6a03      	ldr	r3, [r0, #32]
 80107ec:	b90b      	cbnz	r3, 80107f2 <_fflush_r+0x1a>
 80107ee:	f7ff f927 	bl	800fa40 <__sinit>
 80107f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d0f3      	beq.n	80107e2 <_fflush_r+0xa>
 80107fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80107fc:	07d0      	lsls	r0, r2, #31
 80107fe:	d404      	bmi.n	801080a <_fflush_r+0x32>
 8010800:	0599      	lsls	r1, r3, #22
 8010802:	d402      	bmi.n	801080a <_fflush_r+0x32>
 8010804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010806:	f7ff faae 	bl	800fd66 <__retarget_lock_acquire_recursive>
 801080a:	4628      	mov	r0, r5
 801080c:	4621      	mov	r1, r4
 801080e:	f7ff ff5f 	bl	80106d0 <__sflush_r>
 8010812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010814:	07da      	lsls	r2, r3, #31
 8010816:	4605      	mov	r5, r0
 8010818:	d4e4      	bmi.n	80107e4 <_fflush_r+0xc>
 801081a:	89a3      	ldrh	r3, [r4, #12]
 801081c:	059b      	lsls	r3, r3, #22
 801081e:	d4e1      	bmi.n	80107e4 <_fflush_r+0xc>
 8010820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010822:	f7ff faa1 	bl	800fd68 <__retarget_lock_release_recursive>
 8010826:	e7dd      	b.n	80107e4 <_fflush_r+0xc>

08010828 <fiprintf>:
 8010828:	b40e      	push	{r1, r2, r3}
 801082a:	b503      	push	{r0, r1, lr}
 801082c:	4601      	mov	r1, r0
 801082e:	ab03      	add	r3, sp, #12
 8010830:	4805      	ldr	r0, [pc, #20]	@ (8010848 <fiprintf+0x20>)
 8010832:	f853 2b04 	ldr.w	r2, [r3], #4
 8010836:	6800      	ldr	r0, [r0, #0]
 8010838:	9301      	str	r3, [sp, #4]
 801083a:	f7ff fca3 	bl	8010184 <_vfiprintf_r>
 801083e:	b002      	add	sp, #8
 8010840:	f85d eb04 	ldr.w	lr, [sp], #4
 8010844:	b003      	add	sp, #12
 8010846:	4770      	bx	lr
 8010848:	20000034 	.word	0x20000034

0801084c <__swbuf_r>:
 801084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084e:	460e      	mov	r6, r1
 8010850:	4614      	mov	r4, r2
 8010852:	4605      	mov	r5, r0
 8010854:	b118      	cbz	r0, 801085e <__swbuf_r+0x12>
 8010856:	6a03      	ldr	r3, [r0, #32]
 8010858:	b90b      	cbnz	r3, 801085e <__swbuf_r+0x12>
 801085a:	f7ff f8f1 	bl	800fa40 <__sinit>
 801085e:	69a3      	ldr	r3, [r4, #24]
 8010860:	60a3      	str	r3, [r4, #8]
 8010862:	89a3      	ldrh	r3, [r4, #12]
 8010864:	071a      	lsls	r2, r3, #28
 8010866:	d501      	bpl.n	801086c <__swbuf_r+0x20>
 8010868:	6923      	ldr	r3, [r4, #16]
 801086a:	b943      	cbnz	r3, 801087e <__swbuf_r+0x32>
 801086c:	4621      	mov	r1, r4
 801086e:	4628      	mov	r0, r5
 8010870:	f000 f82a 	bl	80108c8 <__swsetup_r>
 8010874:	b118      	cbz	r0, 801087e <__swbuf_r+0x32>
 8010876:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801087a:	4638      	mov	r0, r7
 801087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	6922      	ldr	r2, [r4, #16]
 8010882:	1a98      	subs	r0, r3, r2
 8010884:	6963      	ldr	r3, [r4, #20]
 8010886:	b2f6      	uxtb	r6, r6
 8010888:	4283      	cmp	r3, r0
 801088a:	4637      	mov	r7, r6
 801088c:	dc05      	bgt.n	801089a <__swbuf_r+0x4e>
 801088e:	4621      	mov	r1, r4
 8010890:	4628      	mov	r0, r5
 8010892:	f7ff ffa1 	bl	80107d8 <_fflush_r>
 8010896:	2800      	cmp	r0, #0
 8010898:	d1ed      	bne.n	8010876 <__swbuf_r+0x2a>
 801089a:	68a3      	ldr	r3, [r4, #8]
 801089c:	3b01      	subs	r3, #1
 801089e:	60a3      	str	r3, [r4, #8]
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	1c5a      	adds	r2, r3, #1
 80108a4:	6022      	str	r2, [r4, #0]
 80108a6:	701e      	strb	r6, [r3, #0]
 80108a8:	6962      	ldr	r2, [r4, #20]
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d004      	beq.n	80108ba <__swbuf_r+0x6e>
 80108b0:	89a3      	ldrh	r3, [r4, #12]
 80108b2:	07db      	lsls	r3, r3, #31
 80108b4:	d5e1      	bpl.n	801087a <__swbuf_r+0x2e>
 80108b6:	2e0a      	cmp	r6, #10
 80108b8:	d1df      	bne.n	801087a <__swbuf_r+0x2e>
 80108ba:	4621      	mov	r1, r4
 80108bc:	4628      	mov	r0, r5
 80108be:	f7ff ff8b 	bl	80107d8 <_fflush_r>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d0d9      	beq.n	801087a <__swbuf_r+0x2e>
 80108c6:	e7d6      	b.n	8010876 <__swbuf_r+0x2a>

080108c8 <__swsetup_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4b29      	ldr	r3, [pc, #164]	@ (8010970 <__swsetup_r+0xa8>)
 80108cc:	4605      	mov	r5, r0
 80108ce:	6818      	ldr	r0, [r3, #0]
 80108d0:	460c      	mov	r4, r1
 80108d2:	b118      	cbz	r0, 80108dc <__swsetup_r+0x14>
 80108d4:	6a03      	ldr	r3, [r0, #32]
 80108d6:	b90b      	cbnz	r3, 80108dc <__swsetup_r+0x14>
 80108d8:	f7ff f8b2 	bl	800fa40 <__sinit>
 80108dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108e0:	0719      	lsls	r1, r3, #28
 80108e2:	d422      	bmi.n	801092a <__swsetup_r+0x62>
 80108e4:	06da      	lsls	r2, r3, #27
 80108e6:	d407      	bmi.n	80108f8 <__swsetup_r+0x30>
 80108e8:	2209      	movs	r2, #9
 80108ea:	602a      	str	r2, [r5, #0]
 80108ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108f0:	81a3      	strh	r3, [r4, #12]
 80108f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108f6:	e033      	b.n	8010960 <__swsetup_r+0x98>
 80108f8:	0758      	lsls	r0, r3, #29
 80108fa:	d512      	bpl.n	8010922 <__swsetup_r+0x5a>
 80108fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80108fe:	b141      	cbz	r1, 8010912 <__swsetup_r+0x4a>
 8010900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010904:	4299      	cmp	r1, r3
 8010906:	d002      	beq.n	801090e <__swsetup_r+0x46>
 8010908:	4628      	mov	r0, r5
 801090a:	f7ff fa67 	bl	800fddc <_free_r>
 801090e:	2300      	movs	r3, #0
 8010910:	6363      	str	r3, [r4, #52]	@ 0x34
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010918:	81a3      	strh	r3, [r4, #12]
 801091a:	2300      	movs	r3, #0
 801091c:	6063      	str	r3, [r4, #4]
 801091e:	6923      	ldr	r3, [r4, #16]
 8010920:	6023      	str	r3, [r4, #0]
 8010922:	89a3      	ldrh	r3, [r4, #12]
 8010924:	f043 0308 	orr.w	r3, r3, #8
 8010928:	81a3      	strh	r3, [r4, #12]
 801092a:	6923      	ldr	r3, [r4, #16]
 801092c:	b94b      	cbnz	r3, 8010942 <__swsetup_r+0x7a>
 801092e:	89a3      	ldrh	r3, [r4, #12]
 8010930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010938:	d003      	beq.n	8010942 <__swsetup_r+0x7a>
 801093a:	4621      	mov	r1, r4
 801093c:	4628      	mov	r0, r5
 801093e:	f000 f860 	bl	8010a02 <__smakebuf_r>
 8010942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010946:	f013 0201 	ands.w	r2, r3, #1
 801094a:	d00a      	beq.n	8010962 <__swsetup_r+0x9a>
 801094c:	2200      	movs	r2, #0
 801094e:	60a2      	str	r2, [r4, #8]
 8010950:	6962      	ldr	r2, [r4, #20]
 8010952:	4252      	negs	r2, r2
 8010954:	61a2      	str	r2, [r4, #24]
 8010956:	6922      	ldr	r2, [r4, #16]
 8010958:	b942      	cbnz	r2, 801096c <__swsetup_r+0xa4>
 801095a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801095e:	d1c5      	bne.n	80108ec <__swsetup_r+0x24>
 8010960:	bd38      	pop	{r3, r4, r5, pc}
 8010962:	0799      	lsls	r1, r3, #30
 8010964:	bf58      	it	pl
 8010966:	6962      	ldrpl	r2, [r4, #20]
 8010968:	60a2      	str	r2, [r4, #8]
 801096a:	e7f4      	b.n	8010956 <__swsetup_r+0x8e>
 801096c:	2000      	movs	r0, #0
 801096e:	e7f7      	b.n	8010960 <__swsetup_r+0x98>
 8010970:	20000034 	.word	0x20000034

08010974 <memmove>:
 8010974:	4288      	cmp	r0, r1
 8010976:	b510      	push	{r4, lr}
 8010978:	eb01 0402 	add.w	r4, r1, r2
 801097c:	d902      	bls.n	8010984 <memmove+0x10>
 801097e:	4284      	cmp	r4, r0
 8010980:	4623      	mov	r3, r4
 8010982:	d807      	bhi.n	8010994 <memmove+0x20>
 8010984:	1e43      	subs	r3, r0, #1
 8010986:	42a1      	cmp	r1, r4
 8010988:	d008      	beq.n	801099c <memmove+0x28>
 801098a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801098e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010992:	e7f8      	b.n	8010986 <memmove+0x12>
 8010994:	4402      	add	r2, r0
 8010996:	4601      	mov	r1, r0
 8010998:	428a      	cmp	r2, r1
 801099a:	d100      	bne.n	801099e <memmove+0x2a>
 801099c:	bd10      	pop	{r4, pc}
 801099e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109a6:	e7f7      	b.n	8010998 <memmove+0x24>

080109a8 <abort>:
 80109a8:	b508      	push	{r3, lr}
 80109aa:	2006      	movs	r0, #6
 80109ac:	f000 f88e 	bl	8010acc <raise>
 80109b0:	2001      	movs	r0, #1
 80109b2:	f7f0 fd67 	bl	8001484 <_exit>

080109b6 <__swhatbuf_r>:
 80109b6:	b570      	push	{r4, r5, r6, lr}
 80109b8:	460c      	mov	r4, r1
 80109ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109be:	2900      	cmp	r1, #0
 80109c0:	b096      	sub	sp, #88	@ 0x58
 80109c2:	4615      	mov	r5, r2
 80109c4:	461e      	mov	r6, r3
 80109c6:	da0d      	bge.n	80109e4 <__swhatbuf_r+0x2e>
 80109c8:	89a3      	ldrh	r3, [r4, #12]
 80109ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80109ce:	f04f 0100 	mov.w	r1, #0
 80109d2:	bf14      	ite	ne
 80109d4:	2340      	movne	r3, #64	@ 0x40
 80109d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80109da:	2000      	movs	r0, #0
 80109dc:	6031      	str	r1, [r6, #0]
 80109de:	602b      	str	r3, [r5, #0]
 80109e0:	b016      	add	sp, #88	@ 0x58
 80109e2:	bd70      	pop	{r4, r5, r6, pc}
 80109e4:	466a      	mov	r2, sp
 80109e6:	f000 f879 	bl	8010adc <_fstat_r>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	dbec      	blt.n	80109c8 <__swhatbuf_r+0x12>
 80109ee:	9901      	ldr	r1, [sp, #4]
 80109f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80109f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80109f8:	4259      	negs	r1, r3
 80109fa:	4159      	adcs	r1, r3
 80109fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a00:	e7eb      	b.n	80109da <__swhatbuf_r+0x24>

08010a02 <__smakebuf_r>:
 8010a02:	898b      	ldrh	r3, [r1, #12]
 8010a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a06:	079d      	lsls	r5, r3, #30
 8010a08:	4606      	mov	r6, r0
 8010a0a:	460c      	mov	r4, r1
 8010a0c:	d507      	bpl.n	8010a1e <__smakebuf_r+0x1c>
 8010a0e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a12:	6023      	str	r3, [r4, #0]
 8010a14:	6123      	str	r3, [r4, #16]
 8010a16:	2301      	movs	r3, #1
 8010a18:	6163      	str	r3, [r4, #20]
 8010a1a:	b003      	add	sp, #12
 8010a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a1e:	ab01      	add	r3, sp, #4
 8010a20:	466a      	mov	r2, sp
 8010a22:	f7ff ffc8 	bl	80109b6 <__swhatbuf_r>
 8010a26:	9f00      	ldr	r7, [sp, #0]
 8010a28:	4605      	mov	r5, r0
 8010a2a:	4639      	mov	r1, r7
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f7fe fdd5 	bl	800f5dc <_malloc_r>
 8010a32:	b948      	cbnz	r0, 8010a48 <__smakebuf_r+0x46>
 8010a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a38:	059a      	lsls	r2, r3, #22
 8010a3a:	d4ee      	bmi.n	8010a1a <__smakebuf_r+0x18>
 8010a3c:	f023 0303 	bic.w	r3, r3, #3
 8010a40:	f043 0302 	orr.w	r3, r3, #2
 8010a44:	81a3      	strh	r3, [r4, #12]
 8010a46:	e7e2      	b.n	8010a0e <__smakebuf_r+0xc>
 8010a48:	89a3      	ldrh	r3, [r4, #12]
 8010a4a:	6020      	str	r0, [r4, #0]
 8010a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a50:	81a3      	strh	r3, [r4, #12]
 8010a52:	9b01      	ldr	r3, [sp, #4]
 8010a54:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a58:	b15b      	cbz	r3, 8010a72 <__smakebuf_r+0x70>
 8010a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f000 f84e 	bl	8010b00 <_isatty_r>
 8010a64:	b128      	cbz	r0, 8010a72 <__smakebuf_r+0x70>
 8010a66:	89a3      	ldrh	r3, [r4, #12]
 8010a68:	f023 0303 	bic.w	r3, r3, #3
 8010a6c:	f043 0301 	orr.w	r3, r3, #1
 8010a70:	81a3      	strh	r3, [r4, #12]
 8010a72:	89a3      	ldrh	r3, [r4, #12]
 8010a74:	431d      	orrs	r5, r3
 8010a76:	81a5      	strh	r5, [r4, #12]
 8010a78:	e7cf      	b.n	8010a1a <__smakebuf_r+0x18>

08010a7a <_raise_r>:
 8010a7a:	291f      	cmp	r1, #31
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4605      	mov	r5, r0
 8010a80:	460c      	mov	r4, r1
 8010a82:	d904      	bls.n	8010a8e <_raise_r+0x14>
 8010a84:	2316      	movs	r3, #22
 8010a86:	6003      	str	r3, [r0, #0]
 8010a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a8c:	bd38      	pop	{r3, r4, r5, pc}
 8010a8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a90:	b112      	cbz	r2, 8010a98 <_raise_r+0x1e>
 8010a92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a96:	b94b      	cbnz	r3, 8010aac <_raise_r+0x32>
 8010a98:	4628      	mov	r0, r5
 8010a9a:	f000 f853 	bl	8010b44 <_getpid_r>
 8010a9e:	4622      	mov	r2, r4
 8010aa0:	4601      	mov	r1, r0
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010aa8:	f000 b83a 	b.w	8010b20 <_kill_r>
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d00a      	beq.n	8010ac6 <_raise_r+0x4c>
 8010ab0:	1c59      	adds	r1, r3, #1
 8010ab2:	d103      	bne.n	8010abc <_raise_r+0x42>
 8010ab4:	2316      	movs	r3, #22
 8010ab6:	6003      	str	r3, [r0, #0]
 8010ab8:	2001      	movs	r0, #1
 8010aba:	e7e7      	b.n	8010a8c <_raise_r+0x12>
 8010abc:	2100      	movs	r1, #0
 8010abe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	4798      	blx	r3
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	e7e0      	b.n	8010a8c <_raise_r+0x12>
	...

08010acc <raise>:
 8010acc:	4b02      	ldr	r3, [pc, #8]	@ (8010ad8 <raise+0xc>)
 8010ace:	4601      	mov	r1, r0
 8010ad0:	6818      	ldr	r0, [r3, #0]
 8010ad2:	f7ff bfd2 	b.w	8010a7a <_raise_r>
 8010ad6:	bf00      	nop
 8010ad8:	20000034 	.word	0x20000034

08010adc <_fstat_r>:
 8010adc:	b538      	push	{r3, r4, r5, lr}
 8010ade:	4d07      	ldr	r5, [pc, #28]	@ (8010afc <_fstat_r+0x20>)
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	4608      	mov	r0, r1
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	602b      	str	r3, [r5, #0]
 8010aea:	f7f0 fd1b 	bl	8001524 <_fstat>
 8010aee:	1c43      	adds	r3, r0, #1
 8010af0:	d102      	bne.n	8010af8 <_fstat_r+0x1c>
 8010af2:	682b      	ldr	r3, [r5, #0]
 8010af4:	b103      	cbz	r3, 8010af8 <_fstat_r+0x1c>
 8010af6:	6023      	str	r3, [r4, #0]
 8010af8:	bd38      	pop	{r3, r4, r5, pc}
 8010afa:	bf00      	nop
 8010afc:	2000aa94 	.word	0x2000aa94

08010b00 <_isatty_r>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	4d06      	ldr	r5, [pc, #24]	@ (8010b1c <_isatty_r+0x1c>)
 8010b04:	2300      	movs	r3, #0
 8010b06:	4604      	mov	r4, r0
 8010b08:	4608      	mov	r0, r1
 8010b0a:	602b      	str	r3, [r5, #0]
 8010b0c:	f7f0 fd1a 	bl	8001544 <_isatty>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_isatty_r+0x1a>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_isatty_r+0x1a>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	2000aa94 	.word	0x2000aa94

08010b20 <_kill_r>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	4d07      	ldr	r5, [pc, #28]	@ (8010b40 <_kill_r+0x20>)
 8010b24:	2300      	movs	r3, #0
 8010b26:	4604      	mov	r4, r0
 8010b28:	4608      	mov	r0, r1
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	602b      	str	r3, [r5, #0]
 8010b2e:	f7f0 fc99 	bl	8001464 <_kill>
 8010b32:	1c43      	adds	r3, r0, #1
 8010b34:	d102      	bne.n	8010b3c <_kill_r+0x1c>
 8010b36:	682b      	ldr	r3, [r5, #0]
 8010b38:	b103      	cbz	r3, 8010b3c <_kill_r+0x1c>
 8010b3a:	6023      	str	r3, [r4, #0]
 8010b3c:	bd38      	pop	{r3, r4, r5, pc}
 8010b3e:	bf00      	nop
 8010b40:	2000aa94 	.word	0x2000aa94

08010b44 <_getpid_r>:
 8010b44:	f7f0 bc86 	b.w	8001454 <_getpid>

08010b48 <_init>:
 8010b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4a:	bf00      	nop
 8010b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b4e:	bc08      	pop	{r3}
 8010b50:	469e      	mov	lr, r3
 8010b52:	4770      	bx	lr

08010b54 <_fini>:
 8010b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b56:	bf00      	nop
 8010b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b5a:	bc08      	pop	{r3}
 8010b5c:	469e      	mov	lr, r3
 8010b5e:	4770      	bx	lr
