
ArduinoJoyStick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b2c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08018d10  08018d10  00019d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019ac8  08019ac8  0001b234  2**0
                  CONTENTS
  4 .ARM          00000008  08019ac8  08019ac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019ad0  08019ad0  0001b234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019ad0  08019ad0  0001aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019ad8  08019ad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08019adc  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae60  20000238  08019d10  0001b238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b098  08019d10  0001c098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027560  00000000  00000000  0001b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005258  00000000  00000000  000427c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00047a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ee  00000000  00000000  00049938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec87  00000000  00000000  0004b126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a71  00000000  00000000  00079dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001291c6  00000000  00000000  0009f81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c89e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091d0  00000000  00000000  001c8a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001d1c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000238 	.word	0x20000238
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018cf4 	.word	0x08018cf4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000023c 	.word	0x2000023c
 800021c:	08018cf4 	.word	0x08018cf4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_d2f>:
 8000668:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800066c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000670:	bf24      	itt	cs
 8000672:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000676:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800067a:	d90d      	bls.n	8000698 <__aeabi_d2f+0x30>
 800067c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000680:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000684:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000688:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800068c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000690:	bf08      	it	eq
 8000692:	f020 0001 	biceq.w	r0, r0, #1
 8000696:	4770      	bx	lr
 8000698:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800069c:	d121      	bne.n	80006e2 <__aeabi_d2f+0x7a>
 800069e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80006a2:	bfbc      	itt	lt
 80006a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80006a8:	4770      	bxlt	lr
 80006aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006b2:	f1c2 0218 	rsb	r2, r2, #24
 80006b6:	f1c2 0c20 	rsb	ip, r2, #32
 80006ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80006be:	fa20 f002 	lsr.w	r0, r0, r2
 80006c2:	bf18      	it	ne
 80006c4:	f040 0001 	orrne.w	r0, r0, #1
 80006c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006d4:	ea40 000c 	orr.w	r0, r0, ip
 80006d8:	fa23 f302 	lsr.w	r3, r3, r2
 80006dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006e0:	e7cc      	b.n	800067c <__aeabi_d2f+0x14>
 80006e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006e6:	d107      	bne.n	80006f8 <__aeabi_d2f+0x90>
 80006e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ec:	bf1e      	ittt	ne
 80006ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006f6:	4770      	bxne	lr
 80006f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000700:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_ldivmod>:
 8000708:	b97b      	cbnz	r3, 800072a <__aeabi_ldivmod+0x22>
 800070a:	b972      	cbnz	r2, 800072a <__aeabi_ldivmod+0x22>
 800070c:	2900      	cmp	r1, #0
 800070e:	bfbe      	ittt	lt
 8000710:	2000      	movlt	r0, #0
 8000712:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000716:	e006      	blt.n	8000726 <__aeabi_ldivmod+0x1e>
 8000718:	bf08      	it	eq
 800071a:	2800      	cmpeq	r0, #0
 800071c:	bf1c      	itt	ne
 800071e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000722:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000726:	f000 b9b5 	b.w	8000a94 <__aeabi_idiv0>
 800072a:	f1ad 0c08 	sub.w	ip, sp, #8
 800072e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000732:	2900      	cmp	r1, #0
 8000734:	db09      	blt.n	800074a <__aeabi_ldivmod+0x42>
 8000736:	2b00      	cmp	r3, #0
 8000738:	db1a      	blt.n	8000770 <__aeabi_ldivmod+0x68>
 800073a:	f000 f84d 	bl	80007d8 <__udivmoddi4>
 800073e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000746:	b004      	add	sp, #16
 8000748:	4770      	bx	lr
 800074a:	4240      	negs	r0, r0
 800074c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	db1b      	blt.n	800078c <__aeabi_ldivmod+0x84>
 8000754:	f000 f840 	bl	80007d8 <__udivmoddi4>
 8000758:	f8dd e004 	ldr.w	lr, [sp, #4]
 800075c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000760:	b004      	add	sp, #16
 8000762:	4240      	negs	r0, r0
 8000764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000768:	4252      	negs	r2, r2
 800076a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800076e:	4770      	bx	lr
 8000770:	4252      	negs	r2, r2
 8000772:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000776:	f000 f82f 	bl	80007d8 <__udivmoddi4>
 800077a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000782:	b004      	add	sp, #16
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	4770      	bx	lr
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	f000 f821 	bl	80007d8 <__udivmoddi4>
 8000796:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079e:	b004      	add	sp, #16
 80007a0:	4252      	negs	r2, r2
 80007a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007bc:	f000 b96a 	b.w	8000a94 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	@ 0x30
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2220      	movs	r2, #32
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f017 f981 	bl	8017db8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ab8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000abc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abe:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ac0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000acc:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b04:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b12:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b20:	481e      	ldr	r0, [pc, #120]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b22:	f001 fe63 	bl	80027ec <HAL_ADC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b2c:	f000 ff36 	bl	800199c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b3c:	f003 fa1e 	bl	8003f7c <HAL_ADCEx_MultiModeConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b46:	f000 ff29 	bl	800199c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_ADC1_Init+0x108>)
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000b52:	2307      	movs	r3, #7
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b56:	237f      	movs	r3, #127	@ 0x7f
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b68:	f002 fb58 	bl	800321c <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b72:	f000 ff13 	bl	800199c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_ADC1_Init+0x10c>)
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b84:	f002 fb4a 	bl	800321c <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b8e:	f000 ff05 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	@ 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000254 	.word	0x20000254
 8000ba0:	04300002 	.word	0x04300002
 8000ba4:	08600004 	.word	0x08600004

08000ba8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09e      	sub	sp, #120	@ 0x78
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2254      	movs	r2, #84	@ 0x54
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f017 f8f5 	bl	8017db8 <memset>
  if(adcHandle->Instance==ADC1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd6:	d167      	bne.n	8000ca8 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bde:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000be2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fed7 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000bf4:	f000 fed2 	bl	800199c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000bfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	4a26      	ldr	r2, [pc, #152]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f003 fec3 	bl	80049c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c44:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <HAL_ADC_MspInit+0x110>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c7e:	f003 fb65 	bl	800434c <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000c88:	f000 fe88 	bl	800199c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c90:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	2012      	movs	r0, #18
 8000c9e:	f003 fb2d 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f003 fb44 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3778      	adds	r7, #120	@ 0x78
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	200002c0 	.word	0x200002c0
 8000cb8:	40020030 	.word	0x40020030

08000cbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <MX_FREERTOS_Init+0x18>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_FREERTOS_Init+0x1c>)
 8000cc6:	f007 fa75 	bl	80081b4 <osThreadNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a03      	ldr	r2, [pc, #12]	@ (8000cdc <MX_FREERTOS_Init+0x20>)
 8000cce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08018d98 	.word	0x08018d98
 8000cd8:	08001475 	.word	0x08001475
 8000cdc:	20000320 	.word	0x20000320

08000ce0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cec:	f008 fb36 	bl	800935c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e5c <pvPortMallocMicroROS+0x17c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000cf8:	f000 f986 	bl	8001008 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cfc:	4b58      	ldr	r3, [pc, #352]	@ (8000e60 <pvPortMallocMicroROS+0x180>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f040 8090 	bne.w	8000e2a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01e      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000d10:	2208      	movs	r2, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d015      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	3308      	adds	r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d3a:	f383 8811 	msr	BASEPRI, r3
 8000d3e:	f3bf 8f6f 	isb	sy
 8000d42:	f3bf 8f4f 	dsb	sy
 8000d46:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d06a      	beq.n	8000e2a <pvPortMallocMicroROS+0x14a>
 8000d54:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d865      	bhi.n	8000e2a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d5e:	4b42      	ldr	r3, [pc, #264]	@ (8000e68 <pvPortMallocMicroROS+0x188>)
 8000d60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d62:	4b41      	ldr	r3, [pc, #260]	@ (8000e68 <pvPortMallocMicroROS+0x188>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d68:	e004      	b.n	8000d74 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d903      	bls.n	8000d86 <pvPortMallocMicroROS+0xa6>
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f1      	bne.n	8000d6a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d86:	4b35      	ldr	r3, [pc, #212]	@ (8000e5c <pvPortMallocMicroROS+0x17c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d04c      	beq.n	8000e2a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2208      	movs	r2, #8
 8000d96:	4413      	add	r3, r2
 8000d98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	2308      	movs	r3, #8
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d920      	bls.n	8000df4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00b      	beq.n	8000ddc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dc8:	f383 8811 	msr	BASEPRI, r3
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	613b      	str	r3, [r7, #16]
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dee:	69b8      	ldr	r0, [r7, #24]
 8000df0:	f000 f96c 	bl	80010cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <pvPortMallocMicroROS+0x18c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d203      	bcs.n	8000e16 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a16      	ldr	r2, [pc, #88]	@ (8000e6c <pvPortMallocMicroROS+0x18c>)
 8000e14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <pvPortMallocMicroROS+0x180>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e2a:	f008 faa5 	bl	8009378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e3c:	f383 8811 	msr	BASEPRI, r3
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	f3bf 8f4f 	dsb	sy
 8000e48:	60fb      	str	r3, [r7, #12]
}
 8000e4a:	bf00      	nop
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e50:	69fb      	ldr	r3, [r7, #28]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3728      	adds	r7, #40	@ 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20003e68 	.word	0x20003e68
 8000e60:	20003e74 	.word	0x20003e74
 8000e64:	20003e6c 	.word	0x20003e6c
 8000e68:	20003e60 	.word	0x20003e60
 8000e6c:	20003e70 	.word	0x20003e70

08000e70 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d04a      	beq.n	8000f18 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e82:	2308      	movs	r3, #8
 8000e84:	425b      	negs	r3, r3
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10b      	bne.n	8000eb6 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ea2:	f383 8811 	msr	BASEPRI, r3
 8000ea6:	f3bf 8f6f 	isb	sy
 8000eaa:	f3bf 8f4f 	dsb	sy
 8000eae:	60fb      	str	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	e7fd      	b.n	8000eb2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	60bb      	str	r3, [r7, #8]
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d019      	beq.n	8000f18 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d115      	bne.n	8000f18 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000efc:	f008 fa2e 	bl	800935c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <vPortFreeMicroROS+0xb4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <vPortFreeMicroROS+0xb4>)
 8000f0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f0e:	6938      	ldr	r0, [r7, #16]
 8000f10:	f000 f8dc 	bl	80010cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f14:	f008 fa30 	bl	8009378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20003e74 	.word	0x20003e74
 8000f24:	20003e6c 	.word	0x20003e6c

08000f28 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f34:	2308      	movs	r3, #8
 8000f36:	425b      	negs	r3, r3
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <getBlockSize+0x38>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

	return count;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20003e74 	.word	0x20003e74

08000f64 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f6e:	f008 f9f5 	bl	800935c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f7ff feb4 	bl	8000ce0 <pvPortMallocMicroROS>
 8000f78:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d017      	beq.n	8000fb0 <pvPortReallocMicroROS+0x4c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d014      	beq.n	8000fb0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffce 	bl	8000f28 <getBlockSize>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2208      	movs	r2, #8
 8000f90:	1a9b      	subs	r3, r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d201      	bcs.n	8000fa0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f016 ffd0 	bl	8017f4a <memcpy>

		vPortFreeMicroROS(pv);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff60 	bl	8000e70 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000fb0:	f008 f9e2 	bl	8009378 <xTaskResumeAll>

	return newmem;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fc8:	f008 f9c8 	bl	800935c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff fe82 	bl	8000ce0 <pvPortMallocMicroROS>
 8000fdc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fe2:	e004      	b.n	8000fee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	613a      	str	r2, [r7, #16]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	617a      	str	r2, [r7, #20]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f5      	bne.n	8000fe4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000ff8:	f008 f9be 	bl	8009378 <xTaskResumeAll>
  	return mem;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800100e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001012:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <prvHeapInit+0xac>)
 8001016:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00c      	beq.n	800103c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3307      	adds	r3, #7
 8001026:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <prvHeapInit+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001040:	4a1d      	ldr	r2, [pc, #116]	@ (80010b8 <prvHeapInit+0xb0>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <prvHeapInit+0xb0>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001054:	2208      	movs	r2, #8
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f023 0307 	bic.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <prvHeapInit+0xb4>)
 8001068:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <prvHeapInit+0xb4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <prvHeapInit+0xb4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <prvHeapInit+0xb4>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <prvHeapInit+0xb8>)
 8001096:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <prvHeapInit+0xbc>)
 800109e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <prvHeapInit+0xc0>)
 80010a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	20003260 	.word	0x20003260
 80010b8:	20003e60 	.word	0x20003e60
 80010bc:	20003e68 	.word	0x20003e68
 80010c0:	20003e70 	.word	0x20003e70
 80010c4:	20003e6c 	.word	0x20003e6c
 80010c8:	20003e74 	.word	0x20003e74

080010cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <prvInsertBlockIntoFreeList+0xac>)
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e002      	b.n	80010e0 <prvInsertBlockIntoFreeList+0x14>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d8f7      	bhi.n	80010da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d108      	bne.n	800110e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	441a      	add	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	441a      	add	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d118      	bne.n	8001154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <prvInsertBlockIntoFreeList+0xb0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d00d      	beq.n	800114a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	441a      	add	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e008      	b.n	800115c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <prvInsertBlockIntoFreeList+0xb0>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e003      	b.n	800115c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d002      	beq.n	800116a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20003e60 	.word	0x20003e60
 800117c:	20003e68 	.word	0x20003e68

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_DMA_Init+0x70>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118a:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <MX_DMA_Init+0x70>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6493      	str	r3, [r2, #72]	@ 0x48
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_DMA_Init+0x70>)
 8001194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a2:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	200b      	movs	r0, #11
 80011bc:	f003 f89e 	bl	80042fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c0:	200b      	movs	r0, #11
 80011c2:	f003 f8b5 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	200c      	movs	r0, #12
 80011cc:	f003 f896 	bl	80042fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011d0:	200c      	movs	r0, #12
 80011d2:	f003 f8ad 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	200d      	movs	r0, #13
 80011dc:	f003 f88e 	bl	80042fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e0:	200d      	movs	r0, #13
 80011e2:	f003 f8a5 	bl	8004330 <HAL_NVIC_EnableIRQ>

}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001202:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001208:	4904      	ldr	r1, [pc, #16]	@ (800121c <cubemx_transport_open+0x28>)
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f005 fa30 	bl	8006670 <HAL_UART_Receive_DMA>
    return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20003e78 	.word	0x20003e78

08001220 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800122e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f005 fa69 	bl	8006708 <HAL_UART_DMAStop>
    return true;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001254:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125c:	2b20      	cmp	r3, #32
 800125e:	d11b      	bne.n	8001298 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f005 f981 	bl	8006570 <HAL_UART_Transmit_DMA>
 800126e:	4603      	mov	r3, r0
 8001270:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001272:	e002      	b.n	800127a <cubemx_transport_write+0x3a>
            osDelay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f007 f82f 	bl	80082d8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800127a:	7cfb      	ldrb	r3, [r7, #19]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <cubemx_transport_write+0x4a>
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001286:	2b20      	cmp	r3, #32
 8001288:	d1f4      	bne.n	8001274 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800128a:	7cfb      	ldrb	r3, [r7, #19]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <cubemx_transport_write+0x54>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	e002      	b.n	800129a <cubemx_transport_write+0x5a>
 8001294:	2300      	movs	r3, #0
 8001296:	e000      	b.n	800129a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001298:	2300      	movs	r3, #0
    }
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80012b8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012be:	b672      	cpsid	i
}
 80012c0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <cubemx_transport_read+0x9c>)
 80012d2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012d4:	b662      	cpsie	i
}
 80012d6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3301      	adds	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80012de:	2001      	movs	r0, #1
 80012e0:	f006 fffa 	bl	80082d8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <cubemx_transport_read+0xa0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <cubemx_transport_read+0x9c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d103      	bne.n	80012f8 <cubemx_transport_read+0x54>
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbe2      	blt.n	80012be <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012fc:	e011      	b.n	8001322 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	440b      	add	r3, r1
 8001308:	490f      	ldr	r1, [pc, #60]	@ (8001348 <cubemx_transport_read+0xa4>)
 800130a:	5c8a      	ldrb	r2, [r1, r2]
 800130c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <cubemx_transport_read+0xa0>)
 800131a:	6013      	str	r3, [r2, #0]
        wrote++;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3301      	adds	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <cubemx_transport_read+0x9c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d003      	beq.n	8001336 <cubemx_transport_read+0x92>
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3e3      	bcc.n	80012fe <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001336:	69bb      	ldr	r3, [r7, #24]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000467c 	.word	0x2000467c
 8001344:	20004678 	.word	0x20004678
 8001348:	20003e78 	.word	0x20003e78

0800134c <MX_GPIO_Init>:
        * EXTI
     PB8-BOOT0   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <MX_GPIO_Init+0xf8>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a37      	ldr	r2, [pc, #220]	@ (8001444 <MX_GPIO_Init+0xf8>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b35      	ldr	r3, [pc, #212]	@ (8001444 <MX_GPIO_Init+0xf8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <MX_GPIO_Init+0xf8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a31      	ldr	r2, [pc, #196]	@ (8001444 <MX_GPIO_Init+0xf8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <MX_GPIO_Init+0xf8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <MX_GPIO_Init+0xf8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a2b      	ldr	r2, [pc, #172]	@ (8001444 <MX_GPIO_Init+0xf8>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <MX_GPIO_Init+0xf8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f003 fca3 	bl	8004cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	481e      	ldr	r0, [pc, #120]	@ (8001448 <MX_GPIO_Init+0xfc>)
 80013ce:	f003 fafb 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013d2:	2320      	movs	r3, #32
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f003 faec 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013f0:	2330      	movs	r3, #48	@ 0x30
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	4811      	ldr	r0, [pc, #68]	@ (8001448 <MX_GPIO_Init+0xfc>)
 8001404:	f003 fae0 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001408:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140e:	2312      	movs	r3, #18
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141a:	2304      	movs	r3, #4
 800141c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4619      	mov	r1, r3
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <MX_GPIO_Init+0x100>)
 8001426:	f003 facf 	bl	80049c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2028      	movs	r0, #40	@ 0x28
 8001430:	f002 ff64 	bl	80042fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001434:	2028      	movs	r0, #40	@ 0x28
 8001436:	f002 ff7b 	bl	8004330 <HAL_NVIC_EnableIRQ>

}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	48000800 	.word	0x48000800
 800144c:	48000400 	.word	0x48000400

08001450 <timer_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END Header_StartDefaultTask */

/* Start Out of Start DefaultTask */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <timer_callback+0x1a>
		/* Code here*/
		ReadADC_AVERAGE();
 8001462:	f000 f92f 	bl	80016c4 <ReadADC_AVERAGE>
		SentCMDVEL();
 8001466:	f000 f97b 	bl	8001760 <SentCMDVEL>
	}
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b0b2      	sub	sp, #200	@ 0xc8
 8001478:	af02      	add	r7, sp, #8
 800147a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close, cubemx_transport_write, cubemx_transport_read);
 800147e:	4b43      	ldr	r3, [pc, #268]	@ (800158c <StartDefaultTask+0x118>)
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <StartDefaultTask+0x11c>)
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <StartDefaultTask+0x120>)
 8001488:	4a43      	ldr	r2, [pc, #268]	@ (8001598 <StartDefaultTask+0x124>)
 800148a:	4944      	ldr	r1, [pc, #272]	@ (800159c <StartDefaultTask+0x128>)
 800148c:	2001      	movs	r0, #1
 800148e:	f00c f8ff 	bl	800d690 <rmw_uros_set_custom_transport>

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8001492:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001496:	4618      	mov	r0, r3
 8001498:	f00c f816 	bl	800d4c8 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800149c:	4b40      	ldr	r3, [pc, #256]	@ (80015a0 <StartDefaultTask+0x12c>)
 800149e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 80014a2:	4b40      	ldr	r3, [pc, #256]	@ (80015a4 <StartDefaultTask+0x130>)
 80014a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 80014a8:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <StartDefaultTask+0x134>)
 80014aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 80014ae:	4b3f      	ldr	r3, [pc, #252]	@ (80015ac <StartDefaultTask+0x138>)
 80014b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80014b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00c f813 	bl	800d4e4 <rcutils_set_default_allocator>
 80014be:	4603      	mov	r3, r0
 80014c0:	f083 0301 	eor.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 80014ca:	21ac      	movs	r1, #172	@ 0xac
 80014cc:	4838      	ldr	r0, [pc, #224]	@ (80015b0 <StartDefaultTask+0x13c>)
 80014ce:	f016 fb87 	bl	8017be0 <iprintf>
	}

	// micro-ROS app
	allocator = rcl_get_default_allocator();
 80014d2:	4c38      	ldr	r4, [pc, #224]	@ (80015b4 <StartDefaultTask+0x140>)
 80014d4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80014d8:	4618      	mov	r0, r3
 80014da:	f00c f821 	bl	800d520 <rcutils_get_default_allocator>
 80014de:	4625      	mov	r5, r4
 80014e0:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 80014ec:	f00a fee0 	bl	800c2b0 <rcl_get_zero_initialized_init_options>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a31      	ldr	r2, [pc, #196]	@ (80015b8 <StartDefaultTask+0x144>)
 80014f4:	6013      	str	r3, [r2, #0]
	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80014f6:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <StartDefaultTask+0x140>)
 80014f8:	466c      	mov	r4, sp
 80014fa:	f103 020c 	add.w	r2, r3, #12
 80014fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001502:	e884 0003 	stmia.w	r4, {r0, r1}
 8001506:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001508:	482b      	ldr	r0, [pc, #172]	@ (80015b8 <StartDefaultTask+0x144>)
 800150a:	f00a fed3 	bl	800c2b4 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 26)); //Set Domain ID
 800150e:	211a      	movs	r1, #26
 8001510:	4829      	ldr	r0, [pc, #164]	@ (80015b8 <StartDefaultTask+0x144>)
 8001512:	f00a ffcb 	bl	800c4ac <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(
 8001516:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <StartDefaultTask+0x140>)
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <StartDefaultTask+0x144>)
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	4826      	ldr	r0, [pc, #152]	@ (80015bc <StartDefaultTask+0x148>)
 8001522:	f00b fef5 	bl	800d310 <rclc_support_init_with_options>
			&init_options,
			&allocator
	);

	// create node
	rclc_node_init_default(
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <StartDefaultTask+0x148>)
 8001528:	4a25      	ldr	r2, [pc, #148]	@ (80015c0 <StartDefaultTask+0x14c>)
 800152a:	4926      	ldr	r1, [pc, #152]	@ (80015c4 <StartDefaultTask+0x150>)
 800152c:	4826      	ldr	r0, [pc, #152]	@ (80015c8 <StartDefaultTask+0x154>)
 800152e:	f00b ff23 	bl	800d378 <rclc_node_init_default>
			"",
			&support
	); //Node name

	// create cmd_vel publisher
	rclc_publisher_init_default(
 8001532:	f009 fba1 	bl	800ac78 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001536:	4602      	mov	r2, r0
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <StartDefaultTask+0x158>)
 800153a:	4923      	ldr	r1, [pc, #140]	@ (80015c8 <StartDefaultTask+0x154>)
 800153c:	4824      	ldr	r0, [pc, #144]	@ (80015d0 <StartDefaultTask+0x15c>)
 800153e:	f00b ff57 	bl	800d3f0 <rclc_publisher_init_default>
//			type_support, //Wait to change
//			"/Mode"
//	);

	// create Timer
	rclc_timer_init_default(
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <StartDefaultTask+0x160>)
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4a24      	ldr	r2, [pc, #144]	@ (80015d8 <StartDefaultTask+0x164>)
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	491b      	ldr	r1, [pc, #108]	@ (80015bc <StartDefaultTask+0x148>)
 800154e:	4823      	ldr	r0, [pc, #140]	@ (80015dc <StartDefaultTask+0x168>)
 8001550:	f00b ff82 	bl	800d458 <rclc_timer_init_default>
			RCL_MS_TO_NS(10),
			timer_callback
	);

	// create executer
	executor = rclc_executor_get_zero_initialized_executor();
 8001554:	4c22      	ldr	r4, [pc, #136]	@ (80015e0 <StartDefaultTask+0x16c>)
 8001556:	463b      	mov	r3, r7
 8001558:	4618      	mov	r0, r3
 800155a:	f00b fc07 	bl	800cd6c <rclc_executor_get_zero_initialized_executor>
 800155e:	4620      	mov	r0, r4
 8001560:	463b      	mov	r3, r7
 8001562:	2288      	movs	r2, #136	@ 0x88
 8001564:	4619      	mov	r1, r3
 8001566:	f016 fcf0 	bl	8017f4a <memcpy>
	rclc_executor_init(&executor, &support.context, 1, &allocator);
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <StartDefaultTask+0x140>)
 800156c:	2201      	movs	r2, #1
 800156e:	4913      	ldr	r1, [pc, #76]	@ (80015bc <StartDefaultTask+0x148>)
 8001570:	481b      	ldr	r0, [pc, #108]	@ (80015e0 <StartDefaultTask+0x16c>)
 8001572:	f00b fc05 	bl	800cd80 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 8001576:	4919      	ldr	r1, [pc, #100]	@ (80015dc <StartDefaultTask+0x168>)
 8001578:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <StartDefaultTask+0x16c>)
 800157a:	f00b fc71 	bl	800ce60 <rclc_executor_add_timer>
	rclc_executor_spin(&executor); //ต้องเรียกก่อนถึงจะเริ่มทำงาน
 800157e:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <StartDefaultTask+0x16c>)
 8001580:	f00b fe84 	bl	800d28c <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 8001584:	200a      	movs	r0, #10
 8001586:	f006 fea7 	bl	80082d8 <osDelay>
 800158a:	e7fb      	b.n	8001584 <StartDefaultTask+0x110>
 800158c:	080012a5 	.word	0x080012a5
 8001590:	08001241 	.word	0x08001241
 8001594:	08001221 	.word	0x08001221
 8001598:	080011f5 	.word	0x080011f5
 800159c:	20004998 	.word	0x20004998
 80015a0:	080019a9 	.word	0x080019a9
 80015a4:	080019ed 	.word	0x080019ed
 80015a8:	08001a25 	.word	0x08001a25
 80015ac:	08001a91 	.word	0x08001a91
 80015b0:	08018d1c 	.word	0x08018d1c
 80015b4:	200046b8 	.word	0x200046b8
 80015b8:	20004680 	.word	0x20004680
 80015bc:	20004684 	.word	0x20004684
 80015c0:	08018d44 	.word	0x08018d44
 80015c4:	08018d48 	.word	0x08018d48
 80015c8:	200046cc 	.word	0x200046cc
 80015cc:	08018d54 	.word	0x08018d54
 80015d0:	20004760 	.word	0x20004760
 80015d4:	08001451 	.word	0x08001451
 80015d8:	00989680 	.word	0x00989680
 80015dc:	20004798 	.word	0x20004798
 80015e0:	200046d8 	.word	0x200046d8

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fe41 	bl	800226e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f81e 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f7ff feac 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 80015f4:	f7ff fdc4 	bl	8001180 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80015f8:	f000 fd08 	bl	800200c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80015fc:	f7ff fa4c 	bl	8000a98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* Start Analog Read */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001600:	217f      	movs	r1, #127	@ 0x7f
 8001602:	4808      	ldr	r0, [pc, #32]	@ (8001624 <main+0x40>)
 8001604:	f002 fc26 	bl	8003e54 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 8001608:	22c8      	movs	r2, #200	@ 0xc8
 800160a:	4907      	ldr	r1, [pc, #28]	@ (8001628 <main+0x44>)
 800160c:	4805      	ldr	r0, [pc, #20]	@ (8001624 <main+0x40>)
 800160e:	f001 faa9 	bl	8002b64 <HAL_ADC_Start_DMA>
  /* End Analog Read */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001612:	f006 fd85 	bl	8008120 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001616:	f7ff fb51 	bl	8000cbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800161a:	f006 fda5 	bl	8008168 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800161e:	bf00      	nop
 8001620:	e7fd      	b.n	800161e <main+0x3a>
 8001622:	bf00      	nop
 8001624:	20000254 	.word	0x20000254
 8001628:	2000479c 	.word	0x2000479c

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0318 	add.w	r3, r7, #24
 8001636:	2238      	movs	r2, #56	@ 0x38
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f016 fbbc 	bl	8017db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800164e:	2000      	movs	r0, #0
 8001650:	f003 fb90 	bl	8004d74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165e:	2340      	movs	r3, #64	@ 0x40
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001662:	2302      	movs	r3, #2
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001666:	2302      	movs	r3, #2
 8001668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800166a:	2304      	movs	r3, #4
 800166c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800166e:	2355      	movs	r3, #85	@ 0x55
 8001670:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001672:	2302      	movs	r3, #2
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001676:	2302      	movs	r3, #2
 8001678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800167a:	2302      	movs	r3, #2
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fc2a 	bl	8004edc <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800168e:	f000 f985 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2303      	movs	r3, #3
 8001698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2104      	movs	r1, #4
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 ff28 	bl	8005500 <HAL_RCC_ClockConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016b6:	f000 f971 	bl	800199c <Error_Handler>
  }
}
 80016ba:	bf00      	nop
 80016bc:	3750      	adds	r7, #80	@ 0x50
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <ReadADC_AVERAGE>:

/* USER CODE BEGIN 4 */

void ReadADC_AVERAGE() {
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	e020      	b.n	800171a <ReadADC_AVERAGE+0x56>
		if (i % 2 == 0) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d108      	bne.n	80016f4 <ReadADC_AVERAGE+0x30>
			temp_1 += ADC_RawRead[i];
 80016e2:	4a1a      	ldr	r2, [pc, #104]	@ (800174c <ReadADC_AVERAGE+0x88>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e00f      	b.n	8001714 <ReadADC_AVERAGE+0x50>
		} else if (i % 2 == 1) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	bfb8      	it	lt
 80016fe:	425b      	neglt	r3, r3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <ReadADC_AVERAGE+0x50>
			temp_2 += ADC_RawRead[i];
 8001704:	4a11      	ldr	r2, [pc, #68]	@ (800174c <ReadADC_AVERAGE+0x88>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800170c:	461a      	mov	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4413      	add	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2bc7      	cmp	r3, #199	@ 0xc7
 800171e:	dddb      	ble.n	80016d8 <ReadADC_AVERAGE+0x14>
		}
	}
	x_axis = (temp_1 / 100);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <ReadADC_AVERAGE+0x8c>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <ReadADC_AVERAGE+0x90>)
 800172e:	801a      	strh	r2, [r3, #0]
	y_axis = (temp_2 / 100);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <ReadADC_AVERAGE+0x8c>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <ReadADC_AVERAGE+0x94>)
 800173e:	801a      	strh	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	2000479c 	.word	0x2000479c
 8001750:	51eb851f 	.word	0x51eb851f
 8001754:	2000492c 	.word	0x2000492c
 8001758:	2000492e 	.word	0x2000492e
 800175c:	00000000 	.word	0x00000000

08001760 <SentCMDVEL>:


void SentCMDVEL(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
	/* Call Velocity */
	float linearX_velocity = (y_axis - 2048) / 2048.0f;  // Normalize -1.0 to 1.0
 8001766:	4b74      	ldr	r3, [pc, #464]	@ (8001938 <SentCMDVEL+0x1d8>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001776:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800193c <SentCMDVEL+0x1dc>
 800177a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177e:	edc7 7a01 	vstr	s15, [r7, #4]
	float linearY_velocity = (x_axis - 2048) / 2048.0f; // Normalize -1.0 to 1.0
 8001782:	4b6f      	ldr	r3, [pc, #444]	@ (8001940 <SentCMDVEL+0x1e0>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 800193c <SentCMDVEL+0x1dc>
 8001796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179a:	edc7 7a00 	vstr	s15, [r7]

	/* Check DEADZONE*/
	if (fabs(linearX_velocity) < 0.025f) {
 800179e:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a2:	eef0 7ae7 	vabs.f32	s15, s15
 80017a6:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001944 <SentCMDVEL+0x1e4>
 80017aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	d502      	bpl.n	80017ba <SentCMDVEL+0x5a>
		linearX_velocity = 0.0f;
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
	}

	if (fabs(linearY_velocity) < 0.015f) {
 80017ba:	edd7 7a00 	vldr	s15, [r7]
 80017be:	eef0 7ae7 	vabs.f32	s15, s15
 80017c2:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001948 <SentCMDVEL+0x1e8>
 80017c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	d502      	bpl.n	80017d6 <SentCMDVEL+0x76>
		linearY_velocity = 0.0f;
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
	}

	/* Z button */
	aButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80017d6:	2120      	movs	r1, #32
 80017d8:	485c      	ldr	r0, [pc, #368]	@ (800194c <SentCMDVEL+0x1ec>)
 80017da:	f003 fa77 	bl	8004ccc <HAL_GPIO_ReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001950 <SentCMDVEL+0x1f0>)
 80017e4:	701a      	strb	r2, [r3, #0]
	cButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 80017e6:	2110      	movs	r1, #16
 80017e8:	4858      	ldr	r0, [pc, #352]	@ (800194c <SentCMDVEL+0x1ec>)
 80017ea:	f003 fa6f 	bl	8004ccc <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b58      	ldr	r3, [pc, #352]	@ (8001954 <SentCMDVEL+0x1f4>)
 80017f4:	701a      	strb	r2, [r3, #0]

	/* readbutton state */
	if (aButtonState == GPIO_PIN_RESET && aPrevButton == GPIO_PIN_SET) {
 80017f6:	4b56      	ldr	r3, [pc, #344]	@ (8001950 <SentCMDVEL+0x1f0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d12a      	bne.n	8001854 <SentCMDVEL+0xf4>
 80017fe:	4b56      	ldr	r3, [pc, #344]	@ (8001958 <SentCMDVEL+0x1f8>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d126      	bne.n	8001854 <SentCMDVEL+0xf4>
		linearZ_velocity += 0.1;
 8001806:	4b55      	ldr	r3, [pc, #340]	@ (800195c <SentCMDVEL+0x1fc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fed4 	bl	80005b8 <__aeabi_f2d>
 8001810:	a347      	add	r3, pc, #284	@ (adr r3, 8001930 <SentCMDVEL+0x1d0>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe fd71 	bl	80002fc <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7fe ff21 	bl	8000668 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	4a4c      	ldr	r2, [pc, #304]	@ (800195c <SentCMDVEL+0x1fc>)
 800182a:	6013      	str	r3, [r2, #0]
	    DEBUG_Count += 1;
 800182c:	4b4c      	ldr	r3, [pc, #304]	@ (8001960 <SentCMDVEL+0x200>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <SentCMDVEL+0x200>)
 8001836:	801a      	strh	r2, [r3, #0]
	    if (linearZ_velocity > 1.0f) linearZ_velocity = 1.0;
 8001838:	4b48      	ldr	r3, [pc, #288]	@ (800195c <SentCMDVEL+0x1fc>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd03      	ble.n	8001854 <SentCMDVEL+0xf4>
 800184c:	4b43      	ldr	r3, [pc, #268]	@ (800195c <SentCMDVEL+0x1fc>)
 800184e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001852:	601a      	str	r2, [r3, #0]
	}
	if (cButtonState == GPIO_PIN_RESET && cPrevButton == GPIO_PIN_SET) {
 8001854:	4b3f      	ldr	r3, [pc, #252]	@ (8001954 <SentCMDVEL+0x1f4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d129      	bne.n	80018b0 <SentCMDVEL+0x150>
 800185c:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <SentCMDVEL+0x204>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d125      	bne.n	80018b0 <SentCMDVEL+0x150>
		linearZ_velocity -= 0.1;
 8001864:	4b3d      	ldr	r3, [pc, #244]	@ (800195c <SentCMDVEL+0x1fc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fea5 	bl	80005b8 <__aeabi_f2d>
 800186e:	a330      	add	r3, pc, #192	@ (adr r3, 8001930 <SentCMDVEL+0x1d0>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fd40 	bl	80002f8 <__aeabi_dsub>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7fe fef2 	bl	8000668 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	4a35      	ldr	r2, [pc, #212]	@ (800195c <SentCMDVEL+0x1fc>)
 8001888:	6013      	str	r3, [r2, #0]
	    DEBUG_Count += 1;
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <SentCMDVEL+0x200>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <SentCMDVEL+0x200>)
 8001894:	801a      	strh	r2, [r3, #0]
	    if (linearZ_velocity < -1.0f) linearZ_velocity = -1.0;
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <SentCMDVEL+0x1fc>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d502      	bpl.n	80018b0 <SentCMDVEL+0x150>
 80018aa:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <SentCMDVEL+0x1fc>)
 80018ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001968 <SentCMDVEL+0x208>)
 80018ae:	601a      	str	r2, [r3, #0]
	}

	if (fabs(linearZ_velocity) < 0.001f) {
 80018b0:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <SentCMDVEL+0x1fc>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	eef0 7ae7 	vabs.f32	s15, s15
 80018ba:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800196c <SentCMDVEL+0x20c>
 80018be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	d503      	bpl.n	80018d0 <SentCMDVEL+0x170>
		linearZ_velocity = 0.0f;
 80018c8:	4b24      	ldr	r3, [pc, #144]	@ (800195c <SentCMDVEL+0x1fc>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(10);
 80018d0:	200a      	movs	r0, #10
 80018d2:	f000 fd03 	bl	80022dc <HAL_Delay>

	/* update button state */
	aPrevButton = aButtonState;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <SentCMDVEL+0x1f0>)
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <SentCMDVEL+0x1f8>)
 80018dc:	701a      	strb	r2, [r3, #0]
	cPrevButton = cButtonState;
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <SentCMDVEL+0x1f4>)
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <SentCMDVEL+0x204>)
 80018e4:	701a      	strb	r2, [r3, #0]

	twist_msg.linear.x = linearX_velocity;
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7fe fe66 	bl	80005b8 <__aeabi_f2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	491f      	ldr	r1, [pc, #124]	@ (8001970 <SentCMDVEL+0x210>)
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]
	twist_msg.linear.y = linearY_velocity;
 80018f6:	6838      	ldr	r0, [r7, #0]
 80018f8:	f7fe fe5e 	bl	80005b8 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	491b      	ldr	r1, [pc, #108]	@ (8001970 <SentCMDVEL+0x210>)
 8001902:	e9c1 2302 	strd	r2, r3, [r1, #8]
	twist_msg.linear.z = linearZ_velocity;
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <SentCMDVEL+0x1fc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe54 	bl	80005b8 <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4916      	ldr	r1, [pc, #88]	@ (8001970 <SentCMDVEL+0x210>)
 8001916:	e9c1 2304 	strd	r2, r3, [r1, #16]

	RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &twist_msg, NULL));
 800191a:	2200      	movs	r2, #0
 800191c:	4914      	ldr	r1, [pc, #80]	@ (8001970 <SentCMDVEL+0x210>)
 800191e:	4815      	ldr	r0, [pc, #84]	@ (8001974 <SentCMDVEL+0x214>)
 8001920:	f00a fe96 	bl	800c650 <rcl_publish>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	f3af 8000 	nop.w
 8001930:	9999999a 	.word	0x9999999a
 8001934:	3fb99999 	.word	0x3fb99999
 8001938:	2000492e 	.word	0x2000492e
 800193c:	45000000 	.word	0x45000000
 8001940:	2000492c 	.word	0x2000492c
 8001944:	3ccccccd 	.word	0x3ccccccd
 8001948:	3c75c28f 	.word	0x3c75c28f
 800194c:	48000800 	.word	0x48000800
 8001950:	20004934 	.word	0x20004934
 8001954:	20004935 	.word	0x20004935
 8001958:	20004936 	.word	0x20004936
 800195c:	20004930 	.word	0x20004930
 8001960:	20004938 	.word	0x20004938
 8001964:	20004937 	.word	0x20004937
 8001968:	bf800000 	.word	0xbf800000
 800196c:	3a83126f 	.word	0x3a83126f
 8001970:	20004768 	.word	0x20004768
 8001974:	20004760 	.word	0x20004760

08001978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800198a:	f000 fc89 	bl	80022a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40012c00 	.word	0x40012c00

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <Error_Handler+0x8>

080019a8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <microros_allocate+0x3c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <microros_allocate+0x3c>)
 80019c0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <microros_allocate+0x40>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <microros_allocate+0x40>)
 80019d0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff f984 	bl	8000ce0 <pvPortMallocMicroROS>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000493c 	.word	0x2000493c
 80019e8:	20004940 	.word	0x20004940

080019ec <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fa93 	bl	8000f28 <getBlockSize>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <microros_deallocate+0x34>)
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <microros_deallocate+0x34>)
 8001a0e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fa2d 	bl	8000e70 <vPortFreeMicroROS>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20004940 	.word	0x20004940

08001a24 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <microros_reallocate+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4413      	add	r3, r2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <microros_reallocate+0x64>)
 8001a3e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <microros_reallocate+0x68>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <microros_reallocate+0x68>)
 8001a4e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d104      	bne.n	8001a60 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f7ff f942 	bl	8000ce0 <pvPortMallocMicroROS>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	e00e      	b.n	8001a7e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff fa61 	bl	8000f28 <getBlockSize>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a08      	ldr	r2, [pc, #32]	@ (8001a8c <microros_reallocate+0x68>)
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <microros_reallocate+0x68>)
 8001a72:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fa74 	bl	8000f64 <pvPortReallocMicroROS>
 8001a7c:	4603      	mov	r3, r0
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000493c 	.word	0x2000493c
 8001a8c:	20004940 	.word	0x20004940

08001a90 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad8 <microros_zero_allocate+0x48>)
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <microros_zero_allocate+0x48>)
 8001aae:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <microros_zero_allocate+0x4c>)
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <microros_zero_allocate+0x4c>)
 8001ac2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fa79 	bl	8000fbe <pvPortCallocMicroROS>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000493c 	.word	0x2000493c
 8001adc:	20004940 	.word	0x20004940

08001ae0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af6:	a320      	add	r3, pc, #128	@ (adr r3, 8001b78 <UTILS_NanosecondsToTimespec+0x98>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fe04 	bl	8000708 <__aeabi_ldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001b0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b78 <UTILS_NanosecondsToTimespec+0x98>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fdf8 	bl	8000708 <__aeabi_ldivmod>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da20      	bge.n	8001b66 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <UTILS_NanosecondsToTimespec+0x90>)
 8001b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2e:	1712      	asrs	r2, r2, #28
 8001b30:	17db      	asrs	r3, r3, #31
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	6979      	ldr	r1, [r7, #20]
 8001b40:	17c8      	asrs	r0, r1, #31
 8001b42:	460c      	mov	r4, r1
 8001b44:	4605      	mov	r5, r0
 8001b46:	ebb2 0804 	subs.w	r8, r2, r4
 8001b4a:	eb63 0905 	sbc.w	r9, r3, r5
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	4906      	ldr	r1, [pc, #24]	@ (8001b74 <UTILS_NanosecondsToTimespec+0x94>)
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	609a      	str	r2, [r3, #8]
    }
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b70:	44b82fa1 	.word	0x44b82fa1
 8001b74:	3b9aca00 	.word	0x3b9aca00
 8001b78:	3b9aca00 	.word	0x3b9aca00
 8001b7c:	00000000 	.word	0x00000000

08001b80 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b08e      	sub	sp, #56	@ 0x38
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b8a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001b8c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b90:	2300      	movs	r3, #0
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f007 fe62 	bl	8009870 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bae:	17da      	asrs	r2, r3, #31
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	61fa      	str	r2, [r7, #28]
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	69b9      	ldr	r1, [r7, #24]
 8001bbe:	000b      	movs	r3, r1
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc8:	2200      	movs	r2, #0
 8001bca:	461c      	mov	r4, r3
 8001bcc:	4615      	mov	r5, r2
 8001bce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bd2:	1911      	adds	r1, r2, r4
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	416b      	adcs	r3, r5
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bde:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001be2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	f04f 0400 	mov.w	r4, #0
 8001bee:	f04f 0500 	mov.w	r5, #0
 8001bf2:	015d      	lsls	r5, r3, #5
 8001bf4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001bf8:	0154      	lsls	r4, r2, #5
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	ebb2 0800 	subs.w	r8, r2, r0
 8001c02:	eb63 0901 	sbc.w	r9, r3, r1
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c12:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c16:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001c1a:	4690      	mov	r8, r2
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	eb18 0a00 	adds.w	sl, r8, r0
 8001c22:	eb49 0b01 	adc.w	fp, r9, r1
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c32:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c36:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c3a:	ebb2 040a 	subs.w	r4, r2, sl
 8001c3e:	603c      	str	r4, [r7, #0]
 8001c40:	eb63 030b 	sbc.w	r3, r3, fp
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	181b      	adds	r3, r3, r0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	462b      	mov	r3, r5
 8001c52:	eb41 0303 	adc.w	r3, r1, r3
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c5e:	f7ff ff3f 	bl	8001ae0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3738      	adds	r7, #56	@ 0x38
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_MspInit+0x50>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7a:	4a11      	ldr	r2, [pc, #68]	@ (8001cc0 <HAL_MspInit+0x50>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_MspInit+0x50>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_MspInit+0x50>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc0 <HAL_MspInit+0x50>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_MspInit+0x50>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	210f      	movs	r1, #15
 8001caa:	f06f 0001 	mvn.w	r0, #1
 8001cae:	f002 fb25 	bl	80042fc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cb2:	f003 f903 	bl	8004ebc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	@ 0x30
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d88 <HAL_InitTick+0xc4>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d88 <HAL_InitTick+0xc4>)
 8001cda:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cde:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ce0:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <HAL_InitTick+0xc4>)
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cec:	f107 020c 	add.w	r2, r7, #12
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fdd8 	bl	80058ac <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cfc:	f003 fdc0 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 8001d00:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <HAL_InitTick+0xc8>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d12:	4a20      	ldr	r2, [pc, #128]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d1c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001d30:	4817      	ldr	r0, [pc, #92]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d32:	f004 f881 	bl	8005e38 <HAL_TIM_Base_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11b      	bne.n	8001d7c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d44:	4812      	ldr	r0, [pc, #72]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d46:	f004 f8d9 	bl	8005efc <HAL_TIM_Base_Start_IT>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d111      	bne.n	8001d7c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d58:	2019      	movs	r0, #25
 8001d5a:	f002 fae9 	bl	8004330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d808      	bhi.n	8001d76 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	2019      	movs	r0, #25
 8001d6a:	f002 fac7 	bl	80042fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_InitTick+0xd4>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e002      	b.n	8001d7c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3730      	adds	r7, #48	@ 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	431bde83 	.word	0x431bde83
 8001d90:	20004944 	.word	0x20004944
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	20000008 	.word	0x20000008

08001d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <NMI_Handler+0x4>

08001da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <MemManage_Handler+0x4>

08001db4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <DMA1_Channel1_IRQHandler+0x10>)
 8001dda:	f002 fc9a 	bl	8004712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20004a2c 	.word	0x20004a2c

08001de8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <DMA1_Channel2_IRQHandler+0x10>)
 8001dee:	f002 fc90 	bl	8004712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20004a8c 	.word	0x20004a8c

08001dfc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <DMA1_Channel3_IRQHandler+0x10>)
 8001e02:	f002 fc86 	bl	8004712 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002c0 	.word	0x200002c0

08001e10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <ADC1_2_IRQHandler+0x10>)
 8001e16:	f000 ff79 	bl	8002d0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000254 	.word	0x20000254

08001e24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e28:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e2a:	f004 f8df 	bl	8005fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20004944 	.word	0x20004944

08001e38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e3c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e40:	f002 ff74 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <LPUART1_IRQHandler+0x10>)
 8001e4e:	f004 fcf1 	bl	8006834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20004998 	.word	0x20004998

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e76:	f016 f833 	bl	8017ee0 <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e9e:	bf00      	nop
 8001ea0:	e7fd      	b.n	8001e9e <_exit+0x12>

08001ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e00a      	b.n	8001eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	4601      	mov	r1, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <_read+0x12>
  }

  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e009      	b.n	8001f02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60ba      	str	r2, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbf1      	blt.n	8001eee <_write+0x12>
  }
  return len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_close>:

int _close(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_isatty>:

int _isatty(int file)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f015 ff98 	bl	8017ee0 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20020000 	.word	0x20020000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	20004994 	.word	0x20004994
 8001fe4:	2000b098 	.word	0x2000b098

08001fe8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002012:	4a22      	ldr	r2, [pc, #136]	@ (800209c <MX_LPUART1_UART_Init+0x90>)
 8002014:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203c:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800204e:	4812      	ldr	r0, [pc, #72]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002050:	f004 fa3e 	bl	80064d0 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800205a:	f7ff fc9f 	bl	800199c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205e:	2100      	movs	r1, #0
 8002060:	480d      	ldr	r0, [pc, #52]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002062:	f005 ff4e 	bl	8007f02 <HAL_UARTEx_SetTxFifoThreshold>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800206c:	f7ff fc96 	bl	800199c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002070:	2100      	movs	r1, #0
 8002072:	4809      	ldr	r0, [pc, #36]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002074:	f005 ff83 	bl	8007f7e <HAL_UARTEx_SetRxFifoThreshold>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800207e:	f7ff fc8d 	bl	800199c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	@ (8002098 <MX_LPUART1_UART_Init+0x8c>)
 8002084:	f005 ff04 	bl	8007e90 <HAL_UARTEx_DisableFifoMode>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800208e:	f7ff fc85 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20004998 	.word	0x20004998
 800209c:	40008000 	.word	0x40008000

080020a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09e      	sub	sp, #120	@ 0x78
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2254      	movs	r2, #84	@ 0x54
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f015 fe79 	bl	8017db8 <memset>
  if(uartHandle->Instance==LPUART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002204 <HAL_UART_MspInit+0x164>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f040 8094 	bne.w	80021fa <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020d2:	2320      	movs	r3, #32
 80020d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fc5c 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020ea:	f7ff fc57 	bl	800199c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80020f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f2:	4a45      	ldr	r2, [pc, #276]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_UART_MspInit+0x168>)
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	4b40      	ldr	r3, [pc, #256]	@ (8002208 <HAL_UART_MspInit+0x168>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	4a3f      	ldr	r2, [pc, #252]	@ (8002208 <HAL_UART_MspInit+0x168>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_UART_MspInit+0x168>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800211e:	230c      	movs	r3, #12
 8002120:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800212e:	230c      	movs	r3, #12
 8002130:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213c:	f002 fc44 	bl	80049c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002140:	4b32      	ldr	r3, [pc, #200]	@ (800220c <HAL_UART_MspInit+0x16c>)
 8002142:	4a33      	ldr	r2, [pc, #204]	@ (8002210 <HAL_UART_MspInit+0x170>)
 8002144:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002146:	4b31      	ldr	r3, [pc, #196]	@ (800220c <HAL_UART_MspInit+0x16c>)
 8002148:	2222      	movs	r2, #34	@ 0x22
 800214a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800214c:	4b2f      	ldr	r3, [pc, #188]	@ (800220c <HAL_UART_MspInit+0x16c>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002152:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <HAL_UART_MspInit+0x16c>)
 8002154:	2200      	movs	r2, #0
 8002156:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_UART_MspInit+0x16c>)
 800215a:	2280      	movs	r2, #128	@ 0x80
 800215c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215e:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <HAL_UART_MspInit+0x16c>)
 8002160:	2200      	movs	r2, #0
 8002162:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002164:	4b29      	ldr	r3, [pc, #164]	@ (800220c <HAL_UART_MspInit+0x16c>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800216a:	4b28      	ldr	r3, [pc, #160]	@ (800220c <HAL_UART_MspInit+0x16c>)
 800216c:	2220      	movs	r2, #32
 800216e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002170:	4b26      	ldr	r3, [pc, #152]	@ (800220c <HAL_UART_MspInit+0x16c>)
 8002172:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002176:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002178:	4824      	ldr	r0, [pc, #144]	@ (800220c <HAL_UART_MspInit+0x16c>)
 800217a:	f002 f8e7 	bl	800434c <HAL_DMA_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002184:	f7ff fc0a 	bl	800199c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_UART_MspInit+0x16c>)
 800218c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002190:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <HAL_UART_MspInit+0x16c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002196:	4b1f      	ldr	r3, [pc, #124]	@ (8002214 <HAL_UART_MspInit+0x174>)
 8002198:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_UART_MspInit+0x178>)
 800219a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_UART_MspInit+0x174>)
 800219e:	2223      	movs	r2, #35	@ 0x23
 80021a0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021a4:	2210      	movs	r2, #16
 80021a6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b4:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80021c0:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021c8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80021cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80021ce:	4811      	ldr	r0, [pc, #68]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021d0:	f002 f8bc 	bl	800434c <HAL_DMA_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80021da:	f7ff fbdf 	bl	800199c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002214 <HAL_UART_MspInit+0x174>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2105      	movs	r1, #5
 80021ee:	205b      	movs	r0, #91	@ 0x5b
 80021f0:	f002 f884 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80021f4:	205b      	movs	r0, #91	@ 0x5b
 80021f6:	f002 f89b 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3778      	adds	r7, #120	@ 0x78
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40008000 	.word	0x40008000
 8002208:	40021000 	.word	0x40021000
 800220c:	20004a2c 	.word	0x20004a2c
 8002210:	40020008 	.word	0x40020008
 8002214:	20004a8c 	.word	0x20004a8c
 8002218:	4002001c 	.word	0x4002001c

0800221c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800221c:	480d      	ldr	r0, [pc, #52]	@ (8002254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800221e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002220:	f7ff fee2 	bl	8001fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480c      	ldr	r0, [pc, #48]	@ (8002258 <LoopForever+0x6>)
  ldr r1, =_edata
 8002226:	490d      	ldr	r1, [pc, #52]	@ (800225c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002228:	4a0d      	ldr	r2, [pc, #52]	@ (8002260 <LoopForever+0xe>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800223c:	4c0a      	ldr	r4, [pc, #40]	@ (8002268 <LoopForever+0x16>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224a:	f015 fe4f 	bl	8017eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800224e:	f7ff f9c9 	bl	80015e4 <main>

08002252 <LoopForever>:

LoopForever:
    b LoopForever
 8002252:	e7fe      	b.n	8002252 <LoopForever>
  ldr   r0, =_estack
 8002254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002260:	08019adc 	.word	0x08019adc
  ldr r2, =_sbss
 8002264:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002268:	2000b098 	.word	0x2000b098

0800226c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC3_IRQHandler>

0800226e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f002 f834 	bl	80042e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227e:	200f      	movs	r0, #15
 8002280:	f7ff fd20 	bl	8001cc4 <HAL_InitTick>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	71fb      	strb	r3, [r7, #7]
 800228e:	e001      	b.n	8002294 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002290:	f7ff fcee 	bl	8001c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002294:	79fb      	ldrb	r3, [r7, #7]

}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <HAL_IncTick+0x1c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_IncTick+0x20>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a03      	ldr	r2, [pc, #12]	@ (80022bc <HAL_IncTick+0x1c>)
 80022b0:	6013      	str	r3, [r2, #0]
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	20004aec 	.word	0x20004aec
 80022c0:	2000000c 	.word	0x2000000c

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20004aec 	.word	0x20004aec

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022f4:	d004      	beq.n	8002300 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_Delay+0x40>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4413      	add	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002300:	bf00      	nop
 8002302:	f7ff ffdf 	bl	80022c4 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	429a      	cmp	r2, r3
 8002310:	d8f7      	bhi.n	8002302 <HAL_Delay+0x26>
  {
  }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000000c 	.word	0x2000000c

08002320 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3360      	adds	r3, #96	@ 0x60
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <LL_ADC_SetOffset+0x44>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	03fff000 	.word	0x03fff000

080023d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3360      	adds	r3, #96	@ 0x60
 80023de:	461a      	mov	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3360      	adds	r3, #96	@ 0x60
 800240c:	461a      	mov	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	431a      	orrs	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002432:	b480      	push	{r7}
 8002434:	b087      	sub	sp, #28
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3360      	adds	r3, #96	@ 0x60
 8002442:	461a      	mov	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	431a      	orrs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3360      	adds	r3, #96	@ 0x60
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	431a      	orrs	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	615a      	str	r2, [r3, #20]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b087      	sub	sp, #28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3330      	adds	r3, #48	@ 0x30
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	4413      	add	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	211f      	movs	r1, #31
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	f003 011f 	and.w	r1, r3, #31
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	431a      	orrs	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3314      	adds	r3, #20
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	0e5b      	lsrs	r3, r3, #25
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0d1b      	lsrs	r3, r3, #20
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2107      	movs	r1, #7
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	401a      	ands	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0d1b      	lsrs	r3, r3, #20
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0318 	and.w	r3, r3, #24
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025e4:	40d9      	lsrs	r1, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	400b      	ands	r3, r1
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	431a      	orrs	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	0007ffff 	.word	0x0007ffff

08002608 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 031f 	and.w	r3, r3, #31
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002650:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6093      	str	r3, [r2, #8]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002678:	d101      	bne.n	800267e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800269c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026c8:	d101      	bne.n	80026ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002714:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002718:	f043 0202 	orr.w	r2, r3, #2
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <LL_ADC_IsEnabled+0x18>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <LL_ADC_IsEnabled+0x1a>
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b02      	cmp	r3, #2
 8002764:	d101      	bne.n	800276a <LL_ADC_IsDisableOngoing+0x18>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <LL_ADC_IsDisableOngoing+0x1a>
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800278c:	f043 0204 	orr.w	r2, r3, #4
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d101      	bne.n	80027b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d101      	bne.n	80027de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1a9      	b.n	8002b5a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7fe f9c7 	bl	8000ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff19 	bl	8002664 <LL_ADC_IsDeepPowerDownEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff feff 	bl	8002640 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff34 	bl	80026b4 <LL_ADC_IsInternalRegulatorEnabled>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff18 	bl	800268c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800285c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ad0 <HAL_ADC_Init+0x2e4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	4a9c      	ldr	r2, [pc, #624]	@ (8002ad4 <HAL_ADC_Init+0x2e8>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002870:	e002      	b.n	8002878 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b01      	subs	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff16 	bl	80026b4 <LL_ADC_IsInternalRegulatorEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff76 	bl	80027a0 <LL_ADC_REG_IsConversionOngoing>
 80028b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 8142 	bne.w	8002b48 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 813e 	bne.w	8002b48 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff23 	bl	800272c <LL_ADC_IsEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d141      	bne.n	8002970 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f4:	d004      	beq.n	8002900 <HAL_ADC_Init+0x114>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a77      	ldr	r2, [pc, #476]	@ (8002ad8 <HAL_ADC_Init+0x2ec>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10f      	bne.n	8002920 <HAL_ADC_Init+0x134>
 8002900:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002904:	f7ff ff12 	bl	800272c <LL_ADC_IsEnabled>
 8002908:	4604      	mov	r4, r0
 800290a:	4873      	ldr	r0, [pc, #460]	@ (8002ad8 <HAL_ADC_Init+0x2ec>)
 800290c:	f7ff ff0e 	bl	800272c <LL_ADC_IsEnabled>
 8002910:	4603      	mov	r3, r0
 8002912:	4323      	orrs	r3, r4
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_ADC_Init+0x15a>
 8002920:	486e      	ldr	r0, [pc, #440]	@ (8002adc <HAL_ADC_Init+0x2f0>)
 8002922:	f7ff ff03 	bl	800272c <LL_ADC_IsEnabled>
 8002926:	4604      	mov	r4, r0
 8002928:	486d      	ldr	r0, [pc, #436]	@ (8002ae0 <HAL_ADC_Init+0x2f4>)
 800292a:	f7ff feff 	bl	800272c <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	431c      	orrs	r4, r3
 8002932:	486c      	ldr	r0, [pc, #432]	@ (8002ae4 <HAL_ADC_Init+0x2f8>)
 8002934:	f7ff fefa 	bl	800272c <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	4323      	orrs	r3, r4
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002952:	d004      	beq.n	800295e <HAL_ADC_Init+0x172>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5f      	ldr	r2, [pc, #380]	@ (8002ad8 <HAL_ADC_Init+0x2ec>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_ADC_Init+0x176>
 800295e:	4a62      	ldr	r2, [pc, #392]	@ (8002ae8 <HAL_ADC_Init+0x2fc>)
 8002960:	e000      	b.n	8002964 <HAL_ADC_Init+0x178>
 8002962:	4a62      	ldr	r2, [pc, #392]	@ (8002aec <HAL_ADC_Init+0x300>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f7ff fcd8 	bl	8002320 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7f5b      	ldrb	r3, [r3, #29]
 8002974:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800297a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002980:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002986:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800298e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	045b      	lsls	r3, r3, #17
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	4b48      	ldr	r3, [pc, #288]	@ (8002af0 <HAL_ADC_Init+0x304>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	430b      	orrs	r3, r1
 80029da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fee5 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 80029fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d17f      	bne.n	8002b04 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d17c      	bne.n	8002b04 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a0e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a16:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a26:	f023 0302 	bic.w	r3, r3, #2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	69b9      	ldr	r1, [r7, #24]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6911      	ldr	r1, [r2, #16]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a6a:	e013      	b.n	8002a94 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a90:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d12a      	bne.n	8002af4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ab4:	4311      	orrs	r1, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e019      	b.n	8002b04 <HAL_ADC_Init+0x318>
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	053e2d63 	.word	0x053e2d63
 8002ad8:	50000100 	.word	0x50000100
 8002adc:	50000400 	.word	0x50000400
 8002ae0:	50000500 	.word	0x50000500
 8002ae4:	50000600 	.word	0x50000600
 8002ae8:	50000300 	.word	0x50000300
 8002aec:	50000700 	.word	0x50000700
 8002af0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10c      	bne.n	8002b26 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f023 010f 	bic.w	r1, r3, #15
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	1e5a      	subs	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b24:	e007      	b.n	8002b36 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 020f 	bic.w	r2, r2, #15
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b46:	e007      	b.n	8002b58 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	@ 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	bf00      	nop

08002b64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_Start_DMA+0x20>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce8 <HAL_ADC_Start_DMA+0x184>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_Start_DMA+0x24>
 8002b84:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <HAL_ADC_Start_DMA+0x188>)
 8002b86:	e000      	b.n	8002b8a <HAL_ADC_Start_DMA+0x26>
 8002b88:	4b59      	ldr	r3, [pc, #356]	@ (8002cf0 <HAL_ADC_Start_DMA+0x18c>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fd3c 	bl	8002608 <LL_ADC_GetMultimode>
 8002b90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe02 	bl	80027a0 <LL_ADC_REG_IsConversionOngoing>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 809b 	bne.w	8002cda <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_Start_DMA+0x4e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e096      	b.n	8002ce0 <HAL_ADC_Start_DMA+0x17c>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf4 <HAL_ADC_Start_DMA+0x190>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d008      	beq.n	8002bd6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d002      	beq.n	8002bd6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b09      	cmp	r3, #9
 8002bd4:	d17a      	bne.n	8002ccc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 ff60 	bl	8003a9c <ADC_Enable>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d16d      	bne.n	8002cc2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce8 <HAL_ADC_Start_DMA+0x184>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_ADC_Start_DMA+0xb4>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3b      	ldr	r2, [pc, #236]	@ (8002cf8 <HAL_ADC_Start_DMA+0x194>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d002      	beq.n	8002c14 <HAL_ADC_Start_DMA+0xb0>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	e003      	b.n	8002c1c <HAL_ADC_Start_DMA+0xb8>
 8002c14:	4b39      	ldr	r3, [pc, #228]	@ (8002cfc <HAL_ADC_Start_DMA+0x198>)
 8002c16:	e001      	b.n	8002c1c <HAL_ADC_Start_DMA+0xb8>
 8002c18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d002      	beq.n	8002c2a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c46:	f023 0206 	bic.w	r2, r3, #6
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c4e:	e002      	b.n	8002c56 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	4a29      	ldr	r2, [pc, #164]	@ (8002d00 <HAL_ADC_Start_DMA+0x19c>)
 8002c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	4a28      	ldr	r2, [pc, #160]	@ (8002d04 <HAL_ADC_Start_DMA+0x1a0>)
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <HAL_ADC_Start_DMA+0x1a4>)
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	221c      	movs	r2, #28
 8002c74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0210 	orr.w	r2, r2, #16
 8002c8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3340      	adds	r3, #64	@ 0x40
 8002ca8:	4619      	mov	r1, r3
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f001 fbf5 	bl	800449c <HAL_DMA_Start_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fd5c 	bl	8002778 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002cc0:	e00d      	b.n	8002cde <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002cca:	e008      	b.n	8002cde <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002cd8:	e001      	b.n	8002cde <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	50000100 	.word	0x50000100
 8002cec:	50000300 	.word	0x50000300
 8002cf0:	50000700 	.word	0x50000700
 8002cf4:	50000600 	.word	0x50000600
 8002cf8:	50000500 	.word	0x50000500
 8002cfc:	50000400 	.word	0x50000400
 8002d00:	08003c87 	.word	0x08003c87
 8002d04:	08003d5f 	.word	0x08003d5f
 8002d08:	08003d7b 	.word	0x08003d7b

08002d0c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	@ 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d30:	d004      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x30>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a8e      	ldr	r2, [pc, #568]	@ (8002f70 <HAL_ADC_IRQHandler+0x264>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_IRQHandler+0x34>
 8002d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f74 <HAL_ADC_IRQHandler+0x268>)
 8002d3e:	e000      	b.n	8002d42 <HAL_ADC_IRQHandler+0x36>
 8002d40:	4b8d      	ldr	r3, [pc, #564]	@ (8002f78 <HAL_ADC_IRQHandler+0x26c>)
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fc60 	bl	8002608 <LL_ADC_GetMultimode>
 8002d48:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d017      	beq.n	8002d84 <HAL_ADC_IRQHandler+0x78>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f001 f8f6 	bl	8003f68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x8c>
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8094 	beq.w	8002ecc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 808e 	beq.w	8002ecc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fb79 	bl	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d072      	beq.n	8002ebe <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a64      	ldr	r2, [pc, #400]	@ (8002f70 <HAL_ADC_IRQHandler+0x264>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_ADC_IRQHandler+0xea>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a65      	ldr	r2, [pc, #404]	@ (8002f7c <HAL_ADC_IRQHandler+0x270>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d002      	beq.n	8002df2 <HAL_ADC_IRQHandler+0xe6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	e003      	b.n	8002dfa <HAL_ADC_IRQHandler+0xee>
 8002df2:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <HAL_ADC_IRQHandler+0x274>)
 8002df4:	e001      	b.n	8002dfa <HAL_ADC_IRQHandler+0xee>
 8002df6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d008      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d002      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	d104      	bne.n	8002e1e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	623b      	str	r3, [r7, #32]
 8002e1c:	e014      	b.n	8002e48 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a53      	ldr	r2, [pc, #332]	@ (8002f70 <HAL_ADC_IRQHandler+0x264>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_ADC_IRQHandler+0x130>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a53      	ldr	r2, [pc, #332]	@ (8002f7c <HAL_ADC_IRQHandler+0x270>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d002      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x12c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	e003      	b.n	8002e40 <HAL_ADC_IRQHandler+0x134>
 8002e38:	4b51      	ldr	r3, [pc, #324]	@ (8002f80 <HAL_ADC_IRQHandler+0x274>)
 8002e3a:	e001      	b.n	8002e40 <HAL_ADC_IRQHandler+0x134>
 8002e3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e40:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d135      	bne.n	8002ebe <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d12e      	bne.n	8002ebe <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fc9b 	bl	80027a0 <LL_ADC_REG_IsConversionOngoing>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11a      	bne.n	8002ea6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 020c 	bic.w	r2, r2, #12
 8002e7e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d112      	bne.n	8002ebe <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ea4:	e00b      	b.n	8002ebe <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f984 	bl	80031cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	220c      	movs	r2, #12
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x1d4>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80b3 	beq.w	8003052 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80ad 	beq.w	8003052 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fb14 	bl	8002542 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f1a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff facf 	bl	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f26:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a10      	ldr	r2, [pc, #64]	@ (8002f70 <HAL_ADC_IRQHandler+0x264>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_ADC_IRQHandler+0x23a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a11      	ldr	r2, [pc, #68]	@ (8002f7c <HAL_ADC_IRQHandler+0x270>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d002      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x236>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	e003      	b.n	8002f4a <HAL_ADC_IRQHandler+0x23e>
 8002f42:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <HAL_ADC_IRQHandler+0x274>)
 8002f44:	e001      	b.n	8002f4a <HAL_ADC_IRQHandler+0x23e>
 8002f46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d008      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d002      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d10f      	bne.n	8002f84 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	623b      	str	r3, [r7, #32]
 8002f6c:	e01f      	b.n	8002fae <HAL_ADC_IRQHandler+0x2a2>
 8002f6e:	bf00      	nop
 8002f70:	50000100 	.word	0x50000100
 8002f74:	50000300 	.word	0x50000300
 8002f78:	50000700 	.word	0x50000700
 8002f7c:	50000500 	.word	0x50000500
 8002f80:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a8b      	ldr	r2, [pc, #556]	@ (80031b8 <HAL_ADC_IRQHandler+0x4ac>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_ADC_IRQHandler+0x296>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a8a      	ldr	r2, [pc, #552]	@ (80031bc <HAL_ADC_IRQHandler+0x4b0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d002      	beq.n	8002f9e <HAL_ADC_IRQHandler+0x292>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	e003      	b.n	8002fa6 <HAL_ADC_IRQHandler+0x29a>
 8002f9e:	4b88      	ldr	r3, [pc, #544]	@ (80031c0 <HAL_ADC_IRQHandler+0x4b4>)
 8002fa0:	e001      	b.n	8002fa6 <HAL_ADC_IRQHandler+0x29a>
 8002fa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fa6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d047      	beq.n	8003044 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_ADC_IRQHandler+0x2c2>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d03f      	beq.n	8003044 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d13a      	bne.n	8003044 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	d133      	bne.n	8003044 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d12e      	bne.n	8003044 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fbeb 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11a      	bne.n	800302c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003004:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d112      	bne.n	8003044 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	65da      	str	r2, [r3, #92]	@ 0x5c
 800302a:	e00b      	b.n	8003044 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	f043 0210 	orr.w	r2, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 ff67 	bl	8003f18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2260      	movs	r2, #96	@ 0x60
 8003050:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d011      	beq.n	8003080 <HAL_ADC_IRQHandler+0x374>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00c      	beq.n	8003080 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8be 	bl	80031f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2280      	movs	r2, #128	@ 0x80
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d012      	beq.n	80030b0 <HAL_ADC_IRQHandler+0x3a4>
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00d      	beq.n	80030b0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 ff4d 	bl	8003f40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <HAL_ADC_IRQHandler+0x3d4>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 ff3f 	bl	8003f54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d043      	beq.n	8003172 <HAL_ADC_IRQHandler+0x466>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d03e      	beq.n	8003172 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80030fc:	2301      	movs	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003100:	e021      	b.n	8003146 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003110:	d004      	beq.n	800311c <HAL_ADC_IRQHandler+0x410>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <HAL_ADC_IRQHandler+0x4ac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_ADC_IRQHandler+0x414>
 800311c:	4b29      	ldr	r3, [pc, #164]	@ (80031c4 <HAL_ADC_IRQHandler+0x4b8>)
 800311e:	e000      	b.n	8003122 <HAL_ADC_IRQHandler+0x416>
 8003120:	4b29      	ldr	r3, [pc, #164]	@ (80031c8 <HAL_ADC_IRQHandler+0x4bc>)
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fa7e 	bl	8002624 <LL_ADC_GetMultiDMATransfer>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800312e:	2301      	movs	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
 8003132:	e008      	b.n	8003146 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10e      	bne.n	800316a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315c:	f043 0202 	orr.w	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f84f 	bl	8003208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2210      	movs	r2, #16
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d018      	beq.n	80031ae <HAL_ADC_IRQHandler+0x4a2>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d013      	beq.n	80031ae <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003196:	f043 0208 	orr.w	r2, r3, #8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031a6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 febf 	bl	8003f2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031ae:	bf00      	nop
 80031b0:	3728      	adds	r7, #40	@ 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	50000100 	.word	0x50000100
 80031bc:	50000500 	.word	0x50000500
 80031c0:	50000400 	.word	0x50000400
 80031c4:	50000300 	.word	0x50000300
 80031c8:	50000700 	.word	0x50000700

080031cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b0b6      	sub	sp, #216	@ 0xd8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x24>
 800323a:	2302      	movs	r3, #2
 800323c:	f000 bc13 	b.w	8003a66 <HAL_ADC_ConfigChannel+0x84a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff faa7 	bl	80027a0 <LL_ADC_REG_IsConversionOngoing>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 83f3 	bne.w	8003a40 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f7ff f93f 	bl	80024ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fa95 	bl	80027a0 <LL_ADC_REG_IsConversionOngoing>
 8003276:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff faa1 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8003284:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003288:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800328c:	2b00      	cmp	r3, #0
 800328e:	f040 81d9 	bne.w	8003644 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003292:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 81d4 	bne.w	8003644 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032a4:	d10f      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7ff f959 	bl	8002568 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f8ed 	bl	800249e <LL_ADC_SetSamplingTimeCommonConfig>
 80032c4:	e00e      	b.n	80032e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f7ff f948 	bl	8002568 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f8dd 	bl	800249e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b04      	cmp	r3, #4
 8003304:	d022      	beq.n	800334c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6919      	ldr	r1, [r3, #16]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003316:	f7ff f837 	bl	8002388 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	461a      	mov	r2, r3
 8003328:	f7ff f883 	bl	8002432 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003338:	2b01      	cmp	r3, #1
 800333a:	d102      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x126>
 800333c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003340:	e000      	b.n	8003344 <HAL_ADC_ConfigChannel+0x128>
 8003342:	2300      	movs	r3, #0
 8003344:	461a      	mov	r2, r3
 8003346:	f7ff f88f 	bl	8002468 <LL_ADC_SetOffsetSaturation>
 800334a:	e17b      	b.n	8003644 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f83c 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 8003358:	4603      	mov	r3, r0
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x15c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f831 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	f003 021f 	and.w	r2, r3, #31
 8003376:	e01e      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x19a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f826 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800339a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800339e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e004      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80033aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x1b2>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	0e9b      	lsrs	r3, r3, #26
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	e018      	b.n	8003400 <HAL_ADC_ConfigChannel+0x1e4>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80033e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80033ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80033f2:	2320      	movs	r3, #32
 80033f4:	e004      	b.n	8003400 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80033f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003400:	429a      	cmp	r2, r3
 8003402:	d106      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe fff5 	bl	80023fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe ffd9 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 800341e:	4603      	mov	r3, r0
 8003420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_ADC_ConfigChannel+0x222>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe ffce 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	e01e      	b.n	800347c <HAL_ADC_ConfigChannel+0x260>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe ffc3 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800345c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003460:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e004      	b.n	800347a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x278>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	e018      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x2aa>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80034a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80034b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e004      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80034bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d106      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe ff92 	bl	80023fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2102      	movs	r1, #2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe ff76 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x2e8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe ff6b 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	f003 021f 	and.w	r2, r3, #31
 8003502:	e01e      	b.n	8003542 <HAL_ADC_ConfigChannel+0x326>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe ff60 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003522:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800352a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e004      	b.n	8003540 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003536:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <HAL_ADC_ConfigChannel+0x33e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	0e9b      	lsrs	r3, r3, #26
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	e016      	b.n	8003588 <HAL_ADC_ConfigChannel+0x36c>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800356c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800356e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003572:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800357a:	2320      	movs	r3, #32
 800357c:	e004      	b.n	8003588 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800357e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003588:	429a      	cmp	r2, r3
 800358a:	d106      	bne.n	800359a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	2102      	movs	r1, #2
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe ff31 	bl	80023fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2103      	movs	r1, #3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe ff15 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x3aa>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2103      	movs	r1, #3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe ff0a 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	e017      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x3da>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2103      	movs	r1, #3
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe feff 	bl	80023d0 <LL_ADC_GetOffsetChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80035e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80035ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_ADC_ConfigChannel+0x3f2>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	e011      	b.n	8003632 <HAL_ADC_ConfigChannel+0x416>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800361c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800361e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003626:	2320      	movs	r3, #32
 8003628:	e003      	b.n	8003632 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800362a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003632:	429a      	cmp	r2, r3
 8003634:	d106      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	2103      	movs	r1, #3
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fedc 	bl	80023fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f86f 	bl	800272c <LL_ADC_IsEnabled>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 813d 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f7fe ffac 	bl	80025c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4aa2      	ldr	r2, [pc, #648]	@ (80038f8 <HAL_ADC_ConfigChannel+0x6dc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f040 812e 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10b      	bne.n	800369c <HAL_ADC_ConfigChannel+0x480>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2b09      	cmp	r3, #9
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e019      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x4b4>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80036aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80036ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80036b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2b09      	cmp	r3, #9
 80036c8:	bf94      	ite	ls
 80036ca:	2301      	movls	r3, #1
 80036cc:	2300      	movhi	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d079      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x4d4>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	069b      	lsls	r3, r3, #26
 80036ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ee:	e015      	b.n	800371c <HAL_ADC_ConfigChannel+0x500>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003700:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003708:	2320      	movs	r3, #32
 800370a:	e003      	b.n	8003714 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3301      	adds	r3, #1
 8003716:	069b      	lsls	r3, r3, #26
 8003718:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_ADC_ConfigChannel+0x520>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0e9b      	lsrs	r3, r3, #26
 800372e:	3301      	adds	r3, #1
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	e017      	b.n	800376c <HAL_ADC_ConfigChannel+0x550>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800374a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800374c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800374e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e003      	b.n	8003760 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2101      	movs	r1, #1
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	ea42 0103 	orr.w	r1, r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x576>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	3301      	adds	r3, #1
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	051b      	lsls	r3, r3, #20
 8003790:	e018      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x5a8>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80037a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80037aa:	2320      	movs	r3, #32
 80037ac:	e003      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80037ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3301      	adds	r3, #1
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c4:	430b      	orrs	r3, r1
 80037c6:	e07e      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x5c8>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	3301      	adds	r3, #1
 80037dc:	069b      	lsls	r3, r3, #26
 80037de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037e2:	e015      	b.n	8003810 <HAL_ADC_ConfigChannel+0x5f4>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	069b      	lsls	r3, r3, #26
 800380c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x614>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0e9b      	lsrs	r3, r3, #26
 8003822:	3301      	adds	r3, #1
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2101      	movs	r1, #1
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	e017      	b.n	8003860 <HAL_ADC_ConfigChannel+0x644>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	61fb      	str	r3, [r7, #28]
  return result;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003848:	2320      	movs	r3, #32
 800384a:	e003      	b.n	8003854 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2101      	movs	r1, #1
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	ea42 0103 	orr.w	r1, r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_ADC_ConfigChannel+0x670>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0e9b      	lsrs	r3, r3, #26
 8003876:	3301      	adds	r3, #1
 8003878:	f003 021f 	and.w	r2, r3, #31
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	3b1e      	subs	r3, #30
 8003884:	051b      	lsls	r3, r3, #20
 8003886:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800388a:	e01b      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x6a8>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	613b      	str	r3, [r7, #16]
  return result;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80038a4:	2320      	movs	r3, #32
 80038a6:	e003      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	3b1e      	subs	r3, #30
 80038be:	051b      	lsls	r3, r3, #20
 80038c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7fe fe4c 	bl	8002568 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <HAL_ADC_ConfigChannel+0x6e0>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80be 	beq.w	8003a5a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x6d6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <HAL_ADC_ConfigChannel+0x6e4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10a      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x6ec>
 80038f2:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <HAL_ADC_ConfigChannel+0x6e8>)
 80038f4:	e009      	b.n	800390a <HAL_ADC_ConfigChannel+0x6ee>
 80038f6:	bf00      	nop
 80038f8:	407f0000 	.word	0x407f0000
 80038fc:	80080000 	.word	0x80080000
 8003900:	50000100 	.word	0x50000100
 8003904:	50000300 	.word	0x50000300
 8003908:	4b59      	ldr	r3, [pc, #356]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fd2e 	bl	800236c <LL_ADC_GetCommonPathInternalCh>
 8003910:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a56      	ldr	r2, [pc, #344]	@ (8003a74 <HAL_ADC_ConfigChannel+0x858>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x70c>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a55      	ldr	r2, [pc, #340]	@ (8003a78 <HAL_ADC_ConfigChannel+0x85c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d13a      	bne.n	800399e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800392c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d134      	bne.n	800399e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800393c:	d005      	beq.n	800394a <HAL_ADC_ConfigChannel+0x72e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a4e      	ldr	r2, [pc, #312]	@ (8003a7c <HAL_ADC_ConfigChannel+0x860>)
 8003944:	4293      	cmp	r3, r2
 8003946:	f040 8085 	bne.w	8003a54 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003952:	d004      	beq.n	800395e <HAL_ADC_ConfigChannel+0x742>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a49      	ldr	r2, [pc, #292]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x746>
 800395e:	4a49      	ldr	r2, [pc, #292]	@ (8003a84 <HAL_ADC_ConfigChannel+0x868>)
 8003960:	e000      	b.n	8003964 <HAL_ADC_ConfigChannel+0x748>
 8003962:	4a43      	ldr	r2, [pc, #268]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 8003964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003968:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f7fe fce9 	bl	8002346 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003974:	4b44      	ldr	r3, [pc, #272]	@ (8003a88 <HAL_ADC_ConfigChannel+0x86c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	4a44      	ldr	r2, [pc, #272]	@ (8003a8c <HAL_ADC_ConfigChannel+0x870>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800398e:	e002      	b.n	8003996 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f9      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399c:	e05a      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003a90 <HAL_ADC_ConfigChannel+0x874>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d125      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11f      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a31      	ldr	r2, [pc, #196]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d104      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x7ac>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a34      	ldr	r2, [pc, #208]	@ (8003a94 <HAL_ADC_ConfigChannel+0x878>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d047      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d0:	d004      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x7c0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x7c4>
 80039dc:	4a29      	ldr	r2, [pc, #164]	@ (8003a84 <HAL_ADC_ConfigChannel+0x868>)
 80039de:	e000      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x7c6>
 80039e0:	4a23      	ldr	r2, [pc, #140]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 80039e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7fe fcaa 	bl	8002346 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039f2:	e031      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a27      	ldr	r2, [pc, #156]	@ (8003a98 <HAL_ADC_ConfigChannel+0x87c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d12d      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d127      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a1c:	d004      	beq.n	8003a28 <HAL_ADC_ConfigChannel+0x80c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <HAL_ADC_ConfigChannel+0x864>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x810>
 8003a28:	4a16      	ldr	r2, [pc, #88]	@ (8003a84 <HAL_ADC_ConfigChannel+0x868>)
 8003a2a:	e000      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x812>
 8003a2c:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <HAL_ADC_ConfigChannel+0x854>)
 8003a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7fe fc84 	bl	8002346 <LL_ADC_SetCommonPathInternalCh>
 8003a3e:	e00c      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003a52:	e002      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	37d8      	adds	r7, #216	@ 0xd8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	50000700 	.word	0x50000700
 8003a74:	c3210000 	.word	0xc3210000
 8003a78:	90c00010 	.word	0x90c00010
 8003a7c:	50000600 	.word	0x50000600
 8003a80:	50000100 	.word	0x50000100
 8003a84:	50000300 	.word	0x50000300
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	053e2d63 	.word	0x053e2d63
 8003a90:	c7520000 	.word	0xc7520000
 8003a94:	50000500 	.word	0x50000500
 8003a98:	cb840000 	.word	0xcb840000

08003a9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fe3d 	bl	800272c <LL_ADC_IsEnabled>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d176      	bne.n	8003ba6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb0 <ADC_Enable+0x114>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	f043 0210 	orr.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e062      	b.n	8003ba8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe fdf8 	bl	80026dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af4:	d004      	beq.n	8003b00 <ADC_Enable+0x64>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb4 <ADC_Enable+0x118>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <ADC_Enable+0x68>
 8003b00:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb8 <ADC_Enable+0x11c>)
 8003b02:	e000      	b.n	8003b06 <ADC_Enable+0x6a>
 8003b04:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <ADC_Enable+0x120>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fc30 	bl	800236c <LL_ADC_GetCommonPathInternalCh>
 8003b0c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d013      	beq.n	8003b3e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b16:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc0 <ADC_Enable+0x124>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	4a29      	ldr	r2, [pc, #164]	@ (8003bc4 <ADC_Enable+0x128>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b30:	e002      	b.n	8003b38 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f9      	bne.n	8003b32 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe fbc1 	bl	80022c4 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b44:	e028      	b.n	8003b98 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fdee 	bl	800272c <LL_ADC_IsEnabled>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fdbe 	bl	80026dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b60:	f7fe fbb0 	bl	80022c4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d914      	bls.n	8003b98 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d00d      	beq.n	8003b98 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d1cf      	bne.n	8003b46 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	8000003f 	.word	0x8000003f
 8003bb4:	50000100 	.word	0x50000100
 8003bb8:	50000300 	.word	0x50000300
 8003bbc:	50000700 	.word	0x50000700
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	053e2d63 	.word	0x053e2d63

08003bc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fe fdbc 	bl	8002752 <LL_ADC_IsDisableOngoing>
 8003bda:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fda3 	bl	800272c <LL_ADC_IsEnabled>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d047      	beq.n	8003c7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d144      	bne.n	8003c7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030d 	and.w	r3, r3, #13
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10c      	bne.n	8003c1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fd7d 	bl	8002704 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c12:	f7fe fb57 	bl	80022c4 <HAL_GetTick>
 8003c16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c18:	e029      	b.n	8003c6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1e:	f043 0210 	orr.w	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e023      	b.n	8003c7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c36:	f7fe fb45 	bl	80022c4 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d914      	bls.n	8003c6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00d      	beq.n	8003c6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	f043 0210 	orr.w	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e007      	b.n	8003c7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1dc      	bne.n	8003c36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d14b      	bne.n	8003d38 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d021      	beq.n	8003cfe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fc00 	bl	80024c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d032      	beq.n	8003d30 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d12b      	bne.n	8003d30 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d11f      	bne.n	8003d30 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	f043 0201 	orr.w	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cfc:	e018      	b.n	8003d30 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d111      	bne.n	8003d30 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fa4b 	bl	80031cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d36:	e00e      	b.n	8003d56 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff fa5f 	bl	8003208 <HAL_ADC_ErrorCallback>
}
 8003d4a:	e004      	b.n	8003d56 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff fa37 	bl	80031e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fa31 	bl	8003208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <LL_ADC_IsEnabled>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <LL_ADC_IsEnabled+0x18>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_ADC_IsEnabled+0x1a>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_StartCalibration>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003de6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e1a:	d101      	bne.n	8003e20 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_ADC_REG_IsConversionOngoing>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d101      	bne.n	8003e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADCEx_Calibration_Start+0x1c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e04d      	b.n	8003f0c <HAL_ADCEx_Calibration_Start+0xb8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fea5 	bl	8003bc8 <ADC_Disable>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d136      	bne.n	8003ef6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e90:	f023 0302 	bic.w	r3, r3, #2
 8003e94:	f043 0202 	orr.w	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ff96 	bl	8003dd4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ea8:	e014      	b.n	8003ed4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3301      	adds	r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	@ (8003f14 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d90d      	bls.n	8003ed4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	f023 0312 	bic.w	r3, r3, #18
 8003ec0:	f043 0210 	orr.w	r2, r3, #16
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e01b      	b.n	8003f0c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff94 	bl	8003e06 <LL_ADC_IsCalibrationOnGoing>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e2      	bne.n	8003eaa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f023 0303 	bic.w	r3, r3, #3
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ef4:	e005      	b.n	8003f02 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efa:	f043 0210 	orr.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	0004de01 	.word	0x0004de01

08003f18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b0a1      	sub	sp, #132	@ 0x84
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0e7      	b.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb2:	d102      	bne.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	e009      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6e      	ldr	r2, [pc, #440]	@ (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d102      	bne.n	8003fca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003fc4:	4b6d      	ldr	r3, [pc, #436]	@ (800417c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	e001      	b.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10b      	bne.n	8003fec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0be      	b.n	800416a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff ff1d 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 8003ff4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff17 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 80a0 	bne.w	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 809c 	bne.w	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004018:	d004      	beq.n	8004024 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a55      	ldr	r2, [pc, #340]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004024:	4b56      	ldr	r3, [pc, #344]	@ (8004180 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004026:	e000      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004028:	4b56      	ldr	r3, [pc, #344]	@ (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800402a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d04b      	beq.n	80040cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004034:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004046:	035b      	lsls	r3, r3, #13
 8004048:	430b      	orrs	r3, r1
 800404a:	431a      	orrs	r2, r3
 800404c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800404e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004058:	d004      	beq.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a45      	ldr	r2, [pc, #276]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10f      	bne.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004064:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004068:	f7ff fea1 	bl	8003dae <LL_ADC_IsEnabled>
 800406c:	4604      	mov	r4, r0
 800406e:	4841      	ldr	r0, [pc, #260]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004070:	f7ff fe9d 	bl	8003dae <LL_ADC_IsEnabled>
 8004074:	4603      	mov	r3, r0
 8004076:	4323      	orrs	r3, r4
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e012      	b.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004084:	483c      	ldr	r0, [pc, #240]	@ (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004086:	f7ff fe92 	bl	8003dae <LL_ADC_IsEnabled>
 800408a:	4604      	mov	r4, r0
 800408c:	483b      	ldr	r0, [pc, #236]	@ (800417c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800408e:	f7ff fe8e 	bl	8003dae <LL_ADC_IsEnabled>
 8004092:	4603      	mov	r3, r0
 8004094:	431c      	orrs	r4, r3
 8004096:	483c      	ldr	r0, [pc, #240]	@ (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004098:	f7ff fe89 	bl	8003dae <LL_ADC_IsEnabled>
 800409c:	4603      	mov	r3, r0
 800409e:	4323      	orrs	r3, r4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d056      	beq.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80040b6:	f023 030f 	bic.w	r3, r3, #15
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	6811      	ldr	r1, [r2, #0]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6892      	ldr	r2, [r2, #8]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	431a      	orrs	r2, r3
 80040c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040ca:	e047      	b.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040e0:	d004      	beq.n	80040ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10f      	bne.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80040ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040f0:	f7ff fe5d 	bl	8003dae <LL_ADC_IsEnabled>
 80040f4:	4604      	mov	r4, r0
 80040f6:	481f      	ldr	r0, [pc, #124]	@ (8004174 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f8:	f7ff fe59 	bl	8003dae <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4323      	orrs	r3, r4
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e012      	b.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800410c:	481a      	ldr	r0, [pc, #104]	@ (8004178 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800410e:	f7ff fe4e 	bl	8003dae <LL_ADC_IsEnabled>
 8004112:	4604      	mov	r4, r0
 8004114:	4819      	ldr	r0, [pc, #100]	@ (800417c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004116:	f7ff fe4a 	bl	8003dae <LL_ADC_IsEnabled>
 800411a:	4603      	mov	r3, r0
 800411c:	431c      	orrs	r4, r3
 800411e:	481a      	ldr	r0, [pc, #104]	@ (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004120:	f7ff fe45 	bl	8003dae <LL_ADC_IsEnabled>
 8004124:	4603      	mov	r3, r0
 8004126:	4323      	orrs	r3, r4
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d012      	beq.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800413e:	f023 030f 	bic.w	r3, r3, #15
 8004142:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004144:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004146:	e009      	b.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800415a:	e000      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800415c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004166:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800416a:	4618      	mov	r0, r3
 800416c:	3784      	adds	r7, #132	@ 0x84
 800416e:	46bd      	mov	sp, r7
 8004170:	bd90      	pop	{r4, r7, pc}
 8004172:	bf00      	nop
 8004174:	50000100 	.word	0x50000100
 8004178:	50000400 	.word	0x50000400
 800417c:	50000500 	.word	0x50000500
 8004180:	50000300 	.word	0x50000300
 8004184:	50000700 	.word	0x50000700
 8004188:	50000600 	.word	0x50000600

0800418c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <__NVIC_SetPriorityGrouping+0x44>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041be:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <__NVIC_SetPriorityGrouping+0x44>)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	60d3      	str	r3, [r2, #12]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <__NVIC_GetPriorityGrouping+0x18>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f003 0307 	and.w	r3, r3, #7
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	db0b      	blt.n	800421a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	f003 021f 	and.w	r2, r3, #31
 8004208:	4907      	ldr	r1, [pc, #28]	@ (8004228 <__NVIC_EnableIRQ+0x38>)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2001      	movs	r0, #1
 8004212:	fa00 f202 	lsl.w	r2, r0, r2
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000e100 	.word	0xe000e100

0800422c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	2b00      	cmp	r3, #0
 800423e:	db0a      	blt.n	8004256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	490c      	ldr	r1, [pc, #48]	@ (8004278 <__NVIC_SetPriority+0x4c>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	440b      	add	r3, r1
 8004250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004254:	e00a      	b.n	800426c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4908      	ldr	r1, [pc, #32]	@ (800427c <__NVIC_SetPriority+0x50>)
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	3b04      	subs	r3, #4
 8004264:	0112      	lsls	r2, r2, #4
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	440b      	add	r3, r1
 800426a:	761a      	strb	r2, [r3, #24]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000e100 	.word	0xe000e100
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004280:	b480      	push	{r7}
 8004282:	b089      	sub	sp, #36	@ 0x24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f1c3 0307 	rsb	r3, r3, #7
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf28      	it	cs
 800429e:	2304      	movcs	r3, #4
 80042a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d902      	bls.n	80042b0 <NVIC_EncodePriority+0x30>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3b03      	subs	r3, #3
 80042ae:	e000      	b.n	80042b2 <NVIC_EncodePriority+0x32>
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	401a      	ands	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	43d9      	mvns	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	4313      	orrs	r3, r2
         );
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3724      	adds	r7, #36	@ 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ff4c 	bl	800418c <__NVIC_SetPriorityGrouping>
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800430a:	f7ff ff63 	bl	80041d4 <__NVIC_GetPriorityGrouping>
 800430e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff ffb3 	bl	8004280 <NVIC_EncodePriority>
 800431a:	4602      	mov	r2, r0
 800431c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff82 	bl	800422c <__NVIC_SetPriority>
}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff56 	bl	80041f0 <__NVIC_EnableIRQ>
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e08d      	b.n	800447a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <HAL_DMA_Init+0x138>)
 8004366:	429a      	cmp	r2, r3
 8004368:	d80f      	bhi.n	800438a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	4b45      	ldr	r3, [pc, #276]	@ (8004488 <HAL_DMA_Init+0x13c>)
 8004372:	4413      	add	r3, r2
 8004374:	4a45      	ldr	r2, [pc, #276]	@ (800448c <HAL_DMA_Init+0x140>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	009a      	lsls	r2, r3, #2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a42      	ldr	r2, [pc, #264]	@ (8004490 <HAL_DMA_Init+0x144>)
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40
 8004388:	e00e      	b.n	80043a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4b40      	ldr	r3, [pc, #256]	@ (8004494 <HAL_DMA_Init+0x148>)
 8004392:	4413      	add	r3, r2
 8004394:	4a3d      	ldr	r2, [pc, #244]	@ (800448c <HAL_DMA_Init+0x140>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	009a      	lsls	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004498 <HAL_DMA_Init+0x14c>)
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80043be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa82 	bl	8004904 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004408:	d102      	bne.n	8004410 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004424:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d010      	beq.n	8004450 <HAL_DMA_Init+0x104>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b04      	cmp	r3, #4
 8004434:	d80c      	bhi.n	8004450 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 faa2 	bl	8004980 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	e008      	b.n	8004462 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40020407 	.word	0x40020407
 8004488:	bffdfff8 	.word	0xbffdfff8
 800448c:	cccccccd 	.word	0xcccccccd
 8004490:	40020000 	.word	0x40020000
 8004494:	bffdfbf8 	.word	0xbffdfbf8
 8004498:	40020400 	.word	0x40020400

0800449c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_DMA_Start_IT+0x20>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e066      	b.n	800458a <HAL_DMA_Start_IT+0xee>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d155      	bne.n	800457c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f9c7 	bl	8004888 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 020e 	orr.w	r2, r2, #14
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e00f      	b.n	8004534 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 020a 	orr.w	r2, r2, #10
 8004532:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004550:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004568:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e005      	b.n	8004588 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004584:	2302      	movs	r3, #2
 8004586:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004588:	7dfb      	ldrb	r3, [r7, #23]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d005      	beq.n	80045b6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2204      	movs	r2, #4
 80045ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	e037      	b.n	8004626 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 020e 	bic.w	r2, r2, #14
 80045c4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	f003 021f 	and.w	r2, r3, #31
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f202 	lsl.w	r2, r1, r2
 80045f8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004602:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00c      	beq.n	8004626 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004616:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800461a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004624:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d00d      	beq.n	8004678 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e047      	b.n	8004708 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 020e 	bic.w	r2, r2, #14
 8004686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	f003 021f 	and.w	r2, r3, #31
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
    }
  }
  return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2204      	movs	r2, #4
 8004734:	409a      	lsls	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d026      	beq.n	800478c <HAL_DMA_IRQHandler+0x7a>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d021      	beq.n	800478c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0204 	bic.w	r2, r2, #4
 8004764:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f003 021f 	and.w	r2, r3, #31
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	2104      	movs	r1, #4
 8004774:	fa01 f202 	lsl.w	r2, r1, r2
 8004778:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	2b00      	cmp	r3, #0
 8004780:	d071      	beq.n	8004866 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800478a:	e06c      	b.n	8004866 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2202      	movs	r2, #2
 8004796:	409a      	lsls	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02e      	beq.n	80047fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d029      	beq.n	80047fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 020a 	bic.w	r2, r2, #10
 80047c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d4:	f003 021f 	and.w	r2, r3, #31
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047dc:	2102      	movs	r1, #2
 80047de:	fa01 f202 	lsl.w	r2, r1, r2
 80047e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d038      	beq.n	8004866 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047fc:	e033      	b.n	8004866 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	2208      	movs	r2, #8
 8004808:	409a      	lsls	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d02a      	beq.n	8004868 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d025      	beq.n	8004868 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 020e 	bic.w	r2, r2, #14
 800482a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f202 	lsl.w	r2, r1, r2
 800483e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004866:	bf00      	nop
 8004868:	bf00      	nop
}
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800489e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f003 021f 	and.w	r2, r3, #31
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f202 	lsl.w	r2, r1, r2
 80048c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d108      	bne.n	80048e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048e6:	e007      	b.n	80048f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	4b16      	ldr	r3, [pc, #88]	@ (800496c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004914:	429a      	cmp	r2, r3
 8004916:	d802      	bhi.n	800491e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004918:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e001      	b.n	8004922 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800491e:	4b15      	ldr	r3, [pc, #84]	@ (8004974 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004920:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	3b08      	subs	r3, #8
 800492e:	4a12      	ldr	r2, [pc, #72]	@ (8004978 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	009a      	lsls	r2, r3, #2
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	461a      	mov	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a0b      	ldr	r2, [pc, #44]	@ (800497c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800494e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2201      	movs	r2, #1
 8004958:	409a      	lsls	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40020407 	.word	0x40020407
 8004970:	40020800 	.word	0x40020800
 8004974:	40020820 	.word	0x40020820
 8004978:	cccccccd 	.word	0xcccccccd
 800497c:	40020880 	.word	0x40020880

08004980 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a08      	ldr	r2, [pc, #32]	@ (80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80049a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2201      	movs	r2, #1
 80049ae:	409a      	lsls	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	1000823f 	.word	0x1000823f
 80049c4:	40020940 	.word	0x40020940

080049c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049d6:	e15a      	b.n	8004c8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2101      	movs	r1, #1
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 814c 	beq.w	8004c88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d005      	beq.n	8004a08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d130      	bne.n	8004a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	2203      	movs	r2, #3
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a3e:	2201      	movs	r2, #1
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0201 	and.w	r2, r3, #1
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d017      	beq.n	8004aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d123      	bne.n	8004afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	08da      	lsrs	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3208      	adds	r2, #8
 8004aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	220f      	movs	r2, #15
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	08da      	lsrs	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3208      	adds	r2, #8
 8004af4:	6939      	ldr	r1, [r7, #16]
 8004af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0203 	and.w	r2, r3, #3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80a6 	beq.w	8004c88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <HAL_GPIO_Init+0x2e4>)
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b40:	4a5a      	ldr	r2, [pc, #360]	@ (8004cac <HAL_GPIO_Init+0x2e4>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b48:	4b58      	ldr	r3, [pc, #352]	@ (8004cac <HAL_GPIO_Init+0x2e4>)
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b54:	4a56      	ldr	r2, [pc, #344]	@ (8004cb0 <HAL_GPIO_Init+0x2e8>)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	220f      	movs	r2, #15
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b7e:	d01f      	beq.n	8004bc0 <HAL_GPIO_Init+0x1f8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a4c      	ldr	r2, [pc, #304]	@ (8004cb4 <HAL_GPIO_Init+0x2ec>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d019      	beq.n	8004bbc <HAL_GPIO_Init+0x1f4>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a4b      	ldr	r2, [pc, #300]	@ (8004cb8 <HAL_GPIO_Init+0x2f0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <HAL_GPIO_Init+0x1f0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a4a      	ldr	r2, [pc, #296]	@ (8004cbc <HAL_GPIO_Init+0x2f4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00d      	beq.n	8004bb4 <HAL_GPIO_Init+0x1ec>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a49      	ldr	r2, [pc, #292]	@ (8004cc0 <HAL_GPIO_Init+0x2f8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <HAL_GPIO_Init+0x1e8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a48      	ldr	r2, [pc, #288]	@ (8004cc4 <HAL_GPIO_Init+0x2fc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_GPIO_Init+0x1e4>
 8004ba8:	2305      	movs	r3, #5
 8004baa:	e00a      	b.n	8004bc2 <HAL_GPIO_Init+0x1fa>
 8004bac:	2306      	movs	r3, #6
 8004bae:	e008      	b.n	8004bc2 <HAL_GPIO_Init+0x1fa>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	e006      	b.n	8004bc2 <HAL_GPIO_Init+0x1fa>
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e004      	b.n	8004bc2 <HAL_GPIO_Init+0x1fa>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e002      	b.n	8004bc2 <HAL_GPIO_Init+0x1fa>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_GPIO_Init+0x1fa>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	f002 0203 	and.w	r2, r2, #3
 8004bc8:	0092      	lsls	r2, r2, #2
 8004bca:	4093      	lsls	r3, r2
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bd2:	4937      	ldr	r1, [pc, #220]	@ (8004cb0 <HAL_GPIO_Init+0x2e8>)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	089b      	lsrs	r3, r3, #2
 8004bd8:	3302      	adds	r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004be0:	4b39      	ldr	r3, [pc, #228]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c04:	4a30      	ldr	r2, [pc, #192]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c2e:	4a26      	ldr	r2, [pc, #152]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c34:	4b24      	ldr	r3, [pc, #144]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c58:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c82:	4a11      	ldr	r2, [pc, #68]	@ (8004cc8 <HAL_GPIO_Init+0x300>)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f47f ae9d 	bne.w	80049d8 <HAL_GPIO_Init+0x10>
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	48000400 	.word	0x48000400
 8004cb8:	48000800 	.word	0x48000800
 8004cbc:	48000c00 	.word	0x48000c00
 8004cc0:	48001000 	.word	0x48001000
 8004cc4:	48001400 	.word	0x48001400
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	e001      	b.n	8004cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d0c:	787b      	ldrb	r3, [r7, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d18:	e002      	b.n	8004d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d36:	4b08      	ldr	r3, [pc, #32]	@ (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d42:	4a05      	ldr	r2, [pc, #20]	@ (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f806 	bl	8004d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40010400 	.word	0x40010400

08004d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d141      	bne.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d82:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d8e:	d131      	bne.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d90:	4b47      	ldr	r3, [pc, #284]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d96:	4a46      	ldr	r2, [pc, #280]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da0:	4b43      	ldr	r3, [pc, #268]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004da8:	4a41      	ldr	r2, [pc, #260]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004db0:	4b40      	ldr	r3, [pc, #256]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2232      	movs	r2, #50	@ 0x32
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dc6:	e002      	b.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dce:	4b38      	ldr	r3, [pc, #224]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dda:	d102      	bne.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f2      	bne.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de2:	4b33      	ldr	r3, [pc, #204]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d158      	bne.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e057      	b.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df4:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e04:	e04d      	b.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0c:	d141      	bne.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e0e:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1a:	d131      	bne.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e1c:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e22:	4a23      	ldr	r2, [pc, #140]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e2c:	4b20      	ldr	r3, [pc, #128]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e34:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2232      	movs	r2, #50	@ 0x32
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	0c9b      	lsrs	r3, r3, #18
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e52:	e002      	b.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e5a:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e66:	d102      	bne.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f2      	bne.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e6e:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d112      	bne.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e011      	b.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e86:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e90:	e007      	b.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e92:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e9a:	4a05      	ldr	r2, [pc, #20]	@ (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ea0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	20000004 	.word	0x20000004
 8004eb8:	431bde83 	.word	0x431bde83

08004ebc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eca:	6093      	str	r3, [r2, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40007000 	.word	0x40007000

08004edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e2fe      	b.n	80054ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d075      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efa:	4b97      	ldr	r3, [pc, #604]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f04:	4b94      	ldr	r3, [pc, #592]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d102      	bne.n	8004f1a <HAL_RCC_OscConfig+0x3e>
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d002      	beq.n	8004f20 <HAL_RCC_OscConfig+0x44>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d10b      	bne.n	8004f38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f20:	4b8d      	ldr	r3, [pc, #564]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d05b      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x108>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d157      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e2d9      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f40:	d106      	bne.n	8004f50 <HAL_RCC_OscConfig+0x74>
 8004f42:	4b85      	ldr	r3, [pc, #532]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a84      	ldr	r2, [pc, #528]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e01d      	b.n	8004f8c <HAL_RCC_OscConfig+0xb0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x98>
 8004f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	4b7c      	ldr	r3, [pc, #496]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a7b      	ldr	r2, [pc, #492]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0xb0>
 8004f74:	4b78      	ldr	r3, [pc, #480]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a77      	ldr	r2, [pc, #476]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b75      	ldr	r3, [pc, #468]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a74      	ldr	r2, [pc, #464]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fd f996 	bl	80022c4 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fd f992 	bl	80022c4 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e29e      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	4b6a      	ldr	r3, [pc, #424]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0xc0>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fd f982 	bl	80022c4 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fd f97e 	bl	80022c4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	@ 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e28a      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd6:	4b60      	ldr	r3, [pc, #384]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xe8>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d075      	beq.n	80050de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff2:	4b59      	ldr	r3, [pc, #356]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ffc:	4b56      	ldr	r3, [pc, #344]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	d102      	bne.n	8005012 <HAL_RCC_OscConfig+0x136>
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d002      	beq.n	8005018 <HAL_RCC_OscConfig+0x13c>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d11f      	bne.n	8005058 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005018:	4b4f      	ldr	r3, [pc, #316]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_OscConfig+0x154>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e25d      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005030:	4b49      	ldr	r3, [pc, #292]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	4946      	ldr	r1, [pc, #280]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005044:	4b45      	ldr	r3, [pc, #276]	@ (800515c <HAL_RCC_OscConfig+0x280>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fc fe3b 	bl	8001cc4 <HAL_InitTick>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d043      	beq.n	80050dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e249      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d023      	beq.n	80050a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005060:	4b3d      	ldr	r3, [pc, #244]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a3c      	ldr	r2, [pc, #240]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd f92a 	bl	80022c4 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005074:	f7fd f926 	bl	80022c4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e232      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005086:	4b34      	ldr	r3, [pc, #208]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	061b      	lsls	r3, r3, #24
 80050a0:	492d      	ldr	r1, [pc, #180]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
 80050a6:	e01a      	b.n	80050de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fd f906 	bl	80022c4 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050bc:	f7fd f902 	bl	80022c4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e20e      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ce:	4b22      	ldr	r3, [pc, #136]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x1e0>
 80050da:	e000      	b.n	80050de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d041      	beq.n	800516e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01c      	beq.n	800512c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050f2:	4b19      	ldr	r3, [pc, #100]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 80050f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f8:	4a17      	ldr	r2, [pc, #92]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fd f8df 	bl	80022c4 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510a:	f7fd f8db 	bl	80022c4 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1e7      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800511c:	4b0e      	ldr	r3, [pc, #56]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 800511e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ef      	beq.n	800510a <HAL_RCC_OscConfig+0x22e>
 800512a:	e020      	b.n	800516e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 800512e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005132:	4a09      	ldr	r2, [pc, #36]	@ (8005158 <HAL_RCC_OscConfig+0x27c>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513c:	f7fd f8c2 	bl	80022c4 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005142:	e00d      	b.n	8005160 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005144:	f7fd f8be 	bl	80022c4 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d906      	bls.n	8005160 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1ca      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000
 800515c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005160:	4b8c      	ldr	r3, [pc, #560]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1ea      	bne.n	8005144 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80a6 	beq.w	80052c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517c:	2300      	movs	r3, #0
 800517e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005180:	4b84      	ldr	r3, [pc, #528]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_OscConfig+0x2b4>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <HAL_RCC_OscConfig+0x2b6>
 8005190:	2300      	movs	r3, #0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00d      	beq.n	80051b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005196:	4b7f      	ldr	r3, [pc, #508]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519a:	4a7e      	ldr	r2, [pc, #504]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051a2:	4b7c      	ldr	r3, [pc, #496]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051ae:	2301      	movs	r3, #1
 80051b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051b2:	4b79      	ldr	r3, [pc, #484]	@ (8005398 <HAL_RCC_OscConfig+0x4bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d118      	bne.n	80051f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051be:	4b76      	ldr	r3, [pc, #472]	@ (8005398 <HAL_RCC_OscConfig+0x4bc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a75      	ldr	r2, [pc, #468]	@ (8005398 <HAL_RCC_OscConfig+0x4bc>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ca:	f7fd f87b 	bl	80022c4 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fd f877 	bl	80022c4 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e183      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e4:	4b6c      	ldr	r3, [pc, #432]	@ (8005398 <HAL_RCC_OscConfig+0x4bc>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d108      	bne.n	800520a <HAL_RCC_OscConfig+0x32e>
 80051f8:	4b66      	ldr	r3, [pc, #408]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fe:	4a65      	ldr	r2, [pc, #404]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005208:	e024      	b.n	8005254 <HAL_RCC_OscConfig+0x378>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b05      	cmp	r3, #5
 8005210:	d110      	bne.n	8005234 <HAL_RCC_OscConfig+0x358>
 8005212:	4b60      	ldr	r3, [pc, #384]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005218:	4a5e      	ldr	r2, [pc, #376]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800521a:	f043 0304 	orr.w	r3, r3, #4
 800521e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005222:	4b5c      	ldr	r3, [pc, #368]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005228:	4a5a      	ldr	r2, [pc, #360]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005232:	e00f      	b.n	8005254 <HAL_RCC_OscConfig+0x378>
 8005234:	4b57      	ldr	r3, [pc, #348]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523a:	4a56      	ldr	r2, [pc, #344]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005244:	4b53      	ldr	r3, [pc, #332]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524a:	4a52      	ldr	r2, [pc, #328]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d016      	beq.n	800528a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525c:	f7fd f832 	bl	80022c4 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005262:	e00a      	b.n	800527a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005264:	f7fd f82e 	bl	80022c4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e138      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527a:	4b46      	ldr	r3, [pc, #280]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ed      	beq.n	8005264 <HAL_RCC_OscConfig+0x388>
 8005288:	e015      	b.n	80052b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528a:	f7fd f81b 	bl	80022c4 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005292:	f7fd f817 	bl	80022c4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e121      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ed      	bne.n	8005292 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052b6:	7ffb      	ldrb	r3, [r7, #31]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d105      	bne.n	80052c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052bc:	4b35      	ldr	r3, [pc, #212]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 80052be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c0:	4a34      	ldr	r2, [pc, #208]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 80052c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d03c      	beq.n	800534e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01c      	beq.n	8005316 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 80052de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ec:	f7fc ffea 	bl	80022c4 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f4:	f7fc ffe6 	bl	80022c4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0f2      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005306:	4b23      	ldr	r3, [pc, #140]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005308:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0ef      	beq.n	80052f4 <HAL_RCC_OscConfig+0x418>
 8005314:	e01b      	b.n	800534e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005316:	4b1f      	ldr	r3, [pc, #124]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800531c:	4a1d      	ldr	r2, [pc, #116]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005326:	f7fc ffcd 	bl	80022c4 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800532e:	f7fc ffc9 	bl	80022c4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e0d5      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005340:	4b14      	ldr	r3, [pc, #80]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005342:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ef      	bne.n	800532e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80c9 	beq.w	80054ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005358:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b0c      	cmp	r3, #12
 8005362:	f000 8083 	beq.w	800546c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d15e      	bne.n	800542c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536e:	4b09      	ldr	r3, [pc, #36]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a08      	ldr	r2, [pc, #32]	@ (8005394 <HAL_RCC_OscConfig+0x4b8>)
 8005374:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fc ffa3 	bl	80022c4 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005380:	e00c      	b.n	800539c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005382:	f7fc ff9f 	bl	80022c4 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d905      	bls.n	800539c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e0ab      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
 8005394:	40021000 	.word	0x40021000
 8005398:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800539c:	4b55      	ldr	r3, [pc, #340]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ec      	bne.n	8005382 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a8:	4b52      	ldr	r3, [pc, #328]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	4b52      	ldr	r3, [pc, #328]	@ (80054f8 <HAL_RCC_OscConfig+0x61c>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6a11      	ldr	r1, [r2, #32]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053b8:	3a01      	subs	r2, #1
 80053ba:	0112      	lsls	r2, r2, #4
 80053bc:	4311      	orrs	r1, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053c2:	0212      	lsls	r2, r2, #8
 80053c4:	4311      	orrs	r1, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053ca:	0852      	lsrs	r2, r2, #1
 80053cc:	3a01      	subs	r2, #1
 80053ce:	0552      	lsls	r2, r2, #21
 80053d0:	4311      	orrs	r1, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053d6:	0852      	lsrs	r2, r2, #1
 80053d8:	3a01      	subs	r2, #1
 80053da:	0652      	lsls	r2, r2, #25
 80053dc:	4311      	orrs	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053e2:	06d2      	lsls	r2, r2, #27
 80053e4:	430a      	orrs	r2, r1
 80053e6:	4943      	ldr	r1, [pc, #268]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ec:	4b41      	ldr	r3, [pc, #260]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a40      	ldr	r2, [pc, #256]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 80053f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053f8:	4b3e      	ldr	r3, [pc, #248]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a3d      	ldr	r2, [pc, #244]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 80053fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005402:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fc ff5e 	bl	80022c4 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540c:	f7fc ff5a 	bl	80022c4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e066      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800541e:	4b35      	ldr	r3, [pc, #212]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x530>
 800542a:	e05e      	b.n	80054ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542c:	4b31      	ldr	r3, [pc, #196]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a30      	ldr	r2, [pc, #192]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 8005432:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc ff44 	bl	80022c4 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005440:	f7fc ff40 	bl	80022c4 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e04c      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005452:	4b28      	ldr	r3, [pc, #160]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800545e:	4b25      	ldr	r3, [pc, #148]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	4924      	ldr	r1, [pc, #144]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 8005464:	4b25      	ldr	r3, [pc, #148]	@ (80054fc <HAL_RCC_OscConfig+0x620>)
 8005466:	4013      	ands	r3, r2
 8005468:	60cb      	str	r3, [r1, #12]
 800546a:	e03e      	b.n	80054ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e039      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005478:	4b1e      	ldr	r3, [pc, #120]	@ (80054f4 <HAL_RCC_OscConfig+0x618>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f003 0203 	and.w	r2, r3, #3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	429a      	cmp	r2, r3
 800548a:	d12c      	bne.n	80054e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	3b01      	subs	r3, #1
 8005498:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d123      	bne.n	80054e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d11b      	bne.n	80054e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d113      	bne.n	80054e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	3b01      	subs	r3, #1
 80054cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d109      	bne.n	80054e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	3b01      	subs	r3, #1
 80054e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40021000 	.word	0x40021000
 80054f8:	019f800c 	.word	0x019f800c
 80054fc:	feeefffc 	.word	0xfeeefffc

08005500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e11e      	b.n	8005756 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b91      	ldr	r3, [pc, #580]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d910      	bls.n	8005548 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b8e      	ldr	r3, [pc, #568]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	498c      	ldr	r1, [pc, #560]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b8a      	ldr	r3, [pc, #552]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e106      	b.n	8005756 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d073      	beq.n	800563c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d129      	bne.n	80055b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555c:	4b81      	ldr	r3, [pc, #516]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0f4      	b.n	8005756 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800556c:	f000 f9d0 	bl	8005910 <RCC_GetSysClockFreqFromPLLSource>
 8005570:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4a7c      	ldr	r2, [pc, #496]	@ (8005768 <HAL_RCC_ClockConfig+0x268>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d93f      	bls.n	80055fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800557a:	4b7a      	ldr	r3, [pc, #488]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800558e:	2b00      	cmp	r3, #0
 8005590:	d033      	beq.n	80055fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005596:	2b00      	cmp	r3, #0
 8005598:	d12f      	bne.n	80055fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800559a:	4b72      	ldr	r3, [pc, #456]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a2:	4a70      	ldr	r2, [pc, #448]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 80055a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055aa:	2380      	movs	r3, #128	@ 0x80
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	e024      	b.n	80055fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0c6      	b.n	8005756 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055c8:	4b66      	ldr	r3, [pc, #408]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0be      	b.n	8005756 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055d8:	f000 f8ce 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4a61      	ldr	r2, [pc, #388]	@ (8005768 <HAL_RCC_ClockConfig+0x268>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d909      	bls.n	80055fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ee:	4a5d      	ldr	r2, [pc, #372]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 80055f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055fa:	4b5a      	ldr	r3, [pc, #360]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 0203 	bic.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4957      	ldr	r1, [pc, #348]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560c:	f7fc fe5a 	bl	80022c4 <HAL_GetTick>
 8005610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005612:	e00a      	b.n	800562a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005614:	f7fc fe56 	bl	80022c4 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e095      	b.n	8005756 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	4b4e      	ldr	r3, [pc, #312]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 020c 	and.w	r2, r3, #12
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	429a      	cmp	r2, r3
 800563a:	d1eb      	bne.n	8005614 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d023      	beq.n	8005690 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005654:	4b43      	ldr	r3, [pc, #268]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a42      	ldr	r2, [pc, #264]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800565a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800565e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800566c:	4b3d      	ldr	r3, [pc, #244]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005674:	4a3b      	ldr	r2, [pc, #236]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005676:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800567a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800567c:	4b39      	ldr	r3, [pc, #228]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4936      	ldr	r1, [pc, #216]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
 800568e:	e008      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b80      	cmp	r3, #128	@ 0x80
 8005694:	d105      	bne.n	80056a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005696:	4b33      	ldr	r3, [pc, #204]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	4a32      	ldr	r2, [pc, #200]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 800569c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d21d      	bcs.n	80056ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f023 020f 	bic.w	r2, r3, #15
 80056b8:	4929      	ldr	r1, [pc, #164]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056c0:	f7fc fe00 	bl	80022c4 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fc fdfc 	bl	80022c4 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e03b      	b.n	8005756 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b20      	ldr	r3, [pc, #128]	@ (8005760 <HAL_RCC_ClockConfig+0x260>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1ed      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4917      	ldr	r1, [pc, #92]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005716:	4b13      	ldr	r3, [pc, #76]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	490f      	ldr	r1, [pc, #60]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005726:	4313      	orrs	r3, r2
 8005728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800572a:	f000 f825 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 800572e:	4602      	mov	r2, r0
 8005730:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	490c      	ldr	r1, [pc, #48]	@ (800576c <HAL_RCC_ClockConfig+0x26c>)
 800573c:	5ccb      	ldrb	r3, [r1, r3]
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	4a0a      	ldr	r2, [pc, #40]	@ (8005770 <HAL_RCC_ClockConfig+0x270>)
 8005748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800574a:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <HAL_RCC_ClockConfig+0x274>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fc fab8 	bl	8001cc4 <HAL_InitTick>
 8005754:	4603      	mov	r3, r0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40022000 	.word	0x40022000
 8005764:	40021000 	.word	0x40021000
 8005768:	04c4b400 	.word	0x04c4b400
 800576c:	08018dbc 	.word	0x08018dbc
 8005770:	20000004 	.word	0x20000004
 8005774:	20000008 	.word	0x20000008

08005778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800577e:	4b2c      	ldr	r3, [pc, #176]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b04      	cmp	r3, #4
 8005788:	d102      	bne.n	8005790 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800578a:	4b2a      	ldr	r3, [pc, #168]	@ (8005834 <HAL_RCC_GetSysClockFreq+0xbc>)
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	e047      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005790:	4b27      	ldr	r3, [pc, #156]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d102      	bne.n	80057a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800579c:	4b26      	ldr	r3, [pc, #152]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xc0>)
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	e03e      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057a2:	4b23      	ldr	r3, [pc, #140]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d136      	bne.n	800581c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057ae:	4b20      	ldr	r3, [pc, #128]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	3301      	adds	r3, #1
 80057c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	4a16      	ldr	r2, [pc, #88]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d6:	68d2      	ldr	r2, [r2, #12]
 80057d8:	0a12      	lsrs	r2, r2, #8
 80057da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	617b      	str	r3, [r7, #20]
      break;
 80057e4:	e00c      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e6:	4a13      	ldr	r2, [pc, #76]	@ (8005834 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	4a10      	ldr	r2, [pc, #64]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f0:	68d2      	ldr	r2, [r2, #12]
 80057f2:	0a12      	lsrs	r2, r2, #8
 80057f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057f8:	fb02 f303 	mul.w	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
      break;
 80057fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0e5b      	lsrs	r3, r3, #25
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	3301      	adds	r3, #1
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	e001      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005820:	693b      	ldr	r3, [r7, #16]
}
 8005822:	4618      	mov	r0, r3
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
 8005834:	00f42400 	.word	0x00f42400
 8005838:	016e3600 	.word	0x016e3600

0800583c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005840:	4b03      	ldr	r3, [pc, #12]	@ (8005850 <HAL_RCC_GetHCLKFreq+0x14>)
 8005842:	681b      	ldr	r3, [r3, #0]
}
 8005844:	4618      	mov	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	20000004 	.word	0x20000004

08005854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005858:	f7ff fff0 	bl	800583c <HAL_RCC_GetHCLKFreq>
 800585c:	4602      	mov	r2, r0
 800585e:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	4904      	ldr	r1, [pc, #16]	@ (800587c <HAL_RCC_GetPCLK1Freq+0x28>)
 800586a:	5ccb      	ldrb	r3, [r1, r3]
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021000 	.word	0x40021000
 800587c:	08018dcc 	.word	0x08018dcc

08005880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005884:	f7ff ffda 	bl	800583c <HAL_RCC_GetHCLKFreq>
 8005888:	4602      	mov	r2, r0
 800588a:	4b06      	ldr	r3, [pc, #24]	@ (80058a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	0adb      	lsrs	r3, r3, #11
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	4904      	ldr	r1, [pc, #16]	@ (80058a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005896:	5ccb      	ldrb	r3, [r1, r3]
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	08018dcc 	.word	0x08018dcc

080058ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	220f      	movs	r2, #15
 80058ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80058bc:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_RCC_GetClockConfig+0x5c>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0203 	and.w	r2, r3, #3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80058c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <HAL_RCC_GetClockConfig+0x5c>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80058d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <HAL_RCC_GetClockConfig+0x5c>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80058e0:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <HAL_RCC_GetClockConfig+0x5c>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	08db      	lsrs	r3, r3, #3
 80058e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80058ee:	4b07      	ldr	r3, [pc, #28]	@ (800590c <HAL_RCC_GetClockConfig+0x60>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 020f 	and.w	r2, r3, #15
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000
 800590c:	40022000 	.word	0x40022000

08005910 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005916:	4b1e      	ldr	r3, [pc, #120]	@ (8005990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005920:	4b1b      	ldr	r3, [pc, #108]	@ (8005990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d10c      	bne.n	800594e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005934:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	4a14      	ldr	r2, [pc, #80]	@ (8005990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800593e:	68d2      	ldr	r2, [r2, #12]
 8005940:	0a12      	lsrs	r2, r2, #8
 8005942:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	617b      	str	r3, [r7, #20]
    break;
 800594c:	e00c      	b.n	8005968 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	4a0e      	ldr	r2, [pc, #56]	@ (8005990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005958:	68d2      	ldr	r2, [r2, #12]
 800595a:	0a12      	lsrs	r2, r2, #8
 800595c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
    break;
 8005966:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005968:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	0e5b      	lsrs	r3, r3, #25
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	3301      	adds	r3, #1
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005982:	687b      	ldr	r3, [r7, #4]
}
 8005984:	4618      	mov	r0, r3
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40021000 	.word	0x40021000
 8005994:	016e3600 	.word	0x016e3600
 8005998:	00f42400 	.word	0x00f42400

0800599c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059a4:	2300      	movs	r3, #0
 80059a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059a8:	2300      	movs	r3, #0
 80059aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8098 	beq.w	8005aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ba:	2300      	movs	r3, #0
 80059bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059be:	4b43      	ldr	r3, [pc, #268]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ca:	4b40      	ldr	r3, [pc, #256]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ce:	4a3f      	ldr	r2, [pc, #252]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80059d6:	4b3d      	ldr	r3, [pc, #244]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059e2:	2301      	movs	r3, #1
 80059e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059e6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a39      	ldr	r2, [pc, #228]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059f2:	f7fc fc67 	bl	80022c4 <HAL_GetTick>
 80059f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059f8:	e009      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059fa:	f7fc fc63 	bl	80022c4 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d902      	bls.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	74fb      	strb	r3, [r7, #19]
        break;
 8005a0c:	e005      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a0e:	4b30      	ldr	r3, [pc, #192]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0ef      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a1a:	7cfb      	ldrb	r3, [r7, #19]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d159      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a20:	4b2a      	ldr	r3, [pc, #168]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01e      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d019      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a3c:	4b23      	ldr	r3, [pc, #140]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a48:	4b20      	ldr	r3, [pc, #128]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a58:	4b1c      	ldr	r3, [pc, #112]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a68:	4a18      	ldr	r2, [pc, #96]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d016      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7a:	f7fc fc23 	bl	80022c4 <HAL_GetTick>
 8005a7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a80:	e00b      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f7fc fc1f 	bl	80022c4 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d902      	bls.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	74fb      	strb	r3, [r7, #19]
            break;
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ec      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aae:	4b07      	ldr	r3, [pc, #28]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	4903      	ldr	r1, [pc, #12]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	74bb      	strb	r3, [r7, #18]
 8005aca:	e005      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad4:	7cfb      	ldrb	r3, [r7, #19]
 8005ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad8:	7c7b      	ldrb	r3, [r7, #17]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d105      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ade:	4ba7      	ldr	r3, [pc, #668]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae2:	4aa6      	ldr	r2, [pc, #664]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af6:	4ba1      	ldr	r3, [pc, #644]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afc:	f023 0203 	bic.w	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	499d      	ldr	r1, [pc, #628]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b18:	4b98      	ldr	r3, [pc, #608]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1e:	f023 020c 	bic.w	r2, r3, #12
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	4995      	ldr	r1, [pc, #596]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b3a:	4b90      	ldr	r3, [pc, #576]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	498c      	ldr	r1, [pc, #560]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b5c:	4b87      	ldr	r3, [pc, #540]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	4984      	ldr	r1, [pc, #528]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	497b      	ldr	r1, [pc, #492]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ba0:	4b76      	ldr	r3, [pc, #472]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	4973      	ldr	r1, [pc, #460]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	496a      	ldr	r1, [pc, #424]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005be4:	4b65      	ldr	r3, [pc, #404]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	4962      	ldr	r1, [pc, #392]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c06:	4b5d      	ldr	r3, [pc, #372]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	4959      	ldr	r1, [pc, #356]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c28:	4b54      	ldr	r3, [pc, #336]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c2e:	f023 0203 	bic.w	r2, r3, #3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	4951      	ldr	r1, [pc, #324]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	4948      	ldr	r1, [pc, #288]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d015      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c6c:	4b43      	ldr	r3, [pc, #268]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7a:	4940      	ldr	r1, [pc, #256]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c8a:	d105      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	4a3a      	ldr	r2, [pc, #232]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d015      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ca4:	4b35      	ldr	r3, [pc, #212]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	4932      	ldr	r1, [pc, #200]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cc2:	d105      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d015      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cdc:	4b27      	ldr	r3, [pc, #156]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cea:	4924      	ldr	r1, [pc, #144]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cfa:	d105      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d14:	4b19      	ldr	r3, [pc, #100]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d22:	4916      	ldr	r1, [pc, #88]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d32:	d105      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d34:	4b11      	ldr	r3, [pc, #68]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4a10      	ldr	r2, [pc, #64]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d019      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	4908      	ldr	r1, [pc, #32]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d6a:	d109      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6c:	4b03      	ldr	r3, [pc, #12]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a02      	ldr	r2, [pc, #8]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d76:	60d3      	str	r3, [r2, #12]
 8005d78:	e002      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d015      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d8c:	4b29      	ldr	r3, [pc, #164]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	4926      	ldr	r1, [pc, #152]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005daa:	d105      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dac:	4b21      	ldr	r3, [pc, #132]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4a20      	ldr	r2, [pc, #128]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d015      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd2:	4918      	ldr	r1, [pc, #96]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de2:	d105      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005de4:	4b13      	ldr	r3, [pc, #76]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	4a12      	ldr	r2, [pc, #72]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d015      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0a:	490a      	ldr	r1, [pc, #40]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e1a:	d105      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e1c:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	4a04      	ldr	r2, [pc, #16]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e28:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000

08005e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e049      	b.n	8005ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f841 	bl	8005ee6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f000 fa30 	bl	80062dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d001      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e054      	b.n	8005fbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a26      	ldr	r2, [pc, #152]	@ (8005fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f3e:	d01d      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a22      	ldr	r2, [pc, #136]	@ (8005fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a21      	ldr	r2, [pc, #132]	@ (8005fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	@ (8005fdc <HAL_TIM_Base_Start_IT+0xe0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fe0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d115      	bne.n	8005fa8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	4b19      	ldr	r3, [pc, #100]	@ (8005fe8 <HAL_TIM_Base_Start_IT+0xec>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d015      	beq.n	8005fba <HAL_TIM_Base_Start_IT+0xbe>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d011      	beq.n	8005fba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	e008      	b.n	8005fba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e000      	b.n	8005fbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40015000 	.word	0x40015000
 8005fe8:	00010007 	.word	0x00010007

08005fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d020      	beq.n	8006050 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0202 	mvn.w	r2, #2
 8006020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f931 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f923 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f934 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d020      	beq.n	800609c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01b      	beq.n	800609c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0204 	mvn.w	r2, #4
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f90b 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8fd 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f90e 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d020      	beq.n	80060e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01b      	beq.n	80060e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0208 	mvn.w	r2, #8
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2204      	movs	r2, #4
 80060be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8e5 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f8d7 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f8e8 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d020      	beq.n	8006134 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01b      	beq.n	8006134 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0210 	mvn.w	r2, #16
 8006104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2208      	movs	r2, #8
 800610a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8bf 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006120:	e005      	b.n	800612e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f8b1 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8c2 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0201 	mvn.w	r2, #1
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb fc10 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f969 	bl	8006458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f961 	bl	800646c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f87c 	bl	80062c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f06f 0220 	mvn.w	r2, #32
 80061ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f929 	bl	8006444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800620e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f935 	bl	8006480 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f92d 	bl	8006494 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00c      	beq.n	800625e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f925 	bl	80064a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00c      	beq.n	8006282 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800627a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f91d 	bl	80064bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006420 <TIM_Base_SetConfig+0x144>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d017      	beq.n	8006324 <TIM_Base_SetConfig+0x48>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fa:	d013      	beq.n	8006324 <TIM_Base_SetConfig+0x48>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a49      	ldr	r2, [pc, #292]	@ (8006424 <TIM_Base_SetConfig+0x148>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0x48>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a48      	ldr	r2, [pc, #288]	@ (8006428 <TIM_Base_SetConfig+0x14c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0x48>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a47      	ldr	r2, [pc, #284]	@ (800642c <TIM_Base_SetConfig+0x150>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0x48>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a46      	ldr	r2, [pc, #280]	@ (8006430 <TIM_Base_SetConfig+0x154>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0x48>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a45      	ldr	r2, [pc, #276]	@ (8006434 <TIM_Base_SetConfig+0x158>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a39      	ldr	r2, [pc, #228]	@ (8006420 <TIM_Base_SetConfig+0x144>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d023      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006344:	d01f      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a36      	ldr	r2, [pc, #216]	@ (8006424 <TIM_Base_SetConfig+0x148>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01b      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a35      	ldr	r2, [pc, #212]	@ (8006428 <TIM_Base_SetConfig+0x14c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d017      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a34      	ldr	r2, [pc, #208]	@ (800642c <TIM_Base_SetConfig+0x150>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a33      	ldr	r2, [pc, #204]	@ (8006430 <TIM_Base_SetConfig+0x154>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a33      	ldr	r2, [pc, #204]	@ (8006438 <TIM_Base_SetConfig+0x15c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a32      	ldr	r2, [pc, #200]	@ (800643c <TIM_Base_SetConfig+0x160>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a31      	ldr	r2, [pc, #196]	@ (8006440 <TIM_Base_SetConfig+0x164>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_Base_SetConfig+0xaa>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2c      	ldr	r2, [pc, #176]	@ (8006434 <TIM_Base_SetConfig+0x158>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d108      	bne.n	8006398 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800638c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a18      	ldr	r2, [pc, #96]	@ (8006420 <TIM_Base_SetConfig+0x144>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d013      	beq.n	80063ec <TIM_Base_SetConfig+0x110>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006430 <TIM_Base_SetConfig+0x154>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00f      	beq.n	80063ec <TIM_Base_SetConfig+0x110>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006438 <TIM_Base_SetConfig+0x15c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00b      	beq.n	80063ec <TIM_Base_SetConfig+0x110>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a19      	ldr	r2, [pc, #100]	@ (800643c <TIM_Base_SetConfig+0x160>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_Base_SetConfig+0x110>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a18      	ldr	r2, [pc, #96]	@ (8006440 <TIM_Base_SetConfig+0x164>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_Base_SetConfig+0x110>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a13      	ldr	r2, [pc, #76]	@ (8006434 <TIM_Base_SetConfig+0x158>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d103      	bne.n	80063f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f023 0201 	bic.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	611a      	str	r2, [r3, #16]
  }
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00
 8006430:	40013400 	.word	0x40013400
 8006434:	40015000 	.word	0x40015000
 8006438:	40014000 	.word	0x40014000
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800

08006444 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e042      	b.n	8006568 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fb fdd3 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2224      	movs	r2, #36	@ 0x24
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 f806 	bl	800752c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fd07 	bl	8006f34 <UART_SetConfig>
 8006526:	4603      	mov	r3, r0
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e01b      	b.n	8006568 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800653e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800654e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 f885 	bl	8007670 <UART_CheckIdleState>
 8006566:	4603      	mov	r3, r0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	@ 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006584:	2b20      	cmp	r3, #32
 8006586:	d167      	bne.n	8006658 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Transmit_DMA+0x24>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e060      	b.n	800665a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	88fa      	ldrh	r2, [r7, #6]
 80065a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2221      	movs	r2, #33	@ 0x21
 80065ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d028      	beq.n	8006618 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ca:	4a26      	ldr	r2, [pc, #152]	@ (8006664 <HAL_UART_Transmit_DMA+0xf4>)
 80065cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065d2:	4a25      	ldr	r2, [pc, #148]	@ (8006668 <HAL_UART_Transmit_DMA+0xf8>)
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065da:	4a24      	ldr	r2, [pc, #144]	@ (800666c <HAL_UART_Transmit_DMA+0xfc>)
 80065dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065e2:	2200      	movs	r2, #0
 80065e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ee:	4619      	mov	r1, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3328      	adds	r3, #40	@ 0x28
 80065f6:	461a      	mov	r2, r3
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	f7fd ff4f 	bl	800449c <HAL_DMA_Start_IT>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2210      	movs	r2, #16
 8006608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e020      	b.n	800665a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2240      	movs	r2, #64	@ 0x40
 800661e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	613b      	str	r3, [r7, #16]
   return(result);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006640:	623a      	str	r2, [r7, #32]
 8006642:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	69f9      	ldr	r1, [r7, #28]
 8006646:	6a3a      	ldr	r2, [r7, #32]
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	61bb      	str	r3, [r7, #24]
   return(result);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e5      	bne.n	8006620 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	e000      	b.n	800665a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
  }
}
 800665a:	4618      	mov	r0, r3
 800665c:	3728      	adds	r7, #40	@ 0x28
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	08007b3b 	.word	0x08007b3b
 8006668:	08007bd5 	.word	0x08007bd5
 800666c:	08007d5b 	.word	0x08007d5b

08006670 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	@ 0x28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006684:	2b20      	cmp	r3, #32
 8006686:	d137      	bne.n	80066f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_UART_Receive_DMA+0x24>
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e030      	b.n	80066fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a18      	ldr	r2, [pc, #96]	@ (8006704 <HAL_UART_Receive_DMA+0x94>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d01f      	beq.n	80066e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d018      	beq.n	80066e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	623b      	str	r3, [r7, #32]
 80066d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69f9      	ldr	r1, [r7, #28]
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e6      	bne.n	80066b6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f001 f8d6 	bl	80078a0 <UART_Start_Receive_DMA>
 80066f4:	4603      	mov	r3, r0
 80066f6:	e000      	b.n	80066fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3728      	adds	r7, #40	@ 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40008000 	.word	0x40008000

08006708 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b090      	sub	sp, #64	@ 0x40
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800671e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672a:	2b80      	cmp	r3, #128	@ 0x80
 800672c:	d139      	bne.n	80067a2 <HAL_UART_DMAStop+0x9a>
 800672e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006730:	2b21      	cmp	r3, #33	@ 0x21
 8006732:	d136      	bne.n	80067a2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	61fb      	str	r3, [r7, #28]
   return(result);
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800674a:	637b      	str	r3, [r7, #52]	@ 0x34
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3308      	adds	r3, #8
 8006752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800675a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e5      	bne.n	8006734 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006774:	4618      	mov	r0, r3
 8006776:	f7fd ff0c 	bl	8004592 <HAL_DMA_Abort>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe f873 	bl	8004870 <HAL_DMA_GetError>
 800678a:	4603      	mov	r3, r0
 800678c:	2b20      	cmp	r3, #32
 800678e:	d105      	bne.n	800679c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2210      	movs	r2, #16
 8006794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e047      	b.n	800682c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f925 	bl	80079ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ac:	2b40      	cmp	r3, #64	@ 0x40
 80067ae:	d13c      	bne.n	800682a <HAL_UART_DMAStop+0x122>
 80067b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b2:	2b22      	cmp	r3, #34	@ 0x22
 80067b4:	d139      	bne.n	800682a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d6:	61ba      	str	r2, [r7, #24]
 80067d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6979      	ldr	r1, [r7, #20]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	613b      	str	r3, [r7, #16]
   return(result);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d017      	beq.n	8006824 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd fec9 	bl	8004592 <HAL_DMA_Abort>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe f82f 	bl	8004870 <HAL_DMA_GetError>
 8006812:	4603      	mov	r3, r0
 8006814:	2b20      	cmp	r3, #32
 8006816:	d105      	bne.n	8006824 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2210      	movs	r2, #16
 800681c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e003      	b.n	800682c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 f922 	bl	8007a6e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3740      	adds	r7, #64	@ 0x40
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b0ba      	sub	sp, #232	@ 0xe8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800685a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800685e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006862:	4013      	ands	r3, r2
 8006864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d11b      	bne.n	80068a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d015      	beq.n	80068a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800688c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 8300 	beq.w	8006e9e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
      }
      return;
 80068a6:	e2fa      	b.n	8006e9e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8123 	beq.w	8006af8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80068b6:	4b8d      	ldr	r3, [pc, #564]	@ (8006aec <HAL_UART_IRQHandler+0x2b8>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80068c2:	4b8b      	ldr	r3, [pc, #556]	@ (8006af0 <HAL_UART_IRQHandler+0x2bc>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8116 	beq.w	8006af8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d011      	beq.n	80068fc <HAL_UART_IRQHandler+0xc8>
 80068d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2201      	movs	r2, #1
 80068ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d011      	beq.n	800692c <HAL_UART_IRQHandler+0xf8>
 8006908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2202      	movs	r2, #2
 800691a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	f043 0204 	orr.w	r2, r3, #4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800692c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d011      	beq.n	800695c <HAL_UART_IRQHandler+0x128>
 8006938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2204      	movs	r2, #4
 800694a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006952:	f043 0202 	orr.w	r2, r3, #2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d105      	bne.n	8006980 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006974:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006978:	4b5c      	ldr	r3, [pc, #368]	@ (8006aec <HAL_UART_IRQHandler+0x2b8>)
 800697a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2208      	movs	r2, #8
 8006986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698e:	f043 0208 	orr.w	r2, r3, #8
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800699c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d012      	beq.n	80069ca <HAL_UART_IRQHandler+0x196>
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c0:	f043 0220 	orr.w	r2, r3, #32
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8266 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d013      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1e:	2b40      	cmp	r3, #64	@ 0x40
 8006a20:	d005      	beq.n	8006a2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d054      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 f81d 	bl	8007a6e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3e:	2b40      	cmp	r3, #64	@ 0x40
 8006a40:	d146      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1d9      	bne.n	8006a42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a9e:	4a15      	ldr	r2, [pc, #84]	@ (8006af4 <HAL_UART_IRQHandler+0x2c0>)
 8006aa0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fd fdcb 	bl	8004644 <HAL_DMA_Abort_IT>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d019      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac6:	e00f      	b.n	8006ae8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fa1d 	bl	8006f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ace:	e00b      	b.n	8006ae8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa19 	bl	8006f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad6:	e007      	b.n	8006ae8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fa15 	bl	8006f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006ae6:	e1dc      	b.n	8006ea2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	bf00      	nop
    return;
 8006aea:	e1da      	b.n	8006ea2 <HAL_UART_IRQHandler+0x66e>
 8006aec:	10000001 	.word	0x10000001
 8006af0:	04000120 	.word	0x04000120
 8006af4:	08007ddb 	.word	0x08007ddb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	f040 8170 	bne.w	8006de2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 8169 	beq.w	8006de2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8162 	beq.w	8006de2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2210      	movs	r2, #16
 8006b24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b30:	2b40      	cmp	r3, #64	@ 0x40
 8006b32:	f040 80d8 	bne.w	8006ce6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80af 	beq.w	8006cac <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	f080 80a7 	bcs.w	8006cac <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 8087 	bne.w	8006c8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006baa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1da      	bne.n	8006b7c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e1      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3308      	adds	r3, #8
 8006c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e3      	bne.n	8006c02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c58:	f023 0310 	bic.w	r3, r3, #16
 8006c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e4      	bne.n	8006c48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fd fc84 	bl	8004592 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f939 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006caa:	e0fc      	b.n	8006ea6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	f040 80f5 	bne.w	8006ea6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	f040 80eb 	bne.w	8006ea6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f91c 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
      return;
 8006ce4:	e0df      	b.n	8006ea6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80d1 	beq.w	8006eaa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80cc 	beq.w	8006eaa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e4      	bne.n	8006d12 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	623b      	str	r3, [r7, #32]
   return(result);
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d70:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e1      	bne.n	8006d48 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	69b9      	ldr	r1, [r7, #24]
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e4      	bne.n	8006d98 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f89e 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006de0:	e063      	b.n	8006eaa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00e      	beq.n	8006e0c <HAL_UART_IRQHandler+0x5d8>
 8006dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d008      	beq.n	8006e0c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f825 	bl	8007e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e0a:	e051      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d014      	beq.n	8006e42 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d03a      	beq.n	8006eae <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
    }
    return;
 8006e40:	e035      	b.n	8006eae <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <HAL_UART_IRQHandler+0x62e>
 8006e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 ffcf 	bl	8007dfe <UART_EndTransmit_IT>
    return;
 8006e60:	e026      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <HAL_UART_IRQHandler+0x64e>
 8006e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fffe 	bl	8007e7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e80:	e016      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d010      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
 8006e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	da0c      	bge.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 ffe6 	bl	8007e68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e9c:	e008      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
      return;
 8006e9e:	bf00      	nop
 8006ea0:	e006      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
    return;
 8006ea2:	bf00      	nop
 8006ea4:	e004      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
      return;
 8006ea6:	bf00      	nop
 8006ea8:	e002      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
      return;
 8006eaa:	bf00      	nop
 8006eac:	e000      	b.n	8006eb0 <HAL_UART_IRQHandler+0x67c>
    return;
 8006eae:	bf00      	nop
  }
}
 8006eb0:	37e8      	adds	r7, #232	@ 0xe8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop

08006eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f38:	b08c      	sub	sp, #48	@ 0x30
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4baa      	ldr	r3, [pc, #680]	@ (800720c <UART_SetConfig+0x2d8>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a9f      	ldr	r2, [pc, #636]	@ (8007210 <UART_SetConfig+0x2dc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d004      	beq.n	8006fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006faa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	f023 010f 	bic.w	r1, r3, #15
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a90      	ldr	r2, [pc, #576]	@ (8007214 <UART_SetConfig+0x2e0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d125      	bne.n	8007024 <UART_SetConfig+0xf0>
 8006fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8007218 <UART_SetConfig+0x2e4>)
 8006fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d81a      	bhi.n	800701c <UART_SetConfig+0xe8>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0xb8>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007002:	e116      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700a:	e112      	b.n	8007232 <UART_SetConfig+0x2fe>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007012:	e10e      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701a:	e10a      	b.n	8007232 <UART_SetConfig+0x2fe>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e106      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a7c      	ldr	r2, [pc, #496]	@ (800721c <UART_SetConfig+0x2e8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d138      	bne.n	80070a0 <UART_SetConfig+0x16c>
 800702e:	4b7a      	ldr	r3, [pc, #488]	@ (8007218 <UART_SetConfig+0x2e4>)
 8007030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007034:	f003 030c 	and.w	r3, r3, #12
 8007038:	2b0c      	cmp	r3, #12
 800703a:	d82d      	bhi.n	8007098 <UART_SetConfig+0x164>
 800703c:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <UART_SetConfig+0x110>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007079 	.word	0x08007079
 8007048:	08007099 	.word	0x08007099
 800704c:	08007099 	.word	0x08007099
 8007050:	08007099 	.word	0x08007099
 8007054:	08007089 	.word	0x08007089
 8007058:	08007099 	.word	0x08007099
 800705c:	08007099 	.word	0x08007099
 8007060:	08007099 	.word	0x08007099
 8007064:	08007081 	.word	0x08007081
 8007068:	08007099 	.word	0x08007099
 800706c:	08007099 	.word	0x08007099
 8007070:	08007099 	.word	0x08007099
 8007074:	08007091 	.word	0x08007091
 8007078:	2300      	movs	r3, #0
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707e:	e0d8      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007080:	2302      	movs	r3, #2
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007086:	e0d4      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007088:	2304      	movs	r3, #4
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708e:	e0d0      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007090:	2308      	movs	r3, #8
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007096:	e0cc      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007098:	2310      	movs	r3, #16
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709e:	e0c8      	b.n	8007232 <UART_SetConfig+0x2fe>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007220 <UART_SetConfig+0x2ec>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d125      	bne.n	80070f6 <UART_SetConfig+0x1c2>
 80070aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007218 <UART_SetConfig+0x2e4>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070b4:	2b30      	cmp	r3, #48	@ 0x30
 80070b6:	d016      	beq.n	80070e6 <UART_SetConfig+0x1b2>
 80070b8:	2b30      	cmp	r3, #48	@ 0x30
 80070ba:	d818      	bhi.n	80070ee <UART_SetConfig+0x1ba>
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d00a      	beq.n	80070d6 <UART_SetConfig+0x1a2>
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d814      	bhi.n	80070ee <UART_SetConfig+0x1ba>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <UART_SetConfig+0x19a>
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d008      	beq.n	80070de <UART_SetConfig+0x1aa>
 80070cc:	e00f      	b.n	80070ee <UART_SetConfig+0x1ba>
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d4:	e0ad      	b.n	8007232 <UART_SetConfig+0x2fe>
 80070d6:	2302      	movs	r3, #2
 80070d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070dc:	e0a9      	b.n	8007232 <UART_SetConfig+0x2fe>
 80070de:	2304      	movs	r3, #4
 80070e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e4:	e0a5      	b.n	8007232 <UART_SetConfig+0x2fe>
 80070e6:	2308      	movs	r3, #8
 80070e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ec:	e0a1      	b.n	8007232 <UART_SetConfig+0x2fe>
 80070ee:	2310      	movs	r3, #16
 80070f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f4:	e09d      	b.n	8007232 <UART_SetConfig+0x2fe>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a4a      	ldr	r2, [pc, #296]	@ (8007224 <UART_SetConfig+0x2f0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d125      	bne.n	800714c <UART_SetConfig+0x218>
 8007100:	4b45      	ldr	r3, [pc, #276]	@ (8007218 <UART_SetConfig+0x2e4>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007106:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800710a:	2bc0      	cmp	r3, #192	@ 0xc0
 800710c:	d016      	beq.n	800713c <UART_SetConfig+0x208>
 800710e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007110:	d818      	bhi.n	8007144 <UART_SetConfig+0x210>
 8007112:	2b80      	cmp	r3, #128	@ 0x80
 8007114:	d00a      	beq.n	800712c <UART_SetConfig+0x1f8>
 8007116:	2b80      	cmp	r3, #128	@ 0x80
 8007118:	d814      	bhi.n	8007144 <UART_SetConfig+0x210>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <UART_SetConfig+0x1f0>
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d008      	beq.n	8007134 <UART_SetConfig+0x200>
 8007122:	e00f      	b.n	8007144 <UART_SetConfig+0x210>
 8007124:	2300      	movs	r3, #0
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712a:	e082      	b.n	8007232 <UART_SetConfig+0x2fe>
 800712c:	2302      	movs	r3, #2
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007132:	e07e      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007134:	2304      	movs	r3, #4
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713a:	e07a      	b.n	8007232 <UART_SetConfig+0x2fe>
 800713c:	2308      	movs	r3, #8
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007142:	e076      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007144:	2310      	movs	r3, #16
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714a:	e072      	b.n	8007232 <UART_SetConfig+0x2fe>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a35      	ldr	r2, [pc, #212]	@ (8007228 <UART_SetConfig+0x2f4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d12a      	bne.n	80071ac <UART_SetConfig+0x278>
 8007156:	4b30      	ldr	r3, [pc, #192]	@ (8007218 <UART_SetConfig+0x2e4>)
 8007158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007164:	d01a      	beq.n	800719c <UART_SetConfig+0x268>
 8007166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716a:	d81b      	bhi.n	80071a4 <UART_SetConfig+0x270>
 800716c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007170:	d00c      	beq.n	800718c <UART_SetConfig+0x258>
 8007172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007176:	d815      	bhi.n	80071a4 <UART_SetConfig+0x270>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <UART_SetConfig+0x250>
 800717c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007180:	d008      	beq.n	8007194 <UART_SetConfig+0x260>
 8007182:	e00f      	b.n	80071a4 <UART_SetConfig+0x270>
 8007184:	2300      	movs	r3, #0
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e052      	b.n	8007232 <UART_SetConfig+0x2fe>
 800718c:	2302      	movs	r3, #2
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e04e      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007194:	2304      	movs	r3, #4
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e04a      	b.n	8007232 <UART_SetConfig+0x2fe>
 800719c:	2308      	movs	r3, #8
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e046      	b.n	8007232 <UART_SetConfig+0x2fe>
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071aa:	e042      	b.n	8007232 <UART_SetConfig+0x2fe>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a17      	ldr	r2, [pc, #92]	@ (8007210 <UART_SetConfig+0x2dc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d13a      	bne.n	800722c <UART_SetConfig+0x2f8>
 80071b6:	4b18      	ldr	r3, [pc, #96]	@ (8007218 <UART_SetConfig+0x2e4>)
 80071b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071c4:	d01a      	beq.n	80071fc <UART_SetConfig+0x2c8>
 80071c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071ca:	d81b      	bhi.n	8007204 <UART_SetConfig+0x2d0>
 80071cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d0:	d00c      	beq.n	80071ec <UART_SetConfig+0x2b8>
 80071d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d6:	d815      	bhi.n	8007204 <UART_SetConfig+0x2d0>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <UART_SetConfig+0x2b0>
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071e0:	d008      	beq.n	80071f4 <UART_SetConfig+0x2c0>
 80071e2:	e00f      	b.n	8007204 <UART_SetConfig+0x2d0>
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e022      	b.n	8007232 <UART_SetConfig+0x2fe>
 80071ec:	2302      	movs	r3, #2
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	e01e      	b.n	8007232 <UART_SetConfig+0x2fe>
 80071f4:	2304      	movs	r3, #4
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	e01a      	b.n	8007232 <UART_SetConfig+0x2fe>
 80071fc:	2308      	movs	r3, #8
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007202:	e016      	b.n	8007232 <UART_SetConfig+0x2fe>
 8007204:	2310      	movs	r3, #16
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720a:	e012      	b.n	8007232 <UART_SetConfig+0x2fe>
 800720c:	cfff69f3 	.word	0xcfff69f3
 8007210:	40008000 	.word	0x40008000
 8007214:	40013800 	.word	0x40013800
 8007218:	40021000 	.word	0x40021000
 800721c:	40004400 	.word	0x40004400
 8007220:	40004800 	.word	0x40004800
 8007224:	40004c00 	.word	0x40004c00
 8007228:	40005000 	.word	0x40005000
 800722c:	2310      	movs	r3, #16
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4aae      	ldr	r2, [pc, #696]	@ (80074f0 <UART_SetConfig+0x5bc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	f040 8097 	bne.w	800736c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800723e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007242:	2b08      	cmp	r3, #8
 8007244:	d823      	bhi.n	800728e <UART_SetConfig+0x35a>
 8007246:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <UART_SetConfig+0x318>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	08007271 	.word	0x08007271
 8007250:	0800728f 	.word	0x0800728f
 8007254:	08007279 	.word	0x08007279
 8007258:	0800728f 	.word	0x0800728f
 800725c:	0800727f 	.word	0x0800727f
 8007260:	0800728f 	.word	0x0800728f
 8007264:	0800728f 	.word	0x0800728f
 8007268:	0800728f 	.word	0x0800728f
 800726c:	08007287 	.word	0x08007287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007270:	f7fe faf0 	bl	8005854 <HAL_RCC_GetPCLK1Freq>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007276:	e010      	b.n	800729a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007278:	4b9e      	ldr	r3, [pc, #632]	@ (80074f4 <UART_SetConfig+0x5c0>)
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800727c:	e00d      	b.n	800729a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727e:	f7fe fa7b 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 8007282:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007284:	e009      	b.n	800729a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800728c:	e005      	b.n	800729a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8130 	beq.w	8007502 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	4a94      	ldr	r2, [pc, #592]	@ (80074f8 <UART_SetConfig+0x5c4>)
 80072a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ac:	461a      	mov	r2, r3
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4413      	add	r3, r2
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d305      	bcc.n	80072d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d903      	bls.n	80072da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072d8:	e113      	b.n	8007502 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	2200      	movs	r2, #0
 80072de:	60bb      	str	r3, [r7, #8]
 80072e0:	60fa      	str	r2, [r7, #12]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	4a84      	ldr	r2, [pc, #528]	@ (80074f8 <UART_SetConfig+0x5c4>)
 80072e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2200      	movs	r2, #0
 80072f0:	603b      	str	r3, [r7, #0]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072fc:	f7f9 fa54 	bl	80007a8 <__aeabi_uldivmod>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4610      	mov	r0, r2
 8007306:	4619      	mov	r1, r3
 8007308:	f04f 0200 	mov.w	r2, #0
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	020b      	lsls	r3, r1, #8
 8007312:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007316:	0202      	lsls	r2, r0, #8
 8007318:	6979      	ldr	r1, [r7, #20]
 800731a:	6849      	ldr	r1, [r1, #4]
 800731c:	0849      	lsrs	r1, r1, #1
 800731e:	2000      	movs	r0, #0
 8007320:	460c      	mov	r4, r1
 8007322:	4605      	mov	r5, r0
 8007324:	eb12 0804 	adds.w	r8, r2, r4
 8007328:	eb43 0905 	adc.w	r9, r3, r5
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	469a      	mov	sl, r3
 8007334:	4693      	mov	fp, r2
 8007336:	4652      	mov	r2, sl
 8007338:	465b      	mov	r3, fp
 800733a:	4640      	mov	r0, r8
 800733c:	4649      	mov	r1, r9
 800733e:	f7f9 fa33 	bl	80007a8 <__aeabi_uldivmod>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4613      	mov	r3, r2
 8007348:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007350:	d308      	bcc.n	8007364 <UART_SetConfig+0x430>
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007358:	d204      	bcs.n	8007364 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6a3a      	ldr	r2, [r7, #32]
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	e0ce      	b.n	8007502 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800736a:	e0ca      	b.n	8007502 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007374:	d166      	bne.n	8007444 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007376:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800737a:	2b08      	cmp	r3, #8
 800737c:	d827      	bhi.n	80073ce <UART_SetConfig+0x49a>
 800737e:	a201      	add	r2, pc, #4	@ (adr r2, 8007384 <UART_SetConfig+0x450>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073b1 	.word	0x080073b1
 800738c:	080073b9 	.word	0x080073b9
 8007390:	080073cf 	.word	0x080073cf
 8007394:	080073bf 	.word	0x080073bf
 8007398:	080073cf 	.word	0x080073cf
 800739c:	080073cf 	.word	0x080073cf
 80073a0:	080073cf 	.word	0x080073cf
 80073a4:	080073c7 	.word	0x080073c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a8:	f7fe fa54 	bl	8005854 <HAL_RCC_GetPCLK1Freq>
 80073ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ae:	e014      	b.n	80073da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b0:	f7fe fa66 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 80073b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073b6:	e010      	b.n	80073da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b8:	4b4e      	ldr	r3, [pc, #312]	@ (80074f4 <UART_SetConfig+0x5c0>)
 80073ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073bc:	e00d      	b.n	80073da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073be:	f7fe f9db 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 80073c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073c4:	e009      	b.n	80073da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073cc:	e005      	b.n	80073da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8090 	beq.w	8007502 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	4a44      	ldr	r2, [pc, #272]	@ (80074f8 <UART_SetConfig+0x5c4>)
 80073e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f4:	005a      	lsls	r2, r3, #1
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	441a      	add	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
 8007406:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	2b0f      	cmp	r3, #15
 800740c:	d916      	bls.n	800743c <UART_SetConfig+0x508>
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007414:	d212      	bcs.n	800743c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	b29b      	uxth	r3, r3
 800741a:	f023 030f 	bic.w	r3, r3, #15
 800741e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	b29b      	uxth	r3, r3
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	b29a      	uxth	r2, r3
 800742c:	8bfb      	ldrh	r3, [r7, #30]
 800742e:	4313      	orrs	r3, r2
 8007430:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	8bfa      	ldrh	r2, [r7, #30]
 8007438:	60da      	str	r2, [r3, #12]
 800743a:	e062      	b.n	8007502 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007442:	e05e      	b.n	8007502 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007444:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007448:	2b08      	cmp	r3, #8
 800744a:	d828      	bhi.n	800749e <UART_SetConfig+0x56a>
 800744c:	a201      	add	r2, pc, #4	@ (adr r2, 8007454 <UART_SetConfig+0x520>)
 800744e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007452:	bf00      	nop
 8007454:	08007479 	.word	0x08007479
 8007458:	08007481 	.word	0x08007481
 800745c:	08007489 	.word	0x08007489
 8007460:	0800749f 	.word	0x0800749f
 8007464:	0800748f 	.word	0x0800748f
 8007468:	0800749f 	.word	0x0800749f
 800746c:	0800749f 	.word	0x0800749f
 8007470:	0800749f 	.word	0x0800749f
 8007474:	08007497 	.word	0x08007497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007478:	f7fe f9ec 	bl	8005854 <HAL_RCC_GetPCLK1Freq>
 800747c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800747e:	e014      	b.n	80074aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007480:	f7fe f9fe 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 8007484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007486:	e010      	b.n	80074aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007488:	4b1a      	ldr	r3, [pc, #104]	@ (80074f4 <UART_SetConfig+0x5c0>)
 800748a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800748c:	e00d      	b.n	80074aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748e:	f7fe f973 	bl	8005778 <HAL_RCC_GetSysClockFreq>
 8007492:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007494:	e009      	b.n	80074aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800749c:	e005      	b.n	80074aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074a8:	bf00      	nop
    }

    if (pclk != 0U)
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d028      	beq.n	8007502 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	4a10      	ldr	r2, [pc, #64]	@ (80074f8 <UART_SetConfig+0x5c4>)
 80074b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	fbb3 f2f2 	udiv	r2, r3, r2
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	441a      	add	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d910      	bls.n	80074fc <UART_SetConfig+0x5c8>
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e0:	d20c      	bcs.n	80074fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60da      	str	r2, [r3, #12]
 80074ec:	e009      	b.n	8007502 <UART_SetConfig+0x5ce>
 80074ee:	bf00      	nop
 80074f0:	40008000 	.word	0x40008000
 80074f4:	00f42400 	.word	0x00f42400
 80074f8:	08018dd4 	.word	0x08018dd4
      }
      else
      {
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2201      	movs	r2, #1
 8007506:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2201      	movs	r2, #1
 800750e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2200      	movs	r2, #0
 8007516:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2200      	movs	r2, #0
 800751c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800751e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007522:	4618      	mov	r0, r3
 8007524:	3730      	adds	r7, #48	@ 0x30
 8007526:	46bd      	mov	sp, r7
 8007528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800752c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01a      	beq.n	8007642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800762a:	d10a      	bne.n	8007642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b098      	sub	sp, #96	@ 0x60
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007680:	f7fa fe20 	bl	80022c4 <HAL_GetTick>
 8007684:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b08      	cmp	r3, #8
 8007692:	d12f      	bne.n	80076f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007694:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800769c:	2200      	movs	r2, #0
 800769e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f88e 	bl	80077c4 <UART_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d022      	beq.n	80076f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e6      	bne.n	80076ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e063      	b.n	80077bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d149      	bne.n	8007796 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007702:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800770a:	2200      	movs	r2, #0
 800770c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f857 	bl	80077c4 <UART_WaitOnFlagUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d03c      	beq.n	8007796 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	623b      	str	r3, [r7, #32]
   return(result);
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773a:	633b      	str	r3, [r7, #48]	@ 0x30
 800773c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e6      	bne.n	800771c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3308      	adds	r3, #8
 8007754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	60fb      	str	r3, [r7, #12]
   return(result);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f023 0301 	bic.w	r3, r3, #1
 8007764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3308      	adds	r3, #8
 800776c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800776e:	61fa      	str	r2, [r7, #28]
 8007770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	69b9      	ldr	r1, [r7, #24]
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	617b      	str	r3, [r7, #20]
   return(result);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e5      	bne.n	800774e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2220      	movs	r2, #32
 8007786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e012      	b.n	80077bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3758      	adds	r7, #88	@ 0x58
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d4:	e04f      	b.n	8007876 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077dc:	d04b      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fa fd71 	bl	80022c4 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e04e      	b.n	8007896 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	d037      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b80      	cmp	r3, #128	@ 0x80
 800780a:	d034      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b40      	cmp	r3, #64	@ 0x40
 8007810:	d031      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b08      	cmp	r3, #8
 800781e:	d110      	bne.n	8007842 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2208      	movs	r2, #8
 8007826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f920 	bl	8007a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2208      	movs	r2, #8
 8007832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e029      	b.n	8007896 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800784c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007850:	d111      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800785a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f906 	bl	8007a6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e00f      	b.n	8007896 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4013      	ands	r3, r2
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	429a      	cmp	r2, r3
 8007884:	bf0c      	ite	eq
 8007886:	2301      	moveq	r3, #1
 8007888:	2300      	movne	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	429a      	cmp	r2, r3
 8007892:	d0a0      	beq.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b096      	sub	sp, #88	@ 0x58
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2222      	movs	r2, #34	@ 0x22
 80078c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d02d      	beq.n	8007932 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078dc:	4a40      	ldr	r2, [pc, #256]	@ (80079e0 <UART_Start_Receive_DMA+0x140>)
 80078de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e6:	4a3f      	ldr	r2, [pc, #252]	@ (80079e4 <UART_Start_Receive_DMA+0x144>)
 80078e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f0:	4a3d      	ldr	r2, [pc, #244]	@ (80079e8 <UART_Start_Receive_DMA+0x148>)
 80078f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fa:	2200      	movs	r2, #0
 80078fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3324      	adds	r3, #36	@ 0x24
 800790a:	4619      	mov	r1, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007910:	461a      	mov	r2, r3
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	f7fc fdc2 	bl	800449c <HAL_DMA_Start_IT>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2210      	movs	r2, #16
 8007922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e051      	b.n	80079d6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d018      	beq.n	800796c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800794e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800795a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800795e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e6      	bne.n	800793a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3308      	adds	r3, #8
 8007972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800797c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797e:	f043 0301 	orr.w	r3, r3, #1
 8007982:	653b      	str	r3, [r7, #80]	@ 0x50
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800798c:	637a      	str	r2, [r7, #52]	@ 0x34
 800798e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800799a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e5      	bne.n	800796c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	613b      	str	r3, [r7, #16]
   return(result);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079c0:	623a      	str	r2, [r7, #32]
 80079c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	6a3a      	ldr	r2, [r7, #32]
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3758      	adds	r7, #88	@ 0x58
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	08007bf1 	.word	0x08007bf1
 80079e4:	08007d1d 	.word	0x08007d1d
 80079e8:	08007d5b 	.word	0x08007d5b

080079ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b08f      	sub	sp, #60	@ 0x3c
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a14:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a46:	61ba      	str	r2, [r7, #24]
 8007a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6979      	ldr	r1, [r7, #20]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	613b      	str	r3, [r7, #16]
   return(result);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007a62:	bf00      	nop
 8007a64:	373c      	adds	r7, #60	@ 0x3c
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b095      	sub	sp, #84	@ 0x54
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e3      	bne.n	8007aa8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d118      	bne.n	8007b1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 0310 	bic.w	r3, r3, #16
 8007afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b06:	61bb      	str	r3, [r7, #24]
 8007b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	613b      	str	r3, [r7, #16]
   return(result);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e6      	bne.n	8007ae8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b2e:	bf00      	nop
 8007b30:	3754      	adds	r7, #84	@ 0x54
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b090      	sub	sp, #64	@ 0x40
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d137      	bne.n	8007bc6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	69b9      	ldr	r1, [r7, #24]
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e6      	bne.n	8007b92 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bc4:	e002      	b.n	8007bcc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bc6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007bc8:	f7ff f976 	bl	8006eb8 <HAL_UART_TxCpltCallback>
}
 8007bcc:	bf00      	nop
 8007bce:	3740      	adds	r7, #64	@ 0x40
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff f972 	bl	8006ecc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b09c      	sub	sp, #112	@ 0x70
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d171      	bne.n	8007cf0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e6      	bne.n	8007c14 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c58:	f023 0301 	bic.w	r3, r3, #1
 8007c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3308      	adds	r3, #8
 8007c64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e5      	bne.n	8007c46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c90:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3308      	adds	r3, #8
 8007c98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e5      	bne.n	8007c7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d118      	bne.n	8007cf0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0310 	bic.w	r3, r3, #16
 8007cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	69b9      	ldr	r1, [r7, #24]
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e6      	bne.n	8007cbe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d107      	bne.n	8007d0e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d04:	4619      	mov	r1, r3
 8007d06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d08:	f7ff f908 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d0c:	e002      	b.n	8007d14 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d10:	f7ff f8e6 	bl	8006ee0 <HAL_UART_RxCpltCallback>
}
 8007d14:	bf00      	nop
 8007d16:	3770      	adds	r7, #112	@ 0x70
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d109      	bne.n	8007d4c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	4619      	mov	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff f8e9 	bl	8006f1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d4a:	e002      	b.n	8007d52 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff f8d1 	bl	8006ef4 <HAL_UART_RxHalfCpltCallback>
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d66:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d82:	2b80      	cmp	r3, #128	@ 0x80
 8007d84:	d109      	bne.n	8007d9a <UART_DMAError+0x40>
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b21      	cmp	r3, #33	@ 0x21
 8007d8a:	d106      	bne.n	8007d9a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007d94:	6978      	ldr	r0, [r7, #20]
 8007d96:	f7ff fe29 	bl	80079ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da4:	2b40      	cmp	r3, #64	@ 0x40
 8007da6:	d109      	bne.n	8007dbc <UART_DMAError+0x62>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b22      	cmp	r3, #34	@ 0x22
 8007dac:	d106      	bne.n	8007dbc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007db6:	6978      	ldr	r0, [r7, #20]
 8007db8:	f7ff fe59 	bl	8007a6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc2:	f043 0210 	orr.w	r2, r3, #16
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dcc:	6978      	ldr	r0, [r7, #20]
 8007dce:	f7ff f89b 	bl	8006f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dd2:	bf00      	nop
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff f889 	bl	8006f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b088      	sub	sp, #32
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1a:	61fb      	str	r3, [r7, #28]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6979      	ldr	r1, [r7, #20]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	613b      	str	r3, [r7, #16]
   return(result);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff f836 	bl	8006eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4c:	bf00      	nop
 8007e4e:	3720      	adds	r7, #32
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e027      	b.n	8007ef6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2224      	movs	r2, #36	@ 0x24
 8007eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ed4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e02d      	b.n	8007f76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2224      	movs	r2, #36	@ 0x24
 8007f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f850 	bl	8007ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e02d      	b.n	8007ff2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2224      	movs	r2, #36	@ 0x24
 8007fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f812 	bl	8007ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008008:	2b00      	cmp	r3, #0
 800800a:	d108      	bne.n	800801e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800801c:	e031      	b.n	8008082 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800801e:	2308      	movs	r3, #8
 8008020:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008022:	2308      	movs	r3, #8
 8008024:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	0e5b      	lsrs	r3, r3, #25
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	0f5b      	lsrs	r3, r3, #29
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	7b3a      	ldrb	r2, [r7, #12]
 800804a:	4911      	ldr	r1, [pc, #68]	@ (8008090 <UARTEx_SetNbDataToProcess+0x94>)
 800804c:	5c8a      	ldrb	r2, [r1, r2]
 800804e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008052:	7b3a      	ldrb	r2, [r7, #12]
 8008054:	490f      	ldr	r1, [pc, #60]	@ (8008094 <UARTEx_SetNbDataToProcess+0x98>)
 8008056:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008058:	fb93 f3f2 	sdiv	r3, r3, r2
 800805c:	b29a      	uxth	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	7b7a      	ldrb	r2, [r7, #13]
 8008068:	4909      	ldr	r1, [pc, #36]	@ (8008090 <UARTEx_SetNbDataToProcess+0x94>)
 800806a:	5c8a      	ldrb	r2, [r1, r2]
 800806c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008070:	7b7a      	ldrb	r2, [r7, #13]
 8008072:	4908      	ldr	r1, [pc, #32]	@ (8008094 <UARTEx_SetNbDataToProcess+0x98>)
 8008074:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008076:	fb93 f3f2 	sdiv	r3, r3, r2
 800807a:	b29a      	uxth	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	08018dec 	.word	0x08018dec
 8008094:	08018df4 	.word	0x08018df4

08008098 <__NVIC_SetPriority>:
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	db0a      	blt.n	80080c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	490c      	ldr	r1, [pc, #48]	@ (80080e4 <__NVIC_SetPriority+0x4c>)
 80080b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b6:	0112      	lsls	r2, r2, #4
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	440b      	add	r3, r1
 80080bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80080c0:	e00a      	b.n	80080d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	4908      	ldr	r1, [pc, #32]	@ (80080e8 <__NVIC_SetPriority+0x50>)
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	3b04      	subs	r3, #4
 80080d0:	0112      	lsls	r2, r2, #4
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	440b      	add	r3, r1
 80080d6:	761a      	strb	r2, [r3, #24]
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	e000e100 	.word	0xe000e100
 80080e8:	e000ed00 	.word	0xe000ed00

080080ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80080f0:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <SysTick_Handler+0x1c>)
 80080f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80080f4:	f001 fd40 	bl	8009b78 <xTaskGetSchedulerState>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d001      	beq.n	8008102 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80080fe:	f002 fb3b 	bl	800a778 <xPortSysTickHandler>
  }
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	e000e010 	.word	0xe000e010

0800810c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008110:	2100      	movs	r1, #0
 8008112:	f06f 0004 	mvn.w	r0, #4
 8008116:	f7ff ffbf 	bl	8008098 <__NVIC_SetPriority>
#endif
}
 800811a:	bf00      	nop
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008126:	f3ef 8305 	mrs	r3, IPSR
 800812a:	603b      	str	r3, [r7, #0]
  return(result);
 800812c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008132:	f06f 0305 	mvn.w	r3, #5
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	e00c      	b.n	8008154 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800813a:	4b0a      	ldr	r3, [pc, #40]	@ (8008164 <osKernelInitialize+0x44>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008142:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <osKernelInitialize+0x44>)
 8008144:	2201      	movs	r2, #1
 8008146:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008148:	2300      	movs	r3, #0
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	e002      	b.n	8008154 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800814e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008152:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008154:	687b      	ldr	r3, [r7, #4]
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20004af0 	.word	0x20004af0

08008168 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816e:	f3ef 8305 	mrs	r3, IPSR
 8008172:	603b      	str	r3, [r7, #0]
  return(result);
 8008174:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <osKernelStart+0x1a>
    stat = osErrorISR;
 800817a:	f06f 0305 	mvn.w	r3, #5
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	e010      	b.n	80081a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008182:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <osKernelStart+0x48>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d109      	bne.n	800819e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800818a:	f7ff ffbf 	bl	800810c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800818e:	4b08      	ldr	r3, [pc, #32]	@ (80081b0 <osKernelStart+0x48>)
 8008190:	2202      	movs	r2, #2
 8008192:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008194:	f001 f87a 	bl	800928c <vTaskStartScheduler>
      stat = osOK;
 8008198:	2300      	movs	r3, #0
 800819a:	607b      	str	r3, [r7, #4]
 800819c:	e002      	b.n	80081a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800819e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081a4:	687b      	ldr	r3, [r7, #4]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20004af0 	.word	0x20004af0

080081b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08e      	sub	sp, #56	@ 0x38
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c4:	f3ef 8305 	mrs	r3, IPSR
 80081c8:	617b      	str	r3, [r7, #20]
  return(result);
 80081ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d17e      	bne.n	80082ce <osThreadNew+0x11a>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d07b      	beq.n	80082ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80081d6:	2380      	movs	r3, #128	@ 0x80
 80081d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80081da:	2318      	movs	r3, #24
 80081dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d045      	beq.n	800827a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <osThreadNew+0x48>
        name = attr->name;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d008      	beq.n	8008222 <osThreadNew+0x6e>
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	2b38      	cmp	r3, #56	@ 0x38
 8008214:	d805      	bhi.n	8008222 <osThreadNew+0x6e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <osThreadNew+0x72>
        return (NULL);
 8008222:	2300      	movs	r3, #0
 8008224:	e054      	b.n	80082d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	089b      	lsrs	r3, r3, #2
 8008234:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00e      	beq.n	800825c <osThreadNew+0xa8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	2b5b      	cmp	r3, #91	@ 0x5b
 8008244:	d90a      	bls.n	800825c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800824a:	2b00      	cmp	r3, #0
 800824c:	d006      	beq.n	800825c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <osThreadNew+0xa8>
        mem = 1;
 8008256:	2301      	movs	r3, #1
 8008258:	61bb      	str	r3, [r7, #24]
 800825a:	e010      	b.n	800827e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10c      	bne.n	800827e <osThreadNew+0xca>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d108      	bne.n	800827e <osThreadNew+0xca>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d104      	bne.n	800827e <osThreadNew+0xca>
          mem = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	61bb      	str	r3, [r7, #24]
 8008278:	e001      	b.n	800827e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d110      	bne.n	80082a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800828c:	9202      	str	r2, [sp, #8]
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 fe1a 	bl	8008ed4 <xTaskCreateStatic>
 80082a0:	4603      	mov	r3, r0
 80082a2:	613b      	str	r3, [r7, #16]
 80082a4:	e013      	b.n	80082ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d110      	bne.n	80082ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	f107 0310 	add.w	r3, r7, #16
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 fe68 	bl	8008f94 <xTaskCreate>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d001      	beq.n	80082ce <osThreadNew+0x11a>
            hTask = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80082ce:	693b      	ldr	r3, [r7, #16]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3728      	adds	r7, #40	@ 0x28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e0:	f3ef 8305 	mrs	r3, IPSR
 80082e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80082e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <osDelay+0x1c>
    stat = osErrorISR;
 80082ec:	f06f 0305 	mvn.w	r3, #5
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	e007      	b.n	8008304 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <osDelay+0x2c>
      vTaskDelay(ticks);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 ff8e 	bl	8009220 <vTaskDelay>
    }
  }

  return (stat);
 8008304:	68fb      	ldr	r3, [r7, #12]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4a07      	ldr	r2, [pc, #28]	@ (800833c <vApplicationGetIdleTaskMemory+0x2c>)
 8008320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4a06      	ldr	r2, [pc, #24]	@ (8008340 <vApplicationGetIdleTaskMemory+0x30>)
 8008326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2280      	movs	r2, #128	@ 0x80
 800832c:	601a      	str	r2, [r3, #0]
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20004af4 	.word	0x20004af4
 8008340:	20004b50 	.word	0x20004b50

08008344 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4a07      	ldr	r2, [pc, #28]	@ (8008370 <vApplicationGetTimerTaskMemory+0x2c>)
 8008354:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a06      	ldr	r2, [pc, #24]	@ (8008374 <vApplicationGetTimerTaskMemory+0x30>)
 800835a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008362:	601a      	str	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20004d50 	.word	0x20004d50
 8008374:	20004dac 	.word	0x20004dac

08008378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f103 0208 	add.w	r2, r3, #8
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f103 0208 	add.w	r2, r3, #8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f103 0208 	add.w	r2, r3, #8
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008430:	d103      	bne.n	800843a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e00c      	b.n	8008454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3308      	adds	r3, #8
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	e002      	b.n	8008448 <vListInsert+0x2e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	429a      	cmp	r2, r3
 8008452:	d2f6      	bcs.n	8008442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	601a      	str	r2, [r3, #0]
}
 8008480:	bf00      	nop
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6892      	ldr	r2, [r2, #8]
 80084a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	6852      	ldr	r2, [r2, #4]
 80084ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d103      	bne.n	80084c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	1e5a      	subs	r2, r3, #1
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <xQueueGenericReset+0x2c>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	60bb      	str	r3, [r7, #8]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800850c:	f002 f8a4 	bl	800a658 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008518:	68f9      	ldr	r1, [r7, #12]
 800851a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	441a      	add	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800853c:	3b01      	subs	r3, #1
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008542:	fb01 f303 	mul.w	r3, r1, r3
 8008546:	441a      	add	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	22ff      	movs	r2, #255	@ 0xff
 8008550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	22ff      	movs	r2, #255	@ 0xff
 8008558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d114      	bne.n	800858c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01a      	beq.n	80085a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3310      	adds	r3, #16
 800856e:	4618      	mov	r0, r3
 8008570:	f001 f91a 	bl	80097a8 <xTaskRemoveFromEventList>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d012      	beq.n	80085a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800857a:	4b0d      	ldr	r3, [pc, #52]	@ (80085b0 <xQueueGenericReset+0xd0>)
 800857c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	e009      	b.n	80085a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3310      	adds	r3, #16
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fef1 	bl	8008378 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3324      	adds	r3, #36	@ 0x24
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff feec 	bl	8008378 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085a0:	f002 f88c 	bl	800a6bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085a4:	2301      	movs	r3, #1
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08e      	sub	sp, #56	@ 0x38
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10b      	bne.n	80085e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085da:	bf00      	nop
 80085dc:	bf00      	nop
 80085de:	e7fd      	b.n	80085dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10b      	bne.n	80085fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	e7fd      	b.n	80085fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <xQueueGenericCreateStatic+0x56>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <xQueueGenericCreateStatic+0x5a>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <xQueueGenericCreateStatic+0x5c>
 800860e:	2300      	movs	r3, #0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10b      	bne.n	800862c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	623b      	str	r3, [r7, #32]
}
 8008626:	bf00      	nop
 8008628:	bf00      	nop
 800862a:	e7fd      	b.n	8008628 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d102      	bne.n	8008638 <xQueueGenericCreateStatic+0x84>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <xQueueGenericCreateStatic+0x88>
 8008638:	2301      	movs	r3, #1
 800863a:	e000      	b.n	800863e <xQueueGenericCreateStatic+0x8a>
 800863c:	2300      	movs	r3, #0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	61fb      	str	r3, [r7, #28]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800865a:	2350      	movs	r3, #80	@ 0x50
 800865c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b50      	cmp	r3, #80	@ 0x50
 8008662:	d00b      	beq.n	800867c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	61bb      	str	r3, [r7, #24]
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800867c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00d      	beq.n	80086a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008690:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	4613      	mov	r3, r2
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68b9      	ldr	r1, [r7, #8]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 f805 	bl	80086ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3730      	adds	r7, #48	@ 0x30
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d103      	bne.n	80086ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e002      	b.n	80086d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086dc:	2101      	movs	r1, #1
 80086de:	69b8      	ldr	r0, [r7, #24]
 80086e0:	f7ff fefe 	bl	80084e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086ec:	bf00      	nop
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08e      	sub	sp, #56	@ 0x38
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008702:	2300      	movs	r3, #0
 8008704:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <xQueueGenericSend+0x34>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008722:	bf00      	nop
 8008724:	bf00      	nop
 8008726:	e7fd      	b.n	8008724 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d103      	bne.n	8008736 <xQueueGenericSend+0x42>
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <xQueueGenericSend+0x46>
 8008736:	2301      	movs	r3, #1
 8008738:	e000      	b.n	800873c <xQueueGenericSend+0x48>
 800873a:	2300      	movs	r3, #0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <xQueueGenericSend+0x64>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008752:	bf00      	nop
 8008754:	bf00      	nop
 8008756:	e7fd      	b.n	8008754 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d103      	bne.n	8008766 <xQueueGenericSend+0x72>
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <xQueueGenericSend+0x76>
 8008766:	2301      	movs	r3, #1
 8008768:	e000      	b.n	800876c <xQueueGenericSend+0x78>
 800876a:	2300      	movs	r3, #0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10b      	bne.n	8008788 <xQueueGenericSend+0x94>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	623b      	str	r3, [r7, #32]
}
 8008782:	bf00      	nop
 8008784:	bf00      	nop
 8008786:	e7fd      	b.n	8008784 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008788:	f001 f9f6 	bl	8009b78 <xTaskGetSchedulerState>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <xQueueGenericSend+0xa4>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <xQueueGenericSend+0xa8>
 8008798:	2301      	movs	r3, #1
 800879a:	e000      	b.n	800879e <xQueueGenericSend+0xaa>
 800879c:	2300      	movs	r3, #0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10b      	bne.n	80087ba <xQueueGenericSend+0xc6>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	61fb      	str	r3, [r7, #28]
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop
 80087b8:	e7fd      	b.n	80087b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ba:	f001 ff4d 	bl	800a658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d302      	bcc.n	80087d0 <xQueueGenericSend+0xdc>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d129      	bne.n	8008824 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087d6:	f000 fa0f 	bl	8008bf8 <prvCopyDataToQueue>
 80087da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d010      	beq.n	8008806 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e6:	3324      	adds	r3, #36	@ 0x24
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 ffdd 	bl	80097a8 <xTaskRemoveFromEventList>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d013      	beq.n	800881c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087f4:	4b3f      	ldr	r3, [pc, #252]	@ (80088f4 <xQueueGenericSend+0x200>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	e00a      	b.n	800881c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d007      	beq.n	800881c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800880c:	4b39      	ldr	r3, [pc, #228]	@ (80088f4 <xQueueGenericSend+0x200>)
 800880e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800881c:	f001 ff4e 	bl	800a6bc <vPortExitCritical>
				return pdPASS;
 8008820:	2301      	movs	r3, #1
 8008822:	e063      	b.n	80088ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800882a:	f001 ff47 	bl	800a6bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800882e:	2300      	movs	r3, #0
 8008830:	e05c      	b.n	80088ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008834:	2b00      	cmp	r3, #0
 8008836:	d106      	bne.n	8008846 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	4618      	mov	r0, r3
 800883e:	f001 f83f 	bl	80098c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008842:	2301      	movs	r3, #1
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008846:	f001 ff39 	bl	800a6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800884a:	f000 fd87 	bl	800935c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800884e:	f001 ff03 	bl	800a658 <vPortEnterCritical>
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008858:	b25b      	sxtb	r3, r3
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800885e:	d103      	bne.n	8008868 <xQueueGenericSend+0x174>
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800886e:	b25b      	sxtb	r3, r3
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008874:	d103      	bne.n	800887e <xQueueGenericSend+0x18a>
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800887e:	f001 ff1d 	bl	800a6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008882:	1d3a      	adds	r2, r7, #4
 8008884:	f107 0314 	add.w	r3, r7, #20
 8008888:	4611      	mov	r1, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f001 f82e 	bl	80098ec <xTaskCheckForTimeOut>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d124      	bne.n	80088e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008898:	f000 faa6 	bl	8008de8 <prvIsQueueFull>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d018      	beq.n	80088d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	3310      	adds	r3, #16
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4611      	mov	r1, r2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 ff2a 	bl	8009704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088b2:	f000 fa31 	bl	8008d18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088b6:	f000 fd5f 	bl	8009378 <xTaskResumeAll>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f47f af7c 	bne.w	80087ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <xQueueGenericSend+0x200>)
 80088c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	e772      	b.n	80087ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088d6:	f000 fa1f 	bl	8008d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088da:	f000 fd4d 	bl	8009378 <xTaskResumeAll>
 80088de:	e76c      	b.n	80087ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088e2:	f000 fa19 	bl	8008d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088e6:	f000 fd47 	bl	8009378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3738      	adds	r7, #56	@ 0x38
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed04 	.word	0xe000ed04

080088f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b090      	sub	sp, #64	@ 0x40
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800890a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10b      	bne.n	8008928 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	e7fd      	b.n	8008924 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d103      	bne.n	8008936 <xQueueGenericSendFromISR+0x3e>
 800892e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <xQueueGenericSendFromISR+0x42>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <xQueueGenericSendFromISR+0x44>
 800893a:	2300      	movs	r3, #0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d103      	bne.n	8008966 <xQueueGenericSendFromISR+0x6e>
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <xQueueGenericSendFromISR+0x72>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <xQueueGenericSendFromISR+0x74>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008988:	f001 ff46 	bl	800a818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800898c:	f3ef 8211 	mrs	r2, BASEPRI
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	61fa      	str	r2, [r7, #28]
 80089a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d302      	bcc.n	80089ba <xQueueGenericSendFromISR+0xc2>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d12f      	bne.n	8008a1a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089d0:	f000 f912 	bl	8008bf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089dc:	d112      	bne.n	8008a04 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d016      	beq.n	8008a14 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e8:	3324      	adds	r3, #36	@ 0x24
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 fedc 	bl	80097a8 <xTaskRemoveFromEventList>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00e      	beq.n	8008a14 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	e007      	b.n	8008a14 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a08:	3301      	adds	r3, #1
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	b25a      	sxtb	r2, r3
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a14:	2301      	movs	r3, #1
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a18:	e001      	b.n	8008a1e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a20:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3740      	adds	r7, #64	@ 0x40
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08c      	sub	sp, #48	@ 0x30
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10b      	bne.n	8008a66 <xQueueReceive+0x32>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	623b      	str	r3, [r7, #32]
}
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
 8008a64:	e7fd      	b.n	8008a62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <xQueueReceive+0x40>
 8008a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <xQueueReceive+0x44>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e000      	b.n	8008a7a <xQueueReceive+0x46>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10b      	bne.n	8008a96 <xQueueReceive+0x62>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	61fb      	str	r3, [r7, #28]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a96:	f001 f86f 	bl	8009b78 <xTaskGetSchedulerState>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <xQueueReceive+0x72>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <xQueueReceive+0x76>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e000      	b.n	8008aac <xQueueReceive+0x78>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <xQueueReceive+0x94>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	61bb      	str	r3, [r7, #24]
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ac8:	f001 fdc6 	bl	800a658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01f      	beq.n	8008b18 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008adc:	f000 f8f6 	bl	8008ccc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	1e5a      	subs	r2, r3, #1
 8008ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00f      	beq.n	8008b10 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	3310      	adds	r3, #16
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fe57 	bl	80097a8 <xTaskRemoveFromEventList>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b00:	4b3c      	ldr	r3, [pc, #240]	@ (8008bf4 <xQueueReceive+0x1c0>)
 8008b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b10:	f001 fdd4 	bl	800a6bc <vPortExitCritical>
				return pdPASS;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e069      	b.n	8008bec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b1e:	f001 fdcd 	bl	800a6bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e062      	b.n	8008bec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d106      	bne.n	8008b3a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b2c:	f107 0310 	add.w	r3, r7, #16
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 fec5 	bl	80098c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b3a:	f001 fdbf 	bl	800a6bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b3e:	f000 fc0d 	bl	800935c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b42:	f001 fd89 	bl	800a658 <vPortEnterCritical>
 8008b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b4c:	b25b      	sxtb	r3, r3
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b52:	d103      	bne.n	8008b5c <xQueueReceive+0x128>
 8008b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b62:	b25b      	sxtb	r3, r3
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b68:	d103      	bne.n	8008b72 <xQueueReceive+0x13e>
 8008b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b72:	f001 fda3 	bl	800a6bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b76:	1d3a      	adds	r2, r7, #4
 8008b78:	f107 0310 	add.w	r3, r7, #16
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 feb4 	bl	80098ec <xTaskCheckForTimeOut>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d123      	bne.n	8008bd2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b8c:	f000 f916 	bl	8008dbc <prvIsQueueEmpty>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d017      	beq.n	8008bc6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	3324      	adds	r3, #36	@ 0x24
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fdb0 	bl	8009704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba6:	f000 f8b7 	bl	8008d18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008baa:	f000 fbe5 	bl	8009378 <xTaskResumeAll>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d189      	bne.n	8008ac8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf4 <xQueueReceive+0x1c0>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	e780      	b.n	8008ac8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc8:	f000 f8a6 	bl	8008d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bcc:	f000 fbd4 	bl	8009378 <xTaskResumeAll>
 8008bd0:	e77a      	b.n	8008ac8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bd4:	f000 f8a0 	bl	8008d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bd8:	f000 fbce 	bl	8009378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bde:	f000 f8ed 	bl	8008dbc <prvIsQueueEmpty>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f43f af6f 	beq.w	8008ac8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3730      	adds	r7, #48	@ 0x30
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	e000ed04 	.word	0xe000ed04

08008bf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10d      	bne.n	8008c32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d14d      	bne.n	8008cba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 ffc6 	bl	8009bb4 <xTaskPriorityDisinherit>
 8008c28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	609a      	str	r2, [r3, #8]
 8008c30:	e043      	b.n	8008cba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d119      	bne.n	8008c6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6858      	ldr	r0, [r3, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c40:	461a      	mov	r2, r3
 8008c42:	68b9      	ldr	r1, [r7, #8]
 8008c44:	f00f f981 	bl	8017f4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d32b      	bcc.n	8008cba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	605a      	str	r2, [r3, #4]
 8008c6a:	e026      	b.n	8008cba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68d8      	ldr	r0, [r3, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c74:	461a      	mov	r2, r3
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	f00f f967 	bl	8017f4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c84:	425b      	negs	r3, r3
 8008c86:	441a      	add	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d207      	bcs.n	8008ca8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca0:	425b      	negs	r3, r3
 8008ca2:	441a      	add	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d105      	bne.n	8008cba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008cc2:	697b      	ldr	r3, [r7, #20]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d018      	beq.n	8008d10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce6:	441a      	add	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d303      	bcc.n	8008d00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68d9      	ldr	r1, [r3, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6838      	ldr	r0, [r7, #0]
 8008d0c:	f00f f91d 	bl	8017f4a <memcpy>
	}
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d20:	f001 fc9a 	bl	800a658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d2c:	e011      	b.n	8008d52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d012      	beq.n	8008d5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3324      	adds	r3, #36	@ 0x24
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fd34 	bl	80097a8 <xTaskRemoveFromEventList>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d46:	f000 fe35 	bl	80099b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dce9      	bgt.n	8008d2e <prvUnlockQueue+0x16>
 8008d5a:	e000      	b.n	8008d5e <prvUnlockQueue+0x46>
					break;
 8008d5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	22ff      	movs	r2, #255	@ 0xff
 8008d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008d66:	f001 fca9 	bl	800a6bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d6a:	f001 fc75 	bl	800a658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d76:	e011      	b.n	8008d9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d012      	beq.n	8008da6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3310      	adds	r3, #16
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fd0f 	bl	80097a8 <xTaskRemoveFromEventList>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d90:	f000 fe10 	bl	80099b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	dce9      	bgt.n	8008d78 <prvUnlockQueue+0x60>
 8008da4:	e000      	b.n	8008da8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008da6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	22ff      	movs	r2, #255	@ 0xff
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008db0:	f001 fc84 	bl	800a6bc <vPortExitCritical>
}
 8008db4:	bf00      	nop
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dc4:	f001 fc48 	bl	800a658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d102      	bne.n	8008dd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e001      	b.n	8008dda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dda:	f001 fc6f 	bl	800a6bc <vPortExitCritical>

	return xReturn;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008df0:	f001 fc32 	bl	800a658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d102      	bne.n	8008e06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e00:	2301      	movs	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	e001      	b.n	8008e0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e0a:	f001 fc57 	bl	800a6bc <vPortExitCritical>

	return xReturn;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	e014      	b.n	8008e52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e28:	4a0f      	ldr	r2, [pc, #60]	@ (8008e68 <vQueueAddToRegistry+0x50>)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10b      	bne.n	8008e4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e34:	490c      	ldr	r1, [pc, #48]	@ (8008e68 <vQueueAddToRegistry+0x50>)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e68 <vQueueAddToRegistry+0x50>)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	4413      	add	r3, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e4a:	e006      	b.n	8008e5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b07      	cmp	r3, #7
 8008e56:	d9e7      	bls.n	8008e28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	200051ac 	.word	0x200051ac

08008e6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e7c:	f001 fbec 	bl	800a658 <vPortEnterCritical>
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e86:	b25b      	sxtb	r3, r3
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e8c:	d103      	bne.n	8008e96 <vQueueWaitForMessageRestricted+0x2a>
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e9c:	b25b      	sxtb	r3, r3
 8008e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ea2:	d103      	bne.n	8008eac <vQueueWaitForMessageRestricted+0x40>
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008eac:	f001 fc06 	bl	800a6bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d106      	bne.n	8008ec6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	3324      	adds	r3, #36	@ 0x24
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fc45 	bl	8009750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f7ff ff26 	bl	8008d18 <prvUnlockQueue>
	}
 8008ecc:	bf00      	nop
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08e      	sub	sp, #56	@ 0x38
 8008ed8:	af04      	add	r7, sp, #16
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10b      	bne.n	8008f00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	623b      	str	r3, [r7, #32]
}
 8008efa:	bf00      	nop
 8008efc:	bf00      	nop
 8008efe:	e7fd      	b.n	8008efc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10b      	bne.n	8008f1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	61fb      	str	r3, [r7, #28]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f1e:	235c      	movs	r3, #92	@ 0x5c
 8008f20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f26:	d00b      	beq.n	8008f40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	61bb      	str	r3, [r7, #24]
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	e7fd      	b.n	8008f3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d01e      	beq.n	8008f86 <xTaskCreateStatic+0xb2>
 8008f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d01b      	beq.n	8008f86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f60:	2300      	movs	r3, #0
 8008f62:	9303      	str	r3, [sp, #12]
 8008f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f66:	9302      	str	r3, [sp, #8]
 8008f68:	f107 0314 	add.w	r3, r7, #20
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f850 	bl	800901e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f80:	f000 f8de 	bl	8009140 <prvAddNewTaskToReadyList>
 8008f84:	e001      	b.n	8008f8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f8a:	697b      	ldr	r3, [r7, #20]
	}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3728      	adds	r7, #40	@ 0x28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08c      	sub	sp, #48	@ 0x30
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 fc77 	bl	800a89c <pvPortMalloc>
 8008fae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00e      	beq.n	8008fd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fb6:	205c      	movs	r0, #92	@ 0x5c
 8008fb8:	f001 fc70 	bl	800a89c <pvPortMalloc>
 8008fbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008fca:	e005      	b.n	8008fd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fcc:	6978      	ldr	r0, [r7, #20]
 8008fce:	f001 fd33 	bl	800aa38 <vPortFree>
 8008fd2:	e001      	b.n	8008fd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d017      	beq.n	800900e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fe6:	88fa      	ldrh	r2, [r7, #6]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	9302      	str	r3, [sp, #8]
 8008ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f80e 	bl	800901e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009002:	69f8      	ldr	r0, [r7, #28]
 8009004:	f000 f89c 	bl	8009140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009008:	2301      	movs	r3, #1
 800900a:	61bb      	str	r3, [r7, #24]
 800900c:	e002      	b.n	8009014 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800900e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009012:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009014:	69bb      	ldr	r3, [r7, #24]
	}
 8009016:	4618      	mov	r0, r3
 8009018:	3720      	adds	r7, #32
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b088      	sub	sp, #32
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	461a      	mov	r2, r3
 8009036:	21a5      	movs	r1, #165	@ 0xa5
 8009038:	f00e febe 	bl	8017db8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009046:	3b01      	subs	r3, #1
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	f023 0307 	bic.w	r3, r3, #7
 8009054:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	617b      	str	r3, [r7, #20]
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d01f      	beq.n	80090be <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800907e:	2300      	movs	r3, #0
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	e012      	b.n	80090aa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	7819      	ldrb	r1, [r3, #0]
 800908c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	4413      	add	r3, r2
 8009092:	3334      	adds	r3, #52	@ 0x34
 8009094:	460a      	mov	r2, r1
 8009096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d006      	beq.n	80090b2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	3301      	adds	r3, #1
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	2b0f      	cmp	r3, #15
 80090ae:	d9e9      	bls.n	8009084 <prvInitialiseNewTask+0x66>
 80090b0:	e000      	b.n	80090b4 <prvInitialiseNewTask+0x96>
			{
				break;
 80090b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090bc:	e003      	b.n	80090c6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c8:	2b37      	cmp	r3, #55	@ 0x37
 80090ca:	d901      	bls.n	80090d0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090cc:	2337      	movs	r3, #55	@ 0x37
 80090ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090da:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	2200      	movs	r2, #0
 80090e0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	3304      	adds	r3, #4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff f966 	bl	80083b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	3318      	adds	r3, #24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff f961 	bl	80083b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800910a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	2200      	movs	r2, #0
 8009110:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	68f9      	ldr	r1, [r7, #12]
 800911e:	69b8      	ldr	r0, [r7, #24]
 8009120:	f001 f966 	bl	800a3f0 <pxPortInitialiseStack>
 8009124:	4602      	mov	r2, r0
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800912a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009136:	bf00      	nop
 8009138:	3720      	adds	r7, #32
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009148:	f001 fa86 	bl	800a658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800914c:	4b2d      	ldr	r3, [pc, #180]	@ (8009204 <prvAddNewTaskToReadyList+0xc4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3301      	adds	r3, #1
 8009152:	4a2c      	ldr	r2, [pc, #176]	@ (8009204 <prvAddNewTaskToReadyList+0xc4>)
 8009154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009156:	4b2c      	ldr	r3, [pc, #176]	@ (8009208 <prvAddNewTaskToReadyList+0xc8>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800915e:	4a2a      	ldr	r2, [pc, #168]	@ (8009208 <prvAddNewTaskToReadyList+0xc8>)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009164:	4b27      	ldr	r3, [pc, #156]	@ (8009204 <prvAddNewTaskToReadyList+0xc4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d110      	bne.n	800918e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800916c:	f000 fc46 	bl	80099fc <prvInitialiseTaskLists>
 8009170:	e00d      	b.n	800918e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009172:	4b26      	ldr	r3, [pc, #152]	@ (800920c <prvAddNewTaskToReadyList+0xcc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d109      	bne.n	800918e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800917a:	4b23      	ldr	r3, [pc, #140]	@ (8009208 <prvAddNewTaskToReadyList+0xc8>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009184:	429a      	cmp	r2, r3
 8009186:	d802      	bhi.n	800918e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009188:	4a1f      	ldr	r2, [pc, #124]	@ (8009208 <prvAddNewTaskToReadyList+0xc8>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800918e:	4b20      	ldr	r3, [pc, #128]	@ (8009210 <prvAddNewTaskToReadyList+0xd0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3301      	adds	r3, #1
 8009194:	4a1e      	ldr	r2, [pc, #120]	@ (8009210 <prvAddNewTaskToReadyList+0xd0>)
 8009196:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009198:	4b1d      	ldr	r3, [pc, #116]	@ (8009210 <prvAddNewTaskToReadyList+0xd0>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009214 <prvAddNewTaskToReadyList+0xd4>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d903      	bls.n	80091b4 <prvAddNewTaskToReadyList+0x74>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	4a18      	ldr	r2, [pc, #96]	@ (8009214 <prvAddNewTaskToReadyList+0xd4>)
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <prvAddNewTaskToReadyList+0xd8>)
 80091c2:	441a      	add	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7ff f901 	bl	80083d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091d0:	f001 fa74 	bl	800a6bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091d4:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <prvAddNewTaskToReadyList+0xcc>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00e      	beq.n	80091fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009208 <prvAddNewTaskToReadyList+0xc8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d207      	bcs.n	80091fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091ea:	4b0c      	ldr	r3, [pc, #48]	@ (800921c <prvAddNewTaskToReadyList+0xdc>)
 80091ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	200056c0 	.word	0x200056c0
 8009208:	200051ec 	.word	0x200051ec
 800920c:	200056cc 	.word	0x200056cc
 8009210:	200056dc 	.word	0x200056dc
 8009214:	200056c8 	.word	0x200056c8
 8009218:	200051f0 	.word	0x200051f0
 800921c:	e000ed04 	.word	0xe000ed04

08009220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d018      	beq.n	8009264 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009232:	4b14      	ldr	r3, [pc, #80]	@ (8009284 <vTaskDelay+0x64>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <vTaskDelay+0x32>
	__asm volatile
 800923a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	60bb      	str	r3, [r7, #8]
}
 800924c:	bf00      	nop
 800924e:	bf00      	nop
 8009250:	e7fd      	b.n	800924e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009252:	f000 f883 	bl	800935c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009256:	2100      	movs	r1, #0
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fd1b 	bl	8009c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800925e:	f000 f88b 	bl	8009378 <xTaskResumeAll>
 8009262:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d107      	bne.n	800927a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800926a:	4b07      	ldr	r3, [pc, #28]	@ (8009288 <vTaskDelay+0x68>)
 800926c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	200056e8 	.word	0x200056e8
 8009288:	e000ed04 	.word	0xe000ed04

0800928c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	@ 0x28
 8009290:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800929a:	463a      	mov	r2, r7
 800929c:	1d39      	adds	r1, r7, #4
 800929e:	f107 0308 	add.w	r3, r7, #8
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff f834 	bl	8008310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	9202      	str	r2, [sp, #8]
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	2300      	movs	r3, #0
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	460a      	mov	r2, r1
 80092ba:	4922      	ldr	r1, [pc, #136]	@ (8009344 <vTaskStartScheduler+0xb8>)
 80092bc:	4822      	ldr	r0, [pc, #136]	@ (8009348 <vTaskStartScheduler+0xbc>)
 80092be:	f7ff fe09 	bl	8008ed4 <xTaskCreateStatic>
 80092c2:	4603      	mov	r3, r0
 80092c4:	4a21      	ldr	r2, [pc, #132]	@ (800934c <vTaskStartScheduler+0xc0>)
 80092c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092c8:	4b20      	ldr	r3, [pc, #128]	@ (800934c <vTaskStartScheduler+0xc0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092d0:	2301      	movs	r3, #1
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	e001      	b.n	80092da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d102      	bne.n	80092e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092e0:	f000 fd2c 	bl	8009d3c <xTimerCreateTimerTask>
 80092e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d116      	bne.n	800931a <vTaskStartScheduler+0x8e>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	613b      	str	r3, [r7, #16]
}
 80092fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009300:	4b13      	ldr	r3, [pc, #76]	@ (8009350 <vTaskStartScheduler+0xc4>)
 8009302:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009306:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009308:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <vTaskStartScheduler+0xc8>)
 800930a:	2201      	movs	r2, #1
 800930c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800930e:	4b12      	ldr	r3, [pc, #72]	@ (8009358 <vTaskStartScheduler+0xcc>)
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009314:	f001 f8fc 	bl	800a510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009318:	e00f      	b.n	800933a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009320:	d10b      	bne.n	800933a <vTaskStartScheduler+0xae>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	60fb      	str	r3, [r7, #12]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <vTaskStartScheduler+0xaa>
}
 800933a:	bf00      	nop
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	08018d60 	.word	0x08018d60
 8009348:	080099cd 	.word	0x080099cd
 800934c:	200056e4 	.word	0x200056e4
 8009350:	200056e0 	.word	0x200056e0
 8009354:	200056cc 	.word	0x200056cc
 8009358:	200056c4 	.word	0x200056c4

0800935c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009360:	4b04      	ldr	r3, [pc, #16]	@ (8009374 <vTaskSuspendAll+0x18>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	4a03      	ldr	r2, [pc, #12]	@ (8009374 <vTaskSuspendAll+0x18>)
 8009368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800936a:	bf00      	nop
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	200056e8 	.word	0x200056e8

08009378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009386:	4b42      	ldr	r3, [pc, #264]	@ (8009490 <xTaskResumeAll+0x118>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10b      	bne.n	80093a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	603b      	str	r3, [r7, #0]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093a6:	f001 f957 	bl	800a658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093aa:	4b39      	ldr	r3, [pc, #228]	@ (8009490 <xTaskResumeAll+0x118>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	4a37      	ldr	r2, [pc, #220]	@ (8009490 <xTaskResumeAll+0x118>)
 80093b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093b4:	4b36      	ldr	r3, [pc, #216]	@ (8009490 <xTaskResumeAll+0x118>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d162      	bne.n	8009482 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093bc:	4b35      	ldr	r3, [pc, #212]	@ (8009494 <xTaskResumeAll+0x11c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d05e      	beq.n	8009482 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c4:	e02f      	b.n	8009426 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c6:	4b34      	ldr	r3, [pc, #208]	@ (8009498 <xTaskResumeAll+0x120>)
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3318      	adds	r3, #24
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff f85a 	bl	800848c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3304      	adds	r3, #4
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff f855 	bl	800848c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e6:	4b2d      	ldr	r3, [pc, #180]	@ (800949c <xTaskResumeAll+0x124>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d903      	bls.n	80093f6 <xTaskResumeAll+0x7e>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f2:	4a2a      	ldr	r2, [pc, #168]	@ (800949c <xTaskResumeAll+0x124>)
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4a27      	ldr	r2, [pc, #156]	@ (80094a0 <xTaskResumeAll+0x128>)
 8009404:	441a      	add	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3304      	adds	r3, #4
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f7fe ffe0 	bl	80083d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009416:	4b23      	ldr	r3, [pc, #140]	@ (80094a4 <xTaskResumeAll+0x12c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941c:	429a      	cmp	r2, r3
 800941e:	d302      	bcc.n	8009426 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009420:	4b21      	ldr	r3, [pc, #132]	@ (80094a8 <xTaskResumeAll+0x130>)
 8009422:	2201      	movs	r2, #1
 8009424:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009426:	4b1c      	ldr	r3, [pc, #112]	@ (8009498 <xTaskResumeAll+0x120>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1cb      	bne.n	80093c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009434:	f000 fb80 	bl	8009b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009438:	4b1c      	ldr	r3, [pc, #112]	@ (80094ac <xTaskResumeAll+0x134>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d010      	beq.n	8009466 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009444:	f000 f846 	bl	80094d4 <xTaskIncrementTick>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800944e:	4b16      	ldr	r3, [pc, #88]	@ (80094a8 <xTaskResumeAll+0x130>)
 8009450:	2201      	movs	r2, #1
 8009452:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3b01      	subs	r3, #1
 8009458:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f1      	bne.n	8009444 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009460:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <xTaskResumeAll+0x134>)
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009466:	4b10      	ldr	r3, [pc, #64]	@ (80094a8 <xTaskResumeAll+0x130>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800946e:	2301      	movs	r3, #1
 8009470:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009472:	4b0f      	ldr	r3, [pc, #60]	@ (80094b0 <xTaskResumeAll+0x138>)
 8009474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009482:	f001 f91b 	bl	800a6bc <vPortExitCritical>

	return xAlreadyYielded;
 8009486:	68bb      	ldr	r3, [r7, #8]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	200056e8 	.word	0x200056e8
 8009494:	200056c0 	.word	0x200056c0
 8009498:	20005680 	.word	0x20005680
 800949c:	200056c8 	.word	0x200056c8
 80094a0:	200051f0 	.word	0x200051f0
 80094a4:	200051ec 	.word	0x200051ec
 80094a8:	200056d4 	.word	0x200056d4
 80094ac:	200056d0 	.word	0x200056d0
 80094b0:	e000ed04 	.word	0xe000ed04

080094b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094ba:	4b05      	ldr	r3, [pc, #20]	@ (80094d0 <xTaskGetTickCount+0x1c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094c0:	687b      	ldr	r3, [r7, #4]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	200056c4 	.word	0x200056c4

080094d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094de:	4b4f      	ldr	r3, [pc, #316]	@ (800961c <xTaskIncrementTick+0x148>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f040 8090 	bne.w	8009608 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094e8:	4b4d      	ldr	r3, [pc, #308]	@ (8009620 <xTaskIncrementTick+0x14c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3301      	adds	r3, #1
 80094ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094f0:	4a4b      	ldr	r2, [pc, #300]	@ (8009620 <xTaskIncrementTick+0x14c>)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d121      	bne.n	8009540 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80094fc:	4b49      	ldr	r3, [pc, #292]	@ (8009624 <xTaskIncrementTick+0x150>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00b      	beq.n	800951e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	603b      	str	r3, [r7, #0]
}
 8009518:	bf00      	nop
 800951a:	bf00      	nop
 800951c:	e7fd      	b.n	800951a <xTaskIncrementTick+0x46>
 800951e:	4b41      	ldr	r3, [pc, #260]	@ (8009624 <xTaskIncrementTick+0x150>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	4b40      	ldr	r3, [pc, #256]	@ (8009628 <xTaskIncrementTick+0x154>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3e      	ldr	r2, [pc, #248]	@ (8009624 <xTaskIncrementTick+0x150>)
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	4a3e      	ldr	r2, [pc, #248]	@ (8009628 <xTaskIncrementTick+0x154>)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6013      	str	r3, [r2, #0]
 8009532:	4b3e      	ldr	r3, [pc, #248]	@ (800962c <xTaskIncrementTick+0x158>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3301      	adds	r3, #1
 8009538:	4a3c      	ldr	r2, [pc, #240]	@ (800962c <xTaskIncrementTick+0x158>)
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	f000 fafc 	bl	8009b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009540:	4b3b      	ldr	r3, [pc, #236]	@ (8009630 <xTaskIncrementTick+0x15c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	429a      	cmp	r2, r3
 8009548:	d349      	bcc.n	80095de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800954a:	4b36      	ldr	r3, [pc, #216]	@ (8009624 <xTaskIncrementTick+0x150>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d104      	bne.n	800955e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009554:	4b36      	ldr	r3, [pc, #216]	@ (8009630 <xTaskIncrementTick+0x15c>)
 8009556:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800955a:	601a      	str	r2, [r3, #0]
					break;
 800955c:	e03f      	b.n	80095de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955e:	4b31      	ldr	r3, [pc, #196]	@ (8009624 <xTaskIncrementTick+0x150>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d203      	bcs.n	800957e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009576:	4a2e      	ldr	r2, [pc, #184]	@ (8009630 <xTaskIncrementTick+0x15c>)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800957c:	e02f      	b.n	80095de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	3304      	adds	r3, #4
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe ff82 	bl	800848c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	3318      	adds	r3, #24
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe ff79 	bl	800848c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800959e:	4b25      	ldr	r3, [pc, #148]	@ (8009634 <xTaskIncrementTick+0x160>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d903      	bls.n	80095ae <xTaskIncrementTick+0xda>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095aa:	4a22      	ldr	r2, [pc, #136]	@ (8009634 <xTaskIncrementTick+0x160>)
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009638 <xTaskIncrementTick+0x164>)
 80095bc:	441a      	add	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	3304      	adds	r3, #4
 80095c2:	4619      	mov	r1, r3
 80095c4:	4610      	mov	r0, r2
 80095c6:	f7fe ff04 	bl	80083d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ce:	4b1b      	ldr	r3, [pc, #108]	@ (800963c <xTaskIncrementTick+0x168>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d3b8      	bcc.n	800954a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80095d8:	2301      	movs	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095dc:	e7b5      	b.n	800954a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095de:	4b17      	ldr	r3, [pc, #92]	@ (800963c <xTaskIncrementTick+0x168>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e4:	4914      	ldr	r1, [pc, #80]	@ (8009638 <xTaskIncrementTick+0x164>)
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d901      	bls.n	80095fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80095f6:	2301      	movs	r3, #1
 80095f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095fa:	4b11      	ldr	r3, [pc, #68]	@ (8009640 <xTaskIncrementTick+0x16c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009602:	2301      	movs	r3, #1
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	e004      	b.n	8009612 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009608:	4b0e      	ldr	r3, [pc, #56]	@ (8009644 <xTaskIncrementTick+0x170>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3301      	adds	r3, #1
 800960e:	4a0d      	ldr	r2, [pc, #52]	@ (8009644 <xTaskIncrementTick+0x170>)
 8009610:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009612:	697b      	ldr	r3, [r7, #20]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	200056e8 	.word	0x200056e8
 8009620:	200056c4 	.word	0x200056c4
 8009624:	20005678 	.word	0x20005678
 8009628:	2000567c 	.word	0x2000567c
 800962c:	200056d8 	.word	0x200056d8
 8009630:	200056e0 	.word	0x200056e0
 8009634:	200056c8 	.word	0x200056c8
 8009638:	200051f0 	.word	0x200051f0
 800963c:	200051ec 	.word	0x200051ec
 8009640:	200056d4 	.word	0x200056d4
 8009644:	200056d0 	.word	0x200056d0

08009648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800964e:	4b28      	ldr	r3, [pc, #160]	@ (80096f0 <vTaskSwitchContext+0xa8>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009656:	4b27      	ldr	r3, [pc, #156]	@ (80096f4 <vTaskSwitchContext+0xac>)
 8009658:	2201      	movs	r2, #1
 800965a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800965c:	e042      	b.n	80096e4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800965e:	4b25      	ldr	r3, [pc, #148]	@ (80096f4 <vTaskSwitchContext+0xac>)
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009664:	4b24      	ldr	r3, [pc, #144]	@ (80096f8 <vTaskSwitchContext+0xb0>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	60fb      	str	r3, [r7, #12]
 800966a:	e011      	b.n	8009690 <vTaskSwitchContext+0x48>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10b      	bne.n	800968a <vTaskSwitchContext+0x42>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	607b      	str	r3, [r7, #4]
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	e7fd      	b.n	8009686 <vTaskSwitchContext+0x3e>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3b01      	subs	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	491a      	ldr	r1, [pc, #104]	@ (80096fc <vTaskSwitchContext+0xb4>)
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0e3      	beq.n	800966c <vTaskSwitchContext+0x24>
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4a13      	ldr	r2, [pc, #76]	@ (80096fc <vTaskSwitchContext+0xb4>)
 80096b0:	4413      	add	r3, r2
 80096b2:	60bb      	str	r3, [r7, #8]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	3308      	adds	r3, #8
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d104      	bne.n	80096d4 <vTaskSwitchContext+0x8c>
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	605a      	str	r2, [r3, #4]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	4a09      	ldr	r2, [pc, #36]	@ (8009700 <vTaskSwitchContext+0xb8>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	4a06      	ldr	r2, [pc, #24]	@ (80096f8 <vTaskSwitchContext+0xb0>)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	200056e8 	.word	0x200056e8
 80096f4:	200056d4 	.word	0x200056d4
 80096f8:	200056c8 	.word	0x200056c8
 80096fc:	200051f0 	.word	0x200051f0
 8009700:	200051ec 	.word	0x200051ec

08009704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10b      	bne.n	800972c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	60fb      	str	r3, [r7, #12]
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	e7fd      	b.n	8009728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800972c:	4b07      	ldr	r3, [pc, #28]	@ (800974c <vTaskPlaceOnEventList+0x48>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3318      	adds	r3, #24
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7fe fe70 	bl	800841a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800973a:	2101      	movs	r1, #1
 800973c:	6838      	ldr	r0, [r7, #0]
 800973e:	f000 faa9 	bl	8009c94 <prvAddCurrentTaskToDelayedList>
}
 8009742:	bf00      	nop
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	200051ec 	.word	0x200051ec

08009750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10b      	bne.n	800977a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	617b      	str	r3, [r7, #20]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800977a:	4b0a      	ldr	r3, [pc, #40]	@ (80097a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3318      	adds	r3, #24
 8009780:	4619      	mov	r1, r3
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f7fe fe25 	bl	80083d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800978e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009792:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	68b8      	ldr	r0, [r7, #8]
 8009798:	f000 fa7c 	bl	8009c94 <prvAddCurrentTaskToDelayedList>
	}
 800979c:	bf00      	nop
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	200051ec 	.word	0x200051ec

080097a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10b      	bne.n	80097d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	60fb      	str	r3, [r7, #12]
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	e7fd      	b.n	80097d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3318      	adds	r3, #24
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe fe56 	bl	800848c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009858 <xTaskRemoveFromEventList+0xb0>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11d      	bne.n	8009824 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3304      	adds	r3, #4
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fe4d 	bl	800848c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f6:	4b19      	ldr	r3, [pc, #100]	@ (800985c <xTaskRemoveFromEventList+0xb4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d903      	bls.n	8009806 <xTaskRemoveFromEventList+0x5e>
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009802:	4a16      	ldr	r2, [pc, #88]	@ (800985c <xTaskRemoveFromEventList+0xb4>)
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4a13      	ldr	r2, [pc, #76]	@ (8009860 <xTaskRemoveFromEventList+0xb8>)
 8009814:	441a      	add	r2, r3
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3304      	adds	r3, #4
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f7fe fdd8 	bl	80083d2 <vListInsertEnd>
 8009822:	e005      	b.n	8009830 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	3318      	adds	r3, #24
 8009828:	4619      	mov	r1, r3
 800982a:	480e      	ldr	r0, [pc, #56]	@ (8009864 <xTaskRemoveFromEventList+0xbc>)
 800982c:	f7fe fdd1 	bl	80083d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009834:	4b0c      	ldr	r3, [pc, #48]	@ (8009868 <xTaskRemoveFromEventList+0xc0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983a:	429a      	cmp	r2, r3
 800983c:	d905      	bls.n	800984a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800983e:	2301      	movs	r3, #1
 8009840:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009842:	4b0a      	ldr	r3, [pc, #40]	@ (800986c <xTaskRemoveFromEventList+0xc4>)
 8009844:	2201      	movs	r2, #1
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	e001      	b.n	800984e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800984e:	697b      	ldr	r3, [r7, #20]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	200056e8 	.word	0x200056e8
 800985c:	200056c8 	.word	0x200056c8
 8009860:	200051f0 	.word	0x200051f0
 8009864:	20005680 	.word	0x20005680
 8009868:	200051ec 	.word	0x200051ec
 800986c:	200056d4 	.word	0x200056d4

08009870 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10b      	bne.n	8009896 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	60fb      	str	r3, [r7, #12]
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	e7fd      	b.n	8009892 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009896:	f000 fedf 	bl	800a658 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800989a:	4b07      	ldr	r3, [pc, #28]	@ (80098b8 <vTaskSetTimeOutState+0x48>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80098a2:	4b06      	ldr	r3, [pc, #24]	@ (80098bc <vTaskSetTimeOutState+0x4c>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80098aa:	f000 ff07 	bl	800a6bc <vPortExitCritical>
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	200056d8 	.word	0x200056d8
 80098bc:	200056c4 	.word	0x200056c4

080098c0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098c8:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <vTaskInternalSetTimeOutState+0x24>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098d0:	4b05      	ldr	r3, [pc, #20]	@ (80098e8 <vTaskInternalSetTimeOutState+0x28>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	605a      	str	r2, [r3, #4]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	200056d8 	.word	0x200056d8
 80098e8:	200056c4 	.word	0x200056c4

080098ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	613b      	str	r3, [r7, #16]
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	e7fd      	b.n	8009910 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	60fb      	str	r3, [r7, #12]
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	e7fd      	b.n	800992e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009932:	f000 fe91 	bl	800a658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009936:	4b1d      	ldr	r3, [pc, #116]	@ (80099ac <xTaskCheckForTimeOut+0xc0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800994e:	d102      	bne.n	8009956 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	e023      	b.n	800999e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <xTaskCheckForTimeOut+0xc4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d007      	beq.n	8009972 <xTaskCheckForTimeOut+0x86>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	429a      	cmp	r2, r3
 800996a:	d302      	bcc.n	8009972 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e015      	b.n	800999e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	429a      	cmp	r2, r3
 800997a:	d20b      	bcs.n	8009994 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	1ad2      	subs	r2, r2, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ff99 	bl	80098c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800998e:	2300      	movs	r3, #0
 8009990:	61fb      	str	r3, [r7, #28]
 8009992:	e004      	b.n	800999e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800999a:	2301      	movs	r3, #1
 800999c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800999e:	f000 fe8d 	bl	800a6bc <vPortExitCritical>

	return xReturn;
 80099a2:	69fb      	ldr	r3, [r7, #28]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3720      	adds	r7, #32
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	200056c4 	.word	0x200056c4
 80099b0:	200056d8 	.word	0x200056d8

080099b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099b8:	4b03      	ldr	r3, [pc, #12]	@ (80099c8 <vTaskMissedYield+0x14>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
}
 80099be:	bf00      	nop
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	200056d4 	.word	0x200056d4

080099cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099d4:	f000 f852 	bl	8009a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099d8:	4b06      	ldr	r3, [pc, #24]	@ (80099f4 <prvIdleTask+0x28>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d9f9      	bls.n	80099d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099e0:	4b05      	ldr	r3, [pc, #20]	@ (80099f8 <prvIdleTask+0x2c>)
 80099e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099f0:	e7f0      	b.n	80099d4 <prvIdleTask+0x8>
 80099f2:	bf00      	nop
 80099f4:	200051f0 	.word	0x200051f0
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a02:	2300      	movs	r3, #0
 8009a04:	607b      	str	r3, [r7, #4]
 8009a06:	e00c      	b.n	8009a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4a12      	ldr	r2, [pc, #72]	@ (8009a5c <prvInitialiseTaskLists+0x60>)
 8009a14:	4413      	add	r3, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fcae 	bl	8008378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b37      	cmp	r3, #55	@ 0x37
 8009a26:	d9ef      	bls.n	8009a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a28:	480d      	ldr	r0, [pc, #52]	@ (8009a60 <prvInitialiseTaskLists+0x64>)
 8009a2a:	f7fe fca5 	bl	8008378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a2e:	480d      	ldr	r0, [pc, #52]	@ (8009a64 <prvInitialiseTaskLists+0x68>)
 8009a30:	f7fe fca2 	bl	8008378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a34:	480c      	ldr	r0, [pc, #48]	@ (8009a68 <prvInitialiseTaskLists+0x6c>)
 8009a36:	f7fe fc9f 	bl	8008378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a3a:	480c      	ldr	r0, [pc, #48]	@ (8009a6c <prvInitialiseTaskLists+0x70>)
 8009a3c:	f7fe fc9c 	bl	8008378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a40:	480b      	ldr	r0, [pc, #44]	@ (8009a70 <prvInitialiseTaskLists+0x74>)
 8009a42:	f7fe fc99 	bl	8008378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a46:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <prvInitialiseTaskLists+0x78>)
 8009a48:	4a05      	ldr	r2, [pc, #20]	@ (8009a60 <prvInitialiseTaskLists+0x64>)
 8009a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <prvInitialiseTaskLists+0x7c>)
 8009a4e:	4a05      	ldr	r2, [pc, #20]	@ (8009a64 <prvInitialiseTaskLists+0x68>)
 8009a50:	601a      	str	r2, [r3, #0]
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	200051f0 	.word	0x200051f0
 8009a60:	20005650 	.word	0x20005650
 8009a64:	20005664 	.word	0x20005664
 8009a68:	20005680 	.word	0x20005680
 8009a6c:	20005694 	.word	0x20005694
 8009a70:	200056ac 	.word	0x200056ac
 8009a74:	20005678 	.word	0x20005678
 8009a78:	2000567c 	.word	0x2000567c

08009a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a82:	e019      	b.n	8009ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a84:	f000 fde8 	bl	800a658 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a88:	4b10      	ldr	r3, [pc, #64]	@ (8009acc <prvCheckTasksWaitingTermination+0x50>)
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fcf9 	bl	800848c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad0 <prvCheckTasksWaitingTermination+0x54>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ad0 <prvCheckTasksWaitingTermination+0x54>)
 8009aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <prvCheckTasksWaitingTermination+0x58>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8009ad4 <prvCheckTasksWaitingTermination+0x58>)
 8009aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009aae:	f000 fe05 	bl	800a6bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f810 	bl	8009ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ab8:	4b06      	ldr	r3, [pc, #24]	@ (8009ad4 <prvCheckTasksWaitingTermination+0x58>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e1      	bne.n	8009a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20005694 	.word	0x20005694
 8009ad0:	200056c0 	.word	0x200056c0
 8009ad4:	200056a8 	.word	0x200056a8

08009ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d108      	bne.n	8009afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 ffa2 	bl	800aa38 <vPortFree>
				vPortFree( pxTCB );
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 ff9f 	bl	800aa38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009afa:	e019      	b.n	8009b30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d103      	bne.n	8009b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 ff96 	bl	800aa38 <vPortFree>
	}
 8009b0c:	e010      	b.n	8009b30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d00b      	beq.n	8009b30 <prvDeleteTCB+0x58>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	60fb      	str	r3, [r7, #12]
}
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
 8009b2e:	e7fd      	b.n	8009b2c <prvDeleteTCB+0x54>
	}
 8009b30:	bf00      	nop
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b70 <prvResetNextTaskUnblockTime+0x38>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d104      	bne.n	8009b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b48:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <prvResetNextTaskUnblockTime+0x3c>)
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b50:	e008      	b.n	8009b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b52:	4b07      	ldr	r3, [pc, #28]	@ (8009b70 <prvResetNextTaskUnblockTime+0x38>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	4a04      	ldr	r2, [pc, #16]	@ (8009b74 <prvResetNextTaskUnblockTime+0x3c>)
 8009b62:	6013      	str	r3, [r2, #0]
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	20005678 	.word	0x20005678
 8009b74:	200056e0 	.word	0x200056e0

08009b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009bac <xTaskGetSchedulerState+0x34>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d102      	bne.n	8009b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b86:	2301      	movs	r3, #1
 8009b88:	607b      	str	r3, [r7, #4]
 8009b8a:	e008      	b.n	8009b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b8c:	4b08      	ldr	r3, [pc, #32]	@ (8009bb0 <xTaskGetSchedulerState+0x38>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b94:	2302      	movs	r3, #2
 8009b96:	607b      	str	r3, [r7, #4]
 8009b98:	e001      	b.n	8009b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b9e:	687b      	ldr	r3, [r7, #4]
	}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	200056cc 	.word	0x200056cc
 8009bb0:	200056e8 	.word	0x200056e8

08009bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d058      	beq.n	8009c7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bca:	4b2f      	ldr	r3, [pc, #188]	@ (8009c88 <xTaskPriorityDisinherit+0xd4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d00b      	beq.n	8009bec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	60fb      	str	r3, [r7, #12]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10b      	bne.n	8009c0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	60bb      	str	r3, [r7, #8]
}
 8009c06:	bf00      	nop
 8009c08:	bf00      	nop
 8009c0a:	e7fd      	b.n	8009c08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c10:	1e5a      	subs	r2, r3, #1
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d02c      	beq.n	8009c7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d128      	bne.n	8009c7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe fc2c 	bl	800848c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c8c <xTaskPriorityDisinherit+0xd8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <xTaskPriorityDisinherit+0xa8>
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c58:	4a0c      	ldr	r2, [pc, #48]	@ (8009c8c <xTaskPriorityDisinherit+0xd8>)
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4a09      	ldr	r2, [pc, #36]	@ (8009c90 <xTaskPriorityDisinherit+0xdc>)
 8009c6a:	441a      	add	r2, r3
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4619      	mov	r1, r3
 8009c72:	4610      	mov	r0, r2
 8009c74:	f7fe fbad 	bl	80083d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c7c:	697b      	ldr	r3, [r7, #20]
	}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	200051ec 	.word	0x200051ec
 8009c8c:	200056c8 	.word	0x200056c8
 8009c90:	200051f0 	.word	0x200051f0

08009c94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c9e:	4b21      	ldr	r3, [pc, #132]	@ (8009d24 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ca4:	4b20      	ldr	r3, [pc, #128]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fbee 	bl	800848c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cb6:	d10a      	bne.n	8009cce <prvAddCurrentTaskToDelayedList+0x3a>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4819      	ldr	r0, [pc, #100]	@ (8009d2c <prvAddCurrentTaskToDelayedList+0x98>)
 8009cc8:	f7fe fb83 	bl	80083d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ccc:	e026      	b.n	8009d1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cd6:	4b14      	ldr	r3, [pc, #80]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d209      	bcs.n	8009cfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ce6:	4b12      	ldr	r3, [pc, #72]	@ (8009d30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	4b0f      	ldr	r3, [pc, #60]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe fb91 	bl	800841a <vListInsert>
}
 8009cf8:	e010      	b.n	8009d1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009d34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	f7fe fb87 	bl	800841a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d202      	bcs.n	8009d1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d16:	4a08      	ldr	r2, [pc, #32]	@ (8009d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	6013      	str	r3, [r2, #0]
}
 8009d1c:	bf00      	nop
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	200056c4 	.word	0x200056c4
 8009d28:	200051ec 	.word	0x200051ec
 8009d2c:	200056ac 	.word	0x200056ac
 8009d30:	2000567c 	.word	0x2000567c
 8009d34:	20005678 	.word	0x20005678
 8009d38:	200056e0 	.word	0x200056e0

08009d3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	@ 0x28
 8009d40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d46:	f000 fb13 	bl	800a370 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009dc0 <xTimerCreateTimerTask+0x84>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d021      	beq.n	8009d96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d5a:	1d3a      	adds	r2, r7, #4
 8009d5c:	f107 0108 	add.w	r1, r7, #8
 8009d60:	f107 030c 	add.w	r3, r7, #12
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fe faed 	bl	8008344 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	9202      	str	r2, [sp, #8]
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	2302      	movs	r3, #2
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	460a      	mov	r2, r1
 8009d7c:	4911      	ldr	r1, [pc, #68]	@ (8009dc4 <xTimerCreateTimerTask+0x88>)
 8009d7e:	4812      	ldr	r0, [pc, #72]	@ (8009dc8 <xTimerCreateTimerTask+0x8c>)
 8009d80:	f7ff f8a8 	bl	8008ed4 <xTaskCreateStatic>
 8009d84:	4603      	mov	r3, r0
 8009d86:	4a11      	ldr	r2, [pc, #68]	@ (8009dcc <xTimerCreateTimerTask+0x90>)
 8009d88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d8a:	4b10      	ldr	r3, [pc, #64]	@ (8009dcc <xTimerCreateTimerTask+0x90>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d92:	2301      	movs	r3, #1
 8009d94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10b      	bne.n	8009db4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	613b      	str	r3, [r7, #16]
}
 8009dae:	bf00      	nop
 8009db0:	bf00      	nop
 8009db2:	e7fd      	b.n	8009db0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009db4:	697b      	ldr	r3, [r7, #20]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	2000571c 	.word	0x2000571c
 8009dc4:	08018d68 	.word	0x08018d68
 8009dc8:	08009f09 	.word	0x08009f09
 8009dcc:	20005720 	.word	0x20005720

08009dd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08a      	sub	sp, #40	@ 0x28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10b      	bne.n	8009e00 <xTimerGenericCommand+0x30>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	623b      	str	r3, [r7, #32]
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e00:	4b19      	ldr	r3, [pc, #100]	@ (8009e68 <xTimerGenericCommand+0x98>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d02a      	beq.n	8009e5e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b05      	cmp	r3, #5
 8009e18:	dc18      	bgt.n	8009e4c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e1a:	f7ff fead 	bl	8009b78 <xTaskGetSchedulerState>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d109      	bne.n	8009e38 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e24:	4b10      	ldr	r3, [pc, #64]	@ (8009e68 <xTimerGenericCommand+0x98>)
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	f107 0110 	add.w	r1, r7, #16
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e30:	f7fe fc60 	bl	80086f4 <xQueueGenericSend>
 8009e34:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e36:	e012      	b.n	8009e5e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e38:	4b0b      	ldr	r3, [pc, #44]	@ (8009e68 <xTimerGenericCommand+0x98>)
 8009e3a:	6818      	ldr	r0, [r3, #0]
 8009e3c:	f107 0110 	add.w	r1, r7, #16
 8009e40:	2300      	movs	r3, #0
 8009e42:	2200      	movs	r2, #0
 8009e44:	f7fe fc56 	bl	80086f4 <xQueueGenericSend>
 8009e48:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e4a:	e008      	b.n	8009e5e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e4c:	4b06      	ldr	r3, [pc, #24]	@ (8009e68 <xTimerGenericCommand+0x98>)
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	f107 0110 	add.w	r1, r7, #16
 8009e54:	2300      	movs	r3, #0
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	f7fe fd4e 	bl	80088f8 <xQueueGenericSendFromISR>
 8009e5c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3728      	adds	r7, #40	@ 0x28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	2000571c 	.word	0x2000571c

08009e6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e76:	4b23      	ldr	r3, [pc, #140]	@ (8009f04 <prvProcessExpiredTimer+0x98>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fb01 	bl	800848c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d023      	beq.n	8009ee0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	699a      	ldr	r2, [r3, #24]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	18d1      	adds	r1, r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	6978      	ldr	r0, [r7, #20]
 8009ea6:	f000 f8d5 	bl	800a054 <prvInsertTimerInActiveList>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d020      	beq.n	8009ef2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	6978      	ldr	r0, [r7, #20]
 8009ebc:	f7ff ff88 	bl	8009dd0 <xTimerGenericCommand>
 8009ec0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d114      	bne.n	8009ef2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60fb      	str	r3, [r7, #12]
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	e7fd      	b.n	8009edc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ee6:	f023 0301 	bic.w	r3, r3, #1
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	6978      	ldr	r0, [r7, #20]
 8009ef8:	4798      	blx	r3
}
 8009efa:	bf00      	nop
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20005714 	.word	0x20005714

08009f08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f10:	f107 0308 	add.w	r3, r7, #8
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f859 	bl	8009fcc <prvGetNextExpireTime>
 8009f1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f805 	bl	8009f30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f26:	f000 f8d7 	bl	800a0d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f2a:	bf00      	nop
 8009f2c:	e7f0      	b.n	8009f10 <prvTimerTask+0x8>
	...

08009f30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f3a:	f7ff fa0f 	bl	800935c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f3e:	f107 0308 	add.w	r3, r7, #8
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 f866 	bl	800a014 <prvSampleTimeNow>
 8009f48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d130      	bne.n	8009fb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10a      	bne.n	8009f6c <prvProcessTimerOrBlockTask+0x3c>
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d806      	bhi.n	8009f6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f5e:	f7ff fa0b 	bl	8009378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff ff81 	bl	8009e6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f6a:	e024      	b.n	8009fb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d008      	beq.n	8009f84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f72:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <prvProcessTimerOrBlockTask+0x90>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <prvProcessTimerOrBlockTask+0x50>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <prvProcessTimerOrBlockTask+0x52>
 8009f80:	2300      	movs	r3, #0
 8009f82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f84:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc4 <prvProcessTimerOrBlockTask+0x94>)
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f7fe ff6b 	bl	8008e6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f96:	f7ff f9ef 	bl	8009378 <xTaskResumeAll>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009fa0:	4b09      	ldr	r3, [pc, #36]	@ (8009fc8 <prvProcessTimerOrBlockTask+0x98>)
 8009fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
}
 8009fb0:	e001      	b.n	8009fb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009fb2:	f7ff f9e1 	bl	8009378 <xTaskResumeAll>
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20005718 	.word	0x20005718
 8009fc4:	2000571c 	.word	0x2000571c
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fd4:	4b0e      	ldr	r3, [pc, #56]	@ (800a010 <prvGetNextExpireTime+0x44>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <prvGetNextExpireTime+0x16>
 8009fde:	2201      	movs	r2, #1
 8009fe0:	e000      	b.n	8009fe4 <prvGetNextExpireTime+0x18>
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d105      	bne.n	8009ffc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ff0:	4b07      	ldr	r3, [pc, #28]	@ (800a010 <prvGetNextExpireTime+0x44>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	e001      	b.n	800a000 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a000:	68fb      	ldr	r3, [r7, #12]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	20005714 	.word	0x20005714

0800a014 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a01c:	f7ff fa4a 	bl	80094b4 <xTaskGetTickCount>
 800a020:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a022:	4b0b      	ldr	r3, [pc, #44]	@ (800a050 <prvSampleTimeNow+0x3c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d205      	bcs.n	800a038 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a02c:	f000 f93a 	bl	800a2a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	e002      	b.n	800a03e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a03e:	4a04      	ldr	r2, [pc, #16]	@ (800a050 <prvSampleTimeNow+0x3c>)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a044:	68fb      	ldr	r3, [r7, #12]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20005724 	.word	0x20005724

0800a054 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a062:	2300      	movs	r3, #0
 800a064:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	429a      	cmp	r2, r3
 800a078:	d812      	bhi.n	800a0a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	429a      	cmp	r2, r3
 800a086:	d302      	bcc.n	800a08e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a088:	2301      	movs	r3, #1
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	e01b      	b.n	800a0c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a08e:	4b10      	ldr	r3, [pc, #64]	@ (800a0d0 <prvInsertTimerInActiveList+0x7c>)
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3304      	adds	r3, #4
 800a096:	4619      	mov	r1, r3
 800a098:	4610      	mov	r0, r2
 800a09a:	f7fe f9be 	bl	800841a <vListInsert>
 800a09e:	e012      	b.n	800a0c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d206      	bcs.n	800a0b6 <prvInsertTimerInActiveList+0x62>
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d302      	bcc.n	800a0b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e007      	b.n	800a0c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0b6:	4b07      	ldr	r3, [pc, #28]	@ (800a0d4 <prvInsertTimerInActiveList+0x80>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fe f9aa 	bl	800841a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0c6:	697b      	ldr	r3, [r7, #20]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	20005718 	.word	0x20005718
 800a0d4:	20005714 	.word	0x20005714

0800a0d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08e      	sub	sp, #56	@ 0x38
 800a0dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0de:	e0ce      	b.n	800a27e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	da19      	bge.n	800a11a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0e6:	1d3b      	adds	r3, r7, #4
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	61fb      	str	r3, [r7, #28]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a110:	6850      	ldr	r0, [r2, #4]
 800a112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a114:	6892      	ldr	r2, [r2, #8]
 800a116:	4611      	mov	r1, r2
 800a118:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f2c0 80ae 	blt.w	800a27e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d004      	beq.n	800a138 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a130:	3304      	adds	r3, #4
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe f9aa 	bl	800848c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a138:	463b      	mov	r3, r7
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff ff6a 	bl	800a014 <prvSampleTimeNow>
 800a140:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b09      	cmp	r3, #9
 800a146:	f200 8097 	bhi.w	800a278 <prvProcessReceivedCommands+0x1a0>
 800a14a:	a201      	add	r2, pc, #4	@ (adr r2, 800a150 <prvProcessReceivedCommands+0x78>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a179 	.word	0x0800a179
 800a15c:	0800a1ef 	.word	0x0800a1ef
 800a160:	0800a203 	.word	0x0800a203
 800a164:	0800a24f 	.word	0x0800a24f
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a179 	.word	0x0800a179
 800a170:	0800a1ef 	.word	0x0800a1ef
 800a174:	0800a203 	.word	0x0800a203
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a17e:	f043 0301 	orr.w	r3, r3, #1
 800a182:	b2da      	uxtb	r2, r3
 800a184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	18d1      	adds	r1, r2, r3
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a198:	f7ff ff5c 	bl	800a054 <prvInsertTimerInActiveList>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d06c      	beq.n	800a27c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d061      	beq.n	800a27c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	441a      	add	r2, r3
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1ca:	f7ff fe01 	bl	8009dd0 <xTimerGenericCommand>
 800a1ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d152      	bne.n	800a27c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	61bb      	str	r3, [r7, #24]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1f4:	f023 0301 	bic.w	r3, r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a200:	e03d      	b.n	800a27e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a208:	f043 0301 	orr.w	r3, r3, #1
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10b      	bne.n	800a23a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	617b      	str	r3, [r7, #20]
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop
 800a238:	e7fd      	b.n	800a236 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23c:	699a      	ldr	r2, [r3, #24]
 800a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a240:	18d1      	adds	r1, r2, r3
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a248:	f7ff ff04 	bl	800a054 <prvInsertTimerInActiveList>
					break;
 800a24c:	e017      	b.n	800a27e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d103      	bne.n	800a264 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a25c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a25e:	f000 fbeb 	bl	800aa38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a262:	e00c      	b.n	800a27e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a26a:	f023 0301 	bic.w	r3, r3, #1
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a272:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a276:	e002      	b.n	800a27e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a278:	bf00      	nop
 800a27a:	e000      	b.n	800a27e <prvProcessReceivedCommands+0x1a6>
					break;
 800a27c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a27e:	4b08      	ldr	r3, [pc, #32]	@ (800a2a0 <prvProcessReceivedCommands+0x1c8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	1d39      	adds	r1, r7, #4
 800a284:	2200      	movs	r2, #0
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fbd4 	bl	8008a34 <xQueueReceive>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f47f af26 	bne.w	800a0e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	3730      	adds	r7, #48	@ 0x30
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	2000571c 	.word	0x2000571c

0800a2a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2aa:	e049      	b.n	800a340 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2ac:	4b2e      	ldr	r3, [pc, #184]	@ (800a368 <prvSwitchTimerLists+0xc4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b6:	4b2c      	ldr	r3, [pc, #176]	@ (800a368 <prvSwitchTimerLists+0xc4>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe f8e1 	bl	800848c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2d8:	f003 0304 	and.w	r3, r3, #4
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d02f      	beq.n	800a340 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d90e      	bls.n	800a310 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a368 <prvSwitchTimerLists+0xc4>)
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3304      	adds	r3, #4
 800a306:	4619      	mov	r1, r3
 800a308:	4610      	mov	r0, r2
 800a30a:	f7fe f886 	bl	800841a <vListInsert>
 800a30e:	e017      	b.n	800a340 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a310:	2300      	movs	r3, #0
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2300      	movs	r3, #0
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	2100      	movs	r1, #0
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7ff fd58 	bl	8009dd0 <xTimerGenericCommand>
 800a320:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10b      	bne.n	800a340 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	603b      	str	r3, [r7, #0]
}
 800a33a:	bf00      	nop
 800a33c:	bf00      	nop
 800a33e:	e7fd      	b.n	800a33c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a340:	4b09      	ldr	r3, [pc, #36]	@ (800a368 <prvSwitchTimerLists+0xc4>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1b0      	bne.n	800a2ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a34a:	4b07      	ldr	r3, [pc, #28]	@ (800a368 <prvSwitchTimerLists+0xc4>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a350:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <prvSwitchTimerLists+0xc8>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a04      	ldr	r2, [pc, #16]	@ (800a368 <prvSwitchTimerLists+0xc4>)
 800a356:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a358:	4a04      	ldr	r2, [pc, #16]	@ (800a36c <prvSwitchTimerLists+0xc8>)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	6013      	str	r3, [r2, #0]
}
 800a35e:	bf00      	nop
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20005714 	.word	0x20005714
 800a36c:	20005718 	.word	0x20005718

0800a370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a376:	f000 f96f 	bl	800a658 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a37a:	4b15      	ldr	r3, [pc, #84]	@ (800a3d0 <prvCheckForValidListAndQueue+0x60>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d120      	bne.n	800a3c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a382:	4814      	ldr	r0, [pc, #80]	@ (800a3d4 <prvCheckForValidListAndQueue+0x64>)
 800a384:	f7fd fff8 	bl	8008378 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a388:	4813      	ldr	r0, [pc, #76]	@ (800a3d8 <prvCheckForValidListAndQueue+0x68>)
 800a38a:	f7fd fff5 	bl	8008378 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a38e:	4b13      	ldr	r3, [pc, #76]	@ (800a3dc <prvCheckForValidListAndQueue+0x6c>)
 800a390:	4a10      	ldr	r2, [pc, #64]	@ (800a3d4 <prvCheckForValidListAndQueue+0x64>)
 800a392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a394:	4b12      	ldr	r3, [pc, #72]	@ (800a3e0 <prvCheckForValidListAndQueue+0x70>)
 800a396:	4a10      	ldr	r2, [pc, #64]	@ (800a3d8 <prvCheckForValidListAndQueue+0x68>)
 800a398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a39a:	2300      	movs	r3, #0
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	4b11      	ldr	r3, [pc, #68]	@ (800a3e4 <prvCheckForValidListAndQueue+0x74>)
 800a3a0:	4a11      	ldr	r2, [pc, #68]	@ (800a3e8 <prvCheckForValidListAndQueue+0x78>)
 800a3a2:	2110      	movs	r1, #16
 800a3a4:	200a      	movs	r0, #10
 800a3a6:	f7fe f905 	bl	80085b4 <xQueueGenericCreateStatic>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	4a08      	ldr	r2, [pc, #32]	@ (800a3d0 <prvCheckForValidListAndQueue+0x60>)
 800a3ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a3b0:	4b07      	ldr	r3, [pc, #28]	@ (800a3d0 <prvCheckForValidListAndQueue+0x60>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3b8:	4b05      	ldr	r3, [pc, #20]	@ (800a3d0 <prvCheckForValidListAndQueue+0x60>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	490b      	ldr	r1, [pc, #44]	@ (800a3ec <prvCheckForValidListAndQueue+0x7c>)
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fd2a 	bl	8008e18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3c4:	f000 f97a 	bl	800a6bc <vPortExitCritical>
}
 800a3c8:	bf00      	nop
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	2000571c 	.word	0x2000571c
 800a3d4:	200056ec 	.word	0x200056ec
 800a3d8:	20005700 	.word	0x20005700
 800a3dc:	20005714 	.word	0x20005714
 800a3e0:	20005718 	.word	0x20005718
 800a3e4:	200057c8 	.word	0x200057c8
 800a3e8:	20005728 	.word	0x20005728
 800a3ec:	08018d70 	.word	0x08018d70

0800a3f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3b04      	subs	r3, #4
 800a400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3b04      	subs	r3, #4
 800a40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f023 0201 	bic.w	r2, r3, #1
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3b04      	subs	r3, #4
 800a41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a420:	4a0c      	ldr	r2, [pc, #48]	@ (800a454 <pxPortInitialiseStack+0x64>)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	3b14      	subs	r3, #20
 800a42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3b04      	subs	r3, #4
 800a436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f06f 0202 	mvn.w	r2, #2
 800a43e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	3b20      	subs	r3, #32
 800a444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a446:	68fb      	ldr	r3, [r7, #12]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	0800a459 	.word	0x0800a459

0800a458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a462:	4b13      	ldr	r3, [pc, #76]	@ (800a4b0 <prvTaskExitError+0x58>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a46a:	d00b      	beq.n	800a484 <prvTaskExitError+0x2c>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	60fb      	str	r3, [r7, #12]
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	e7fd      	b.n	800a480 <prvTaskExitError+0x28>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	60bb      	str	r3, [r7, #8]
}
 800a496:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a498:	bf00      	nop
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0fc      	beq.n	800a49a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	20000010 	.word	0x20000010
	...

0800a4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4c0:	4b07      	ldr	r3, [pc, #28]	@ (800a4e0 <pxCurrentTCBConst2>)
 800a4c2:	6819      	ldr	r1, [r3, #0]
 800a4c4:	6808      	ldr	r0, [r1, #0]
 800a4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	f380 8809 	msr	PSP, r0
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f04f 0000 	mov.w	r0, #0
 800a4d6:	f380 8811 	msr	BASEPRI, r0
 800a4da:	4770      	bx	lr
 800a4dc:	f3af 8000 	nop.w

0800a4e0 <pxCurrentTCBConst2>:
 800a4e0:	200051ec 	.word	0x200051ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop

0800a4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4e8:	4808      	ldr	r0, [pc, #32]	@ (800a50c <prvPortStartFirstTask+0x24>)
 800a4ea:	6800      	ldr	r0, [r0, #0]
 800a4ec:	6800      	ldr	r0, [r0, #0]
 800a4ee:	f380 8808 	msr	MSP, r0
 800a4f2:	f04f 0000 	mov.w	r0, #0
 800a4f6:	f380 8814 	msr	CONTROL, r0
 800a4fa:	b662      	cpsie	i
 800a4fc:	b661      	cpsie	f
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	df00      	svc	0
 800a508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a50a:	bf00      	nop
 800a50c:	e000ed08 	.word	0xe000ed08

0800a510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a516:	4b47      	ldr	r3, [pc, #284]	@ (800a634 <xPortStartScheduler+0x124>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a47      	ldr	r2, [pc, #284]	@ (800a638 <xPortStartScheduler+0x128>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d10b      	bne.n	800a538 <xPortStartScheduler+0x28>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	613b      	str	r3, [r7, #16]
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a538:	4b3e      	ldr	r3, [pc, #248]	@ (800a634 <xPortStartScheduler+0x124>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a3f      	ldr	r2, [pc, #252]	@ (800a63c <xPortStartScheduler+0x12c>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d10b      	bne.n	800a55a <xPortStartScheduler+0x4a>
	__asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	60fb      	str	r3, [r7, #12]
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop
 800a558:	e7fd      	b.n	800a556 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a55a:	4b39      	ldr	r3, [pc, #228]	@ (800a640 <xPortStartScheduler+0x130>)
 800a55c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	22ff      	movs	r2, #255	@ 0xff
 800a56a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	4b31      	ldr	r3, [pc, #196]	@ (800a644 <xPortStartScheduler+0x134>)
 800a580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a582:	4b31      	ldr	r3, [pc, #196]	@ (800a648 <xPortStartScheduler+0x138>)
 800a584:	2207      	movs	r2, #7
 800a586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a588:	e009      	b.n	800a59e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a58a:	4b2f      	ldr	r3, [pc, #188]	@ (800a648 <xPortStartScheduler+0x138>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3b01      	subs	r3, #1
 800a590:	4a2d      	ldr	r2, [pc, #180]	@ (800a648 <xPortStartScheduler+0x138>)
 800a592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a6:	2b80      	cmp	r3, #128	@ 0x80
 800a5a8:	d0ef      	beq.n	800a58a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5aa:	4b27      	ldr	r3, [pc, #156]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f1c3 0307 	rsb	r3, r3, #7
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d00b      	beq.n	800a5ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60bb      	str	r3, [r7, #8]
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	e7fd      	b.n	800a5ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5e0:	4a19      	ldr	r2, [pc, #100]	@ (800a648 <xPortStartScheduler+0x138>)
 800a5e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5ec:	4b17      	ldr	r3, [pc, #92]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a16      	ldr	r2, [pc, #88]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a5f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5f8:	4b14      	ldr	r3, [pc, #80]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a13      	ldr	r2, [pc, #76]	@ (800a64c <xPortStartScheduler+0x13c>)
 800a5fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a604:	f000 f8da 	bl	800a7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a608:	4b11      	ldr	r3, [pc, #68]	@ (800a650 <xPortStartScheduler+0x140>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a60e:	f000 f8f9 	bl	800a804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a612:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <xPortStartScheduler+0x144>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a0f      	ldr	r2, [pc, #60]	@ (800a654 <xPortStartScheduler+0x144>)
 800a618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a61c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a61e:	f7ff ff63 	bl	800a4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a622:	f7ff f811 	bl	8009648 <vTaskSwitchContext>
	prvTaskExitError();
 800a626:	f7ff ff17 	bl	800a458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	e000ed00 	.word	0xe000ed00
 800a638:	410fc271 	.word	0x410fc271
 800a63c:	410fc270 	.word	0x410fc270
 800a640:	e000e400 	.word	0xe000e400
 800a644:	20005818 	.word	0x20005818
 800a648:	2000581c 	.word	0x2000581c
 800a64c:	e000ed20 	.word	0xe000ed20
 800a650:	20000010 	.word	0x20000010
 800a654:	e000ef34 	.word	0xe000ef34

0800a658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	607b      	str	r3, [r7, #4]
}
 800a670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a672:	4b10      	ldr	r3, [pc, #64]	@ (800a6b4 <vPortEnterCritical+0x5c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3301      	adds	r3, #1
 800a678:	4a0e      	ldr	r2, [pc, #56]	@ (800a6b4 <vPortEnterCritical+0x5c>)
 800a67a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a67c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <vPortEnterCritical+0x5c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d110      	bne.n	800a6a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a684:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b8 <vPortEnterCritical+0x60>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00b      	beq.n	800a6a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	603b      	str	r3, [r7, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	e7fd      	b.n	800a6a2 <vPortEnterCritical+0x4a>
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20000010 	.word	0x20000010
 800a6b8:	e000ed04 	.word	0xe000ed04

0800a6bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6c2:	4b12      	ldr	r3, [pc, #72]	@ (800a70c <vPortExitCritical+0x50>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10b      	bne.n	800a6e2 <vPortExitCritical+0x26>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	607b      	str	r3, [r7, #4]
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	e7fd      	b.n	800a6de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a70c <vPortExitCritical+0x50>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	4a08      	ldr	r2, [pc, #32]	@ (800a70c <vPortExitCritical+0x50>)
 800a6ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6ec:	4b07      	ldr	r3, [pc, #28]	@ (800a70c <vPortExitCritical+0x50>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d105      	bne.n	800a700 <vPortExitCritical+0x44>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f383 8811 	msr	BASEPRI, r3
}
 800a6fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	20000010 	.word	0x20000010

0800a710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a710:	f3ef 8009 	mrs	r0, PSP
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	4b15      	ldr	r3, [pc, #84]	@ (800a770 <pxCurrentTCBConst>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	f01e 0f10 	tst.w	lr, #16
 800a720:	bf08      	it	eq
 800a722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72a:	6010      	str	r0, [r2, #0]
 800a72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a734:	f380 8811 	msr	BASEPRI, r0
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f7fe ff82 	bl	8009648 <vTaskSwitchContext>
 800a744:	f04f 0000 	mov.w	r0, #0
 800a748:	f380 8811 	msr	BASEPRI, r0
 800a74c:	bc09      	pop	{r0, r3}
 800a74e:	6819      	ldr	r1, [r3, #0]
 800a750:	6808      	ldr	r0, [r1, #0]
 800a752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a756:	f01e 0f10 	tst.w	lr, #16
 800a75a:	bf08      	it	eq
 800a75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a760:	f380 8809 	msr	PSP, r0
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	f3af 8000 	nop.w

0800a770 <pxCurrentTCBConst>:
 800a770:	200051ec 	.word	0x200051ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop

0800a778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
}
 800a790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a792:	f7fe fe9f 	bl	80094d4 <xTaskIncrementTick>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a79c:	4b06      	ldr	r3, [pc, #24]	@ (800a7b8 <xPortSysTickHandler+0x40>)
 800a79e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	f383 8811 	msr	BASEPRI, r3
}
 800a7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f0 <vPortSetupTimerInterrupt+0x34>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f4 <vPortSetupTimerInterrupt+0x38>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f8 <vPortSetupTimerInterrupt+0x3c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a7fc <vPortSetupTimerInterrupt+0x40>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	099b      	lsrs	r3, r3, #6
 800a7d8:	4a09      	ldr	r2, [pc, #36]	@ (800a800 <vPortSetupTimerInterrupt+0x44>)
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7de:	4b04      	ldr	r3, [pc, #16]	@ (800a7f0 <vPortSetupTimerInterrupt+0x34>)
 800a7e0:	2207      	movs	r2, #7
 800a7e2:	601a      	str	r2, [r3, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	e000e010 	.word	0xe000e010
 800a7f4:	e000e018 	.word	0xe000e018
 800a7f8:	20000004 	.word	0x20000004
 800a7fc:	10624dd3 	.word	0x10624dd3
 800a800:	e000e014 	.word	0xe000e014

0800a804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a804:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a814 <vPortEnableVFP+0x10>
 800a808:	6801      	ldr	r1, [r0, #0]
 800a80a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a80e:	6001      	str	r1, [r0, #0]
 800a810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a812:	bf00      	nop
 800a814:	e000ed88 	.word	0xe000ed88

0800a818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a81e:	f3ef 8305 	mrs	r3, IPSR
 800a822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b0f      	cmp	r3, #15
 800a828:	d915      	bls.n	800a856 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a82a:	4a18      	ldr	r2, [pc, #96]	@ (800a88c <vPortValidateInterruptPriority+0x74>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4413      	add	r3, r2
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a834:	4b16      	ldr	r3, [pc, #88]	@ (800a890 <vPortValidateInterruptPriority+0x78>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	7afa      	ldrb	r2, [r7, #11]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d20b      	bcs.n	800a856 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	607b      	str	r3, [r7, #4]
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	e7fd      	b.n	800a852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a856:	4b0f      	ldr	r3, [pc, #60]	@ (800a894 <vPortValidateInterruptPriority+0x7c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a85e:	4b0e      	ldr	r3, [pc, #56]	@ (800a898 <vPortValidateInterruptPriority+0x80>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d90b      	bls.n	800a87e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	603b      	str	r3, [r7, #0]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <vPortValidateInterruptPriority+0x62>
	}
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	e000e3f0 	.word	0xe000e3f0
 800a890:	20005818 	.word	0x20005818
 800a894:	e000ed0c 	.word	0xe000ed0c
 800a898:	2000581c 	.word	0x2000581c

0800a89c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	@ 0x28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8a8:	f7fe fd58 	bl	800935c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8ac:	4b5c      	ldr	r3, [pc, #368]	@ (800aa20 <pvPortMalloc+0x184>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8b4:	f000 f924 	bl	800ab00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8b8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa24 <pvPortMalloc+0x188>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f040 8095 	bne.w	800a9f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01e      	beq.n	800a90a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8cc:	2208      	movs	r2, #8
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f003 0307 	and.w	r3, r3, #7
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d015      	beq.n	800a90a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f023 0307 	bic.w	r3, r3, #7
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f003 0307 	and.w	r3, r3, #7
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00b      	beq.n	800a90a <pvPortMalloc+0x6e>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	617b      	str	r3, [r7, #20]
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop
 800a908:	e7fd      	b.n	800a906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d06f      	beq.n	800a9f0 <pvPortMalloc+0x154>
 800a910:	4b45      	ldr	r3, [pc, #276]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	429a      	cmp	r2, r3
 800a918:	d86a      	bhi.n	800a9f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a91a:	4b44      	ldr	r3, [pc, #272]	@ (800aa2c <pvPortMalloc+0x190>)
 800a91c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a91e:	4b43      	ldr	r3, [pc, #268]	@ (800aa2c <pvPortMalloc+0x190>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a924:	e004      	b.n	800a930 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d903      	bls.n	800a942 <pvPortMalloc+0xa6>
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f1      	bne.n	800a926 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a942:	4b37      	ldr	r3, [pc, #220]	@ (800aa20 <pvPortMalloc+0x184>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a948:	429a      	cmp	r2, r3
 800a94a:	d051      	beq.n	800a9f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2208      	movs	r2, #8
 800a952:	4413      	add	r3, r2
 800a954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	1ad2      	subs	r2, r2, r3
 800a966:	2308      	movs	r3, #8
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d920      	bls.n	800a9b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4413      	add	r3, r2
 800a974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00b      	beq.n	800a998 <pvPortMalloc+0xfc>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	613b      	str	r3, [r7, #16]
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9aa:	69b8      	ldr	r0, [r7, #24]
 800a9ac:	f000 f90a 	bl	800abc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	4a1b      	ldr	r2, [pc, #108]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9be:	4b1a      	ldr	r3, [pc, #104]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa30 <pvPortMalloc+0x194>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d203      	bcs.n	800a9d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9ca:	4b17      	ldr	r3, [pc, #92]	@ (800aa28 <pvPortMalloc+0x18c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a18      	ldr	r2, [pc, #96]	@ (800aa30 <pvPortMalloc+0x194>)
 800a9d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	4b13      	ldr	r3, [pc, #76]	@ (800aa24 <pvPortMalloc+0x188>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9e6:	4b13      	ldr	r3, [pc, #76]	@ (800aa34 <pvPortMalloc+0x198>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4a11      	ldr	r2, [pc, #68]	@ (800aa34 <pvPortMalloc+0x198>)
 800a9ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9f0:	f7fe fcc2 	bl	8009378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00b      	beq.n	800aa16 <pvPortMalloc+0x17a>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	60fb      	str	r3, [r7, #12]
}
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
 800aa14:	e7fd      	b.n	800aa12 <pvPortMalloc+0x176>
	return pvReturn;
 800aa16:	69fb      	ldr	r3, [r7, #28]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3728      	adds	r7, #40	@ 0x28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	20006428 	.word	0x20006428
 800aa24:	2000643c 	.word	0x2000643c
 800aa28:	2000642c 	.word	0x2000642c
 800aa2c:	20006420 	.word	0x20006420
 800aa30:	20006430 	.word	0x20006430
 800aa34:	20006434 	.word	0x20006434

0800aa38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d04f      	beq.n	800aaea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	425b      	negs	r3, r3
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4413      	add	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	4b25      	ldr	r3, [pc, #148]	@ (800aaf4 <vPortFree+0xbc>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4013      	ands	r3, r2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10b      	bne.n	800aa7e <vPortFree+0x46>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	60fb      	str	r3, [r7, #12]
}
 800aa78:	bf00      	nop
 800aa7a:	bf00      	nop
 800aa7c:	e7fd      	b.n	800aa7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00b      	beq.n	800aa9e <vPortFree+0x66>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	60bb      	str	r3, [r7, #8]
}
 800aa98:	bf00      	nop
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	4b14      	ldr	r3, [pc, #80]	@ (800aaf4 <vPortFree+0xbc>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01e      	beq.n	800aaea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11a      	bne.n	800aaea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf4 <vPortFree+0xbc>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	43db      	mvns	r3, r3
 800aabe:	401a      	ands	r2, r3
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aac4:	f7fe fc4a 	bl	800935c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf8 <vPortFree+0xc0>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4413      	add	r3, r2
 800aad2:	4a09      	ldr	r2, [pc, #36]	@ (800aaf8 <vPortFree+0xc0>)
 800aad4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aad6:	6938      	ldr	r0, [r7, #16]
 800aad8:	f000 f874 	bl	800abc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aadc:	4b07      	ldr	r3, [pc, #28]	@ (800aafc <vPortFree+0xc4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3301      	adds	r3, #1
 800aae2:	4a06      	ldr	r2, [pc, #24]	@ (800aafc <vPortFree+0xc4>)
 800aae4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aae6:	f7fe fc47 	bl	8009378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aaea:	bf00      	nop
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000643c 	.word	0x2000643c
 800aaf8:	2000642c 	.word	0x2000642c
 800aafc:	20006438 	.word	0x20006438

0800ab00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ab0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab0c:	4b27      	ldr	r3, [pc, #156]	@ (800abac <prvHeapInit+0xac>)
 800ab0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f003 0307 	and.w	r3, r3, #7
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00c      	beq.n	800ab34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3307      	adds	r3, #7
 800ab1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0307 	bic.w	r3, r3, #7
 800ab26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	4a1f      	ldr	r2, [pc, #124]	@ (800abac <prvHeapInit+0xac>)
 800ab30:	4413      	add	r3, r2
 800ab32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab38:	4a1d      	ldr	r2, [pc, #116]	@ (800abb0 <prvHeapInit+0xb0>)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab3e:	4b1c      	ldr	r3, [pc, #112]	@ (800abb0 <prvHeapInit+0xb0>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	4413      	add	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	1a9b      	subs	r3, r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 0307 	bic.w	r3, r3, #7
 800ab5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4a15      	ldr	r2, [pc, #84]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab62:	4b14      	ldr	r3, [pc, #80]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2200      	movs	r2, #0
 800ab68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab6a:	4b12      	ldr	r3, [pc, #72]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab80:	4b0c      	ldr	r3, [pc, #48]	@ (800abb4 <prvHeapInit+0xb4>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	4a0a      	ldr	r2, [pc, #40]	@ (800abb8 <prvHeapInit+0xb8>)
 800ab8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	4a09      	ldr	r2, [pc, #36]	@ (800abbc <prvHeapInit+0xbc>)
 800ab96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab98:	4b09      	ldr	r3, [pc, #36]	@ (800abc0 <prvHeapInit+0xc0>)
 800ab9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ab9e:	601a      	str	r2, [r3, #0]
}
 800aba0:	bf00      	nop
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	20005820 	.word	0x20005820
 800abb0:	20006420 	.word	0x20006420
 800abb4:	20006428 	.word	0x20006428
 800abb8:	20006430 	.word	0x20006430
 800abbc:	2000642c 	.word	0x2000642c
 800abc0:	2000643c 	.word	0x2000643c

0800abc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abcc:	4b28      	ldr	r3, [pc, #160]	@ (800ac70 <prvInsertBlockIntoFreeList+0xac>)
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	e002      	b.n	800abd8 <prvInsertBlockIntoFreeList+0x14>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d8f7      	bhi.n	800abd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	4413      	add	r3, r2
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d108      	bne.n	800ac06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	441a      	add	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	441a      	add	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d118      	bne.n	800ac4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	4b15      	ldr	r3, [pc, #84]	@ (800ac74 <prvInsertBlockIntoFreeList+0xb0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d00d      	beq.n	800ac42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	441a      	add	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e008      	b.n	800ac54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac42:	4b0c      	ldr	r3, [pc, #48]	@ (800ac74 <prvInsertBlockIntoFreeList+0xb0>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	e003      	b.n	800ac54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d002      	beq.n	800ac62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20006420 	.word	0x20006420
 800ac74:	20006428 	.word	0x20006428

0800ac78 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ac78:	4b04      	ldr	r3, [pc, #16]	@ (800ac8c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	b10a      	cbz	r2, 800ac82 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ac7e:	4803      	ldr	r0, [pc, #12]	@ (800ac8c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ac80:	4770      	bx	lr
 800ac82:	4a03      	ldr	r2, [pc, #12]	@ (800ac90 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ac84:	4801      	ldr	r0, [pc, #4]	@ (800ac8c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ac86:	6812      	ldr	r2, [r2, #0]
 800ac88:	601a      	str	r2, [r3, #0]
 800ac8a:	4770      	bx	lr
 800ac8c:	2000001c 	.word	0x2000001c
 800ac90:	200001d0 	.word	0x200001d0

0800ac94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ac94:	4a02      	ldr	r2, [pc, #8]	@ (800aca0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ac96:	4b03      	ldr	r3, [pc, #12]	@ (800aca4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ac98:	6812      	ldr	r2, [r2, #0]
 800ac9a:	601a      	str	r2, [r3, #0]
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	200001d0 	.word	0x200001d0
 800aca4:	2000001c 	.word	0x2000001c

0800aca8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800aca8:	f003 be7c 	b.w	800e9a4 <geometry_msgs__msg__Twist__init>

0800acac <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800acac:	f003 be9e 	b.w	800e9ec <geometry_msgs__msg__Twist__fini>

0800acb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800acb0:	b510      	push	{r4, lr}
 800acb2:	f000 f819 	bl	800ace8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800acb6:	4c07      	ldr	r4, [pc, #28]	@ (800acd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800acb8:	60e0      	str	r0, [r4, #12]
 800acba:	f000 f815 	bl	800ace8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800acbe:	4b06      	ldr	r3, [pc, #24]	@ (800acd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800acc0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	b10a      	cbz	r2, 800acca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800acc6:	4804      	ldr	r0, [pc, #16]	@ (800acd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	4a04      	ldr	r2, [pc, #16]	@ (800acdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800accc:	4802      	ldr	r0, [pc, #8]	@ (800acd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800acce:	6812      	ldr	r2, [r2, #0]
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	bd10      	pop	{r4, pc}
 800acd4:	20000028 	.word	0x20000028
 800acd8:	200000a0 	.word	0x200000a0
 800acdc:	200001d4 	.word	0x200001d4

0800ace0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800ace0:	f003 be90 	b.w	800ea04 <geometry_msgs__msg__Vector3__init>

0800ace4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800ace4:	f003 be92 	b.w	800ea0c <geometry_msgs__msg__Vector3__fini>

0800ace8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ace8:	4b04      	ldr	r3, [pc, #16]	@ (800acfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	b10a      	cbz	r2, 800acf2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800acee:	4803      	ldr	r0, [pc, #12]	@ (800acfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800acf0:	4770      	bx	lr
 800acf2:	4a03      	ldr	r2, [pc, #12]	@ (800ad00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800acf4:	4801      	ldr	r0, [pc, #4]	@ (800acfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800acf6:	6812      	ldr	r2, [r2, #0]
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	4770      	bx	lr
 800acfc:	20000160 	.word	0x20000160
 800ad00:	200001d4 	.word	0x200001d4

0800ad04 <get_serialized_size_geometry_msgs__msg__Twist>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	4604      	mov	r4, r0
 800ad08:	b148      	cbz	r0, 800ad1e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800ad0a:	460d      	mov	r5, r1
 800ad0c:	f000 f860 	bl	800add0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ad10:	4606      	mov	r6, r0
 800ad12:	1829      	adds	r1, r5, r0
 800ad14:	f104 0018 	add.w	r0, r4, #24
 800ad18:	f000 f85a 	bl	800add0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ad1c:	4430      	add	r0, r6
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}

0800ad20 <_Twist__cdr_deserialize>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	460c      	mov	r4, r1
 800ad24:	b189      	cbz	r1, 800ad4a <_Twist__cdr_deserialize+0x2a>
 800ad26:	4605      	mov	r5, r0
 800ad28:	f000 f8de 	bl	800aee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad2c:	6843      	ldr	r3, [r0, #4]
 800ad2e:	4621      	mov	r1, r4
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	4628      	mov	r0, r5
 800ad34:	4798      	blx	r3
 800ad36:	f000 f8d7 	bl	800aee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad3a:	6843      	ldr	r3, [r0, #4]
 800ad3c:	f104 0118 	add.w	r1, r4, #24
 800ad40:	4628      	mov	r0, r5
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad48:	4718      	bx	r3
 800ad4a:	4608      	mov	r0, r1
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
 800ad4e:	bf00      	nop

0800ad50 <_Twist__cdr_serialize>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	9101      	str	r1, [sp, #4]
 800ad56:	b190      	cbz	r0, 800ad7e <_Twist__cdr_serialize+0x2e>
 800ad58:	4604      	mov	r4, r0
 800ad5a:	f000 f8c5 	bl	800aee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad5e:	6843      	ldr	r3, [r0, #4]
 800ad60:	9901      	ldr	r1, [sp, #4]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	4620      	mov	r0, r4
 800ad66:	4798      	blx	r3
 800ad68:	f000 f8be 	bl	800aee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad6c:	6843      	ldr	r3, [r0, #4]
 800ad6e:	9901      	ldr	r1, [sp, #4]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f104 0018 	add.w	r0, r4, #24
 800ad76:	b002      	add	sp, #8
 800ad78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7c:	4718      	bx	r3
 800ad7e:	b002      	add	sp, #8
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	bf00      	nop

0800ad84 <_Twist__get_serialized_size>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4604      	mov	r4, r0
 800ad88:	b148      	cbz	r0, 800ad9e <_Twist__get_serialized_size+0x1a>
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f000 f820 	bl	800add0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ad90:	4605      	mov	r5, r0
 800ad92:	4601      	mov	r1, r0
 800ad94:	f104 0018 	add.w	r0, r4, #24
 800ad98:	f000 f81a 	bl	800add0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ad9c:	4428      	add	r0, r5
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}

0800ada0 <_Twist__max_serialized_size>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	2301      	movs	r3, #1
 800ada6:	2100      	movs	r1, #0
 800ada8:	f10d 0007 	add.w	r0, sp, #7
 800adac:	f88d 3007 	strb.w	r3, [sp, #7]
 800adb0:	f000 f87e 	bl	800aeb0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800adb4:	4604      	mov	r4, r0
 800adb6:	4601      	mov	r1, r0
 800adb8:	f10d 0007 	add.w	r0, sp, #7
 800adbc:	f000 f878 	bl	800aeb0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800adc0:	4420      	add	r0, r4
 800adc2:	b002      	add	sp, #8
 800adc4:	bd10      	pop	{r4, pc}
 800adc6:	bf00      	nop

0800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800adc8:	4800      	ldr	r0, [pc, #0]	@ (800adcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800adca:	4770      	bx	lr
 800adcc:	2000016c 	.word	0x2000016c

0800add0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800add0:	b1b8      	cbz	r0, 800ae02 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800add2:	b538      	push	{r3, r4, r5, lr}
 800add4:	460d      	mov	r5, r1
 800add6:	4628      	mov	r0, r5
 800add8:	2108      	movs	r1, #8
 800adda:	f001 f9fd 	bl	800c1d8 <ucdr_alignment>
 800adde:	f105 0308 	add.w	r3, r5, #8
 800ade2:	181c      	adds	r4, r3, r0
 800ade4:	2108      	movs	r1, #8
 800ade6:	4620      	mov	r0, r4
 800ade8:	f001 f9f6 	bl	800c1d8 <ucdr_alignment>
 800adec:	3008      	adds	r0, #8
 800adee:	4404      	add	r4, r0
 800adf0:	2108      	movs	r1, #8
 800adf2:	4620      	mov	r0, r4
 800adf4:	f001 f9f0 	bl	800c1d8 <ucdr_alignment>
 800adf8:	f1c5 0508 	rsb	r5, r5, #8
 800adfc:	4428      	add	r0, r5
 800adfe:	4420      	add	r0, r4
 800ae00:	bd38      	pop	{r3, r4, r5, pc}
 800ae02:	4770      	bx	lr

0800ae04 <_Vector3__cdr_deserialize>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	460c      	mov	r4, r1
 800ae08:	b171      	cbz	r1, 800ae28 <_Vector3__cdr_deserialize+0x24>
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	f001 f8c6 	bl	800bf9c <ucdr_deserialize_double>
 800ae10:	f104 0108 	add.w	r1, r4, #8
 800ae14:	4628      	mov	r0, r5
 800ae16:	f001 f8c1 	bl	800bf9c <ucdr_deserialize_double>
 800ae1a:	f104 0110 	add.w	r1, r4, #16
 800ae1e:	4628      	mov	r0, r5
 800ae20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae24:	f001 b8ba 	b.w	800bf9c <ucdr_deserialize_double>
 800ae28:	4608      	mov	r0, r1
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}

0800ae2c <_Vector3__cdr_serialize>:
 800ae2c:	b198      	cbz	r0, 800ae56 <_Vector3__cdr_serialize+0x2a>
 800ae2e:	b538      	push	{r3, r4, r5, lr}
 800ae30:	ed90 0b00 	vldr	d0, [r0]
 800ae34:	460d      	mov	r5, r1
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	f000 ffdf 	bl	800bdfc <ucdr_serialize_double>
 800ae3e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ae42:	4628      	mov	r0, r5
 800ae44:	f000 ffda 	bl	800bdfc <ucdr_serialize_double>
 800ae48:	ed94 0b04 	vldr	d0, [r4, #16]
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae52:	f000 bfd3 	b.w	800bdfc <ucdr_serialize_double>
 800ae56:	4770      	bx	lr

0800ae58 <_Vector3__get_serialized_size>:
 800ae58:	b198      	cbz	r0, 800ae82 <_Vector3__get_serialized_size+0x2a>
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	2108      	movs	r1, #8
 800ae5e:	2000      	movs	r0, #0
 800ae60:	f001 f9ba 	bl	800c1d8 <ucdr_alignment>
 800ae64:	f100 0408 	add.w	r4, r0, #8
 800ae68:	2108      	movs	r1, #8
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f001 f9b4 	bl	800c1d8 <ucdr_alignment>
 800ae70:	3008      	adds	r0, #8
 800ae72:	4404      	add	r4, r0
 800ae74:	2108      	movs	r1, #8
 800ae76:	4620      	mov	r0, r4
 800ae78:	f001 f9ae 	bl	800c1d8 <ucdr_alignment>
 800ae7c:	3008      	adds	r0, #8
 800ae7e:	4420      	add	r0, r4
 800ae80:	bd10      	pop	{r4, pc}
 800ae82:	4770      	bx	lr

0800ae84 <_Vector3__max_serialized_size>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	2108      	movs	r1, #8
 800ae88:	2000      	movs	r0, #0
 800ae8a:	f001 f9a5 	bl	800c1d8 <ucdr_alignment>
 800ae8e:	f100 0508 	add.w	r5, r0, #8
 800ae92:	2108      	movs	r1, #8
 800ae94:	4628      	mov	r0, r5
 800ae96:	f001 f99f 	bl	800c1d8 <ucdr_alignment>
 800ae9a:	f100 0408 	add.w	r4, r0, #8
 800ae9e:	442c      	add	r4, r5
 800aea0:	2108      	movs	r1, #8
 800aea2:	4620      	mov	r0, r4
 800aea4:	f001 f998 	bl	800c1d8 <ucdr_alignment>
 800aea8:	3008      	adds	r0, #8
 800aeaa:	4420      	add	r0, r4
 800aeac:	bd38      	pop	{r3, r4, r5, pc}
 800aeae:	bf00      	nop

0800aeb0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	7003      	strb	r3, [r0, #0]
 800aeb8:	2108      	movs	r1, #8
 800aeba:	4620      	mov	r0, r4
 800aebc:	f001 f98c 	bl	800c1d8 <ucdr_alignment>
 800aec0:	f104 0508 	add.w	r5, r4, #8
 800aec4:	1946      	adds	r6, r0, r5
 800aec6:	2108      	movs	r1, #8
 800aec8:	4630      	mov	r0, r6
 800aeca:	f001 f985 	bl	800c1d8 <ucdr_alignment>
 800aece:	f100 0508 	add.w	r5, r0, #8
 800aed2:	4435      	add	r5, r6
 800aed4:	2108      	movs	r1, #8
 800aed6:	4628      	mov	r0, r5
 800aed8:	f001 f97e 	bl	800c1d8 <ucdr_alignment>
 800aedc:	f1c4 0408 	rsb	r4, r4, #8
 800aee0:	4420      	add	r0, r4
 800aee2:	4428      	add	r0, r5
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
 800aee6:	bf00      	nop

0800aee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800aee8:	4800      	ldr	r0, [pc, #0]	@ (800aeec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800aeea:	4770      	bx	lr
 800aeec:	20000194 	.word	0x20000194

0800aef0 <ucdr_serialize_bool>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	460d      	mov	r5, r1
 800aef4:	2101      	movs	r1, #1
 800aef6:	4604      	mov	r4, r0
 800aef8:	f001 f922 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800aefc:	b148      	cbz	r0, 800af12 <ucdr_serialize_bool+0x22>
 800aefe:	68a3      	ldr	r3, [r4, #8]
 800af00:	701d      	strb	r5, [r3, #0]
 800af02:	68a2      	ldr	r2, [r4, #8]
 800af04:	6923      	ldr	r3, [r4, #16]
 800af06:	2101      	movs	r1, #1
 800af08:	440a      	add	r2, r1
 800af0a:	440b      	add	r3, r1
 800af0c:	60a2      	str	r2, [r4, #8]
 800af0e:	6123      	str	r3, [r4, #16]
 800af10:	7561      	strb	r1, [r4, #21]
 800af12:	7da0      	ldrb	r0, [r4, #22]
 800af14:	f080 0001 	eor.w	r0, r0, #1
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	bf00      	nop

0800af1c <ucdr_deserialize_bool>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	460d      	mov	r5, r1
 800af20:	2101      	movs	r1, #1
 800af22:	4604      	mov	r4, r0
 800af24:	f001 f90c 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800af28:	b160      	cbz	r0, 800af44 <ucdr_deserialize_bool+0x28>
 800af2a:	68a2      	ldr	r2, [r4, #8]
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800af32:	3900      	subs	r1, #0
 800af34:	bf18      	it	ne
 800af36:	2101      	movne	r1, #1
 800af38:	7029      	strb	r1, [r5, #0]
 800af3a:	3301      	adds	r3, #1
 800af3c:	2101      	movs	r1, #1
 800af3e:	60a2      	str	r2, [r4, #8]
 800af40:	6123      	str	r3, [r4, #16]
 800af42:	7561      	strb	r1, [r4, #21]
 800af44:	7da0      	ldrb	r0, [r4, #22]
 800af46:	f080 0001 	eor.w	r0, r0, #1
 800af4a:	bd38      	pop	{r3, r4, r5, pc}

0800af4c <ucdr_serialize_uint8_t>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	460d      	mov	r5, r1
 800af50:	2101      	movs	r1, #1
 800af52:	4604      	mov	r4, r0
 800af54:	f001 f8f4 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800af58:	b148      	cbz	r0, 800af6e <ucdr_serialize_uint8_t+0x22>
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	701d      	strb	r5, [r3, #0]
 800af5e:	68a2      	ldr	r2, [r4, #8]
 800af60:	6923      	ldr	r3, [r4, #16]
 800af62:	2101      	movs	r1, #1
 800af64:	440a      	add	r2, r1
 800af66:	440b      	add	r3, r1
 800af68:	60a2      	str	r2, [r4, #8]
 800af6a:	6123      	str	r3, [r4, #16]
 800af6c:	7561      	strb	r1, [r4, #21]
 800af6e:	7da0      	ldrb	r0, [r4, #22]
 800af70:	f080 0001 	eor.w	r0, r0, #1
 800af74:	bd38      	pop	{r3, r4, r5, pc}
 800af76:	bf00      	nop

0800af78 <ucdr_deserialize_uint8_t>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	460d      	mov	r5, r1
 800af7c:	2101      	movs	r1, #1
 800af7e:	4604      	mov	r4, r0
 800af80:	f001 f8de 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800af84:	b150      	cbz	r0, 800af9c <ucdr_deserialize_uint8_t+0x24>
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	702b      	strb	r3, [r5, #0]
 800af8c:	68a2      	ldr	r2, [r4, #8]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	2101      	movs	r1, #1
 800af92:	440a      	add	r2, r1
 800af94:	440b      	add	r3, r1
 800af96:	60a2      	str	r2, [r4, #8]
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	7561      	strb	r1, [r4, #21]
 800af9c:	7da0      	ldrb	r0, [r4, #22]
 800af9e:	f080 0001 	eor.w	r0, r0, #1
 800afa2:	bd38      	pop	{r3, r4, r5, pc}

0800afa4 <ucdr_serialize_uint16_t>:
 800afa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa8:	b082      	sub	sp, #8
 800afaa:	460b      	mov	r3, r1
 800afac:	2102      	movs	r1, #2
 800afae:	4604      	mov	r4, r0
 800afb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800afb4:	f001 f918 	bl	800c1e8 <ucdr_buffer_alignment>
 800afb8:	4601      	mov	r1, r0
 800afba:	4620      	mov	r0, r4
 800afbc:	7d67      	ldrb	r7, [r4, #21]
 800afbe:	f001 f957 	bl	800c270 <ucdr_advance_buffer>
 800afc2:	2102      	movs	r1, #2
 800afc4:	4620      	mov	r0, r4
 800afc6:	f001 f8af 	bl	800c128 <ucdr_check_buffer_available_for>
 800afca:	bb78      	cbnz	r0, 800b02c <ucdr_serialize_uint16_t+0x88>
 800afcc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	d926      	bls.n	800b022 <ucdr_serialize_uint16_t+0x7e>
 800afd4:	1b5e      	subs	r6, r3, r5
 800afd6:	60a3      	str	r3, [r4, #8]
 800afd8:	6923      	ldr	r3, [r4, #16]
 800afda:	f1c6 0802 	rsb	r8, r6, #2
 800afde:	4433      	add	r3, r6
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	4641      	mov	r1, r8
 800afe4:	4620      	mov	r0, r4
 800afe6:	f001 f8ab 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800afea:	2800      	cmp	r0, #0
 800afec:	d03b      	beq.n	800b066 <ucdr_serialize_uint16_t+0xc2>
 800afee:	7d23      	ldrb	r3, [r4, #20]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d04a      	beq.n	800b08a <ucdr_serialize_uint16_t+0xe6>
 800aff4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aff8:	702b      	strb	r3, [r5, #0]
 800affa:	2e00      	cmp	r6, #0
 800affc:	d040      	beq.n	800b080 <ucdr_serialize_uint16_t+0xdc>
 800affe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b002:	706b      	strb	r3, [r5, #1]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	68a2      	ldr	r2, [r4, #8]
 800b008:	7da0      	ldrb	r0, [r4, #22]
 800b00a:	3302      	adds	r3, #2
 800b00c:	1b9e      	subs	r6, r3, r6
 800b00e:	4442      	add	r2, r8
 800b010:	2302      	movs	r3, #2
 800b012:	f080 0001 	eor.w	r0, r0, #1
 800b016:	60a2      	str	r2, [r4, #8]
 800b018:	6126      	str	r6, [r4, #16]
 800b01a:	7563      	strb	r3, [r4, #21]
 800b01c:	b002      	add	sp, #8
 800b01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b022:	2102      	movs	r1, #2
 800b024:	4620      	mov	r0, r4
 800b026:	f001 f88b 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b02a:	b190      	cbz	r0, 800b052 <ucdr_serialize_uint16_t+0xae>
 800b02c:	7d23      	ldrb	r3, [r4, #20]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	68a3      	ldr	r3, [r4, #8]
 800b032:	d014      	beq.n	800b05e <ucdr_serialize_uint16_t+0xba>
 800b034:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b038:	701a      	strb	r2, [r3, #0]
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b040:	705a      	strb	r2, [r3, #1]
 800b042:	68a2      	ldr	r2, [r4, #8]
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	3202      	adds	r2, #2
 800b048:	3302      	adds	r3, #2
 800b04a:	2102      	movs	r1, #2
 800b04c:	60a2      	str	r2, [r4, #8]
 800b04e:	6123      	str	r3, [r4, #16]
 800b050:	7561      	strb	r1, [r4, #21]
 800b052:	7da0      	ldrb	r0, [r4, #22]
 800b054:	f080 0001 	eor.w	r0, r0, #1
 800b058:	b002      	add	sp, #8
 800b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b062:	801a      	strh	r2, [r3, #0]
 800b064:	e7ed      	b.n	800b042 <ucdr_serialize_uint16_t+0x9e>
 800b066:	68a2      	ldr	r2, [r4, #8]
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	7da0      	ldrb	r0, [r4, #22]
 800b06c:	7567      	strb	r7, [r4, #21]
 800b06e:	1b92      	subs	r2, r2, r6
 800b070:	1b9b      	subs	r3, r3, r6
 800b072:	f080 0001 	eor.w	r0, r0, #1
 800b076:	60a2      	str	r2, [r4, #8]
 800b078:	6123      	str	r3, [r4, #16]
 800b07a:	b002      	add	sp, #8
 800b07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b080:	68a3      	ldr	r3, [r4, #8]
 800b082:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b086:	701a      	strb	r2, [r3, #0]
 800b088:	e7bc      	b.n	800b004 <ucdr_serialize_uint16_t+0x60>
 800b08a:	4628      	mov	r0, r5
 800b08c:	f10d 0506 	add.w	r5, sp, #6
 800b090:	4629      	mov	r1, r5
 800b092:	4632      	mov	r2, r6
 800b094:	f00c ff59 	bl	8017f4a <memcpy>
 800b098:	68a0      	ldr	r0, [r4, #8]
 800b09a:	4642      	mov	r2, r8
 800b09c:	19a9      	adds	r1, r5, r6
 800b09e:	f00c ff54 	bl	8017f4a <memcpy>
 800b0a2:	e7af      	b.n	800b004 <ucdr_serialize_uint16_t+0x60>

0800b0a4 <ucdr_serialize_endian_uint16_t>:
 800b0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	2102      	movs	r1, #2
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b0b4:	f001 f898 	bl	800c1e8 <ucdr_buffer_alignment>
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b0c0:	f001 f8d6 	bl	800c270 <ucdr_advance_buffer>
 800b0c4:	2102      	movs	r1, #2
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f001 f82e 	bl	800c128 <ucdr_check_buffer_available_for>
 800b0cc:	bb70      	cbnz	r0, 800b12c <ucdr_serialize_endian_uint16_t+0x88>
 800b0ce:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b0d2:	42be      	cmp	r6, r7
 800b0d4:	d925      	bls.n	800b122 <ucdr_serialize_endian_uint16_t+0x7e>
 800b0d6:	6923      	ldr	r3, [r4, #16]
 800b0d8:	60a6      	str	r6, [r4, #8]
 800b0da:	1bf6      	subs	r6, r6, r7
 800b0dc:	4433      	add	r3, r6
 800b0de:	f1c6 0902 	rsb	r9, r6, #2
 800b0e2:	6123      	str	r3, [r4, #16]
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f001 f82a 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d039      	beq.n	800b164 <ucdr_serialize_endian_uint16_t+0xc0>
 800b0f0:	2d01      	cmp	r5, #1
 800b0f2:	d04a      	beq.n	800b18a <ucdr_serialize_endian_uint16_t+0xe6>
 800b0f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0f8:	703b      	strb	r3, [r7, #0]
 800b0fa:	2e00      	cmp	r6, #0
 800b0fc:	d040      	beq.n	800b180 <ucdr_serialize_endian_uint16_t+0xdc>
 800b0fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b102:	707b      	strb	r3, [r7, #1]
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	68a2      	ldr	r2, [r4, #8]
 800b108:	7da0      	ldrb	r0, [r4, #22]
 800b10a:	3302      	adds	r3, #2
 800b10c:	444a      	add	r2, r9
 800b10e:	1b9b      	subs	r3, r3, r6
 800b110:	2102      	movs	r1, #2
 800b112:	f080 0001 	eor.w	r0, r0, #1
 800b116:	60a2      	str	r2, [r4, #8]
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	7561      	strb	r1, [r4, #21]
 800b11c:	b003      	add	sp, #12
 800b11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b122:	2102      	movs	r1, #2
 800b124:	4620      	mov	r0, r4
 800b126:	f001 f80b 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b12a:	b188      	cbz	r0, 800b150 <ucdr_serialize_endian_uint16_t+0xac>
 800b12c:	2d01      	cmp	r5, #1
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	d014      	beq.n	800b15c <ucdr_serialize_endian_uint16_t+0xb8>
 800b132:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b136:	701a      	strb	r2, [r3, #0]
 800b138:	68a3      	ldr	r3, [r4, #8]
 800b13a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b13e:	705a      	strb	r2, [r3, #1]
 800b140:	68a2      	ldr	r2, [r4, #8]
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	3202      	adds	r2, #2
 800b146:	3302      	adds	r3, #2
 800b148:	2102      	movs	r1, #2
 800b14a:	60a2      	str	r2, [r4, #8]
 800b14c:	6123      	str	r3, [r4, #16]
 800b14e:	7561      	strb	r1, [r4, #21]
 800b150:	7da0      	ldrb	r0, [r4, #22]
 800b152:	f080 0001 	eor.w	r0, r0, #1
 800b156:	b003      	add	sp, #12
 800b158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b15c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b160:	801a      	strh	r2, [r3, #0]
 800b162:	e7ed      	b.n	800b140 <ucdr_serialize_endian_uint16_t+0x9c>
 800b164:	68a2      	ldr	r2, [r4, #8]
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	7da0      	ldrb	r0, [r4, #22]
 800b16a:	f884 8015 	strb.w	r8, [r4, #21]
 800b16e:	1b92      	subs	r2, r2, r6
 800b170:	1b9b      	subs	r3, r3, r6
 800b172:	f080 0001 	eor.w	r0, r0, #1
 800b176:	60a2      	str	r2, [r4, #8]
 800b178:	6123      	str	r3, [r4, #16]
 800b17a:	b003      	add	sp, #12
 800b17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b180:	68a3      	ldr	r3, [r4, #8]
 800b182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b186:	701a      	strb	r2, [r3, #0]
 800b188:	e7bc      	b.n	800b104 <ucdr_serialize_endian_uint16_t+0x60>
 800b18a:	f10d 0506 	add.w	r5, sp, #6
 800b18e:	4629      	mov	r1, r5
 800b190:	4632      	mov	r2, r6
 800b192:	4638      	mov	r0, r7
 800b194:	f00c fed9 	bl	8017f4a <memcpy>
 800b198:	68a0      	ldr	r0, [r4, #8]
 800b19a:	464a      	mov	r2, r9
 800b19c:	19a9      	adds	r1, r5, r6
 800b19e:	f00c fed4 	bl	8017f4a <memcpy>
 800b1a2:	e7af      	b.n	800b104 <ucdr_serialize_endian_uint16_t+0x60>

0800b1a4 <ucdr_deserialize_uint16_t>:
 800b1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	460d      	mov	r5, r1
 800b1aa:	2102      	movs	r1, #2
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	f001 f81b 	bl	800c1e8 <ucdr_buffer_alignment>
 800b1b2:	4601      	mov	r1, r0
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b1ba:	f001 f859 	bl	800c270 <ucdr_advance_buffer>
 800b1be:	2102      	movs	r1, #2
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 ffb1 	bl	800c128 <ucdr_check_buffer_available_for>
 800b1c6:	bb60      	cbnz	r0, 800b222 <ucdr_deserialize_uint16_t+0x7e>
 800b1c8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b1cc:	42be      	cmp	r6, r7
 800b1ce:	d923      	bls.n	800b218 <ucdr_deserialize_uint16_t+0x74>
 800b1d0:	6923      	ldr	r3, [r4, #16]
 800b1d2:	60a6      	str	r6, [r4, #8]
 800b1d4:	1bf6      	subs	r6, r6, r7
 800b1d6:	4433      	add	r3, r6
 800b1d8:	f1c6 0902 	rsb	r9, r6, #2
 800b1dc:	6123      	str	r3, [r4, #16]
 800b1de:	4649      	mov	r1, r9
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 ffad 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d034      	beq.n	800b254 <ucdr_deserialize_uint16_t+0xb0>
 800b1ea:	7d23      	ldrb	r3, [r4, #20]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d042      	beq.n	800b276 <ucdr_deserialize_uint16_t+0xd2>
 800b1f0:	787b      	ldrb	r3, [r7, #1]
 800b1f2:	702b      	strb	r3, [r5, #0]
 800b1f4:	2e00      	cmp	r6, #0
 800b1f6:	d03a      	beq.n	800b26e <ucdr_deserialize_uint16_t+0xca>
 800b1f8:	783b      	ldrb	r3, [r7, #0]
 800b1fa:	706b      	strb	r3, [r5, #1]
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	68a2      	ldr	r2, [r4, #8]
 800b200:	7da0      	ldrb	r0, [r4, #22]
 800b202:	2102      	movs	r1, #2
 800b204:	3302      	adds	r3, #2
 800b206:	444a      	add	r2, r9
 800b208:	1b9b      	subs	r3, r3, r6
 800b20a:	7561      	strb	r1, [r4, #21]
 800b20c:	60a2      	str	r2, [r4, #8]
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	f080 0001 	eor.w	r0, r0, #1
 800b214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b218:	2102      	movs	r1, #2
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 ff90 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b220:	b180      	cbz	r0, 800b244 <ucdr_deserialize_uint16_t+0xa0>
 800b222:	7d23      	ldrb	r3, [r4, #20]
 800b224:	2b01      	cmp	r3, #1
 800b226:	68a3      	ldr	r3, [r4, #8]
 800b228:	d011      	beq.n	800b24e <ucdr_deserialize_uint16_t+0xaa>
 800b22a:	785b      	ldrb	r3, [r3, #1]
 800b22c:	702b      	strb	r3, [r5, #0]
 800b22e:	68a3      	ldr	r3, [r4, #8]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	706b      	strb	r3, [r5, #1]
 800b234:	68a2      	ldr	r2, [r4, #8]
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	3202      	adds	r2, #2
 800b23a:	3302      	adds	r3, #2
 800b23c:	2102      	movs	r1, #2
 800b23e:	60a2      	str	r2, [r4, #8]
 800b240:	6123      	str	r3, [r4, #16]
 800b242:	7561      	strb	r1, [r4, #21]
 800b244:	7da0      	ldrb	r0, [r4, #22]
 800b246:	f080 0001 	eor.w	r0, r0, #1
 800b24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	802b      	strh	r3, [r5, #0]
 800b252:	e7ef      	b.n	800b234 <ucdr_deserialize_uint16_t+0x90>
 800b254:	68a2      	ldr	r2, [r4, #8]
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	7da0      	ldrb	r0, [r4, #22]
 800b25a:	f884 8015 	strb.w	r8, [r4, #21]
 800b25e:	1b92      	subs	r2, r2, r6
 800b260:	1b9b      	subs	r3, r3, r6
 800b262:	60a2      	str	r2, [r4, #8]
 800b264:	6123      	str	r3, [r4, #16]
 800b266:	f080 0001 	eor.w	r0, r0, #1
 800b26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26e:	68a3      	ldr	r3, [r4, #8]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	706b      	strb	r3, [r5, #1]
 800b274:	e7c2      	b.n	800b1fc <ucdr_deserialize_uint16_t+0x58>
 800b276:	4639      	mov	r1, r7
 800b278:	4632      	mov	r2, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	f00c fe65 	bl	8017f4a <memcpy>
 800b280:	68a1      	ldr	r1, [r4, #8]
 800b282:	464a      	mov	r2, r9
 800b284:	19a8      	adds	r0, r5, r6
 800b286:	f00c fe60 	bl	8017f4a <memcpy>
 800b28a:	e7b7      	b.n	800b1fc <ucdr_deserialize_uint16_t+0x58>

0800b28c <ucdr_deserialize_endian_uint16_t>:
 800b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b290:	460e      	mov	r6, r1
 800b292:	2102      	movs	r1, #2
 800b294:	4604      	mov	r4, r0
 800b296:	4615      	mov	r5, r2
 800b298:	f000 ffa6 	bl	800c1e8 <ucdr_buffer_alignment>
 800b29c:	4601      	mov	r1, r0
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b2a4:	f000 ffe4 	bl	800c270 <ucdr_advance_buffer>
 800b2a8:	2102      	movs	r1, #2
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 ff3c 	bl	800c128 <ucdr_check_buffer_available_for>
 800b2b0:	bb70      	cbnz	r0, 800b310 <ucdr_deserialize_endian_uint16_t+0x84>
 800b2b2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b2b6:	4547      	cmp	r7, r8
 800b2b8:	d925      	bls.n	800b306 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b2ba:	6923      	ldr	r3, [r4, #16]
 800b2bc:	60a7      	str	r7, [r4, #8]
 800b2be:	eba7 0708 	sub.w	r7, r7, r8
 800b2c2:	443b      	add	r3, r7
 800b2c4:	f1c7 0a02 	rsb	sl, r7, #2
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	4651      	mov	r1, sl
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 ff37 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d034      	beq.n	800b340 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b2d6:	2e01      	cmp	r6, #1
 800b2d8:	d043      	beq.n	800b362 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b2da:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b2de:	702b      	strb	r3, [r5, #0]
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	d03a      	beq.n	800b35a <ucdr_deserialize_endian_uint16_t+0xce>
 800b2e4:	f898 3000 	ldrb.w	r3, [r8]
 800b2e8:	706b      	strb	r3, [r5, #1]
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	68a2      	ldr	r2, [r4, #8]
 800b2ee:	7da0      	ldrb	r0, [r4, #22]
 800b2f0:	2102      	movs	r1, #2
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	4452      	add	r2, sl
 800b2f6:	1bdb      	subs	r3, r3, r7
 800b2f8:	7561      	strb	r1, [r4, #21]
 800b2fa:	60a2      	str	r2, [r4, #8]
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	f080 0001 	eor.w	r0, r0, #1
 800b302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b306:	2102      	movs	r1, #2
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 ff19 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b30e:	b178      	cbz	r0, 800b330 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b310:	2e01      	cmp	r6, #1
 800b312:	68a3      	ldr	r3, [r4, #8]
 800b314:	d011      	beq.n	800b33a <ucdr_deserialize_endian_uint16_t+0xae>
 800b316:	785b      	ldrb	r3, [r3, #1]
 800b318:	702b      	strb	r3, [r5, #0]
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	706b      	strb	r3, [r5, #1]
 800b320:	68a2      	ldr	r2, [r4, #8]
 800b322:	6923      	ldr	r3, [r4, #16]
 800b324:	3202      	adds	r2, #2
 800b326:	3302      	adds	r3, #2
 800b328:	2102      	movs	r1, #2
 800b32a:	60a2      	str	r2, [r4, #8]
 800b32c:	6123      	str	r3, [r4, #16]
 800b32e:	7561      	strb	r1, [r4, #21]
 800b330:	7da0      	ldrb	r0, [r4, #22]
 800b332:	f080 0001 	eor.w	r0, r0, #1
 800b336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33a:	881b      	ldrh	r3, [r3, #0]
 800b33c:	802b      	strh	r3, [r5, #0]
 800b33e:	e7ef      	b.n	800b320 <ucdr_deserialize_endian_uint16_t+0x94>
 800b340:	68a2      	ldr	r2, [r4, #8]
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	7da0      	ldrb	r0, [r4, #22]
 800b346:	f884 9015 	strb.w	r9, [r4, #21]
 800b34a:	1bd2      	subs	r2, r2, r7
 800b34c:	1bdb      	subs	r3, r3, r7
 800b34e:	60a2      	str	r2, [r4, #8]
 800b350:	6123      	str	r3, [r4, #16]
 800b352:	f080 0001 	eor.w	r0, r0, #1
 800b356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	706b      	strb	r3, [r5, #1]
 800b360:	e7c3      	b.n	800b2ea <ucdr_deserialize_endian_uint16_t+0x5e>
 800b362:	4641      	mov	r1, r8
 800b364:	463a      	mov	r2, r7
 800b366:	4628      	mov	r0, r5
 800b368:	f00c fdef 	bl	8017f4a <memcpy>
 800b36c:	68a1      	ldr	r1, [r4, #8]
 800b36e:	4652      	mov	r2, sl
 800b370:	19e8      	adds	r0, r5, r7
 800b372:	f00c fdea 	bl	8017f4a <memcpy>
 800b376:	e7b8      	b.n	800b2ea <ucdr_deserialize_endian_uint16_t+0x5e>

0800b378 <ucdr_serialize_uint32_t>:
 800b378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	4604      	mov	r4, r0
 800b380:	9101      	str	r1, [sp, #4]
 800b382:	2104      	movs	r1, #4
 800b384:	f000 ff30 	bl	800c1e8 <ucdr_buffer_alignment>
 800b388:	4601      	mov	r1, r0
 800b38a:	4620      	mov	r0, r4
 800b38c:	7d67      	ldrb	r7, [r4, #21]
 800b38e:	f000 ff6f 	bl	800c270 <ucdr_advance_buffer>
 800b392:	2104      	movs	r1, #4
 800b394:	4620      	mov	r0, r4
 800b396:	f000 fec7 	bl	800c128 <ucdr_check_buffer_available_for>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d139      	bne.n	800b412 <ucdr_serialize_uint32_t+0x9a>
 800b39e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3a2:	42ab      	cmp	r3, r5
 800b3a4:	d930      	bls.n	800b408 <ucdr_serialize_uint32_t+0x90>
 800b3a6:	1b5e      	subs	r6, r3, r5
 800b3a8:	60a3      	str	r3, [r4, #8]
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	f1c6 0804 	rsb	r8, r6, #4
 800b3b0:	4433      	add	r3, r6
 800b3b2:	6123      	str	r3, [r4, #16]
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f000 fec2 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d04c      	beq.n	800b45a <ucdr_serialize_uint32_t+0xe2>
 800b3c0:	7d23      	ldrb	r3, [r4, #20]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d063      	beq.n	800b48e <ucdr_serialize_uint32_t+0x116>
 800b3c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3ca:	702b      	strb	r3, [r5, #0]
 800b3cc:	2e00      	cmp	r6, #0
 800b3ce:	d051      	beq.n	800b474 <ucdr_serialize_uint32_t+0xfc>
 800b3d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3d4:	706b      	strb	r3, [r5, #1]
 800b3d6:	2e01      	cmp	r6, #1
 800b3d8:	d050      	beq.n	800b47c <ucdr_serialize_uint32_t+0x104>
 800b3da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3de:	70ab      	strb	r3, [r5, #2]
 800b3e0:	2e02      	cmp	r6, #2
 800b3e2:	d04f      	beq.n	800b484 <ucdr_serialize_uint32_t+0x10c>
 800b3e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3e8:	70eb      	strb	r3, [r5, #3]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	68a2      	ldr	r2, [r4, #8]
 800b3ee:	7da0      	ldrb	r0, [r4, #22]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	1b9e      	subs	r6, r3, r6
 800b3f4:	4442      	add	r2, r8
 800b3f6:	2304      	movs	r3, #4
 800b3f8:	f080 0001 	eor.w	r0, r0, #1
 800b3fc:	60a2      	str	r2, [r4, #8]
 800b3fe:	6126      	str	r6, [r4, #16]
 800b400:	7563      	strb	r3, [r4, #21]
 800b402:	b002      	add	sp, #8
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b408:	2104      	movs	r1, #4
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 fe98 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b410:	b1d0      	cbz	r0, 800b448 <ucdr_serialize_uint32_t+0xd0>
 800b412:	7d23      	ldrb	r3, [r4, #20]
 800b414:	2b01      	cmp	r3, #1
 800b416:	68a3      	ldr	r3, [r4, #8]
 800b418:	d01c      	beq.n	800b454 <ucdr_serialize_uint32_t+0xdc>
 800b41a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b426:	705a      	strb	r2, [r3, #1]
 800b428:	68a3      	ldr	r3, [r4, #8]
 800b42a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b42e:	709a      	strb	r2, [r3, #2]
 800b430:	68a3      	ldr	r3, [r4, #8]
 800b432:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b436:	70da      	strb	r2, [r3, #3]
 800b438:	68a2      	ldr	r2, [r4, #8]
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	3204      	adds	r2, #4
 800b43e:	3304      	adds	r3, #4
 800b440:	2104      	movs	r1, #4
 800b442:	60a2      	str	r2, [r4, #8]
 800b444:	6123      	str	r3, [r4, #16]
 800b446:	7561      	strb	r1, [r4, #21]
 800b448:	7da0      	ldrb	r0, [r4, #22]
 800b44a:	f080 0001 	eor.w	r0, r0, #1
 800b44e:	b002      	add	sp, #8
 800b450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b454:	9a01      	ldr	r2, [sp, #4]
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e7ee      	b.n	800b438 <ucdr_serialize_uint32_t+0xc0>
 800b45a:	68a2      	ldr	r2, [r4, #8]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	7da0      	ldrb	r0, [r4, #22]
 800b460:	7567      	strb	r7, [r4, #21]
 800b462:	1b92      	subs	r2, r2, r6
 800b464:	1b9b      	subs	r3, r3, r6
 800b466:	f080 0001 	eor.w	r0, r0, #1
 800b46a:	60a2      	str	r2, [r4, #8]
 800b46c:	6123      	str	r3, [r4, #16]
 800b46e:	b002      	add	sp, #8
 800b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	68a3      	ldr	r3, [r4, #8]
 800b47e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b482:	701a      	strb	r2, [r3, #0]
 800b484:	68a3      	ldr	r3, [r4, #8]
 800b486:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	e7ad      	b.n	800b3ea <ucdr_serialize_uint32_t+0x72>
 800b48e:	4628      	mov	r0, r5
 800b490:	ad01      	add	r5, sp, #4
 800b492:	4629      	mov	r1, r5
 800b494:	4632      	mov	r2, r6
 800b496:	f00c fd58 	bl	8017f4a <memcpy>
 800b49a:	68a0      	ldr	r0, [r4, #8]
 800b49c:	4642      	mov	r2, r8
 800b49e:	19a9      	adds	r1, r5, r6
 800b4a0:	f00c fd53 	bl	8017f4a <memcpy>
 800b4a4:	e7a1      	b.n	800b3ea <ucdr_serialize_uint32_t+0x72>
 800b4a6:	bf00      	nop

0800b4a8 <ucdr_serialize_endian_uint32_t>:
 800b4a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4ac:	b083      	sub	sp, #12
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	2104      	movs	r1, #4
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	9201      	str	r2, [sp, #4]
 800b4b6:	f000 fe97 	bl	800c1e8 <ucdr_buffer_alignment>
 800b4ba:	4601      	mov	r1, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4c2:	f000 fed5 	bl	800c270 <ucdr_advance_buffer>
 800b4c6:	2104      	movs	r1, #4
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 fe2d 	bl	800c128 <ucdr_check_buffer_available_for>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d138      	bne.n	800b544 <ucdr_serialize_endian_uint32_t+0x9c>
 800b4d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b4d6:	42b7      	cmp	r7, r6
 800b4d8:	d92f      	bls.n	800b53a <ucdr_serialize_endian_uint32_t+0x92>
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	60a7      	str	r7, [r4, #8]
 800b4de:	1bbf      	subs	r7, r7, r6
 800b4e0:	443b      	add	r3, r7
 800b4e2:	f1c7 0904 	rsb	r9, r7, #4
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fe28 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d04a      	beq.n	800b58a <ucdr_serialize_endian_uint32_t+0xe2>
 800b4f4:	2d01      	cmp	r5, #1
 800b4f6:	d063      	beq.n	800b5c0 <ucdr_serialize_endian_uint32_t+0x118>
 800b4f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4fc:	7033      	strb	r3, [r6, #0]
 800b4fe:	2f00      	cmp	r7, #0
 800b500:	d051      	beq.n	800b5a6 <ucdr_serialize_endian_uint32_t+0xfe>
 800b502:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b506:	7073      	strb	r3, [r6, #1]
 800b508:	2f01      	cmp	r7, #1
 800b50a:	d050      	beq.n	800b5ae <ucdr_serialize_endian_uint32_t+0x106>
 800b50c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b510:	70b3      	strb	r3, [r6, #2]
 800b512:	2f02      	cmp	r7, #2
 800b514:	d04f      	beq.n	800b5b6 <ucdr_serialize_endian_uint32_t+0x10e>
 800b516:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b51a:	70f3      	strb	r3, [r6, #3]
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	68a2      	ldr	r2, [r4, #8]
 800b520:	7da0      	ldrb	r0, [r4, #22]
 800b522:	3304      	adds	r3, #4
 800b524:	444a      	add	r2, r9
 800b526:	1bdb      	subs	r3, r3, r7
 800b528:	2104      	movs	r1, #4
 800b52a:	f080 0001 	eor.w	r0, r0, #1
 800b52e:	60a2      	str	r2, [r4, #8]
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	7561      	strb	r1, [r4, #21]
 800b534:	b003      	add	sp, #12
 800b536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53a:	2104      	movs	r1, #4
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fdff 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b542:	b1c8      	cbz	r0, 800b578 <ucdr_serialize_endian_uint32_t+0xd0>
 800b544:	2d01      	cmp	r5, #1
 800b546:	68a3      	ldr	r3, [r4, #8]
 800b548:	d01c      	beq.n	800b584 <ucdr_serialize_endian_uint32_t+0xdc>
 800b54a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b54e:	701a      	strb	r2, [r3, #0]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b556:	705a      	strb	r2, [r3, #1]
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b55e:	709a      	strb	r2, [r3, #2]
 800b560:	68a3      	ldr	r3, [r4, #8]
 800b562:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b566:	70da      	strb	r2, [r3, #3]
 800b568:	68a2      	ldr	r2, [r4, #8]
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	3204      	adds	r2, #4
 800b56e:	3304      	adds	r3, #4
 800b570:	2104      	movs	r1, #4
 800b572:	60a2      	str	r2, [r4, #8]
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	7561      	strb	r1, [r4, #21]
 800b578:	7da0      	ldrb	r0, [r4, #22]
 800b57a:	f080 0001 	eor.w	r0, r0, #1
 800b57e:	b003      	add	sp, #12
 800b580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	e7ee      	b.n	800b568 <ucdr_serialize_endian_uint32_t+0xc0>
 800b58a:	68a2      	ldr	r2, [r4, #8]
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	7da0      	ldrb	r0, [r4, #22]
 800b590:	f884 8015 	strb.w	r8, [r4, #21]
 800b594:	1bd2      	subs	r2, r2, r7
 800b596:	1bdb      	subs	r3, r3, r7
 800b598:	f080 0001 	eor.w	r0, r0, #1
 800b59c:	60a2      	str	r2, [r4, #8]
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	b003      	add	sp, #12
 800b5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5a6:	68a3      	ldr	r3, [r4, #8]
 800b5a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5b4:	701a      	strb	r2, [r3, #0]
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b5bc:	701a      	strb	r2, [r3, #0]
 800b5be:	e7ad      	b.n	800b51c <ucdr_serialize_endian_uint32_t+0x74>
 800b5c0:	ad01      	add	r5, sp, #4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	463a      	mov	r2, r7
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f00c fcbf 	bl	8017f4a <memcpy>
 800b5cc:	68a0      	ldr	r0, [r4, #8]
 800b5ce:	464a      	mov	r2, r9
 800b5d0:	19e9      	adds	r1, r5, r7
 800b5d2:	f00c fcba 	bl	8017f4a <memcpy>
 800b5d6:	e7a1      	b.n	800b51c <ucdr_serialize_endian_uint32_t+0x74>

0800b5d8 <ucdr_deserialize_uint32_t>:
 800b5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	460d      	mov	r5, r1
 800b5de:	2104      	movs	r1, #4
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	f000 fe01 	bl	800c1e8 <ucdr_buffer_alignment>
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b5ee:	f000 fe3f 	bl	800c270 <ucdr_advance_buffer>
 800b5f2:	2104      	movs	r1, #4
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f000 fd97 	bl	800c128 <ucdr_check_buffer_available_for>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d138      	bne.n	800b670 <ucdr_deserialize_uint32_t+0x98>
 800b5fe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b602:	42b7      	cmp	r7, r6
 800b604:	d92f      	bls.n	800b666 <ucdr_deserialize_uint32_t+0x8e>
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	60a7      	str	r7, [r4, #8]
 800b60a:	1bbf      	subs	r7, r7, r6
 800b60c:	443b      	add	r3, r7
 800b60e:	f1c7 0904 	rsb	r9, r7, #4
 800b612:	6123      	str	r3, [r4, #16]
 800b614:	4649      	mov	r1, r9
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fd92 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d046      	beq.n	800b6ae <ucdr_deserialize_uint32_t+0xd6>
 800b620:	7d23      	ldrb	r3, [r4, #20]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d05c      	beq.n	800b6e0 <ucdr_deserialize_uint32_t+0x108>
 800b626:	78f3      	ldrb	r3, [r6, #3]
 800b628:	702b      	strb	r3, [r5, #0]
 800b62a:	2f00      	cmp	r7, #0
 800b62c:	d04c      	beq.n	800b6c8 <ucdr_deserialize_uint32_t+0xf0>
 800b62e:	78b3      	ldrb	r3, [r6, #2]
 800b630:	706b      	strb	r3, [r5, #1]
 800b632:	2f01      	cmp	r7, #1
 800b634:	f105 0302 	add.w	r3, r5, #2
 800b638:	d04a      	beq.n	800b6d0 <ucdr_deserialize_uint32_t+0xf8>
 800b63a:	7873      	ldrb	r3, [r6, #1]
 800b63c:	70ab      	strb	r3, [r5, #2]
 800b63e:	2f02      	cmp	r7, #2
 800b640:	f105 0303 	add.w	r3, r5, #3
 800b644:	d048      	beq.n	800b6d8 <ucdr_deserialize_uint32_t+0x100>
 800b646:	7833      	ldrb	r3, [r6, #0]
 800b648:	70eb      	strb	r3, [r5, #3]
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	68a2      	ldr	r2, [r4, #8]
 800b64e:	7da0      	ldrb	r0, [r4, #22]
 800b650:	2104      	movs	r1, #4
 800b652:	3304      	adds	r3, #4
 800b654:	444a      	add	r2, r9
 800b656:	1bdb      	subs	r3, r3, r7
 800b658:	7561      	strb	r1, [r4, #21]
 800b65a:	60a2      	str	r2, [r4, #8]
 800b65c:	6123      	str	r3, [r4, #16]
 800b65e:	f080 0001 	eor.w	r0, r0, #1
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	2104      	movs	r1, #4
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 fd69 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b66e:	b1b0      	cbz	r0, 800b69e <ucdr_deserialize_uint32_t+0xc6>
 800b670:	7d23      	ldrb	r3, [r4, #20]
 800b672:	2b01      	cmp	r3, #1
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	d017      	beq.n	800b6a8 <ucdr_deserialize_uint32_t+0xd0>
 800b678:	78db      	ldrb	r3, [r3, #3]
 800b67a:	702b      	strb	r3, [r5, #0]
 800b67c:	68a3      	ldr	r3, [r4, #8]
 800b67e:	789b      	ldrb	r3, [r3, #2]
 800b680:	706b      	strb	r3, [r5, #1]
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	785b      	ldrb	r3, [r3, #1]
 800b686:	70ab      	strb	r3, [r5, #2]
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	70eb      	strb	r3, [r5, #3]
 800b68e:	68a2      	ldr	r2, [r4, #8]
 800b690:	6923      	ldr	r3, [r4, #16]
 800b692:	3204      	adds	r2, #4
 800b694:	3304      	adds	r3, #4
 800b696:	2104      	movs	r1, #4
 800b698:	60a2      	str	r2, [r4, #8]
 800b69a:	6123      	str	r3, [r4, #16]
 800b69c:	7561      	strb	r1, [r4, #21]
 800b69e:	7da0      	ldrb	r0, [r4, #22]
 800b6a0:	f080 0001 	eor.w	r0, r0, #1
 800b6a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	602b      	str	r3, [r5, #0]
 800b6ac:	e7ef      	b.n	800b68e <ucdr_deserialize_uint32_t+0xb6>
 800b6ae:	68a2      	ldr	r2, [r4, #8]
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	7da0      	ldrb	r0, [r4, #22]
 800b6b4:	f884 8015 	strb.w	r8, [r4, #21]
 800b6b8:	1bd2      	subs	r2, r2, r7
 800b6ba:	1bdb      	subs	r3, r3, r7
 800b6bc:	60a2      	str	r2, [r4, #8]
 800b6be:	6123      	str	r3, [r4, #16]
 800b6c0:	f080 0001 	eor.w	r0, r0, #1
 800b6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	789b      	ldrb	r3, [r3, #2]
 800b6cc:	706b      	strb	r3, [r5, #1]
 800b6ce:	1cab      	adds	r3, r5, #2
 800b6d0:	68a2      	ldr	r2, [r4, #8]
 800b6d2:	7852      	ldrb	r2, [r2, #1]
 800b6d4:	f803 2b01 	strb.w	r2, [r3], #1
 800b6d8:	68a2      	ldr	r2, [r4, #8]
 800b6da:	7812      	ldrb	r2, [r2, #0]
 800b6dc:	701a      	strb	r2, [r3, #0]
 800b6de:	e7b4      	b.n	800b64a <ucdr_deserialize_uint32_t+0x72>
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	463a      	mov	r2, r7
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f00c fc30 	bl	8017f4a <memcpy>
 800b6ea:	68a1      	ldr	r1, [r4, #8]
 800b6ec:	464a      	mov	r2, r9
 800b6ee:	19e8      	adds	r0, r5, r7
 800b6f0:	f00c fc2b 	bl	8017f4a <memcpy>
 800b6f4:	e7a9      	b.n	800b64a <ucdr_deserialize_uint32_t+0x72>
 800b6f6:	bf00      	nop

0800b6f8 <ucdr_deserialize_endian_uint32_t>:
 800b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	460e      	mov	r6, r1
 800b6fe:	2104      	movs	r1, #4
 800b700:	4604      	mov	r4, r0
 800b702:	4615      	mov	r5, r2
 800b704:	f000 fd70 	bl	800c1e8 <ucdr_buffer_alignment>
 800b708:	4601      	mov	r1, r0
 800b70a:	4620      	mov	r0, r4
 800b70c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b710:	f000 fdae 	bl	800c270 <ucdr_advance_buffer>
 800b714:	2104      	movs	r1, #4
 800b716:	4620      	mov	r0, r4
 800b718:	f000 fd06 	bl	800c128 <ucdr_check_buffer_available_for>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d13c      	bne.n	800b79a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b720:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b724:	42bb      	cmp	r3, r7
 800b726:	d933      	bls.n	800b790 <ucdr_deserialize_endian_uint32_t+0x98>
 800b728:	eba3 0807 	sub.w	r8, r3, r7
 800b72c:	60a3      	str	r3, [r4, #8]
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	f1c8 0a04 	rsb	sl, r8, #4
 800b734:	4443      	add	r3, r8
 800b736:	6123      	str	r3, [r4, #16]
 800b738:	4651      	mov	r1, sl
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 fd00 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b740:	2800      	cmp	r0, #0
 800b742:	d048      	beq.n	800b7d6 <ucdr_deserialize_endian_uint32_t+0xde>
 800b744:	2e01      	cmp	r6, #1
 800b746:	d061      	beq.n	800b80c <ucdr_deserialize_endian_uint32_t+0x114>
 800b748:	78fb      	ldrb	r3, [r7, #3]
 800b74a:	702b      	strb	r3, [r5, #0]
 800b74c:	f1b8 0f00 	cmp.w	r8, #0
 800b750:	d050      	beq.n	800b7f4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b752:	78bb      	ldrb	r3, [r7, #2]
 800b754:	706b      	strb	r3, [r5, #1]
 800b756:	f1b8 0f01 	cmp.w	r8, #1
 800b75a:	f105 0302 	add.w	r3, r5, #2
 800b75e:	d04d      	beq.n	800b7fc <ucdr_deserialize_endian_uint32_t+0x104>
 800b760:	787b      	ldrb	r3, [r7, #1]
 800b762:	70ab      	strb	r3, [r5, #2]
 800b764:	f1b8 0f02 	cmp.w	r8, #2
 800b768:	f105 0303 	add.w	r3, r5, #3
 800b76c:	d04a      	beq.n	800b804 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b76e:	783b      	ldrb	r3, [r7, #0]
 800b770:	70eb      	strb	r3, [r5, #3]
 800b772:	6923      	ldr	r3, [r4, #16]
 800b774:	68a2      	ldr	r2, [r4, #8]
 800b776:	7da0      	ldrb	r0, [r4, #22]
 800b778:	2104      	movs	r1, #4
 800b77a:	3304      	adds	r3, #4
 800b77c:	4452      	add	r2, sl
 800b77e:	eba3 0308 	sub.w	r3, r3, r8
 800b782:	7561      	strb	r1, [r4, #21]
 800b784:	60a2      	str	r2, [r4, #8]
 800b786:	6123      	str	r3, [r4, #16]
 800b788:	f080 0001 	eor.w	r0, r0, #1
 800b78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b790:	2104      	movs	r1, #4
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fcd4 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b798:	b1a8      	cbz	r0, 800b7c6 <ucdr_deserialize_endian_uint32_t+0xce>
 800b79a:	2e01      	cmp	r6, #1
 800b79c:	68a3      	ldr	r3, [r4, #8]
 800b79e:	d017      	beq.n	800b7d0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b7a0:	78db      	ldrb	r3, [r3, #3]
 800b7a2:	702b      	strb	r3, [r5, #0]
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	789b      	ldrb	r3, [r3, #2]
 800b7a8:	706b      	strb	r3, [r5, #1]
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	785b      	ldrb	r3, [r3, #1]
 800b7ae:	70ab      	strb	r3, [r5, #2]
 800b7b0:	68a3      	ldr	r3, [r4, #8]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	70eb      	strb	r3, [r5, #3]
 800b7b6:	68a2      	ldr	r2, [r4, #8]
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	3204      	adds	r2, #4
 800b7bc:	3304      	adds	r3, #4
 800b7be:	2104      	movs	r1, #4
 800b7c0:	60a2      	str	r2, [r4, #8]
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	7561      	strb	r1, [r4, #21]
 800b7c6:	7da0      	ldrb	r0, [r4, #22]
 800b7c8:	f080 0001 	eor.w	r0, r0, #1
 800b7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	602b      	str	r3, [r5, #0]
 800b7d4:	e7ef      	b.n	800b7b6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b7d6:	68a2      	ldr	r2, [r4, #8]
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	7da0      	ldrb	r0, [r4, #22]
 800b7dc:	f884 9015 	strb.w	r9, [r4, #21]
 800b7e0:	eba2 0208 	sub.w	r2, r2, r8
 800b7e4:	eba3 0308 	sub.w	r3, r3, r8
 800b7e8:	60a2      	str	r2, [r4, #8]
 800b7ea:	6123      	str	r3, [r4, #16]
 800b7ec:	f080 0001 	eor.w	r0, r0, #1
 800b7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f4:	68a3      	ldr	r3, [r4, #8]
 800b7f6:	789b      	ldrb	r3, [r3, #2]
 800b7f8:	706b      	strb	r3, [r5, #1]
 800b7fa:	1cab      	adds	r3, r5, #2
 800b7fc:	68a2      	ldr	r2, [r4, #8]
 800b7fe:	7852      	ldrb	r2, [r2, #1]
 800b800:	f803 2b01 	strb.w	r2, [r3], #1
 800b804:	68a2      	ldr	r2, [r4, #8]
 800b806:	7812      	ldrb	r2, [r2, #0]
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	e7b2      	b.n	800b772 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b80c:	4639      	mov	r1, r7
 800b80e:	4642      	mov	r2, r8
 800b810:	4628      	mov	r0, r5
 800b812:	f00c fb9a 	bl	8017f4a <memcpy>
 800b816:	68a1      	ldr	r1, [r4, #8]
 800b818:	4652      	mov	r2, sl
 800b81a:	eb05 0008 	add.w	r0, r5, r8
 800b81e:	f00c fb94 	bl	8017f4a <memcpy>
 800b822:	e7a6      	b.n	800b772 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b824 <ucdr_serialize_uint64_t>:
 800b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b828:	2108      	movs	r1, #8
 800b82a:	b082      	sub	sp, #8
 800b82c:	4604      	mov	r4, r0
 800b82e:	e9cd 2300 	strd	r2, r3, [sp]
 800b832:	f000 fcd9 	bl	800c1e8 <ucdr_buffer_alignment>
 800b836:	4601      	mov	r1, r0
 800b838:	4620      	mov	r0, r4
 800b83a:	7d67      	ldrb	r7, [r4, #21]
 800b83c:	f000 fd18 	bl	800c270 <ucdr_advance_buffer>
 800b840:	2108      	movs	r1, #8
 800b842:	4620      	mov	r0, r4
 800b844:	f000 fc70 	bl	800c128 <ucdr_check_buffer_available_for>
 800b848:	2800      	cmp	r0, #0
 800b84a:	d14e      	bne.n	800b8ea <ucdr_serialize_uint64_t+0xc6>
 800b84c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b850:	42ab      	cmp	r3, r5
 800b852:	d945      	bls.n	800b8e0 <ucdr_serialize_uint64_t+0xbc>
 800b854:	1b5e      	subs	r6, r3, r5
 800b856:	60a3      	str	r3, [r4, #8]
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	f1c6 0808 	rsb	r8, r6, #8
 800b85e:	4433      	add	r3, r6
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	4641      	mov	r1, r8
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fc6b 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d074      	beq.n	800b958 <ucdr_serialize_uint64_t+0x134>
 800b86e:	7d23      	ldrb	r3, [r4, #20]
 800b870:	2b01      	cmp	r3, #1
 800b872:	f000 809b 	beq.w	800b9ac <ucdr_serialize_uint64_t+0x188>
 800b876:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b87a:	702b      	strb	r3, [r5, #0]
 800b87c:	2e00      	cmp	r6, #0
 800b87e:	d078      	beq.n	800b972 <ucdr_serialize_uint64_t+0x14e>
 800b880:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b884:	706b      	strb	r3, [r5, #1]
 800b886:	2e01      	cmp	r6, #1
 800b888:	d077      	beq.n	800b97a <ucdr_serialize_uint64_t+0x156>
 800b88a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b88e:	70ab      	strb	r3, [r5, #2]
 800b890:	2e02      	cmp	r6, #2
 800b892:	d076      	beq.n	800b982 <ucdr_serialize_uint64_t+0x15e>
 800b894:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b898:	70eb      	strb	r3, [r5, #3]
 800b89a:	2e03      	cmp	r6, #3
 800b89c:	d075      	beq.n	800b98a <ucdr_serialize_uint64_t+0x166>
 800b89e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b8a2:	712b      	strb	r3, [r5, #4]
 800b8a4:	2e04      	cmp	r6, #4
 800b8a6:	d074      	beq.n	800b992 <ucdr_serialize_uint64_t+0x16e>
 800b8a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b8ac:	716b      	strb	r3, [r5, #5]
 800b8ae:	2e05      	cmp	r6, #5
 800b8b0:	d073      	beq.n	800b99a <ucdr_serialize_uint64_t+0x176>
 800b8b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b8b6:	71ab      	strb	r3, [r5, #6]
 800b8b8:	2e06      	cmp	r6, #6
 800b8ba:	d072      	beq.n	800b9a2 <ucdr_serialize_uint64_t+0x17e>
 800b8bc:	f89d 3000 	ldrb.w	r3, [sp]
 800b8c0:	71eb      	strb	r3, [r5, #7]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	68a2      	ldr	r2, [r4, #8]
 800b8c6:	7da0      	ldrb	r0, [r4, #22]
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	1b9e      	subs	r6, r3, r6
 800b8cc:	4442      	add	r2, r8
 800b8ce:	2308      	movs	r3, #8
 800b8d0:	f080 0001 	eor.w	r0, r0, #1
 800b8d4:	60a2      	str	r2, [r4, #8]
 800b8d6:	6126      	str	r6, [r4, #16]
 800b8d8:	7563      	strb	r3, [r4, #21]
 800b8da:	b002      	add	sp, #8
 800b8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e0:	2108      	movs	r1, #8
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 fc2c 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800b8e8:	b350      	cbz	r0, 800b940 <ucdr_serialize_uint64_t+0x11c>
 800b8ea:	7d23      	ldrb	r3, [r4, #20]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d02d      	beq.n	800b94c <ucdr_serialize_uint64_t+0x128>
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8f6:	701a      	strb	r2, [r3, #0]
 800b8f8:	68a3      	ldr	r3, [r4, #8]
 800b8fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8fe:	705a      	strb	r2, [r3, #1]
 800b900:	68a3      	ldr	r3, [r4, #8]
 800b902:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b906:	709a      	strb	r2, [r3, #2]
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b90e:	70da      	strb	r2, [r3, #3]
 800b910:	68a3      	ldr	r3, [r4, #8]
 800b912:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b916:	711a      	strb	r2, [r3, #4]
 800b918:	68a3      	ldr	r3, [r4, #8]
 800b91a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b91e:	715a      	strb	r2, [r3, #5]
 800b920:	68a3      	ldr	r3, [r4, #8]
 800b922:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b926:	719a      	strb	r2, [r3, #6]
 800b928:	68a3      	ldr	r3, [r4, #8]
 800b92a:	f89d 2000 	ldrb.w	r2, [sp]
 800b92e:	71da      	strb	r2, [r3, #7]
 800b930:	68a2      	ldr	r2, [r4, #8]
 800b932:	6923      	ldr	r3, [r4, #16]
 800b934:	3208      	adds	r2, #8
 800b936:	3308      	adds	r3, #8
 800b938:	2108      	movs	r1, #8
 800b93a:	60a2      	str	r2, [r4, #8]
 800b93c:	6123      	str	r3, [r4, #16]
 800b93e:	7561      	strb	r1, [r4, #21]
 800b940:	7da0      	ldrb	r0, [r4, #22]
 800b942:	f080 0001 	eor.w	r0, r0, #1
 800b946:	b002      	add	sp, #8
 800b948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94c:	466b      	mov	r3, sp
 800b94e:	cb03      	ldmia	r3!, {r0, r1}
 800b950:	68a3      	ldr	r3, [r4, #8]
 800b952:	6018      	str	r0, [r3, #0]
 800b954:	6059      	str	r1, [r3, #4]
 800b956:	e7eb      	b.n	800b930 <ucdr_serialize_uint64_t+0x10c>
 800b958:	68a2      	ldr	r2, [r4, #8]
 800b95a:	6923      	ldr	r3, [r4, #16]
 800b95c:	7da0      	ldrb	r0, [r4, #22]
 800b95e:	7567      	strb	r7, [r4, #21]
 800b960:	1b92      	subs	r2, r2, r6
 800b962:	1b9b      	subs	r3, r3, r6
 800b964:	f080 0001 	eor.w	r0, r0, #1
 800b968:	60a2      	str	r2, [r4, #8]
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	b002      	add	sp, #8
 800b96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b980:	701a      	strb	r2, [r3, #0]
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	68a3      	ldr	r3, [r4, #8]
 800b98c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	68a3      	ldr	r3, [r4, #8]
 800b994:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b998:	701a      	strb	r2, [r3, #0]
 800b99a:	68a3      	ldr	r3, [r4, #8]
 800b99c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b9a0:	701a      	strb	r2, [r3, #0]
 800b9a2:	68a3      	ldr	r3, [r4, #8]
 800b9a4:	f89d 2000 	ldrb.w	r2, [sp]
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	e78a      	b.n	800b8c2 <ucdr_serialize_uint64_t+0x9e>
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	466d      	mov	r5, sp
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	f00c fac9 	bl	8017f4a <memcpy>
 800b9b8:	68a0      	ldr	r0, [r4, #8]
 800b9ba:	4642      	mov	r2, r8
 800b9bc:	19a9      	adds	r1, r5, r6
 800b9be:	f00c fac4 	bl	8017f4a <memcpy>
 800b9c2:	e77e      	b.n	800b8c2 <ucdr_serialize_uint64_t+0x9e>

0800b9c4 <ucdr_serialize_int16_t>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	b082      	sub	sp, #8
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	2102      	movs	r1, #2
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b9d4:	f000 fc08 	bl	800c1e8 <ucdr_buffer_alignment>
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4620      	mov	r0, r4
 800b9dc:	7d67      	ldrb	r7, [r4, #21]
 800b9de:	f000 fc47 	bl	800c270 <ucdr_advance_buffer>
 800b9e2:	2102      	movs	r1, #2
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f000 fb9f 	bl	800c128 <ucdr_check_buffer_available_for>
 800b9ea:	bb78      	cbnz	r0, 800ba4c <ucdr_serialize_int16_t+0x88>
 800b9ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b9f0:	42ab      	cmp	r3, r5
 800b9f2:	d926      	bls.n	800ba42 <ucdr_serialize_int16_t+0x7e>
 800b9f4:	1b5e      	subs	r6, r3, r5
 800b9f6:	60a3      	str	r3, [r4, #8]
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	f1c6 0802 	rsb	r8, r6, #2
 800b9fe:	4433      	add	r3, r6
 800ba00:	6123      	str	r3, [r4, #16]
 800ba02:	4641      	mov	r1, r8
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 fb9b 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d03b      	beq.n	800ba86 <ucdr_serialize_int16_t+0xc2>
 800ba0e:	7d23      	ldrb	r3, [r4, #20]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d04a      	beq.n	800baaa <ucdr_serialize_int16_t+0xe6>
 800ba14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba18:	702b      	strb	r3, [r5, #0]
 800ba1a:	2e00      	cmp	r6, #0
 800ba1c:	d040      	beq.n	800baa0 <ucdr_serialize_int16_t+0xdc>
 800ba1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba22:	706b      	strb	r3, [r5, #1]
 800ba24:	6923      	ldr	r3, [r4, #16]
 800ba26:	68a2      	ldr	r2, [r4, #8]
 800ba28:	7da0      	ldrb	r0, [r4, #22]
 800ba2a:	3302      	adds	r3, #2
 800ba2c:	1b9e      	subs	r6, r3, r6
 800ba2e:	4442      	add	r2, r8
 800ba30:	2302      	movs	r3, #2
 800ba32:	f080 0001 	eor.w	r0, r0, #1
 800ba36:	60a2      	str	r2, [r4, #8]
 800ba38:	6126      	str	r6, [r4, #16]
 800ba3a:	7563      	strb	r3, [r4, #21]
 800ba3c:	b002      	add	sp, #8
 800ba3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba42:	2102      	movs	r1, #2
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fb7b 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800ba4a:	b190      	cbz	r0, 800ba72 <ucdr_serialize_int16_t+0xae>
 800ba4c:	7d23      	ldrb	r3, [r4, #20]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	d014      	beq.n	800ba7e <ucdr_serialize_int16_t+0xba>
 800ba54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba60:	705a      	strb	r2, [r3, #1]
 800ba62:	68a2      	ldr	r2, [r4, #8]
 800ba64:	6923      	ldr	r3, [r4, #16]
 800ba66:	3202      	adds	r2, #2
 800ba68:	3302      	adds	r3, #2
 800ba6a:	2102      	movs	r1, #2
 800ba6c:	60a2      	str	r2, [r4, #8]
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	7561      	strb	r1, [r4, #21]
 800ba72:	7da0      	ldrb	r0, [r4, #22]
 800ba74:	f080 0001 	eor.w	r0, r0, #1
 800ba78:	b002      	add	sp, #8
 800ba7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba82:	801a      	strh	r2, [r3, #0]
 800ba84:	e7ed      	b.n	800ba62 <ucdr_serialize_int16_t+0x9e>
 800ba86:	68a2      	ldr	r2, [r4, #8]
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	7da0      	ldrb	r0, [r4, #22]
 800ba8c:	7567      	strb	r7, [r4, #21]
 800ba8e:	1b92      	subs	r2, r2, r6
 800ba90:	1b9b      	subs	r3, r3, r6
 800ba92:	f080 0001 	eor.w	r0, r0, #1
 800ba96:	60a2      	str	r2, [r4, #8]
 800ba98:	6123      	str	r3, [r4, #16]
 800ba9a:	b002      	add	sp, #8
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	68a3      	ldr	r3, [r4, #8]
 800baa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800baa6:	701a      	strb	r2, [r3, #0]
 800baa8:	e7bc      	b.n	800ba24 <ucdr_serialize_int16_t+0x60>
 800baaa:	4628      	mov	r0, r5
 800baac:	f10d 0506 	add.w	r5, sp, #6
 800bab0:	4629      	mov	r1, r5
 800bab2:	4632      	mov	r2, r6
 800bab4:	f00c fa49 	bl	8017f4a <memcpy>
 800bab8:	68a0      	ldr	r0, [r4, #8]
 800baba:	4642      	mov	r2, r8
 800babc:	19a9      	adds	r1, r5, r6
 800babe:	f00c fa44 	bl	8017f4a <memcpy>
 800bac2:	e7af      	b.n	800ba24 <ucdr_serialize_int16_t+0x60>

0800bac4 <ucdr_deserialize_int16_t>:
 800bac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac8:	460d      	mov	r5, r1
 800baca:	2102      	movs	r1, #2
 800bacc:	4604      	mov	r4, r0
 800bace:	f000 fb8b 	bl	800c1e8 <ucdr_buffer_alignment>
 800bad2:	4601      	mov	r1, r0
 800bad4:	4620      	mov	r0, r4
 800bad6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bada:	f000 fbc9 	bl	800c270 <ucdr_advance_buffer>
 800bade:	2102      	movs	r1, #2
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 fb21 	bl	800c128 <ucdr_check_buffer_available_for>
 800bae6:	bb60      	cbnz	r0, 800bb42 <ucdr_deserialize_int16_t+0x7e>
 800bae8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800baec:	42be      	cmp	r6, r7
 800baee:	d923      	bls.n	800bb38 <ucdr_deserialize_int16_t+0x74>
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	60a6      	str	r6, [r4, #8]
 800baf4:	1bf6      	subs	r6, r6, r7
 800baf6:	4433      	add	r3, r6
 800baf8:	f1c6 0902 	rsb	r9, r6, #2
 800bafc:	6123      	str	r3, [r4, #16]
 800bafe:	4649      	mov	r1, r9
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fb1d 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d034      	beq.n	800bb74 <ucdr_deserialize_int16_t+0xb0>
 800bb0a:	7d23      	ldrb	r3, [r4, #20]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d042      	beq.n	800bb96 <ucdr_deserialize_int16_t+0xd2>
 800bb10:	787b      	ldrb	r3, [r7, #1]
 800bb12:	702b      	strb	r3, [r5, #0]
 800bb14:	2e00      	cmp	r6, #0
 800bb16:	d03a      	beq.n	800bb8e <ucdr_deserialize_int16_t+0xca>
 800bb18:	783b      	ldrb	r3, [r7, #0]
 800bb1a:	706b      	strb	r3, [r5, #1]
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	68a2      	ldr	r2, [r4, #8]
 800bb20:	7da0      	ldrb	r0, [r4, #22]
 800bb22:	2102      	movs	r1, #2
 800bb24:	3302      	adds	r3, #2
 800bb26:	444a      	add	r2, r9
 800bb28:	1b9b      	subs	r3, r3, r6
 800bb2a:	7561      	strb	r1, [r4, #21]
 800bb2c:	60a2      	str	r2, [r4, #8]
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	f080 0001 	eor.w	r0, r0, #1
 800bb34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb38:	2102      	movs	r1, #2
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 fb00 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bb40:	b180      	cbz	r0, 800bb64 <ucdr_deserialize_int16_t+0xa0>
 800bb42:	7d23      	ldrb	r3, [r4, #20]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	d011      	beq.n	800bb6e <ucdr_deserialize_int16_t+0xaa>
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	702b      	strb	r3, [r5, #0]
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	706b      	strb	r3, [r5, #1]
 800bb54:	68a2      	ldr	r2, [r4, #8]
 800bb56:	6923      	ldr	r3, [r4, #16]
 800bb58:	3202      	adds	r2, #2
 800bb5a:	3302      	adds	r3, #2
 800bb5c:	2102      	movs	r1, #2
 800bb5e:	60a2      	str	r2, [r4, #8]
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	7561      	strb	r1, [r4, #21]
 800bb64:	7da0      	ldrb	r0, [r4, #22]
 800bb66:	f080 0001 	eor.w	r0, r0, #1
 800bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	802b      	strh	r3, [r5, #0]
 800bb72:	e7ef      	b.n	800bb54 <ucdr_deserialize_int16_t+0x90>
 800bb74:	68a2      	ldr	r2, [r4, #8]
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	7da0      	ldrb	r0, [r4, #22]
 800bb7a:	f884 8015 	strb.w	r8, [r4, #21]
 800bb7e:	1b92      	subs	r2, r2, r6
 800bb80:	1b9b      	subs	r3, r3, r6
 800bb82:	60a2      	str	r2, [r4, #8]
 800bb84:	6123      	str	r3, [r4, #16]
 800bb86:	f080 0001 	eor.w	r0, r0, #1
 800bb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8e:	68a3      	ldr	r3, [r4, #8]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	706b      	strb	r3, [r5, #1]
 800bb94:	e7c2      	b.n	800bb1c <ucdr_deserialize_int16_t+0x58>
 800bb96:	4639      	mov	r1, r7
 800bb98:	4632      	mov	r2, r6
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f00c f9d5 	bl	8017f4a <memcpy>
 800bba0:	68a1      	ldr	r1, [r4, #8]
 800bba2:	464a      	mov	r2, r9
 800bba4:	19a8      	adds	r0, r5, r6
 800bba6:	f00c f9d0 	bl	8017f4a <memcpy>
 800bbaa:	e7b7      	b.n	800bb1c <ucdr_deserialize_int16_t+0x58>

0800bbac <ucdr_serialize_int32_t>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	9101      	str	r1, [sp, #4]
 800bbb6:	2104      	movs	r1, #4
 800bbb8:	f000 fb16 	bl	800c1e8 <ucdr_buffer_alignment>
 800bbbc:	4601      	mov	r1, r0
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	7d67      	ldrb	r7, [r4, #21]
 800bbc2:	f000 fb55 	bl	800c270 <ucdr_advance_buffer>
 800bbc6:	2104      	movs	r1, #4
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 faad 	bl	800c128 <ucdr_check_buffer_available_for>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d139      	bne.n	800bc46 <ucdr_serialize_int32_t+0x9a>
 800bbd2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bbd6:	42ab      	cmp	r3, r5
 800bbd8:	d930      	bls.n	800bc3c <ucdr_serialize_int32_t+0x90>
 800bbda:	1b5e      	subs	r6, r3, r5
 800bbdc:	60a3      	str	r3, [r4, #8]
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	f1c6 0804 	rsb	r8, r6, #4
 800bbe4:	4433      	add	r3, r6
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	4641      	mov	r1, r8
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 faa8 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d04c      	beq.n	800bc8e <ucdr_serialize_int32_t+0xe2>
 800bbf4:	7d23      	ldrb	r3, [r4, #20]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d063      	beq.n	800bcc2 <ucdr_serialize_int32_t+0x116>
 800bbfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bbfe:	702b      	strb	r3, [r5, #0]
 800bc00:	2e00      	cmp	r6, #0
 800bc02:	d051      	beq.n	800bca8 <ucdr_serialize_int32_t+0xfc>
 800bc04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc08:	706b      	strb	r3, [r5, #1]
 800bc0a:	2e01      	cmp	r6, #1
 800bc0c:	d050      	beq.n	800bcb0 <ucdr_serialize_int32_t+0x104>
 800bc0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc12:	70ab      	strb	r3, [r5, #2]
 800bc14:	2e02      	cmp	r6, #2
 800bc16:	d04f      	beq.n	800bcb8 <ucdr_serialize_int32_t+0x10c>
 800bc18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc1c:	70eb      	strb	r3, [r5, #3]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	68a2      	ldr	r2, [r4, #8]
 800bc22:	7da0      	ldrb	r0, [r4, #22]
 800bc24:	3304      	adds	r3, #4
 800bc26:	1b9e      	subs	r6, r3, r6
 800bc28:	4442      	add	r2, r8
 800bc2a:	2304      	movs	r3, #4
 800bc2c:	f080 0001 	eor.w	r0, r0, #1
 800bc30:	60a2      	str	r2, [r4, #8]
 800bc32:	6126      	str	r6, [r4, #16]
 800bc34:	7563      	strb	r3, [r4, #21]
 800bc36:	b002      	add	sp, #8
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3c:	2104      	movs	r1, #4
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 fa7e 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bc44:	b1d0      	cbz	r0, 800bc7c <ucdr_serialize_int32_t+0xd0>
 800bc46:	7d23      	ldrb	r3, [r4, #20]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	d01c      	beq.n	800bc88 <ucdr_serialize_int32_t+0xdc>
 800bc4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	68a3      	ldr	r3, [r4, #8]
 800bc56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc5a:	705a      	strb	r2, [r3, #1]
 800bc5c:	68a3      	ldr	r3, [r4, #8]
 800bc5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc62:	709a      	strb	r2, [r3, #2]
 800bc64:	68a3      	ldr	r3, [r4, #8]
 800bc66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc6a:	70da      	strb	r2, [r3, #3]
 800bc6c:	68a2      	ldr	r2, [r4, #8]
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	3204      	adds	r2, #4
 800bc72:	3304      	adds	r3, #4
 800bc74:	2104      	movs	r1, #4
 800bc76:	60a2      	str	r2, [r4, #8]
 800bc78:	6123      	str	r3, [r4, #16]
 800bc7a:	7561      	strb	r1, [r4, #21]
 800bc7c:	7da0      	ldrb	r0, [r4, #22]
 800bc7e:	f080 0001 	eor.w	r0, r0, #1
 800bc82:	b002      	add	sp, #8
 800bc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc88:	9a01      	ldr	r2, [sp, #4]
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e7ee      	b.n	800bc6c <ucdr_serialize_int32_t+0xc0>
 800bc8e:	68a2      	ldr	r2, [r4, #8]
 800bc90:	6923      	ldr	r3, [r4, #16]
 800bc92:	7da0      	ldrb	r0, [r4, #22]
 800bc94:	7567      	strb	r7, [r4, #21]
 800bc96:	1b92      	subs	r2, r2, r6
 800bc98:	1b9b      	subs	r3, r3, r6
 800bc9a:	f080 0001 	eor.w	r0, r0, #1
 800bc9e:	60a2      	str	r2, [r4, #8]
 800bca0:	6123      	str	r3, [r4, #16]
 800bca2:	b002      	add	sp, #8
 800bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca8:	68a3      	ldr	r3, [r4, #8]
 800bcaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcae:	701a      	strb	r2, [r3, #0]
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcb6:	701a      	strb	r2, [r3, #0]
 800bcb8:	68a3      	ldr	r3, [r4, #8]
 800bcba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bcbe:	701a      	strb	r2, [r3, #0]
 800bcc0:	e7ad      	b.n	800bc1e <ucdr_serialize_int32_t+0x72>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	ad01      	add	r5, sp, #4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4632      	mov	r2, r6
 800bcca:	f00c f93e 	bl	8017f4a <memcpy>
 800bcce:	68a0      	ldr	r0, [r4, #8]
 800bcd0:	4642      	mov	r2, r8
 800bcd2:	19a9      	adds	r1, r5, r6
 800bcd4:	f00c f939 	bl	8017f4a <memcpy>
 800bcd8:	e7a1      	b.n	800bc1e <ucdr_serialize_int32_t+0x72>
 800bcda:	bf00      	nop

0800bcdc <ucdr_deserialize_int32_t>:
 800bcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce0:	460d      	mov	r5, r1
 800bce2:	2104      	movs	r1, #4
 800bce4:	4604      	mov	r4, r0
 800bce6:	f000 fa7f 	bl	800c1e8 <ucdr_buffer_alignment>
 800bcea:	4601      	mov	r1, r0
 800bcec:	4620      	mov	r0, r4
 800bcee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bcf2:	f000 fabd 	bl	800c270 <ucdr_advance_buffer>
 800bcf6:	2104      	movs	r1, #4
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fa15 	bl	800c128 <ucdr_check_buffer_available_for>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d138      	bne.n	800bd74 <ucdr_deserialize_int32_t+0x98>
 800bd02:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bd06:	42b7      	cmp	r7, r6
 800bd08:	d92f      	bls.n	800bd6a <ucdr_deserialize_int32_t+0x8e>
 800bd0a:	6923      	ldr	r3, [r4, #16]
 800bd0c:	60a7      	str	r7, [r4, #8]
 800bd0e:	1bbf      	subs	r7, r7, r6
 800bd10:	443b      	add	r3, r7
 800bd12:	f1c7 0904 	rsb	r9, r7, #4
 800bd16:	6123      	str	r3, [r4, #16]
 800bd18:	4649      	mov	r1, r9
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 fa10 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d046      	beq.n	800bdb2 <ucdr_deserialize_int32_t+0xd6>
 800bd24:	7d23      	ldrb	r3, [r4, #20]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d05c      	beq.n	800bde4 <ucdr_deserialize_int32_t+0x108>
 800bd2a:	78f3      	ldrb	r3, [r6, #3]
 800bd2c:	702b      	strb	r3, [r5, #0]
 800bd2e:	2f00      	cmp	r7, #0
 800bd30:	d04c      	beq.n	800bdcc <ucdr_deserialize_int32_t+0xf0>
 800bd32:	78b3      	ldrb	r3, [r6, #2]
 800bd34:	706b      	strb	r3, [r5, #1]
 800bd36:	2f01      	cmp	r7, #1
 800bd38:	f105 0302 	add.w	r3, r5, #2
 800bd3c:	d04a      	beq.n	800bdd4 <ucdr_deserialize_int32_t+0xf8>
 800bd3e:	7873      	ldrb	r3, [r6, #1]
 800bd40:	70ab      	strb	r3, [r5, #2]
 800bd42:	2f02      	cmp	r7, #2
 800bd44:	f105 0303 	add.w	r3, r5, #3
 800bd48:	d048      	beq.n	800bddc <ucdr_deserialize_int32_t+0x100>
 800bd4a:	7833      	ldrb	r3, [r6, #0]
 800bd4c:	70eb      	strb	r3, [r5, #3]
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	68a2      	ldr	r2, [r4, #8]
 800bd52:	7da0      	ldrb	r0, [r4, #22]
 800bd54:	2104      	movs	r1, #4
 800bd56:	3304      	adds	r3, #4
 800bd58:	444a      	add	r2, r9
 800bd5a:	1bdb      	subs	r3, r3, r7
 800bd5c:	7561      	strb	r1, [r4, #21]
 800bd5e:	60a2      	str	r2, [r4, #8]
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	f080 0001 	eor.w	r0, r0, #1
 800bd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	2104      	movs	r1, #4
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 f9e7 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bd72:	b1b0      	cbz	r0, 800bda2 <ucdr_deserialize_int32_t+0xc6>
 800bd74:	7d23      	ldrb	r3, [r4, #20]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	68a3      	ldr	r3, [r4, #8]
 800bd7a:	d017      	beq.n	800bdac <ucdr_deserialize_int32_t+0xd0>
 800bd7c:	78db      	ldrb	r3, [r3, #3]
 800bd7e:	702b      	strb	r3, [r5, #0]
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	789b      	ldrb	r3, [r3, #2]
 800bd84:	706b      	strb	r3, [r5, #1]
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	70ab      	strb	r3, [r5, #2]
 800bd8c:	68a3      	ldr	r3, [r4, #8]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	70eb      	strb	r3, [r5, #3]
 800bd92:	68a2      	ldr	r2, [r4, #8]
 800bd94:	6923      	ldr	r3, [r4, #16]
 800bd96:	3204      	adds	r2, #4
 800bd98:	3304      	adds	r3, #4
 800bd9a:	2104      	movs	r1, #4
 800bd9c:	60a2      	str	r2, [r4, #8]
 800bd9e:	6123      	str	r3, [r4, #16]
 800bda0:	7561      	strb	r1, [r4, #21]
 800bda2:	7da0      	ldrb	r0, [r4, #22]
 800bda4:	f080 0001 	eor.w	r0, r0, #1
 800bda8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	602b      	str	r3, [r5, #0]
 800bdb0:	e7ef      	b.n	800bd92 <ucdr_deserialize_int32_t+0xb6>
 800bdb2:	68a2      	ldr	r2, [r4, #8]
 800bdb4:	6923      	ldr	r3, [r4, #16]
 800bdb6:	7da0      	ldrb	r0, [r4, #22]
 800bdb8:	f884 8015 	strb.w	r8, [r4, #21]
 800bdbc:	1bd2      	subs	r2, r2, r7
 800bdbe:	1bdb      	subs	r3, r3, r7
 800bdc0:	60a2      	str	r2, [r4, #8]
 800bdc2:	6123      	str	r3, [r4, #16]
 800bdc4:	f080 0001 	eor.w	r0, r0, #1
 800bdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	789b      	ldrb	r3, [r3, #2]
 800bdd0:	706b      	strb	r3, [r5, #1]
 800bdd2:	1cab      	adds	r3, r5, #2
 800bdd4:	68a2      	ldr	r2, [r4, #8]
 800bdd6:	7852      	ldrb	r2, [r2, #1]
 800bdd8:	f803 2b01 	strb.w	r2, [r3], #1
 800bddc:	68a2      	ldr	r2, [r4, #8]
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	701a      	strb	r2, [r3, #0]
 800bde2:	e7b4      	b.n	800bd4e <ucdr_deserialize_int32_t+0x72>
 800bde4:	4631      	mov	r1, r6
 800bde6:	463a      	mov	r2, r7
 800bde8:	4628      	mov	r0, r5
 800bdea:	f00c f8ae 	bl	8017f4a <memcpy>
 800bdee:	68a1      	ldr	r1, [r4, #8]
 800bdf0:	464a      	mov	r2, r9
 800bdf2:	19e8      	adds	r0, r5, r7
 800bdf4:	f00c f8a9 	bl	8017f4a <memcpy>
 800bdf8:	e7a9      	b.n	800bd4e <ucdr_deserialize_int32_t+0x72>
 800bdfa:	bf00      	nop

0800bdfc <ucdr_serialize_double>:
 800bdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be00:	2108      	movs	r1, #8
 800be02:	b082      	sub	sp, #8
 800be04:	4604      	mov	r4, r0
 800be06:	ed8d 0b00 	vstr	d0, [sp]
 800be0a:	f000 f9ed 	bl	800c1e8 <ucdr_buffer_alignment>
 800be0e:	4601      	mov	r1, r0
 800be10:	4620      	mov	r0, r4
 800be12:	7d67      	ldrb	r7, [r4, #21]
 800be14:	f000 fa2c 	bl	800c270 <ucdr_advance_buffer>
 800be18:	2108      	movs	r1, #8
 800be1a:	4620      	mov	r0, r4
 800be1c:	f000 f984 	bl	800c128 <ucdr_check_buffer_available_for>
 800be20:	2800      	cmp	r0, #0
 800be22:	d14e      	bne.n	800bec2 <ucdr_serialize_double+0xc6>
 800be24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be28:	42ab      	cmp	r3, r5
 800be2a:	d945      	bls.n	800beb8 <ucdr_serialize_double+0xbc>
 800be2c:	1b5e      	subs	r6, r3, r5
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	f1c6 0808 	rsb	r8, r6, #8
 800be36:	4433      	add	r3, r6
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	4641      	mov	r1, r8
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 f97f 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800be42:	2800      	cmp	r0, #0
 800be44:	d074      	beq.n	800bf30 <ucdr_serialize_double+0x134>
 800be46:	7d23      	ldrb	r3, [r4, #20]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	f000 809b 	beq.w	800bf84 <ucdr_serialize_double+0x188>
 800be4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be52:	702b      	strb	r3, [r5, #0]
 800be54:	2e00      	cmp	r6, #0
 800be56:	d078      	beq.n	800bf4a <ucdr_serialize_double+0x14e>
 800be58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be5c:	706b      	strb	r3, [r5, #1]
 800be5e:	2e01      	cmp	r6, #1
 800be60:	d077      	beq.n	800bf52 <ucdr_serialize_double+0x156>
 800be62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be66:	70ab      	strb	r3, [r5, #2]
 800be68:	2e02      	cmp	r6, #2
 800be6a:	d076      	beq.n	800bf5a <ucdr_serialize_double+0x15e>
 800be6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be70:	70eb      	strb	r3, [r5, #3]
 800be72:	2e03      	cmp	r6, #3
 800be74:	d075      	beq.n	800bf62 <ucdr_serialize_double+0x166>
 800be76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800be7a:	712b      	strb	r3, [r5, #4]
 800be7c:	2e04      	cmp	r6, #4
 800be7e:	d074      	beq.n	800bf6a <ucdr_serialize_double+0x16e>
 800be80:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800be84:	716b      	strb	r3, [r5, #5]
 800be86:	2e05      	cmp	r6, #5
 800be88:	d073      	beq.n	800bf72 <ucdr_serialize_double+0x176>
 800be8a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800be8e:	71ab      	strb	r3, [r5, #6]
 800be90:	2e06      	cmp	r6, #6
 800be92:	d072      	beq.n	800bf7a <ucdr_serialize_double+0x17e>
 800be94:	f89d 3000 	ldrb.w	r3, [sp]
 800be98:	71eb      	strb	r3, [r5, #7]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	68a2      	ldr	r2, [r4, #8]
 800be9e:	7da0      	ldrb	r0, [r4, #22]
 800bea0:	3308      	adds	r3, #8
 800bea2:	1b9e      	subs	r6, r3, r6
 800bea4:	4442      	add	r2, r8
 800bea6:	2308      	movs	r3, #8
 800bea8:	f080 0001 	eor.w	r0, r0, #1
 800beac:	60a2      	str	r2, [r4, #8]
 800beae:	6126      	str	r6, [r4, #16]
 800beb0:	7563      	strb	r3, [r4, #21]
 800beb2:	b002      	add	sp, #8
 800beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb8:	2108      	movs	r1, #8
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 f940 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bec0:	b350      	cbz	r0, 800bf18 <ucdr_serialize_double+0x11c>
 800bec2:	7d23      	ldrb	r3, [r4, #20]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d02d      	beq.n	800bf24 <ucdr_serialize_double+0x128>
 800bec8:	68a3      	ldr	r3, [r4, #8]
 800beca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	68a3      	ldr	r3, [r4, #8]
 800bed2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bed6:	705a      	strb	r2, [r3, #1]
 800bed8:	68a3      	ldr	r3, [r4, #8]
 800beda:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bede:	709a      	strb	r2, [r3, #2]
 800bee0:	68a3      	ldr	r3, [r4, #8]
 800bee2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bee6:	70da      	strb	r2, [r3, #3]
 800bee8:	68a3      	ldr	r3, [r4, #8]
 800beea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800beee:	711a      	strb	r2, [r3, #4]
 800bef0:	68a3      	ldr	r3, [r4, #8]
 800bef2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bef6:	715a      	strb	r2, [r3, #5]
 800bef8:	68a3      	ldr	r3, [r4, #8]
 800befa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800befe:	719a      	strb	r2, [r3, #6]
 800bf00:	68a3      	ldr	r3, [r4, #8]
 800bf02:	f89d 2000 	ldrb.w	r2, [sp]
 800bf06:	71da      	strb	r2, [r3, #7]
 800bf08:	68a2      	ldr	r2, [r4, #8]
 800bf0a:	6923      	ldr	r3, [r4, #16]
 800bf0c:	3208      	adds	r2, #8
 800bf0e:	3308      	adds	r3, #8
 800bf10:	2108      	movs	r1, #8
 800bf12:	60a2      	str	r2, [r4, #8]
 800bf14:	6123      	str	r3, [r4, #16]
 800bf16:	7561      	strb	r1, [r4, #21]
 800bf18:	7da0      	ldrb	r0, [r4, #22]
 800bf1a:	f080 0001 	eor.w	r0, r0, #1
 800bf1e:	b002      	add	sp, #8
 800bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf24:	466b      	mov	r3, sp
 800bf26:	cb03      	ldmia	r3!, {r0, r1}
 800bf28:	68a3      	ldr	r3, [r4, #8]
 800bf2a:	6018      	str	r0, [r3, #0]
 800bf2c:	6059      	str	r1, [r3, #4]
 800bf2e:	e7eb      	b.n	800bf08 <ucdr_serialize_double+0x10c>
 800bf30:	68a2      	ldr	r2, [r4, #8]
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	7da0      	ldrb	r0, [r4, #22]
 800bf36:	7567      	strb	r7, [r4, #21]
 800bf38:	1b92      	subs	r2, r2, r6
 800bf3a:	1b9b      	subs	r3, r3, r6
 800bf3c:	f080 0001 	eor.w	r0, r0, #1
 800bf40:	60a2      	str	r2, [r4, #8]
 800bf42:	6123      	str	r3, [r4, #16]
 800bf44:	b002      	add	sp, #8
 800bf46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf60:	701a      	strb	r2, [r3, #0]
 800bf62:	68a3      	ldr	r3, [r4, #8]
 800bf64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	68a3      	ldr	r3, [r4, #8]
 800bf74:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	f89d 2000 	ldrb.w	r2, [sp]
 800bf80:	701a      	strb	r2, [r3, #0]
 800bf82:	e78a      	b.n	800be9a <ucdr_serialize_double+0x9e>
 800bf84:	4628      	mov	r0, r5
 800bf86:	466d      	mov	r5, sp
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	f00b ffdd 	bl	8017f4a <memcpy>
 800bf90:	68a0      	ldr	r0, [r4, #8]
 800bf92:	4642      	mov	r2, r8
 800bf94:	19a9      	adds	r1, r5, r6
 800bf96:	f00b ffd8 	bl	8017f4a <memcpy>
 800bf9a:	e77e      	b.n	800be9a <ucdr_serialize_double+0x9e>

0800bf9c <ucdr_deserialize_double>:
 800bf9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	460d      	mov	r5, r1
 800bfa2:	2108      	movs	r1, #8
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	f000 f91f 	bl	800c1e8 <ucdr_buffer_alignment>
 800bfaa:	4601      	mov	r1, r0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bfb2:	f000 f95d 	bl	800c270 <ucdr_advance_buffer>
 800bfb6:	2108      	movs	r1, #8
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f000 f8b5 	bl	800c128 <ucdr_check_buffer_available_for>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d151      	bne.n	800c066 <ucdr_deserialize_double+0xca>
 800bfc2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bfc6:	42be      	cmp	r6, r7
 800bfc8:	d948      	bls.n	800c05c <ucdr_deserialize_double+0xc0>
 800bfca:	6923      	ldr	r3, [r4, #16]
 800bfcc:	60a6      	str	r6, [r4, #8]
 800bfce:	1bf6      	subs	r6, r6, r7
 800bfd0:	4433      	add	r3, r6
 800bfd2:	f1c6 0808 	rsb	r8, r6, #8
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	4641      	mov	r1, r8
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 f8b0 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d06d      	beq.n	800c0c0 <ucdr_deserialize_double+0x124>
 800bfe4:	7d23      	ldrb	r3, [r4, #20]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	f000 8093 	beq.w	800c112 <ucdr_deserialize_double+0x176>
 800bfec:	79fb      	ldrb	r3, [r7, #7]
 800bfee:	702b      	strb	r3, [r5, #0]
 800bff0:	2e00      	cmp	r6, #0
 800bff2:	d072      	beq.n	800c0da <ucdr_deserialize_double+0x13e>
 800bff4:	79bb      	ldrb	r3, [r7, #6]
 800bff6:	706b      	strb	r3, [r5, #1]
 800bff8:	2e01      	cmp	r6, #1
 800bffa:	f105 0302 	add.w	r3, r5, #2
 800bffe:	d070      	beq.n	800c0e2 <ucdr_deserialize_double+0x146>
 800c000:	797b      	ldrb	r3, [r7, #5]
 800c002:	70ab      	strb	r3, [r5, #2]
 800c004:	2e02      	cmp	r6, #2
 800c006:	f105 0303 	add.w	r3, r5, #3
 800c00a:	d06e      	beq.n	800c0ea <ucdr_deserialize_double+0x14e>
 800c00c:	793b      	ldrb	r3, [r7, #4]
 800c00e:	70eb      	strb	r3, [r5, #3]
 800c010:	2e03      	cmp	r6, #3
 800c012:	f105 0304 	add.w	r3, r5, #4
 800c016:	d06c      	beq.n	800c0f2 <ucdr_deserialize_double+0x156>
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	712b      	strb	r3, [r5, #4]
 800c01c:	2e04      	cmp	r6, #4
 800c01e:	f105 0305 	add.w	r3, r5, #5
 800c022:	d06a      	beq.n	800c0fa <ucdr_deserialize_double+0x15e>
 800c024:	78bb      	ldrb	r3, [r7, #2]
 800c026:	716b      	strb	r3, [r5, #5]
 800c028:	2e05      	cmp	r6, #5
 800c02a:	f105 0306 	add.w	r3, r5, #6
 800c02e:	d068      	beq.n	800c102 <ucdr_deserialize_double+0x166>
 800c030:	787b      	ldrb	r3, [r7, #1]
 800c032:	71ab      	strb	r3, [r5, #6]
 800c034:	2e06      	cmp	r6, #6
 800c036:	f105 0307 	add.w	r3, r5, #7
 800c03a:	d066      	beq.n	800c10a <ucdr_deserialize_double+0x16e>
 800c03c:	783b      	ldrb	r3, [r7, #0]
 800c03e:	71eb      	strb	r3, [r5, #7]
 800c040:	6923      	ldr	r3, [r4, #16]
 800c042:	68a2      	ldr	r2, [r4, #8]
 800c044:	7da0      	ldrb	r0, [r4, #22]
 800c046:	3308      	adds	r3, #8
 800c048:	1b9e      	subs	r6, r3, r6
 800c04a:	2308      	movs	r3, #8
 800c04c:	4442      	add	r2, r8
 800c04e:	7563      	strb	r3, [r4, #21]
 800c050:	60a2      	str	r2, [r4, #8]
 800c052:	6126      	str	r6, [r4, #16]
 800c054:	f080 0001 	eor.w	r0, r0, #1
 800c058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c05c:	2108      	movs	r1, #8
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 f86e 	bl	800c140 <ucdr_check_final_buffer_behavior>
 800c064:	b310      	cbz	r0, 800c0ac <ucdr_deserialize_double+0x110>
 800c066:	7d23      	ldrb	r3, [r4, #20]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	d023      	beq.n	800c0b6 <ucdr_deserialize_double+0x11a>
 800c06e:	79db      	ldrb	r3, [r3, #7]
 800c070:	702b      	strb	r3, [r5, #0]
 800c072:	68a3      	ldr	r3, [r4, #8]
 800c074:	799b      	ldrb	r3, [r3, #6]
 800c076:	706b      	strb	r3, [r5, #1]
 800c078:	68a3      	ldr	r3, [r4, #8]
 800c07a:	795b      	ldrb	r3, [r3, #5]
 800c07c:	70ab      	strb	r3, [r5, #2]
 800c07e:	68a3      	ldr	r3, [r4, #8]
 800c080:	791b      	ldrb	r3, [r3, #4]
 800c082:	70eb      	strb	r3, [r5, #3]
 800c084:	68a3      	ldr	r3, [r4, #8]
 800c086:	78db      	ldrb	r3, [r3, #3]
 800c088:	712b      	strb	r3, [r5, #4]
 800c08a:	68a3      	ldr	r3, [r4, #8]
 800c08c:	789b      	ldrb	r3, [r3, #2]
 800c08e:	716b      	strb	r3, [r5, #5]
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	785b      	ldrb	r3, [r3, #1]
 800c094:	71ab      	strb	r3, [r5, #6]
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	71eb      	strb	r3, [r5, #7]
 800c09c:	68a2      	ldr	r2, [r4, #8]
 800c09e:	6923      	ldr	r3, [r4, #16]
 800c0a0:	3208      	adds	r2, #8
 800c0a2:	3308      	adds	r3, #8
 800c0a4:	2108      	movs	r1, #8
 800c0a6:	60a2      	str	r2, [r4, #8]
 800c0a8:	6123      	str	r3, [r4, #16]
 800c0aa:	7561      	strb	r1, [r4, #21]
 800c0ac:	7da0      	ldrb	r0, [r4, #22]
 800c0ae:	f080 0001 	eor.w	r0, r0, #1
 800c0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	606b      	str	r3, [r5, #4]
 800c0bc:	602a      	str	r2, [r5, #0]
 800c0be:	e7ed      	b.n	800c09c <ucdr_deserialize_double+0x100>
 800c0c0:	68a2      	ldr	r2, [r4, #8]
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	7da0      	ldrb	r0, [r4, #22]
 800c0c6:	f884 9015 	strb.w	r9, [r4, #21]
 800c0ca:	1b92      	subs	r2, r2, r6
 800c0cc:	1b9b      	subs	r3, r3, r6
 800c0ce:	60a2      	str	r2, [r4, #8]
 800c0d0:	6123      	str	r3, [r4, #16]
 800c0d2:	f080 0001 	eor.w	r0, r0, #1
 800c0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0da:	68a3      	ldr	r3, [r4, #8]
 800c0dc:	799b      	ldrb	r3, [r3, #6]
 800c0de:	706b      	strb	r3, [r5, #1]
 800c0e0:	1cab      	adds	r3, r5, #2
 800c0e2:	68a2      	ldr	r2, [r4, #8]
 800c0e4:	7952      	ldrb	r2, [r2, #5]
 800c0e6:	f803 2b01 	strb.w	r2, [r3], #1
 800c0ea:	68a2      	ldr	r2, [r4, #8]
 800c0ec:	7912      	ldrb	r2, [r2, #4]
 800c0ee:	f803 2b01 	strb.w	r2, [r3], #1
 800c0f2:	68a2      	ldr	r2, [r4, #8]
 800c0f4:	78d2      	ldrb	r2, [r2, #3]
 800c0f6:	f803 2b01 	strb.w	r2, [r3], #1
 800c0fa:	68a2      	ldr	r2, [r4, #8]
 800c0fc:	7892      	ldrb	r2, [r2, #2]
 800c0fe:	f803 2b01 	strb.w	r2, [r3], #1
 800c102:	68a2      	ldr	r2, [r4, #8]
 800c104:	7852      	ldrb	r2, [r2, #1]
 800c106:	f803 2b01 	strb.w	r2, [r3], #1
 800c10a:	68a2      	ldr	r2, [r4, #8]
 800c10c:	7812      	ldrb	r2, [r2, #0]
 800c10e:	701a      	strb	r2, [r3, #0]
 800c110:	e796      	b.n	800c040 <ucdr_deserialize_double+0xa4>
 800c112:	4639      	mov	r1, r7
 800c114:	4632      	mov	r2, r6
 800c116:	4628      	mov	r0, r5
 800c118:	f00b ff17 	bl	8017f4a <memcpy>
 800c11c:	68a1      	ldr	r1, [r4, #8]
 800c11e:	4642      	mov	r2, r8
 800c120:	19a8      	adds	r0, r5, r6
 800c122:	f00b ff12 	bl	8017f4a <memcpy>
 800c126:	e78b      	b.n	800c040 <ucdr_deserialize_double+0xa4>

0800c128 <ucdr_check_buffer_available_for>:
 800c128:	7d83      	ldrb	r3, [r0, #22]
 800c12a:	b93b      	cbnz	r3, 800c13c <ucdr_check_buffer_available_for+0x14>
 800c12c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c130:	4419      	add	r1, r3
 800c132:	4288      	cmp	r0, r1
 800c134:	bf34      	ite	cc
 800c136:	2000      	movcc	r0, #0
 800c138:	2001      	movcs	r0, #1
 800c13a:	4770      	bx	lr
 800c13c:	2000      	movs	r0, #0
 800c13e:	4770      	bx	lr

0800c140 <ucdr_check_final_buffer_behavior>:
 800c140:	7d83      	ldrb	r3, [r0, #22]
 800c142:	b943      	cbnz	r3, 800c156 <ucdr_check_final_buffer_behavior+0x16>
 800c144:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c148:	4291      	cmp	r1, r2
 800c14a:	b510      	push	{r4, lr}
 800c14c:	4604      	mov	r4, r0
 800c14e:	d205      	bcs.n	800c15c <ucdr_check_final_buffer_behavior+0x1c>
 800c150:	2301      	movs	r3, #1
 800c152:	4618      	mov	r0, r3
 800c154:	bd10      	pop	{r4, pc}
 800c156:	2300      	movs	r3, #0
 800c158:	4618      	mov	r0, r3
 800c15a:	4770      	bx	lr
 800c15c:	6982      	ldr	r2, [r0, #24]
 800c15e:	b13a      	cbz	r2, 800c170 <ucdr_check_final_buffer_behavior+0x30>
 800c160:	69c1      	ldr	r1, [r0, #28]
 800c162:	4790      	blx	r2
 800c164:	f080 0301 	eor.w	r3, r0, #1
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	75a0      	strb	r0, [r4, #22]
 800c16c:	4618      	mov	r0, r3
 800c16e:	bd10      	pop	{r4, pc}
 800c170:	2001      	movs	r0, #1
 800c172:	75a0      	strb	r0, [r4, #22]
 800c174:	e7fa      	b.n	800c16c <ucdr_check_final_buffer_behavior+0x2c>
 800c176:	bf00      	nop

0800c178 <ucdr_set_on_full_buffer_callback>:
 800c178:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop

0800c180 <ucdr_init_buffer_origin_offset_endian>:
 800c180:	b410      	push	{r4}
 800c182:	9c01      	ldr	r4, [sp, #4]
 800c184:	6001      	str	r1, [r0, #0]
 800c186:	440a      	add	r2, r1
 800c188:	6042      	str	r2, [r0, #4]
 800c18a:	190a      	adds	r2, r1, r4
 800c18c:	441c      	add	r4, r3
 800c18e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c192:	6082      	str	r2, [r0, #8]
 800c194:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c198:	7503      	strb	r3, [r0, #20]
 800c19a:	2200      	movs	r2, #0
 800c19c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c1a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1a4:	7542      	strb	r2, [r0, #21]
 800c1a6:	7582      	strb	r2, [r0, #22]
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop

0800c1ac <ucdr_init_buffer_origin_offset>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	9c04      	ldr	r4, [sp, #16]
 800c1b2:	9400      	str	r4, [sp, #0]
 800c1b4:	2401      	movs	r4, #1
 800c1b6:	9401      	str	r4, [sp, #4]
 800c1b8:	f7ff ffe2 	bl	800c180 <ucdr_init_buffer_origin_offset_endian>
 800c1bc:	b002      	add	sp, #8
 800c1be:	bd10      	pop	{r4, pc}

0800c1c0 <ucdr_init_buffer_origin>:
 800c1c0:	b510      	push	{r4, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	2400      	movs	r4, #0
 800c1c6:	9400      	str	r4, [sp, #0]
 800c1c8:	f7ff fff0 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 800c1cc:	b002      	add	sp, #8
 800c1ce:	bd10      	pop	{r4, pc}

0800c1d0 <ucdr_init_buffer>:
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f7ff bff5 	b.w	800c1c0 <ucdr_init_buffer_origin>
 800c1d6:	bf00      	nop

0800c1d8 <ucdr_alignment>:
 800c1d8:	fbb0 f3f1 	udiv	r3, r0, r1
 800c1dc:	fb03 0011 	mls	r0, r3, r1, r0
 800c1e0:	1a08      	subs	r0, r1, r0
 800c1e2:	3901      	subs	r1, #1
 800c1e4:	4008      	ands	r0, r1
 800c1e6:	4770      	bx	lr

0800c1e8 <ucdr_buffer_alignment>:
 800c1e8:	7d43      	ldrb	r3, [r0, #21]
 800c1ea:	428b      	cmp	r3, r1
 800c1ec:	d208      	bcs.n	800c200 <ucdr_buffer_alignment+0x18>
 800c1ee:	6900      	ldr	r0, [r0, #16]
 800c1f0:	fbb0 f3f1 	udiv	r3, r0, r1
 800c1f4:	fb01 0013 	mls	r0, r1, r3, r0
 800c1f8:	1a08      	subs	r0, r1, r0
 800c1fa:	3901      	subs	r1, #1
 800c1fc:	4008      	ands	r0, r1
 800c1fe:	4770      	bx	lr
 800c200:	2000      	movs	r0, #0
 800c202:	4770      	bx	lr

0800c204 <ucdr_align_to>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4604      	mov	r4, r0
 800c208:	460d      	mov	r5, r1
 800c20a:	f7ff ffed 	bl	800c1e8 <ucdr_buffer_alignment>
 800c20e:	68a3      	ldr	r3, [r4, #8]
 800c210:	6921      	ldr	r1, [r4, #16]
 800c212:	7565      	strb	r5, [r4, #21]
 800c214:	181a      	adds	r2, r3, r0
 800c216:	6863      	ldr	r3, [r4, #4]
 800c218:	4293      	cmp	r3, r2
 800c21a:	4408      	add	r0, r1
 800c21c:	bf28      	it	cs
 800c21e:	4613      	movcs	r3, r2
 800c220:	6120      	str	r0, [r4, #16]
 800c222:	60a3      	str	r3, [r4, #8]
 800c224:	bd38      	pop	{r3, r4, r5, pc}
 800c226:	bf00      	nop

0800c228 <ucdr_buffer_length>:
 800c228:	6882      	ldr	r2, [r0, #8]
 800c22a:	6800      	ldr	r0, [r0, #0]
 800c22c:	1a10      	subs	r0, r2, r0
 800c22e:	4770      	bx	lr

0800c230 <ucdr_buffer_remaining>:
 800c230:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c234:	1a10      	subs	r0, r2, r0
 800c236:	4770      	bx	lr

0800c238 <ucdr_check_final_buffer_behavior_array>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	7d83      	ldrb	r3, [r0, #22]
 800c23c:	b963      	cbnz	r3, 800c258 <ucdr_check_final_buffer_behavior_array+0x20>
 800c23e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c242:	429a      	cmp	r2, r3
 800c244:	4604      	mov	r4, r0
 800c246:	460d      	mov	r5, r1
 800c248:	d308      	bcc.n	800c25c <ucdr_check_final_buffer_behavior_array+0x24>
 800c24a:	b139      	cbz	r1, 800c25c <ucdr_check_final_buffer_behavior_array+0x24>
 800c24c:	6983      	ldr	r3, [r0, #24]
 800c24e:	b163      	cbz	r3, 800c26a <ucdr_check_final_buffer_behavior_array+0x32>
 800c250:	69c1      	ldr	r1, [r0, #28]
 800c252:	4798      	blx	r3
 800c254:	75a0      	strb	r0, [r4, #22]
 800c256:	b108      	cbz	r0, 800c25c <ucdr_check_final_buffer_behavior_array+0x24>
 800c258:	2000      	movs	r0, #0
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	4620      	mov	r0, r4
 800c25e:	f7ff ffe7 	bl	800c230 <ucdr_buffer_remaining>
 800c262:	42a8      	cmp	r0, r5
 800c264:	bf28      	it	cs
 800c266:	4628      	movcs	r0, r5
 800c268:	bd38      	pop	{r3, r4, r5, pc}
 800c26a:	2301      	movs	r3, #1
 800c26c:	7583      	strb	r3, [r0, #22]
 800c26e:	e7f3      	b.n	800c258 <ucdr_check_final_buffer_behavior_array+0x20>

0800c270 <ucdr_advance_buffer>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4604      	mov	r4, r0
 800c274:	460d      	mov	r5, r1
 800c276:	f7ff ff57 	bl	800c128 <ucdr_check_buffer_available_for>
 800c27a:	b178      	cbz	r0, 800c29c <ucdr_advance_buffer+0x2c>
 800c27c:	6923      	ldr	r3, [r4, #16]
 800c27e:	68a2      	ldr	r2, [r4, #8]
 800c280:	442b      	add	r3, r5
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	2301      	movs	r3, #1
 800c286:	442a      	add	r2, r5
 800c288:	7563      	strb	r3, [r4, #21]
 800c28a:	60a2      	str	r2, [r4, #8]
 800c28c:	bd38      	pop	{r3, r4, r5, pc}
 800c28e:	68a2      	ldr	r2, [r4, #8]
 800c290:	6923      	ldr	r3, [r4, #16]
 800c292:	4402      	add	r2, r0
 800c294:	4403      	add	r3, r0
 800c296:	1a2d      	subs	r5, r5, r0
 800c298:	60a2      	str	r2, [r4, #8]
 800c29a:	6123      	str	r3, [r4, #16]
 800c29c:	4629      	mov	r1, r5
 800c29e:	2201      	movs	r2, #1
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f7ff ffc9 	bl	800c238 <ucdr_check_final_buffer_behavior_array>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d1f1      	bne.n	800c28e <ucdr_advance_buffer+0x1e>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	7563      	strb	r3, [r4, #21]
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}

0800c2b0 <rcl_get_zero_initialized_init_options>:
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	4770      	bx	lr

0800c2b4 <rcl_init_options_init>:
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b8:	b097      	sub	sp, #92	@ 0x5c
 800c2ba:	ae1d      	add	r6, sp, #116	@ 0x74
 800c2bc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d058      	beq.n	800c376 <rcl_init_options_init+0xc2>
 800c2c4:	6803      	ldr	r3, [r0, #0]
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	b133      	cbz	r3, 800c2d8 <rcl_init_options_init+0x24>
 800c2ca:	2464      	movs	r4, #100	@ 0x64
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	b017      	add	sp, #92	@ 0x5c
 800c2d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c2d4:	b004      	add	sp, #16
 800c2d6:	4770      	bx	lr
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f001 f92f 	bl	800d53c <rcutils_allocator_is_valid>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d049      	beq.n	800c376 <rcl_init_options_init+0xc2>
 800c2e2:	46b4      	mov	ip, r6
 800c2e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2e8:	ac11      	add	r4, sp, #68	@ 0x44
 800c2ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2ec:	f8dc 3000 	ldr.w	r3, [ip]
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c2f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2f6:	2050      	movs	r0, #80	@ 0x50
 800c2f8:	4798      	blx	r3
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	6028      	str	r0, [r5, #0]
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d03b      	beq.n	800c37a <rcl_init_options_init+0xc6>
 800c302:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c306:	4686      	mov	lr, r0
 800c308:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c30c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c310:	f8dc 3000 	ldr.w	r3, [ip]
 800c314:	f8ce 3000 	str.w	r3, [lr]
 800c318:	a802      	add	r0, sp, #8
 800c31a:	f001 f9a1 	bl	800d660 <rmw_get_zero_initialized_init_options>
 800c31e:	f10d 0e08 	add.w	lr, sp, #8
 800c322:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c326:	f104 0c18 	add.w	ip, r4, #24
 800c32a:	682f      	ldr	r7, [r5, #0]
 800c32c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c330:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c334:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c338:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c33c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c340:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c344:	ac20      	add	r4, sp, #128	@ 0x80
 800c346:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c34a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c34e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c352:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c356:	f107 0018 	add.w	r0, r7, #24
 800c35a:	f001 f9af 	bl	800d6bc <rmw_init_options_init>
 800c35e:	4604      	mov	r4, r0
 800c360:	2800      	cmp	r0, #0
 800c362:	d0b3      	beq.n	800c2cc <rcl_init_options_init+0x18>
 800c364:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c366:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c368:	6828      	ldr	r0, [r5, #0]
 800c36a:	4798      	blx	r3
 800c36c:	4620      	mov	r0, r4
 800c36e:	f005 ff19 	bl	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c372:	4604      	mov	r4, r0
 800c374:	e7aa      	b.n	800c2cc <rcl_init_options_init+0x18>
 800c376:	240b      	movs	r4, #11
 800c378:	e7a8      	b.n	800c2cc <rcl_init_options_init+0x18>
 800c37a:	240a      	movs	r4, #10
 800c37c:	e7a6      	b.n	800c2cc <rcl_init_options_init+0x18>
 800c37e:	bf00      	nop

0800c380 <rcl_init_options_fini>:
 800c380:	b530      	push	{r4, r5, lr}
 800c382:	b087      	sub	sp, #28
 800c384:	b1f0      	cbz	r0, 800c3c4 <rcl_init_options_fini+0x44>
 800c386:	6803      	ldr	r3, [r0, #0]
 800c388:	4604      	mov	r4, r0
 800c38a:	b1db      	cbz	r3, 800c3c4 <rcl_init_options_fini+0x44>
 800c38c:	469c      	mov	ip, r3
 800c38e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c392:	f10d 0e04 	add.w	lr, sp, #4
 800c396:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c39a:	f8dc 3000 	ldr.w	r3, [ip]
 800c39e:	f8ce 3000 	str.w	r3, [lr]
 800c3a2:	a801      	add	r0, sp, #4
 800c3a4:	f001 f8ca 	bl	800d53c <rcutils_allocator_is_valid>
 800c3a8:	b160      	cbz	r0, 800c3c4 <rcl_init_options_fini+0x44>
 800c3aa:	6820      	ldr	r0, [r4, #0]
 800c3ac:	3018      	adds	r0, #24
 800c3ae:	f001 fa35 	bl	800d81c <rmw_init_options_fini>
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	b950      	cbnz	r0, 800c3cc <rcl_init_options_fini+0x4c>
 800c3b6:	6820      	ldr	r0, [r4, #0]
 800c3b8:	9b02      	ldr	r3, [sp, #8]
 800c3ba:	9905      	ldr	r1, [sp, #20]
 800c3bc:	4798      	blx	r3
 800c3be:	4628      	mov	r0, r5
 800c3c0:	b007      	add	sp, #28
 800c3c2:	bd30      	pop	{r4, r5, pc}
 800c3c4:	250b      	movs	r5, #11
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	b007      	add	sp, #28
 800c3ca:	bd30      	pop	{r4, r5, pc}
 800c3cc:	f005 feea 	bl	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	e7f8      	b.n	800c3c6 <rcl_init_options_fini+0x46>

0800c3d4 <rcl_init_options_copy>:
 800c3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d8:	b094      	sub	sp, #80	@ 0x50
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d058      	beq.n	800c490 <rcl_init_options_copy+0xbc>
 800c3de:	4604      	mov	r4, r0
 800c3e0:	6800      	ldr	r0, [r0, #0]
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d054      	beq.n	800c490 <rcl_init_options_copy+0xbc>
 800c3e6:	460e      	mov	r6, r1
 800c3e8:	f001 f8a8 	bl	800d53c <rcutils_allocator_is_valid>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	d04f      	beq.n	800c490 <rcl_init_options_copy+0xbc>
 800c3f0:	2e00      	cmp	r6, #0
 800c3f2:	d04d      	beq.n	800c490 <rcl_init_options_copy+0xbc>
 800c3f4:	6833      	ldr	r3, [r6, #0]
 800c3f6:	b123      	cbz	r3, 800c402 <rcl_init_options_copy+0x2e>
 800c3f8:	2464      	movs	r4, #100	@ 0x64
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	b014      	add	sp, #80	@ 0x50
 800c3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c402:	6827      	ldr	r7, [r4, #0]
 800c404:	46bc      	mov	ip, r7
 800c406:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c40a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c40c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c40e:	f8dc 3000 	ldr.w	r3, [ip]
 800c412:	f8d7 8000 	ldr.w	r8, [r7]
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	4619      	mov	r1, r3
 800c41a:	2050      	movs	r0, #80	@ 0x50
 800c41c:	47c0      	blx	r8
 800c41e:	4605      	mov	r5, r0
 800c420:	6030      	str	r0, [r6, #0]
 800c422:	b3d0      	cbz	r0, 800c49a <rcl_init_options_copy+0xc6>
 800c424:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c428:	4686      	mov	lr, r0
 800c42a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c42e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c432:	f8dc 3000 	ldr.w	r3, [ip]
 800c436:	f8ce 3000 	str.w	r3, [lr]
 800c43a:	4668      	mov	r0, sp
 800c43c:	f001 f910 	bl	800d660 <rmw_get_zero_initialized_init_options>
 800c440:	46ee      	mov	lr, sp
 800c442:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c446:	f105 0c18 	add.w	ip, r5, #24
 800c44a:	6824      	ldr	r4, [r4, #0]
 800c44c:	6835      	ldr	r5, [r6, #0]
 800c44e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c452:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c456:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c45a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c45e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c462:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c466:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c46a:	f104 0018 	add.w	r0, r4, #24
 800c46e:	f105 0118 	add.w	r1, r5, #24
 800c472:	f001 f98b 	bl	800d78c <rmw_init_options_copy>
 800c476:	4604      	mov	r4, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d0be      	beq.n	800c3fa <rcl_init_options_copy+0x26>
 800c47c:	f001 f86c 	bl	800d558 <rcutils_get_error_string>
 800c480:	f001 f882 	bl	800d588 <rcutils_reset_error>
 800c484:	4630      	mov	r0, r6
 800c486:	f7ff ff7b 	bl	800c380 <rcl_init_options_fini>
 800c48a:	b140      	cbz	r0, 800c49e <rcl_init_options_copy+0xca>
 800c48c:	4604      	mov	r4, r0
 800c48e:	e7b4      	b.n	800c3fa <rcl_init_options_copy+0x26>
 800c490:	240b      	movs	r4, #11
 800c492:	4620      	mov	r0, r4
 800c494:	b014      	add	sp, #80	@ 0x50
 800c496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49a:	240a      	movs	r4, #10
 800c49c:	e7ad      	b.n	800c3fa <rcl_init_options_copy+0x26>
 800c49e:	4620      	mov	r0, r4
 800c4a0:	b014      	add	sp, #80	@ 0x50
 800c4a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a6:	f005 be7d 	b.w	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c4aa:	bf00      	nop

0800c4ac <rcl_init_options_set_domain_id>:
 800c4ac:	b120      	cbz	r0, 800c4b8 <rcl_init_options_set_domain_id+0xc>
 800c4ae:	6803      	ldr	r3, [r0, #0]
 800c4b0:	b113      	cbz	r3, 800c4b8 <rcl_init_options_set_domain_id+0xc>
 800c4b2:	6259      	str	r1, [r3, #36]	@ 0x24
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	4770      	bx	lr
 800c4b8:	200b      	movs	r0, #11
 800c4ba:	4770      	bx	lr

0800c4bc <rcl_get_zero_initialized_publisher>:
 800c4bc:	4b01      	ldr	r3, [pc, #4]	@ (800c4c4 <rcl_get_zero_initialized_publisher+0x8>)
 800c4be:	6818      	ldr	r0, [r3, #0]
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	08018fbc 	.word	0x08018fbc

0800c4c8 <rcl_publisher_init>:
 800c4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4cc:	b088      	sub	sp, #32
 800c4ce:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c4d0:	2d00      	cmp	r5, #0
 800c4d2:	d069      	beq.n	800c5a8 <rcl_publisher_init+0xe0>
 800c4d4:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c4d8:	4604      	mov	r4, r0
 800c4da:	4648      	mov	r0, r9
 800c4dc:	460e      	mov	r6, r1
 800c4de:	4690      	mov	r8, r2
 800c4e0:	461f      	mov	r7, r3
 800c4e2:	f001 f82b 	bl	800d53c <rcutils_allocator_is_valid>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d05e      	beq.n	800c5a8 <rcl_publisher_init+0xe0>
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	d05c      	beq.n	800c5a8 <rcl_publisher_init+0xe0>
 800c4ee:	f8d4 a000 	ldr.w	sl, [r4]
 800c4f2:	f1ba 0f00 	cmp.w	sl, #0
 800c4f6:	d004      	beq.n	800c502 <rcl_publisher_init+0x3a>
 800c4f8:	2764      	movs	r7, #100	@ 0x64
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	b008      	add	sp, #32
 800c4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c502:	4630      	mov	r0, r6
 800c504:	f006 f948 	bl	8012798 <rcl_node_is_valid>
 800c508:	2800      	cmp	r0, #0
 800c50a:	d052      	beq.n	800c5b2 <rcl_publisher_init+0xea>
 800c50c:	f1b8 0f00 	cmp.w	r8, #0
 800c510:	d04a      	beq.n	800c5a8 <rcl_publisher_init+0xe0>
 800c512:	2f00      	cmp	r7, #0
 800c514:	d048      	beq.n	800c5a8 <rcl_publisher_init+0xe0>
 800c516:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c51a:	aa07      	add	r2, sp, #28
 800c51c:	9205      	str	r2, [sp, #20]
 800c51e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c526:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c52a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c52e:	4639      	mov	r1, r7
 800c530:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c534:	4630      	mov	r0, r6
 800c536:	f006 f983 	bl	8012840 <rcl_node_resolve_name>
 800c53a:	4607      	mov	r7, r0
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d14f      	bne.n	800c5e0 <rcl_publisher_init+0x118>
 800c540:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c542:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c544:	20c8      	movs	r0, #200	@ 0xc8
 800c546:	4798      	blx	r3
 800c548:	6020      	str	r0, [r4, #0]
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d04e      	beq.n	800c5ec <rcl_publisher_init+0x124>
 800c54e:	4630      	mov	r0, r6
 800c550:	f006 f944 	bl	80127dc <rcl_node_get_rmw_handle>
 800c554:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	9a07      	ldr	r2, [sp, #28]
 800c55c:	6827      	ldr	r7, [r4, #0]
 800c55e:	462b      	mov	r3, r5
 800c560:	4641      	mov	r1, r8
 800c562:	f001 fc83 	bl	800de6c <rmw_create_publisher>
 800c566:	6823      	ldr	r3, [r4, #0]
 800c568:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c56c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c570:	b370      	cbz	r0, 800c5d0 <rcl_publisher_init+0x108>
 800c572:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c576:	f001 fd57 	bl	800e028 <rmw_publisher_get_actual_qos>
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	4607      	mov	r7, r0
 800c57e:	b9d0      	cbnz	r0, 800c5b6 <rcl_publisher_init+0xee>
 800c580:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c584:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c588:	4629      	mov	r1, r5
 800c58a:	2270      	movs	r2, #112	@ 0x70
 800c58c:	4618      	mov	r0, r3
 800c58e:	f00b fcdc 	bl	8017f4a <memcpy>
 800c592:	6832      	ldr	r2, [r6, #0]
 800c594:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c598:	9807      	ldr	r0, [sp, #28]
 800c59a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c59c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c59e:	4798      	blx	r3
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	b008      	add	sp, #32
 800c5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a8:	270b      	movs	r7, #11
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	b008      	add	sp, #32
 800c5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b2:	27c8      	movs	r7, #200	@ 0xc8
 800c5b4:	e7a1      	b.n	800c4fa <rcl_publisher_init+0x32>
 800c5b6:	b18b      	cbz	r3, 800c5dc <rcl_publisher_init+0x114>
 800c5b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c5bc:	b142      	cbz	r2, 800c5d0 <rcl_publisher_init+0x108>
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f006 f90c 	bl	80127dc <rcl_node_get_rmw_handle>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c5ca:	f001 fd3d 	bl	800e048 <rmw_destroy_publisher>
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c5d2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	4790      	blx	r2
 800c5d8:	2300      	movs	r3, #0
 800c5da:	6023      	str	r3, [r4, #0]
 800c5dc:	2701      	movs	r7, #1
 800c5de:	e7db      	b.n	800c598 <rcl_publisher_init+0xd0>
 800c5e0:	2867      	cmp	r0, #103	@ 0x67
 800c5e2:	d0d9      	beq.n	800c598 <rcl_publisher_init+0xd0>
 800c5e4:	2869      	cmp	r0, #105	@ 0x69
 800c5e6:	d003      	beq.n	800c5f0 <rcl_publisher_init+0x128>
 800c5e8:	280a      	cmp	r0, #10
 800c5ea:	d1f7      	bne.n	800c5dc <rcl_publisher_init+0x114>
 800c5ec:	270a      	movs	r7, #10
 800c5ee:	e7d3      	b.n	800c598 <rcl_publisher_init+0xd0>
 800c5f0:	2767      	movs	r7, #103	@ 0x67
 800c5f2:	e7d1      	b.n	800c598 <rcl_publisher_init+0xd0>

0800c5f4 <rcl_publisher_get_default_options>:
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	4d14      	ldr	r5, [pc, #80]	@ (800c648 <rcl_publisher_get_default_options+0x54>)
 800c5f8:	4914      	ldr	r1, [pc, #80]	@ (800c64c <rcl_publisher_get_default_options+0x58>)
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	2250      	movs	r2, #80	@ 0x50
 800c600:	4628      	mov	r0, r5
 800c602:	f00b fca2 	bl	8017f4a <memcpy>
 800c606:	a802      	add	r0, sp, #8
 800c608:	f000 ff8a 	bl	800d520 <rcutils_get_default_allocator>
 800c60c:	f10d 0c08 	add.w	ip, sp, #8
 800c610:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c614:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c618:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c61c:	466e      	mov	r6, sp
 800c61e:	f8dc 3000 	ldr.w	r3, [ip]
 800c622:	f8ce 3000 	str.w	r3, [lr]
 800c626:	4630      	mov	r0, r6
 800c628:	f001 f82a 	bl	800d680 <rmw_get_default_publisher_options>
 800c62c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c630:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c634:	e883 0003 	stmia.w	r3, {r0, r1}
 800c638:	2270      	movs	r2, #112	@ 0x70
 800c63a:	4629      	mov	r1, r5
 800c63c:	4620      	mov	r0, r4
 800c63e:	f00b fc84 	bl	8017f4a <memcpy>
 800c642:	4620      	mov	r0, r4
 800c644:	b008      	add	sp, #32
 800c646:	bd70      	pop	{r4, r5, r6, pc}
 800c648:	20006440 	.word	0x20006440
 800c64c:	08018fc0 	.word	0x08018fc0

0800c650 <rcl_publish>:
 800c650:	b1f8      	cbz	r0, 800c692 <rcl_publish+0x42>
 800c652:	6803      	ldr	r3, [r0, #0]
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	4604      	mov	r4, r0
 800c658:	b1b3      	cbz	r3, 800c688 <rcl_publish+0x38>
 800c65a:	4616      	mov	r6, r2
 800c65c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c660:	b192      	cbz	r2, 800c688 <rcl_publish+0x38>
 800c662:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c666:	460d      	mov	r5, r1
 800c668:	f005 fdba 	bl	80121e0 <rcl_context_is_valid>
 800c66c:	b160      	cbz	r0, 800c688 <rcl_publish+0x38>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c674:	b140      	cbz	r0, 800c688 <rcl_publish+0x38>
 800c676:	b155      	cbz	r5, 800c68e <rcl_publish+0x3e>
 800c678:	4632      	mov	r2, r6
 800c67a:	4629      	mov	r1, r5
 800c67c:	f001 fb96 	bl	800ddac <rmw_publish>
 800c680:	3800      	subs	r0, #0
 800c682:	bf18      	it	ne
 800c684:	2001      	movne	r0, #1
 800c686:	bd70      	pop	{r4, r5, r6, pc}
 800c688:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c68c:	bd70      	pop	{r4, r5, r6, pc}
 800c68e:	200b      	movs	r0, #11
 800c690:	bd70      	pop	{r4, r5, r6, pc}
 800c692:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c696:	4770      	bx	lr

0800c698 <rcl_publisher_is_valid>:
 800c698:	b1a0      	cbz	r0, 800c6c4 <rcl_publisher_is_valid+0x2c>
 800c69a:	6803      	ldr	r3, [r0, #0]
 800c69c:	b510      	push	{r4, lr}
 800c69e:	4604      	mov	r4, r0
 800c6a0:	b173      	cbz	r3, 800c6c0 <rcl_publisher_is_valid+0x28>
 800c6a2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c6a6:	b15a      	cbz	r2, 800c6c0 <rcl_publisher_is_valid+0x28>
 800c6a8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c6ac:	f005 fd98 	bl	80121e0 <rcl_context_is_valid>
 800c6b0:	b130      	cbz	r0, 800c6c0 <rcl_publisher_is_valid+0x28>
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c6b8:	3800      	subs	r0, #0
 800c6ba:	bf18      	it	ne
 800c6bc:	2001      	movne	r0, #1
 800c6be:	bd10      	pop	{r4, pc}
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	4770      	bx	lr

0800c6c8 <rcl_publisher_is_valid_except_context>:
 800c6c8:	b130      	cbz	r0, 800c6d8 <rcl_publisher_is_valid_except_context+0x10>
 800c6ca:	6800      	ldr	r0, [r0, #0]
 800c6cc:	b120      	cbz	r0, 800c6d8 <rcl_publisher_is_valid_except_context+0x10>
 800c6ce:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c6d2:	3800      	subs	r0, #0
 800c6d4:	bf18      	it	ne
 800c6d6:	2001      	movne	r0, #1
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop

0800c6dc <_rclc_check_for_new_data>:
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d046      	beq.n	800c76e <_rclc_check_for_new_data+0x92>
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	7802      	ldrb	r2, [r0, #0]
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2a0a      	cmp	r2, #10
 800c6ea:	d842      	bhi.n	800c772 <_rclc_check_for_new_data+0x96>
 800c6ec:	e8df f002 	tbb	[pc, r2]
 800c6f0:	14181212 	.word	0x14181212
 800c6f4:	06060614 	.word	0x06060614
 800c6f8:	2e1a      	.short	0x2e1a
 800c6fa:	16          	.byte	0x16
 800c6fb:	00          	.byte	0x00
 800c6fc:	6a0a      	ldr	r2, [r1, #32]
 800c6fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c700:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c704:	2000      	movs	r0, #0
 800c706:	1a12      	subs	r2, r2, r0
 800c708:	bf18      	it	ne
 800c70a:	2201      	movne	r2, #1
 800c70c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c710:	b004      	add	sp, #16
 800c712:	bd10      	pop	{r4, pc}
 800c714:	680a      	ldr	r2, [r1, #0]
 800c716:	e7f2      	b.n	800c6fe <_rclc_check_for_new_data+0x22>
 800c718:	698a      	ldr	r2, [r1, #24]
 800c71a:	e7f0      	b.n	800c6fe <_rclc_check_for_new_data+0x22>
 800c71c:	688a      	ldr	r2, [r1, #8]
 800c71e:	e7ee      	b.n	800c6fe <_rclc_check_for_new_data+0x22>
 800c720:	690a      	ldr	r2, [r1, #16]
 800c722:	e7ec      	b.n	800c6fe <_rclc_check_for_new_data+0x22>
 800c724:	685c      	ldr	r4, [r3, #4]
 800c726:	4608      	mov	r0, r1
 800c728:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c72c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c730:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c734:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c73e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c742:	f104 0110 	add.w	r1, r4, #16
 800c746:	f007 fe77 	bl	8014438 <rcl_action_client_wait_set_get_entities_ready>
 800c74a:	e7e1      	b.n	800c710 <_rclc_check_for_new_data+0x34>
 800c74c:	685c      	ldr	r4, [r3, #4]
 800c74e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c752:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c756:	e9cd 3200 	strd	r3, r2, [sp]
 800c75a:	4608      	mov	r0, r1
 800c75c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c760:	f104 0220 	add.w	r2, r4, #32
 800c764:	f104 0110 	add.w	r1, r4, #16
 800c768:	f008 f87e 	bl	8014868 <rcl_action_server_wait_set_get_entities_ready>
 800c76c:	e7d0      	b.n	800c710 <_rclc_check_for_new_data+0x34>
 800c76e:	200b      	movs	r0, #11
 800c770:	4770      	bx	lr
 800c772:	2001      	movs	r0, #1
 800c774:	e7cc      	b.n	800c710 <_rclc_check_for_new_data+0x34>
 800c776:	bf00      	nop

0800c778 <_rclc_take_new_data>:
 800c778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77a:	b09b      	sub	sp, #108	@ 0x6c
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f000 8088 	beq.w	800c892 <_rclc_take_new_data+0x11a>
 800c782:	7803      	ldrb	r3, [r0, #0]
 800c784:	4604      	mov	r4, r0
 800c786:	2b0a      	cmp	r3, #10
 800c788:	f200 8167 	bhi.w	800ca5a <_rclc_take_new_data+0x2e2>
 800c78c:	e8df f003 	tbb	[pc, r3]
 800c790:	44152d2d 	.word	0x44152d2d
 800c794:	19191944 	.word	0x19191944
 800c798:	065a      	.short	0x065a
 800c79a:	15          	.byte	0x15
 800c79b:	00          	.byte	0x00
 800c79c:	6840      	ldr	r0, [r0, #4]
 800c79e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f040 80b2 	bne.w	800c90c <_rclc_take_new_data+0x194>
 800c7a8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f040 80e4 	bne.w	800c97a <_rclc_take_new_data+0x202>
 800c7b2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d16f      	bne.n	800c89a <_rclc_take_new_data+0x122>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	4628      	mov	r0, r5
 800c7be:	b01b      	add	sp, #108	@ 0x6c
 800c7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c7c4:	6a0b      	ldr	r3, [r1, #32]
 800c7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0f5      	beq.n	800c7ba <_rclc_take_new_data+0x42>
 800c7ce:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c7d2:	f104 0110 	add.w	r1, r4, #16
 800c7d6:	f006 f9dd 	bl	8012b94 <rcl_take_request>
 800c7da:	4605      	mov	r5, r0
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d0ec      	beq.n	800c7ba <_rclc_take_new_data+0x42>
 800c7e0:	f240 2359 	movw	r3, #601	@ 0x259
 800c7e4:	4298      	cmp	r0, r3
 800c7e6:	d013      	beq.n	800c810 <_rclc_take_new_data+0x98>
 800c7e8:	e029      	b.n	800c83e <_rclc_take_new_data+0xc6>
 800c7ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c7ec:	680b      	ldr	r3, [r1, #0]
 800c7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0e1      	beq.n	800c7ba <_rclc_take_new_data+0x42>
 800c7f6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	aa0a      	add	r2, sp, #40	@ 0x28
 800c7fe:	f006 fa2b 	bl	8012c58 <rcl_take>
 800c802:	4605      	mov	r5, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	d0d9      	beq.n	800c7bc <_rclc_take_new_data+0x44>
 800c808:	f240 1391 	movw	r3, #401	@ 0x191
 800c80c:	4298      	cmp	r0, r3
 800c80e:	d116      	bne.n	800c83e <_rclc_take_new_data+0xc6>
 800c810:	2300      	movs	r3, #0
 800c812:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c816:	e7d1      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800c818:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c81a:	698b      	ldr	r3, [r1, #24]
 800c81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d0ca      	beq.n	800c7ba <_rclc_take_new_data+0x42>
 800c824:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c828:	f104 0110 	add.w	r1, r4, #16
 800c82c:	f005 fc68 	bl	8012100 <rcl_take_response>
 800c830:	4605      	mov	r5, r0
 800c832:	2800      	cmp	r0, #0
 800c834:	d0c1      	beq.n	800c7ba <_rclc_take_new_data+0x42>
 800c836:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c83a:	4298      	cmp	r0, r3
 800c83c:	d0be      	beq.n	800c7bc <_rclc_take_new_data+0x44>
 800c83e:	f000 fea3 	bl	800d588 <rcutils_reset_error>
 800c842:	e7bb      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800c844:	6840      	ldr	r0, [r0, #4]
 800c846:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d17d      	bne.n	800c94a <_rclc_take_new_data+0x1d2>
 800c84e:	69c3      	ldr	r3, [r0, #28]
 800c850:	b11b      	cbz	r3, 800c85a <_rclc_take_new_data+0xe2>
 800c852:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c856:	2b00      	cmp	r3, #0
 800c858:	d144      	bne.n	800c8e4 <_rclc_take_new_data+0x16c>
 800c85a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f040 80ac 	bne.w	800c9bc <_rclc_take_new_data+0x244>
 800c864:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0a6      	beq.n	800c7ba <_rclc_take_new_data+0x42>
 800c86c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c86e:	a90a      	add	r1, sp, #40	@ 0x28
 800c870:	3010      	adds	r0, #16
 800c872:	f007 fcb9 	bl	80141e8 <rcl_action_take_result_response>
 800c876:	4605      	mov	r5, r0
 800c878:	2800      	cmp	r0, #0
 800c87a:	d1e0      	bne.n	800c83e <_rclc_take_new_data+0xc6>
 800c87c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c880:	6860      	ldr	r0, [r4, #4]
 800c882:	f008 f915 	bl	8014ab0 <rclc_action_find_handle_by_result_request_sequence_number>
 800c886:	2800      	cmp	r0, #0
 800c888:	d098      	beq.n	800c7bc <_rclc_take_new_data+0x44>
 800c88a:	2301      	movs	r3, #1
 800c88c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c890:	e794      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800c892:	250b      	movs	r5, #11
 800c894:	4628      	mov	r0, r5
 800c896:	b01b      	add	sp, #108	@ 0x6c
 800c898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c89a:	ae04      	add	r6, sp, #16
 800c89c:	aa0a      	add	r2, sp, #40	@ 0x28
 800c89e:	3010      	adds	r0, #16
 800c8a0:	4631      	mov	r1, r6
 800c8a2:	f007 ff15 	bl	80146d0 <rcl_action_take_cancel_request>
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d1c8      	bne.n	800c83e <_rclc_take_new_data+0xc6>
 800c8ac:	6860      	ldr	r0, [r4, #4]
 800c8ae:	a90a      	add	r1, sp, #40	@ 0x28
 800c8b0:	f008 f8bc 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 800c8b4:	4607      	mov	r7, r0
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	f000 80bb 	beq.w	800ca32 <_rclc_take_new_data+0x2ba>
 800c8bc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	f008 f83d 	bl	8014940 <rcl_action_transition_goal_state>
 800c8c6:	2803      	cmp	r0, #3
 800c8c8:	4684      	mov	ip, r0
 800c8ca:	f040 80a7 	bne.w	800ca1c <_rclc_take_new_data+0x2a4>
 800c8ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c8d0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c8d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c8da:	e884 0003 	stmia.w	r4, {r0, r1}
 800c8de:	f887 c008 	strb.w	ip, [r7, #8]
 800c8e2:	e76b      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800c8e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c8e6:	3010      	adds	r0, #16
 800c8e8:	f007 fcfe 	bl	80142e8 <rcl_action_take_feedback>
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d1a5      	bne.n	800c83e <_rclc_take_new_data+0xc6>
 800c8f2:	6860      	ldr	r0, [r4, #4]
 800c8f4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c8f6:	f008 f899 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	f000 80a3 	beq.w	800ca48 <_rclc_take_new_data+0x2d0>
 800c902:	2201      	movs	r2, #1
 800c904:	6860      	ldr	r0, [r4, #4]
 800c906:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c90a:	e7a6      	b.n	800c85a <_rclc_take_new_data+0xe2>
 800c90c:	f008 f868 	bl	80149e0 <rclc_action_take_goal_handle>
 800c910:	4606      	mov	r6, r0
 800c912:	6860      	ldr	r0, [r4, #4]
 800c914:	2e00      	cmp	r6, #0
 800c916:	f43f af47 	beq.w	800c7a8 <_rclc_take_new_data+0x30>
 800c91a:	6070      	str	r0, [r6, #4]
 800c91c:	69f2      	ldr	r2, [r6, #28]
 800c91e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c922:	3010      	adds	r0, #16
 800c924:	f007 fe1c 	bl	8014560 <rcl_action_take_goal_request>
 800c928:	4605      	mov	r5, r0
 800c92a:	2800      	cmp	r0, #0
 800c92c:	f040 808e 	bne.w	800ca4c <_rclc_take_new_data+0x2d4>
 800c930:	69f7      	ldr	r7, [r6, #28]
 800c932:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c934:	7235      	strb	r5, [r6, #8]
 800c936:	f8c6 0009 	str.w	r0, [r6, #9]
 800c93a:	f8c6 100d 	str.w	r1, [r6, #13]
 800c93e:	6860      	ldr	r0, [r4, #4]
 800c940:	f8c6 2011 	str.w	r2, [r6, #17]
 800c944:	f8c6 3015 	str.w	r3, [r6, #21]
 800c948:	e72e      	b.n	800c7a8 <_rclc_take_new_data+0x30>
 800c94a:	aa04      	add	r2, sp, #16
 800c94c:	a90a      	add	r1, sp, #40	@ 0x28
 800c94e:	3010      	adds	r0, #16
 800c950:	f007 fbd2 	bl	80140f8 <rcl_action_take_goal_response>
 800c954:	4605      	mov	r5, r0
 800c956:	2800      	cmp	r0, #0
 800c958:	f47f af71 	bne.w	800c83e <_rclc_take_new_data+0xc6>
 800c95c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c960:	6860      	ldr	r0, [r4, #4]
 800c962:	f008 f893 	bl	8014a8c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c966:	b130      	cbz	r0, 800c976 <_rclc_take_new_data+0x1fe>
 800c968:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c96c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c970:	2201      	movs	r2, #1
 800c972:	f880 2020 	strb.w	r2, [r0, #32]
 800c976:	6860      	ldr	r0, [r4, #4]
 800c978:	e769      	b.n	800c84e <_rclc_take_new_data+0xd6>
 800c97a:	aa04      	add	r2, sp, #16
 800c97c:	3010      	adds	r0, #16
 800c97e:	a90a      	add	r1, sp, #40	@ 0x28
 800c980:	f007 fe66 	bl	8014650 <rcl_action_take_result_request>
 800c984:	4605      	mov	r5, r0
 800c986:	2800      	cmp	r0, #0
 800c988:	f47f af59 	bne.w	800c83e <_rclc_take_new_data+0xc6>
 800c98c:	6860      	ldr	r0, [r4, #4]
 800c98e:	a904      	add	r1, sp, #16
 800c990:	f008 f84c 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 800c994:	4607      	mov	r7, r0
 800c996:	b160      	cbz	r0, 800c9b2 <_rclc_take_new_data+0x23a>
 800c998:	ad0a      	add	r5, sp, #40	@ 0x28
 800c99a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c99e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c9a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c9a6:	f04f 0c02 	mov.w	ip, #2
 800c9aa:	e886 0003 	stmia.w	r6, {r0, r1}
 800c9ae:	f887 c008 	strb.w	ip, [r7, #8]
 800c9b2:	6860      	ldr	r0, [r4, #4]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c9ba:	e6fa      	b.n	800c7b2 <_rclc_take_new_data+0x3a>
 800c9bc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c9c0:	a90a      	add	r1, sp, #40	@ 0x28
 800c9c2:	3010      	adds	r0, #16
 800c9c4:	f007 fc50 	bl	8014268 <rcl_action_take_cancel_response>
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	f47f af37 	bne.w	800c83e <_rclc_take_new_data+0xc6>
 800c9d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c9d4:	6860      	ldr	r0, [r4, #4]
 800c9d6:	f008 f87d 	bl	8014ad4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c9da:	4606      	mov	r6, r0
 800c9dc:	6860      	ldr	r0, [r4, #4]
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	f43f af40 	beq.w	800c864 <_rclc_take_new_data+0xec>
 800c9e4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c9e6:	2701      	movs	r7, #1
 800c9e8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f43f af3a 	beq.w	800c864 <_rclc_take_new_data+0xec>
 800c9f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c9f2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c9f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c9fa:	f008 f817 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 800c9fe:	b138      	cbz	r0, 800ca10 <_rclc_take_new_data+0x298>
 800ca00:	6860      	ldr	r0, [r4, #4]
 800ca02:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ca04:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ca08:	3501      	adds	r5, #1
 800ca0a:	42ab      	cmp	r3, r5
 800ca0c:	d8f0      	bhi.n	800c9f0 <_rclc_take_new_data+0x278>
 800ca0e:	e729      	b.n	800c864 <_rclc_take_new_data+0xec>
 800ca10:	6860      	ldr	r0, [r4, #4]
 800ca12:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ca14:	3501      	adds	r5, #1
 800ca16:	42ab      	cmp	r3, r5
 800ca18:	d8ea      	bhi.n	800c9f0 <_rclc_take_new_data+0x278>
 800ca1a:	e723      	b.n	800c864 <_rclc_take_new_data+0xec>
 800ca1c:	ab06      	add	r3, sp, #24
 800ca1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ca24:	2103      	movs	r1, #3
 800ca26:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ca2a:	6860      	ldr	r0, [r4, #4]
 800ca2c:	f008 f8c8 	bl	8014bc0 <rclc_action_server_goal_cancel_reject>
 800ca30:	e6c4      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800ca32:	ab06      	add	r3, sp, #24
 800ca34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca36:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ca3a:	2102      	movs	r1, #2
 800ca3c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ca40:	6860      	ldr	r0, [r4, #4]
 800ca42:	f008 f8bd 	bl	8014bc0 <rclc_action_server_goal_cancel_reject>
 800ca46:	e6b9      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800ca48:	6860      	ldr	r0, [r4, #4]
 800ca4a:	e706      	b.n	800c85a <_rclc_take_new_data+0xe2>
 800ca4c:	6860      	ldr	r0, [r4, #4]
 800ca4e:	4631      	mov	r1, r6
 800ca50:	f007 ffd6 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 800ca54:	f000 fd98 	bl	800d588 <rcutils_reset_error>
 800ca58:	e6b0      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800ca5a:	2501      	movs	r5, #1
 800ca5c:	e6ae      	b.n	800c7bc <_rclc_take_new_data+0x44>
 800ca5e:	bf00      	nop

0800ca60 <_rclc_execute.part.0>:
 800ca60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca62:	7803      	ldrb	r3, [r0, #0]
 800ca64:	b087      	sub	sp, #28
 800ca66:	4604      	mov	r4, r0
 800ca68:	2b0a      	cmp	r3, #10
 800ca6a:	f200 8136 	bhi.w	800ccda <_rclc_execute.part.0+0x27a>
 800ca6e:	e8df f003 	tbb	[pc, r3]
 800ca72:	435e      	.short	0x435e
 800ca74:	06a1664f 	.word	0x06a1664f
 800ca78:	6c1e0606 	.word	0x6c1e0606
 800ca7c:	59          	.byte	0x59
 800ca7d:	00          	.byte	0x00
 800ca7e:	2b06      	cmp	r3, #6
 800ca80:	f000 8122 	beq.w	800ccc8 <_rclc_execute.part.0+0x268>
 800ca84:	2b07      	cmp	r3, #7
 800ca86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca88:	f040 8118 	bne.w	800ccbc <_rclc_execute.part.0+0x25c>
 800ca8c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ca90:	6880      	ldr	r0, [r0, #8]
 800ca92:	4798      	blx	r3
 800ca94:	f104 0110 	add.w	r1, r4, #16
 800ca98:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ca9a:	6860      	ldr	r0, [r4, #4]
 800ca9c:	f006 f8ba 	bl	8012c14 <rcl_send_response>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d033      	beq.n	800cb0c <_rclc_execute.part.0+0xac>
 800caa4:	9005      	str	r0, [sp, #20]
 800caa6:	f000 fd6f 	bl	800d588 <rcutils_reset_error>
 800caaa:	9805      	ldr	r0, [sp, #20]
 800caac:	e02e      	b.n	800cb0c <_rclc_execute.part.0+0xac>
 800caae:	6840      	ldr	r0, [r0, #4]
 800cab0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f000 8086 	beq.w	800cbc6 <_rclc_execute.part.0+0x166>
 800caba:	2600      	movs	r6, #0
 800cabc:	2701      	movs	r7, #1
 800cabe:	e004      	b.n	800caca <_rclc_execute.part.0+0x6a>
 800cac0:	f007 ff68 	bl	8014994 <rclc_action_send_result_request>
 800cac4:	b998      	cbnz	r0, 800caee <_rclc_execute.part.0+0x8e>
 800cac6:	722f      	strb	r7, [r5, #8]
 800cac8:	6860      	ldr	r0, [r4, #4]
 800caca:	f008 f815 	bl	8014af8 <rclc_action_find_first_handle_with_goal_response>
 800cace:	4605      	mov	r5, r0
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d077      	beq.n	800cbc4 <_rclc_execute.part.0+0x164>
 800cad4:	6863      	ldr	r3, [r4, #4]
 800cad6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800cade:	f885 6020 	strb.w	r6, [r5, #32]
 800cae2:	4798      	blx	r3
 800cae4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800cae8:	4628      	mov	r0, r5
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1e8      	bne.n	800cac0 <_rclc_execute.part.0+0x60>
 800caee:	6860      	ldr	r0, [r4, #4]
 800caf0:	4629      	mov	r1, r5
 800caf2:	f007 ff85 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 800caf6:	e7e7      	b.n	800cac8 <_rclc_execute.part.0+0x68>
 800caf8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800cafc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800cb00:	2d00      	cmp	r5, #0
 800cb02:	f000 80c9 	beq.w	800cc98 <_rclc_execute.part.0+0x238>
 800cb06:	6880      	ldr	r0, [r0, #8]
 800cb08:	4798      	blx	r3
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	b007      	add	sp, #28
 800cb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb10:	6840      	ldr	r0, [r0, #4]
 800cb12:	f006 fbaf 	bl	8013274 <rcl_timer_call>
 800cb16:	f240 3321 	movw	r3, #801	@ 0x321
 800cb1a:	4298      	cmp	r0, r3
 800cb1c:	d004      	beq.n	800cb28 <_rclc_execute.part.0+0xc8>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d0f4      	beq.n	800cb0c <_rclc_execute.part.0+0xac>
 800cb22:	e7bf      	b.n	800caa4 <_rclc_execute.part.0+0x44>
 800cb24:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb26:	4798      	blx	r3
 800cb28:	2000      	movs	r0, #0
 800cb2a:	b007      	add	sp, #28
 800cb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb2e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800cb32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb34:	b925      	cbnz	r5, 800cb40 <_rclc_execute.part.0+0xe0>
 800cb36:	4628      	mov	r0, r5
 800cb38:	4798      	blx	r3
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	e7e6      	b.n	800cb0c <_rclc_execute.part.0+0xac>
 800cb3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb40:	68a0      	ldr	r0, [r4, #8]
 800cb42:	4798      	blx	r3
 800cb44:	2000      	movs	r0, #0
 800cb46:	b007      	add	sp, #28
 800cb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb4a:	6840      	ldr	r0, [r0, #4]
 800cb4c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800cb50:	bb3b      	cbnz	r3, 800cba2 <_rclc_execute.part.0+0x142>
 800cb52:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d07b      	beq.n	800cc52 <_rclc_execute.part.0+0x1f2>
 800cb5a:	f640 0634 	movw	r6, #2100	@ 0x834
 800cb5e:	2701      	movs	r7, #1
 800cb60:	e007      	b.n	800cb72 <_rclc_execute.part.0+0x112>
 800cb62:	4628      	mov	r0, r5
 800cb64:	f007 ffe0 	bl	8014b28 <rclc_action_server_response_goal_request>
 800cb68:	6860      	ldr	r0, [r4, #4]
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f007 ff48 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 800cb70:	6860      	ldr	r0, [r4, #4]
 800cb72:	2100      	movs	r1, #0
 800cb74:	f007 ff72 	bl	8014a5c <rclc_action_find_first_handle_by_status>
 800cb78:	4605      	mov	r5, r0
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d066      	beq.n	800cc4c <_rclc_execute.part.0+0x1ec>
 800cb7e:	6863      	ldr	r3, [r4, #4]
 800cb80:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	4798      	blx	r3
 800cb86:	42b0      	cmp	r0, r6
 800cb88:	f04f 0100 	mov.w	r1, #0
 800cb8c:	d1e9      	bne.n	800cb62 <_rclc_execute.part.0+0x102>
 800cb8e:	2101      	movs	r1, #1
 800cb90:	4628      	mov	r0, r5
 800cb92:	f007 ffc9 	bl	8014b28 <rclc_action_server_response_goal_request>
 800cb96:	722f      	strb	r7, [r5, #8]
 800cb98:	e7ea      	b.n	800cb70 <_rclc_execute.part.0+0x110>
 800cb9a:	6848      	ldr	r0, [r1, #4]
 800cb9c:	f007 ff30 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 800cba0:	6860      	ldr	r0, [r4, #4]
 800cba2:	f007 ff67 	bl	8014a74 <rclc_action_find_first_terminated_handle>
 800cba6:	4601      	mov	r1, r0
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	d1f6      	bne.n	800cb9a <_rclc_execute.part.0+0x13a>
 800cbac:	6860      	ldr	r0, [r4, #4]
 800cbae:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800cbb2:	e7ce      	b.n	800cb52 <_rclc_execute.part.0+0xf2>
 800cbb4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cbb6:	6880      	ldr	r0, [r0, #8]
 800cbb8:	f104 0110 	add.w	r1, r4, #16
 800cbbc:	4798      	blx	r3
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	b007      	add	sp, #28
 800cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc4:	6860      	ldr	r0, [r4, #4]
 800cbc6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cbca:	b18b      	cbz	r3, 800cbf0 <_rclc_execute.part.0+0x190>
 800cbcc:	68c5      	ldr	r5, [r0, #12]
 800cbce:	b32d      	cbz	r5, 800cc1c <_rclc_execute.part.0+0x1bc>
 800cbd0:	2600      	movs	r6, #0
 800cbd2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cbd6:	b143      	cbz	r3, 800cbea <_rclc_execute.part.0+0x18a>
 800cbd8:	69c3      	ldr	r3, [r0, #28]
 800cbda:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cbde:	b123      	cbz	r3, 800cbea <_rclc_execute.part.0+0x18a>
 800cbe0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cbe2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	4798      	blx	r3
 800cbe8:	6860      	ldr	r0, [r4, #4]
 800cbea:	682d      	ldr	r5, [r5, #0]
 800cbec:	2d00      	cmp	r5, #0
 800cbee:	d1f0      	bne.n	800cbd2 <_rclc_execute.part.0+0x172>
 800cbf0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cbf4:	b193      	cbz	r3, 800cc1c <_rclc_execute.part.0+0x1bc>
 800cbf6:	68c5      	ldr	r5, [r0, #12]
 800cbf8:	b185      	cbz	r5, 800cc1c <_rclc_execute.part.0+0x1bc>
 800cbfa:	2600      	movs	r6, #0
 800cbfc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800cc00:	b14b      	cbz	r3, 800cc16 <_rclc_execute.part.0+0x1b6>
 800cc02:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cc04:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800cc08:	b12b      	cbz	r3, 800cc16 <_rclc_execute.part.0+0x1b6>
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cc10:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cc12:	4798      	blx	r3
 800cc14:	6860      	ldr	r0, [r4, #4]
 800cc16:	682d      	ldr	r5, [r5, #0]
 800cc18:	2d00      	cmp	r5, #0
 800cc1a:	d1ef      	bne.n	800cbfc <_rclc_execute.part.0+0x19c>
 800cc1c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d081      	beq.n	800cb28 <_rclc_execute.part.0+0xc8>
 800cc24:	2700      	movs	r7, #0
 800cc26:	e00b      	b.n	800cc40 <_rclc_execute.part.0+0x1e0>
 800cc28:	6863      	ldr	r3, [r4, #4]
 800cc2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cc2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cc2e:	6a1e      	ldr	r6, [r3, #32]
 800cc30:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cc34:	47b0      	blx	r6
 800cc36:	6860      	ldr	r0, [r4, #4]
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f007 fee1 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 800cc3e:	6860      	ldr	r0, [r4, #4]
 800cc40:	f007 ff66 	bl	8014b10 <rclc_action_find_first_handle_with_result_response>
 800cc44:	4605      	mov	r5, r0
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d1ee      	bne.n	800cc28 <_rclc_execute.part.0+0x1c8>
 800cc4a:	e76d      	b.n	800cb28 <_rclc_execute.part.0+0xc8>
 800cc4c:	6860      	ldr	r0, [r4, #4]
 800cc4e:	f880 5020 	strb.w	r5, [r0, #32]
 800cc52:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f43f af66 	beq.w	800cb28 <_rclc_execute.part.0+0xc8>
 800cc5c:	68c5      	ldr	r5, [r0, #12]
 800cc5e:	b1b5      	cbz	r5, 800cc8e <_rclc_execute.part.0+0x22e>
 800cc60:	2602      	movs	r6, #2
 800cc62:	e001      	b.n	800cc68 <_rclc_execute.part.0+0x208>
 800cc64:	682d      	ldr	r5, [r5, #0]
 800cc66:	b195      	cbz	r5, 800cc8e <_rclc_execute.part.0+0x22e>
 800cc68:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cc6c:	2b03      	cmp	r3, #3
 800cc6e:	d1f9      	bne.n	800cc64 <_rclc_execute.part.0+0x204>
 800cc70:	69c3      	ldr	r3, [r0, #28]
 800cc72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cc74:	4628      	mov	r0, r5
 800cc76:	4798      	blx	r3
 800cc78:	4603      	mov	r3, r0
 800cc7a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800cc84:	b163      	cbz	r3, 800cca0 <_rclc_execute.part.0+0x240>
 800cc86:	f007 ff6f 	bl	8014b68 <rclc_action_server_goal_cancel_accept>
 800cc8a:	6860      	ldr	r0, [r4, #4]
 800cc8c:	e7ea      	b.n	800cc64 <_rclc_execute.part.0+0x204>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cc94:	4618      	mov	r0, r3
 800cc96:	e739      	b.n	800cb0c <_rclc_execute.part.0+0xac>
 800cc98:	4628      	mov	r0, r5
 800cc9a:	4798      	blx	r3
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	e735      	b.n	800cb0c <_rclc_execute.part.0+0xac>
 800cca0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cca2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cca6:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ccaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccae:	6860      	ldr	r0, [r4, #4]
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	f007 ff85 	bl	8014bc0 <rclc_action_server_goal_cancel_reject>
 800ccb6:	722e      	strb	r6, [r5, #8]
 800ccb8:	6860      	ldr	r0, [r4, #4]
 800ccba:	e7d3      	b.n	800cc64 <_rclc_execute.part.0+0x204>
 800ccbc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ccbe:	6880      	ldr	r0, [r0, #8]
 800ccc0:	4798      	blx	r3
 800ccc2:	f104 0110 	add.w	r1, r4, #16
 800ccc6:	e6e7      	b.n	800ca98 <_rclc_execute.part.0+0x38>
 800ccc8:	f100 0110 	add.w	r1, r0, #16
 800cccc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ccce:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ccd0:	6880      	ldr	r0, [r0, #8]
 800ccd2:	9105      	str	r1, [sp, #20]
 800ccd4:	4798      	blx	r3
 800ccd6:	9905      	ldr	r1, [sp, #20]
 800ccd8:	e6de      	b.n	800ca98 <_rclc_execute.part.0+0x38>
 800ccda:	2001      	movs	r0, #1
 800ccdc:	e716      	b.n	800cb0c <_rclc_execute.part.0+0xac>
 800ccde:	bf00      	nop

0800cce0 <rclc_executor_trigger_any>:
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d03f      	beq.n	800cd64 <rclc_executor_trigger_any+0x84>
 800cce4:	2900      	cmp	r1, #0
 800cce6:	d03e      	beq.n	800cd66 <rclc_executor_trigger_any+0x86>
 800cce8:	4603      	mov	r3, r0
 800ccea:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d037      	beq.n	800cd64 <rclc_executor_trigger_any+0x84>
 800ccf4:	b430      	push	{r4, r5}
 800ccf6:	f893 c000 	ldrb.w	ip, [r3]
 800ccfa:	f1bc 0f08 	cmp.w	ip, #8
 800ccfe:	d11e      	bne.n	800cd3e <rclc_executor_trigger_any+0x5e>
 800cd00:	685c      	ldr	r4, [r3, #4]
 800cd02:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cd04:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cd08:	d105      	bne.n	800cd16 <rclc_executor_trigger_any+0x36>
 800cd0a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cd0e:	b910      	cbnz	r0, 800cd16 <rclc_executor_trigger_any+0x36>
 800cd10:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800cd14:	b128      	cbz	r0, 800cd22 <rclc_executor_trigger_any+0x42>
 800cd16:	bc30      	pop	{r4, r5}
 800cd18:	4770      	bx	lr
 800cd1a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d1f9      	bne.n	800cd16 <rclc_executor_trigger_any+0x36>
 800cd22:	3201      	adds	r2, #1
 800cd24:	4291      	cmp	r1, r2
 800cd26:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cd2a:	d018      	beq.n	800cd5e <rclc_executor_trigger_any+0x7e>
 800cd2c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d0f0      	beq.n	800cd16 <rclc_executor_trigger_any+0x36>
 800cd34:	f893 c000 	ldrb.w	ip, [r3]
 800cd38:	f1bc 0f08 	cmp.w	ip, #8
 800cd3c:	d0e0      	beq.n	800cd00 <rclc_executor_trigger_any+0x20>
 800cd3e:	f1bc 0f09 	cmp.w	ip, #9
 800cd42:	d1ea      	bne.n	800cd1a <rclc_executor_trigger_any+0x3a>
 800cd44:	685c      	ldr	r4, [r3, #4]
 800cd46:	6a25      	ldr	r5, [r4, #32]
 800cd48:	2d00      	cmp	r5, #0
 800cd4a:	d1e4      	bne.n	800cd16 <rclc_executor_trigger_any+0x36>
 800cd4c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d1e0      	bne.n	800cd16 <rclc_executor_trigger_any+0x36>
 800cd54:	3201      	adds	r2, #1
 800cd56:	4291      	cmp	r1, r2
 800cd58:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cd5c:	d1e6      	bne.n	800cd2c <rclc_executor_trigger_any+0x4c>
 800cd5e:	2000      	movs	r0, #0
 800cd60:	bc30      	pop	{r4, r5}
 800cd62:	4770      	bx	lr
 800cd64:	4770      	bx	lr
 800cd66:	4608      	mov	r0, r1
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop

0800cd6c <rclc_executor_get_zero_initialized_executor>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	4903      	ldr	r1, [pc, #12]	@ (800cd7c <rclc_executor_get_zero_initialized_executor+0x10>)
 800cd70:	4604      	mov	r4, r0
 800cd72:	2288      	movs	r2, #136	@ 0x88
 800cd74:	f00b f8e9 	bl	8017f4a <memcpy>
 800cd78:	4620      	mov	r0, r4
 800cd7a:	bd10      	pop	{r4, pc}
 800cd7c:	08019010 	.word	0x08019010

0800cd80 <rclc_executor_init>:
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d05f      	beq.n	800ce44 <rclc_executor_init+0xc4>
 800cd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd88:	460c      	mov	r4, r1
 800cd8a:	b0b0      	sub	sp, #192	@ 0xc0
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	d051      	beq.n	800ce34 <rclc_executor_init+0xb4>
 800cd90:	4605      	mov	r5, r0
 800cd92:	4618      	mov	r0, r3
 800cd94:	4616      	mov	r6, r2
 800cd96:	461f      	mov	r7, r3
 800cd98:	f000 fbd0 	bl	800d53c <rcutils_allocator_is_valid>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d049      	beq.n	800ce34 <rclc_executor_init+0xb4>
 800cda0:	2e00      	cmp	r6, #0
 800cda2:	d047      	beq.n	800ce34 <rclc_executor_init+0xb4>
 800cda4:	492c      	ldr	r1, [pc, #176]	@ (800ce58 <rclc_executor_init+0xd8>)
 800cda6:	2288      	movs	r2, #136	@ 0x88
 800cda8:	a80e      	add	r0, sp, #56	@ 0x38
 800cdaa:	f00b f8ce 	bl	8017f4a <memcpy>
 800cdae:	a90e      	add	r1, sp, #56	@ 0x38
 800cdb0:	2288      	movs	r2, #136	@ 0x88
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f00b f8c9 	bl	8017f4a <memcpy>
 800cdb8:	602c      	str	r4, [r5, #0]
 800cdba:	4668      	mov	r0, sp
 800cdbc:	60ae      	str	r6, [r5, #8]
 800cdbe:	466c      	mov	r4, sp
 800cdc0:	f006 fbca 	bl	8013558 <rcl_get_zero_initialized_wait_set>
 800cdc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdc6:	f105 0c14 	add.w	ip, r5, #20
 800cdca:	f8d7 8000 	ldr.w	r8, [r7]
 800cdce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdde:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ce50 <rclc_executor_init+0xd0>
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	f8cc 3000 	str.w	r3, [ip]
 800cde8:	6939      	ldr	r1, [r7, #16]
 800cdea:	612f      	str	r7, [r5, #16]
 800cdec:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cdf0:	01b0      	lsls	r0, r6, #6
 800cdf2:	47c0      	blx	r8
 800cdf4:	6068      	str	r0, [r5, #4]
 800cdf6:	b338      	cbz	r0, 800ce48 <rclc_executor_init+0xc8>
 800cdf8:	2400      	movs	r4, #0
 800cdfa:	e000      	b.n	800cdfe <rclc_executor_init+0x7e>
 800cdfc:	6868      	ldr	r0, [r5, #4]
 800cdfe:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ce02:	4631      	mov	r1, r6
 800ce04:	3401      	adds	r4, #1
 800ce06:	f000 fa6b 	bl	800d2e0 <rclc_executor_handle_init>
 800ce0a:	42a6      	cmp	r6, r4
 800ce0c:	d1f6      	bne.n	800cdfc <rclc_executor_init+0x7c>
 800ce0e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800ce12:	f000 fa59 	bl	800d2c8 <rclc_executor_handle_counters_zero_init>
 800ce16:	4a11      	ldr	r2, [pc, #68]	@ (800ce5c <rclc_executor_init+0xdc>)
 800ce18:	686b      	ldr	r3, [r5, #4]
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800ce20:	b163      	cbz	r3, 800ce3c <rclc_executor_init+0xbc>
 800ce22:	692b      	ldr	r3, [r5, #16]
 800ce24:	b153      	cbz	r3, 800ce3c <rclc_executor_init+0xbc>
 800ce26:	68ab      	ldr	r3, [r5, #8]
 800ce28:	b143      	cbz	r3, 800ce3c <rclc_executor_init+0xbc>
 800ce2a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800ce2e:	b030      	add	sp, #192	@ 0xc0
 800ce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce34:	200b      	movs	r0, #11
 800ce36:	b030      	add	sp, #192	@ 0xc0
 800ce38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	b030      	add	sp, #192	@ 0xc0
 800ce40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce44:	200b      	movs	r0, #11
 800ce46:	4770      	bx	lr
 800ce48:	200a      	movs	r0, #10
 800ce4a:	e7f4      	b.n	800ce36 <rclc_executor_init+0xb6>
 800ce4c:	f3af 8000 	nop.w
 800ce50:	3b9aca00 	.word	0x3b9aca00
 800ce54:	00000000 	.word	0x00000000
 800ce58:	08019010 	.word	0x08019010
 800ce5c:	0800cce1 	.word	0x0800cce1

0800ce60 <rclc_executor_add_timer>:
 800ce60:	b300      	cbz	r0, 800cea4 <rclc_executor_add_timer+0x44>
 800ce62:	b1f9      	cbz	r1, 800cea4 <rclc_executor_add_timer+0x44>
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	d301      	bcc.n	800ce74 <rclc_executor_add_timer+0x14>
 800ce70:	2001      	movs	r0, #1
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	6840      	ldr	r0, [r0, #4]
 800ce76:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ce7a:	019d      	lsls	r5, r3, #6
 800ce7c:	6051      	str	r1, [r2, #4]
 800ce7e:	2102      	movs	r1, #2
 800ce80:	5341      	strh	r1, [r0, r5]
 800ce82:	3301      	adds	r3, #1
 800ce84:	2000      	movs	r0, #0
 800ce86:	2101      	movs	r1, #1
 800ce88:	f104 0514 	add.w	r5, r4, #20
 800ce8c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ce8e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ce90:	4628      	mov	r0, r5
 800ce92:	60e3      	str	r3, [r4, #12]
 800ce94:	f006 fb74 	bl	8013580 <rcl_wait_set_is_valid>
 800ce98:	b930      	cbnz	r0, 800cea8 <rclc_executor_add_timer+0x48>
 800ce9a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	2000      	movs	r0, #0
 800cea0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	200b      	movs	r0, #11
 800cea6:	4770      	bx	lr
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f006 fb6f 	bl	801358c <rcl_wait_set_fini>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d0f3      	beq.n	800ce9a <rclc_executor_add_timer+0x3a>
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}

0800ceb4 <rclc_executor_prepare>:
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d044      	beq.n	800cf42 <rclc_executor_prepare+0x8e>
 800ceb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceba:	f100 0514 	add.w	r5, r0, #20
 800cebe:	b09b      	sub	sp, #108	@ 0x6c
 800cec0:	4604      	mov	r4, r0
 800cec2:	4628      	mov	r0, r5
 800cec4:	f006 fb5c 	bl	8013580 <rcl_wait_set_is_valid>
 800cec8:	b110      	cbz	r0, 800ced0 <rclc_executor_prepare+0x1c>
 800ceca:	2000      	movs	r0, #0
 800cecc:	b01b      	add	sp, #108	@ 0x6c
 800cece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced0:	4628      	mov	r0, r5
 800ced2:	f006 fb5b 	bl	801358c <rcl_wait_set_fini>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d130      	bne.n	800cf3c <rclc_executor_prepare+0x88>
 800ceda:	a80c      	add	r0, sp, #48	@ 0x30
 800cedc:	f006 fb3c 	bl	8013558 <rcl_get_zero_initialized_wait_set>
 800cee0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cee4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cee8:	46ae      	mov	lr, r5
 800ceea:	6927      	ldr	r7, [r4, #16]
 800ceec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cef0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cef4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cef8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cefc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cf00:	f8dc 3000 	ldr.w	r3, [ip]
 800cf04:	f8ce 3000 	str.w	r3, [lr]
 800cf08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cf0a:	ae04      	add	r6, sp, #16
 800cf0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	6822      	ldr	r2, [r4, #0]
 800cf12:	6033      	str	r3, [r6, #0]
 800cf14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf16:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cf18:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cf1c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800cf20:	e9cd 2100 	strd	r2, r1, [sp]
 800cf24:	4628      	mov	r0, r5
 800cf26:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cf28:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cf2a:	f006 fe2d 	bl	8013b88 <rcl_wait_set_init>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	d0cc      	beq.n	800cecc <rclc_executor_prepare+0x18>
 800cf32:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cf34:	f000 fb28 	bl	800d588 <rcutils_reset_error>
 800cf38:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cf3a:	e7c7      	b.n	800cecc <rclc_executor_prepare+0x18>
 800cf3c:	f000 fb24 	bl	800d588 <rcutils_reset_error>
 800cf40:	e7cb      	b.n	800ceda <rclc_executor_prepare+0x26>
 800cf42:	200b      	movs	r0, #11
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop

0800cf48 <rclc_executor_spin_some.part.0>:
 800cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	f100 0614 	add.w	r6, r0, #20
 800cf50:	b083      	sub	sp, #12
 800cf52:	4691      	mov	r9, r2
 800cf54:	4698      	mov	r8, r3
 800cf56:	4605      	mov	r5, r0
 800cf58:	f7ff ffac 	bl	800ceb4 <rclc_executor_prepare>
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f006 fbe1 	bl	8013724 <rcl_wait_set_clear>
 800cf62:	4607      	mov	r7, r0
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f040 80ed 	bne.w	800d144 <rclc_executor_spin_some.part.0+0x1fc>
 800cf6a:	68ab      	ldr	r3, [r5, #8]
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	b303      	cbz	r3, 800cfb2 <rclc_executor_spin_some.part.0+0x6a>
 800cf70:	6869      	ldr	r1, [r5, #4]
 800cf72:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cf76:	01a2      	lsls	r2, r4, #6
 800cf78:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cf7c:	b1cb      	cbz	r3, 800cfb2 <rclc_executor_spin_some.part.0+0x6a>
 800cf7e:	5c8b      	ldrb	r3, [r1, r2]
 800cf80:	2b0a      	cmp	r3, #10
 800cf82:	f200 80d8 	bhi.w	800d136 <rclc_executor_spin_some.part.0+0x1ee>
 800cf86:	e8df f003 	tbb	[pc, r3]
 800cf8a:	9c9c      	.short	0x9c9c
 800cf8c:	068c8ca7 	.word	0x068c8ca7
 800cf90:	bdc90606 	.word	0xbdc90606
 800cf94:	b2          	.byte	0xb2
 800cf95:	00          	.byte	0x00
 800cf96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cf9a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f006 ff08 	bl	8013db4 <rcl_wait_set_add_service>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	f040 8086 	bne.w	800d0b6 <rclc_executor_spin_some.part.0+0x16e>
 800cfaa:	68ab      	ldr	r3, [r5, #8]
 800cfac:	3401      	adds	r4, #1
 800cfae:	429c      	cmp	r4, r3
 800cfb0:	d3de      	bcc.n	800cf70 <rclc_executor_spin_some.part.0+0x28>
 800cfb2:	4643      	mov	r3, r8
 800cfb4:	464a      	mov	r2, r9
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f006 ff2a 	bl	8013e10 <rcl_wait>
 800cfbc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 80c7 	beq.w	800d154 <rclc_executor_spin_some.part.0+0x20c>
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	f040 80b5 	bne.w	800d136 <rclc_executor_spin_some.part.0+0x1ee>
 800cfcc:	68ab      	ldr	r3, [r5, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 8159 	beq.w	800d286 <rclc_executor_spin_some.part.0+0x33e>
 800cfd4:	2400      	movs	r4, #0
 800cfd6:	46a0      	mov	r8, r4
 800cfd8:	f240 1991 	movw	r9, #401	@ 0x191
 800cfdc:	e00a      	b.n	800cff4 <rclc_executor_spin_some.part.0+0xac>
 800cfde:	f7ff fb7d 	bl	800c6dc <_rclc_check_for_new_data>
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	b110      	cbz	r0, 800cfec <rclc_executor_spin_some.part.0+0xa4>
 800cfe6:	4548      	cmp	r0, r9
 800cfe8:	f040 80b2 	bne.w	800d150 <rclc_executor_spin_some.part.0+0x208>
 800cfec:	68ab      	ldr	r3, [r5, #8]
 800cfee:	4598      	cmp	r8, r3
 800cff0:	f080 8126 	bcs.w	800d240 <rclc_executor_spin_some.part.0+0x2f8>
 800cff4:	686a      	ldr	r2, [r5, #4]
 800cff6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cffa:	4631      	mov	r1, r6
 800cffc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d000:	f108 0801 	add.w	r8, r8, #1
 800d004:	f1bc 0f00 	cmp.w	ip, #0
 800d008:	d1e9      	bne.n	800cfde <rclc_executor_spin_some.part.0+0x96>
 800d00a:	4619      	mov	r1, r3
 800d00c:	4610      	mov	r0, r2
 800d00e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d012:	4798      	blx	r3
 800d014:	2800      	cmp	r0, #0
 800d016:	f000 809b 	beq.w	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d01a:	68ab      	ldr	r3, [r5, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 8097 	beq.w	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d022:	f04f 0800 	mov.w	r8, #0
 800d026:	f240 1991 	movw	r9, #401	@ 0x191
 800d02a:	e009      	b.n	800d040 <rclc_executor_spin_some.part.0+0xf8>
 800d02c:	f7ff fba4 	bl	800c778 <_rclc_take_new_data>
 800d030:	4604      	mov	r4, r0
 800d032:	b110      	cbz	r0, 800d03a <rclc_executor_spin_some.part.0+0xf2>
 800d034:	4548      	cmp	r0, r9
 800d036:	f040 808b 	bne.w	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d03a:	68ab      	ldr	r3, [r5, #8]
 800d03c:	4598      	cmp	r8, r3
 800d03e:	d209      	bcs.n	800d054 <rclc_executor_spin_some.part.0+0x10c>
 800d040:	6868      	ldr	r0, [r5, #4]
 800d042:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d046:	4631      	mov	r1, r6
 800d048:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d04c:	f108 0801 	add.w	r8, r8, #1
 800d050:	2a00      	cmp	r2, #0
 800d052:	d1eb      	bne.n	800d02c <rclc_executor_spin_some.part.0+0xe4>
 800d054:	2600      	movs	r6, #0
 800d056:	b97b      	cbnz	r3, 800d078 <rclc_executor_spin_some.part.0+0x130>
 800d058:	e07a      	b.n	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d05a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d05e:	2a08      	cmp	r2, #8
 800d060:	f000 80fd 	beq.w	800d25e <rclc_executor_spin_some.part.0+0x316>
 800d064:	2a09      	cmp	r2, #9
 800d066:	f000 80ef 	beq.w	800d248 <rclc_executor_spin_some.part.0+0x300>
 800d06a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d06e:	b98a      	cbnz	r2, 800d094 <rclc_executor_spin_some.part.0+0x14c>
 800d070:	3601      	adds	r6, #1
 800d072:	429e      	cmp	r6, r3
 800d074:	d262      	bcs.n	800d13c <rclc_executor_spin_some.part.0+0x1f4>
 800d076:	2400      	movs	r4, #0
 800d078:	686a      	ldr	r2, [r5, #4]
 800d07a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d07e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d082:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d086:	2900      	cmp	r1, #0
 800d088:	d062      	beq.n	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d08a:	7841      	ldrb	r1, [r0, #1]
 800d08c:	2900      	cmp	r1, #0
 800d08e:	d0e4      	beq.n	800d05a <rclc_executor_spin_some.part.0+0x112>
 800d090:	2901      	cmp	r1, #1
 800d092:	d1ed      	bne.n	800d070 <rclc_executor_spin_some.part.0+0x128>
 800d094:	f7ff fce4 	bl	800ca60 <_rclc_execute.part.0>
 800d098:	2800      	cmp	r0, #0
 800d09a:	f040 80b6 	bne.w	800d20a <rclc_executor_spin_some.part.0+0x2c2>
 800d09e:	68ab      	ldr	r3, [r5, #8]
 800d0a0:	e7e6      	b.n	800d070 <rclc_executor_spin_some.part.0+0x128>
 800d0a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f006 fe56 	bl	8013d5c <rcl_wait_set_add_client>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	f43f af7a 	beq.w	800cfaa <rclc_executor_spin_some.part.0+0x62>
 800d0b6:	9001      	str	r0, [sp, #4]
 800d0b8:	f000 fa66 	bl	800d588 <rcutils_reset_error>
 800d0bc:	9801      	ldr	r0, [sp, #4]
 800d0be:	4607      	mov	r7, r0
 800d0c0:	e03c      	b.n	800d13c <rclc_executor_spin_some.part.0+0x1f4>
 800d0c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0c6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f006 fafe 	bl	80136cc <rcl_wait_set_add_subscription>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	f43f af6a 	beq.w	800cfaa <rclc_executor_spin_some.part.0+0x62>
 800d0d6:	e7ee      	b.n	800d0b6 <rclc_executor_spin_some.part.0+0x16e>
 800d0d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0dc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f006 fe0b 	bl	8013cfc <rcl_wait_set_add_timer>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	f43f af5f 	beq.w	800cfaa <rclc_executor_spin_some.part.0+0x62>
 800d0ec:	e7e3      	b.n	800d0b6 <rclc_executor_spin_some.part.0+0x16e>
 800d0ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f006 fdd4 	bl	8013ca4 <rcl_wait_set_add_guard_condition>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	f43f af54 	beq.w	800cfaa <rclc_executor_spin_some.part.0+0x62>
 800d102:	e7d8      	b.n	800d0b6 <rclc_executor_spin_some.part.0+0x16e>
 800d104:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d108:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d10c:	3110      	adds	r1, #16
 800d10e:	4630      	mov	r0, r6
 800d110:	f007 fb56 	bl	80147c0 <rcl_action_wait_set_add_action_server>
 800d114:	2800      	cmp	r0, #0
 800d116:	f43f af48 	beq.w	800cfaa <rclc_executor_spin_some.part.0+0x62>
 800d11a:	e7cc      	b.n	800d0b6 <rclc_executor_spin_some.part.0+0x16e>
 800d11c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d120:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d124:	3110      	adds	r1, #16
 800d126:	2300      	movs	r3, #0
 800d128:	4630      	mov	r0, r6
 800d12a:	f007 f921 	bl	8014370 <rcl_action_wait_set_add_action_client>
 800d12e:	2800      	cmp	r0, #0
 800d130:	f43f af3b 	beq.w	800cfaa <rclc_executor_spin_some.part.0+0x62>
 800d134:	e7bf      	b.n	800d0b6 <rclc_executor_spin_some.part.0+0x16e>
 800d136:	f000 fa27 	bl	800d588 <rcutils_reset_error>
 800d13a:	2701      	movs	r7, #1
 800d13c:	4638      	mov	r0, r7
 800d13e:	b003      	add	sp, #12
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	f000 fa20 	bl	800d588 <rcutils_reset_error>
 800d148:	4638      	mov	r0, r7
 800d14a:	b003      	add	sp, #12
 800d14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d150:	4627      	mov	r7, r4
 800d152:	e7f3      	b.n	800d13c <rclc_executor_spin_some.part.0+0x1f4>
 800d154:	68ab      	ldr	r3, [r5, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	f000 8092 	beq.w	800d280 <rclc_executor_spin_some.part.0+0x338>
 800d15c:	2400      	movs	r4, #0
 800d15e:	46a0      	mov	r8, r4
 800d160:	f240 1991 	movw	r9, #401	@ 0x191
 800d164:	e008      	b.n	800d178 <rclc_executor_spin_some.part.0+0x230>
 800d166:	f7ff fab9 	bl	800c6dc <_rclc_check_for_new_data>
 800d16a:	4604      	mov	r4, r0
 800d16c:	b108      	cbz	r0, 800d172 <rclc_executor_spin_some.part.0+0x22a>
 800d16e:	4548      	cmp	r0, r9
 800d170:	d1ee      	bne.n	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d172:	68ab      	ldr	r3, [r5, #8]
 800d174:	4598      	cmp	r8, r3
 800d176:	d265      	bcs.n	800d244 <rclc_executor_spin_some.part.0+0x2fc>
 800d178:	686a      	ldr	r2, [r5, #4]
 800d17a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d17e:	4631      	mov	r1, r6
 800d180:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d184:	f108 0801 	add.w	r8, r8, #1
 800d188:	f1bc 0f00 	cmp.w	ip, #0
 800d18c:	d1eb      	bne.n	800d166 <rclc_executor_spin_some.part.0+0x21e>
 800d18e:	4619      	mov	r1, r3
 800d190:	4610      	mov	r0, r2
 800d192:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d196:	4798      	blx	r3
 800d198:	2800      	cmp	r0, #0
 800d19a:	d0d9      	beq.n	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d19c:	68ab      	ldr	r3, [r5, #8]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d0d6      	beq.n	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d1a2:	f04f 0800 	mov.w	r8, #0
 800d1a6:	f240 1991 	movw	r9, #401	@ 0x191
 800d1aa:	f240 2a59 	movw	sl, #601	@ 0x259
 800d1ae:	e00e      	b.n	800d1ce <rclc_executor_spin_some.part.0+0x286>
 800d1b0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d1b4:	2b08      	cmp	r3, #8
 800d1b6:	d033      	beq.n	800d220 <rclc_executor_spin_some.part.0+0x2d8>
 800d1b8:	2b09      	cmp	r3, #9
 800d1ba:	d028      	beq.n	800d20e <rclc_executor_spin_some.part.0+0x2c6>
 800d1bc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d1c0:	b9fb      	cbnz	r3, 800d202 <rclc_executor_spin_some.part.0+0x2ba>
 800d1c2:	68ab      	ldr	r3, [r5, #8]
 800d1c4:	f108 0801 	add.w	r8, r8, #1
 800d1c8:	4598      	cmp	r8, r3
 800d1ca:	d2b7      	bcs.n	800d13c <rclc_executor_spin_some.part.0+0x1f4>
 800d1cc:	2400      	movs	r4, #0
 800d1ce:	6868      	ldr	r0, [r5, #4]
 800d1d0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d1d4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d1d8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d0b7      	beq.n	800d150 <rclc_executor_spin_some.part.0+0x208>
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	f7ff fac9 	bl	800c778 <_rclc_take_new_data>
 800d1e6:	b118      	cbz	r0, 800d1f0 <rclc_executor_spin_some.part.0+0x2a8>
 800d1e8:	4548      	cmp	r0, r9
 800d1ea:	d001      	beq.n	800d1f0 <rclc_executor_spin_some.part.0+0x2a8>
 800d1ec:	4550      	cmp	r0, sl
 800d1ee:	d10c      	bne.n	800d20a <rclc_executor_spin_some.part.0+0x2c2>
 800d1f0:	686b      	ldr	r3, [r5, #4]
 800d1f2:	eb13 000b 	adds.w	r0, r3, fp
 800d1f6:	d021      	beq.n	800d23c <rclc_executor_spin_some.part.0+0x2f4>
 800d1f8:	7842      	ldrb	r2, [r0, #1]
 800d1fa:	2a00      	cmp	r2, #0
 800d1fc:	d0d8      	beq.n	800d1b0 <rclc_executor_spin_some.part.0+0x268>
 800d1fe:	2a01      	cmp	r2, #1
 800d200:	d1df      	bne.n	800d1c2 <rclc_executor_spin_some.part.0+0x27a>
 800d202:	f7ff fc2d 	bl	800ca60 <_rclc_execute.part.0>
 800d206:	2800      	cmp	r0, #0
 800d208:	d0db      	beq.n	800d1c2 <rclc_executor_spin_some.part.0+0x27a>
 800d20a:	4607      	mov	r7, r0
 800d20c:	e796      	b.n	800d13c <rclc_executor_spin_some.part.0+0x1f4>
 800d20e:	6843      	ldr	r3, [r0, #4]
 800d210:	6a1a      	ldr	r2, [r3, #32]
 800d212:	2a00      	cmp	r2, #0
 800d214:	d1f5      	bne.n	800d202 <rclc_executor_spin_some.part.0+0x2ba>
 800d216:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d0d1      	beq.n	800d1c2 <rclc_executor_spin_some.part.0+0x27a>
 800d21e:	e7f0      	b.n	800d202 <rclc_executor_spin_some.part.0+0x2ba>
 800d220:	6843      	ldr	r3, [r0, #4]
 800d222:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d224:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d228:	d1eb      	bne.n	800d202 <rclc_executor_spin_some.part.0+0x2ba>
 800d22a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d22e:	2a00      	cmp	r2, #0
 800d230:	d1e7      	bne.n	800d202 <rclc_executor_spin_some.part.0+0x2ba>
 800d232:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d236:	2b00      	cmp	r3, #0
 800d238:	d0c3      	beq.n	800d1c2 <rclc_executor_spin_some.part.0+0x27a>
 800d23a:	e7e2      	b.n	800d202 <rclc_executor_spin_some.part.0+0x2ba>
 800d23c:	270b      	movs	r7, #11
 800d23e:	e77d      	b.n	800d13c <rclc_executor_spin_some.part.0+0x1f4>
 800d240:	686a      	ldr	r2, [r5, #4]
 800d242:	e6e2      	b.n	800d00a <rclc_executor_spin_some.part.0+0xc2>
 800d244:	686a      	ldr	r2, [r5, #4]
 800d246:	e7a2      	b.n	800d18e <rclc_executor_spin_some.part.0+0x246>
 800d248:	6842      	ldr	r2, [r0, #4]
 800d24a:	6a11      	ldr	r1, [r2, #32]
 800d24c:	2900      	cmp	r1, #0
 800d24e:	f47f af21 	bne.w	800d094 <rclc_executor_spin_some.part.0+0x14c>
 800d252:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d256:	2a00      	cmp	r2, #0
 800d258:	f43f af0a 	beq.w	800d070 <rclc_executor_spin_some.part.0+0x128>
 800d25c:	e71a      	b.n	800d094 <rclc_executor_spin_some.part.0+0x14c>
 800d25e:	6842      	ldr	r2, [r0, #4]
 800d260:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d262:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d266:	f47f af15 	bne.w	800d094 <rclc_executor_spin_some.part.0+0x14c>
 800d26a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d26e:	2900      	cmp	r1, #0
 800d270:	f47f af10 	bne.w	800d094 <rclc_executor_spin_some.part.0+0x14c>
 800d274:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d278:	2a00      	cmp	r2, #0
 800d27a:	f43f aef9 	beq.w	800d070 <rclc_executor_spin_some.part.0+0x128>
 800d27e:	e709      	b.n	800d094 <rclc_executor_spin_some.part.0+0x14c>
 800d280:	686a      	ldr	r2, [r5, #4]
 800d282:	461c      	mov	r4, r3
 800d284:	e783      	b.n	800d18e <rclc_executor_spin_some.part.0+0x246>
 800d286:	686a      	ldr	r2, [r5, #4]
 800d288:	461c      	mov	r4, r3
 800d28a:	e6be      	b.n	800d00a <rclc_executor_spin_some.part.0+0xc2>

0800d28c <rclc_executor_spin>:
 800d28c:	b1d0      	cbz	r0, 800d2c4 <rclc_executor_spin+0x38>
 800d28e:	b510      	push	{r4, lr}
 800d290:	4604      	mov	r4, r0
 800d292:	b082      	sub	sp, #8
 800d294:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	e9cd 2300 	strd	r2, r3, [sp]
 800d29e:	f004 ff9f 	bl	80121e0 <rcl_context_is_valid>
 800d2a2:	4601      	mov	r1, r0
 800d2a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	b131      	cbz	r1, 800d2ba <rclc_executor_spin+0x2e>
 800d2ac:	f7ff fe4c 	bl	800cf48 <rclc_executor_spin_some.part.0>
 800d2b0:	f030 0302 	bics.w	r3, r0, #2
 800d2b4:	d0ee      	beq.n	800d294 <rclc_executor_spin+0x8>
 800d2b6:	b002      	add	sp, #8
 800d2b8:	bd10      	pop	{r4, pc}
 800d2ba:	f000 f965 	bl	800d588 <rcutils_reset_error>
 800d2be:	2001      	movs	r0, #1
 800d2c0:	b002      	add	sp, #8
 800d2c2:	bd10      	pop	{r4, pc}
 800d2c4:	200b      	movs	r0, #11
 800d2c6:	4770      	bx	lr

0800d2c8 <rclc_executor_handle_counters_zero_init>:
 800d2c8:	b130      	cbz	r0, 800d2d8 <rclc_executor_handle_counters_zero_init+0x10>
 800d2ca:	b508      	push	{r3, lr}
 800d2cc:	2220      	movs	r2, #32
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	f00a fd72 	bl	8017db8 <memset>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	bd08      	pop	{r3, pc}
 800d2d8:	200b      	movs	r0, #11
 800d2da:	4770      	bx	lr
 800d2dc:	0000      	movs	r0, r0
	...

0800d2e0 <rclc_executor_handle_init>:
 800d2e0:	b168      	cbz	r0, 800d2fe <rclc_executor_handle_init+0x1e>
 800d2e2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d308 <rclc_executor_handle_init+0x28>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	220b      	movs	r2, #11
 800d2ea:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d2ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d2f2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d2f6:	8002      	strh	r2, [r0, #0]
 800d2f8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	4770      	bx	lr
 800d2fe:	200b      	movs	r0, #11
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	f3af 8000 	nop.w
	...

0800d310 <rclc_support_init_with_options>:
 800d310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d314:	b083      	sub	sp, #12
 800d316:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d318:	b340      	cbz	r0, 800d36c <rclc_support_init_with_options+0x5c>
 800d31a:	461d      	mov	r5, r3
 800d31c:	b333      	cbz	r3, 800d36c <rclc_support_init_with_options+0x5c>
 800d31e:	b32e      	cbz	r6, 800d36c <rclc_support_init_with_options+0x5c>
 800d320:	46e9      	mov	r9, sp
 800d322:	4604      	mov	r4, r0
 800d324:	4648      	mov	r0, r9
 800d326:	460f      	mov	r7, r1
 800d328:	4690      	mov	r8, r2
 800d32a:	f004 ff4f 	bl	80121cc <rcl_get_zero_initialized_context>
 800d32e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d332:	462a      	mov	r2, r5
 800d334:	e884 0003 	stmia.w	r4, {r0, r1}
 800d338:	4623      	mov	r3, r4
 800d33a:	4641      	mov	r1, r8
 800d33c:	4638      	mov	r0, r7
 800d33e:	f004 ffb5 	bl	80122ac <rcl_init>
 800d342:	4605      	mov	r5, r0
 800d344:	b960      	cbnz	r0, 800d360 <rclc_support_init_with_options+0x50>
 800d346:	60a6      	str	r6, [r4, #8]
 800d348:	4632      	mov	r2, r6
 800d34a:	f104 010c 	add.w	r1, r4, #12
 800d34e:	2003      	movs	r0, #3
 800d350:	f005 fd02 	bl	8012d58 <rcl_clock_init>
 800d354:	4605      	mov	r5, r0
 800d356:	b918      	cbnz	r0, 800d360 <rclc_support_init_with_options+0x50>
 800d358:	4628      	mov	r0, r5
 800d35a:	b003      	add	sp, #12
 800d35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d360:	f000 f912 	bl	800d588 <rcutils_reset_error>
 800d364:	4628      	mov	r0, r5
 800d366:	b003      	add	sp, #12
 800d368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d36c:	250b      	movs	r5, #11
 800d36e:	4628      	mov	r0, r5
 800d370:	b003      	add	sp, #12
 800d372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d376:	bf00      	nop

0800d378 <rclc_node_init_default>:
 800d378:	b3b8      	cbz	r0, 800d3ea <rclc_node_init_default+0x72>
 800d37a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d37e:	460d      	mov	r5, r1
 800d380:	b0a1      	sub	sp, #132	@ 0x84
 800d382:	b329      	cbz	r1, 800d3d0 <rclc_node_init_default+0x58>
 800d384:	4616      	mov	r6, r2
 800d386:	b31a      	cbz	r2, 800d3d0 <rclc_node_init_default+0x58>
 800d388:	461f      	mov	r7, r3
 800d38a:	b30b      	cbz	r3, 800d3d0 <rclc_node_init_default+0x58>
 800d38c:	f10d 0810 	add.w	r8, sp, #16
 800d390:	4604      	mov	r4, r0
 800d392:	4640      	mov	r0, r8
 800d394:	f005 f8b0 	bl	80124f8 <rcl_get_zero_initialized_node>
 800d398:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d39c:	f10d 0918 	add.w	r9, sp, #24
 800d3a0:	e884 0003 	stmia.w	r4, {r0, r1}
 800d3a4:	4648      	mov	r0, r9
 800d3a6:	f005 fa1f 	bl	80127e8 <rcl_node_get_default_options>
 800d3aa:	4640      	mov	r0, r8
 800d3ac:	f005 f8a4 	bl	80124f8 <rcl_get_zero_initialized_node>
 800d3b0:	f8cd 9000 	str.w	r9, [sp]
 800d3b4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	e884 0003 	stmia.w	r4, {r0, r1}
 800d3be:	4632      	mov	r2, r6
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f005 f8a2 	bl	801250c <rcl_node_init>
 800d3c8:	b930      	cbnz	r0, 800d3d8 <rclc_node_init_default+0x60>
 800d3ca:	b021      	add	sp, #132	@ 0x84
 800d3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d0:	200b      	movs	r0, #11
 800d3d2:	b021      	add	sp, #132	@ 0x84
 800d3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d8:	9003      	str	r0, [sp, #12]
 800d3da:	f000 f8d5 	bl	800d588 <rcutils_reset_error>
 800d3de:	f000 f8d3 	bl	800d588 <rcutils_reset_error>
 800d3e2:	9803      	ldr	r0, [sp, #12]
 800d3e4:	b021      	add	sp, #132	@ 0x84
 800d3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ea:	200b      	movs	r0, #11
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop

0800d3f0 <rclc_publisher_init_default>:
 800d3f0:	b368      	cbz	r0, 800d44e <rclc_publisher_init_default+0x5e>
 800d3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f6:	460d      	mov	r5, r1
 800d3f8:	b0a0      	sub	sp, #128	@ 0x80
 800d3fa:	b321      	cbz	r1, 800d446 <rclc_publisher_init_default+0x56>
 800d3fc:	4616      	mov	r6, r2
 800d3fe:	b312      	cbz	r2, 800d446 <rclc_publisher_init_default+0x56>
 800d400:	461f      	mov	r7, r3
 800d402:	b303      	cbz	r3, 800d446 <rclc_publisher_init_default+0x56>
 800d404:	4604      	mov	r4, r0
 800d406:	f7ff f859 	bl	800c4bc <rcl_get_zero_initialized_publisher>
 800d40a:	f10d 0810 	add.w	r8, sp, #16
 800d40e:	6020      	str	r0, [r4, #0]
 800d410:	4640      	mov	r0, r8
 800d412:	f7ff f8ef 	bl	800c5f4 <rcl_publisher_get_default_options>
 800d416:	490f      	ldr	r1, [pc, #60]	@ (800d454 <rclc_publisher_init_default+0x64>)
 800d418:	2250      	movs	r2, #80	@ 0x50
 800d41a:	4640      	mov	r0, r8
 800d41c:	f00a fd95 	bl	8017f4a <memcpy>
 800d420:	f8cd 8000 	str.w	r8, [sp]
 800d424:	463b      	mov	r3, r7
 800d426:	4632      	mov	r2, r6
 800d428:	4629      	mov	r1, r5
 800d42a:	4620      	mov	r0, r4
 800d42c:	f7ff f84c 	bl	800c4c8 <rcl_publisher_init>
 800d430:	b910      	cbnz	r0, 800d438 <rclc_publisher_init_default+0x48>
 800d432:	b020      	add	sp, #128	@ 0x80
 800d434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d438:	9003      	str	r0, [sp, #12]
 800d43a:	f000 f8a5 	bl	800d588 <rcutils_reset_error>
 800d43e:	9803      	ldr	r0, [sp, #12]
 800d440:	b020      	add	sp, #128	@ 0x80
 800d442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d446:	200b      	movs	r0, #11
 800d448:	b020      	add	sp, #128	@ 0x80
 800d44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d44e:	200b      	movs	r0, #11
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	08019098 	.word	0x08019098

0800d458 <rclc_timer_init_default>:
 800d458:	b360      	cbz	r0, 800d4b4 <rclc_timer_init_default+0x5c>
 800d45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45e:	460e      	mov	r6, r1
 800d460:	b08a      	sub	sp, #40	@ 0x28
 800d462:	b319      	cbz	r1, 800d4ac <rclc_timer_init_default+0x54>
 800d464:	4690      	mov	r8, r2
 800d466:	461f      	mov	r7, r3
 800d468:	4605      	mov	r5, r0
 800d46a:	f005 fe53 	bl	8013114 <rcl_get_zero_initialized_timer>
 800d46e:	68b4      	ldr	r4, [r6, #8]
 800d470:	6028      	str	r0, [r5, #0]
 800d472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d474:	f10d 0c0c 	add.w	ip, sp, #12
 800d478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	f8cc 3000 	str.w	r3, [ip]
 800d482:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d484:	9302      	str	r3, [sp, #8]
 800d486:	e9cd 8700 	strd	r8, r7, [sp]
 800d48a:	4628      	mov	r0, r5
 800d48c:	4632      	mov	r2, r6
 800d48e:	f106 010c 	add.w	r1, r6, #12
 800d492:	f005 fe45 	bl	8013120 <rcl_timer_init>
 800d496:	b910      	cbnz	r0, 800d49e <rclc_timer_init_default+0x46>
 800d498:	b00a      	add	sp, #40	@ 0x28
 800d49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49e:	9009      	str	r0, [sp, #36]	@ 0x24
 800d4a0:	f000 f872 	bl	800d588 <rcutils_reset_error>
 800d4a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4a6:	b00a      	add	sp, #40	@ 0x28
 800d4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ac:	200b      	movs	r0, #11
 800d4ae:	b00a      	add	sp, #40	@ 0x28
 800d4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b4:	200b      	movs	r0, #11
 800d4b6:	4770      	bx	lr

0800d4b8 <__default_zero_allocate>:
 800d4b8:	f00a b894 	b.w	80175e4 <calloc>

0800d4bc <__default_reallocate>:
 800d4bc:	f00a ba20 	b.w	8017900 <realloc>

0800d4c0 <__default_deallocate>:
 800d4c0:	f00a b8fc 	b.w	80176bc <free>

0800d4c4 <__default_allocate>:
 800d4c4:	f00a b8f2 	b.w	80176ac <malloc>

0800d4c8 <rcutils_get_zero_initialized_allocator>:
 800d4c8:	b510      	push	{r4, lr}
 800d4ca:	4c05      	ldr	r4, [pc, #20]	@ (800d4e0 <rcutils_get_zero_initialized_allocator+0x18>)
 800d4cc:	4686      	mov	lr, r0
 800d4ce:	4684      	mov	ip, r0
 800d4d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	f8cc 3000 	str.w	r3, [ip]
 800d4dc:	4670      	mov	r0, lr
 800d4de:	bd10      	pop	{r4, pc}
 800d4e0:	080190e8 	.word	0x080190e8

0800d4e4 <rcutils_set_default_allocator>:
 800d4e4:	b1a8      	cbz	r0, 800d512 <rcutils_set_default_allocator+0x2e>
 800d4e6:	6802      	ldr	r2, [r0, #0]
 800d4e8:	b1a2      	cbz	r2, 800d514 <rcutils_set_default_allocator+0x30>
 800d4ea:	6841      	ldr	r1, [r0, #4]
 800d4ec:	b1a1      	cbz	r1, 800d518 <rcutils_set_default_allocator+0x34>
 800d4ee:	b410      	push	{r4}
 800d4f0:	68c4      	ldr	r4, [r0, #12]
 800d4f2:	b164      	cbz	r4, 800d50e <rcutils_set_default_allocator+0x2a>
 800d4f4:	6880      	ldr	r0, [r0, #8]
 800d4f6:	b138      	cbz	r0, 800d508 <rcutils_set_default_allocator+0x24>
 800d4f8:	4b08      	ldr	r3, [pc, #32]	@ (800d51c <rcutils_set_default_allocator+0x38>)
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d502:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d506:	2001      	movs	r0, #1
 800d508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	4620      	mov	r0, r4
 800d510:	e7fa      	b.n	800d508 <rcutils_set_default_allocator+0x24>
 800d512:	4770      	bx	lr
 800d514:	4610      	mov	r0, r2
 800d516:	4770      	bx	lr
 800d518:	4608      	mov	r0, r1
 800d51a:	4770      	bx	lr
 800d51c:	200001bc 	.word	0x200001bc

0800d520 <rcutils_get_default_allocator>:
 800d520:	b510      	push	{r4, lr}
 800d522:	4c05      	ldr	r4, [pc, #20]	@ (800d538 <rcutils_get_default_allocator+0x18>)
 800d524:	4686      	mov	lr, r0
 800d526:	4684      	mov	ip, r0
 800d528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d52a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	f8cc 3000 	str.w	r3, [ip]
 800d534:	4670      	mov	r0, lr
 800d536:	bd10      	pop	{r4, pc}
 800d538:	200001bc 	.word	0x200001bc

0800d53c <rcutils_allocator_is_valid>:
 800d53c:	b158      	cbz	r0, 800d556 <rcutils_allocator_is_valid+0x1a>
 800d53e:	6803      	ldr	r3, [r0, #0]
 800d540:	b143      	cbz	r3, 800d554 <rcutils_allocator_is_valid+0x18>
 800d542:	6843      	ldr	r3, [r0, #4]
 800d544:	b133      	cbz	r3, 800d554 <rcutils_allocator_is_valid+0x18>
 800d546:	68c3      	ldr	r3, [r0, #12]
 800d548:	b123      	cbz	r3, 800d554 <rcutils_allocator_is_valid+0x18>
 800d54a:	6880      	ldr	r0, [r0, #8]
 800d54c:	3800      	subs	r0, #0
 800d54e:	bf18      	it	ne
 800d550:	2001      	movne	r0, #1
 800d552:	4770      	bx	lr
 800d554:	4618      	mov	r0, r3
 800d556:	4770      	bx	lr

0800d558 <rcutils_get_error_string>:
 800d558:	4b06      	ldr	r3, [pc, #24]	@ (800d574 <rcutils_get_error_string+0x1c>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	b13b      	cbz	r3, 800d56e <rcutils_get_error_string+0x16>
 800d55e:	4b06      	ldr	r3, [pc, #24]	@ (800d578 <rcutils_get_error_string+0x20>)
 800d560:	781a      	ldrb	r2, [r3, #0]
 800d562:	b90a      	cbnz	r2, 800d568 <rcutils_get_error_string+0x10>
 800d564:	2201      	movs	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]
 800d568:	4b04      	ldr	r3, [pc, #16]	@ (800d57c <rcutils_get_error_string+0x24>)
 800d56a:	7818      	ldrb	r0, [r3, #0]
 800d56c:	4770      	bx	lr
 800d56e:	4b04      	ldr	r3, [pc, #16]	@ (800d580 <rcutils_get_error_string+0x28>)
 800d570:	7818      	ldrb	r0, [r3, #0]
 800d572:	4770      	bx	lr
 800d574:	200064b0 	.word	0x200064b0
 800d578:	200064c9 	.word	0x200064c9
 800d57c:	200064c8 	.word	0x200064c8
 800d580:	080190fc 	.word	0x080190fc
 800d584:	00000000 	.word	0x00000000

0800d588 <rcutils_reset_error>:
 800d588:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d5a8 <rcutils_reset_error+0x20>
 800d58c:	4a08      	ldr	r2, [pc, #32]	@ (800d5b0 <rcutils_reset_error+0x28>)
 800d58e:	4809      	ldr	r0, [pc, #36]	@ (800d5b4 <rcutils_reset_error+0x2c>)
 800d590:	4909      	ldr	r1, [pc, #36]	@ (800d5b8 <rcutils_reset_error+0x30>)
 800d592:	2300      	movs	r3, #0
 800d594:	8013      	strh	r3, [r2, #0]
 800d596:	ed82 7b02 	vstr	d7, [r2, #8]
 800d59a:	4a08      	ldr	r2, [pc, #32]	@ (800d5bc <rcutils_reset_error+0x34>)
 800d59c:	7003      	strb	r3, [r0, #0]
 800d59e:	700b      	strb	r3, [r1, #0]
 800d5a0:	7013      	strb	r3, [r2, #0]
 800d5a2:	4770      	bx	lr
 800d5a4:	f3af 8000 	nop.w
	...
 800d5b0:	200064b8 	.word	0x200064b8
 800d5b4:	200064c9 	.word	0x200064c9
 800d5b8:	200064c8 	.word	0x200064c8
 800d5bc:	200064b0 	.word	0x200064b0

0800d5c0 <rcutils_system_time_now>:
 800d5c0:	b308      	cbz	r0, 800d606 <rcutils_system_time_now+0x46>
 800d5c2:	b570      	push	{r4, r5, r6, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4669      	mov	r1, sp
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	f7f4 fad8 	bl	8001b80 <clock_gettime>
 800d5d0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d5d4:	2d00      	cmp	r5, #0
 800d5d6:	db13      	blt.n	800d600 <rcutils_system_time_now+0x40>
 800d5d8:	9902      	ldr	r1, [sp, #8]
 800d5da:	2900      	cmp	r1, #0
 800d5dc:	db0d      	blt.n	800d5fa <rcutils_system_time_now+0x3a>
 800d5de:	4e0b      	ldr	r6, [pc, #44]	@ (800d60c <rcutils_system_time_now+0x4c>)
 800d5e0:	fba3 3206 	umull	r3, r2, r3, r6
 800d5e4:	185b      	adds	r3, r3, r1
 800d5e6:	fb06 2205 	mla	r2, r6, r5, r2
 800d5ea:	f04f 0000 	mov.w	r0, #0
 800d5ee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d5f2:	e9c4 3200 	strd	r3, r2, [r4]
 800d5f6:	b004      	add	sp, #16
 800d5f8:	bd70      	pop	{r4, r5, r6, pc}
 800d5fa:	ea53 0205 	orrs.w	r2, r3, r5
 800d5fe:	d1ee      	bne.n	800d5de <rcutils_system_time_now+0x1e>
 800d600:	2002      	movs	r0, #2
 800d602:	b004      	add	sp, #16
 800d604:	bd70      	pop	{r4, r5, r6, pc}
 800d606:	200b      	movs	r0, #11
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	3b9aca00 	.word	0x3b9aca00

0800d610 <rcutils_steady_time_now>:
 800d610:	b308      	cbz	r0, 800d656 <rcutils_steady_time_now+0x46>
 800d612:	b570      	push	{r4, r5, r6, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	4604      	mov	r4, r0
 800d618:	4669      	mov	r1, sp
 800d61a:	2000      	movs	r0, #0
 800d61c:	f7f4 fab0 	bl	8001b80 <clock_gettime>
 800d620:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d624:	2d00      	cmp	r5, #0
 800d626:	db13      	blt.n	800d650 <rcutils_steady_time_now+0x40>
 800d628:	9902      	ldr	r1, [sp, #8]
 800d62a:	2900      	cmp	r1, #0
 800d62c:	db0d      	blt.n	800d64a <rcutils_steady_time_now+0x3a>
 800d62e:	4e0b      	ldr	r6, [pc, #44]	@ (800d65c <rcutils_steady_time_now+0x4c>)
 800d630:	fba3 3206 	umull	r3, r2, r3, r6
 800d634:	185b      	adds	r3, r3, r1
 800d636:	fb06 2205 	mla	r2, r6, r5, r2
 800d63a:	f04f 0000 	mov.w	r0, #0
 800d63e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d642:	e9c4 3200 	strd	r3, r2, [r4]
 800d646:	b004      	add	sp, #16
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	ea53 0205 	orrs.w	r2, r3, r5
 800d64e:	d1ee      	bne.n	800d62e <rcutils_steady_time_now+0x1e>
 800d650:	2002      	movs	r0, #2
 800d652:	b004      	add	sp, #16
 800d654:	bd70      	pop	{r4, r5, r6, pc}
 800d656:	200b      	movs	r0, #11
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	3b9aca00 	.word	0x3b9aca00

0800d660 <rmw_get_zero_initialized_init_options>:
 800d660:	b510      	push	{r4, lr}
 800d662:	2238      	movs	r2, #56	@ 0x38
 800d664:	4604      	mov	r4, r0
 800d666:	2100      	movs	r1, #0
 800d668:	f00a fba6 	bl	8017db8 <memset>
 800d66c:	f104 0010 	add.w	r0, r4, #16
 800d670:	f000 f80a 	bl	800d688 <rmw_get_default_security_options>
 800d674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d678:	60e3      	str	r3, [r4, #12]
 800d67a:	4620      	mov	r0, r4
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	bf00      	nop

0800d680 <rmw_get_default_publisher_options>:
 800d680:	2200      	movs	r2, #0
 800d682:	6002      	str	r2, [r0, #0]
 800d684:	7102      	strb	r2, [r0, #4]
 800d686:	4770      	bx	lr

0800d688 <rmw_get_default_security_options>:
 800d688:	2200      	movs	r2, #0
 800d68a:	7002      	strb	r2, [r0, #0]
 800d68c:	6042      	str	r2, [r0, #4]
 800d68e:	4770      	bx	lr

0800d690 <rmw_uros_set_custom_transport>:
 800d690:	b470      	push	{r4, r5, r6}
 800d692:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d696:	b162      	cbz	r2, 800d6b2 <rmw_uros_set_custom_transport+0x22>
 800d698:	b15b      	cbz	r3, 800d6b2 <rmw_uros_set_custom_transport+0x22>
 800d69a:	b155      	cbz	r5, 800d6b2 <rmw_uros_set_custom_transport+0x22>
 800d69c:	b14e      	cbz	r6, 800d6b2 <rmw_uros_set_custom_transport+0x22>
 800d69e:	4c06      	ldr	r4, [pc, #24]	@ (800d6b8 <rmw_uros_set_custom_transport+0x28>)
 800d6a0:	7020      	strb	r0, [r4, #0]
 800d6a2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d6a6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d6aa:	6166      	str	r6, [r4, #20]
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	bc70      	pop	{r4, r5, r6}
 800d6b0:	4770      	bx	lr
 800d6b2:	200b      	movs	r0, #11
 800d6b4:	bc70      	pop	{r4, r5, r6}
 800d6b6:	4770      	bx	lr
 800d6b8:	200064cc 	.word	0x200064cc

0800d6bc <rmw_init_options_init>:
 800d6bc:	b084      	sub	sp, #16
 800d6be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c0:	b083      	sub	sp, #12
 800d6c2:	ad09      	add	r5, sp, #36	@ 0x24
 800d6c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d6c8:	b130      	cbz	r0, 800d6d8 <rmw_init_options_init+0x1c>
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f7ff ff35 	bl	800d53c <rcutils_allocator_is_valid>
 800d6d2:	b108      	cbz	r0, 800d6d8 <rmw_init_options_init+0x1c>
 800d6d4:	68a6      	ldr	r6, [r4, #8]
 800d6d6:	b12e      	cbz	r6, 800d6e4 <rmw_init_options_init+0x28>
 800d6d8:	200b      	movs	r0, #11
 800d6da:	b003      	add	sp, #12
 800d6dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d6e0:	b004      	add	sp, #16
 800d6e2:	4770      	bx	lr
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e9c4 2300 	strd	r2, r3, [r4]
 800d6ec:	4b22      	ldr	r3, [pc, #136]	@ (800d778 <rmw_init_options_init+0xbc>)
 800d6ee:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d788 <rmw_init_options_init+0xcc>
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	60a3      	str	r3, [r4, #8]
 800d6f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6f8:	f104 0c20 	add.w	ip, r4, #32
 800d6fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d700:	466f      	mov	r7, sp
 800d702:	682b      	ldr	r3, [r5, #0]
 800d704:	f8cc 3000 	str.w	r3, [ip]
 800d708:	4638      	mov	r0, r7
 800d70a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d70e:	60e6      	str	r6, [r4, #12]
 800d710:	f7ff ffba 	bl	800d688 <rmw_get_default_security_options>
 800d714:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d718:	f104 0310 	add.w	r3, r4, #16
 800d71c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d720:	2203      	movs	r2, #3
 800d722:	4816      	ldr	r0, [pc, #88]	@ (800d77c <rmw_init_options_init+0xc0>)
 800d724:	4916      	ldr	r1, [pc, #88]	@ (800d780 <rmw_init_options_init+0xc4>)
 800d726:	7626      	strb	r6, [r4, #24]
 800d728:	f000 fe9c 	bl	800e464 <rmw_uxrce_init_init_options_impl_memory>
 800d72c:	4813      	ldr	r0, [pc, #76]	@ (800d77c <rmw_init_options_init+0xc0>)
 800d72e:	f008 f87b 	bl	8015828 <get_memory>
 800d732:	b1f0      	cbz	r0, 800d772 <rmw_init_options_init+0xb6>
 800d734:	4a13      	ldr	r2, [pc, #76]	@ (800d784 <rmw_init_options_init+0xc8>)
 800d736:	6883      	ldr	r3, [r0, #8]
 800d738:	6851      	ldr	r1, [r2, #4]
 800d73a:	7810      	ldrb	r0, [r2, #0]
 800d73c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d73e:	7418      	strb	r0, [r3, #16]
 800d740:	6159      	str	r1, [r3, #20]
 800d742:	68d1      	ldr	r1, [r2, #12]
 800d744:	61d9      	str	r1, [r3, #28]
 800d746:	6911      	ldr	r1, [r2, #16]
 800d748:	6219      	str	r1, [r3, #32]
 800d74a:	6951      	ldr	r1, [r2, #20]
 800d74c:	6892      	ldr	r2, [r2, #8]
 800d74e:	619a      	str	r2, [r3, #24]
 800d750:	6259      	str	r1, [r3, #36]	@ 0x24
 800d752:	f003 fb5b 	bl	8010e0c <uxr_nanos>
 800d756:	f00a f867 	bl	8017828 <srand>
 800d75a:	f00a f893 	bl	8017884 <rand>
 800d75e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d760:	6298      	str	r0, [r3, #40]	@ 0x28
 800d762:	2800      	cmp	r0, #0
 800d764:	d0f9      	beq.n	800d75a <rmw_init_options_init+0x9e>
 800d766:	2000      	movs	r0, #0
 800d768:	b003      	add	sp, #12
 800d76a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d76e:	b004      	add	sp, #16
 800d770:	4770      	bx	lr
 800d772:	2001      	movs	r0, #1
 800d774:	e7b1      	b.n	800d6da <rmw_init_options_init+0x1e>
 800d776:	bf00      	nop
 800d778:	080198a8 	.word	0x080198a8
 800d77c:	2000ade4 	.word	0x2000ade4
 800d780:	20006680 	.word	0x20006680
 800d784:	200064cc 	.word	0x200064cc
 800d788:	08019100 	.word	0x08019100

0800d78c <rmw_init_options_copy>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	b158      	cbz	r0, 800d7a8 <rmw_init_options_copy+0x1c>
 800d790:	460d      	mov	r5, r1
 800d792:	b149      	cbz	r1, 800d7a8 <rmw_init_options_copy+0x1c>
 800d794:	4604      	mov	r4, r0
 800d796:	6880      	ldr	r0, [r0, #8]
 800d798:	b120      	cbz	r0, 800d7a4 <rmw_init_options_copy+0x18>
 800d79a:	4b1e      	ldr	r3, [pc, #120]	@ (800d814 <rmw_init_options_copy+0x88>)
 800d79c:	6819      	ldr	r1, [r3, #0]
 800d79e:	f7f2 fd3f 	bl	8000220 <strcmp>
 800d7a2:	bb90      	cbnz	r0, 800d80a <rmw_init_options_copy+0x7e>
 800d7a4:	68ab      	ldr	r3, [r5, #8]
 800d7a6:	b113      	cbz	r3, 800d7ae <rmw_init_options_copy+0x22>
 800d7a8:	250b      	movs	r5, #11
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	bd70      	pop	{r4, r5, r6, pc}
 800d7ae:	4623      	mov	r3, r4
 800d7b0:	462a      	mov	r2, r5
 800d7b2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d7b6:	f8d3 c000 	ldr.w	ip, [r3]
 800d7ba:	6858      	ldr	r0, [r3, #4]
 800d7bc:	6899      	ldr	r1, [r3, #8]
 800d7be:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d7c2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d7c6:	3310      	adds	r3, #16
 800d7c8:	42b3      	cmp	r3, r6
 800d7ca:	f8c2 c000 	str.w	ip, [r2]
 800d7ce:	6050      	str	r0, [r2, #4]
 800d7d0:	6091      	str	r1, [r2, #8]
 800d7d2:	f102 0210 	add.w	r2, r2, #16
 800d7d6:	d1ee      	bne.n	800d7b6 <rmw_init_options_copy+0x2a>
 800d7d8:	6819      	ldr	r1, [r3, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	480e      	ldr	r0, [pc, #56]	@ (800d818 <rmw_init_options_copy+0x8c>)
 800d7de:	6053      	str	r3, [r2, #4]
 800d7e0:	6011      	str	r1, [r2, #0]
 800d7e2:	f008 f821 	bl	8015828 <get_memory>
 800d7e6:	b198      	cbz	r0, 800d810 <rmw_init_options_copy+0x84>
 800d7e8:	6883      	ldr	r3, [r0, #8]
 800d7ea:	636b      	str	r3, [r5, #52]	@ 0x34
 800d7ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d7ee:	f102 0c10 	add.w	ip, r2, #16
 800d7f2:	f103 0410 	add.w	r4, r3, #16
 800d7f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7fc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d800:	2500      	movs	r5, #0
 800d802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d806:	4628      	mov	r0, r5
 800d808:	bd70      	pop	{r4, r5, r6, pc}
 800d80a:	250c      	movs	r5, #12
 800d80c:	4628      	mov	r0, r5
 800d80e:	bd70      	pop	{r4, r5, r6, pc}
 800d810:	2501      	movs	r5, #1
 800d812:	e7ca      	b.n	800d7aa <rmw_init_options_copy+0x1e>
 800d814:	080198a8 	.word	0x080198a8
 800d818:	2000ade4 	.word	0x2000ade4

0800d81c <rmw_init_options_fini>:
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d03d      	beq.n	800d89c <rmw_init_options_fini+0x80>
 800d820:	b510      	push	{r4, lr}
 800d822:	4604      	mov	r4, r0
 800d824:	b08e      	sub	sp, #56	@ 0x38
 800d826:	3020      	adds	r0, #32
 800d828:	f7ff fe88 	bl	800d53c <rcutils_allocator_is_valid>
 800d82c:	b360      	cbz	r0, 800d888 <rmw_init_options_fini+0x6c>
 800d82e:	68a0      	ldr	r0, [r4, #8]
 800d830:	b120      	cbz	r0, 800d83c <rmw_init_options_fini+0x20>
 800d832:	4b1c      	ldr	r3, [pc, #112]	@ (800d8a4 <rmw_init_options_fini+0x88>)
 800d834:	6819      	ldr	r1, [r3, #0]
 800d836:	f7f2 fcf3 	bl	8000220 <strcmp>
 800d83a:	bb68      	cbnz	r0, 800d898 <rmw_init_options_fini+0x7c>
 800d83c:	4b1a      	ldr	r3, [pc, #104]	@ (800d8a8 <rmw_init_options_fini+0x8c>)
 800d83e:	6819      	ldr	r1, [r3, #0]
 800d840:	b331      	cbz	r1, 800d890 <rmw_init_options_fini+0x74>
 800d842:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d844:	e001      	b.n	800d84a <rmw_init_options_fini+0x2e>
 800d846:	6849      	ldr	r1, [r1, #4]
 800d848:	b311      	cbz	r1, 800d890 <rmw_init_options_fini+0x74>
 800d84a:	688b      	ldr	r3, [r1, #8]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d1fa      	bne.n	800d846 <rmw_init_options_fini+0x2a>
 800d850:	4815      	ldr	r0, [pc, #84]	@ (800d8a8 <rmw_init_options_fini+0x8c>)
 800d852:	f007 fff9 	bl	8015848 <put_memory>
 800d856:	4668      	mov	r0, sp
 800d858:	f7ff ff02 	bl	800d660 <rmw_get_zero_initialized_init_options>
 800d85c:	46ee      	mov	lr, sp
 800d85e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d862:	46a4      	mov	ip, r4
 800d864:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d868:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d86c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d870:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d874:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d878:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d87c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d880:	2300      	movs	r3, #0
 800d882:	4618      	mov	r0, r3
 800d884:	b00e      	add	sp, #56	@ 0x38
 800d886:	bd10      	pop	{r4, pc}
 800d888:	230b      	movs	r3, #11
 800d88a:	4618      	mov	r0, r3
 800d88c:	b00e      	add	sp, #56	@ 0x38
 800d88e:	bd10      	pop	{r4, pc}
 800d890:	2301      	movs	r3, #1
 800d892:	4618      	mov	r0, r3
 800d894:	b00e      	add	sp, #56	@ 0x38
 800d896:	bd10      	pop	{r4, pc}
 800d898:	230c      	movs	r3, #12
 800d89a:	e7f2      	b.n	800d882 <rmw_init_options_fini+0x66>
 800d89c:	230b      	movs	r3, #11
 800d89e:	4618      	mov	r0, r3
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	080198a8 	.word	0x080198a8
 800d8a8:	2000ade4 	.word	0x2000ade4

0800d8ac <rmw_init>:
 800d8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8b0:	b083      	sub	sp, #12
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	f000 80d3 	beq.w	800da5e <rmw_init+0x1b2>
 800d8b8:	460e      	mov	r6, r1
 800d8ba:	2900      	cmp	r1, #0
 800d8bc:	f000 80cf 	beq.w	800da5e <rmw_init+0x1b2>
 800d8c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 80ca 	beq.w	800da5e <rmw_init+0x1b2>
 800d8ca:	4b78      	ldr	r3, [pc, #480]	@ (800daac <rmw_init+0x200>)
 800d8cc:	6880      	ldr	r0, [r0, #8]
 800d8ce:	681f      	ldr	r7, [r3, #0]
 800d8d0:	b128      	cbz	r0, 800d8de <rmw_init+0x32>
 800d8d2:	4639      	mov	r1, r7
 800d8d4:	f7f2 fca4 	bl	8000220 <strcmp>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	f040 80ca 	bne.w	800da72 <rmw_init+0x1c6>
 800d8de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8e2:	4c73      	ldr	r4, [pc, #460]	@ (800dab0 <rmw_init+0x204>)
 800d8e4:	4973      	ldr	r1, [pc, #460]	@ (800dab4 <rmw_init+0x208>)
 800d8e6:	4874      	ldr	r0, [pc, #464]	@ (800dab8 <rmw_init+0x20c>)
 800d8e8:	60b7      	str	r7, [r6, #8]
 800d8ea:	e9c6 2300 	strd	r2, r3, [r6]
 800d8ee:	68eb      	ldr	r3, [r5, #12]
 800d8f0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f000 fd56 	bl	800e3a4 <rmw_uxrce_init_session_memory>
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	4970      	ldr	r1, [pc, #448]	@ (800dabc <rmw_init+0x210>)
 800d8fc:	2204      	movs	r2, #4
 800d8fe:	f000 fd91 	bl	800e424 <rmw_uxrce_init_static_input_buffer_memory>
 800d902:	f04f 0800 	mov.w	r8, #0
 800d906:	486c      	ldr	r0, [pc, #432]	@ (800dab8 <rmw_init+0x20c>)
 800d908:	f884 800d 	strb.w	r8, [r4, #13]
 800d90c:	f007 ff8c 	bl	8015828 <get_memory>
 800d910:	2800      	cmp	r0, #0
 800d912:	f000 80a9 	beq.w	800da68 <rmw_init+0x1bc>
 800d916:	6884      	ldr	r4, [r0, #8]
 800d918:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d91a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d91c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d920:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d924:	9101      	str	r1, [sp, #4]
 800d926:	6a00      	ldr	r0, [r0, #32]
 800d928:	9000      	str	r0, [sp, #0]
 800d92a:	f104 0910 	add.w	r9, r4, #16
 800d92e:	4661      	mov	r1, ip
 800d930:	4648      	mov	r0, r9
 800d932:	f001 fa43 	bl	800edbc <uxr_set_custom_transport_callbacks>
 800d936:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d93a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d93e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d942:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d946:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d94a:	495d      	ldr	r1, [pc, #372]	@ (800dac0 <rmw_init+0x214>)
 800d94c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d950:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d954:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d958:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d95c:	4859      	ldr	r0, [pc, #356]	@ (800dac4 <rmw_init+0x218>)
 800d95e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d962:	2201      	movs	r2, #1
 800d964:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d966:	f000 fcfd 	bl	800e364 <rmw_uxrce_init_node_memory>
 800d96a:	4957      	ldr	r1, [pc, #348]	@ (800dac8 <rmw_init+0x21c>)
 800d96c:	4857      	ldr	r0, [pc, #348]	@ (800dacc <rmw_init+0x220>)
 800d96e:	2205      	movs	r2, #5
 800d970:	f000 fcd8 	bl	800e324 <rmw_uxrce_init_subscription_memory>
 800d974:	4956      	ldr	r1, [pc, #344]	@ (800dad0 <rmw_init+0x224>)
 800d976:	4857      	ldr	r0, [pc, #348]	@ (800dad4 <rmw_init+0x228>)
 800d978:	220a      	movs	r2, #10
 800d97a:	f000 fcb3 	bl	800e2e4 <rmw_uxrce_init_publisher_memory>
 800d97e:	4956      	ldr	r1, [pc, #344]	@ (800dad8 <rmw_init+0x22c>)
 800d980:	4856      	ldr	r0, [pc, #344]	@ (800dadc <rmw_init+0x230>)
 800d982:	2201      	movs	r2, #1
 800d984:	f000 fc6e 	bl	800e264 <rmw_uxrce_init_service_memory>
 800d988:	4955      	ldr	r1, [pc, #340]	@ (800dae0 <rmw_init+0x234>)
 800d98a:	4856      	ldr	r0, [pc, #344]	@ (800dae4 <rmw_init+0x238>)
 800d98c:	2201      	movs	r2, #1
 800d98e:	f000 fc89 	bl	800e2a4 <rmw_uxrce_init_client_memory>
 800d992:	4955      	ldr	r1, [pc, #340]	@ (800dae8 <rmw_init+0x23c>)
 800d994:	4855      	ldr	r0, [pc, #340]	@ (800daec <rmw_init+0x240>)
 800d996:	220f      	movs	r2, #15
 800d998:	f000 fd24 	bl	800e3e4 <rmw_uxrce_init_topic_memory>
 800d99c:	4954      	ldr	r1, [pc, #336]	@ (800daf0 <rmw_init+0x244>)
 800d99e:	4855      	ldr	r0, [pc, #340]	@ (800daf4 <rmw_init+0x248>)
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	f000 fd5f 	bl	800e464 <rmw_uxrce_init_init_options_impl_memory>
 800d9a6:	4954      	ldr	r1, [pc, #336]	@ (800daf8 <rmw_init+0x24c>)
 800d9a8:	4854      	ldr	r0, [pc, #336]	@ (800dafc <rmw_init+0x250>)
 800d9aa:	2204      	movs	r2, #4
 800d9ac:	f000 fd7a 	bl	800e4a4 <rmw_uxrce_init_wait_set_memory>
 800d9b0:	4953      	ldr	r1, [pc, #332]	@ (800db00 <rmw_init+0x254>)
 800d9b2:	4854      	ldr	r0, [pc, #336]	@ (800db04 <rmw_init+0x258>)
 800d9b4:	2204      	movs	r2, #4
 800d9b6:	f000 fd95 	bl	800e4e4 <rmw_uxrce_init_guard_condition_memory>
 800d9ba:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d9bc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d9be:	4642      	mov	r2, r8
 800d9c0:	f000 fc38 	bl	800e234 <rmw_uxrce_transport_init>
 800d9c4:	4607      	mov	r7, r0
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d158      	bne.n	800da7c <rmw_init+0x1d0>
 800d9ca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d9cc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d9d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d9d2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	f001 fbea 	bl	800f1b0 <uxr_init_session>
 800d9dc:	494a      	ldr	r1, [pc, #296]	@ (800db08 <rmw_init+0x25c>)
 800d9de:	4622      	mov	r2, r4
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	f001 fc09 	bl	800f1f8 <uxr_set_topic_callback>
 800d9e6:	4949      	ldr	r1, [pc, #292]	@ (800db0c <rmw_init+0x260>)
 800d9e8:	463a      	mov	r2, r7
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f001 fc00 	bl	800f1f0 <uxr_set_status_callback>
 800d9f0:	4947      	ldr	r1, [pc, #284]	@ (800db10 <rmw_init+0x264>)
 800d9f2:	463a      	mov	r2, r7
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f001 fc03 	bl	800f200 <uxr_set_request_callback>
 800d9fa:	4946      	ldr	r1, [pc, #280]	@ (800db14 <rmw_init+0x268>)
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	4628      	mov	r0, r5
 800da00:	f001 fc02 	bl	800f208 <uxr_set_reply_callback>
 800da04:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800da08:	2304      	movs	r3, #4
 800da0a:	0092      	lsls	r2, r2, #2
 800da0c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800da10:	4628      	mov	r0, r5
 800da12:	f001 fc37 	bl	800f284 <uxr_create_input_reliable_stream>
 800da16:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800da1a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800da1e:	0092      	lsls	r2, r2, #2
 800da20:	2304      	movs	r3, #4
 800da22:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800da26:	4628      	mov	r0, r5
 800da28:	f001 fc04 	bl	800f234 <uxr_create_output_reliable_stream>
 800da2c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800da30:	4628      	mov	r0, r5
 800da32:	f001 fc21 	bl	800f278 <uxr_create_input_best_effort_stream>
 800da36:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800da3a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800da3e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800da42:	3114      	adds	r1, #20
 800da44:	4628      	mov	r0, r5
 800da46:	f001 fbe3 	bl	800f210 <uxr_create_output_best_effort_stream>
 800da4a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800da4e:	4628      	mov	r0, r5
 800da50:	f002 f96e 	bl	800fd30 <uxr_create_session>
 800da54:	b1f8      	cbz	r0, 800da96 <rmw_init+0x1ea>
 800da56:	4638      	mov	r0, r7
 800da58:	b003      	add	sp, #12
 800da5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da5e:	270b      	movs	r7, #11
 800da60:	4638      	mov	r0, r7
 800da62:	b003      	add	sp, #12
 800da64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da68:	2701      	movs	r7, #1
 800da6a:	4638      	mov	r0, r7
 800da6c:	b003      	add	sp, #12
 800da6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da72:	270c      	movs	r7, #12
 800da74:	4638      	mov	r0, r7
 800da76:	b003      	add	sp, #12
 800da78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da7c:	4648      	mov	r0, r9
 800da7e:	f001 f9df 	bl	800ee40 <uxr_close_custom_transport>
 800da82:	480d      	ldr	r0, [pc, #52]	@ (800dab8 <rmw_init+0x20c>)
 800da84:	4621      	mov	r1, r4
 800da86:	f007 fedf 	bl	8015848 <put_memory>
 800da8a:	4638      	mov	r0, r7
 800da8c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800da90:	b003      	add	sp, #12
 800da92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da96:	4648      	mov	r0, r9
 800da98:	f001 f9d2 	bl	800ee40 <uxr_close_custom_transport>
 800da9c:	4806      	ldr	r0, [pc, #24]	@ (800dab8 <rmw_init+0x20c>)
 800da9e:	4621      	mov	r1, r4
 800daa0:	f007 fed2 	bl	8015848 <put_memory>
 800daa4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800daa6:	2701      	movs	r7, #1
 800daa8:	e7d5      	b.n	800da56 <rmw_init+0x1aa>
 800daaa:	bf00      	nop
 800daac:	080198a8 	.word	0x080198a8
 800dab0:	2000ae34 	.word	0x2000ae34
 800dab4:	200070e0 	.word	0x200070e0
 800dab8:	2000ae24 	.word	0x2000ae24
 800dabc:	20008688 	.word	0x20008688
 800dac0:	20006704 	.word	0x20006704
 800dac4:	2000adf4 	.word	0x2000adf4
 800dac8:	2000a788 	.word	0x2000a788
 800dacc:	2000ae44 	.word	0x2000ae44
 800dad0:	200067a8 	.word	0x200067a8
 800dad4:	2000ae04 	.word	0x2000ae04
 800dad8:	20007018 	.word	0x20007018
 800dadc:	2000ae14 	.word	0x2000ae14
 800dae0:	20006538 	.word	0x20006538
 800dae4:	20006524 	.word	0x20006524
 800dae8:	2000abc0 	.word	0x2000abc0
 800daec:	2000ae54 	.word	0x2000ae54
 800daf0:	20006680 	.word	0x20006680
 800daf4:	2000ade4 	.word	0x2000ade4
 800daf8:	2000ad64 	.word	0x2000ad64
 800dafc:	2000ae64 	.word	0x2000ae64
 800db00:	20006600 	.word	0x20006600
 800db04:	2000add4 	.word	0x2000add4
 800db08:	08015661 	.word	0x08015661
 800db0c:	08015659 	.word	0x08015659
 800db10:	080156f9 	.word	0x080156f9
 800db14:	08015795 	.word	0x08015795

0800db18 <rmw_context_fini>:
 800db18:	4b17      	ldr	r3, [pc, #92]	@ (800db78 <rmw_context_fini+0x60>)
 800db1a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800db1c:	b570      	push	{r4, r5, r6, lr}
 800db1e:	681c      	ldr	r4, [r3, #0]
 800db20:	4605      	mov	r5, r0
 800db22:	b334      	cbz	r4, 800db72 <rmw_context_fini+0x5a>
 800db24:	2600      	movs	r6, #0
 800db26:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800db2a:	6902      	ldr	r2, [r0, #16]
 800db2c:	428a      	cmp	r2, r1
 800db2e:	d018      	beq.n	800db62 <rmw_context_fini+0x4a>
 800db30:	2c00      	cmp	r4, #0
 800db32:	d1f8      	bne.n	800db26 <rmw_context_fini+0xe>
 800db34:	b189      	cbz	r1, 800db5a <rmw_context_fini+0x42>
 800db36:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800db3a:	789b      	ldrb	r3, [r3, #2]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800db42:	bf14      	ite	ne
 800db44:	210a      	movne	r1, #10
 800db46:	2100      	moveq	r1, #0
 800db48:	f002 f8ca 	bl	800fce0 <uxr_delete_session_retries>
 800db4c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800db4e:	f000 fce9 	bl	800e524 <rmw_uxrce_fini_session_memory>
 800db52:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800db54:	3010      	adds	r0, #16
 800db56:	f001 f973 	bl	800ee40 <uxr_close_custom_transport>
 800db5a:	2300      	movs	r3, #0
 800db5c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800db5e:	4630      	mov	r0, r6
 800db60:	bd70      	pop	{r4, r5, r6, pc}
 800db62:	3018      	adds	r0, #24
 800db64:	f000 f89c 	bl	800dca0 <rmw_destroy_node>
 800db68:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800db6a:	4606      	mov	r6, r0
 800db6c:	2c00      	cmp	r4, #0
 800db6e:	d1da      	bne.n	800db26 <rmw_context_fini+0xe>
 800db70:	e7e0      	b.n	800db34 <rmw_context_fini+0x1c>
 800db72:	4626      	mov	r6, r4
 800db74:	e7de      	b.n	800db34 <rmw_context_fini+0x1c>
 800db76:	bf00      	nop
 800db78:	2000adf4 	.word	0x2000adf4

0800db7c <create_node>:
 800db7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db80:	b083      	sub	sp, #12
 800db82:	2b00      	cmp	r3, #0
 800db84:	d05f      	beq.n	800dc46 <create_node+0xca>
 800db86:	4606      	mov	r6, r0
 800db88:	4835      	ldr	r0, [pc, #212]	@ (800dc60 <create_node+0xe4>)
 800db8a:	460f      	mov	r7, r1
 800db8c:	4690      	mov	r8, r2
 800db8e:	461d      	mov	r5, r3
 800db90:	f007 fe4a 	bl	8015828 <get_memory>
 800db94:	2800      	cmp	r0, #0
 800db96:	d056      	beq.n	800dc46 <create_node+0xca>
 800db98:	6884      	ldr	r4, [r0, #8]
 800db9a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800db9c:	6123      	str	r3, [r4, #16]
 800db9e:	f007 feab 	bl	80158f8 <rmw_get_implementation_identifier>
 800dba2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800dba6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800dbaa:	f8c4 9020 	str.w	r9, [r4, #32]
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f7f2 fb40 	bl	8000234 <strlen>
 800dbb4:	1c42      	adds	r2, r0, #1
 800dbb6:	2a3c      	cmp	r2, #60	@ 0x3c
 800dbb8:	f104 0518 	add.w	r5, r4, #24
 800dbbc:	d840      	bhi.n	800dc40 <create_node+0xc4>
 800dbbe:	4648      	mov	r0, r9
 800dbc0:	4631      	mov	r1, r6
 800dbc2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800dbc6:	f00a f9c0 	bl	8017f4a <memcpy>
 800dbca:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800dbce:	4638      	mov	r0, r7
 800dbd0:	f7f2 fb30 	bl	8000234 <strlen>
 800dbd4:	1c42      	adds	r2, r0, #1
 800dbd6:	2a3c      	cmp	r2, #60	@ 0x3c
 800dbd8:	d832      	bhi.n	800dc40 <create_node+0xc4>
 800dbda:	4639      	mov	r1, r7
 800dbdc:	4648      	mov	r0, r9
 800dbde:	f00a f9b4 	bl	8017f4a <memcpy>
 800dbe2:	6923      	ldr	r3, [r4, #16]
 800dbe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dbe8:	2101      	movs	r1, #1
 800dbea:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800dbee:	1842      	adds	r2, r0, r1
 800dbf0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800dbf4:	f001 f928 	bl	800ee48 <uxr_object_id>
 800dbf8:	6160      	str	r0, [r4, #20]
 800dbfa:	783b      	ldrb	r3, [r7, #0]
 800dbfc:	2b2f      	cmp	r3, #47	@ 0x2f
 800dbfe:	d127      	bne.n	800dc50 <create_node+0xd4>
 800dc00:	787b      	ldrb	r3, [r7, #1]
 800dc02:	bb2b      	cbnz	r3, 800dc50 <create_node+0xd4>
 800dc04:	4a17      	ldr	r2, [pc, #92]	@ (800dc64 <create_node+0xe8>)
 800dc06:	4818      	ldr	r0, [pc, #96]	@ (800dc68 <create_node+0xec>)
 800dc08:	4633      	mov	r3, r6
 800dc0a:	213c      	movs	r1, #60	@ 0x3c
 800dc0c:	f009 fffa 	bl	8017c04 <sniprintf>
 800dc10:	6920      	ldr	r0, [r4, #16]
 800dc12:	4915      	ldr	r1, [pc, #84]	@ (800dc68 <create_node+0xec>)
 800dc14:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800dc18:	9100      	str	r1, [sp, #0]
 800dc1a:	2106      	movs	r1, #6
 800dc1c:	9101      	str	r1, [sp, #4]
 800dc1e:	6811      	ldr	r1, [r2, #0]
 800dc20:	6962      	ldr	r2, [r4, #20]
 800dc22:	fa1f f388 	uxth.w	r3, r8
 800dc26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc2a:	f000 ff3d 	bl	800eaa8 <uxr_buffer_create_participant_bin>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	6920      	ldr	r0, [r4, #16]
 800dc32:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dc36:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dc3a:	f000 fdeb 	bl	800e814 <run_xrce_session>
 800dc3e:	b918      	cbnz	r0, 800dc48 <create_node+0xcc>
 800dc40:	4628      	mov	r0, r5
 800dc42:	f000 fc75 	bl	800e530 <rmw_uxrce_fini_node_memory>
 800dc46:	2500      	movs	r5, #0
 800dc48:	4628      	mov	r0, r5
 800dc4a:	b003      	add	sp, #12
 800dc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc50:	4a06      	ldr	r2, [pc, #24]	@ (800dc6c <create_node+0xf0>)
 800dc52:	9600      	str	r6, [sp, #0]
 800dc54:	463b      	mov	r3, r7
 800dc56:	213c      	movs	r1, #60	@ 0x3c
 800dc58:	4803      	ldr	r0, [pc, #12]	@ (800dc68 <create_node+0xec>)
 800dc5a:	f009 ffd3 	bl	8017c04 <sniprintf>
 800dc5e:	e7d7      	b.n	800dc10 <create_node+0x94>
 800dc60:	2000adf4 	.word	0x2000adf4
 800dc64:	0801911c 	.word	0x0801911c
 800dc68:	200064e8 	.word	0x200064e8
 800dc6c:	08019104 	.word	0x08019104

0800dc70 <rmw_create_node>:
 800dc70:	b199      	cbz	r1, 800dc9a <rmw_create_node+0x2a>
 800dc72:	780b      	ldrb	r3, [r1, #0]
 800dc74:	468c      	mov	ip, r1
 800dc76:	b183      	cbz	r3, 800dc9a <rmw_create_node+0x2a>
 800dc78:	b410      	push	{r4}
 800dc7a:	4614      	mov	r4, r2
 800dc7c:	b14a      	cbz	r2, 800dc92 <rmw_create_node+0x22>
 800dc7e:	7813      	ldrb	r3, [r2, #0]
 800dc80:	b13b      	cbz	r3, 800dc92 <rmw_create_node+0x22>
 800dc82:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800dc84:	4603      	mov	r3, r0
 800dc86:	4621      	mov	r1, r4
 800dc88:	4660      	mov	r0, ip
 800dc8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc8e:	f7ff bf75 	b.w	800db7c <create_node>
 800dc92:	2000      	movs	r0, #0
 800dc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop

0800dca0 <rmw_destroy_node>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	b328      	cbz	r0, 800dcf0 <rmw_destroy_node+0x50>
 800dca4:	4607      	mov	r7, r0
 800dca6:	6800      	ldr	r0, [r0, #0]
 800dca8:	b120      	cbz	r0, 800dcb4 <rmw_destroy_node+0x14>
 800dcaa:	4b36      	ldr	r3, [pc, #216]	@ (800dd84 <rmw_destroy_node+0xe4>)
 800dcac:	6819      	ldr	r1, [r3, #0]
 800dcae:	f7f2 fab7 	bl	8000220 <strcmp>
 800dcb2:	b9e8      	cbnz	r0, 800dcf0 <rmw_destroy_node+0x50>
 800dcb4:	687d      	ldr	r5, [r7, #4]
 800dcb6:	b1dd      	cbz	r5, 800dcf0 <rmw_destroy_node+0x50>
 800dcb8:	4b33      	ldr	r3, [pc, #204]	@ (800dd88 <rmw_destroy_node+0xe8>)
 800dcba:	681c      	ldr	r4, [r3, #0]
 800dcbc:	2c00      	cmp	r4, #0
 800dcbe:	d05f      	beq.n	800dd80 <rmw_destroy_node+0xe0>
 800dcc0:	2600      	movs	r6, #0
 800dcc2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dcc6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800dcca:	429d      	cmp	r5, r3
 800dccc:	d013      	beq.n	800dcf6 <rmw_destroy_node+0x56>
 800dcce:	2c00      	cmp	r4, #0
 800dcd0:	d1f7      	bne.n	800dcc2 <rmw_destroy_node+0x22>
 800dcd2:	4b2e      	ldr	r3, [pc, #184]	@ (800dd8c <rmw_destroy_node+0xec>)
 800dcd4:	681c      	ldr	r4, [r3, #0]
 800dcd6:	b1c4      	cbz	r4, 800dd0a <rmw_destroy_node+0x6a>
 800dcd8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dcdc:	6a0b      	ldr	r3, [r1, #32]
 800dcde:	429d      	cmp	r5, r3
 800dce0:	d1f9      	bne.n	800dcd6 <rmw_destroy_node+0x36>
 800dce2:	317c      	adds	r1, #124	@ 0x7c
 800dce4:	4638      	mov	r0, r7
 800dce6:	f000 fa45 	bl	800e174 <rmw_destroy_subscription>
 800dcea:	2801      	cmp	r0, #1
 800dcec:	4606      	mov	r6, r0
 800dcee:	d1f2      	bne.n	800dcd6 <rmw_destroy_node+0x36>
 800dcf0:	2601      	movs	r6, #1
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcf6:	3184      	adds	r1, #132	@ 0x84
 800dcf8:	4638      	mov	r0, r7
 800dcfa:	f000 f9a5 	bl	800e048 <rmw_destroy_publisher>
 800dcfe:	2801      	cmp	r0, #1
 800dd00:	4606      	mov	r6, r0
 800dd02:	d0f5      	beq.n	800dcf0 <rmw_destroy_node+0x50>
 800dd04:	2c00      	cmp	r4, #0
 800dd06:	d1dc      	bne.n	800dcc2 <rmw_destroy_node+0x22>
 800dd08:	e7e3      	b.n	800dcd2 <rmw_destroy_node+0x32>
 800dd0a:	4b21      	ldr	r3, [pc, #132]	@ (800dd90 <rmw_destroy_node+0xf0>)
 800dd0c:	681c      	ldr	r4, [r3, #0]
 800dd0e:	b16c      	cbz	r4, 800dd2c <rmw_destroy_node+0x8c>
 800dd10:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dd14:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dd16:	429d      	cmp	r5, r3
 800dd18:	d1f9      	bne.n	800dd0e <rmw_destroy_node+0x6e>
 800dd1a:	317c      	adds	r1, #124	@ 0x7c
 800dd1c:	4638      	mov	r0, r7
 800dd1e:	f000 f9e5 	bl	800e0ec <rmw_destroy_service>
 800dd22:	2801      	cmp	r0, #1
 800dd24:	4606      	mov	r6, r0
 800dd26:	d0e3      	beq.n	800dcf0 <rmw_destroy_node+0x50>
 800dd28:	2c00      	cmp	r4, #0
 800dd2a:	d1f1      	bne.n	800dd10 <rmw_destroy_node+0x70>
 800dd2c:	4b19      	ldr	r3, [pc, #100]	@ (800dd94 <rmw_destroy_node+0xf4>)
 800dd2e:	681c      	ldr	r4, [r3, #0]
 800dd30:	b16c      	cbz	r4, 800dd4e <rmw_destroy_node+0xae>
 800dd32:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dd36:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dd38:	429d      	cmp	r5, r3
 800dd3a:	d1f9      	bne.n	800dd30 <rmw_destroy_node+0x90>
 800dd3c:	317c      	adds	r1, #124	@ 0x7c
 800dd3e:	4638      	mov	r0, r7
 800dd40:	f007 fd96 	bl	8015870 <rmw_destroy_client>
 800dd44:	2801      	cmp	r0, #1
 800dd46:	4606      	mov	r6, r0
 800dd48:	d0d2      	beq.n	800dcf0 <rmw_destroy_node+0x50>
 800dd4a:	2c00      	cmp	r4, #0
 800dd4c:	d1f1      	bne.n	800dd32 <rmw_destroy_node+0x92>
 800dd4e:	6928      	ldr	r0, [r5, #16]
 800dd50:	696a      	ldr	r2, [r5, #20]
 800dd52:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dd56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd5a:	6819      	ldr	r1, [r3, #0]
 800dd5c:	f000 fe58 	bl	800ea10 <uxr_buffer_delete_entity>
 800dd60:	4602      	mov	r2, r0
 800dd62:	6928      	ldr	r0, [r5, #16]
 800dd64:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dd68:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dd6c:	f000 fd52 	bl	800e814 <run_xrce_session>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	bf08      	it	eq
 800dd74:	2602      	moveq	r6, #2
 800dd76:	4638      	mov	r0, r7
 800dd78:	f000 fbda 	bl	800e530 <rmw_uxrce_fini_node_memory>
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd80:	4626      	mov	r6, r4
 800dd82:	e7a6      	b.n	800dcd2 <rmw_destroy_node+0x32>
 800dd84:	080198a8 	.word	0x080198a8
 800dd88:	2000ae04 	.word	0x2000ae04
 800dd8c:	2000ae44 	.word	0x2000ae44
 800dd90:	2000ae14 	.word	0x2000ae14
 800dd94:	20006524 	.word	0x20006524

0800dd98 <rmw_node_get_graph_guard_condition>:
 800dd98:	6843      	ldr	r3, [r0, #4]
 800dd9a:	6918      	ldr	r0, [r3, #16]
 800dd9c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop

0800dda4 <flush_session>:
 800dda4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800dda6:	f001 be53 	b.w	800fa50 <uxr_run_session_until_confirm_delivery>
 800ddaa:	bf00      	nop

0800ddac <rmw_publish>:
 800ddac:	2800      	cmp	r0, #0
 800ddae:	d053      	beq.n	800de58 <rmw_publish+0xac>
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	b08e      	sub	sp, #56	@ 0x38
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	d04b      	beq.n	800de52 <rmw_publish+0xa6>
 800ddba:	4604      	mov	r4, r0
 800ddbc:	6800      	ldr	r0, [r0, #0]
 800ddbe:	f000 fda9 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d045      	beq.n	800de52 <rmw_publish+0xa6>
 800ddc6:	6866      	ldr	r6, [r4, #4]
 800ddc8:	2e00      	cmp	r6, #0
 800ddca:	d042      	beq.n	800de52 <rmw_publish+0xa6>
 800ddcc:	69b4      	ldr	r4, [r6, #24]
 800ddce:	4628      	mov	r0, r5
 800ddd0:	6923      	ldr	r3, [r4, #16]
 800ddd2:	4798      	blx	r3
 800ddd4:	69f3      	ldr	r3, [r6, #28]
 800ddd6:	9005      	str	r0, [sp, #20]
 800ddd8:	b113      	cbz	r3, 800dde0 <rmw_publish+0x34>
 800ddda:	a805      	add	r0, sp, #20
 800dddc:	4798      	blx	r3
 800ddde:	9805      	ldr	r0, [sp, #20]
 800dde0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	9000      	str	r0, [sp, #0]
 800dde8:	6972      	ldr	r2, [r6, #20]
 800ddea:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ddec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ddf0:	ab06      	add	r3, sp, #24
 800ddf2:	f003 f8ab 	bl	8010f4c <uxr_prepare_output_stream>
 800ddf6:	b1d8      	cbz	r0, 800de30 <rmw_publish+0x84>
 800ddf8:	68a3      	ldr	r3, [r4, #8]
 800ddfa:	a906      	add	r1, sp, #24
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	4798      	blx	r3
 800de00:	6a33      	ldr	r3, [r6, #32]
 800de02:	4604      	mov	r4, r0
 800de04:	b10b      	cbz	r3, 800de0a <rmw_publish+0x5e>
 800de06:	a806      	add	r0, sp, #24
 800de08:	4798      	blx	r3
 800de0a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800de0e:	2b01      	cmp	r3, #1
 800de10:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800de14:	d022      	beq.n	800de5c <rmw_publish+0xb0>
 800de16:	6918      	ldr	r0, [r3, #16]
 800de18:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800de1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de1e:	f001 fe17 	bl	800fa50 <uxr_run_session_until_confirm_delivery>
 800de22:	4020      	ands	r0, r4
 800de24:	b2c4      	uxtb	r4, r0
 800de26:	f084 0001 	eor.w	r0, r4, #1
 800de2a:	b2c0      	uxtb	r0, r0
 800de2c:	b00e      	add	sp, #56	@ 0x38
 800de2e:	bd70      	pop	{r4, r5, r6, pc}
 800de30:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800de34:	6918      	ldr	r0, [r3, #16]
 800de36:	9b05      	ldr	r3, [sp, #20]
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	4b0b      	ldr	r3, [pc, #44]	@ (800de68 <rmw_publish+0xbc>)
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	9602      	str	r6, [sp, #8]
 800de40:	6972      	ldr	r2, [r6, #20]
 800de42:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800de44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de48:	ab06      	add	r3, sp, #24
 800de4a:	f003 f8af 	bl	8010fac <uxr_prepare_output_stream_fragmented>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d1d2      	bne.n	800ddf8 <rmw_publish+0x4c>
 800de52:	2001      	movs	r0, #1
 800de54:	b00e      	add	sp, #56	@ 0x38
 800de56:	bd70      	pop	{r4, r5, r6, pc}
 800de58:	2001      	movs	r0, #1
 800de5a:	4770      	bx	lr
 800de5c:	6918      	ldr	r0, [r3, #16]
 800de5e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de62:	f001 fa35 	bl	800f2d0 <uxr_flash_output_streams>
 800de66:	e7de      	b.n	800de26 <rmw_publish+0x7a>
 800de68:	0800dda5 	.word	0x0800dda5

0800de6c <rmw_create_publisher>:
 800de6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	b087      	sub	sp, #28
 800de72:	2800      	cmp	r0, #0
 800de74:	f000 80cc 	beq.w	800e010 <rmw_create_publisher+0x1a4>
 800de78:	460e      	mov	r6, r1
 800de7a:	2900      	cmp	r1, #0
 800de7c:	f000 80c8 	beq.w	800e010 <rmw_create_publisher+0x1a4>
 800de80:	4604      	mov	r4, r0
 800de82:	6800      	ldr	r0, [r0, #0]
 800de84:	4615      	mov	r5, r2
 800de86:	4698      	mov	r8, r3
 800de88:	f000 fd44 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	f000 80bf 	beq.w	800e010 <rmw_create_publisher+0x1a4>
 800de92:	2d00      	cmp	r5, #0
 800de94:	f000 80bc 	beq.w	800e010 <rmw_create_publisher+0x1a4>
 800de98:	782b      	ldrb	r3, [r5, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 80b8 	beq.w	800e010 <rmw_create_publisher+0x1a4>
 800dea0:	f1b8 0f00 	cmp.w	r8, #0
 800dea4:	f000 80b4 	beq.w	800e010 <rmw_create_publisher+0x1a4>
 800dea8:	485c      	ldr	r0, [pc, #368]	@ (800e01c <rmw_create_publisher+0x1b0>)
 800deaa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800deae:	f007 fcbb 	bl	8015828 <get_memory>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	f000 80ac 	beq.w	800e010 <rmw_create_publisher+0x1a4>
 800deb8:	6884      	ldr	r4, [r0, #8]
 800deba:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800debe:	f007 fd1b 	bl	80158f8 <rmw_get_implementation_identifier>
 800dec2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dec6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800deca:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dece:	4628      	mov	r0, r5
 800ded0:	f7f2 f9b0 	bl	8000234 <strlen>
 800ded4:	3001      	adds	r0, #1
 800ded6:	283c      	cmp	r0, #60	@ 0x3c
 800ded8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dedc:	f200 8091 	bhi.w	800e002 <rmw_create_publisher+0x196>
 800dee0:	4a4f      	ldr	r2, [pc, #316]	@ (800e020 <rmw_create_publisher+0x1b4>)
 800dee2:	462b      	mov	r3, r5
 800dee4:	213c      	movs	r1, #60	@ 0x3c
 800dee6:	4650      	mov	r0, sl
 800dee8:	f009 fe8c 	bl	8017c04 <sniprintf>
 800deec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800def0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800def2:	4641      	mov	r1, r8
 800def4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800def8:	2250      	movs	r2, #80	@ 0x50
 800defa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800defe:	f00a f824 	bl	8017f4a <memcpy>
 800df02:	f898 3008 	ldrb.w	r3, [r8, #8]
 800df06:	4947      	ldr	r1, [pc, #284]	@ (800e024 <rmw_create_publisher+0x1b8>)
 800df08:	2b02      	cmp	r3, #2
 800df0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df0e:	bf0c      	ite	eq
 800df10:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800df14:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800df18:	67a3      	str	r3, [r4, #120]	@ 0x78
 800df1a:	2300      	movs	r3, #0
 800df1c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800df20:	4630      	mov	r0, r6
 800df22:	f000 fd05 	bl	800e930 <get_message_typesupport_handle>
 800df26:	2800      	cmp	r0, #0
 800df28:	d06b      	beq.n	800e002 <rmw_create_publisher+0x196>
 800df2a:	6842      	ldr	r2, [r0, #4]
 800df2c:	61a2      	str	r2, [r4, #24]
 800df2e:	2a00      	cmp	r2, #0
 800df30:	d067      	beq.n	800e002 <rmw_create_publisher+0x196>
 800df32:	4629      	mov	r1, r5
 800df34:	4643      	mov	r3, r8
 800df36:	4648      	mov	r0, r9
 800df38:	f007 fce4 	bl	8015904 <create_topic>
 800df3c:	6260      	str	r0, [r4, #36]	@ 0x24
 800df3e:	2800      	cmp	r0, #0
 800df40:	d063      	beq.n	800e00a <rmw_create_publisher+0x19e>
 800df42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df4a:	2103      	movs	r1, #3
 800df4c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800df50:	1c42      	adds	r2, r0, #1
 800df52:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800df56:	f000 ff77 	bl	800ee48 <uxr_object_id>
 800df5a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800df5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df62:	6120      	str	r0, [r4, #16]
 800df64:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800df68:	6910      	ldr	r0, [r2, #16]
 800df6a:	2506      	movs	r5, #6
 800df6c:	9500      	str	r5, [sp, #0]
 800df6e:	6819      	ldr	r1, [r3, #0]
 800df70:	6922      	ldr	r2, [r4, #16]
 800df72:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df7a:	f000 fdfd 	bl	800eb78 <uxr_buffer_create_publisher_bin>
 800df7e:	4602      	mov	r2, r0
 800df80:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df84:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800df88:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800df8c:	f000 fc42 	bl	800e814 <run_xrce_session>
 800df90:	b3b8      	cbz	r0, 800e002 <rmw_create_publisher+0x196>
 800df92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df9a:	2105      	movs	r1, #5
 800df9c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800dfa0:	1c42      	adds	r2, r0, #1
 800dfa2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800dfa6:	f000 ff4f 	bl	800ee48 <uxr_object_id>
 800dfaa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dfae:	6160      	str	r0, [r4, #20]
 800dfb0:	691e      	ldr	r6, [r3, #16]
 800dfb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfb6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800dfba:	f10d 0a10 	add.w	sl, sp, #16
 800dfbe:	4641      	mov	r1, r8
 800dfc0:	4650      	mov	r0, sl
 800dfc2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800dfc6:	f000 fc41 	bl	800e84c <convert_qos_profile>
 800dfca:	9503      	str	r5, [sp, #12]
 800dfcc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dfd0:	9001      	str	r0, [sp, #4]
 800dfd2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dfd6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800dfe0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dfe4:	f8d8 1000 	ldr.w	r1, [r8]
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f000 fdf5 	bl	800ebd8 <uxr_buffer_create_datawriter_bin>
 800dfee:	4602      	mov	r2, r0
 800dff0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dff4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dff8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dffc:	f000 fc0a 	bl	800e814 <run_xrce_session>
 800e000:	b938      	cbnz	r0, 800e012 <rmw_create_publisher+0x1a6>
 800e002:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e004:	b108      	cbz	r0, 800e00a <rmw_create_publisher+0x19e>
 800e006:	f000 fb03 	bl	800e610 <rmw_uxrce_fini_topic_memory>
 800e00a:	4638      	mov	r0, r7
 800e00c:	f000 faa8 	bl	800e560 <rmw_uxrce_fini_publisher_memory>
 800e010:	2700      	movs	r7, #0
 800e012:	4638      	mov	r0, r7
 800e014:	b007      	add	sp, #28
 800e016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e01a:	bf00      	nop
 800e01c:	2000ae04 	.word	0x2000ae04
 800e020:	0801911c 	.word	0x0801911c
 800e024:	08018ef0 	.word	0x08018ef0

0800e028 <rmw_publisher_get_actual_qos>:
 800e028:	b150      	cbz	r0, 800e040 <rmw_publisher_get_actual_qos+0x18>
 800e02a:	b508      	push	{r3, lr}
 800e02c:	460b      	mov	r3, r1
 800e02e:	b149      	cbz	r1, 800e044 <rmw_publisher_get_actual_qos+0x1c>
 800e030:	6841      	ldr	r1, [r0, #4]
 800e032:	2250      	movs	r2, #80	@ 0x50
 800e034:	3128      	adds	r1, #40	@ 0x28
 800e036:	4618      	mov	r0, r3
 800e038:	f009 ff87 	bl	8017f4a <memcpy>
 800e03c:	2000      	movs	r0, #0
 800e03e:	bd08      	pop	{r3, pc}
 800e040:	200b      	movs	r0, #11
 800e042:	4770      	bx	lr
 800e044:	200b      	movs	r0, #11
 800e046:	bd08      	pop	{r3, pc}

0800e048 <rmw_destroy_publisher>:
 800e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04a:	b128      	cbz	r0, 800e058 <rmw_destroy_publisher+0x10>
 800e04c:	4604      	mov	r4, r0
 800e04e:	6800      	ldr	r0, [r0, #0]
 800e050:	460d      	mov	r5, r1
 800e052:	f000 fc5f 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800e056:	b910      	cbnz	r0, 800e05e <rmw_destroy_publisher+0x16>
 800e058:	2401      	movs	r4, #1
 800e05a:	4620      	mov	r0, r4
 800e05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e05e:	6863      	ldr	r3, [r4, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d0f9      	beq.n	800e058 <rmw_destroy_publisher+0x10>
 800e064:	2d00      	cmp	r5, #0
 800e066:	d0f7      	beq.n	800e058 <rmw_destroy_publisher+0x10>
 800e068:	6828      	ldr	r0, [r5, #0]
 800e06a:	f000 fc53 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0f2      	beq.n	800e058 <rmw_destroy_publisher+0x10>
 800e072:	686c      	ldr	r4, [r5, #4]
 800e074:	2c00      	cmp	r4, #0
 800e076:	d0ef      	beq.n	800e058 <rmw_destroy_publisher+0x10>
 800e078:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e07a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e07e:	f007 fc91 	bl	80159a4 <destroy_topic>
 800e082:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e086:	6962      	ldr	r2, [r4, #20]
 800e088:	6918      	ldr	r0, [r3, #16]
 800e08a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e08e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e092:	6819      	ldr	r1, [r3, #0]
 800e094:	f000 fcbc 	bl	800ea10 <uxr_buffer_delete_entity>
 800e098:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e09c:	6922      	ldr	r2, [r4, #16]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	6809      	ldr	r1, [r1, #0]
 800e0a8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e0ac:	f000 fcb0 	bl	800ea10 <uxr_buffer_delete_entity>
 800e0b0:	693e      	ldr	r6, [r7, #16]
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e0b8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e0bc:	4604      	mov	r4, r0
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f000 fba8 	bl	800e814 <run_xrce_session>
 800e0c4:	693e      	ldr	r6, [r7, #16]
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e0cc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f000 fb9e 	bl	800e814 <run_xrce_session>
 800e0d8:	b12c      	cbz	r4, 800e0e6 <rmw_destroy_publisher+0x9e>
 800e0da:	b120      	cbz	r0, 800e0e6 <rmw_destroy_publisher+0x9e>
 800e0dc:	2400      	movs	r4, #0
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f000 fa3e 	bl	800e560 <rmw_uxrce_fini_publisher_memory>
 800e0e4:	e7b9      	b.n	800e05a <rmw_destroy_publisher+0x12>
 800e0e6:	2402      	movs	r4, #2
 800e0e8:	e7f9      	b.n	800e0de <rmw_destroy_publisher+0x96>
 800e0ea:	bf00      	nop

0800e0ec <rmw_destroy_service>:
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	b128      	cbz	r0, 800e0fc <rmw_destroy_service+0x10>
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	6800      	ldr	r0, [r0, #0]
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	f000 fc0d 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800e0fa:	b910      	cbnz	r0, 800e102 <rmw_destroy_service+0x16>
 800e0fc:	2401      	movs	r4, #1
 800e0fe:	4620      	mov	r0, r4
 800e100:	bd70      	pop	{r4, r5, r6, pc}
 800e102:	6863      	ldr	r3, [r4, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d0f9      	beq.n	800e0fc <rmw_destroy_service+0x10>
 800e108:	2d00      	cmp	r5, #0
 800e10a:	d0f7      	beq.n	800e0fc <rmw_destroy_service+0x10>
 800e10c:	6828      	ldr	r0, [r5, #0]
 800e10e:	f000 fc01 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800e112:	2800      	cmp	r0, #0
 800e114:	d0f2      	beq.n	800e0fc <rmw_destroy_service+0x10>
 800e116:	686e      	ldr	r6, [r5, #4]
 800e118:	2e00      	cmp	r6, #0
 800e11a:	d0ef      	beq.n	800e0fc <rmw_destroy_service+0x10>
 800e11c:	6864      	ldr	r4, [r4, #4]
 800e11e:	6932      	ldr	r2, [r6, #16]
 800e120:	6920      	ldr	r0, [r4, #16]
 800e122:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e126:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e12a:	6819      	ldr	r1, [r3, #0]
 800e12c:	f000 febc 	bl	800eea8 <uxr_buffer_cancel_data>
 800e130:	4602      	mov	r2, r0
 800e132:	6920      	ldr	r0, [r4, #16]
 800e134:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e138:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e13c:	f000 fb6a 	bl	800e814 <run_xrce_session>
 800e140:	6920      	ldr	r0, [r4, #16]
 800e142:	6932      	ldr	r2, [r6, #16]
 800e144:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e148:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e14c:	6819      	ldr	r1, [r3, #0]
 800e14e:	f000 fc5f 	bl	800ea10 <uxr_buffer_delete_entity>
 800e152:	4602      	mov	r2, r0
 800e154:	6920      	ldr	r0, [r4, #16]
 800e156:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e15a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e15e:	f000 fb59 	bl	800e814 <run_xrce_session>
 800e162:	2800      	cmp	r0, #0
 800e164:	4628      	mov	r0, r5
 800e166:	bf14      	ite	ne
 800e168:	2400      	movne	r4, #0
 800e16a:	2402      	moveq	r4, #2
 800e16c:	f000 fa24 	bl	800e5b8 <rmw_uxrce_fini_service_memory>
 800e170:	e7c5      	b.n	800e0fe <rmw_destroy_service+0x12>
 800e172:	bf00      	nop

0800e174 <rmw_destroy_subscription>:
 800e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e176:	b128      	cbz	r0, 800e184 <rmw_destroy_subscription+0x10>
 800e178:	4604      	mov	r4, r0
 800e17a:	6800      	ldr	r0, [r0, #0]
 800e17c:	460d      	mov	r5, r1
 800e17e:	f000 fbc9 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800e182:	b910      	cbnz	r0, 800e18a <rmw_destroy_subscription+0x16>
 800e184:	2401      	movs	r4, #1
 800e186:	4620      	mov	r0, r4
 800e188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e18a:	6863      	ldr	r3, [r4, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d0f9      	beq.n	800e184 <rmw_destroy_subscription+0x10>
 800e190:	2d00      	cmp	r5, #0
 800e192:	d0f7      	beq.n	800e184 <rmw_destroy_subscription+0x10>
 800e194:	6828      	ldr	r0, [r5, #0]
 800e196:	f000 fbbd 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d0f2      	beq.n	800e184 <rmw_destroy_subscription+0x10>
 800e19e:	686c      	ldr	r4, [r5, #4]
 800e1a0:	2c00      	cmp	r4, #0
 800e1a2:	d0ef      	beq.n	800e184 <rmw_destroy_subscription+0x10>
 800e1a4:	6a26      	ldr	r6, [r4, #32]
 800e1a6:	6962      	ldr	r2, [r4, #20]
 800e1a8:	6930      	ldr	r0, [r6, #16]
 800e1aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e1ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1b2:	6819      	ldr	r1, [r3, #0]
 800e1b4:	f000 fe78 	bl	800eea8 <uxr_buffer_cancel_data>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	6930      	ldr	r0, [r6, #16]
 800e1bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e1c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e1c4:	f000 fb26 	bl	800e814 <run_xrce_session>
 800e1c8:	69e0      	ldr	r0, [r4, #28]
 800e1ca:	f007 fbeb 	bl	80159a4 <destroy_topic>
 800e1ce:	6a23      	ldr	r3, [r4, #32]
 800e1d0:	6962      	ldr	r2, [r4, #20]
 800e1d2:	6918      	ldr	r0, [r3, #16]
 800e1d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e1d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1dc:	6819      	ldr	r1, [r3, #0]
 800e1de:	f000 fc17 	bl	800ea10 <uxr_buffer_delete_entity>
 800e1e2:	6a23      	ldr	r3, [r4, #32]
 800e1e4:	6922      	ldr	r2, [r4, #16]
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	6809      	ldr	r1, [r1, #0]
 800e1f0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e1f4:	f000 fc0c 	bl	800ea10 <uxr_buffer_delete_entity>
 800e1f8:	6937      	ldr	r7, [r6, #16]
 800e1fa:	4622      	mov	r2, r4
 800e1fc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e200:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e204:	4604      	mov	r4, r0
 800e206:	4638      	mov	r0, r7
 800e208:	f000 fb04 	bl	800e814 <run_xrce_session>
 800e20c:	6936      	ldr	r6, [r6, #16]
 800e20e:	4622      	mov	r2, r4
 800e210:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e214:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e218:	4604      	mov	r4, r0
 800e21a:	4630      	mov	r0, r6
 800e21c:	f000 fafa 	bl	800e814 <run_xrce_session>
 800e220:	b12c      	cbz	r4, 800e22e <rmw_destroy_subscription+0xba>
 800e222:	b120      	cbz	r0, 800e22e <rmw_destroy_subscription+0xba>
 800e224:	2400      	movs	r4, #0
 800e226:	4628      	mov	r0, r5
 800e228:	f000 f9b0 	bl	800e58c <rmw_uxrce_fini_subscription_memory>
 800e22c:	e7ab      	b.n	800e186 <rmw_destroy_subscription+0x12>
 800e22e:	2402      	movs	r4, #2
 800e230:	e7f9      	b.n	800e226 <rmw_destroy_subscription+0xb2>
 800e232:	bf00      	nop

0800e234 <rmw_uxrce_transport_init>:
 800e234:	b508      	push	{r3, lr}
 800e236:	b108      	cbz	r0, 800e23c <rmw_uxrce_transport_init+0x8>
 800e238:	f100 0210 	add.w	r2, r0, #16
 800e23c:	b139      	cbz	r1, 800e24e <rmw_uxrce_transport_init+0x1a>
 800e23e:	6949      	ldr	r1, [r1, #20]
 800e240:	4610      	mov	r0, r2
 800e242:	f000 fdc9 	bl	800edd8 <uxr_init_custom_transport>
 800e246:	f080 0001 	eor.w	r0, r0, #1
 800e24a:	b2c0      	uxtb	r0, r0
 800e24c:	bd08      	pop	{r3, pc}
 800e24e:	4b04      	ldr	r3, [pc, #16]	@ (800e260 <rmw_uxrce_transport_init+0x2c>)
 800e250:	4610      	mov	r0, r2
 800e252:	6859      	ldr	r1, [r3, #4]
 800e254:	f000 fdc0 	bl	800edd8 <uxr_init_custom_transport>
 800e258:	f080 0001 	eor.w	r0, r0, #1
 800e25c:	b2c0      	uxtb	r0, r0
 800e25e:	bd08      	pop	{r3, pc}
 800e260:	200064cc 	.word	0x200064cc

0800e264 <rmw_uxrce_init_service_memory>:
 800e264:	b1e2      	cbz	r2, 800e2a0 <rmw_uxrce_init_service_memory+0x3c>
 800e266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26a:	7b05      	ldrb	r5, [r0, #12]
 800e26c:	4606      	mov	r6, r0
 800e26e:	b9ad      	cbnz	r5, 800e29c <rmw_uxrce_init_service_memory+0x38>
 800e270:	23c8      	movs	r3, #200	@ 0xc8
 800e272:	e9c0 5500 	strd	r5, r5, [r0]
 800e276:	6083      	str	r3, [r0, #8]
 800e278:	f240 1301 	movw	r3, #257	@ 0x101
 800e27c:	4617      	mov	r7, r2
 800e27e:	8183      	strh	r3, [r0, #12]
 800e280:	460c      	mov	r4, r1
 800e282:	46a8      	mov	r8, r5
 800e284:	4621      	mov	r1, r4
 800e286:	4630      	mov	r0, r6
 800e288:	3501      	adds	r5, #1
 800e28a:	f007 fadd 	bl	8015848 <put_memory>
 800e28e:	42af      	cmp	r7, r5
 800e290:	60a4      	str	r4, [r4, #8]
 800e292:	f884 800c 	strb.w	r8, [r4, #12]
 800e296:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e29a:	d1f3      	bne.n	800e284 <rmw_uxrce_init_service_memory+0x20>
 800e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <rmw_uxrce_init_client_memory>:
 800e2a4:	b1e2      	cbz	r2, 800e2e0 <rmw_uxrce_init_client_memory+0x3c>
 800e2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2aa:	7b05      	ldrb	r5, [r0, #12]
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	b9ad      	cbnz	r5, 800e2dc <rmw_uxrce_init_client_memory+0x38>
 800e2b0:	23c8      	movs	r3, #200	@ 0xc8
 800e2b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e2b6:	6083      	str	r3, [r0, #8]
 800e2b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e2bc:	4617      	mov	r7, r2
 800e2be:	8183      	strh	r3, [r0, #12]
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	46a8      	mov	r8, r5
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	f007 fabd 	bl	8015848 <put_memory>
 800e2ce:	42af      	cmp	r7, r5
 800e2d0:	60a4      	str	r4, [r4, #8]
 800e2d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e2d6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e2da:	d1f3      	bne.n	800e2c4 <rmw_uxrce_init_client_memory+0x20>
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop

0800e2e4 <rmw_uxrce_init_publisher_memory>:
 800e2e4:	b1e2      	cbz	r2, 800e320 <rmw_uxrce_init_publisher_memory+0x3c>
 800e2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ea:	7b05      	ldrb	r5, [r0, #12]
 800e2ec:	4606      	mov	r6, r0
 800e2ee:	b9ad      	cbnz	r5, 800e31c <rmw_uxrce_init_publisher_memory+0x38>
 800e2f0:	23d8      	movs	r3, #216	@ 0xd8
 800e2f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e2f6:	6083      	str	r3, [r0, #8]
 800e2f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e2fc:	4617      	mov	r7, r2
 800e2fe:	8183      	strh	r3, [r0, #12]
 800e300:	460c      	mov	r4, r1
 800e302:	46a8      	mov	r8, r5
 800e304:	4621      	mov	r1, r4
 800e306:	4630      	mov	r0, r6
 800e308:	3501      	adds	r5, #1
 800e30a:	f007 fa9d 	bl	8015848 <put_memory>
 800e30e:	42af      	cmp	r7, r5
 800e310:	60a4      	str	r4, [r4, #8]
 800e312:	f884 800c 	strb.w	r8, [r4, #12]
 800e316:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e31a:	d1f3      	bne.n	800e304 <rmw_uxrce_init_publisher_memory+0x20>
 800e31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <rmw_uxrce_init_subscription_memory>:
 800e324:	b1e2      	cbz	r2, 800e360 <rmw_uxrce_init_subscription_memory+0x3c>
 800e326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e32a:	7b05      	ldrb	r5, [r0, #12]
 800e32c:	4606      	mov	r6, r0
 800e32e:	b9ad      	cbnz	r5, 800e35c <rmw_uxrce_init_subscription_memory+0x38>
 800e330:	23d8      	movs	r3, #216	@ 0xd8
 800e332:	e9c0 5500 	strd	r5, r5, [r0]
 800e336:	6083      	str	r3, [r0, #8]
 800e338:	f240 1301 	movw	r3, #257	@ 0x101
 800e33c:	4617      	mov	r7, r2
 800e33e:	8183      	strh	r3, [r0, #12]
 800e340:	460c      	mov	r4, r1
 800e342:	46a8      	mov	r8, r5
 800e344:	4621      	mov	r1, r4
 800e346:	4630      	mov	r0, r6
 800e348:	3501      	adds	r5, #1
 800e34a:	f007 fa7d 	bl	8015848 <put_memory>
 800e34e:	42af      	cmp	r7, r5
 800e350:	60a4      	str	r4, [r4, #8]
 800e352:	f884 800c 	strb.w	r8, [r4, #12]
 800e356:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e35a:	d1f3      	bne.n	800e344 <rmw_uxrce_init_subscription_memory+0x20>
 800e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop

0800e364 <rmw_uxrce_init_node_memory>:
 800e364:	b1e2      	cbz	r2, 800e3a0 <rmw_uxrce_init_node_memory+0x3c>
 800e366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e36a:	7b05      	ldrb	r5, [r0, #12]
 800e36c:	4606      	mov	r6, r0
 800e36e:	b9ad      	cbnz	r5, 800e39c <rmw_uxrce_init_node_memory+0x38>
 800e370:	23a4      	movs	r3, #164	@ 0xa4
 800e372:	e9c0 5500 	strd	r5, r5, [r0]
 800e376:	6083      	str	r3, [r0, #8]
 800e378:	f240 1301 	movw	r3, #257	@ 0x101
 800e37c:	4617      	mov	r7, r2
 800e37e:	8183      	strh	r3, [r0, #12]
 800e380:	460c      	mov	r4, r1
 800e382:	46a8      	mov	r8, r5
 800e384:	4621      	mov	r1, r4
 800e386:	4630      	mov	r0, r6
 800e388:	3501      	adds	r5, #1
 800e38a:	f007 fa5d 	bl	8015848 <put_memory>
 800e38e:	42af      	cmp	r7, r5
 800e390:	60a4      	str	r4, [r4, #8]
 800e392:	f884 800c 	strb.w	r8, [r4, #12]
 800e396:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e39a:	d1f3      	bne.n	800e384 <rmw_uxrce_init_node_memory+0x20>
 800e39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop

0800e3a4 <rmw_uxrce_init_session_memory>:
 800e3a4:	b1ea      	cbz	r2, 800e3e2 <rmw_uxrce_init_session_memory+0x3e>
 800e3a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3aa:	7b05      	ldrb	r5, [r0, #12]
 800e3ac:	4606      	mov	r6, r0
 800e3ae:	b9b5      	cbnz	r5, 800e3de <rmw_uxrce_init_session_memory+0x3a>
 800e3b0:	e9c0 5500 	strd	r5, r5, [r0]
 800e3b4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e3b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e3bc:	4617      	mov	r7, r2
 800e3be:	f8c0 8008 	str.w	r8, [r0, #8]
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	8183      	strh	r3, [r0, #12]
 800e3c6:	46a9      	mov	r9, r5
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	f007 fa3b 	bl	8015848 <put_memory>
 800e3d2:	42af      	cmp	r7, r5
 800e3d4:	60a4      	str	r4, [r4, #8]
 800e3d6:	f884 900c 	strb.w	r9, [r4, #12]
 800e3da:	4444      	add	r4, r8
 800e3dc:	d1f4      	bne.n	800e3c8 <rmw_uxrce_init_session_memory+0x24>
 800e3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e2:	4770      	bx	lr

0800e3e4 <rmw_uxrce_init_topic_memory>:
 800e3e4:	b1e2      	cbz	r2, 800e420 <rmw_uxrce_init_topic_memory+0x3c>
 800e3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ea:	7b05      	ldrb	r5, [r0, #12]
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	b9ad      	cbnz	r5, 800e41c <rmw_uxrce_init_topic_memory+0x38>
 800e3f0:	231c      	movs	r3, #28
 800e3f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e3f6:	6083      	str	r3, [r0, #8]
 800e3f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e3fc:	4617      	mov	r7, r2
 800e3fe:	8183      	strh	r3, [r0, #12]
 800e400:	460c      	mov	r4, r1
 800e402:	46a8      	mov	r8, r5
 800e404:	4621      	mov	r1, r4
 800e406:	4630      	mov	r0, r6
 800e408:	3501      	adds	r5, #1
 800e40a:	f007 fa1d 	bl	8015848 <put_memory>
 800e40e:	42af      	cmp	r7, r5
 800e410:	60a4      	str	r4, [r4, #8]
 800e412:	f884 800c 	strb.w	r8, [r4, #12]
 800e416:	f104 041c 	add.w	r4, r4, #28
 800e41a:	d1f3      	bne.n	800e404 <rmw_uxrce_init_topic_memory+0x20>
 800e41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop

0800e424 <rmw_uxrce_init_static_input_buffer_memory>:
 800e424:	b1ea      	cbz	r2, 800e462 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e42a:	7b05      	ldrb	r5, [r0, #12]
 800e42c:	4606      	mov	r6, r0
 800e42e:	b9b5      	cbnz	r5, 800e45e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e430:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e434:	e9c0 5500 	strd	r5, r5, [r0]
 800e438:	6083      	str	r3, [r0, #8]
 800e43a:	f240 1301 	movw	r3, #257	@ 0x101
 800e43e:	4617      	mov	r7, r2
 800e440:	8183      	strh	r3, [r0, #12]
 800e442:	460c      	mov	r4, r1
 800e444:	46a8      	mov	r8, r5
 800e446:	4621      	mov	r1, r4
 800e448:	4630      	mov	r0, r6
 800e44a:	3501      	adds	r5, #1
 800e44c:	f007 f9fc 	bl	8015848 <put_memory>
 800e450:	42af      	cmp	r7, r5
 800e452:	60a4      	str	r4, [r4, #8]
 800e454:	f884 800c 	strb.w	r8, [r4, #12]
 800e458:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e45c:	d1f3      	bne.n	800e446 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e462:	4770      	bx	lr

0800e464 <rmw_uxrce_init_init_options_impl_memory>:
 800e464:	b1e2      	cbz	r2, 800e4a0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46a:	7b05      	ldrb	r5, [r0, #12]
 800e46c:	4606      	mov	r6, r0
 800e46e:	b9ad      	cbnz	r5, 800e49c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e470:	232c      	movs	r3, #44	@ 0x2c
 800e472:	e9c0 5500 	strd	r5, r5, [r0]
 800e476:	6083      	str	r3, [r0, #8]
 800e478:	f240 1301 	movw	r3, #257	@ 0x101
 800e47c:	4617      	mov	r7, r2
 800e47e:	8183      	strh	r3, [r0, #12]
 800e480:	460c      	mov	r4, r1
 800e482:	46a8      	mov	r8, r5
 800e484:	4621      	mov	r1, r4
 800e486:	4630      	mov	r0, r6
 800e488:	3501      	adds	r5, #1
 800e48a:	f007 f9dd 	bl	8015848 <put_memory>
 800e48e:	42af      	cmp	r7, r5
 800e490:	60a4      	str	r4, [r4, #8]
 800e492:	f884 800c 	strb.w	r8, [r4, #12]
 800e496:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e49a:	d1f3      	bne.n	800e484 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop

0800e4a4 <rmw_uxrce_init_wait_set_memory>:
 800e4a4:	b1e2      	cbz	r2, 800e4e0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4aa:	7b05      	ldrb	r5, [r0, #12]
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	b9ad      	cbnz	r5, 800e4dc <rmw_uxrce_init_wait_set_memory+0x38>
 800e4b0:	231c      	movs	r3, #28
 800e4b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e4b6:	6083      	str	r3, [r0, #8]
 800e4b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e4bc:	4617      	mov	r7, r2
 800e4be:	8183      	strh	r3, [r0, #12]
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	46a8      	mov	r8, r5
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	f007 f9bd 	bl	8015848 <put_memory>
 800e4ce:	42af      	cmp	r7, r5
 800e4d0:	60a4      	str	r4, [r4, #8]
 800e4d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e4d6:	f104 041c 	add.w	r4, r4, #28
 800e4da:	d1f3      	bne.n	800e4c4 <rmw_uxrce_init_wait_set_memory+0x20>
 800e4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop

0800e4e4 <rmw_uxrce_init_guard_condition_memory>:
 800e4e4:	b1e2      	cbz	r2, 800e520 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ea:	7b05      	ldrb	r5, [r0, #12]
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	b9ad      	cbnz	r5, 800e51c <rmw_uxrce_init_guard_condition_memory+0x38>
 800e4f0:	2320      	movs	r3, #32
 800e4f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e4f6:	6083      	str	r3, [r0, #8]
 800e4f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e4fc:	4617      	mov	r7, r2
 800e4fe:	8183      	strh	r3, [r0, #12]
 800e500:	460c      	mov	r4, r1
 800e502:	46a8      	mov	r8, r5
 800e504:	4621      	mov	r1, r4
 800e506:	4630      	mov	r0, r6
 800e508:	3501      	adds	r5, #1
 800e50a:	f007 f99d 	bl	8015848 <put_memory>
 800e50e:	42af      	cmp	r7, r5
 800e510:	60a4      	str	r4, [r4, #8]
 800e512:	f884 800c 	strb.w	r8, [r4, #12]
 800e516:	f104 0420 	add.w	r4, r4, #32
 800e51a:	d1f3      	bne.n	800e504 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop

0800e524 <rmw_uxrce_fini_session_memory>:
 800e524:	4601      	mov	r1, r0
 800e526:	4801      	ldr	r0, [pc, #4]	@ (800e52c <rmw_uxrce_fini_session_memory+0x8>)
 800e528:	f007 b98e 	b.w	8015848 <put_memory>
 800e52c:	2000ae24 	.word	0x2000ae24

0800e530 <rmw_uxrce_fini_node_memory>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4604      	mov	r4, r0
 800e534:	6800      	ldr	r0, [r0, #0]
 800e536:	b128      	cbz	r0, 800e544 <rmw_uxrce_fini_node_memory+0x14>
 800e538:	4b07      	ldr	r3, [pc, #28]	@ (800e558 <rmw_uxrce_fini_node_memory+0x28>)
 800e53a:	6819      	ldr	r1, [r3, #0]
 800e53c:	f7f1 fe70 	bl	8000220 <strcmp>
 800e540:	b940      	cbnz	r0, 800e554 <rmw_uxrce_fini_node_memory+0x24>
 800e542:	6020      	str	r0, [r4, #0]
 800e544:	6861      	ldr	r1, [r4, #4]
 800e546:	b129      	cbz	r1, 800e554 <rmw_uxrce_fini_node_memory+0x24>
 800e548:	2500      	movs	r5, #0
 800e54a:	4804      	ldr	r0, [pc, #16]	@ (800e55c <rmw_uxrce_fini_node_memory+0x2c>)
 800e54c:	610d      	str	r5, [r1, #16]
 800e54e:	f007 f97b 	bl	8015848 <put_memory>
 800e552:	6065      	str	r5, [r4, #4]
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	bf00      	nop
 800e558:	080198a8 	.word	0x080198a8
 800e55c:	2000adf4 	.word	0x2000adf4

0800e560 <rmw_uxrce_fini_publisher_memory>:
 800e560:	b510      	push	{r4, lr}
 800e562:	4604      	mov	r4, r0
 800e564:	6800      	ldr	r0, [r0, #0]
 800e566:	b128      	cbz	r0, 800e574 <rmw_uxrce_fini_publisher_memory+0x14>
 800e568:	4b06      	ldr	r3, [pc, #24]	@ (800e584 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e56a:	6819      	ldr	r1, [r3, #0]
 800e56c:	f7f1 fe58 	bl	8000220 <strcmp>
 800e570:	b938      	cbnz	r0, 800e582 <rmw_uxrce_fini_publisher_memory+0x22>
 800e572:	6020      	str	r0, [r4, #0]
 800e574:	6861      	ldr	r1, [r4, #4]
 800e576:	b121      	cbz	r1, 800e582 <rmw_uxrce_fini_publisher_memory+0x22>
 800e578:	4803      	ldr	r0, [pc, #12]	@ (800e588 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e57a:	f007 f965 	bl	8015848 <put_memory>
 800e57e:	2300      	movs	r3, #0
 800e580:	6063      	str	r3, [r4, #4]
 800e582:	bd10      	pop	{r4, pc}
 800e584:	080198a8 	.word	0x080198a8
 800e588:	2000ae04 	.word	0x2000ae04

0800e58c <rmw_uxrce_fini_subscription_memory>:
 800e58c:	b510      	push	{r4, lr}
 800e58e:	4604      	mov	r4, r0
 800e590:	6800      	ldr	r0, [r0, #0]
 800e592:	b128      	cbz	r0, 800e5a0 <rmw_uxrce_fini_subscription_memory+0x14>
 800e594:	4b06      	ldr	r3, [pc, #24]	@ (800e5b0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e596:	6819      	ldr	r1, [r3, #0]
 800e598:	f7f1 fe42 	bl	8000220 <strcmp>
 800e59c:	b938      	cbnz	r0, 800e5ae <rmw_uxrce_fini_subscription_memory+0x22>
 800e59e:	6020      	str	r0, [r4, #0]
 800e5a0:	6861      	ldr	r1, [r4, #4]
 800e5a2:	b121      	cbz	r1, 800e5ae <rmw_uxrce_fini_subscription_memory+0x22>
 800e5a4:	4803      	ldr	r0, [pc, #12]	@ (800e5b4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e5a6:	f007 f94f 	bl	8015848 <put_memory>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	6063      	str	r3, [r4, #4]
 800e5ae:	bd10      	pop	{r4, pc}
 800e5b0:	080198a8 	.word	0x080198a8
 800e5b4:	2000ae44 	.word	0x2000ae44

0800e5b8 <rmw_uxrce_fini_service_memory>:
 800e5b8:	b510      	push	{r4, lr}
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	6800      	ldr	r0, [r0, #0]
 800e5be:	b128      	cbz	r0, 800e5cc <rmw_uxrce_fini_service_memory+0x14>
 800e5c0:	4b06      	ldr	r3, [pc, #24]	@ (800e5dc <rmw_uxrce_fini_service_memory+0x24>)
 800e5c2:	6819      	ldr	r1, [r3, #0]
 800e5c4:	f7f1 fe2c 	bl	8000220 <strcmp>
 800e5c8:	b938      	cbnz	r0, 800e5da <rmw_uxrce_fini_service_memory+0x22>
 800e5ca:	6020      	str	r0, [r4, #0]
 800e5cc:	6861      	ldr	r1, [r4, #4]
 800e5ce:	b121      	cbz	r1, 800e5da <rmw_uxrce_fini_service_memory+0x22>
 800e5d0:	4803      	ldr	r0, [pc, #12]	@ (800e5e0 <rmw_uxrce_fini_service_memory+0x28>)
 800e5d2:	f007 f939 	bl	8015848 <put_memory>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	6063      	str	r3, [r4, #4]
 800e5da:	bd10      	pop	{r4, pc}
 800e5dc:	080198a8 	.word	0x080198a8
 800e5e0:	2000ae14 	.word	0x2000ae14

0800e5e4 <rmw_uxrce_fini_client_memory>:
 800e5e4:	b510      	push	{r4, lr}
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	6800      	ldr	r0, [r0, #0]
 800e5ea:	b128      	cbz	r0, 800e5f8 <rmw_uxrce_fini_client_memory+0x14>
 800e5ec:	4b06      	ldr	r3, [pc, #24]	@ (800e608 <rmw_uxrce_fini_client_memory+0x24>)
 800e5ee:	6819      	ldr	r1, [r3, #0]
 800e5f0:	f7f1 fe16 	bl	8000220 <strcmp>
 800e5f4:	b938      	cbnz	r0, 800e606 <rmw_uxrce_fini_client_memory+0x22>
 800e5f6:	6020      	str	r0, [r4, #0]
 800e5f8:	6861      	ldr	r1, [r4, #4]
 800e5fa:	b121      	cbz	r1, 800e606 <rmw_uxrce_fini_client_memory+0x22>
 800e5fc:	4803      	ldr	r0, [pc, #12]	@ (800e60c <rmw_uxrce_fini_client_memory+0x28>)
 800e5fe:	f007 f923 	bl	8015848 <put_memory>
 800e602:	2300      	movs	r3, #0
 800e604:	6063      	str	r3, [r4, #4]
 800e606:	bd10      	pop	{r4, pc}
 800e608:	080198a8 	.word	0x080198a8
 800e60c:	20006524 	.word	0x20006524

0800e610 <rmw_uxrce_fini_topic_memory>:
 800e610:	b510      	push	{r4, lr}
 800e612:	4604      	mov	r4, r0
 800e614:	4621      	mov	r1, r4
 800e616:	4803      	ldr	r0, [pc, #12]	@ (800e624 <rmw_uxrce_fini_topic_memory+0x14>)
 800e618:	f007 f916 	bl	8015848 <put_memory>
 800e61c:	2300      	movs	r3, #0
 800e61e:	61a3      	str	r3, [r4, #24]
 800e620:	bd10      	pop	{r4, pc}
 800e622:	bf00      	nop
 800e624:	2000ae54 	.word	0x2000ae54

0800e628 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e628:	b082      	sub	sp, #8
 800e62a:	b530      	push	{r4, r5, lr}
 800e62c:	4925      	ldr	r1, [pc, #148]	@ (800e6c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e62e:	680d      	ldr	r5, [r1, #0]
 800e630:	ac03      	add	r4, sp, #12
 800e632:	e884 000c 	stmia.w	r4, {r2, r3}
 800e636:	461c      	mov	r4, r3
 800e638:	2d00      	cmp	r5, #0
 800e63a:	d041      	beq.n	800e6c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e63c:	462b      	mov	r3, r5
 800e63e:	2100      	movs	r1, #0
 800e640:	689a      	ldr	r2, [r3, #8]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e648:	4290      	cmp	r0, r2
 800e64a:	bf08      	it	eq
 800e64c:	3101      	addeq	r1, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1f6      	bne.n	800e640 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e652:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e656:	2b02      	cmp	r3, #2
 800e658:	d029      	beq.n	800e6ae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e65a:	d907      	bls.n	800e66c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e65c:	2b03      	cmp	r3, #3
 800e65e:	d005      	beq.n	800e66c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e660:	2100      	movs	r1, #0
 800e662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e666:	4608      	mov	r0, r1
 800e668:	b002      	add	sp, #8
 800e66a:	4770      	bx	lr
 800e66c:	b314      	cbz	r4, 800e6b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e66e:	428c      	cmp	r4, r1
 800e670:	d820      	bhi.n	800e6b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e672:	2d00      	cmp	r5, #0
 800e674:	d0f4      	beq.n	800e660 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e676:	2100      	movs	r1, #0
 800e678:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e67c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e680:	e002      	b.n	800e688 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e682:	686d      	ldr	r5, [r5, #4]
 800e684:	2d00      	cmp	r5, #0
 800e686:	d0ec      	beq.n	800e662 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e688:	68ab      	ldr	r3, [r5, #8]
 800e68a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e68e:	4290      	cmp	r0, r2
 800e690:	d1f7      	bne.n	800e682 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e692:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e696:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e69a:	4562      	cmp	r2, ip
 800e69c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e6a0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e6a4:	daed      	bge.n	800e682 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e6a6:	4694      	mov	ip, r2
 800e6a8:	461c      	mov	r4, r3
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	e7e9      	b.n	800e682 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e6ae:	b10c      	cbz	r4, 800e6b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e6b0:	428c      	cmp	r4, r1
 800e6b2:	d9d5      	bls.n	800e660 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6b8:	4802      	ldr	r0, [pc, #8]	@ (800e6c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e6ba:	b002      	add	sp, #8
 800e6bc:	f007 b8b4 	b.w	8015828 <get_memory>
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	e7c6      	b.n	800e652 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e6c4:	2000ae34 	.word	0x2000ae34

0800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e6c8:	4b11      	ldr	r3, [pc, #68]	@ (800e710 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	b530      	push	{r4, r5, lr}
 800e6ce:	b1e3      	cbz	r3, 800e70a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e6d0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e6d4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e6d8:	2400      	movs	r4, #0
 800e6da:	e001      	b.n	800e6e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	b193      	cbz	r3, 800e706 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e6e0:	689a      	ldr	r2, [r3, #8]
 800e6e2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e6e6:	4288      	cmp	r0, r1
 800e6e8:	d1f8      	bne.n	800e6dc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e6ea:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e6ee:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e6f2:	4571      	cmp	r1, lr
 800e6f4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e6f8:	daf0      	bge.n	800e6dc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e6fa:	461c      	mov	r4, r3
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	468e      	mov	lr, r1
 800e700:	4694      	mov	ip, r2
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1ec      	bne.n	800e6e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e706:	4620      	mov	r0, r4
 800e708:	bd30      	pop	{r4, r5, pc}
 800e70a:	461c      	mov	r4, r3
 800e70c:	4620      	mov	r0, r4
 800e70e:	bd30      	pop	{r4, r5, pc}
 800e710:	2000ae34 	.word	0x2000ae34
 800e714:	00000000 	.word	0x00000000

0800e718 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	4b3c      	ldr	r3, [pc, #240]	@ (800e810 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e71e:	ed2d 8b06 	vpush	{d8-d10}
 800e722:	681f      	ldr	r7, [r3, #0]
 800e724:	b08d      	sub	sp, #52	@ 0x34
 800e726:	f007 fc9b 	bl	8016060 <rmw_uros_epoch_nanos>
 800e72a:	2f00      	cmp	r7, #0
 800e72c:	d05d      	beq.n	800e7ea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e72e:	46b8      	mov	r8, r7
 800e730:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e7f8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e734:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e738:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e73c:	2b04      	cmp	r3, #4
 800e73e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e800 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e742:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e808 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e746:	4681      	mov	r9, r0
 800e748:	468a      	mov	sl, r1
 800e74a:	ac04      	add	r4, sp, #16
 800e74c:	d03f      	beq.n	800e7ce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e74e:	2b05      	cmp	r3, #5
 800e750:	d044      	beq.n	800e7dc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e752:	2b03      	cmp	r3, #3
 800e754:	d03b      	beq.n	800e7ce <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e756:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e75a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e75e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e762:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e766:	ab08      	add	r3, sp, #32
 800e768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e76a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e76e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e772:	f006 fda5 	bl	80152c0 <rmw_time_equal>
 800e776:	b118      	cbz	r0, 800e780 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e778:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e77c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e784:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e788:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e78c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e790:	f006 fdea 	bl	8015368 <rmw_time_total_nsec>
 800e794:	1830      	adds	r0, r6, r0
 800e796:	eb47 0101 	adc.w	r1, r7, r1
 800e79a:	4548      	cmp	r0, r9
 800e79c:	eb71 030a 	sbcs.w	r3, r1, sl
 800e7a0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e7a4:	db05      	blt.n	800e7b2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e7a6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e7aa:	4591      	cmp	r9, r2
 800e7ac:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e7b0:	da03      	bge.n	800e7ba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e7b2:	4817      	ldr	r0, [pc, #92]	@ (800e810 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e7b4:	4641      	mov	r1, r8
 800e7b6:	f007 f847 	bl	8015848 <put_memory>
 800e7ba:	f1bb 0f00 	cmp.w	fp, #0
 800e7be:	d014      	beq.n	800e7ea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e7c0:	46d8      	mov	r8, fp
 800e7c2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e7c6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	d1bf      	bne.n	800e74e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e7ce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e7d2:	3340      	adds	r3, #64	@ 0x40
 800e7d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e7da:	e7c0      	b.n	800e75e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e7dc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e7e0:	3348      	adds	r3, #72	@ 0x48
 800e7e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e7e8:	e7b9      	b.n	800e75e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e7ea:	b00d      	add	sp, #52	@ 0x34
 800e7ec:	ecbd 8b06 	vpop	{d8-d10}
 800e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f4:	f3af 8000 	nop.w
	...
 800e800:	00000001 	.word	0x00000001
 800e804:	00000000 	.word	0x00000000
 800e808:	0000001e 	.word	0x0000001e
 800e80c:	00000000 	.word	0x00000000
 800e810:	2000ae34 	.word	0x2000ae34

0800e814 <run_xrce_session>:
 800e814:	b510      	push	{r4, lr}
 800e816:	788c      	ldrb	r4, [r1, #2]
 800e818:	b086      	sub	sp, #24
 800e81a:	2c01      	cmp	r4, #1
 800e81c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e820:	d00c      	beq.n	800e83c <run_xrce_session+0x28>
 800e822:	4619      	mov	r1, r3
 800e824:	2301      	movs	r3, #1
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	f10d 020e 	add.w	r2, sp, #14
 800e82c:	f10d 0317 	add.w	r3, sp, #23
 800e830:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e834:	f001 f932 	bl	800fa9c <uxr_run_session_until_all_status>
 800e838:	b006      	add	sp, #24
 800e83a:	bd10      	pop	{r4, pc}
 800e83c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e840:	f000 fd46 	bl	800f2d0 <uxr_flash_output_streams>
 800e844:	4620      	mov	r0, r4
 800e846:	b006      	add	sp, #24
 800e848:	bd10      	pop	{r4, pc}
 800e84a:	bf00      	nop

0800e84c <convert_qos_profile>:
 800e84c:	7a4a      	ldrb	r2, [r1, #9]
 800e84e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e852:	2a02      	cmp	r2, #2
 800e854:	bf18      	it	ne
 800e856:	2200      	movne	r2, #0
 800e858:	7002      	strb	r2, [r0, #0]
 800e85a:	780a      	ldrb	r2, [r1, #0]
 800e85c:	8889      	ldrh	r1, [r1, #4]
 800e85e:	8081      	strh	r1, [r0, #4]
 800e860:	f1ac 0c02 	sub.w	ip, ip, #2
 800e864:	f1a2 0202 	sub.w	r2, r2, #2
 800e868:	fabc fc8c 	clz	ip, ip
 800e86c:	fab2 f282 	clz	r2, r2
 800e870:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e874:	0952      	lsrs	r2, r2, #5
 800e876:	f880 c001 	strb.w	ip, [r0, #1]
 800e87a:	7082      	strb	r2, [r0, #2]
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop

0800e880 <generate_type_name>:
 800e880:	b530      	push	{r4, r5, lr}
 800e882:	2300      	movs	r3, #0
 800e884:	700b      	strb	r3, [r1, #0]
 800e886:	6803      	ldr	r3, [r0, #0]
 800e888:	b087      	sub	sp, #28
 800e88a:	4614      	mov	r4, r2
 800e88c:	b1d3      	cbz	r3, 800e8c4 <generate_type_name+0x44>
 800e88e:	4a0f      	ldr	r2, [pc, #60]	@ (800e8cc <generate_type_name+0x4c>)
 800e890:	4615      	mov	r5, r2
 800e892:	9203      	str	r2, [sp, #12]
 800e894:	9500      	str	r5, [sp, #0]
 800e896:	6842      	ldr	r2, [r0, #4]
 800e898:	480d      	ldr	r0, [pc, #52]	@ (800e8d0 <generate_type_name+0x50>)
 800e89a:	9001      	str	r0, [sp, #4]
 800e89c:	4608      	mov	r0, r1
 800e89e:	490d      	ldr	r1, [pc, #52]	@ (800e8d4 <generate_type_name+0x54>)
 800e8a0:	9204      	str	r2, [sp, #16]
 800e8a2:	9105      	str	r1, [sp, #20]
 800e8a4:	9102      	str	r1, [sp, #8]
 800e8a6:	4a0c      	ldr	r2, [pc, #48]	@ (800e8d8 <generate_type_name+0x58>)
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	f009 f9ab 	bl	8017c04 <sniprintf>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	db05      	blt.n	800e8be <generate_type_name+0x3e>
 800e8b2:	4284      	cmp	r4, r0
 800e8b4:	bfd4      	ite	le
 800e8b6:	2000      	movle	r0, #0
 800e8b8:	2001      	movgt	r0, #1
 800e8ba:	b007      	add	sp, #28
 800e8bc:	bd30      	pop	{r4, r5, pc}
 800e8be:	2000      	movs	r0, #0
 800e8c0:	b007      	add	sp, #28
 800e8c2:	bd30      	pop	{r4, r5, pc}
 800e8c4:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <generate_type_name+0x5c>)
 800e8c6:	4a01      	ldr	r2, [pc, #4]	@ (800e8cc <generate_type_name+0x4c>)
 800e8c8:	461d      	mov	r5, r3
 800e8ca:	e7e2      	b.n	800e892 <generate_type_name+0x12>
 800e8cc:	0801910c 	.word	0x0801910c
 800e8d0:	08019124 	.word	0x08019124
 800e8d4:	08019120 	.word	0x08019120
 800e8d8:	08019110 	.word	0x08019110
 800e8dc:	08019680 	.word	0x08019680

0800e8e0 <generate_topic_name>:
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	4614      	mov	r4, r2
 800e8e6:	9000      	str	r0, [sp, #0]
 800e8e8:	4b08      	ldr	r3, [pc, #32]	@ (800e90c <generate_topic_name+0x2c>)
 800e8ea:	4a09      	ldr	r2, [pc, #36]	@ (800e910 <generate_topic_name+0x30>)
 800e8ec:	4608      	mov	r0, r1
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	f009 f988 	bl	8017c04 <sniprintf>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	db05      	blt.n	800e904 <generate_topic_name+0x24>
 800e8f8:	4284      	cmp	r4, r0
 800e8fa:	bfd4      	ite	le
 800e8fc:	2000      	movle	r0, #0
 800e8fe:	2001      	movgt	r0, #1
 800e900:	b002      	add	sp, #8
 800e902:	bd10      	pop	{r4, pc}
 800e904:	2000      	movs	r0, #0
 800e906:	b002      	add	sp, #8
 800e908:	bd10      	pop	{r4, pc}
 800e90a:	bf00      	nop
 800e90c:	08019130 	.word	0x08019130
 800e910:	08019128 	.word	0x08019128

0800e914 <is_uxrce_rmw_identifier_valid>:
 800e914:	b510      	push	{r4, lr}
 800e916:	4604      	mov	r4, r0
 800e918:	b140      	cbz	r0, 800e92c <is_uxrce_rmw_identifier_valid+0x18>
 800e91a:	f006 ffed 	bl	80158f8 <rmw_get_implementation_identifier>
 800e91e:	4601      	mov	r1, r0
 800e920:	4620      	mov	r0, r4
 800e922:	f7f1 fc7d 	bl	8000220 <strcmp>
 800e926:	fab0 f080 	clz	r0, r0
 800e92a:	0940      	lsrs	r0, r0, #5
 800e92c:	bd10      	pop	{r4, pc}
 800e92e:	bf00      	nop

0800e930 <get_message_typesupport_handle>:
 800e930:	6883      	ldr	r3, [r0, #8]
 800e932:	4718      	bx	r3

0800e934 <get_message_typesupport_handle_function>:
 800e934:	b510      	push	{r4, lr}
 800e936:	4604      	mov	r4, r0
 800e938:	6800      	ldr	r0, [r0, #0]
 800e93a:	f7f1 fc71 	bl	8000220 <strcmp>
 800e93e:	2800      	cmp	r0, #0
 800e940:	bf0c      	ite	eq
 800e942:	4620      	moveq	r0, r4
 800e944:	2000      	movne	r0, #0
 800e946:	bd10      	pop	{r4, pc}

0800e948 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e94c:	6805      	ldr	r5, [r0, #0]
 800e94e:	4604      	mov	r4, r0
 800e950:	4628      	mov	r0, r5
 800e952:	460e      	mov	r6, r1
 800e954:	f7f1 fc64 	bl	8000220 <strcmp>
 800e958:	b1c8      	cbz	r0, 800e98e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e95a:	4b11      	ldr	r3, [pc, #68]	@ (800e9a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	429d      	cmp	r5, r3
 800e960:	d112      	bne.n	800e988 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e962:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e966:	f8d8 4000 	ldr.w	r4, [r8]
 800e96a:	b16c      	cbz	r4, 800e988 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e96c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e970:	2700      	movs	r7, #0
 800e972:	3d04      	subs	r5, #4
 800e974:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e978:	4631      	mov	r1, r6
 800e97a:	f7f1 fc51 	bl	8000220 <strcmp>
 800e97e:	00bb      	lsls	r3, r7, #2
 800e980:	b140      	cbz	r0, 800e994 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e982:	3701      	adds	r7, #1
 800e984:	42bc      	cmp	r4, r7
 800e986:	d1f5      	bne.n	800e974 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e988:	2000      	movs	r0, #0
 800e98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98e:	4620      	mov	r0, r4
 800e990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e994:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	58d3      	ldr	r3, [r2, r3]
 800e99e:	4718      	bx	r3
 800e9a0:	200001d0 	.word	0x200001d0

0800e9a4 <geometry_msgs__msg__Twist__init>:
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	b1a8      	cbz	r0, 800e9d6 <geometry_msgs__msg__Twist__init+0x32>
 800e9aa:	f000 f82b 	bl	800ea04 <geometry_msgs__msg__Vector3__init>
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	b140      	cbz	r0, 800e9c4 <geometry_msgs__msg__Twist__init+0x20>
 800e9b2:	f105 0618 	add.w	r6, r5, #24
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f000 f824 	bl	800ea04 <geometry_msgs__msg__Vector3__init>
 800e9bc:	4604      	mov	r4, r0
 800e9be:	b168      	cbz	r0, 800e9dc <geometry_msgs__msg__Twist__init+0x38>
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	bd70      	pop	{r4, r5, r6, pc}
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f000 f821 	bl	800ea0c <geometry_msgs__msg__Vector3__fini>
 800e9ca:	f105 0018 	add.w	r0, r5, #24
 800e9ce:	f000 f81d 	bl	800ea0c <geometry_msgs__msg__Vector3__fini>
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	bd70      	pop	{r4, r5, r6, pc}
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	4620      	mov	r0, r4
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	4628      	mov	r0, r5
 800e9de:	f000 f815 	bl	800ea0c <geometry_msgs__msg__Vector3__fini>
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f000 f812 	bl	800ea0c <geometry_msgs__msg__Vector3__fini>
 800e9e8:	e7ea      	b.n	800e9c0 <geometry_msgs__msg__Twist__init+0x1c>
 800e9ea:	bf00      	nop

0800e9ec <geometry_msgs__msg__Twist__fini>:
 800e9ec:	b148      	cbz	r0, 800ea02 <geometry_msgs__msg__Twist__fini+0x16>
 800e9ee:	b510      	push	{r4, lr}
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	f000 f80b 	bl	800ea0c <geometry_msgs__msg__Vector3__fini>
 800e9f6:	f104 0018 	add.w	r0, r4, #24
 800e9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9fe:	f000 b805 	b.w	800ea0c <geometry_msgs__msg__Vector3__fini>
 800ea02:	4770      	bx	lr

0800ea04 <geometry_msgs__msg__Vector3__init>:
 800ea04:	3800      	subs	r0, #0
 800ea06:	bf18      	it	ne
 800ea08:	2001      	movne	r0, #1
 800ea0a:	4770      	bx	lr

0800ea0c <geometry_msgs__msg__Vector3__fini>:
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop

0800ea10 <uxr_buffer_delete_entity>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	2300      	movs	r3, #0
 800ea14:	b08e      	sub	sp, #56	@ 0x38
 800ea16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ea1a:	2303      	movs	r3, #3
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	2204      	movs	r2, #4
 800ea20:	ab06      	add	r3, sp, #24
 800ea22:	4604      	mov	r4, r0
 800ea24:	9103      	str	r1, [sp, #12]
 800ea26:	f001 fa61 	bl	800feec <uxr_prepare_stream_to_write_submessage>
 800ea2a:	b918      	cbnz	r0, 800ea34 <uxr_buffer_delete_entity+0x24>
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	4620      	mov	r0, r4
 800ea30:	b00e      	add	sp, #56	@ 0x38
 800ea32:	bd10      	pop	{r4, pc}
 800ea34:	9902      	ldr	r1, [sp, #8]
 800ea36:	aa05      	add	r2, sp, #20
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f001 fb8d 	bl	8010158 <uxr_init_base_object_request>
 800ea3e:	a905      	add	r1, sp, #20
 800ea40:	4604      	mov	r4, r0
 800ea42:	a806      	add	r0, sp, #24
 800ea44:	f003 f984 	bl	8011d50 <uxr_serialize_DELETE_Payload>
 800ea48:	4620      	mov	r0, r4
 800ea4a:	b00e      	add	sp, #56	@ 0x38
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	bf00      	nop

0800ea50 <uxr_common_create_entity>:
 800ea50:	b510      	push	{r4, lr}
 800ea52:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ea56:	b08c      	sub	sp, #48	@ 0x30
 800ea58:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ea5c:	f1bc 0f01 	cmp.w	ip, #1
 800ea60:	bf0c      	ite	eq
 800ea62:	f003 0201 	andeq.w	r2, r3, #1
 800ea66:	2200      	movne	r2, #0
 800ea68:	330e      	adds	r3, #14
 800ea6a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800ea6e:	9101      	str	r1, [sp, #4]
 800ea70:	441a      	add	r2, r3
 800ea72:	2301      	movs	r3, #1
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	9903      	ldr	r1, [sp, #12]
 800ea78:	ab04      	add	r3, sp, #16
 800ea7a:	b292      	uxth	r2, r2
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	f001 fa35 	bl	800feec <uxr_prepare_stream_to_write_submessage>
 800ea82:	b918      	cbnz	r0, 800ea8c <uxr_common_create_entity+0x3c>
 800ea84:	4604      	mov	r4, r0
 800ea86:	4620      	mov	r0, r4
 800ea88:	b00c      	add	sp, #48	@ 0x30
 800ea8a:	bd10      	pop	{r4, pc}
 800ea8c:	9902      	ldr	r1, [sp, #8]
 800ea8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ea90:	4620      	mov	r0, r4
 800ea92:	f001 fb61 	bl	8010158 <uxr_init_base_object_request>
 800ea96:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea98:	4604      	mov	r4, r0
 800ea9a:	a804      	add	r0, sp, #16
 800ea9c:	f003 f8b4 	bl	8011c08 <uxr_serialize_CREATE_Payload>
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	b00c      	add	sp, #48	@ 0x30
 800eaa4:	bd10      	pop	{r4, pc}
 800eaa6:	bf00      	nop

0800eaa8 <uxr_buffer_create_participant_bin>:
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800eaae:	ac11      	add	r4, sp, #68	@ 0x44
 800eab0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800eab4:	2303      	movs	r3, #3
 800eab6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800eaba:	7223      	strb	r3, [r4, #8]
 800eabc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800eabe:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800eac2:	2201      	movs	r2, #1
 800eac4:	2100      	movs	r1, #0
 800eac6:	4605      	mov	r5, r0
 800eac8:	7122      	strb	r2, [r4, #4]
 800eaca:	f88d 1014 	strb.w	r1, [sp, #20]
 800eace:	b1cb      	cbz	r3, 800eb04 <uxr_buffer_create_participant_bin+0x5c>
 800ead0:	f88d 201c 	strb.w	r2, [sp, #28]
 800ead4:	9308      	str	r3, [sp, #32]
 800ead6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eada:	a915      	add	r1, sp, #84	@ 0x54
 800eadc:	a809      	add	r0, sp, #36	@ 0x24
 800eade:	f7fd fb77 	bl	800c1d0 <ucdr_init_buffer>
 800eae2:	a905      	add	r1, sp, #20
 800eae4:	a809      	add	r0, sp, #36	@ 0x24
 800eae6:	f002 fd5d 	bl	80115a4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800eaea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eaec:	9600      	str	r6, [sp, #0]
 800eaee:	9401      	str	r4, [sp, #4]
 800eaf0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eaf4:	60e3      	str	r3, [r4, #12]
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	f7ff ffa9 	bl	800ea50 <uxr_common_create_entity>
 800eafe:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800eb02:	bd70      	pop	{r4, r5, r6, pc}
 800eb04:	f88d 301c 	strb.w	r3, [sp, #28]
 800eb08:	e7e5      	b.n	800ead6 <uxr_buffer_create_participant_bin+0x2e>
 800eb0a:	bf00      	nop

0800eb0c <uxr_buffer_create_topic_bin>:
 800eb0c:	b570      	push	{r4, r5, r6, lr}
 800eb0e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800eb12:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800eb16:	9105      	str	r1, [sp, #20]
 800eb18:	4605      	mov	r5, r0
 800eb1a:	a997      	add	r1, sp, #604	@ 0x25c
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	2302      	movs	r3, #2
 800eb20:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800eb24:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800eb28:	f000 f9b0 	bl	800ee8c <uxr_object_id_to_raw>
 800eb2c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800eb2e:	9306      	str	r3, [sp, #24]
 800eb30:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800eb32:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb34:	2303      	movs	r3, #3
 800eb36:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb40:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800eb44:	a917      	add	r1, sp, #92	@ 0x5c
 800eb46:	2300      	movs	r3, #0
 800eb48:	a80b      	add	r0, sp, #44	@ 0x2c
 800eb4a:	f88d 301c 	strb.w	r3, [sp, #28]
 800eb4e:	f7fd fb3f 	bl	800c1d0 <ucdr_init_buffer>
 800eb52:	a906      	add	r1, sp, #24
 800eb54:	a80b      	add	r0, sp, #44	@ 0x2c
 800eb56:	f002 fd47 	bl	80115e8 <uxr_serialize_OBJK_Topic_Binary>
 800eb5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb5c:	9316      	str	r3, [sp, #88]	@ 0x58
 800eb5e:	ac13      	add	r4, sp, #76	@ 0x4c
 800eb60:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800eb64:	9600      	str	r6, [sp, #0]
 800eb66:	9401      	str	r4, [sp, #4]
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f7ff ff70 	bl	800ea50 <uxr_common_create_entity>
 800eb70:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800eb74:	bd70      	pop	{r4, r5, r6, pc}
 800eb76:	bf00      	nop

0800eb78 <uxr_buffer_create_publisher_bin>:
 800eb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb7a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800eb7e:	4605      	mov	r5, r0
 800eb80:	9105      	str	r1, [sp, #20]
 800eb82:	4618      	mov	r0, r3
 800eb84:	2603      	movs	r6, #3
 800eb86:	a992      	add	r1, sp, #584	@ 0x248
 800eb88:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800eb8c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800eb90:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800eb94:	f000 f97a 	bl	800ee8c <uxr_object_id_to_raw>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb9e:	a912      	add	r1, sp, #72	@ 0x48
 800eba0:	a806      	add	r0, sp, #24
 800eba2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800eba6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ebaa:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800ebae:	f7fd fb0f 	bl	800c1d0 <ucdr_init_buffer>
 800ebb2:	a993      	add	r1, sp, #588	@ 0x24c
 800ebb4:	a806      	add	r0, sp, #24
 800ebb6:	f002 fdcb 	bl	8011750 <uxr_serialize_OBJK_Publisher_Binary>
 800ebba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebbc:	9311      	str	r3, [sp, #68]	@ 0x44
 800ebbe:	ac0e      	add	r4, sp, #56	@ 0x38
 800ebc0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ebc4:	9700      	str	r7, [sp, #0]
 800ebc6:	9401      	str	r4, [sp, #4]
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f7ff ff40 	bl	800ea50 <uxr_common_create_entity>
 800ebd0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800ebd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebd6:	bf00      	nop

0800ebd8 <uxr_buffer_create_datawriter_bin>:
 800ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebdc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ebe0:	ac1d      	add	r4, sp, #116	@ 0x74
 800ebe2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ebe6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800ebea:	9105      	str	r1, [sp, #20]
 800ebec:	4606      	mov	r6, r0
 800ebee:	a9a1      	add	r1, sp, #644	@ 0x284
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	2305      	movs	r3, #5
 800ebf4:	7123      	strb	r3, [r4, #4]
 800ebf6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800ebfa:	2703      	movs	r7, #3
 800ebfc:	f000 f946 	bl	800ee8c <uxr_object_id_to_raw>
 800ec00:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800ec02:	7227      	strb	r7, [r4, #8]
 800ec04:	a90e      	add	r1, sp, #56	@ 0x38
 800ec06:	f000 f941 	bl	800ee8c <uxr_object_id_to_raw>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ec10:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800ec14:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ec18:	3d00      	subs	r5, #0
 800ec1a:	bf18      	it	ne
 800ec1c:	2501      	movne	r5, #1
 800ec1e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ec22:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ec26:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ec2a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec2e:	2301      	movs	r3, #1
 800ec30:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ec34:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ec38:	bb8a      	cbnz	r2, 800ec9e <uxr_buffer_create_datawriter_bin+0xc6>
 800ec3a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec3e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ec42:	f04f 0c13 	mov.w	ip, #19
 800ec46:	250b      	movs	r5, #11
 800ec48:	2221      	movs	r2, #33	@ 0x21
 800ec4a:	2111      	movs	r1, #17
 800ec4c:	2009      	movs	r0, #9
 800ec4e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800ec52:	b923      	cbnz	r3, 800ec5e <uxr_buffer_create_datawriter_bin+0x86>
 800ec54:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ec58:	4672      	mov	r2, lr
 800ec5a:	4661      	mov	r1, ip
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d025      	beq.n	800ecb2 <uxr_buffer_create_datawriter_bin+0xda>
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d029      	beq.n	800ecbe <uxr_buffer_create_datawriter_bin+0xe6>
 800ec6a:	b32b      	cbz	r3, 800ecb8 <uxr_buffer_create_datawriter_bin+0xe0>
 800ec6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec70:	a921      	add	r1, sp, #132	@ 0x84
 800ec72:	a806      	add	r0, sp, #24
 800ec74:	f7fd faac 	bl	800c1d0 <ucdr_init_buffer>
 800ec78:	a90e      	add	r1, sp, #56	@ 0x38
 800ec7a:	a806      	add	r0, sp, #24
 800ec7c:	f002 fdde 	bl	801183c <uxr_serialize_OBJK_DataWriter_Binary>
 800ec80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec82:	f8cd 8000 	str.w	r8, [sp]
 800ec86:	9401      	str	r4, [sp, #4]
 800ec88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ec8c:	60e3      	str	r3, [r4, #12]
 800ec8e:	4630      	mov	r0, r6
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	f7ff fedd 	bl	800ea50 <uxr_common_create_entity>
 800ec96:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ec9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec9e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800eca2:	f04f 0c12 	mov.w	ip, #18
 800eca6:	250a      	movs	r5, #10
 800eca8:	2220      	movs	r2, #32
 800ecaa:	2110      	movs	r1, #16
 800ecac:	2008      	movs	r0, #8
 800ecae:	2702      	movs	r7, #2
 800ecb0:	e7cd      	b.n	800ec4e <uxr_buffer_create_datawriter_bin+0x76>
 800ecb2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ecb6:	e7d9      	b.n	800ec6c <uxr_buffer_create_datawriter_bin+0x94>
 800ecb8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ecbc:	e7d6      	b.n	800ec6c <uxr_buffer_create_datawriter_bin+0x94>
 800ecbe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ecc2:	e7d3      	b.n	800ec6c <uxr_buffer_create_datawriter_bin+0x94>

0800ecc4 <get_custom_error>:
 800ecc4:	4b01      	ldr	r3, [pc, #4]	@ (800eccc <get_custom_error+0x8>)
 800ecc6:	7818      	ldrb	r0, [r3, #0]
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	2000ae74 	.word	0x2000ae74

0800ecd0 <recv_custom_msg>:
 800ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd4:	4693      	mov	fp, r2
 800ecd6:	b089      	sub	sp, #36	@ 0x24
 800ecd8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ecdc:	9305      	str	r3, [sp, #20]
 800ecde:	468a      	mov	sl, r1
 800ece0:	2100      	movs	r1, #0
 800ece2:	4604      	mov	r4, r0
 800ece4:	f88d 101e 	strb.w	r1, [sp, #30]
 800ece8:	b322      	cbz	r2, 800ed34 <recv_custom_msg+0x64>
 800ecea:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800ecee:	f10d 081f 	add.w	r8, sp, #31
 800ecf2:	af05      	add	r7, sp, #20
 800ecf4:	f10d 061e 	add.w	r6, sp, #30
 800ecf8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ecfc:	e002      	b.n	800ed04 <recv_custom_msg+0x34>
 800ecfe:	9b05      	ldr	r3, [sp, #20]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	dd0f      	ble.n	800ed24 <recv_custom_msg+0x54>
 800ed04:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800ed08:	4623      	mov	r3, r4
 800ed0a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ed0e:	e9cd 5600 	strd	r5, r6, [sp]
 800ed12:	4622      	mov	r2, r4
 800ed14:	4648      	mov	r0, r9
 800ed16:	f001 fc4d 	bl	80105b4 <uxr_read_framed_msg>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	d0ef      	beq.n	800ecfe <recv_custom_msg+0x2e>
 800ed1e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ed22:	b1b3      	cbz	r3, 800ed52 <recv_custom_msg+0x82>
 800ed24:	4b0f      	ldr	r3, [pc, #60]	@ (800ed64 <recv_custom_msg+0x94>)
 800ed26:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ed2a:	701a      	strb	r2, [r3, #0]
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	b009      	add	sp, #36	@ 0x24
 800ed30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed34:	f10d 021f 	add.w	r2, sp, #31
 800ed38:	9200      	str	r2, [sp, #0]
 800ed3a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ed3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed42:	4601      	mov	r1, r0
 800ed44:	47a8      	blx	r5
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d0ec      	beq.n	800ed24 <recv_custom_msg+0x54>
 800ed4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1e8      	bne.n	800ed24 <recv_custom_msg+0x54>
 800ed52:	f8cb 0000 	str.w	r0, [fp]
 800ed56:	2001      	movs	r0, #1
 800ed58:	f8ca 4000 	str.w	r4, [sl]
 800ed5c:	b009      	add	sp, #36	@ 0x24
 800ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed62:	bf00      	nop
 800ed64:	2000ae74 	.word	0x2000ae74

0800ed68 <send_custom_msg>:
 800ed68:	b530      	push	{r4, r5, lr}
 800ed6a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800ed6e:	b087      	sub	sp, #28
 800ed70:	4615      	mov	r5, r2
 800ed72:	b974      	cbnz	r4, 800ed92 <send_custom_msg+0x2a>
 800ed74:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800ed78:	f10d 0317 	add.w	r3, sp, #23
 800ed7c:	47a0      	blx	r4
 800ed7e:	b108      	cbz	r0, 800ed84 <send_custom_msg+0x1c>
 800ed80:	42a8      	cmp	r0, r5
 800ed82:	d015      	beq.n	800edb0 <send_custom_msg+0x48>
 800ed84:	4b0c      	ldr	r3, [pc, #48]	@ (800edb8 <send_custom_msg+0x50>)
 800ed86:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ed8a:	701a      	strb	r2, [r3, #0]
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	b007      	add	sp, #28
 800ed90:	bd30      	pop	{r4, r5, pc}
 800ed92:	460b      	mov	r3, r1
 800ed94:	2200      	movs	r2, #0
 800ed96:	f10d 0117 	add.w	r1, sp, #23
 800ed9a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ed9e:	4602      	mov	r2, r0
 800eda0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800eda4:	9500      	str	r5, [sp, #0]
 800eda6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800edaa:	f001 fa0b 	bl	80101c4 <uxr_write_framed_msg>
 800edae:	e7e6      	b.n	800ed7e <send_custom_msg+0x16>
 800edb0:	2001      	movs	r0, #1
 800edb2:	b007      	add	sp, #28
 800edb4:	bd30      	pop	{r4, r5, pc}
 800edb6:	bf00      	nop
 800edb8:	2000ae74 	.word	0x2000ae74

0800edbc <uxr_set_custom_transport_callbacks>:
 800edbc:	b410      	push	{r4}
 800edbe:	9c01      	ldr	r4, [sp, #4]
 800edc0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800edc4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800edc8:	9b02      	ldr	r3, [sp, #8]
 800edca:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800edce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edd2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800edd6:	4770      	bx	lr

0800edd8 <uxr_init_custom_transport>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800edde:	b303      	cbz	r3, 800ee22 <uxr_init_custom_transport+0x4a>
 800ede0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800ede4:	4604      	mov	r4, r0
 800ede6:	b1e2      	cbz	r2, 800ee22 <uxr_init_custom_transport+0x4a>
 800ede8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800edec:	b1ca      	cbz	r2, 800ee22 <uxr_init_custom_transport+0x4a>
 800edee:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800edf2:	b1b2      	cbz	r2, 800ee22 <uxr_init_custom_transport+0x4a>
 800edf4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800edf8:	4798      	blx	r3
 800edfa:	4605      	mov	r5, r0
 800edfc:	b188      	cbz	r0, 800ee22 <uxr_init_custom_transport+0x4a>
 800edfe:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ee02:	b98b      	cbnz	r3, 800ee28 <uxr_init_custom_transport+0x50>
 800ee04:	490b      	ldr	r1, [pc, #44]	@ (800ee34 <uxr_init_custom_transport+0x5c>)
 800ee06:	4b0c      	ldr	r3, [pc, #48]	@ (800ee38 <uxr_init_custom_transport+0x60>)
 800ee08:	4a0c      	ldr	r2, [pc, #48]	@ (800ee3c <uxr_init_custom_transport+0x64>)
 800ee0a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800ee0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee12:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800ee16:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ee1a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800ee1e:	4628      	mov	r0, r5
 800ee20:	bd38      	pop	{r3, r4, r5, pc}
 800ee22:	2500      	movs	r5, #0
 800ee24:	4628      	mov	r0, r5
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	2100      	movs	r1, #0
 800ee2a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ee2e:	f001 f9c3 	bl	80101b8 <uxr_init_framing_io>
 800ee32:	e7e7      	b.n	800ee04 <uxr_init_custom_transport+0x2c>
 800ee34:	0800ed69 	.word	0x0800ed69
 800ee38:	0800ecd1 	.word	0x0800ecd1
 800ee3c:	0800ecc5 	.word	0x0800ecc5

0800ee40 <uxr_close_custom_transport>:
 800ee40:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ee44:	4718      	bx	r3
 800ee46:	bf00      	nop

0800ee48 <uxr_object_id>:
 800ee48:	b082      	sub	sp, #8
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	f88d 1006 	strb.w	r1, [sp, #6]
 800ee50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee54:	f360 030f 	bfi	r3, r0, #0, #16
 800ee58:	f362 431f 	bfi	r3, r2, #16, #16
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	b002      	add	sp, #8
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop

0800ee64 <uxr_object_id_from_raw>:
 800ee64:	7843      	ldrb	r3, [r0, #1]
 800ee66:	7801      	ldrb	r1, [r0, #0]
 800ee68:	b082      	sub	sp, #8
 800ee6a:	f003 020f 	and.w	r2, r3, #15
 800ee6e:	f88d 2006 	strb.w	r2, [sp, #6]
 800ee72:	091b      	lsrs	r3, r3, #4
 800ee74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee78:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	f363 000f 	bfi	r0, r3, #0, #16
 800ee82:	f362 401f 	bfi	r0, r2, #16, #16
 800ee86:	b002      	add	sp, #8
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop

0800ee8c <uxr_object_id_to_raw>:
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ee92:	b082      	sub	sp, #8
 800ee94:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ee98:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ee9c:	f881 c000 	strb.w	ip, [r1]
 800eea0:	7048      	strb	r0, [r1, #1]
 800eea2:	b002      	add	sp, #8
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop

0800eea8 <uxr_buffer_cancel_data>:
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	b094      	sub	sp, #80	@ 0x50
 800eeac:	2300      	movs	r3, #0
 800eeae:	9202      	str	r2, [sp, #8]
 800eeb0:	9205      	str	r2, [sp, #20]
 800eeb2:	9301      	str	r3, [sp, #4]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eeba:	f88d 301e 	strb.w	r3, [sp, #30]
 800eebe:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800eec2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800eec6:	2308      	movs	r3, #8
 800eec8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800eecc:	9300      	str	r3, [sp, #0]
 800eece:	2210      	movs	r2, #16
 800eed0:	ab0c      	add	r3, sp, #48	@ 0x30
 800eed2:	4604      	mov	r4, r0
 800eed4:	9103      	str	r1, [sp, #12]
 800eed6:	f001 f809 	bl	800feec <uxr_prepare_stream_to_write_submessage>
 800eeda:	b918      	cbnz	r0, 800eee4 <uxr_buffer_cancel_data+0x3c>
 800eedc:	4604      	mov	r4, r0
 800eede:	4620      	mov	r0, r4
 800eee0:	b014      	add	sp, #80	@ 0x50
 800eee2:	bd10      	pop	{r4, pc}
 800eee4:	9905      	ldr	r1, [sp, #20]
 800eee6:	aa06      	add	r2, sp, #24
 800eee8:	4620      	mov	r0, r4
 800eeea:	f001 f935 	bl	8010158 <uxr_init_base_object_request>
 800eeee:	a906      	add	r1, sp, #24
 800eef0:	4604      	mov	r4, r0
 800eef2:	a80c      	add	r0, sp, #48	@ 0x30
 800eef4:	f002 ffd6 	bl	8011ea4 <uxr_serialize_READ_DATA_Payload>
 800eef8:	4620      	mov	r0, r4
 800eefa:	b014      	add	sp, #80	@ 0x50
 800eefc:	bd10      	pop	{r4, pc}
 800eefe:	bf00      	nop

0800ef00 <read_submessage_format>:
 800ef00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef04:	b095      	sub	sp, #84	@ 0x54
 800ef06:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ef0a:	b113      	cbz	r3, 800ef12 <read_submessage_format+0x12>
 800ef0c:	b015      	add	sp, #84	@ 0x54
 800ef0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef12:	460c      	mov	r4, r1
 800ef14:	4615      	mov	r5, r2
 800ef16:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ef1a:	4607      	mov	r7, r0
 800ef1c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ef1e:	9004      	str	r0, [sp, #16]
 800ef20:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ef22:	9005      	str	r0, [sp, #20]
 800ef24:	1a52      	subs	r2, r2, r1
 800ef26:	a80c      	add	r0, sp, #48	@ 0x30
 800ef28:	4699      	mov	r9, r3
 800ef2a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800ef2e:	f7fd f94f 	bl	800c1d0 <ucdr_init_buffer>
 800ef32:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ef36:	a80c      	add	r0, sp, #48	@ 0x30
 800ef38:	f7fd f91e 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 800ef3c:	69e2      	ldr	r2, [r4, #28]
 800ef3e:	b19a      	cbz	r2, 800ef68 <read_submessage_format+0x68>
 800ef40:	f1b8 0f07 	cmp.w	r8, #7
 800ef44:	f882 9014 	strb.w	r9, [r2, #20]
 800ef48:	d040      	beq.n	800efcc <read_submessage_format+0xcc>
 800ef4a:	f1b8 0f08 	cmp.w	r8, #8
 800ef4e:	d02e      	beq.n	800efae <read_submessage_format+0xae>
 800ef50:	f1b8 0f06 	cmp.w	r8, #6
 800ef54:	d011      	beq.n	800ef7a <read_submessage_format+0x7a>
 800ef56:	2301      	movs	r3, #1
 800ef58:	7513      	strb	r3, [r2, #20]
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f7fd f987 	bl	800c270 <ucdr_advance_buffer>
 800ef62:	b015      	add	sp, #84	@ 0x54
 800ef64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef68:	f1b8 0f07 	cmp.w	r8, #7
 800ef6c:	d02e      	beq.n	800efcc <read_submessage_format+0xcc>
 800ef6e:	f1b8 0f08 	cmp.w	r8, #8
 800ef72:	d01c      	beq.n	800efae <read_submessage_format+0xae>
 800ef74:	f1b8 0f06 	cmp.w	r8, #6
 800ef78:	d1ef      	bne.n	800ef5a <read_submessage_format+0x5a>
 800ef7a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800ef7e:	f1b8 0f00 	cmp.w	r8, #0
 800ef82:	d011      	beq.n	800efa8 <read_submessage_format+0xa8>
 800ef84:	ab0c      	add	r3, sp, #48	@ 0x30
 800ef86:	e9cd 3500 	strd	r3, r5, [sp]
 800ef8a:	2306      	movs	r3, #6
 800ef8c:	f88d 3016 	strb.w	r3, [sp, #22]
 800ef90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef94:	9302      	str	r3, [sp, #8]
 800ef96:	4632      	mov	r2, r6
 800ef98:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ef9c:	4638      	mov	r0, r7
 800ef9e:	47c0      	blx	r8
 800efa0:	2301      	movs	r3, #1
 800efa2:	69e2      	ldr	r2, [r4, #28]
 800efa4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800efa8:	2a00      	cmp	r2, #0
 800efaa:	d1d4      	bne.n	800ef56 <read_submessage_format+0x56>
 800efac:	e7d5      	b.n	800ef5a <read_submessage_format+0x5a>
 800efae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0f8      	beq.n	800efa8 <read_submessage_format+0xa8>
 800efb6:	a906      	add	r1, sp, #24
 800efb8:	a80c      	add	r0, sp, #48	@ 0x30
 800efba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800efbe:	f003 f837 	bl	8012030 <uxr_deserialize_SampleIdentity>
 800efc2:	b9a0      	cbnz	r0, 800efee <read_submessage_format+0xee>
 800efc4:	69e2      	ldr	r2, [r4, #28]
 800efc6:	2a00      	cmp	r2, #0
 800efc8:	d1c5      	bne.n	800ef56 <read_submessage_format+0x56>
 800efca:	e7c6      	b.n	800ef5a <read_submessage_format+0x5a>
 800efcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efd0:	b13b      	cbz	r3, 800efe2 <read_submessage_format+0xe2>
 800efd2:	a906      	add	r1, sp, #24
 800efd4:	a80c      	add	r0, sp, #48	@ 0x30
 800efd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800efda:	f002 fcfd 	bl	80119d8 <uxr_deserialize_BaseObjectRequest>
 800efde:	bb60      	cbnz	r0, 800f03a <read_submessage_format+0x13a>
 800efe0:	69e2      	ldr	r2, [r4, #28]
 800efe2:	68a3      	ldr	r3, [r4, #8]
 800efe4:	442b      	add	r3, r5
 800efe6:	60a3      	str	r3, [r4, #8]
 800efe8:	2a00      	cmp	r2, #0
 800efea:	d1b4      	bne.n	800ef56 <read_submessage_format+0x56>
 800efec:	e7b5      	b.n	800ef5a <read_submessage_format+0x5a>
 800efee:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800eff2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eff4:	1a52      	subs	r2, r2, r1
 800eff6:	eba8 0803 	sub.w	r8, r8, r3
 800effa:	a80c      	add	r0, sp, #48	@ 0x30
 800effc:	f7fd f8e8 	bl	800c1d0 <ucdr_init_buffer>
 800f000:	44a8      	add	r8, r5
 800f002:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f006:	a80c      	add	r0, sp, #48	@ 0x30
 800f008:	f7fd f8b6 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 800f00c:	fa1f f888 	uxth.w	r8, r8
 800f010:	ab0c      	add	r3, sp, #48	@ 0x30
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	f8cd 8004 	str.w	r8, [sp, #4]
 800f018:	2108      	movs	r1, #8
 800f01a:	f88d 1016 	strb.w	r1, [sp, #22]
 800f01e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800f022:	9102      	str	r1, [sp, #8]
 800f024:	ab06      	add	r3, sp, #24
 800f026:	4632      	mov	r2, r6
 800f028:	9905      	ldr	r1, [sp, #20]
 800f02a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800f02e:	4638      	mov	r0, r7
 800f030:	47b0      	blx	r6
 800f032:	2301      	movs	r3, #1
 800f034:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f038:	e7c4      	b.n	800efc4 <read_submessage_format+0xc4>
 800f03a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800f03e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f040:	1a52      	subs	r2, r2, r1
 800f042:	a80c      	add	r0, sp, #48	@ 0x30
 800f044:	eba8 0803 	sub.w	r8, r8, r3
 800f048:	f7fd f8c2 	bl	800c1d0 <ucdr_init_buffer>
 800f04c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f050:	a80c      	add	r0, sp, #48	@ 0x30
 800f052:	f7fd f891 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 800f056:	ab0c      	add	r3, sp, #48	@ 0x30
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f05e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f062:	44a8      	add	r8, r5
 800f064:	fa1f f888 	uxth.w	r8, r8
 800f068:	f8cd 8004 	str.w	r8, [sp, #4]
 800f06c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f070:	2107      	movs	r1, #7
 800f072:	f88d 1016 	strb.w	r1, [sp, #22]
 800f076:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800f07a:	9102      	str	r1, [sp, #8]
 800f07c:	4632      	mov	r2, r6
 800f07e:	b29b      	uxth	r3, r3
 800f080:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800f084:	9905      	ldr	r1, [sp, #20]
 800f086:	4638      	mov	r0, r7
 800f088:	47b0      	blx	r6
 800f08a:	2301      	movs	r3, #1
 800f08c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f090:	e7a6      	b.n	800efe0 <read_submessage_format+0xe0>
 800f092:	bf00      	nop

0800f094 <on_get_fragmentation_info>:
 800f094:	b500      	push	{lr}
 800f096:	b08b      	sub	sp, #44	@ 0x2c
 800f098:	4601      	mov	r1, r0
 800f09a:	2204      	movs	r2, #4
 800f09c:	a802      	add	r0, sp, #8
 800f09e:	f7fd f897 	bl	800c1d0 <ucdr_init_buffer>
 800f0a2:	f10d 0305 	add.w	r3, sp, #5
 800f0a6:	f10d 0206 	add.w	r2, sp, #6
 800f0aa:	a901      	add	r1, sp, #4
 800f0ac:	a802      	add	r0, sp, #8
 800f0ae:	f001 fe67 	bl	8010d80 <uxr_read_submessage_header>
 800f0b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0b6:	2b0d      	cmp	r3, #13
 800f0b8:	d003      	beq.n	800f0c2 <on_get_fragmentation_info+0x2e>
 800f0ba:	2000      	movs	r0, #0
 800f0bc:	b00b      	add	sp, #44	@ 0x2c
 800f0be:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0c6:	f013 0f02 	tst.w	r3, #2
 800f0ca:	bf14      	ite	ne
 800f0cc:	2002      	movne	r0, #2
 800f0ce:	2001      	moveq	r0, #1
 800f0d0:	b00b      	add	sp, #44	@ 0x2c
 800f0d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0d6:	bf00      	nop

0800f0d8 <read_submessage_get_info>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	2500      	movs	r5, #0
 800f0dc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f0e6:	460e      	mov	r6, r1
 800f0e8:	a810      	add	r0, sp, #64	@ 0x40
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f0f0:	f008 fe62 	bl	8017db8 <memset>
 800f0f4:	a903      	add	r1, sp, #12
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f002 fe16 	bl	8011d28 <uxr_deserialize_GET_INFO_Payload>
 800f0fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f100:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f104:	4620      	mov	r0, r4
 800f106:	f001 f81f 	bl	8010148 <uxr_session_header_offset>
 800f10a:	462b      	mov	r3, r5
 800f10c:	9000      	str	r0, [sp, #0]
 800f10e:	220c      	movs	r2, #12
 800f110:	a905      	add	r1, sp, #20
 800f112:	a808      	add	r0, sp, #32
 800f114:	f7fd f84a 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 800f118:	a910      	add	r1, sp, #64	@ 0x40
 800f11a:	a808      	add	r0, sp, #32
 800f11c:	f002 fe76 	bl	8011e0c <uxr_serialize_INFO_Payload>
 800f120:	9b08      	ldr	r3, [sp, #32]
 800f122:	462a      	mov	r2, r5
 800f124:	4629      	mov	r1, r5
 800f126:	4620      	mov	r0, r4
 800f128:	f000 ffb8 	bl	801009c <uxr_stamp_session_header>
 800f12c:	a808      	add	r0, sp, #32
 800f12e:	f7fd f87b 	bl	800c228 <ucdr_buffer_length>
 800f132:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f134:	4602      	mov	r2, r0
 800f136:	a905      	add	r1, sp, #20
 800f138:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f13c:	47a0      	blx	r4
 800f13e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f142:	bd70      	pop	{r4, r5, r6, pc}

0800f144 <write_submessage_acknack.isra.0>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	b092      	sub	sp, #72	@ 0x48
 800f148:	4605      	mov	r5, r0
 800f14a:	460e      	mov	r6, r1
 800f14c:	4614      	mov	r4, r2
 800f14e:	f000 fffb 	bl	8010148 <uxr_session_header_offset>
 800f152:	a905      	add	r1, sp, #20
 800f154:	9000      	str	r0, [sp, #0]
 800f156:	2300      	movs	r3, #0
 800f158:	a80a      	add	r0, sp, #40	@ 0x28
 800f15a:	2211      	movs	r2, #17
 800f15c:	f7fd f826 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 800f160:	2218      	movs	r2, #24
 800f162:	fb02 5404 	mla	r4, r2, r4, r5
 800f166:	2300      	movs	r3, #0
 800f168:	2205      	movs	r2, #5
 800f16a:	3450      	adds	r4, #80	@ 0x50
 800f16c:	210a      	movs	r1, #10
 800f16e:	a80a      	add	r0, sp, #40	@ 0x28
 800f170:	f001 fdec 	bl	8010d4c <uxr_buffer_submessage_header>
 800f174:	a903      	add	r1, sp, #12
 800f176:	4620      	mov	r0, r4
 800f178:	f007 fabe 	bl	80166f8 <uxr_compute_acknack>
 800f17c:	ba40      	rev16	r0, r0
 800f17e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f182:	a903      	add	r1, sp, #12
 800f184:	a80a      	add	r0, sp, #40	@ 0x28
 800f186:	f88d 6010 	strb.w	r6, [sp, #16]
 800f18a:	f002 feaf 	bl	8011eec <uxr_serialize_ACKNACK_Payload>
 800f18e:	2200      	movs	r2, #0
 800f190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f192:	4611      	mov	r1, r2
 800f194:	4628      	mov	r0, r5
 800f196:	f000 ff81 	bl	801009c <uxr_stamp_session_header>
 800f19a:	a80a      	add	r0, sp, #40	@ 0x28
 800f19c:	f7fd f844 	bl	800c228 <ucdr_buffer_length>
 800f1a0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	a905      	add	r1, sp, #20
 800f1a6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f1aa:	47a0      	blx	r4
 800f1ac:	b012      	add	sp, #72	@ 0x48
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}

0800f1b0 <uxr_init_session>:
 800f1b0:	b510      	push	{r4, lr}
 800f1b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f1e8 <uxr_init_session+0x38>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f1bc:	4604      	mov	r4, r0
 800f1be:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f1c2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f1c6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f1ca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f1ce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f1d2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f1d6:	2181      	movs	r1, #129	@ 0x81
 800f1d8:	f000 fecc 	bl	800ff74 <uxr_init_session_info>
 800f1dc:	f104 0008 	add.w	r0, r4, #8
 800f1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e4:	f001 bcce 	b.w	8010b84 <uxr_init_stream_storage>
	...

0800f1f0 <uxr_set_status_callback>:
 800f1f0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop

0800f1f8 <uxr_set_topic_callback>:
 800f1f8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop

0800f200 <uxr_set_request_callback>:
 800f200:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop

0800f208 <uxr_set_reply_callback>:
 800f208:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop

0800f210 <uxr_create_output_best_effort_stream>:
 800f210:	b510      	push	{r4, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	e9cd 2100 	strd	r2, r1, [sp]
 800f218:	4604      	mov	r4, r0
 800f21a:	f000 ff95 	bl	8010148 <uxr_session_header_offset>
 800f21e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f222:	4603      	mov	r3, r0
 800f224:	f104 0008 	add.w	r0, r4, #8
 800f228:	b004      	add	sp, #16
 800f22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f22e:	f001 bcf3 	b.w	8010c18 <uxr_add_output_best_effort_buffer>
 800f232:	bf00      	nop

0800f234 <uxr_create_output_reliable_stream>:
 800f234:	b510      	push	{r4, lr}
 800f236:	b088      	sub	sp, #32
 800f238:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f23c:	4604      	mov	r4, r0
 800f23e:	9303      	str	r3, [sp, #12]
 800f240:	f000 ff82 	bl	8010148 <uxr_session_header_offset>
 800f244:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f248:	9000      	str	r0, [sp, #0]
 800f24a:	9905      	ldr	r1, [sp, #20]
 800f24c:	f104 0008 	add.w	r0, r4, #8
 800f250:	f001 fcf6 	bl	8010c40 <uxr_add_output_reliable_buffer>
 800f254:	2200      	movs	r2, #0
 800f256:	b2c3      	uxtb	r3, r0
 800f258:	f363 0207 	bfi	r2, r3, #0, #8
 800f25c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f260:	f363 220f 	bfi	r2, r3, #8, #8
 800f264:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f268:	f363 4217 	bfi	r2, r3, #16, #8
 800f26c:	0e03      	lsrs	r3, r0, #24
 800f26e:	f363 621f 	bfi	r2, r3, #24, #8
 800f272:	4610      	mov	r0, r2
 800f274:	b008      	add	sp, #32
 800f276:	bd10      	pop	{r4, pc}

0800f278 <uxr_create_input_best_effort_stream>:
 800f278:	b082      	sub	sp, #8
 800f27a:	3008      	adds	r0, #8
 800f27c:	b002      	add	sp, #8
 800f27e:	f001 bcf9 	b.w	8010c74 <uxr_add_input_best_effort_buffer>
 800f282:	bf00      	nop

0800f284 <uxr_create_input_reliable_stream>:
 800f284:	b510      	push	{r4, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	4c0b      	ldr	r4, [pc, #44]	@ (800f2b8 <uxr_create_input_reliable_stream+0x34>)
 800f28a:	9400      	str	r4, [sp, #0]
 800f28c:	3008      	adds	r0, #8
 800f28e:	f001 fd07 	bl	8010ca0 <uxr_add_input_reliable_buffer>
 800f292:	2200      	movs	r2, #0
 800f294:	b2c3      	uxtb	r3, r0
 800f296:	f363 0207 	bfi	r2, r3, #0, #8
 800f29a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f29e:	f363 220f 	bfi	r2, r3, #8, #8
 800f2a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f2a6:	f363 4217 	bfi	r2, r3, #16, #8
 800f2aa:	0e03      	lsrs	r3, r0, #24
 800f2ac:	f363 621f 	bfi	r2, r3, #24, #8
 800f2b0:	4610      	mov	r0, r2
 800f2b2:	b004      	add	sp, #16
 800f2b4:	bd10      	pop	{r4, pc}
 800f2b6:	bf00      	nop
 800f2b8:	0800f095 	.word	0x0800f095

0800f2bc <uxr_epoch_nanos>:
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	4604      	mov	r4, r0
 800f2c0:	f001 fda4 	bl	8010e0c <uxr_nanos>
 800f2c4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f2c8:	1ac0      	subs	r0, r0, r3
 800f2ca:	eb61 0102 	sbc.w	r1, r1, r2
 800f2ce:	bd10      	pop	{r4, pc}

0800f2d0 <uxr_flash_output_streams>:
 800f2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d4:	7e03      	ldrb	r3, [r0, #24]
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	4604      	mov	r4, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d035      	beq.n	800f34a <uxr_flash_output_streams+0x7a>
 800f2de:	f04f 0900 	mov.w	r9, #0
 800f2e2:	4648      	mov	r0, r9
 800f2e4:	f10d 0802 	add.w	r8, sp, #2
 800f2e8:	af03      	add	r7, sp, #12
 800f2ea:	ae02      	add	r6, sp, #8
 800f2ec:	e006      	b.n	800f2fc <uxr_flash_output_streams+0x2c>
 800f2ee:	7e23      	ldrb	r3, [r4, #24]
 800f2f0:	f109 0901 	add.w	r9, r9, #1
 800f2f4:	fa5f f089 	uxtb.w	r0, r9
 800f2f8:	4283      	cmp	r3, r0
 800f2fa:	d926      	bls.n	800f34a <uxr_flash_output_streams+0x7a>
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	4611      	mov	r1, r2
 800f300:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f304:	f001 fbea 	bl	8010adc <uxr_stream_id>
 800f308:	3508      	adds	r5, #8
 800f30a:	4684      	mov	ip, r0
 800f30c:	4643      	mov	r3, r8
 800f30e:	463a      	mov	r2, r7
 800f310:	4631      	mov	r1, r6
 800f312:	4628      	mov	r0, r5
 800f314:	f8cd c004 	str.w	ip, [sp, #4]
 800f318:	f007 fa74 	bl	8016804 <uxr_prepare_best_effort_buffer_to_send>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d0e6      	beq.n	800f2ee <uxr_flash_output_streams+0x1e>
 800f320:	9b02      	ldr	r3, [sp, #8]
 800f322:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f326:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f32a:	4620      	mov	r0, r4
 800f32c:	f000 feb6 	bl	801009c <uxr_stamp_session_header>
 800f330:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f332:	9a03      	ldr	r2, [sp, #12]
 800f334:	685d      	ldr	r5, [r3, #4]
 800f336:	6818      	ldr	r0, [r3, #0]
 800f338:	9902      	ldr	r1, [sp, #8]
 800f33a:	47a8      	blx	r5
 800f33c:	f109 0901 	add.w	r9, r9, #1
 800f340:	7e23      	ldrb	r3, [r4, #24]
 800f342:	fa5f f089 	uxtb.w	r0, r9
 800f346:	4283      	cmp	r3, r0
 800f348:	d8d8      	bhi.n	800f2fc <uxr_flash_output_streams+0x2c>
 800f34a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f34e:	b38b      	cbz	r3, 800f3b4 <uxr_flash_output_streams+0xe4>
 800f350:	f04f 0900 	mov.w	r9, #0
 800f354:	f10d 0802 	add.w	r8, sp, #2
 800f358:	af03      	add	r7, sp, #12
 800f35a:	ae02      	add	r6, sp, #8
 800f35c:	4648      	mov	r0, r9
 800f35e:	2201      	movs	r2, #1
 800f360:	2102      	movs	r1, #2
 800f362:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f366:	f001 fbb9 	bl	8010adc <uxr_stream_id>
 800f36a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f36e:	3520      	adds	r5, #32
 800f370:	9001      	str	r0, [sp, #4]
 800f372:	e00d      	b.n	800f390 <uxr_flash_output_streams+0xc0>
 800f374:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f378:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f37c:	9b02      	ldr	r3, [sp, #8]
 800f37e:	f000 fe8d 	bl	801009c <uxr_stamp_session_header>
 800f382:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f384:	9a03      	ldr	r2, [sp, #12]
 800f386:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f38a:	9902      	ldr	r1, [sp, #8]
 800f38c:	6818      	ldr	r0, [r3, #0]
 800f38e:	47d0      	blx	sl
 800f390:	4643      	mov	r3, r8
 800f392:	463a      	mov	r2, r7
 800f394:	4631      	mov	r1, r6
 800f396:	4628      	mov	r0, r5
 800f398:	f007 fc52 	bl	8016c40 <uxr_prepare_next_reliable_buffer_to_send>
 800f39c:	4603      	mov	r3, r0
 800f39e:	4620      	mov	r0, r4
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1e7      	bne.n	800f374 <uxr_flash_output_streams+0xa4>
 800f3a4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f3a8:	f109 0901 	add.w	r9, r9, #1
 800f3ac:	fa5f f089 	uxtb.w	r0, r9
 800f3b0:	4283      	cmp	r3, r0
 800f3b2:	d8d4      	bhi.n	800f35e <uxr_flash_output_streams+0x8e>
 800f3b4:	b004      	add	sp, #16
 800f3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ba:	bf00      	nop

0800f3bc <read_submessage_info>:
 800f3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c0:	460d      	mov	r5, r1
 800f3c2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f3c6:	4669      	mov	r1, sp
 800f3c8:	4607      	mov	r7, r0
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f002 fbba 	bl	8011b44 <uxr_deserialize_BaseObjectReply>
 800f3d0:	a902      	add	r1, sp, #8
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f3da:	f7fb fd9f 	bl	800af1c <ucdr_deserialize_bool>
 800f3de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f3e2:	4004      	ands	r4, r0
 800f3e4:	b2e4      	uxtb	r4, r4
 800f3e6:	b95b      	cbnz	r3, 800f400 <read_submessage_info+0x44>
 800f3e8:	a987      	add	r1, sp, #540	@ 0x21c
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f7fb fd96 	bl	800af1c <ucdr_deserialize_bool>
 800f3f0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	b94b      	cbnz	r3, 800f40c <read_submessage_info+0x50>
 800f3f8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f400:	a903      	add	r1, sp, #12
 800f402:	4628      	mov	r0, r5
 800f404:	f002 fa46 	bl	8011894 <uxr_deserialize_ObjectVariant>
 800f408:	4004      	ands	r4, r0
 800f40a:	e7ed      	b.n	800f3e8 <read_submessage_info+0x2c>
 800f40c:	a988      	add	r1, sp, #544	@ 0x220
 800f40e:	4628      	mov	r0, r5
 800f410:	f7fb fdb2 	bl	800af78 <ucdr_deserialize_uint8_t>
 800f414:	4234      	tst	r4, r6
 800f416:	d0ef      	beq.n	800f3f8 <read_submessage_info+0x3c>
 800f418:	2800      	cmp	r0, #0
 800f41a:	d0ed      	beq.n	800f3f8 <read_submessage_info+0x3c>
 800f41c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f420:	2b0d      	cmp	r3, #13
 800f422:	d1e9      	bne.n	800f3f8 <read_submessage_info+0x3c>
 800f424:	a98a      	add	r1, sp, #552	@ 0x228
 800f426:	4628      	mov	r0, r5
 800f428:	f7fc fb4c 	bl	800bac4 <ucdr_deserialize_int16_t>
 800f42c:	b140      	cbz	r0, 800f440 <read_submessage_info+0x84>
 800f42e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f432:	2b00      	cmp	r3, #0
 800f434:	dd07      	ble.n	800f446 <read_submessage_info+0x8a>
 800f436:	f1b8 0f00 	cmp.w	r8, #0
 800f43a:	bf14      	ite	ne
 800f43c:	2001      	movne	r0, #1
 800f43e:	2002      	moveq	r0, #2
 800f440:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f444:	e7d8      	b.n	800f3f8 <read_submessage_info+0x3c>
 800f446:	2000      	movs	r0, #0
 800f448:	e7fa      	b.n	800f440 <read_submessage_info+0x84>
 800f44a:	bf00      	nop

0800f44c <read_submessage_list>:
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	b097      	sub	sp, #92	@ 0x5c
 800f452:	4ec1      	ldr	r6, [pc, #772]	@ (800f758 <read_submessage_list+0x30c>)
 800f454:	9209      	str	r2, [sp, #36]	@ 0x24
 800f456:	4604      	mov	r4, r0
 800f458:	460d      	mov	r5, r1
 800f45a:	f04f 0801 	mov.w	r8, #1
 800f45e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f462:	aa0c      	add	r2, sp, #48	@ 0x30
 800f464:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f468:	4628      	mov	r0, r5
 800f46a:	f001 fc89 	bl	8010d80 <uxr_read_submessage_header>
 800f46e:	2800      	cmp	r0, #0
 800f470:	f000 813e 	beq.w	800f6f0 <read_submessage_list+0x2a4>
 800f474:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f478:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f47c:	3b02      	subs	r3, #2
 800f47e:	2b0d      	cmp	r3, #13
 800f480:	d8ed      	bhi.n	800f45e <read_submessage_list+0x12>
 800f482:	a101      	add	r1, pc, #4	@ (adr r1, 800f488 <read_submessage_list+0x3c>)
 800f484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f488:	0800f6e7 	.word	0x0800f6e7
 800f48c:	0800f45f 	.word	0x0800f45f
 800f490:	0800f6d7 	.word	0x0800f6d7
 800f494:	0800f675 	.word	0x0800f675
 800f498:	0800f66b 	.word	0x0800f66b
 800f49c:	0800f45f 	.word	0x0800f45f
 800f4a0:	0800f45f 	.word	0x0800f45f
 800f4a4:	0800f5cb 	.word	0x0800f5cb
 800f4a8:	0800f55b 	.word	0x0800f55b
 800f4ac:	0800f51b 	.word	0x0800f51b
 800f4b0:	0800f45f 	.word	0x0800f45f
 800f4b4:	0800f45f 	.word	0x0800f45f
 800f4b8:	0800f45f 	.word	0x0800f45f
 800f4bc:	0800f4c1 	.word	0x0800f4c1
 800f4c0:	a910      	add	r1, sp, #64	@ 0x40
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	f002 fd62 	bl	8011f8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f4c8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f4cc:	f1b9 0f00 	cmp.w	r9, #0
 800f4d0:	f000 8116 	beq.w	800f700 <read_submessage_list+0x2b4>
 800f4d4:	f001 fc9a 	bl	8010e0c <uxr_nanos>
 800f4d8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f4da:	4602      	mov	r2, r0
 800f4dc:	460b      	mov	r3, r1
 800f4de:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	468c      	mov	ip, r1
 800f4e4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f4e8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f4ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f4ee:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f4f0:	468c      	mov	ip, r1
 800f4f2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f4f6:	46e2      	mov	sl, ip
 800f4f8:	46bc      	mov	ip, r7
 800f4fa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f4fe:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f502:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f506:	e9cd 7100 	strd	r7, r1, [sp]
 800f50a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f50e:	9106      	str	r1, [sp, #24]
 800f510:	4620      	mov	r0, r4
 800f512:	47c8      	blx	r9
 800f514:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f518:	e7a1      	b.n	800f45e <read_submessage_list+0x12>
 800f51a:	a910      	add	r1, sp, #64	@ 0x40
 800f51c:	4628      	mov	r0, r5
 800f51e:	f002 fd23 	bl	8011f68 <uxr_deserialize_HEARTBEAT_Payload>
 800f522:	2100      	movs	r1, #0
 800f524:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f528:	f001 fb02 	bl	8010b30 <uxr_stream_id_from_raw>
 800f52c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f530:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f532:	4639      	mov	r1, r7
 800f534:	f104 0008 	add.w	r0, r4, #8
 800f538:	f001 fbe8 	bl	8010d0c <uxr_get_input_reliable_stream>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d08e      	beq.n	800f45e <read_submessage_list+0x12>
 800f540:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f544:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f548:	f007 f8ca 	bl	80166e0 <uxr_process_heartbeat>
 800f54c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f550:	463a      	mov	r2, r7
 800f552:	4620      	mov	r0, r4
 800f554:	f7ff fdf6 	bl	800f144 <write_submessage_acknack.isra.0>
 800f558:	e781      	b.n	800f45e <read_submessage_list+0x12>
 800f55a:	a910      	add	r1, sp, #64	@ 0x40
 800f55c:	4628      	mov	r0, r5
 800f55e:	f002 fcdb 	bl	8011f18 <uxr_deserialize_ACKNACK_Payload>
 800f562:	2100      	movs	r1, #0
 800f564:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f568:	f001 fae2 	bl	8010b30 <uxr_stream_id_from_raw>
 800f56c:	900d      	str	r0, [sp, #52]	@ 0x34
 800f56e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f572:	f104 0008 	add.w	r0, r4, #8
 800f576:	f001 fbb5 	bl	8010ce4 <uxr_get_output_reliable_stream>
 800f57a:	4607      	mov	r7, r0
 800f57c:	2800      	cmp	r0, #0
 800f57e:	f43f af6e 	beq.w	800f45e <read_submessage_list+0x12>
 800f582:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f586:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f58a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f58e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f592:	b289      	uxth	r1, r1
 800f594:	f007 fbfe 	bl	8016d94 <uxr_process_acknack>
 800f598:	4638      	mov	r0, r7
 800f59a:	f007 fbbb 	bl	8016d14 <uxr_begin_output_nack_buffer_it>
 800f59e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f5a2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f5a6:	e006      	b.n	800f5b6 <read_submessage_list+0x16a>
 800f5a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f5aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f5ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f5b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f5b2:	6818      	ldr	r0, [r3, #0]
 800f5b4:	47c8      	blx	r9
 800f5b6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f5ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f5bc:	4651      	mov	r1, sl
 800f5be:	4638      	mov	r0, r7
 800f5c0:	f007 fbaa 	bl	8016d18 <uxr_next_reliable_nack_buffer_to_send>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d1ef      	bne.n	800f5a8 <read_submessage_list+0x15c>
 800f5c8:	e749      	b.n	800f45e <read_submessage_list+0x12>
 800f5ca:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f5ce:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f5d2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f5d6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f5da:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f5de:	4651      	mov	r1, sl
 800f5e0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f5e4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800f5e8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800f5ec:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f5f6:	f002 f9ef 	bl	80119d8 <uxr_deserialize_BaseObjectRequest>
 800f5fa:	4650      	mov	r0, sl
 800f5fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800f5fe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f602:	f000 fdc7 	bl	8010194 <uxr_parse_base_object_request>
 800f606:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800f60a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f60c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800f610:	9110      	str	r1, [sp, #64]	@ 0x40
 800f612:	3f04      	subs	r7, #4
 800f614:	f009 090e 	and.w	r9, r9, #14
 800f618:	b2bf      	uxth	r7, r7
 800f61a:	f1bb 0f00 	cmp.w	fp, #0
 800f61e:	d006      	beq.n	800f62e <read_submessage_list+0x1e2>
 800f620:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	4652      	mov	r2, sl
 800f628:	2300      	movs	r3, #0
 800f62a:	4620      	mov	r0, r4
 800f62c:	47d8      	blx	fp
 800f62e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f630:	b16a      	cbz	r2, 800f64e <read_submessage_list+0x202>
 800f632:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f634:	2100      	movs	r1, #0
 800f636:	3802      	subs	r0, #2
 800f638:	e002      	b.n	800f640 <read_submessage_list+0x1f4>
 800f63a:	3101      	adds	r1, #1
 800f63c:	4291      	cmp	r1, r2
 800f63e:	d006      	beq.n	800f64e <read_submessage_list+0x202>
 800f640:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f644:	4553      	cmp	r3, sl
 800f646:	d1f8      	bne.n	800f63a <read_submessage_list+0x1ee>
 800f648:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f64a:	2200      	movs	r2, #0
 800f64c:	545a      	strb	r2, [r3, r1]
 800f64e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f652:	9102      	str	r1, [sp, #8]
 800f654:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f656:	9101      	str	r1, [sp, #4]
 800f658:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f65a:	9100      	str	r1, [sp, #0]
 800f65c:	464b      	mov	r3, r9
 800f65e:	463a      	mov	r2, r7
 800f660:	4629      	mov	r1, r5
 800f662:	4620      	mov	r0, r4
 800f664:	f7ff fc4c 	bl	800ef00 <read_submessage_format>
 800f668:	e6f9      	b.n	800f45e <read_submessage_list+0x12>
 800f66a:	4629      	mov	r1, r5
 800f66c:	4620      	mov	r0, r4
 800f66e:	f7ff fea5 	bl	800f3bc <read_submessage_info>
 800f672:	e6f4      	b.n	800f45e <read_submessage_list+0x12>
 800f674:	2a00      	cmp	r2, #0
 800f676:	d03e      	beq.n	800f6f6 <read_submessage_list+0x2aa>
 800f678:	a910      	add	r1, sp, #64	@ 0x40
 800f67a:	4628      	mov	r0, r5
 800f67c:	f002 fba8 	bl	8011dd0 <uxr_deserialize_STATUS_Payload>
 800f680:	a90e      	add	r1, sp, #56	@ 0x38
 800f682:	aa0d      	add	r2, sp, #52	@ 0x34
 800f684:	a810      	add	r0, sp, #64	@ 0x40
 800f686:	f000 fd85 	bl	8010194 <uxr_parse_base_object_request>
 800f68a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f68e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f690:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f694:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f698:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f69a:	f1ba 0f00 	cmp.w	sl, #0
 800f69e:	d006      	beq.n	800f6ae <read_submessage_list+0x262>
 800f6a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	463a      	mov	r2, r7
 800f6a8:	464b      	mov	r3, r9
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	47d0      	blx	sl
 800f6ae:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f6b0:	2a00      	cmp	r2, #0
 800f6b2:	f43f aed4 	beq.w	800f45e <read_submessage_list+0x12>
 800f6b6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	3802      	subs	r0, #2
 800f6bc:	e003      	b.n	800f6c6 <read_submessage_list+0x27a>
 800f6be:	3101      	adds	r1, #1
 800f6c0:	4291      	cmp	r1, r2
 800f6c2:	f43f aecc 	beq.w	800f45e <read_submessage_list+0x12>
 800f6c6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f6ca:	42bb      	cmp	r3, r7
 800f6cc:	d1f7      	bne.n	800f6be <read_submessage_list+0x272>
 800f6ce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f6d0:	f803 9001 	strb.w	r9, [r3, r1]
 800f6d4:	e6c3      	b.n	800f45e <read_submessage_list+0x12>
 800f6d6:	2a00      	cmp	r2, #0
 800f6d8:	f47f aec1 	bne.w	800f45e <read_submessage_list+0x12>
 800f6dc:	4629      	mov	r1, r5
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 fc9e 	bl	8010020 <uxr_read_create_session_status>
 800f6e4:	e6bb      	b.n	800f45e <read_submessage_list+0x12>
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f7ff fcf5 	bl	800f0d8 <read_submessage_get_info>
 800f6ee:	e6b6      	b.n	800f45e <read_submessage_list+0x12>
 800f6f0:	b017      	add	sp, #92	@ 0x5c
 800f6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f000 fc9d 	bl	8010038 <uxr_read_delete_session_status>
 800f6fe:	e6ae      	b.n	800f45e <read_submessage_list+0x12>
 800f700:	f001 fb84 	bl	8010e0c <uxr_nanos>
 800f704:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f706:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f708:	464f      	mov	r7, r9
 800f70a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f70e:	1812      	adds	r2, r2, r0
 800f710:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f712:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f714:	eb47 0101 	adc.w	r1, r7, r1
 800f718:	464f      	mov	r7, r9
 800f71a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f71e:	463b      	mov	r3, r7
 800f720:	4684      	mov	ip, r0
 800f722:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f726:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f72a:	eb1c 0c00 	adds.w	ip, ip, r0
 800f72e:	464f      	mov	r7, r9
 800f730:	eb43 0307 	adc.w	r3, r3, r7
 800f734:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f738:	eb61 0303 	sbc.w	r3, r1, r3
 800f73c:	0fda      	lsrs	r2, r3, #31
 800f73e:	eb12 020c 	adds.w	r2, r2, ip
 800f742:	f143 0300 	adc.w	r3, r3, #0
 800f746:	0852      	lsrs	r2, r2, #1
 800f748:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f74c:	105b      	asrs	r3, r3, #1
 800f74e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f752:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f756:	e6dd      	b.n	800f514 <read_submessage_list+0xc8>
 800f758:	3b9aca00 	.word	0x3b9aca00

0800f75c <listen_message_reliably>:
 800f75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f760:	1e0b      	subs	r3, r1, #0
 800f762:	b09d      	sub	sp, #116	@ 0x74
 800f764:	bfb8      	it	lt
 800f766:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f76a:	4680      	mov	r8, r0
 800f76c:	9305      	str	r3, [sp, #20]
 800f76e:	f001 fb33 	bl	8010dd8 <uxr_millis>
 800f772:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f776:	4681      	mov	r9, r0
 800f778:	2a00      	cmp	r2, #0
 800f77a:	f000 80a1 	beq.w	800f8c0 <listen_message_reliably+0x164>
 800f77e:	2600      	movs	r6, #0
 800f780:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f784:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f788:	9303      	str	r3, [sp, #12]
 800f78a:	4630      	mov	r0, r6
 800f78c:	460f      	mov	r7, r1
 800f78e:	e00f      	b.n	800f7b0 <listen_message_reliably+0x54>
 800f790:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f794:	9903      	ldr	r1, [sp, #12]
 800f796:	455a      	cmp	r2, fp
 800f798:	f106 0601 	add.w	r6, r6, #1
 800f79c:	eb73 0101 	sbcs.w	r1, r3, r1
 800f7a0:	b2f0      	uxtb	r0, r6
 800f7a2:	da01      	bge.n	800f7a8 <listen_message_reliably+0x4c>
 800f7a4:	4693      	mov	fp, r2
 800f7a6:	9303      	str	r3, [sp, #12]
 800f7a8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f7ac:	4283      	cmp	r3, r0
 800f7ae:	d960      	bls.n	800f872 <listen_message_reliably+0x116>
 800f7b0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f7b4:	2102      	movs	r1, #2
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f001 f990 	bl	8010adc <uxr_stream_id>
 800f7bc:	00e4      	lsls	r4, r4, #3
 800f7be:	f104 0520 	add.w	r5, r4, #32
 800f7c2:	4445      	add	r5, r8
 800f7c4:	4601      	mov	r1, r0
 800f7c6:	463b      	mov	r3, r7
 800f7c8:	464a      	mov	r2, r9
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7ce:	f007 fa77 	bl	8016cc0 <uxr_update_output_stream_heartbeat_timestamp>
 800f7d2:	eb08 0304 	add.w	r3, r8, r4
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d0da      	beq.n	800f790 <listen_message_reliably+0x34>
 800f7da:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f7de:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f7e2:	9304      	str	r3, [sp, #16]
 800f7e4:	4640      	mov	r0, r8
 800f7e6:	f000 fcaf 	bl	8010148 <uxr_session_header_offset>
 800f7ea:	3501      	adds	r5, #1
 800f7ec:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f7f0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f7f4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	2211      	movs	r2, #17
 800f7fc:	9000      	str	r0, [sp, #0]
 800f7fe:	a90c      	add	r1, sp, #48	@ 0x30
 800f800:	4650      	mov	r0, sl
 800f802:	f7fc fcd3 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 800f806:	2300      	movs	r3, #0
 800f808:	2205      	movs	r2, #5
 800f80a:	210b      	movs	r1, #11
 800f80c:	4650      	mov	r0, sl
 800f80e:	f001 fa9d 	bl	8010d4c <uxr_buffer_submessage_header>
 800f812:	8968      	ldrh	r0, [r5, #10]
 800f814:	2101      	movs	r1, #1
 800f816:	f007 fb15 	bl	8016e44 <uxr_seq_num_add>
 800f81a:	892b      	ldrh	r3, [r5, #8]
 800f81c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f820:	4602      	mov	r2, r0
 800f822:	9b04      	ldr	r3, [sp, #16]
 800f824:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f828:	a90a      	add	r1, sp, #40	@ 0x28
 800f82a:	4650      	mov	r0, sl
 800f82c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f830:	f002 fb86 	bl	8011f40 <uxr_serialize_HEARTBEAT_Payload>
 800f834:	2200      	movs	r2, #0
 800f836:	4611      	mov	r1, r2
 800f838:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f83a:	4640      	mov	r0, r8
 800f83c:	f000 fc2e 	bl	801009c <uxr_stamp_session_header>
 800f840:	4650      	mov	r0, sl
 800f842:	f7fc fcf1 	bl	800c228 <ucdr_buffer_length>
 800f846:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f84a:	4602      	mov	r2, r0
 800f84c:	a90c      	add	r1, sp, #48	@ 0x30
 800f84e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f852:	4444      	add	r4, r8
 800f854:	47a8      	blx	r5
 800f856:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f85a:	9903      	ldr	r1, [sp, #12]
 800f85c:	455a      	cmp	r2, fp
 800f85e:	f106 0601 	add.w	r6, r6, #1
 800f862:	eb73 0101 	sbcs.w	r1, r3, r1
 800f866:	b2f0      	uxtb	r0, r6
 800f868:	db9c      	blt.n	800f7a4 <listen_message_reliably+0x48>
 800f86a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f86e:	4283      	cmp	r3, r0
 800f870:	d89e      	bhi.n	800f7b0 <listen_message_reliably+0x54>
 800f872:	9a03      	ldr	r2, [sp, #12]
 800f874:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f878:	429a      	cmp	r2, r3
 800f87a:	bf08      	it	eq
 800f87c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f880:	d01e      	beq.n	800f8c0 <listen_message_reliably+0x164>
 800f882:	ebab 0309 	sub.w	r3, fp, r9
 800f886:	9905      	ldr	r1, [sp, #20]
 800f888:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	bf08      	it	eq
 800f890:	2301      	moveq	r3, #1
 800f892:	4299      	cmp	r1, r3
 800f894:	bfa8      	it	ge
 800f896:	4619      	movge	r1, r3
 800f898:	6894      	ldr	r4, [r2, #8]
 800f89a:	6810      	ldr	r0, [r2, #0]
 800f89c:	4689      	mov	r9, r1
 800f89e:	460b      	mov	r3, r1
 800f8a0:	aa08      	add	r2, sp, #32
 800f8a2:	a907      	add	r1, sp, #28
 800f8a4:	47a0      	blx	r4
 800f8a6:	b968      	cbnz	r0, 800f8c4 <listen_message_reliably+0x168>
 800f8a8:	9b05      	ldr	r3, [sp, #20]
 800f8aa:	eba3 0309 	sub.w	r3, r3, r9
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	9305      	str	r3, [sp, #20]
 800f8b2:	f73f af5c 	bgt.w	800f76e <listen_message_reliably+0x12>
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	b01d      	add	sp, #116	@ 0x74
 800f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c0:	9b05      	ldr	r3, [sp, #20]
 800f8c2:	e7e0      	b.n	800f886 <listen_message_reliably+0x12a>
 800f8c4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	a80c      	add	r0, sp, #48	@ 0x30
 800f8cc:	f7fc fc80 	bl	800c1d0 <ucdr_init_buffer>
 800f8d0:	2500      	movs	r5, #0
 800f8d2:	f10d 031a 	add.w	r3, sp, #26
 800f8d6:	aa06      	add	r2, sp, #24
 800f8d8:	a90c      	add	r1, sp, #48	@ 0x30
 800f8da:	4640      	mov	r0, r8
 800f8dc:	f88d 5018 	strb.w	r5, [sp, #24]
 800f8e0:	f000 fbf0 	bl	80100c4 <uxr_read_session_header>
 800f8e4:	b918      	cbnz	r0, 800f8ee <listen_message_reliably+0x192>
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	b01d      	add	sp, #116	@ 0x74
 800f8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f8f4:	f001 f91c 	bl	8010b30 <uxr_stream_id_from_raw>
 800f8f8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f8fc:	2d01      	cmp	r5, #1
 800f8fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f902:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f906:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f90a:	d04b      	beq.n	800f9a4 <listen_message_reliably+0x248>
 800f90c:	2d02      	cmp	r5, #2
 800f90e:	d00f      	beq.n	800f930 <listen_message_reliably+0x1d4>
 800f910:	2d00      	cmp	r5, #0
 800f912:	d1e8      	bne.n	800f8e6 <listen_message_reliably+0x18a>
 800f914:	4629      	mov	r1, r5
 800f916:	4628      	mov	r0, r5
 800f918:	f001 f90a 	bl	8010b30 <uxr_stream_id_from_raw>
 800f91c:	a90c      	add	r1, sp, #48	@ 0x30
 800f91e:	4602      	mov	r2, r0
 800f920:	4640      	mov	r0, r8
 800f922:	920a      	str	r2, [sp, #40]	@ 0x28
 800f924:	f7ff fd92 	bl	800f44c <read_submessage_list>
 800f928:	4620      	mov	r0, r4
 800f92a:	b01d      	add	sp, #116	@ 0x74
 800f92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f930:	4631      	mov	r1, r6
 800f932:	f108 0008 	add.w	r0, r8, #8
 800f936:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f93a:	f001 f9e7 	bl	8010d0c <uxr_get_input_reliable_stream>
 800f93e:	4607      	mov	r7, r0
 800f940:	b338      	cbz	r0, 800f992 <listen_message_reliably+0x236>
 800f942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f944:	9203      	str	r2, [sp, #12]
 800f946:	a80c      	add	r0, sp, #48	@ 0x30
 800f948:	f7fc fc72 	bl	800c230 <ucdr_buffer_remaining>
 800f94c:	4603      	mov	r3, r0
 800f94e:	f10d 0019 	add.w	r0, sp, #25
 800f952:	9000      	str	r0, [sp, #0]
 800f954:	9a03      	ldr	r2, [sp, #12]
 800f956:	4651      	mov	r1, sl
 800f958:	4638      	mov	r0, r7
 800f95a:	f006 fdc7 	bl	80164ec <uxr_receive_reliable_message>
 800f95e:	b1c0      	cbz	r0, 800f992 <listen_message_reliably+0x236>
 800f960:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f964:	b393      	cbz	r3, 800f9cc <listen_message_reliably+0x270>
 800f966:	ad14      	add	r5, sp, #80	@ 0x50
 800f968:	f04f 0a02 	mov.w	sl, #2
 800f96c:	e00a      	b.n	800f984 <listen_message_reliably+0x228>
 800f96e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f972:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f976:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f97a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f97c:	4629      	mov	r1, r5
 800f97e:	4640      	mov	r0, r8
 800f980:	f7ff fd64 	bl	800f44c <read_submessage_list>
 800f984:	2204      	movs	r2, #4
 800f986:	4629      	mov	r1, r5
 800f988:	4638      	mov	r0, r7
 800f98a:	f006 fe2f 	bl	80165ec <uxr_next_input_reliable_buffer_available>
 800f98e:	2800      	cmp	r0, #0
 800f990:	d1ed      	bne.n	800f96e <listen_message_reliably+0x212>
 800f992:	4640      	mov	r0, r8
 800f994:	4632      	mov	r2, r6
 800f996:	4649      	mov	r1, r9
 800f998:	f7ff fbd4 	bl	800f144 <write_submessage_acknack.isra.0>
 800f99c:	4620      	mov	r0, r4
 800f99e:	b01d      	add	sp, #116	@ 0x74
 800f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a4:	4631      	mov	r1, r6
 800f9a6:	f108 0008 	add.w	r0, r8, #8
 800f9aa:	f001 f9a5 	bl	8010cf8 <uxr_get_input_best_effort_stream>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d099      	beq.n	800f8e6 <listen_message_reliably+0x18a>
 800f9b2:	4651      	mov	r1, sl
 800f9b4:	f006 fd06 	bl	80163c4 <uxr_receive_best_effort_message>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d094      	beq.n	800f8e6 <listen_message_reliably+0x18a>
 800f9bc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f9c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9c2:	a90c      	add	r1, sp, #48	@ 0x30
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	f7ff fd41 	bl	800f44c <read_submessage_list>
 800f9ca:	e78c      	b.n	800f8e6 <listen_message_reliably+0x18a>
 800f9cc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f9d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9d2:	a90c      	add	r1, sp, #48	@ 0x30
 800f9d4:	4640      	mov	r0, r8
 800f9d6:	f7ff fd39 	bl	800f44c <read_submessage_list>
 800f9da:	e7c4      	b.n	800f966 <listen_message_reliably+0x20a>

0800f9dc <uxr_run_session_timeout>:
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	4604      	mov	r4, r0
 800f9e0:	460d      	mov	r5, r1
 800f9e2:	f001 f9f9 	bl	8010dd8 <uxr_millis>
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f7ff fc71 	bl	800f2d0 <uxr_flash_output_streams>
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f7ff feb3 	bl	800f75c <listen_message_reliably>
 800f9f6:	f001 f9ef 	bl	8010dd8 <uxr_millis>
 800f9fa:	1b83      	subs	r3, r0, r6
 800f9fc:	1ae9      	subs	r1, r5, r3
 800f9fe:	2900      	cmp	r1, #0
 800fa00:	dcf6      	bgt.n	800f9f0 <uxr_run_session_timeout+0x14>
 800fa02:	f104 0008 	add.w	r0, r4, #8
 800fa06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa0a:	f001 b989 	b.w	8010d20 <uxr_output_streams_confirmed>
 800fa0e:	bf00      	nop

0800fa10 <uxr_run_session_until_data>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	4604      	mov	r4, r0
 800fa14:	460d      	mov	r5, r1
 800fa16:	f001 f9df 	bl	8010dd8 <uxr_millis>
 800fa1a:	4606      	mov	r6, r0
 800fa1c:	4620      	mov	r0, r4
 800fa1e:	f7ff fc57 	bl	800f2d0 <uxr_flash_output_streams>
 800fa22:	2300      	movs	r3, #0
 800fa24:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800fa28:	4629      	mov	r1, r5
 800fa2a:	e005      	b.n	800fa38 <uxr_run_session_until_data+0x28>
 800fa2c:	f001 f9d4 	bl	8010dd8 <uxr_millis>
 800fa30:	1b83      	subs	r3, r0, r6
 800fa32:	1ae9      	subs	r1, r5, r3
 800fa34:	2900      	cmp	r1, #0
 800fa36:	dd07      	ble.n	800fa48 <uxr_run_session_until_data+0x38>
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f7ff fe8f 	bl	800f75c <listen_message_reliably>
 800fa3e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d0f2      	beq.n	800fa2c <uxr_run_session_until_data+0x1c>
 800fa46:	bd70      	pop	{r4, r5, r6, pc}
 800fa48:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800fa4c:	bd70      	pop	{r4, r5, r6, pc}
 800fa4e:	bf00      	nop

0800fa50 <uxr_run_session_until_confirm_delivery>:
 800fa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa54:	4606      	mov	r6, r0
 800fa56:	460d      	mov	r5, r1
 800fa58:	f001 f9be 	bl	8010dd8 <uxr_millis>
 800fa5c:	4607      	mov	r7, r0
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f7ff fc36 	bl	800f2d0 <uxr_flash_output_streams>
 800fa64:	2d00      	cmp	r5, #0
 800fa66:	f106 0808 	add.w	r8, r6, #8
 800fa6a:	bfa8      	it	ge
 800fa6c:	462c      	movge	r4, r5
 800fa6e:	da07      	bge.n	800fa80 <uxr_run_session_until_confirm_delivery+0x30>
 800fa70:	e00e      	b.n	800fa90 <uxr_run_session_until_confirm_delivery+0x40>
 800fa72:	f7ff fe73 	bl	800f75c <listen_message_reliably>
 800fa76:	f001 f9af 	bl	8010dd8 <uxr_millis>
 800fa7a:	1bc3      	subs	r3, r0, r7
 800fa7c:	1aec      	subs	r4, r5, r3
 800fa7e:	d407      	bmi.n	800fa90 <uxr_run_session_until_confirm_delivery+0x40>
 800fa80:	4640      	mov	r0, r8
 800fa82:	f001 f94d 	bl	8010d20 <uxr_output_streams_confirmed>
 800fa86:	4603      	mov	r3, r0
 800fa88:	4621      	mov	r1, r4
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d0f0      	beq.n	800fa72 <uxr_run_session_until_confirm_delivery+0x22>
 800fa90:	4640      	mov	r0, r8
 800fa92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa96:	f001 b943 	b.w	8010d20 <uxr_output_streams_confirmed>
 800fa9a:	bf00      	nop

0800fa9c <uxr_run_session_until_all_status>:
 800fa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faa0:	9c08      	ldr	r4, [sp, #32]
 800faa2:	4606      	mov	r6, r0
 800faa4:	460f      	mov	r7, r1
 800faa6:	4691      	mov	r9, r2
 800faa8:	461d      	mov	r5, r3
 800faaa:	f7ff fc11 	bl	800f2d0 <uxr_flash_output_streams>
 800faae:	b124      	cbz	r4, 800faba <uxr_run_session_until_all_status+0x1e>
 800fab0:	4622      	mov	r2, r4
 800fab2:	21ff      	movs	r1, #255	@ 0xff
 800fab4:	4628      	mov	r0, r5
 800fab6:	f008 f97f 	bl	8017db8 <memset>
 800faba:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800fabe:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800fac0:	f001 f98a 	bl	8010dd8 <uxr_millis>
 800fac4:	3d01      	subs	r5, #1
 800fac6:	f1a9 0902 	sub.w	r9, r9, #2
 800faca:	4680      	mov	r8, r0
 800facc:	4639      	mov	r1, r7
 800face:	4630      	mov	r0, r6
 800fad0:	f7ff fe44 	bl	800f75c <listen_message_reliably>
 800fad4:	f001 f980 	bl	8010dd8 <uxr_millis>
 800fad8:	eba0 0008 	sub.w	r0, r0, r8
 800fadc:	1a39      	subs	r1, r7, r0
 800fade:	b344      	cbz	r4, 800fb32 <uxr_run_session_until_all_status+0x96>
 800fae0:	4628      	mov	r0, r5
 800fae2:	46ac      	mov	ip, r5
 800fae4:	2301      	movs	r3, #1
 800fae6:	e002      	b.n	800faee <uxr_run_session_until_all_status+0x52>
 800fae8:	42a3      	cmp	r3, r4
 800faea:	d20d      	bcs.n	800fb08 <uxr_run_session_until_all_status+0x6c>
 800faec:	3301      	adds	r3, #1
 800faee:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800faf2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800faf6:	d1f7      	bne.n	800fae8 <uxr_run_session_until_all_status+0x4c>
 800faf8:	42a3      	cmp	r3, r4
 800fafa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800fafe:	d213      	bcs.n	800fb28 <uxr_run_session_until_all_status+0x8c>
 800fb00:	2a00      	cmp	r2, #0
 800fb02:	d0f3      	beq.n	800faec <uxr_run_session_until_all_status+0x50>
 800fb04:	2900      	cmp	r1, #0
 800fb06:	dce2      	bgt.n	800face <uxr_run_session_until_all_status+0x32>
 800fb08:	2300      	movs	r3, #0
 800fb0a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800fb0c:	442c      	add	r4, r5
 800fb0e:	e001      	b.n	800fb14 <uxr_run_session_until_all_status+0x78>
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d812      	bhi.n	800fb3a <uxr_run_session_until_all_status+0x9e>
 800fb14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800fb18:	4284      	cmp	r4, r0
 800fb1a:	d1f9      	bne.n	800fb10 <uxr_run_session_until_all_status+0x74>
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	bf8c      	ite	hi
 800fb20:	2000      	movhi	r0, #0
 800fb22:	2001      	movls	r0, #1
 800fb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb28:	2900      	cmp	r1, #0
 800fb2a:	dded      	ble.n	800fb08 <uxr_run_session_until_all_status+0x6c>
 800fb2c:	2a00      	cmp	r2, #0
 800fb2e:	d1ce      	bne.n	800face <uxr_run_session_until_all_status+0x32>
 800fb30:	e7ea      	b.n	800fb08 <uxr_run_session_until_all_status+0x6c>
 800fb32:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800fb34:	2001      	movs	r0, #1
 800fb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fb40 <wait_session_status>:
 800fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	4604      	mov	r4, r0
 800fb46:	b09d      	sub	sp, #116	@ 0x74
 800fb48:	20ff      	movs	r0, #255	@ 0xff
 800fb4a:	7160      	strb	r0, [r4, #5]
 800fb4c:	9303      	str	r3, [sp, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f000 80b6 	beq.w	800fcc0 <wait_session_status+0x180>
 800fb54:	468a      	mov	sl, r1
 800fb56:	4691      	mov	r9, r2
 800fb58:	f04f 0b00 	mov.w	fp, #0
 800fb5c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb5e:	464a      	mov	r2, r9
 800fb60:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fb64:	4651      	mov	r1, sl
 800fb66:	47a8      	blx	r5
 800fb68:	f001 f936 	bl	8010dd8 <uxr_millis>
 800fb6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb70:	4605      	mov	r5, r0
 800fb72:	e009      	b.n	800fb88 <wait_session_status+0x48>
 800fb74:	f001 f930 	bl	8010dd8 <uxr_millis>
 800fb78:	1b40      	subs	r0, r0, r5
 800fb7a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	dd40      	ble.n	800fc04 <wait_session_status+0xc4>
 800fb82:	7960      	ldrb	r0, [r4, #5]
 800fb84:	28ff      	cmp	r0, #255	@ 0xff
 800fb86:	d145      	bne.n	800fc14 <wait_session_status+0xd4>
 800fb88:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fb8a:	a908      	add	r1, sp, #32
 800fb8c:	6896      	ldr	r6, [r2, #8]
 800fb8e:	6810      	ldr	r0, [r2, #0]
 800fb90:	aa09      	add	r2, sp, #36	@ 0x24
 800fb92:	47b0      	blx	r6
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d0ed      	beq.n	800fb74 <wait_session_status+0x34>
 800fb98:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800fb9c:	a80c      	add	r0, sp, #48	@ 0x30
 800fb9e:	f7fc fb17 	bl	800c1d0 <ucdr_init_buffer>
 800fba2:	2600      	movs	r6, #0
 800fba4:	f10d 031e 	add.w	r3, sp, #30
 800fba8:	aa07      	add	r2, sp, #28
 800fbaa:	a90c      	add	r1, sp, #48	@ 0x30
 800fbac:	4620      	mov	r0, r4
 800fbae:	f88d 601c 	strb.w	r6, [sp, #28]
 800fbb2:	f000 fa87 	bl	80100c4 <uxr_read_session_header>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d0dc      	beq.n	800fb74 <wait_session_status+0x34>
 800fbba:	4631      	mov	r1, r6
 800fbbc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800fbc0:	f000 ffb6 	bl	8010b30 <uxr_stream_id_from_raw>
 800fbc4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800fbc8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800fbcc:	9302      	str	r3, [sp, #8]
 800fbce:	2f01      	cmp	r7, #1
 800fbd0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800fbd4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fbd8:	d05c      	beq.n	800fc94 <wait_session_status+0x154>
 800fbda:	2f02      	cmp	r7, #2
 800fbdc:	d020      	beq.n	800fc20 <wait_session_status+0xe0>
 800fbde:	2f00      	cmp	r7, #0
 800fbe0:	d1c8      	bne.n	800fb74 <wait_session_status+0x34>
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	f000 ffa3 	bl	8010b30 <uxr_stream_id_from_raw>
 800fbea:	a90c      	add	r1, sp, #48	@ 0x30
 800fbec:	4602      	mov	r2, r0
 800fbee:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f7ff fc2b 	bl	800f44c <read_submessage_list>
 800fbf6:	f001 f8ef 	bl	8010dd8 <uxr_millis>
 800fbfa:	1b40      	subs	r0, r0, r5
 800fbfc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dcbe      	bgt.n	800fb82 <wait_session_status+0x42>
 800fc04:	9b03      	ldr	r3, [sp, #12]
 800fc06:	7960      	ldrb	r0, [r4, #5]
 800fc08:	f10b 0b01 	add.w	fp, fp, #1
 800fc0c:	455b      	cmp	r3, fp
 800fc0e:	d001      	beq.n	800fc14 <wait_session_status+0xd4>
 800fc10:	28ff      	cmp	r0, #255	@ 0xff
 800fc12:	d0a3      	beq.n	800fb5c <wait_session_status+0x1c>
 800fc14:	38ff      	subs	r0, #255	@ 0xff
 800fc16:	bf18      	it	ne
 800fc18:	2001      	movne	r0, #1
 800fc1a:	b01d      	add	sp, #116	@ 0x74
 800fc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc20:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800fc24:	9304      	str	r3, [sp, #16]
 800fc26:	4631      	mov	r1, r6
 800fc28:	f104 0008 	add.w	r0, r4, #8
 800fc2c:	f001 f86e 	bl	8010d0c <uxr_get_input_reliable_stream>
 800fc30:	4680      	mov	r8, r0
 800fc32:	b348      	cbz	r0, 800fc88 <wait_session_status+0x148>
 800fc34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc36:	9205      	str	r2, [sp, #20]
 800fc38:	a80c      	add	r0, sp, #48	@ 0x30
 800fc3a:	f7fc faf9 	bl	800c230 <ucdr_buffer_remaining>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	f10d 001d 	add.w	r0, sp, #29
 800fc44:	9000      	str	r0, [sp, #0]
 800fc46:	9a05      	ldr	r2, [sp, #20]
 800fc48:	9902      	ldr	r1, [sp, #8]
 800fc4a:	4640      	mov	r0, r8
 800fc4c:	f006 fc4e 	bl	80164ec <uxr_receive_reliable_message>
 800fc50:	b1d0      	cbz	r0, 800fc88 <wait_session_status+0x148>
 800fc52:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d03a      	beq.n	800fcd0 <wait_session_status+0x190>
 800fc5a:	9f04      	ldr	r7, [sp, #16]
 800fc5c:	e00a      	b.n	800fc74 <wait_session_status+0x134>
 800fc5e:	f04f 0302 	mov.w	r3, #2
 800fc62:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800fc66:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800fc6a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800fc6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fc70:	f7ff fbec 	bl	800f44c <read_submessage_list>
 800fc74:	a914      	add	r1, sp, #80	@ 0x50
 800fc76:	2204      	movs	r2, #4
 800fc78:	4640      	mov	r0, r8
 800fc7a:	f006 fcb7 	bl	80165ec <uxr_next_input_reliable_buffer_available>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	a914      	add	r1, sp, #80	@ 0x50
 800fc82:	4620      	mov	r0, r4
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1ea      	bne.n	800fc5e <wait_session_status+0x11e>
 800fc88:	9904      	ldr	r1, [sp, #16]
 800fc8a:	4632      	mov	r2, r6
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	f7ff fa59 	bl	800f144 <write_submessage_acknack.isra.0>
 800fc92:	e76f      	b.n	800fb74 <wait_session_status+0x34>
 800fc94:	4631      	mov	r1, r6
 800fc96:	f104 0008 	add.w	r0, r4, #8
 800fc9a:	f001 f82d 	bl	8010cf8 <uxr_get_input_best_effort_stream>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	f43f af68 	beq.w	800fb74 <wait_session_status+0x34>
 800fca4:	9902      	ldr	r1, [sp, #8]
 800fca6:	f006 fb8d 	bl	80163c4 <uxr_receive_best_effort_message>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	f43f af62 	beq.w	800fb74 <wait_session_status+0x34>
 800fcb0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fcb4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fcb6:	a90c      	add	r1, sp, #48	@ 0x30
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f7ff fbc7 	bl	800f44c <read_submessage_list>
 800fcbe:	e759      	b.n	800fb74 <wait_session_status+0x34>
 800fcc0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fcc2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fcc6:	47a0      	blx	r4
 800fcc8:	2001      	movs	r0, #1
 800fcca:	b01d      	add	sp, #116	@ 0x74
 800fccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fcd4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fcd6:	a90c      	add	r1, sp, #48	@ 0x30
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f7ff fbb7 	bl	800f44c <read_submessage_list>
 800fcde:	e7bc      	b.n	800fc5a <wait_session_status+0x11a>

0800fce0 <uxr_delete_session_retries>:
 800fce0:	b530      	push	{r4, r5, lr}
 800fce2:	b08f      	sub	sp, #60	@ 0x3c
 800fce4:	4604      	mov	r4, r0
 800fce6:	460d      	mov	r5, r1
 800fce8:	f000 fa2e 	bl	8010148 <uxr_session_header_offset>
 800fcec:	2300      	movs	r3, #0
 800fcee:	2210      	movs	r2, #16
 800fcf0:	9000      	str	r0, [sp, #0]
 800fcf2:	a902      	add	r1, sp, #8
 800fcf4:	a806      	add	r0, sp, #24
 800fcf6:	f7fc fa59 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 800fcfa:	a906      	add	r1, sp, #24
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f000 f973 	bl	800ffe8 <uxr_buffer_delete_session>
 800fd02:	2200      	movs	r2, #0
 800fd04:	4611      	mov	r1, r2
 800fd06:	9b06      	ldr	r3, [sp, #24]
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f000 f9c7 	bl	801009c <uxr_stamp_session_header>
 800fd0e:	a806      	add	r0, sp, #24
 800fd10:	f7fc fa8a 	bl	800c228 <ucdr_buffer_length>
 800fd14:	462b      	mov	r3, r5
 800fd16:	4602      	mov	r2, r0
 800fd18:	a902      	add	r1, sp, #8
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f7ff ff10 	bl	800fb40 <wait_session_status>
 800fd20:	b118      	cbz	r0, 800fd2a <uxr_delete_session_retries+0x4a>
 800fd22:	7960      	ldrb	r0, [r4, #5]
 800fd24:	fab0 f080 	clz	r0, r0
 800fd28:	0940      	lsrs	r0, r0, #5
 800fd2a:	b00f      	add	sp, #60	@ 0x3c
 800fd2c:	bd30      	pop	{r4, r5, pc}
 800fd2e:	bf00      	nop

0800fd30 <uxr_create_session>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	f100 0b08 	add.w	fp, r0, #8
 800fd38:	b0ab      	sub	sp, #172	@ 0xac
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	4658      	mov	r0, fp
 800fd3e:	f000 ff2b 	bl	8010b98 <uxr_reset_stream_storage>
 800fd42:	4620      	mov	r0, r4
 800fd44:	f000 fa00 	bl	8010148 <uxr_session_header_offset>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	9000      	str	r0, [sp, #0]
 800fd4c:	221c      	movs	r2, #28
 800fd4e:	a90b      	add	r1, sp, #44	@ 0x2c
 800fd50:	a812      	add	r0, sp, #72	@ 0x48
 800fd52:	f7fc fa2b 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 800fd56:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd58:	8a1a      	ldrh	r2, [r3, #16]
 800fd5a:	3a04      	subs	r2, #4
 800fd5c:	b292      	uxth	r2, r2
 800fd5e:	a912      	add	r1, sp, #72	@ 0x48
 800fd60:	4620      	mov	r0, r4
 800fd62:	f000 f917 	bl	800ff94 <uxr_buffer_create_session>
 800fd66:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fd68:	4620      	mov	r0, r4
 800fd6a:	f000 f983 	bl	8010074 <uxr_stamp_create_session_header>
 800fd6e:	a812      	add	r0, sp, #72	@ 0x48
 800fd70:	f7fc fa5a 	bl	800c228 <ucdr_buffer_length>
 800fd74:	23ff      	movs	r3, #255	@ 0xff
 800fd76:	7163      	strb	r3, [r4, #5]
 800fd78:	230a      	movs	r3, #10
 800fd7a:	46da      	mov	sl, fp
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	4683      	mov	fp, r0
 800fd80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd82:	465a      	mov	r2, fp
 800fd84:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fd88:	a90b      	add	r1, sp, #44	@ 0x2c
 800fd8a:	47a8      	blx	r5
 800fd8c:	f001 f824 	bl	8010dd8 <uxr_millis>
 800fd90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd94:	4605      	mov	r5, r0
 800fd96:	e009      	b.n	800fdac <uxr_create_session+0x7c>
 800fd98:	f001 f81e 	bl	8010dd8 <uxr_millis>
 800fd9c:	1b40      	subs	r0, r0, r5
 800fd9e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	7962      	ldrb	r2, [r4, #5]
 800fda6:	dd38      	ble.n	800fe1a <uxr_create_session+0xea>
 800fda8:	2aff      	cmp	r2, #255	@ 0xff
 800fdaa:	d13c      	bne.n	800fe26 <uxr_create_session+0xf6>
 800fdac:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fdae:	a907      	add	r1, sp, #28
 800fdb0:	6896      	ldr	r6, [r2, #8]
 800fdb2:	6810      	ldr	r0, [r2, #0]
 800fdb4:	aa08      	add	r2, sp, #32
 800fdb6:	47b0      	blx	r6
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d0ed      	beq.n	800fd98 <uxr_create_session+0x68>
 800fdbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fdc0:	a81a      	add	r0, sp, #104	@ 0x68
 800fdc2:	f7fc fa05 	bl	800c1d0 <ucdr_init_buffer>
 800fdc6:	2600      	movs	r6, #0
 800fdc8:	f10d 031a 	add.w	r3, sp, #26
 800fdcc:	aa06      	add	r2, sp, #24
 800fdce:	a91a      	add	r1, sp, #104	@ 0x68
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f88d 6018 	strb.w	r6, [sp, #24]
 800fdd6:	f000 f975 	bl	80100c4 <uxr_read_session_header>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	d0dc      	beq.n	800fd98 <uxr_create_session+0x68>
 800fdde:	4631      	mov	r1, r6
 800fde0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fde4:	f000 fea4 	bl	8010b30 <uxr_stream_id_from_raw>
 800fde8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fdec:	2e01      	cmp	r6, #1
 800fdee:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fdf2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800fdf6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fdfa:	d053      	beq.n	800fea4 <uxr_create_session+0x174>
 800fdfc:	2e02      	cmp	r6, #2
 800fdfe:	d018      	beq.n	800fe32 <uxr_create_session+0x102>
 800fe00:	2e00      	cmp	r6, #0
 800fe02:	d1c9      	bne.n	800fd98 <uxr_create_session+0x68>
 800fe04:	4631      	mov	r1, r6
 800fe06:	4630      	mov	r0, r6
 800fe08:	f000 fe92 	bl	8010b30 <uxr_stream_id_from_raw>
 800fe0c:	a91a      	add	r1, sp, #104	@ 0x68
 800fe0e:	4602      	mov	r2, r0
 800fe10:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe12:	4620      	mov	r0, r4
 800fe14:	f7ff fb1a 	bl	800f44c <read_submessage_list>
 800fe18:	e7be      	b.n	800fd98 <uxr_create_session+0x68>
 800fe1a:	9b03      	ldr	r3, [sp, #12]
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	9303      	str	r3, [sp, #12]
 800fe20:	d001      	beq.n	800fe26 <uxr_create_session+0xf6>
 800fe22:	2aff      	cmp	r2, #255	@ 0xff
 800fe24:	d0ac      	beq.n	800fd80 <uxr_create_session+0x50>
 800fe26:	2a00      	cmp	r2, #0
 800fe28:	d051      	beq.n	800fece <uxr_create_session+0x19e>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	b02b      	add	sp, #172	@ 0xac
 800fe2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe32:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fe36:	9304      	str	r3, [sp, #16]
 800fe38:	4639      	mov	r1, r7
 800fe3a:	4650      	mov	r0, sl
 800fe3c:	f000 ff66 	bl	8010d0c <uxr_get_input_reliable_stream>
 800fe40:	4680      	mov	r8, r0
 800fe42:	b348      	cbz	r0, 800fe98 <uxr_create_session+0x168>
 800fe44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fe46:	9205      	str	r2, [sp, #20]
 800fe48:	a81a      	add	r0, sp, #104	@ 0x68
 800fe4a:	f7fc f9f1 	bl	800c230 <ucdr_buffer_remaining>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	f10d 0019 	add.w	r0, sp, #25
 800fe54:	9000      	str	r0, [sp, #0]
 800fe56:	9a05      	ldr	r2, [sp, #20]
 800fe58:	4649      	mov	r1, r9
 800fe5a:	4640      	mov	r0, r8
 800fe5c:	f006 fb46 	bl	80164ec <uxr_receive_reliable_message>
 800fe60:	b1d0      	cbz	r0, 800fe98 <uxr_create_session+0x168>
 800fe62:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d038      	beq.n	800fedc <uxr_create_session+0x1ac>
 800fe6a:	9e04      	ldr	r6, [sp, #16]
 800fe6c:	e00a      	b.n	800fe84 <uxr_create_session+0x154>
 800fe6e:	f04f 0302 	mov.w	r3, #2
 800fe72:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800fe76:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800fe7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe80:	f7ff fae4 	bl	800f44c <read_submessage_list>
 800fe84:	a922      	add	r1, sp, #136	@ 0x88
 800fe86:	2204      	movs	r2, #4
 800fe88:	4640      	mov	r0, r8
 800fe8a:	f006 fbaf 	bl	80165ec <uxr_next_input_reliable_buffer_available>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	a922      	add	r1, sp, #136	@ 0x88
 800fe92:	4620      	mov	r0, r4
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d1ea      	bne.n	800fe6e <uxr_create_session+0x13e>
 800fe98:	9904      	ldr	r1, [sp, #16]
 800fe9a:	463a      	mov	r2, r7
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f7ff f951 	bl	800f144 <write_submessage_acknack.isra.0>
 800fea2:	e779      	b.n	800fd98 <uxr_create_session+0x68>
 800fea4:	4639      	mov	r1, r7
 800fea6:	4650      	mov	r0, sl
 800fea8:	f000 ff26 	bl	8010cf8 <uxr_get_input_best_effort_stream>
 800feac:	2800      	cmp	r0, #0
 800feae:	f43f af73 	beq.w	800fd98 <uxr_create_session+0x68>
 800feb2:	4649      	mov	r1, r9
 800feb4:	f006 fa86 	bl	80163c4 <uxr_receive_best_effort_message>
 800feb8:	2800      	cmp	r0, #0
 800feba:	f43f af6d 	beq.w	800fd98 <uxr_create_session+0x68>
 800febe:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fec2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fec4:	a91a      	add	r1, sp, #104	@ 0x68
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7ff fac0 	bl	800f44c <read_submessage_list>
 800fecc:	e764      	b.n	800fd98 <uxr_create_session+0x68>
 800fece:	4650      	mov	r0, sl
 800fed0:	f000 fe62 	bl	8010b98 <uxr_reset_stream_storage>
 800fed4:	2001      	movs	r0, #1
 800fed6:	b02b      	add	sp, #172	@ 0xac
 800fed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fedc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fee0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fee2:	a91a      	add	r1, sp, #104	@ 0x68
 800fee4:	4620      	mov	r0, r4
 800fee6:	f7ff fab1 	bl	800f44c <read_submessage_list>
 800feea:	e7be      	b.n	800fe6a <uxr_create_session+0x13a>

0800feec <uxr_prepare_stream_to_write_submessage>:
 800feec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef0:	b082      	sub	sp, #8
 800fef2:	4682      	mov	sl, r0
 800fef4:	4610      	mov	r0, r2
 800fef6:	4615      	mov	r5, r2
 800fef8:	461e      	mov	r6, r3
 800fefa:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800fefe:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800ff02:	9101      	str	r1, [sp, #4]
 800ff04:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ff08:	f000 ff60 	bl	8010dcc <uxr_submessage_padding>
 800ff0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff10:	f105 0904 	add.w	r9, r5, #4
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	4481      	add	r9, r0
 800ff18:	d01d      	beq.n	800ff56 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d116      	bne.n	800ff4c <uxr_prepare_stream_to_write_submessage+0x60>
 800ff1e:	4621      	mov	r1, r4
 800ff20:	f10a 0008 	add.w	r0, sl, #8
 800ff24:	f000 fede 	bl	8010ce4 <uxr_get_output_reliable_stream>
 800ff28:	4604      	mov	r4, r0
 800ff2a:	b158      	cbz	r0, 800ff44 <uxr_prepare_stream_to_write_submessage+0x58>
 800ff2c:	4649      	mov	r1, r9
 800ff2e:	4632      	mov	r2, r6
 800ff30:	f006 fd18 	bl	8016964 <uxr_prepare_reliable_buffer_to_write>
 800ff34:	4604      	mov	r4, r0
 800ff36:	b12c      	cbz	r4, 800ff44 <uxr_prepare_stream_to_write_submessage+0x58>
 800ff38:	4643      	mov	r3, r8
 800ff3a:	b2aa      	uxth	r2, r5
 800ff3c:	4639      	mov	r1, r7
 800ff3e:	4630      	mov	r0, r6
 800ff40:	f000 ff04 	bl	8010d4c <uxr_buffer_submessage_header>
 800ff44:	4620      	mov	r0, r4
 800ff46:	b002      	add	sp, #8
 800ff48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4c:	2400      	movs	r4, #0
 800ff4e:	4620      	mov	r0, r4
 800ff50:	b002      	add	sp, #8
 800ff52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff56:	4621      	mov	r1, r4
 800ff58:	f10a 0008 	add.w	r0, sl, #8
 800ff5c:	f000 feba 	bl	8010cd4 <uxr_get_output_best_effort_stream>
 800ff60:	4604      	mov	r4, r0
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d0ee      	beq.n	800ff44 <uxr_prepare_stream_to_write_submessage+0x58>
 800ff66:	4649      	mov	r1, r9
 800ff68:	4632      	mov	r2, r6
 800ff6a:	f006 fc2b 	bl	80167c4 <uxr_prepare_best_effort_buffer_to_write>
 800ff6e:	4604      	mov	r4, r0
 800ff70:	e7e1      	b.n	800ff36 <uxr_prepare_stream_to_write_submessage+0x4a>
 800ff72:	bf00      	nop

0800ff74 <uxr_init_session_info>:
 800ff74:	0e13      	lsrs	r3, r2, #24
 800ff76:	7043      	strb	r3, [r0, #1]
 800ff78:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800ff7c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ff80:	7001      	strb	r1, [r0, #0]
 800ff82:	70c3      	strb	r3, [r0, #3]
 800ff84:	2109      	movs	r1, #9
 800ff86:	23ff      	movs	r3, #255	@ 0xff
 800ff88:	f880 c002 	strb.w	ip, [r0, #2]
 800ff8c:	7102      	strb	r2, [r0, #4]
 800ff8e:	80c1      	strh	r1, [r0, #6]
 800ff90:	7143      	strb	r3, [r0, #5]
 800ff92:	4770      	bx	lr

0800ff94 <uxr_buffer_create_session>:
 800ff94:	b530      	push	{r4, r5, lr}
 800ff96:	b089      	sub	sp, #36	@ 0x24
 800ff98:	2300      	movs	r3, #0
 800ff9a:	4d12      	ldr	r5, [pc, #72]	@ (800ffe4 <uxr_buffer_create_session+0x50>)
 800ff9c:	9307      	str	r3, [sp, #28]
 800ff9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	9301      	str	r3, [sp, #4]
 800ffa6:	80c2      	strh	r2, [r0, #6]
 800ffa8:	f88d 2004 	strb.w	r2, [sp, #4]
 800ffac:	682a      	ldr	r2, [r5, #0]
 800ffae:	9200      	str	r2, [sp, #0]
 800ffb0:	88aa      	ldrh	r2, [r5, #4]
 800ffb2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ffb6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800ffba:	9202      	str	r2, [sp, #8]
 800ffbc:	460c      	mov	r4, r1
 800ffbe:	7802      	ldrb	r2, [r0, #0]
 800ffc0:	9303      	str	r3, [sp, #12]
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	f88d 200c 	strb.w	r2, [sp, #12]
 800ffc8:	4620      	mov	r0, r4
 800ffca:	2210      	movs	r2, #16
 800ffcc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ffd0:	9306      	str	r3, [sp, #24]
 800ffd2:	f000 febb 	bl	8010d4c <uxr_buffer_submessage_header>
 800ffd6:	4669      	mov	r1, sp
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f001 fe13 	bl	8011c04 <uxr_serialize_CREATE_CLIENT_Payload>
 800ffde:	b009      	add	sp, #36	@ 0x24
 800ffe0:	bd30      	pop	{r4, r5, pc}
 800ffe2:	bf00      	nop
 800ffe4:	08018d78 	.word	0x08018d78

0800ffe8 <uxr_buffer_delete_session>:
 800ffe8:	b510      	push	{r4, lr}
 800ffea:	4b0c      	ldr	r3, [pc, #48]	@ (801001c <uxr_buffer_delete_session+0x34>)
 800ffec:	b082      	sub	sp, #8
 800ffee:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800fff2:	f8ad c006 	strh.w	ip, [sp, #6]
 800fff6:	460c      	mov	r4, r1
 800fff8:	2202      	movs	r2, #2
 800fffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fffe:	80c2      	strh	r2, [r0, #6]
 8010000:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010004:	2204      	movs	r2, #4
 8010006:	2300      	movs	r3, #0
 8010008:	2103      	movs	r1, #3
 801000a:	4620      	mov	r0, r4
 801000c:	f000 fe9e 	bl	8010d4c <uxr_buffer_submessage_header>
 8010010:	a901      	add	r1, sp, #4
 8010012:	4620      	mov	r0, r4
 8010014:	f001 fe9c 	bl	8011d50 <uxr_serialize_DELETE_Payload>
 8010018:	b002      	add	sp, #8
 801001a:	bd10      	pop	{r4, pc}
 801001c:	08018d78 	.word	0x08018d78

08010020 <uxr_read_create_session_status>:
 8010020:	b510      	push	{r4, lr}
 8010022:	b088      	sub	sp, #32
 8010024:	4604      	mov	r4, r0
 8010026:	4608      	mov	r0, r1
 8010028:	a901      	add	r1, sp, #4
 801002a:	f001 fea1 	bl	8011d70 <uxr_deserialize_STATUS_AGENT_Payload>
 801002e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010032:	7163      	strb	r3, [r4, #5]
 8010034:	b008      	add	sp, #32
 8010036:	bd10      	pop	{r4, pc}

08010038 <uxr_read_delete_session_status>:
 8010038:	b510      	push	{r4, lr}
 801003a:	4604      	mov	r4, r0
 801003c:	b084      	sub	sp, #16
 801003e:	4608      	mov	r0, r1
 8010040:	a902      	add	r1, sp, #8
 8010042:	f001 fec5 	bl	8011dd0 <uxr_deserialize_STATUS_Payload>
 8010046:	88e3      	ldrh	r3, [r4, #6]
 8010048:	2b02      	cmp	r3, #2
 801004a:	d001      	beq.n	8010050 <uxr_read_delete_session_status+0x18>
 801004c:	b004      	add	sp, #16
 801004e:	bd10      	pop	{r4, pc}
 8010050:	f10d 000a 	add.w	r0, sp, #10
 8010054:	f7fe ff06 	bl	800ee64 <uxr_object_id_from_raw>
 8010058:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801005c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010060:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010064:	b29b      	uxth	r3, r3
 8010066:	2b02      	cmp	r3, #2
 8010068:	bf04      	itt	eq
 801006a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801006e:	7163      	strbeq	r3, [r4, #5]
 8010070:	b004      	add	sp, #16
 8010072:	bd10      	pop	{r4, pc}

08010074 <uxr_stamp_create_session_header>:
 8010074:	b510      	push	{r4, lr}
 8010076:	2208      	movs	r2, #8
 8010078:	b08a      	sub	sp, #40	@ 0x28
 801007a:	4604      	mov	r4, r0
 801007c:	eb0d 0002 	add.w	r0, sp, r2
 8010080:	f7fc f8a6 	bl	800c1d0 <ucdr_init_buffer>
 8010084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010088:	9400      	str	r4, [sp, #0]
 801008a:	2300      	movs	r3, #0
 801008c:	461a      	mov	r2, r3
 801008e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8010092:	a802      	add	r0, sp, #8
 8010094:	f001 f854 	bl	8011140 <uxr_serialize_message_header>
 8010098:	b00a      	add	sp, #40	@ 0x28
 801009a:	bd10      	pop	{r4, pc}

0801009c <uxr_stamp_session_header>:
 801009c:	b530      	push	{r4, r5, lr}
 801009e:	b08d      	sub	sp, #52	@ 0x34
 80100a0:	4604      	mov	r4, r0
 80100a2:	460d      	mov	r5, r1
 80100a4:	9203      	str	r2, [sp, #12]
 80100a6:	4619      	mov	r1, r3
 80100a8:	a804      	add	r0, sp, #16
 80100aa:	2208      	movs	r2, #8
 80100ac:	f7fc f890 	bl	800c1d0 <ucdr_init_buffer>
 80100b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100b4:	9b03      	ldr	r3, [sp, #12]
 80100b6:	9400      	str	r4, [sp, #0]
 80100b8:	462a      	mov	r2, r5
 80100ba:	a804      	add	r0, sp, #16
 80100bc:	f001 f840 	bl	8011140 <uxr_serialize_message_header>
 80100c0:	b00d      	add	sp, #52	@ 0x34
 80100c2:	bd30      	pop	{r4, r5, pc}

080100c4 <uxr_read_session_header>:
 80100c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c8:	4607      	mov	r7, r0
 80100ca:	b084      	sub	sp, #16
 80100cc:	4608      	mov	r0, r1
 80100ce:	460c      	mov	r4, r1
 80100d0:	4615      	mov	r5, r2
 80100d2:	461e      	mov	r6, r3
 80100d4:	f7fc f8ac 	bl	800c230 <ucdr_buffer_remaining>
 80100d8:	2808      	cmp	r0, #8
 80100da:	d803      	bhi.n	80100e4 <uxr_read_session_header+0x20>
 80100dc:	2000      	movs	r0, #0
 80100de:	b004      	add	sp, #16
 80100e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e4:	f10d 080c 	add.w	r8, sp, #12
 80100e8:	4633      	mov	r3, r6
 80100ea:	462a      	mov	r2, r5
 80100ec:	f8cd 8000 	str.w	r8, [sp]
 80100f0:	4620      	mov	r0, r4
 80100f2:	f10d 010b 	add.w	r1, sp, #11
 80100f6:	f001 f841 	bl	801117c <uxr_deserialize_message_header>
 80100fa:	783a      	ldrb	r2, [r7, #0]
 80100fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010100:	4293      	cmp	r3, r2
 8010102:	d1eb      	bne.n	80100dc <uxr_read_session_header+0x18>
 8010104:	061b      	lsls	r3, r3, #24
 8010106:	d41c      	bmi.n	8010142 <uxr_read_session_header+0x7e>
 8010108:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801010c:	787b      	ldrb	r3, [r7, #1]
 801010e:	429a      	cmp	r2, r3
 8010110:	d003      	beq.n	801011a <uxr_read_session_header+0x56>
 8010112:	2001      	movs	r0, #1
 8010114:	f080 0001 	eor.w	r0, r0, #1
 8010118:	e7e1      	b.n	80100de <uxr_read_session_header+0x1a>
 801011a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801011e:	78bb      	ldrb	r3, [r7, #2]
 8010120:	429a      	cmp	r2, r3
 8010122:	f107 0102 	add.w	r1, r7, #2
 8010126:	d1f4      	bne.n	8010112 <uxr_read_session_header+0x4e>
 8010128:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801012c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010130:	429a      	cmp	r2, r3
 8010132:	d1ee      	bne.n	8010112 <uxr_read_session_header+0x4e>
 8010134:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010138:	784b      	ldrb	r3, [r1, #1]
 801013a:	429a      	cmp	r2, r3
 801013c:	d1e9      	bne.n	8010112 <uxr_read_session_header+0x4e>
 801013e:	2000      	movs	r0, #0
 8010140:	e7e8      	b.n	8010114 <uxr_read_session_header+0x50>
 8010142:	2001      	movs	r0, #1
 8010144:	e7cb      	b.n	80100de <uxr_read_session_header+0x1a>
 8010146:	bf00      	nop

08010148 <uxr_session_header_offset>:
 8010148:	f990 3000 	ldrsb.w	r3, [r0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	bfac      	ite	ge
 8010150:	2008      	movge	r0, #8
 8010152:	2004      	movlt	r0, #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop

08010158 <uxr_init_base_object_request>:
 8010158:	b510      	push	{r4, lr}
 801015a:	88c3      	ldrh	r3, [r0, #6]
 801015c:	b082      	sub	sp, #8
 801015e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010162:	9101      	str	r1, [sp, #4]
 8010164:	f1a3 010a 	sub.w	r1, r3, #10
 8010168:	b289      	uxth	r1, r1
 801016a:	42a1      	cmp	r1, r4
 801016c:	d80e      	bhi.n	801018c <uxr_init_base_object_request+0x34>
 801016e:	3301      	adds	r3, #1
 8010170:	b29c      	uxth	r4, r3
 8010172:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010176:	b2db      	uxtb	r3, r3
 8010178:	80c4      	strh	r4, [r0, #6]
 801017a:	9801      	ldr	r0, [sp, #4]
 801017c:	7011      	strb	r1, [r2, #0]
 801017e:	7053      	strb	r3, [r2, #1]
 8010180:	1c91      	adds	r1, r2, #2
 8010182:	f7fe fe83 	bl	800ee8c <uxr_object_id_to_raw>
 8010186:	4620      	mov	r0, r4
 8010188:	b002      	add	sp, #8
 801018a:	bd10      	pop	{r4, pc}
 801018c:	230a      	movs	r3, #10
 801018e:	2100      	movs	r1, #0
 8010190:	461c      	mov	r4, r3
 8010192:	e7f1      	b.n	8010178 <uxr_init_base_object_request+0x20>

08010194 <uxr_parse_base_object_request>:
 8010194:	b570      	push	{r4, r5, r6, lr}
 8010196:	4604      	mov	r4, r0
 8010198:	3002      	adds	r0, #2
 801019a:	460d      	mov	r5, r1
 801019c:	4616      	mov	r6, r2
 801019e:	f7fe fe61 	bl	800ee64 <uxr_object_id_from_raw>
 80101a2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80101a6:	8028      	strh	r0, [r5, #0]
 80101a8:	806b      	strh	r3, [r5, #2]
 80101aa:	7822      	ldrb	r2, [r4, #0]
 80101ac:	7863      	ldrb	r3, [r4, #1]
 80101ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80101b2:	8033      	strh	r3, [r6, #0]
 80101b4:	bd70      	pop	{r4, r5, r6, pc}
 80101b6:	bf00      	nop

080101b8 <uxr_init_framing_io>:
 80101b8:	2300      	movs	r3, #0
 80101ba:	7041      	strb	r1, [r0, #1]
 80101bc:	7003      	strb	r3, [r0, #0]
 80101be:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop

080101c4 <uxr_write_framed_msg>:
 80101c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c8:	4617      	mov	r7, r2
 80101ca:	7842      	ldrb	r2, [r0, #1]
 80101cc:	b083      	sub	sp, #12
 80101ce:	460e      	mov	r6, r1
 80101d0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80101d4:	469a      	mov	sl, r3
 80101d6:	2901      	cmp	r1, #1
 80101d8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80101dc:	4604      	mov	r4, r0
 80101de:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80101e2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80101e6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80101ea:	f240 8137 	bls.w	801045c <uxr_write_framed_msg+0x298>
 80101ee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80101f2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80101f6:	2901      	cmp	r1, #1
 80101f8:	f04f 0202 	mov.w	r2, #2
 80101fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010200:	f240 808f 	bls.w	8010322 <uxr_write_framed_msg+0x15e>
 8010204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010206:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801020a:	b2dd      	uxtb	r5, r3
 801020c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010210:	2203      	movs	r2, #3
 8010212:	2901      	cmp	r1, #1
 8010214:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010218:	f240 809a 	bls.w	8010350 <uxr_write_framed_msg+0x18c>
 801021c:	18a1      	adds	r1, r4, r2
 801021e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010220:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8010224:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010228:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801022c:	3201      	adds	r2, #1
 801022e:	2801      	cmp	r0, #1
 8010230:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010234:	f240 80a0 	bls.w	8010378 <uxr_write_framed_msg+0x1b4>
 8010238:	18a0      	adds	r0, r4, r2
 801023a:	3201      	adds	r2, #1
 801023c:	b2d2      	uxtb	r2, r2
 801023e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010242:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 80a9 	beq.w	801039e <uxr_write_framed_msg+0x1da>
 801024c:	f04f 0900 	mov.w	r9, #0
 8010250:	46c8      	mov	r8, r9
 8010252:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010256:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801025a:	2901      	cmp	r1, #1
 801025c:	f240 80c3 	bls.w	80103e6 <uxr_write_framed_msg+0x222>
 8010260:	2a29      	cmp	r2, #41	@ 0x29
 8010262:	f200 809f 	bhi.w	80103a4 <uxr_write_framed_msg+0x1e0>
 8010266:	18a1      	adds	r1, r4, r2
 8010268:	3201      	adds	r2, #1
 801026a:	b2d2      	uxtb	r2, r2
 801026c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010270:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010274:	ea89 0303 	eor.w	r3, r9, r3
 8010278:	498c      	ldr	r1, [pc, #560]	@ (80104ac <uxr_write_framed_msg+0x2e8>)
 801027a:	b2db      	uxtb	r3, r3
 801027c:	f108 0801 	add.w	r8, r8, #1
 8010280:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010284:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8010288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801028a:	4543      	cmp	r3, r8
 801028c:	d8e1      	bhi.n	8010252 <uxr_write_framed_msg+0x8e>
 801028e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010292:	fa5f f889 	uxtb.w	r8, r9
 8010296:	9301      	str	r3, [sp, #4]
 8010298:	f04f 0900 	mov.w	r9, #0
 801029c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80102a0:	fa5f f18a 	uxtb.w	r1, sl
 80102a4:	2901      	cmp	r1, #1
 80102a6:	d921      	bls.n	80102ec <uxr_write_framed_msg+0x128>
 80102a8:	2a29      	cmp	r2, #41	@ 0x29
 80102aa:	f240 80af 	bls.w	801040c <uxr_write_framed_msg+0x248>
 80102ae:	2500      	movs	r5, #0
 80102b0:	e000      	b.n	80102b4 <uxr_write_framed_msg+0xf0>
 80102b2:	b160      	cbz	r0, 80102ce <uxr_write_framed_msg+0x10a>
 80102b4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80102b8:	1b52      	subs	r2, r2, r5
 80102ba:	465b      	mov	r3, fp
 80102bc:	4421      	add	r1, r4
 80102be:	4638      	mov	r0, r7
 80102c0:	47b0      	blx	r6
 80102c2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80102c6:	4405      	add	r5, r0
 80102c8:	4295      	cmp	r5, r2
 80102ca:	d3f2      	bcc.n	80102b2 <uxr_write_framed_msg+0xee>
 80102cc:	d003      	beq.n	80102d6 <uxr_write_framed_msg+0x112>
 80102ce:	2000      	movs	r0, #0
 80102d0:	b003      	add	sp, #12
 80102d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d6:	fa5f f18a 	uxtb.w	r1, sl
 80102da:	f04f 0300 	mov.w	r3, #0
 80102de:	2901      	cmp	r1, #1
 80102e0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80102e4:	f04f 0200 	mov.w	r2, #0
 80102e8:	f200 8090 	bhi.w	801040c <uxr_write_framed_msg+0x248>
 80102ec:	1c51      	adds	r1, r2, #1
 80102ee:	b2c9      	uxtb	r1, r1
 80102f0:	2929      	cmp	r1, #41	@ 0x29
 80102f2:	d8dc      	bhi.n	80102ae <uxr_write_framed_msg+0xea>
 80102f4:	18a5      	adds	r5, r4, r2
 80102f6:	4421      	add	r1, r4
 80102f8:	3202      	adds	r2, #2
 80102fa:	f088 0820 	eor.w	r8, r8, #32
 80102fe:	4648      	mov	r0, r9
 8010300:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010304:	b2d2      	uxtb	r2, r2
 8010306:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801030a:	f04f 0901 	mov.w	r9, #1
 801030e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010312:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010316:	2800      	cmp	r0, #0
 8010318:	f040 8085 	bne.w	8010426 <uxr_write_framed_msg+0x262>
 801031c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010320:	e7bc      	b.n	801029c <uxr_write_framed_msg+0xd8>
 8010322:	4611      	mov	r1, r2
 8010324:	f04f 0c03 	mov.w	ip, #3
 8010328:	2204      	movs	r2, #4
 801032a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801032c:	4421      	add	r1, r4
 801032e:	b2dd      	uxtb	r5, r3
 8010330:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8010334:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8010338:	44a4      	add	ip, r4
 801033a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801033e:	f080 0020 	eor.w	r0, r0, #32
 8010342:	2901      	cmp	r1, #1
 8010344:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8010348:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801034c:	f63f af66 	bhi.w	801021c <uxr_write_framed_msg+0x58>
 8010350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010352:	18a0      	adds	r0, r4, r2
 8010354:	f085 0520 	eor.w	r5, r5, #32
 8010358:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801035c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010360:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8010364:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8010368:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801036c:	3202      	adds	r2, #2
 801036e:	2801      	cmp	r0, #1
 8010370:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010374:	f63f af60 	bhi.w	8010238 <uxr_write_framed_msg+0x74>
 8010378:	1c50      	adds	r0, r2, #1
 801037a:	18a5      	adds	r5, r4, r2
 801037c:	fa54 f080 	uxtab	r0, r4, r0
 8010380:	3202      	adds	r2, #2
 8010382:	f081 0120 	eor.w	r1, r1, #32
 8010386:	b2d2      	uxtb	r2, r2
 8010388:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801038c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8010390:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010394:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010398:	2b00      	cmp	r3, #0
 801039a:	f47f af57 	bne.w	801024c <uxr_write_framed_msg+0x88>
 801039e:	9301      	str	r3, [sp, #4]
 80103a0:	4698      	mov	r8, r3
 80103a2:	e779      	b.n	8010298 <uxr_write_framed_msg+0xd4>
 80103a4:	2500      	movs	r5, #0
 80103a6:	e001      	b.n	80103ac <uxr_write_framed_msg+0x1e8>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d090      	beq.n	80102ce <uxr_write_framed_msg+0x10a>
 80103ac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80103b0:	1b52      	subs	r2, r2, r5
 80103b2:	465b      	mov	r3, fp
 80103b4:	4421      	add	r1, r4
 80103b6:	4638      	mov	r0, r7
 80103b8:	47b0      	blx	r6
 80103ba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80103be:	4405      	add	r5, r0
 80103c0:	4295      	cmp	r5, r2
 80103c2:	d3f1      	bcc.n	80103a8 <uxr_write_framed_msg+0x1e4>
 80103c4:	d183      	bne.n	80102ce <uxr_write_framed_msg+0x10a>
 80103c6:	f04f 0300 	mov.w	r3, #0
 80103ca:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80103ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103d0:	4543      	cmp	r3, r8
 80103d2:	d964      	bls.n	801049e <uxr_write_framed_msg+0x2da>
 80103d4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80103d8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80103dc:	2901      	cmp	r1, #1
 80103de:	f04f 0200 	mov.w	r2, #0
 80103e2:	f63f af3d 	bhi.w	8010260 <uxr_write_framed_msg+0x9c>
 80103e6:	1c51      	adds	r1, r2, #1
 80103e8:	b2c9      	uxtb	r1, r1
 80103ea:	2929      	cmp	r1, #41	@ 0x29
 80103ec:	d8da      	bhi.n	80103a4 <uxr_write_framed_msg+0x1e0>
 80103ee:	18a0      	adds	r0, r4, r2
 80103f0:	4421      	add	r1, r4
 80103f2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80103f6:	3202      	adds	r2, #2
 80103f8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80103fc:	b2d2      	uxtb	r2, r2
 80103fe:	f083 0020 	eor.w	r0, r3, #32
 8010402:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8010406:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801040a:	e733      	b.n	8010274 <uxr_write_framed_msg+0xb0>
 801040c:	18a1      	adds	r1, r4, r2
 801040e:	3201      	adds	r2, #1
 8010410:	4648      	mov	r0, r9
 8010412:	b2d2      	uxtb	r2, r2
 8010414:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010418:	f04f 0901 	mov.w	r9, #1
 801041c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010420:	2800      	cmp	r0, #0
 8010422:	f43f af7b 	beq.w	801031c <uxr_write_framed_msg+0x158>
 8010426:	2500      	movs	r5, #0
 8010428:	e002      	b.n	8010430 <uxr_write_framed_msg+0x26c>
 801042a:	2800      	cmp	r0, #0
 801042c:	f43f af4f 	beq.w	80102ce <uxr_write_framed_msg+0x10a>
 8010430:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010434:	1b52      	subs	r2, r2, r5
 8010436:	465b      	mov	r3, fp
 8010438:	4421      	add	r1, r4
 801043a:	4638      	mov	r0, r7
 801043c:	47b0      	blx	r6
 801043e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010442:	4405      	add	r5, r0
 8010444:	4295      	cmp	r5, r2
 8010446:	d3f0      	bcc.n	801042a <uxr_write_framed_msg+0x266>
 8010448:	f47f af41 	bne.w	80102ce <uxr_write_framed_msg+0x10a>
 801044c:	2300      	movs	r3, #0
 801044e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010452:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010454:	b298      	uxth	r0, r3
 8010456:	b003      	add	sp, #12
 8010458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045c:	217d      	movs	r1, #125	@ 0x7d
 801045e:	f082 0220 	eor.w	r2, r2, #32
 8010462:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8010466:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801046a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801046e:	2901      	cmp	r1, #1
 8010470:	f04f 0203 	mov.w	r2, #3
 8010474:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010478:	d804      	bhi.n	8010484 <uxr_write_framed_msg+0x2c0>
 801047a:	4611      	mov	r1, r2
 801047c:	f04f 0c04 	mov.w	ip, #4
 8010480:	2205      	movs	r2, #5
 8010482:	e752      	b.n	801032a <uxr_write_framed_msg+0x166>
 8010484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010486:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801048a:	b2dd      	uxtb	r5, r3
 801048c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010490:	2204      	movs	r2, #4
 8010492:	2901      	cmp	r1, #1
 8010494:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010498:	f63f aec0 	bhi.w	801021c <uxr_write_framed_msg+0x58>
 801049c:	e758      	b.n	8010350 <uxr_write_framed_msg+0x18c>
 801049e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80104a2:	fa5f f889 	uxtb.w	r8, r9
 80104a6:	9301      	str	r3, [sp, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	e6f5      	b.n	8010298 <uxr_write_framed_msg+0xd4>
 80104ac:	0801914c 	.word	0x0801914c

080104b0 <uxr_framing_read_transport>:
 80104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b4:	4604      	mov	r4, r0
 80104b6:	b083      	sub	sp, #12
 80104b8:	461f      	mov	r7, r3
 80104ba:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80104be:	4689      	mov	r9, r1
 80104c0:	4692      	mov	sl, r2
 80104c2:	f000 fc89 	bl	8010dd8 <uxr_millis>
 80104c6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80104ca:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80104ce:	42b3      	cmp	r3, r6
 80104d0:	4680      	mov	r8, r0
 80104d2:	d061      	beq.n	8010598 <uxr_framing_read_transport+0xe8>
 80104d4:	d81c      	bhi.n	8010510 <uxr_framing_read_transport+0x60>
 80104d6:	1e75      	subs	r5, r6, #1
 80104d8:	1aed      	subs	r5, r5, r3
 80104da:	b2ed      	uxtb	r5, r5
 80104dc:	2600      	movs	r6, #0
 80104de:	455d      	cmp	r5, fp
 80104e0:	d81f      	bhi.n	8010522 <uxr_framing_read_transport+0x72>
 80104e2:	19ab      	adds	r3, r5, r6
 80104e4:	455b      	cmp	r3, fp
 80104e6:	bf84      	itt	hi
 80104e8:	ebab 0605 	subhi.w	r6, fp, r5
 80104ec:	b2f6      	uxtbhi	r6, r6
 80104ee:	b9ed      	cbnz	r5, 801052c <uxr_framing_read_transport+0x7c>
 80104f0:	f04f 0b00 	mov.w	fp, #0
 80104f4:	f000 fc70 	bl	8010dd8 <uxr_millis>
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	eba0 0808 	sub.w	r8, r0, r8
 80104fe:	eba3 0308 	sub.w	r3, r3, r8
 8010502:	4658      	mov	r0, fp
 8010504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010508:	603b      	str	r3, [r7, #0]
 801050a:	b003      	add	sp, #12
 801050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010510:	2e00      	cmp	r6, #0
 8010512:	d049      	beq.n	80105a8 <uxr_framing_read_transport+0xf8>
 8010514:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8010518:	b2ed      	uxtb	r5, r5
 801051a:	3e01      	subs	r6, #1
 801051c:	455d      	cmp	r5, fp
 801051e:	b2f6      	uxtb	r6, r6
 8010520:	d9df      	bls.n	80104e2 <uxr_framing_read_transport+0x32>
 8010522:	fa5f f58b 	uxtb.w	r5, fp
 8010526:	2600      	movs	r6, #0
 8010528:	2d00      	cmp	r5, #0
 801052a:	d0e1      	beq.n	80104f0 <uxr_framing_read_transport+0x40>
 801052c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010530:	3102      	adds	r1, #2
 8010532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	4421      	add	r1, r4
 801053a:	462a      	mov	r2, r5
 801053c:	4650      	mov	r0, sl
 801053e:	47c8      	blx	r9
 8010540:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010544:	4a1a      	ldr	r2, [pc, #104]	@ (80105b0 <uxr_framing_read_transport+0x100>)
 8010546:	4403      	add	r3, r0
 8010548:	0859      	lsrs	r1, r3, #1
 801054a:	fba2 2101 	umull	r2, r1, r2, r1
 801054e:	0889      	lsrs	r1, r1, #2
 8010550:	222a      	movs	r2, #42	@ 0x2a
 8010552:	fb02 3111 	mls	r1, r2, r1, r3
 8010556:	4683      	mov	fp, r0
 8010558:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801055c:	2800      	cmp	r0, #0
 801055e:	d0c7      	beq.n	80104f0 <uxr_framing_read_transport+0x40>
 8010560:	42a8      	cmp	r0, r5
 8010562:	d1c7      	bne.n	80104f4 <uxr_framing_read_transport+0x44>
 8010564:	2e00      	cmp	r6, #0
 8010566:	d0c5      	beq.n	80104f4 <uxr_framing_read_transport+0x44>
 8010568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	3102      	adds	r1, #2
 801056e:	4632      	mov	r2, r6
 8010570:	4421      	add	r1, r4
 8010572:	2300      	movs	r3, #0
 8010574:	4650      	mov	r0, sl
 8010576:	47c8      	blx	r9
 8010578:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801057c:	4a0c      	ldr	r2, [pc, #48]	@ (80105b0 <uxr_framing_read_transport+0x100>)
 801057e:	180b      	adds	r3, r1, r0
 8010580:	0859      	lsrs	r1, r3, #1
 8010582:	fba2 1201 	umull	r1, r2, r2, r1
 8010586:	0892      	lsrs	r2, r2, #2
 8010588:	212a      	movs	r1, #42	@ 0x2a
 801058a:	fb01 3312 	mls	r3, r1, r2, r3
 801058e:	eb00 0b05 	add.w	fp, r0, r5
 8010592:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010596:	e7ad      	b.n	80104f4 <uxr_framing_read_transport+0x44>
 8010598:	2600      	movs	r6, #0
 801059a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801059e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80105a0:	d9bf      	bls.n	8010522 <uxr_framing_read_transport+0x72>
 80105a2:	2102      	movs	r1, #2
 80105a4:	2529      	movs	r5, #41	@ 0x29
 80105a6:	e7c4      	b.n	8010532 <uxr_framing_read_transport+0x82>
 80105a8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80105ac:	b2ed      	uxtb	r5, r5
 80105ae:	e796      	b.n	80104de <uxr_framing_read_transport+0x2e>
 80105b0:	30c30c31 	.word	0x30c30c31

080105b4 <uxr_read_framed_msg>:
 80105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	461e      	mov	r6, r3
 80105ba:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80105be:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80105c2:	429d      	cmp	r5, r3
 80105c4:	b083      	sub	sp, #12
 80105c6:	4604      	mov	r4, r0
 80105c8:	4688      	mov	r8, r1
 80105ca:	4691      	mov	r9, r2
 80105cc:	f000 8188 	beq.w	80108e0 <uxr_read_framed_msg+0x32c>
 80105d0:	7823      	ldrb	r3, [r4, #0]
 80105d2:	4dc1      	ldr	r5, [pc, #772]	@ (80108d8 <uxr_read_framed_msg+0x324>)
 80105d4:	4fc1      	ldr	r7, [pc, #772]	@ (80108dc <uxr_read_framed_msg+0x328>)
 80105d6:	2b07      	cmp	r3, #7
 80105d8:	d8fd      	bhi.n	80105d6 <uxr_read_framed_msg+0x22>
 80105da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80105de:	0115      	.short	0x0115
 80105e0:	00d600f6 	.word	0x00d600f6
 80105e4:	009000b9 	.word	0x009000b9
 80105e8:	0030004d 	.word	0x0030004d
 80105ec:	0008      	.short	0x0008
 80105ee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80105f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80105f6:	4299      	cmp	r1, r3
 80105f8:	f000 814a 	beq.w	8010890 <uxr_read_framed_msg+0x2dc>
 80105fc:	18e2      	adds	r2, r4, r3
 80105fe:	7892      	ldrb	r2, [r2, #2]
 8010600:	2a7d      	cmp	r2, #125	@ 0x7d
 8010602:	f000 8199 	beq.w	8010938 <uxr_read_framed_msg+0x384>
 8010606:	3301      	adds	r3, #1
 8010608:	0858      	lsrs	r0, r3, #1
 801060a:	fba5 1000 	umull	r1, r0, r5, r0
 801060e:	0880      	lsrs	r0, r0, #2
 8010610:	212a      	movs	r1, #42	@ 0x2a
 8010612:	fb01 3310 	mls	r3, r1, r0, r3
 8010616:	2a7e      	cmp	r2, #126	@ 0x7e
 8010618:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801061c:	f000 8252 	beq.w	8010ac4 <uxr_read_framed_msg+0x510>
 8010620:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010622:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8010624:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010628:	b29b      	uxth	r3, r3
 801062a:	2200      	movs	r2, #0
 801062c:	4299      	cmp	r1, r3
 801062e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010630:	7022      	strb	r2, [r4, #0]
 8010632:	f000 8179 	beq.w	8010928 <uxr_read_framed_msg+0x374>
 8010636:	2000      	movs	r0, #0
 8010638:	b003      	add	sp, #12
 801063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801063e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010642:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010646:	4299      	cmp	r1, r3
 8010648:	f000 8131 	beq.w	80108ae <uxr_read_framed_msg+0x2fa>
 801064c:	18e2      	adds	r2, r4, r3
 801064e:	7890      	ldrb	r0, [r2, #2]
 8010650:	287d      	cmp	r0, #125	@ 0x7d
 8010652:	f000 8190 	beq.w	8010976 <uxr_read_framed_msg+0x3c2>
 8010656:	3301      	adds	r3, #1
 8010658:	085a      	lsrs	r2, r3, #1
 801065a:	fba5 1202 	umull	r1, r2, r5, r2
 801065e:	0892      	lsrs	r2, r2, #2
 8010660:	212a      	movs	r1, #42	@ 0x2a
 8010662:	fb01 3312 	mls	r3, r1, r2, r3
 8010666:	287e      	cmp	r0, #126	@ 0x7e
 8010668:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801066c:	f000 821a 	beq.w	8010aa4 <uxr_read_framed_msg+0x4f0>
 8010670:	2307      	movs	r3, #7
 8010672:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8010674:	7023      	strb	r3, [r4, #0]
 8010676:	e7ae      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 8010678:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801067a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801067e:	459e      	cmp	lr, r3
 8010680:	d938      	bls.n	80106f4 <uxr_read_framed_msg+0x140>
 8010682:	ee07 8a90 	vmov	s15, r8
 8010686:	212a      	movs	r1, #42	@ 0x2a
 8010688:	e020      	b.n	80106cc <uxr_read_framed_msg+0x118>
 801068a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801068e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8010692:	f000 80d4 	beq.w	801083e <uxr_read_framed_msg+0x28a>
 8010696:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801069a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801069e:	f000 8219 	beq.w	8010ad4 <uxr_read_framed_msg+0x520>
 80106a2:	f806 c003 	strb.w	ip, [r6, r3]
 80106a6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80106aa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80106ac:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80106b0:	ea8a 000c 	eor.w	r0, sl, ip
 80106b4:	b2c0      	uxtb	r0, r0
 80106b6:	3301      	adds	r3, #1
 80106b8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80106bc:	b29b      	uxth	r3, r3
 80106be:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80106c2:	4573      	cmp	r3, lr
 80106c4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80106c6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80106c8:	f080 8120 	bcs.w	801090c <uxr_read_framed_msg+0x358>
 80106cc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80106d0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80106d4:	f100 0c01 	add.w	ip, r0, #1
 80106d8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80106dc:	fba5 8202 	umull	r8, r2, r5, r2
 80106e0:	0892      	lsrs	r2, r2, #2
 80106e2:	4582      	cmp	sl, r0
 80106e4:	eb04 0b00 	add.w	fp, r4, r0
 80106e8:	fb01 c212 	mls	r2, r1, r2, ip
 80106ec:	d1cd      	bne.n	801068a <uxr_read_framed_msg+0xd6>
 80106ee:	ee17 8a90 	vmov	r8, s15
 80106f2:	459e      	cmp	lr, r3
 80106f4:	f040 8111 	bne.w	801091a <uxr_read_framed_msg+0x366>
 80106f8:	2306      	movs	r3, #6
 80106fa:	7023      	strb	r3, [r4, #0]
 80106fc:	e76b      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 80106fe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010702:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010706:	4298      	cmp	r0, r3
 8010708:	f000 80c2 	beq.w	8010890 <uxr_read_framed_msg+0x2dc>
 801070c:	18e2      	adds	r2, r4, r3
 801070e:	7891      	ldrb	r1, [r2, #2]
 8010710:	297d      	cmp	r1, #125	@ 0x7d
 8010712:	f000 814c 	beq.w	80109ae <uxr_read_framed_msg+0x3fa>
 8010716:	3301      	adds	r3, #1
 8010718:	085a      	lsrs	r2, r3, #1
 801071a:	fba5 0202 	umull	r0, r2, r5, r2
 801071e:	0892      	lsrs	r2, r2, #2
 8010720:	202a      	movs	r0, #42	@ 0x2a
 8010722:	fb00 3312 	mls	r3, r0, r2, r3
 8010726:	297e      	cmp	r1, #126	@ 0x7e
 8010728:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801072c:	f000 81ca 	beq.w	8010ac4 <uxr_read_framed_msg+0x510>
 8010730:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8010732:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010736:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010738:	b29b      	uxth	r3, r3
 801073a:	2000      	movs	r0, #0
 801073c:	428b      	cmp	r3, r1
 801073e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010740:	8660      	strh	r0, [r4, #50]	@ 0x32
 8010742:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8010744:	f240 80df 	bls.w	8010906 <uxr_read_framed_msg+0x352>
 8010748:	7020      	strb	r0, [r4, #0]
 801074a:	b003      	add	sp, #12
 801074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010750:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010754:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010758:	4299      	cmp	r1, r3
 801075a:	f000 80a8 	beq.w	80108ae <uxr_read_framed_msg+0x2fa>
 801075e:	18e2      	adds	r2, r4, r3
 8010760:	7890      	ldrb	r0, [r2, #2]
 8010762:	287d      	cmp	r0, #125	@ 0x7d
 8010764:	f000 8164 	beq.w	8010a30 <uxr_read_framed_msg+0x47c>
 8010768:	3301      	adds	r3, #1
 801076a:	085a      	lsrs	r2, r3, #1
 801076c:	fba5 1202 	umull	r1, r2, r5, r2
 8010770:	0892      	lsrs	r2, r2, #2
 8010772:	212a      	movs	r1, #42	@ 0x2a
 8010774:	fb01 3312 	mls	r3, r1, r2, r3
 8010778:	287e      	cmp	r0, #126	@ 0x7e
 801077a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801077e:	f000 8191 	beq.w	8010aa4 <uxr_read_framed_msg+0x4f0>
 8010782:	2304      	movs	r3, #4
 8010784:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010786:	7023      	strb	r3, [r4, #0]
 8010788:	e725      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 801078a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801078e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010792:	4290      	cmp	r0, r2
 8010794:	f000 80b3 	beq.w	80108fe <uxr_read_framed_msg+0x34a>
 8010798:	18a3      	adds	r3, r4, r2
 801079a:	7899      	ldrb	r1, [r3, #2]
 801079c:	297d      	cmp	r1, #125	@ 0x7d
 801079e:	f000 8164 	beq.w	8010a6a <uxr_read_framed_msg+0x4b6>
 80107a2:	3201      	adds	r2, #1
 80107a4:	0850      	lsrs	r0, r2, #1
 80107a6:	fba5 3000 	umull	r3, r0, r5, r0
 80107aa:	0880      	lsrs	r0, r0, #2
 80107ac:	232a      	movs	r3, #42	@ 0x2a
 80107ae:	fb03 2210 	mls	r2, r3, r0, r2
 80107b2:	297e      	cmp	r1, #126	@ 0x7e
 80107b4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80107b8:	f000 8188 	beq.w	8010acc <uxr_read_framed_msg+0x518>
 80107bc:	7863      	ldrb	r3, [r4, #1]
 80107be:	428b      	cmp	r3, r1
 80107c0:	bf0c      	ite	eq
 80107c2:	2303      	moveq	r3, #3
 80107c4:	2300      	movne	r3, #0
 80107c6:	7023      	strb	r3, [r4, #0]
 80107c8:	e705      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 80107ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80107ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80107d2:	2200      	movs	r2, #0
 80107d4:	4299      	cmp	r1, r3
 80107d6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80107da:	d06c      	beq.n	80108b6 <uxr_read_framed_msg+0x302>
 80107dc:	18e2      	adds	r2, r4, r3
 80107de:	7890      	ldrb	r0, [r2, #2]
 80107e0:	287d      	cmp	r0, #125	@ 0x7d
 80107e2:	f000 8101 	beq.w	80109e8 <uxr_read_framed_msg+0x434>
 80107e6:	3301      	adds	r3, #1
 80107e8:	085a      	lsrs	r2, r3, #1
 80107ea:	fba5 1202 	umull	r1, r2, r5, r2
 80107ee:	0892      	lsrs	r2, r2, #2
 80107f0:	212a      	movs	r1, #42	@ 0x2a
 80107f2:	fb01 3312 	mls	r3, r1, r2, r3
 80107f6:	287e      	cmp	r0, #126	@ 0x7e
 80107f8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80107fc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010800:	d059      	beq.n	80108b6 <uxr_read_framed_msg+0x302>
 8010802:	2302      	movs	r3, #2
 8010804:	7023      	strb	r3, [r4, #0]
 8010806:	e6e6      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 8010808:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801080c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010810:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8010814:	1c51      	adds	r1, r2, #1
 8010816:	084b      	lsrs	r3, r1, #1
 8010818:	fba5 c303 	umull	ip, r3, r5, r3
 801081c:	089b      	lsrs	r3, r3, #2
 801081e:	fb0e 1313 	mls	r3, lr, r3, r1
 8010822:	4592      	cmp	sl, r2
 8010824:	eb04 0002 	add.w	r0, r4, r2
 8010828:	b2da      	uxtb	r2, r3
 801082a:	f43f af04 	beq.w	8010636 <uxr_read_framed_msg+0x82>
 801082e:	7883      	ldrb	r3, [r0, #2]
 8010830:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010834:	2b7e      	cmp	r3, #126	@ 0x7e
 8010836:	d1ed      	bne.n	8010814 <uxr_read_framed_msg+0x260>
 8010838:	2301      	movs	r3, #1
 801083a:	7023      	strb	r3, [r4, #0]
 801083c:	e6cb      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 801083e:	f100 0c01 	add.w	ip, r0, #1
 8010842:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010846:	fba5 8202 	umull	r8, r2, r5, r2
 801084a:	0892      	lsrs	r2, r2, #2
 801084c:	fb01 c212 	mls	r2, r1, r2, ip
 8010850:	eb04 0c02 	add.w	ip, r4, r2
 8010854:	b2d2      	uxtb	r2, r2
 8010856:	4592      	cmp	sl, r2
 8010858:	f100 0002 	add.w	r0, r0, #2
 801085c:	f43f af47 	beq.w	80106ee <uxr_read_framed_msg+0x13a>
 8010860:	0842      	lsrs	r2, r0, #1
 8010862:	f89c a002 	ldrb.w	sl, [ip, #2]
 8010866:	fba5 8202 	umull	r8, r2, r5, r2
 801086a:	0892      	lsrs	r2, r2, #2
 801086c:	fb01 0012 	mls	r0, r1, r2, r0
 8010870:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8010874:	f08a 0c20 	eor.w	ip, sl, #32
 8010878:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801087c:	f47f af11 	bne.w	80106a2 <uxr_read_framed_msg+0xee>
 8010880:	459e      	cmp	lr, r3
 8010882:	ee17 8a90 	vmov	r8, s15
 8010886:	f43f af37 	beq.w	80106f8 <uxr_read_framed_msg+0x144>
 801088a:	2301      	movs	r3, #1
 801088c:	7023      	strb	r3, [r4, #0]
 801088e:	e6a2      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 8010890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010892:	9300      	str	r3, [sp, #0]
 8010894:	2301      	movs	r3, #1
 8010896:	9301      	str	r3, [sp, #4]
 8010898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801089a:	464a      	mov	r2, r9
 801089c:	4641      	mov	r1, r8
 801089e:	4620      	mov	r0, r4
 80108a0:	f7ff fe06 	bl	80104b0 <uxr_framing_read_transport>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	f43f aec6 	beq.w	8010636 <uxr_read_framed_msg+0x82>
 80108aa:	7823      	ldrb	r3, [r4, #0]
 80108ac:	e693      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 80108ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	2302      	movs	r3, #2
 80108b4:	e7ef      	b.n	8010896 <uxr_read_framed_msg+0x2e2>
 80108b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	2304      	movs	r3, #4
 80108bc:	9301      	str	r3, [sp, #4]
 80108be:	464a      	mov	r2, r9
 80108c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108c2:	4641      	mov	r1, r8
 80108c4:	4620      	mov	r0, r4
 80108c6:	f7ff fdf3 	bl	80104b0 <uxr_framing_read_transport>
 80108ca:	2800      	cmp	r0, #0
 80108cc:	d1ed      	bne.n	80108aa <uxr_read_framed_msg+0x2f6>
 80108ce:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80108d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80108d4:	d0e9      	beq.n	80108aa <uxr_read_framed_msg+0x2f6>
 80108d6:	e6ae      	b.n	8010636 <uxr_read_framed_msg+0x82>
 80108d8:	30c30c31 	.word	0x30c30c31
 80108dc:	0801914c 	.word	0x0801914c
 80108e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	2305      	movs	r3, #5
 80108e6:	9301      	str	r3, [sp, #4]
 80108e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108ea:	f7ff fde1 	bl	80104b0 <uxr_framing_read_transport>
 80108ee:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80108f2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80108f6:	429a      	cmp	r2, r3
 80108f8:	f43f ae9d 	beq.w	8010636 <uxr_read_framed_msg+0x82>
 80108fc:	e668      	b.n	80105d0 <uxr_read_framed_msg+0x1c>
 80108fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010900:	9300      	str	r3, [sp, #0]
 8010902:	2303      	movs	r3, #3
 8010904:	e7c7      	b.n	8010896 <uxr_read_framed_msg+0x2e2>
 8010906:	2305      	movs	r3, #5
 8010908:	7023      	strb	r3, [r4, #0]
 801090a:	e664      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 801090c:	ee17 8a90 	vmov	r8, s15
 8010910:	f43f aef2 	beq.w	80106f8 <uxr_read_framed_msg+0x144>
 8010914:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010918:	d08e      	beq.n	8010838 <uxr_read_framed_msg+0x284>
 801091a:	ebae 0303 	sub.w	r3, lr, r3
 801091e:	3302      	adds	r3, #2
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	e7b7      	b.n	8010898 <uxr_read_framed_msg+0x2e4>
 8010928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801092a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801092e:	7013      	strb	r3, [r2, #0]
 8010930:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8010932:	b003      	add	sp, #12
 8010934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010938:	f103 0c01 	add.w	ip, r3, #1
 801093c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010940:	fba5 0202 	umull	r0, r2, r5, r2
 8010944:	0892      	lsrs	r2, r2, #2
 8010946:	202a      	movs	r0, #42	@ 0x2a
 8010948:	fb00 c212 	mls	r2, r0, r2, ip
 801094c:	fa5f fc82 	uxtb.w	ip, r2
 8010950:	4561      	cmp	r1, ip
 8010952:	d09d      	beq.n	8010890 <uxr_read_framed_msg+0x2dc>
 8010954:	3302      	adds	r3, #2
 8010956:	4422      	add	r2, r4
 8010958:	0859      	lsrs	r1, r3, #1
 801095a:	7892      	ldrb	r2, [r2, #2]
 801095c:	fba5 c101 	umull	ip, r1, r5, r1
 8010960:	0889      	lsrs	r1, r1, #2
 8010962:	fb00 3311 	mls	r3, r0, r1, r3
 8010966:	2a7e      	cmp	r2, #126	@ 0x7e
 8010968:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801096c:	f000 80aa 	beq.w	8010ac4 <uxr_read_framed_msg+0x510>
 8010970:	f082 0220 	eor.w	r2, r2, #32
 8010974:	e654      	b.n	8010620 <uxr_read_framed_msg+0x6c>
 8010976:	1c58      	adds	r0, r3, #1
 8010978:	0842      	lsrs	r2, r0, #1
 801097a:	fba5 c202 	umull	ip, r2, r5, r2
 801097e:	0892      	lsrs	r2, r2, #2
 8010980:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010984:	fb0c 0212 	mls	r2, ip, r2, r0
 8010988:	b2d0      	uxtb	r0, r2
 801098a:	4281      	cmp	r1, r0
 801098c:	d08f      	beq.n	80108ae <uxr_read_framed_msg+0x2fa>
 801098e:	4422      	add	r2, r4
 8010990:	3302      	adds	r3, #2
 8010992:	7890      	ldrb	r0, [r2, #2]
 8010994:	085a      	lsrs	r2, r3, #1
 8010996:	fba5 1202 	umull	r1, r2, r5, r2
 801099a:	0892      	lsrs	r2, r2, #2
 801099c:	fb0c 3312 	mls	r3, ip, r2, r3
 80109a0:	287e      	cmp	r0, #126	@ 0x7e
 80109a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80109a6:	d07d      	beq.n	8010aa4 <uxr_read_framed_msg+0x4f0>
 80109a8:	f080 0020 	eor.w	r0, r0, #32
 80109ac:	e660      	b.n	8010670 <uxr_read_framed_msg+0xbc>
 80109ae:	1c59      	adds	r1, r3, #1
 80109b0:	084a      	lsrs	r2, r1, #1
 80109b2:	fba5 c202 	umull	ip, r2, r5, r2
 80109b6:	0892      	lsrs	r2, r2, #2
 80109b8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80109bc:	fb0c 1212 	mls	r2, ip, r2, r1
 80109c0:	b2d1      	uxtb	r1, r2
 80109c2:	4288      	cmp	r0, r1
 80109c4:	f43f af64 	beq.w	8010890 <uxr_read_framed_msg+0x2dc>
 80109c8:	4422      	add	r2, r4
 80109ca:	3302      	adds	r3, #2
 80109cc:	7891      	ldrb	r1, [r2, #2]
 80109ce:	085a      	lsrs	r2, r3, #1
 80109d0:	fba5 0202 	umull	r0, r2, r5, r2
 80109d4:	0892      	lsrs	r2, r2, #2
 80109d6:	fb0c 3312 	mls	r3, ip, r2, r3
 80109da:	297e      	cmp	r1, #126	@ 0x7e
 80109dc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80109e0:	d070      	beq.n	8010ac4 <uxr_read_framed_msg+0x510>
 80109e2:	f081 0120 	eor.w	r1, r1, #32
 80109e6:	e6a3      	b.n	8010730 <uxr_read_framed_msg+0x17c>
 80109e8:	f103 0c01 	add.w	ip, r3, #1
 80109ec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80109f0:	fba5 0202 	umull	r0, r2, r5, r2
 80109f4:	0892      	lsrs	r2, r2, #2
 80109f6:	202a      	movs	r0, #42	@ 0x2a
 80109f8:	fb00 c212 	mls	r2, r0, r2, ip
 80109fc:	fa5f fc82 	uxtb.w	ip, r2
 8010a00:	4561      	cmp	r1, ip
 8010a02:	f43f af58 	beq.w	80108b6 <uxr_read_framed_msg+0x302>
 8010a06:	4422      	add	r2, r4
 8010a08:	3302      	adds	r3, #2
 8010a0a:	7891      	ldrb	r1, [r2, #2]
 8010a0c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010a10:	085a      	lsrs	r2, r3, #1
 8010a12:	fba5 c202 	umull	ip, r2, r5, r2
 8010a16:	0892      	lsrs	r2, r2, #2
 8010a18:	fb00 3312 	mls	r3, r0, r2, r3
 8010a1c:	297e      	cmp	r1, #126	@ 0x7e
 8010a1e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a22:	f43f af48 	beq.w	80108b6 <uxr_read_framed_msg+0x302>
 8010a26:	f081 0120 	eor.w	r1, r1, #32
 8010a2a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010a2e:	e6e8      	b.n	8010802 <uxr_read_framed_msg+0x24e>
 8010a30:	1c58      	adds	r0, r3, #1
 8010a32:	0842      	lsrs	r2, r0, #1
 8010a34:	fba5 c202 	umull	ip, r2, r5, r2
 8010a38:	0892      	lsrs	r2, r2, #2
 8010a3a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010a3e:	fb0c 0212 	mls	r2, ip, r2, r0
 8010a42:	b2d0      	uxtb	r0, r2
 8010a44:	4281      	cmp	r1, r0
 8010a46:	f43f af32 	beq.w	80108ae <uxr_read_framed_msg+0x2fa>
 8010a4a:	4422      	add	r2, r4
 8010a4c:	3302      	adds	r3, #2
 8010a4e:	7890      	ldrb	r0, [r2, #2]
 8010a50:	085a      	lsrs	r2, r3, #1
 8010a52:	fba5 1202 	umull	r1, r2, r5, r2
 8010a56:	0892      	lsrs	r2, r2, #2
 8010a58:	fb0c 3312 	mls	r3, ip, r2, r3
 8010a5c:	287e      	cmp	r0, #126	@ 0x7e
 8010a5e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010a62:	d01f      	beq.n	8010aa4 <uxr_read_framed_msg+0x4f0>
 8010a64:	f080 0020 	eor.w	r0, r0, #32
 8010a68:	e68b      	b.n	8010782 <uxr_read_framed_msg+0x1ce>
 8010a6a:	1c51      	adds	r1, r2, #1
 8010a6c:	084b      	lsrs	r3, r1, #1
 8010a6e:	fba5 c303 	umull	ip, r3, r5, r3
 8010a72:	089b      	lsrs	r3, r3, #2
 8010a74:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010a78:	fb0c 1313 	mls	r3, ip, r3, r1
 8010a7c:	b2d9      	uxtb	r1, r3
 8010a7e:	4288      	cmp	r0, r1
 8010a80:	f43f af3d 	beq.w	80108fe <uxr_read_framed_msg+0x34a>
 8010a84:	3202      	adds	r2, #2
 8010a86:	4423      	add	r3, r4
 8010a88:	0850      	lsrs	r0, r2, #1
 8010a8a:	789b      	ldrb	r3, [r3, #2]
 8010a8c:	fba5 1000 	umull	r1, r0, r5, r0
 8010a90:	0880      	lsrs	r0, r0, #2
 8010a92:	fb0c 2210 	mls	r2, ip, r0, r2
 8010a96:	2b7e      	cmp	r3, #126	@ 0x7e
 8010a98:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a9c:	d016      	beq.n	8010acc <uxr_read_framed_msg+0x518>
 8010a9e:	f083 0120 	eor.w	r1, r3, #32
 8010aa2:	e68b      	b.n	80107bc <uxr_read_framed_msg+0x208>
 8010aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	2302      	movs	r3, #2
 8010aaa:	9301      	str	r3, [sp, #4]
 8010aac:	464a      	mov	r2, r9
 8010aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ab0:	4641      	mov	r1, r8
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f7ff fcfc 	bl	80104b0 <uxr_framing_read_transport>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	f47f aef6 	bne.w	80108aa <uxr_read_framed_msg+0x2f6>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	7023      	strb	r3, [r4, #0]
 8010ac2:	e588      	b.n	80105d6 <uxr_read_framed_msg+0x22>
 8010ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e7ee      	b.n	8010aaa <uxr_read_framed_msg+0x4f6>
 8010acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ace:	9300      	str	r3, [sp, #0]
 8010ad0:	2303      	movs	r3, #3
 8010ad2:	e7ea      	b.n	8010aaa <uxr_read_framed_msg+0x4f6>
 8010ad4:	ee17 8a90 	vmov	r8, s15
 8010ad8:	e6ae      	b.n	8010838 <uxr_read_framed_msg+0x284>
 8010ada:	bf00      	nop

08010adc <uxr_stream_id>:
 8010adc:	2901      	cmp	r1, #1
 8010ade:	b082      	sub	sp, #8
 8010ae0:	d01d      	beq.n	8010b1e <uxr_stream_id+0x42>
 8010ae2:	2902      	cmp	r1, #2
 8010ae4:	f04f 0c00 	mov.w	ip, #0
 8010ae8:	d01e      	beq.n	8010b28 <uxr_stream_id+0x4c>
 8010aea:	2300      	movs	r3, #0
 8010aec:	f36c 0307 	bfi	r3, ip, #0, #8
 8010af0:	f360 230f 	bfi	r3, r0, #8, #8
 8010af4:	f361 4317 	bfi	r3, r1, #16, #8
 8010af8:	f362 631f 	bfi	r3, r2, #24, #8
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	2000      	movs	r0, #0
 8010b00:	f362 0007 	bfi	r0, r2, #0, #8
 8010b04:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010b08:	f362 200f 	bfi	r0, r2, #8, #8
 8010b0c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b10:	f362 4017 	bfi	r0, r2, #16, #8
 8010b14:	0e1b      	lsrs	r3, r3, #24
 8010b16:	f363 601f 	bfi	r0, r3, #24, #8
 8010b1a:	b002      	add	sp, #8
 8010b1c:	4770      	bx	lr
 8010b1e:	f100 0c01 	add.w	ip, r0, #1
 8010b22:	fa5f fc8c 	uxtb.w	ip, ip
 8010b26:	e7e0      	b.n	8010aea <uxr_stream_id+0xe>
 8010b28:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010b2c:	e7dd      	b.n	8010aea <uxr_stream_id+0xe>
 8010b2e:	bf00      	nop

08010b30 <uxr_stream_id_from_raw>:
 8010b30:	b082      	sub	sp, #8
 8010b32:	b130      	cbz	r0, 8010b42 <uxr_stream_id_from_raw+0x12>
 8010b34:	0603      	lsls	r3, r0, #24
 8010b36:	d420      	bmi.n	8010b7a <uxr_stream_id_from_raw+0x4a>
 8010b38:	1e42      	subs	r2, r0, #1
 8010b3a:	b2d2      	uxtb	r2, r2
 8010b3c:	f04f 0c01 	mov.w	ip, #1
 8010b40:	e001      	b.n	8010b46 <uxr_stream_id_from_raw+0x16>
 8010b42:	4684      	mov	ip, r0
 8010b44:	4602      	mov	r2, r0
 8010b46:	2300      	movs	r3, #0
 8010b48:	f360 0307 	bfi	r3, r0, #0, #8
 8010b4c:	f362 230f 	bfi	r3, r2, #8, #8
 8010b50:	f36c 4317 	bfi	r3, ip, #16, #8
 8010b54:	f361 631f 	bfi	r3, r1, #24, #8
 8010b58:	b2da      	uxtb	r2, r3
 8010b5a:	2000      	movs	r0, #0
 8010b5c:	f362 0007 	bfi	r0, r2, #0, #8
 8010b60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010b64:	f362 200f 	bfi	r0, r2, #8, #8
 8010b68:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b6c:	f362 4017 	bfi	r0, r2, #16, #8
 8010b70:	0e1b      	lsrs	r3, r3, #24
 8010b72:	f363 601f 	bfi	r0, r3, #24, #8
 8010b76:	b002      	add	sp, #8
 8010b78:	4770      	bx	lr
 8010b7a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010b7e:	f04f 0c02 	mov.w	ip, #2
 8010b82:	e7e0      	b.n	8010b46 <uxr_stream_id_from_raw+0x16>

08010b84 <uxr_init_stream_storage>:
 8010b84:	2300      	movs	r3, #0
 8010b86:	7403      	strb	r3, [r0, #16]
 8010b88:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010b8c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010b90:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010b94:	4770      	bx	lr
 8010b96:	bf00      	nop

08010b98 <uxr_reset_stream_storage>:
 8010b98:	b570      	push	{r4, r5, r6, lr}
 8010b9a:	7c03      	ldrb	r3, [r0, #16]
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	b153      	cbz	r3, 8010bb6 <uxr_reset_stream_storage+0x1e>
 8010ba0:	4606      	mov	r6, r0
 8010ba2:	2500      	movs	r5, #0
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f005 fe07 	bl	80167b8 <uxr_reset_output_best_effort_stream>
 8010baa:	7c23      	ldrb	r3, [r4, #16]
 8010bac:	3501      	adds	r5, #1
 8010bae:	42ab      	cmp	r3, r5
 8010bb0:	f106 0610 	add.w	r6, r6, #16
 8010bb4:	d8f6      	bhi.n	8010ba4 <uxr_reset_stream_storage+0xc>
 8010bb6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bba:	b163      	cbz	r3, 8010bd6 <uxr_reset_stream_storage+0x3e>
 8010bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010bc0:	2500      	movs	r5, #0
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	f005 fbfa 	bl	80163bc <uxr_reset_input_best_effort_stream>
 8010bc8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bcc:	3501      	adds	r5, #1
 8010bce:	42ab      	cmp	r3, r5
 8010bd0:	f106 0602 	add.w	r6, r6, #2
 8010bd4:	d8f5      	bhi.n	8010bc2 <uxr_reset_stream_storage+0x2a>
 8010bd6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010bda:	b163      	cbz	r3, 8010bf6 <uxr_reset_stream_storage+0x5e>
 8010bdc:	f104 0618 	add.w	r6, r4, #24
 8010be0:	2500      	movs	r5, #0
 8010be2:	4630      	mov	r0, r6
 8010be4:	f005 fe94 	bl	8016910 <uxr_reset_output_reliable_stream>
 8010be8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010bec:	3501      	adds	r5, #1
 8010bee:	42ab      	cmp	r3, r5
 8010bf0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010bf4:	d8f5      	bhi.n	8010be2 <uxr_reset_stream_storage+0x4a>
 8010bf6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010bfa:	b163      	cbz	r3, 8010c16 <uxr_reset_stream_storage+0x7e>
 8010bfc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010c00:	2500      	movs	r5, #0
 8010c02:	4630      	mov	r0, r6
 8010c04:	f005 fc4e 	bl	80164a4 <uxr_reset_input_reliable_stream>
 8010c08:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010c0c:	3501      	adds	r5, #1
 8010c0e:	42ab      	cmp	r3, r5
 8010c10:	f106 0618 	add.w	r6, r6, #24
 8010c14:	d8f5      	bhi.n	8010c02 <uxr_reset_stream_storage+0x6a>
 8010c16:	bd70      	pop	{r4, r5, r6, pc}

08010c18 <uxr_add_output_best_effort_buffer>:
 8010c18:	b510      	push	{r4, lr}
 8010c1a:	7c04      	ldrb	r4, [r0, #16]
 8010c1c:	f104 0c01 	add.w	ip, r4, #1
 8010c20:	b082      	sub	sp, #8
 8010c22:	f880 c010 	strb.w	ip, [r0, #16]
 8010c26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010c2a:	f005 fdbb 	bl	80167a4 <uxr_init_output_best_effort_stream>
 8010c2e:	2201      	movs	r2, #1
 8010c30:	4611      	mov	r1, r2
 8010c32:	4620      	mov	r0, r4
 8010c34:	b002      	add	sp, #8
 8010c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c3a:	f7ff bf4f 	b.w	8010adc <uxr_stream_id>
 8010c3e:	bf00      	nop

08010c40 <uxr_add_output_reliable_buffer>:
 8010c40:	b510      	push	{r4, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	4684      	mov	ip, r0
 8010c46:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010c4a:	9000      	str	r0, [sp, #0]
 8010c4c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010c50:	2028      	movs	r0, #40	@ 0x28
 8010c52:	fb00 c004 	mla	r0, r0, r4, ip
 8010c56:	f104 0e01 	add.w	lr, r4, #1
 8010c5a:	3018      	adds	r0, #24
 8010c5c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010c60:	f005 fe1e 	bl	80168a0 <uxr_init_output_reliable_stream>
 8010c64:	2201      	movs	r2, #1
 8010c66:	2102      	movs	r1, #2
 8010c68:	4620      	mov	r0, r4
 8010c6a:	b004      	add	sp, #16
 8010c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c70:	f7ff bf34 	b.w	8010adc <uxr_stream_id>

08010c74 <uxr_add_input_best_effort_buffer>:
 8010c74:	b510      	push	{r4, lr}
 8010c76:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	1c62      	adds	r2, r4, #1
 8010c7e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010c82:	b082      	sub	sp, #8
 8010c84:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c8c:	f005 fb92 	bl	80163b4 <uxr_init_input_best_effort_stream>
 8010c90:	2200      	movs	r2, #0
 8010c92:	2101      	movs	r1, #1
 8010c94:	4620      	mov	r0, r4
 8010c96:	b002      	add	sp, #8
 8010c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c9c:	f7ff bf1e 	b.w	8010adc <uxr_stream_id>

08010ca0 <uxr_add_input_reliable_buffer>:
 8010ca0:	b510      	push	{r4, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	4684      	mov	ip, r0
 8010ca6:	9806      	ldr	r0, [sp, #24]
 8010ca8:	9000      	str	r0, [sp, #0]
 8010caa:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010cae:	2018      	movs	r0, #24
 8010cb0:	fb00 c004 	mla	r0, r0, r4, ip
 8010cb4:	f104 0e01 	add.w	lr, r4, #1
 8010cb8:	3048      	adds	r0, #72	@ 0x48
 8010cba:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010cbe:	f005 fbc5 	bl	801644c <uxr_init_input_reliable_stream>
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	2102      	movs	r1, #2
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	b004      	add	sp, #16
 8010cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cce:	f7ff bf05 	b.w	8010adc <uxr_stream_id>
 8010cd2:	bf00      	nop

08010cd4 <uxr_get_output_best_effort_stream>:
 8010cd4:	7c03      	ldrb	r3, [r0, #16]
 8010cd6:	428b      	cmp	r3, r1
 8010cd8:	bf8c      	ite	hi
 8010cda:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010cde:	2000      	movls	r0, #0
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop

08010ce4 <uxr_get_output_reliable_stream>:
 8010ce4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010ce8:	428b      	cmp	r3, r1
 8010cea:	bf83      	ittte	hi
 8010cec:	2328      	movhi	r3, #40	@ 0x28
 8010cee:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010cf2:	3018      	addhi	r0, #24
 8010cf4:	2000      	movls	r0, #0
 8010cf6:	4770      	bx	lr

08010cf8 <uxr_get_input_best_effort_stream>:
 8010cf8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010cfc:	428b      	cmp	r3, r1
 8010cfe:	bf86      	itte	hi
 8010d00:	3121      	addhi	r1, #33	@ 0x21
 8010d02:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010d06:	2000      	movls	r0, #0
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop

08010d0c <uxr_get_input_reliable_stream>:
 8010d0c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010d10:	428b      	cmp	r3, r1
 8010d12:	bf83      	ittte	hi
 8010d14:	2318      	movhi	r3, #24
 8010d16:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010d1a:	3048      	addhi	r0, #72	@ 0x48
 8010d1c:	2000      	movls	r0, #0
 8010d1e:	4770      	bx	lr

08010d20 <uxr_output_streams_confirmed>:
 8010d20:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010d24:	b183      	cbz	r3, 8010d48 <uxr_output_streams_confirmed+0x28>
 8010d26:	b570      	push	{r4, r5, r6, lr}
 8010d28:	4606      	mov	r6, r0
 8010d2a:	f100 0518 	add.w	r5, r0, #24
 8010d2e:	2400      	movs	r4, #0
 8010d30:	e001      	b.n	8010d36 <uxr_output_streams_confirmed+0x16>
 8010d32:	3528      	adds	r5, #40	@ 0x28
 8010d34:	b138      	cbz	r0, 8010d46 <uxr_output_streams_confirmed+0x26>
 8010d36:	4628      	mov	r0, r5
 8010d38:	f006 f85a 	bl	8016df0 <uxr_is_output_up_to_date>
 8010d3c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010d40:	3401      	adds	r4, #1
 8010d42:	42a3      	cmp	r3, r4
 8010d44:	d8f5      	bhi.n	8010d32 <uxr_output_streams_confirmed+0x12>
 8010d46:	bd70      	pop	{r4, r5, r6, pc}
 8010d48:	2001      	movs	r0, #1
 8010d4a:	4770      	bx	lr

08010d4c <uxr_buffer_submessage_header>:
 8010d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d4e:	4604      	mov	r4, r0
 8010d50:	460e      	mov	r6, r1
 8010d52:	2104      	movs	r1, #4
 8010d54:	4615      	mov	r5, r2
 8010d56:	461f      	mov	r7, r3
 8010d58:	f7fb fa54 	bl	800c204 <ucdr_align_to>
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	ea47 0203 	orr.w	r2, r7, r3
 8010d62:	4631      	mov	r1, r6
 8010d64:	7523      	strb	r3, [r4, #20]
 8010d66:	4620      	mov	r0, r4
 8010d68:	462b      	mov	r3, r5
 8010d6a:	f000 fa27 	bl	80111bc <uxr_serialize_submessage_header>
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f7fb fa5e 	bl	800c230 <ucdr_buffer_remaining>
 8010d74:	42a8      	cmp	r0, r5
 8010d76:	bf34      	ite	cc
 8010d78:	2000      	movcc	r0, #0
 8010d7a:	2001      	movcs	r0, #1
 8010d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d7e:	bf00      	nop

08010d80 <uxr_read_submessage_header>:
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	4604      	mov	r4, r0
 8010d86:	460d      	mov	r5, r1
 8010d88:	2104      	movs	r1, #4
 8010d8a:	4616      	mov	r6, r2
 8010d8c:	4698      	mov	r8, r3
 8010d8e:	f7fb fa39 	bl	800c204 <ucdr_align_to>
 8010d92:	4620      	mov	r0, r4
 8010d94:	f7fb fa4c 	bl	800c230 <ucdr_buffer_remaining>
 8010d98:	2803      	cmp	r0, #3
 8010d9a:	bf8c      	ite	hi
 8010d9c:	2701      	movhi	r7, #1
 8010d9e:	2700      	movls	r7, #0
 8010da0:	d802      	bhi.n	8010da8 <uxr_read_submessage_header+0x28>
 8010da2:	4638      	mov	r0, r7
 8010da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da8:	4633      	mov	r3, r6
 8010daa:	4642      	mov	r2, r8
 8010dac:	4620      	mov	r0, r4
 8010dae:	4629      	mov	r1, r5
 8010db0:	f000 fa18 	bl	80111e4 <uxr_deserialize_submessage_header>
 8010db4:	f898 3000 	ldrb.w	r3, [r8]
 8010db8:	f003 0201 	and.w	r2, r3, #1
 8010dbc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010dc0:	f888 3000 	strb.w	r3, [r8]
 8010dc4:	7522      	strb	r2, [r4, #20]
 8010dc6:	4638      	mov	r0, r7
 8010dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dcc <uxr_submessage_padding>:
 8010dcc:	f010 0003 	ands.w	r0, r0, #3
 8010dd0:	bf18      	it	ne
 8010dd2:	f1c0 0004 	rsbne	r0, r0, #4
 8010dd6:	4770      	bx	lr

08010dd8 <uxr_millis>:
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	4669      	mov	r1, sp
 8010dde:	2001      	movs	r0, #1
 8010de0:	f7f0 fece 	bl	8001b80 <clock_gettime>
 8010de4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010de8:	4906      	ldr	r1, [pc, #24]	@ (8010e04 <uxr_millis+0x2c>)
 8010dea:	fba0 0301 	umull	r0, r3, r0, r1
 8010dee:	1900      	adds	r0, r0, r4
 8010df0:	fb01 3102 	mla	r1, r1, r2, r3
 8010df4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010df8:	4a03      	ldr	r2, [pc, #12]	@ (8010e08 <uxr_millis+0x30>)
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	f7ef fc84 	bl	8000708 <__aeabi_ldivmod>
 8010e00:	b004      	add	sp, #16
 8010e02:	bd10      	pop	{r4, pc}
 8010e04:	3b9aca00 	.word	0x3b9aca00
 8010e08:	000f4240 	.word	0x000f4240

08010e0c <uxr_nanos>:
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	4669      	mov	r1, sp
 8010e12:	2001      	movs	r0, #1
 8010e14:	f7f0 feb4 	bl	8001b80 <clock_gettime>
 8010e18:	4a06      	ldr	r2, [pc, #24]	@ (8010e34 <uxr_nanos+0x28>)
 8010e1a:	9800      	ldr	r0, [sp, #0]
 8010e1c:	9902      	ldr	r1, [sp, #8]
 8010e1e:	9c01      	ldr	r4, [sp, #4]
 8010e20:	fba0 0302 	umull	r0, r3, r0, r2
 8010e24:	1840      	adds	r0, r0, r1
 8010e26:	fb02 3304 	mla	r3, r2, r4, r3
 8010e2a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010e2e:	b004      	add	sp, #16
 8010e30:	bd10      	pop	{r4, pc}
 8010e32:	bf00      	nop
 8010e34:	3b9aca00 	.word	0x3b9aca00

08010e38 <on_full_output_buffer_fragmented>:
 8010e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	b08a      	sub	sp, #40	@ 0x28
 8010e40:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010e44:	4606      	mov	r6, r0
 8010e46:	f104 0008 	add.w	r0, r4, #8
 8010e4a:	f7ff ff4b 	bl	8010ce4 <uxr_get_output_reliable_stream>
 8010e4e:	4605      	mov	r5, r0
 8010e50:	f005 ffd8 	bl	8016e04 <get_available_free_slots>
 8010e54:	b968      	cbnz	r0, 8010e72 <on_full_output_buffer_fragmented+0x3a>
 8010e56:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	4798      	blx	r3
 8010e5e:	b918      	cbnz	r0, 8010e68 <on_full_output_buffer_fragmented+0x30>
 8010e60:	2001      	movs	r0, #1
 8010e62:	b00a      	add	sp, #40	@ 0x28
 8010e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e68:	4628      	mov	r0, r5
 8010e6a:	f005 ffcb 	bl	8016e04 <get_available_free_slots>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d0f6      	beq.n	8010e60 <on_full_output_buffer_fragmented+0x28>
 8010e72:	8929      	ldrh	r1, [r5, #8]
 8010e74:	89eb      	ldrh	r3, [r5, #14]
 8010e76:	7b28      	ldrb	r0, [r5, #12]
 8010e78:	686a      	ldr	r2, [r5, #4]
 8010e7a:	fbb2 f8f1 	udiv	r8, r2, r1
 8010e7e:	fbb3 f2f1 	udiv	r2, r3, r1
 8010e82:	fb01 3112 	mls	r1, r1, r2, r3
 8010e86:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010e8a:	b289      	uxth	r1, r1
 8010e8c:	fb08 f101 	mul.w	r1, r8, r1
 8010e90:	30fc      	adds	r0, #252	@ 0xfc
 8010e92:	f1a8 0804 	sub.w	r8, r8, #4
 8010e96:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010e9a:	4440      	add	r0, r8
 8010e9c:	b287      	uxth	r7, r0
 8010e9e:	1bdb      	subs	r3, r3, r7
 8010ea0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010ea4:	682b      	ldr	r3, [r5, #0]
 8010ea6:	3104      	adds	r1, #4
 8010ea8:	4419      	add	r1, r3
 8010eaa:	4642      	mov	r2, r8
 8010eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010eb0:	9300      	str	r3, [sp, #0]
 8010eb2:	a802      	add	r0, sp, #8
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f7fb f979 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 8010eba:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010ebe:	f102 0308 	add.w	r3, r2, #8
 8010ec2:	4543      	cmp	r3, r8
 8010ec4:	d928      	bls.n	8010f18 <on_full_output_buffer_fragmented+0xe0>
 8010ec6:	463a      	mov	r2, r7
 8010ec8:	2300      	movs	r3, #0
 8010eca:	210d      	movs	r1, #13
 8010ecc:	a802      	add	r0, sp, #8
 8010ece:	f7ff ff3d 	bl	8010d4c <uxr_buffer_submessage_header>
 8010ed2:	8929      	ldrh	r1, [r5, #8]
 8010ed4:	89eb      	ldrh	r3, [r5, #14]
 8010ed6:	fbb3 f2f1 	udiv	r2, r3, r1
 8010eda:	fb01 3312 	mls	r3, r1, r2, r3
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	686a      	ldr	r2, [r5, #4]
 8010ee2:	fbb2 f2f1 	udiv	r2, r2, r1
 8010ee6:	fb02 f303 	mul.w	r3, r2, r3
 8010eea:	682a      	ldr	r2, [r5, #0]
 8010eec:	f842 8003 	str.w	r8, [r2, r3]
 8010ef0:	89e8      	ldrh	r0, [r5, #14]
 8010ef2:	2101      	movs	r1, #1
 8010ef4:	f005 ffa6 	bl	8016e44 <uxr_seq_num_add>
 8010ef8:	9904      	ldr	r1, [sp, #16]
 8010efa:	9a03      	ldr	r2, [sp, #12]
 8010efc:	81e8      	strh	r0, [r5, #14]
 8010efe:	1a52      	subs	r2, r2, r1
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7fb f965 	bl	800c1d0 <ucdr_init_buffer>
 8010f06:	4630      	mov	r0, r6
 8010f08:	490f      	ldr	r1, [pc, #60]	@ (8010f48 <on_full_output_buffer_fragmented+0x110>)
 8010f0a:	4622      	mov	r2, r4
 8010f0c:	f7fb f934 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 8010f10:	2000      	movs	r0, #0
 8010f12:	b00a      	add	sp, #40	@ 0x28
 8010f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f18:	b292      	uxth	r2, r2
 8010f1a:	2302      	movs	r3, #2
 8010f1c:	210d      	movs	r1, #13
 8010f1e:	a802      	add	r0, sp, #8
 8010f20:	f7ff ff14 	bl	8010d4c <uxr_buffer_submessage_header>
 8010f24:	8928      	ldrh	r0, [r5, #8]
 8010f26:	89eb      	ldrh	r3, [r5, #14]
 8010f28:	fbb3 f1f0 	udiv	r1, r3, r0
 8010f2c:	fb00 3311 	mls	r3, r0, r1, r3
 8010f30:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010f34:	6869      	ldr	r1, [r5, #4]
 8010f36:	fbb1 f1f0 	udiv	r1, r1, r0
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	fb01 f303 	mul.w	r3, r1, r3
 8010f40:	6829      	ldr	r1, [r5, #0]
 8010f42:	3208      	adds	r2, #8
 8010f44:	50ca      	str	r2, [r1, r3]
 8010f46:	e7d3      	b.n	8010ef0 <on_full_output_buffer_fragmented+0xb8>
 8010f48:	08010e39 	.word	0x08010e39

08010f4c <uxr_prepare_output_stream>:
 8010f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f4e:	b087      	sub	sp, #28
 8010f50:	2707      	movs	r7, #7
 8010f52:	9202      	str	r2, [sp, #8]
 8010f54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f56:	9103      	str	r1, [sp, #12]
 8010f58:	2500      	movs	r5, #0
 8010f5a:	3204      	adds	r2, #4
 8010f5c:	e9cd 7500 	strd	r7, r5, [sp]
 8010f60:	461c      	mov	r4, r3
 8010f62:	4606      	mov	r6, r0
 8010f64:	f7fe ffc2 	bl	800feec <uxr_prepare_stream_to_write_submessage>
 8010f68:	f080 0201 	eor.w	r2, r0, #1
 8010f6c:	b2d2      	uxtb	r2, r2
 8010f6e:	75a2      	strb	r2, [r4, #22]
 8010f70:	b112      	cbz	r2, 8010f78 <uxr_prepare_output_stream+0x2c>
 8010f72:	4628      	mov	r0, r5
 8010f74:	b007      	add	sp, #28
 8010f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f78:	aa05      	add	r2, sp, #20
 8010f7a:	9902      	ldr	r1, [sp, #8]
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	f7ff f8eb 	bl	8010158 <uxr_init_base_object_request>
 8010f82:	a905      	add	r1, sp, #20
 8010f84:	4605      	mov	r5, r0
 8010f86:	4620      	mov	r0, r4
 8010f88:	f000 ffa0 	bl	8011ecc <uxr_serialize_WRITE_DATA_Payload_Data>
 8010f8c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010f90:	69a6      	ldr	r6, [r4, #24]
 8010f92:	69e7      	ldr	r7, [r4, #28]
 8010f94:	1a52      	subs	r2, r2, r1
 8010f96:	4620      	mov	r0, r4
 8010f98:	f7fb f91a 	bl	800c1d0 <ucdr_init_buffer>
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	463a      	mov	r2, r7
 8010fa0:	4631      	mov	r1, r6
 8010fa2:	f7fb f8e9 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	b007      	add	sp, #28
 8010faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fac <uxr_prepare_output_stream_fragmented>:
 8010fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb0:	b091      	sub	sp, #68	@ 0x44
 8010fb2:	4605      	mov	r5, r0
 8010fb4:	9105      	str	r1, [sp, #20]
 8010fb6:	3008      	adds	r0, #8
 8010fb8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010fbc:	461e      	mov	r6, r3
 8010fbe:	9204      	str	r2, [sp, #16]
 8010fc0:	f7ff fe90 	bl	8010ce4 <uxr_get_output_reliable_stream>
 8010fc4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	f000 8091 	beq.w	80110f0 <uxr_prepare_output_stream_fragmented+0x144>
 8010fce:	4604      	mov	r4, r0
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	f000 808d 	beq.w	80110f0 <uxr_prepare_output_stream_fragmented+0x144>
 8010fd6:	f005 ff15 	bl	8016e04 <get_available_free_slots>
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	f000 8083 	beq.w	80110e6 <uxr_prepare_output_stream_fragmented+0x13a>
 8010fe0:	8922      	ldrh	r2, [r4, #8]
 8010fe2:	89e7      	ldrh	r7, [r4, #14]
 8010fe4:	fbb7 f9f2 	udiv	r9, r7, r2
 8010fe8:	fb02 7919 	mls	r9, r2, r9, r7
 8010fec:	fa1f f989 	uxth.w	r9, r9
 8010ff0:	6863      	ldr	r3, [r4, #4]
 8010ff2:	fbb3 f2f2 	udiv	r2, r3, r2
 8010ff6:	6823      	ldr	r3, [r4, #0]
 8010ff8:	9203      	str	r2, [sp, #12]
 8010ffa:	fb02 f909 	mul.w	r9, r2, r9
 8010ffe:	f109 0904 	add.w	r9, r9, #4
 8011002:	4499      	add	r9, r3
 8011004:	7b23      	ldrb	r3, [r4, #12]
 8011006:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801100a:	4543      	cmp	r3, r8
 801100c:	f1a2 0b04 	sub.w	fp, r2, #4
 8011010:	d37a      	bcc.n	8011108 <uxr_prepare_output_stream_fragmented+0x15c>
 8011012:	f1ab 0a04 	sub.w	sl, fp, #4
 8011016:	ebaa 0a03 	sub.w	sl, sl, r3
 801101a:	465a      	mov	r2, fp
 801101c:	2300      	movs	r3, #0
 801101e:	4649      	mov	r1, r9
 8011020:	a808      	add	r0, sp, #32
 8011022:	f8cd 8000 	str.w	r8, [sp]
 8011026:	f7fb f8c1 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 801102a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801102c:	fa1f fa8a 	uxth.w	sl, sl
 8011030:	4652      	mov	r2, sl
 8011032:	f103 0a08 	add.w	sl, r3, #8
 8011036:	45da      	cmp	sl, fp
 8011038:	bf34      	ite	cc
 801103a:	2302      	movcc	r3, #2
 801103c:	2300      	movcs	r3, #0
 801103e:	210d      	movs	r1, #13
 8011040:	a808      	add	r0, sp, #32
 8011042:	f7ff fe83 	bl	8010d4c <uxr_buffer_submessage_header>
 8011046:	8921      	ldrh	r1, [r4, #8]
 8011048:	fbb7 f2f1 	udiv	r2, r7, r1
 801104c:	fb01 7212 	mls	r2, r1, r2, r7
 8011050:	b292      	uxth	r2, r2
 8011052:	6863      	ldr	r3, [r4, #4]
 8011054:	fbb3 f3f1 	udiv	r3, r3, r1
 8011058:	fb02 f303 	mul.w	r3, r2, r3
 801105c:	6822      	ldr	r2, [r4, #0]
 801105e:	4638      	mov	r0, r7
 8011060:	f842 b003 	str.w	fp, [r2, r3]
 8011064:	2101      	movs	r1, #1
 8011066:	f005 feed 	bl	8016e44 <uxr_seq_num_add>
 801106a:	9b03      	ldr	r3, [sp, #12]
 801106c:	f108 0104 	add.w	r1, r8, #4
 8011070:	f1a3 0208 	sub.w	r2, r3, #8
 8011074:	eba2 0208 	sub.w	r2, r2, r8
 8011078:	4449      	add	r1, r9
 801107a:	4607      	mov	r7, r0
 801107c:	4630      	mov	r0, r6
 801107e:	f7fb f8a7 	bl	800c1d0 <ucdr_init_buffer>
 8011082:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011084:	81e7      	strh	r7, [r4, #14]
 8011086:	1d1a      	adds	r2, r3, #4
 8011088:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801108c:	bf28      	it	cs
 801108e:	2200      	movcs	r2, #0
 8011090:	2300      	movs	r3, #0
 8011092:	b292      	uxth	r2, r2
 8011094:	2107      	movs	r1, #7
 8011096:	4630      	mov	r0, r6
 8011098:	f7ff fe58 	bl	8010d4c <uxr_buffer_submessage_header>
 801109c:	9904      	ldr	r1, [sp, #16]
 801109e:	aa07      	add	r2, sp, #28
 80110a0:	4628      	mov	r0, r5
 80110a2:	f7ff f859 	bl	8010158 <uxr_init_base_object_request>
 80110a6:	4604      	mov	r4, r0
 80110a8:	b318      	cbz	r0, 80110f2 <uxr_prepare_output_stream_fragmented+0x146>
 80110aa:	a907      	add	r1, sp, #28
 80110ac:	4630      	mov	r0, r6
 80110ae:	f000 ff0d 	bl	8011ecc <uxr_serialize_WRITE_DATA_Payload_Data>
 80110b2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80110b6:	4630      	mov	r0, r6
 80110b8:	1a52      	subs	r2, r2, r1
 80110ba:	f7fb f889 	bl	800c1d0 <ucdr_init_buffer>
 80110be:	9b05      	ldr	r3, [sp, #20]
 80110c0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80110c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80110c6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80110ca:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80110cc:	491b      	ldr	r1, [pc, #108]	@ (801113c <uxr_prepare_output_stream_fragmented+0x190>)
 80110ce:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80110d2:	4630      	mov	r0, r6
 80110d4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80110d8:	462a      	mov	r2, r5
 80110da:	f7fb f84d 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 80110de:	4620      	mov	r0, r4
 80110e0:	b011      	add	sp, #68	@ 0x44
 80110e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80110e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80110ea:	4628      	mov	r0, r5
 80110ec:	4798      	blx	r3
 80110ee:	b920      	cbnz	r0, 80110fa <uxr_prepare_output_stream_fragmented+0x14e>
 80110f0:	2400      	movs	r4, #0
 80110f2:	4620      	mov	r0, r4
 80110f4:	b011      	add	sp, #68	@ 0x44
 80110f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fa:	4620      	mov	r0, r4
 80110fc:	f005 fe82 	bl	8016e04 <get_available_free_slots>
 8011100:	2800      	cmp	r0, #0
 8011102:	f47f af6d 	bne.w	8010fe0 <uxr_prepare_output_stream_fragmented+0x34>
 8011106:	e7f3      	b.n	80110f0 <uxr_prepare_output_stream_fragmented+0x144>
 8011108:	4638      	mov	r0, r7
 801110a:	2101      	movs	r1, #1
 801110c:	f005 fe9a 	bl	8016e44 <uxr_seq_num_add>
 8011110:	8921      	ldrh	r1, [r4, #8]
 8011112:	fbb0 f2f1 	udiv	r2, r0, r1
 8011116:	fb01 0912 	mls	r9, r1, r2, r0
 801111a:	fa1f f289 	uxth.w	r2, r9
 801111e:	6863      	ldr	r3, [r4, #4]
 8011120:	fbb3 f9f1 	udiv	r9, r3, r1
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	fb02 f909 	mul.w	r9, r2, r9
 801112a:	f109 0904 	add.w	r9, r9, #4
 801112e:	4499      	add	r9, r3
 8011130:	4607      	mov	r7, r0
 8011132:	7b23      	ldrb	r3, [r4, #12]
 8011134:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011138:	e76b      	b.n	8011012 <uxr_prepare_output_stream_fragmented+0x66>
 801113a:	bf00      	nop
 801113c:	08010e39 	.word	0x08010e39

08011140 <uxr_serialize_message_header>:
 8011140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011142:	b083      	sub	sp, #12
 8011144:	4616      	mov	r6, r2
 8011146:	4604      	mov	r4, r0
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	460d      	mov	r5, r1
 801114c:	9f08      	ldr	r7, [sp, #32]
 801114e:	f7f9 fefd 	bl	800af4c <ucdr_serialize_uint8_t>
 8011152:	4631      	mov	r1, r6
 8011154:	4620      	mov	r0, r4
 8011156:	f7f9 fef9 	bl	800af4c <ucdr_serialize_uint8_t>
 801115a:	9a01      	ldr	r2, [sp, #4]
 801115c:	2101      	movs	r1, #1
 801115e:	4620      	mov	r0, r4
 8011160:	f7f9 ffa0 	bl	800b0a4 <ucdr_serialize_endian_uint16_t>
 8011164:	062b      	lsls	r3, r5, #24
 8011166:	d501      	bpl.n	801116c <uxr_serialize_message_header+0x2c>
 8011168:	b003      	add	sp, #12
 801116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801116c:	2204      	movs	r2, #4
 801116e:	4639      	mov	r1, r7
 8011170:	4620      	mov	r0, r4
 8011172:	b003      	add	sp, #12
 8011174:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011178:	f004 bfe4 	b.w	8016144 <ucdr_serialize_array_uint8_t>

0801117c <uxr_deserialize_message_header>:
 801117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801117e:	b083      	sub	sp, #12
 8011180:	4616      	mov	r6, r2
 8011182:	4604      	mov	r4, r0
 8011184:	9301      	str	r3, [sp, #4]
 8011186:	460d      	mov	r5, r1
 8011188:	9f08      	ldr	r7, [sp, #32]
 801118a:	f7f9 fef5 	bl	800af78 <ucdr_deserialize_uint8_t>
 801118e:	4631      	mov	r1, r6
 8011190:	4620      	mov	r0, r4
 8011192:	f7f9 fef1 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011196:	9a01      	ldr	r2, [sp, #4]
 8011198:	2101      	movs	r1, #1
 801119a:	4620      	mov	r0, r4
 801119c:	f7fa f876 	bl	800b28c <ucdr_deserialize_endian_uint16_t>
 80111a0:	f995 3000 	ldrsb.w	r3, [r5]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	da01      	bge.n	80111ac <uxr_deserialize_message_header+0x30>
 80111a8:	b003      	add	sp, #12
 80111aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ac:	2204      	movs	r2, #4
 80111ae:	4639      	mov	r1, r7
 80111b0:	4620      	mov	r0, r4
 80111b2:	b003      	add	sp, #12
 80111b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80111b8:	f005 b828 	b.w	801620c <ucdr_deserialize_array_uint8_t>

080111bc <uxr_serialize_submessage_header>:
 80111bc:	b530      	push	{r4, r5, lr}
 80111be:	b083      	sub	sp, #12
 80111c0:	4615      	mov	r5, r2
 80111c2:	4604      	mov	r4, r0
 80111c4:	9301      	str	r3, [sp, #4]
 80111c6:	f7f9 fec1 	bl	800af4c <ucdr_serialize_uint8_t>
 80111ca:	4629      	mov	r1, r5
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7f9 febd 	bl	800af4c <ucdr_serialize_uint8_t>
 80111d2:	9a01      	ldr	r2, [sp, #4]
 80111d4:	2101      	movs	r1, #1
 80111d6:	4620      	mov	r0, r4
 80111d8:	b003      	add	sp, #12
 80111da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111de:	f7f9 bf61 	b.w	800b0a4 <ucdr_serialize_endian_uint16_t>
 80111e2:	bf00      	nop

080111e4 <uxr_deserialize_submessage_header>:
 80111e4:	b530      	push	{r4, r5, lr}
 80111e6:	b083      	sub	sp, #12
 80111e8:	4615      	mov	r5, r2
 80111ea:	4604      	mov	r4, r0
 80111ec:	9301      	str	r3, [sp, #4]
 80111ee:	f7f9 fec3 	bl	800af78 <ucdr_deserialize_uint8_t>
 80111f2:	4629      	mov	r1, r5
 80111f4:	4620      	mov	r0, r4
 80111f6:	f7f9 febf 	bl	800af78 <ucdr_deserialize_uint8_t>
 80111fa:	9a01      	ldr	r2, [sp, #4]
 80111fc:	2101      	movs	r1, #1
 80111fe:	4620      	mov	r0, r4
 8011200:	b003      	add	sp, #12
 8011202:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011206:	f7fa b841 	b.w	800b28c <ucdr_deserialize_endian_uint16_t>
 801120a:	bf00      	nop

0801120c <uxr_serialize_CLIENT_Representation>:
 801120c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011210:	2204      	movs	r2, #4
 8011212:	460e      	mov	r6, r1
 8011214:	4605      	mov	r5, r0
 8011216:	f004 ff95 	bl	8016144 <ucdr_serialize_array_uint8_t>
 801121a:	2202      	movs	r2, #2
 801121c:	4607      	mov	r7, r0
 801121e:	1d31      	adds	r1, r6, #4
 8011220:	4628      	mov	r0, r5
 8011222:	f004 ff8f 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011226:	4038      	ands	r0, r7
 8011228:	2202      	movs	r2, #2
 801122a:	1db1      	adds	r1, r6, #6
 801122c:	b2c7      	uxtb	r7, r0
 801122e:	4628      	mov	r0, r5
 8011230:	f004 ff88 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011234:	2204      	movs	r2, #4
 8011236:	4007      	ands	r7, r0
 8011238:	f106 0108 	add.w	r1, r6, #8
 801123c:	4628      	mov	r0, r5
 801123e:	f004 ff81 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011242:	7b31      	ldrb	r1, [r6, #12]
 8011244:	4007      	ands	r7, r0
 8011246:	4628      	mov	r0, r5
 8011248:	f7f9 fe80 	bl	800af4c <ucdr_serialize_uint8_t>
 801124c:	7b71      	ldrb	r1, [r6, #13]
 801124e:	4007      	ands	r7, r0
 8011250:	4628      	mov	r0, r5
 8011252:	f7f9 fe4d 	bl	800aef0 <ucdr_serialize_bool>
 8011256:	7b73      	ldrb	r3, [r6, #13]
 8011258:	ea07 0800 	and.w	r8, r7, r0
 801125c:	b93b      	cbnz	r3, 801126e <uxr_serialize_CLIENT_Representation+0x62>
 801125e:	8bb1      	ldrh	r1, [r6, #28]
 8011260:	4628      	mov	r0, r5
 8011262:	f7f9 fe9f 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011266:	ea08 0000 	and.w	r0, r8, r0
 801126a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126e:	6931      	ldr	r1, [r6, #16]
 8011270:	4628      	mov	r0, r5
 8011272:	f7fa f881 	bl	800b378 <ucdr_serialize_uint32_t>
 8011276:	6933      	ldr	r3, [r6, #16]
 8011278:	b1e3      	cbz	r3, 80112b4 <uxr_serialize_CLIENT_Representation+0xa8>
 801127a:	b1c0      	cbz	r0, 80112ae <uxr_serialize_CLIENT_Representation+0xa2>
 801127c:	4637      	mov	r7, r6
 801127e:	f04f 0900 	mov.w	r9, #0
 8011282:	e001      	b.n	8011288 <uxr_serialize_CLIENT_Representation+0x7c>
 8011284:	3708      	adds	r7, #8
 8011286:	b194      	cbz	r4, 80112ae <uxr_serialize_CLIENT_Representation+0xa2>
 8011288:	6979      	ldr	r1, [r7, #20]
 801128a:	4628      	mov	r0, r5
 801128c:	f005 f87a 	bl	8016384 <ucdr_serialize_string>
 8011290:	69b9      	ldr	r1, [r7, #24]
 8011292:	4604      	mov	r4, r0
 8011294:	4628      	mov	r0, r5
 8011296:	f005 f875 	bl	8016384 <ucdr_serialize_string>
 801129a:	6933      	ldr	r3, [r6, #16]
 801129c:	f109 0901 	add.w	r9, r9, #1
 80112a0:	4004      	ands	r4, r0
 80112a2:	4599      	cmp	r9, r3
 80112a4:	b2e4      	uxtb	r4, r4
 80112a6:	d3ed      	bcc.n	8011284 <uxr_serialize_CLIENT_Representation+0x78>
 80112a8:	ea08 0804 	and.w	r8, r8, r4
 80112ac:	e7d7      	b.n	801125e <uxr_serialize_CLIENT_Representation+0x52>
 80112ae:	f04f 0800 	mov.w	r8, #0
 80112b2:	e7d4      	b.n	801125e <uxr_serialize_CLIENT_Representation+0x52>
 80112b4:	ea08 0800 	and.w	r8, r8, r0
 80112b8:	e7d1      	b.n	801125e <uxr_serialize_CLIENT_Representation+0x52>
 80112ba:	bf00      	nop

080112bc <uxr_deserialize_CLIENT_Representation>:
 80112bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112c0:	2204      	movs	r2, #4
 80112c2:	460c      	mov	r4, r1
 80112c4:	4605      	mov	r5, r0
 80112c6:	f004 ffa1 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80112ca:	2202      	movs	r2, #2
 80112cc:	4607      	mov	r7, r0
 80112ce:	1d21      	adds	r1, r4, #4
 80112d0:	4628      	mov	r0, r5
 80112d2:	f004 ff9b 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80112d6:	4038      	ands	r0, r7
 80112d8:	2202      	movs	r2, #2
 80112da:	1da1      	adds	r1, r4, #6
 80112dc:	b2c6      	uxtb	r6, r0
 80112de:	4628      	mov	r0, r5
 80112e0:	f004 ff94 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80112e4:	2204      	movs	r2, #4
 80112e6:	4006      	ands	r6, r0
 80112e8:	f104 0108 	add.w	r1, r4, #8
 80112ec:	4628      	mov	r0, r5
 80112ee:	f004 ff8d 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80112f2:	f104 010c 	add.w	r1, r4, #12
 80112f6:	4006      	ands	r6, r0
 80112f8:	4628      	mov	r0, r5
 80112fa:	f7f9 fe3d 	bl	800af78 <ucdr_deserialize_uint8_t>
 80112fe:	f104 010d 	add.w	r1, r4, #13
 8011302:	ea06 0700 	and.w	r7, r6, r0
 8011306:	4628      	mov	r0, r5
 8011308:	f7f9 fe08 	bl	800af1c <ucdr_deserialize_bool>
 801130c:	7b63      	ldrb	r3, [r4, #13]
 801130e:	4007      	ands	r7, r0
 8011310:	b93b      	cbnz	r3, 8011322 <uxr_deserialize_CLIENT_Representation+0x66>
 8011312:	f104 011c 	add.w	r1, r4, #28
 8011316:	4628      	mov	r0, r5
 8011318:	f7f9 ff44 	bl	800b1a4 <ucdr_deserialize_uint16_t>
 801131c:	4038      	ands	r0, r7
 801131e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011322:	f104 0110 	add.w	r1, r4, #16
 8011326:	4628      	mov	r0, r5
 8011328:	f7fa f956 	bl	800b5d8 <ucdr_deserialize_uint32_t>
 801132c:	6923      	ldr	r3, [r4, #16]
 801132e:	2b01      	cmp	r3, #1
 8011330:	d903      	bls.n	801133a <uxr_deserialize_CLIENT_Representation+0x7e>
 8011332:	2301      	movs	r3, #1
 8011334:	75ab      	strb	r3, [r5, #22]
 8011336:	2700      	movs	r7, #0
 8011338:	e7eb      	b.n	8011312 <uxr_deserialize_CLIENT_Representation+0x56>
 801133a:	b30b      	cbz	r3, 8011380 <uxr_deserialize_CLIENT_Representation+0xc4>
 801133c:	2800      	cmp	r0, #0
 801133e:	d0fa      	beq.n	8011336 <uxr_deserialize_CLIENT_Representation+0x7a>
 8011340:	46a0      	mov	r8, r4
 8011342:	f04f 0900 	mov.w	r9, #0
 8011346:	e001      	b.n	801134c <uxr_deserialize_CLIENT_Representation+0x90>
 8011348:	2e00      	cmp	r6, #0
 801134a:	d0f4      	beq.n	8011336 <uxr_deserialize_CLIENT_Representation+0x7a>
 801134c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011354:	4628      	mov	r0, r5
 8011356:	f005 f825 	bl	80163a4 <ucdr_deserialize_string>
 801135a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801135e:	4606      	mov	r6, r0
 8011360:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011364:	4628      	mov	r0, r5
 8011366:	f005 f81d 	bl	80163a4 <ucdr_deserialize_string>
 801136a:	6923      	ldr	r3, [r4, #16]
 801136c:	f109 0901 	add.w	r9, r9, #1
 8011370:	4006      	ands	r6, r0
 8011372:	4599      	cmp	r9, r3
 8011374:	f108 0808 	add.w	r8, r8, #8
 8011378:	b2f6      	uxtb	r6, r6
 801137a:	d3e5      	bcc.n	8011348 <uxr_deserialize_CLIENT_Representation+0x8c>
 801137c:	4037      	ands	r7, r6
 801137e:	e7c8      	b.n	8011312 <uxr_deserialize_CLIENT_Representation+0x56>
 8011380:	4007      	ands	r7, r0
 8011382:	e7c6      	b.n	8011312 <uxr_deserialize_CLIENT_Representation+0x56>

08011384 <uxr_serialize_AGENT_Representation>:
 8011384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011388:	2204      	movs	r2, #4
 801138a:	460f      	mov	r7, r1
 801138c:	4605      	mov	r5, r0
 801138e:	f004 fed9 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011392:	2202      	movs	r2, #2
 8011394:	4604      	mov	r4, r0
 8011396:	1d39      	adds	r1, r7, #4
 8011398:	4628      	mov	r0, r5
 801139a:	f004 fed3 	bl	8016144 <ucdr_serialize_array_uint8_t>
 801139e:	4020      	ands	r0, r4
 80113a0:	2202      	movs	r2, #2
 80113a2:	1db9      	adds	r1, r7, #6
 80113a4:	b2c4      	uxtb	r4, r0
 80113a6:	4628      	mov	r0, r5
 80113a8:	f004 fecc 	bl	8016144 <ucdr_serialize_array_uint8_t>
 80113ac:	7a39      	ldrb	r1, [r7, #8]
 80113ae:	4004      	ands	r4, r0
 80113b0:	4628      	mov	r0, r5
 80113b2:	f7f9 fd9d 	bl	800aef0 <ucdr_serialize_bool>
 80113b6:	7a3b      	ldrb	r3, [r7, #8]
 80113b8:	ea00 0804 	and.w	r8, r0, r4
 80113bc:	b913      	cbnz	r3, 80113c4 <uxr_serialize_AGENT_Representation+0x40>
 80113be:	4640      	mov	r0, r8
 80113c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113c4:	68f9      	ldr	r1, [r7, #12]
 80113c6:	4628      	mov	r0, r5
 80113c8:	f7f9 ffd6 	bl	800b378 <ucdr_serialize_uint32_t>
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	b303      	cbz	r3, 8011412 <uxr_serialize_AGENT_Representation+0x8e>
 80113d0:	b1d0      	cbz	r0, 8011408 <uxr_serialize_AGENT_Representation+0x84>
 80113d2:	463e      	mov	r6, r7
 80113d4:	f04f 0900 	mov.w	r9, #0
 80113d8:	e001      	b.n	80113de <uxr_serialize_AGENT_Representation+0x5a>
 80113da:	3608      	adds	r6, #8
 80113dc:	b1a4      	cbz	r4, 8011408 <uxr_serialize_AGENT_Representation+0x84>
 80113de:	6931      	ldr	r1, [r6, #16]
 80113e0:	4628      	mov	r0, r5
 80113e2:	f004 ffcf 	bl	8016384 <ucdr_serialize_string>
 80113e6:	6971      	ldr	r1, [r6, #20]
 80113e8:	4604      	mov	r4, r0
 80113ea:	4628      	mov	r0, r5
 80113ec:	f004 ffca 	bl	8016384 <ucdr_serialize_string>
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f109 0901 	add.w	r9, r9, #1
 80113f6:	4004      	ands	r4, r0
 80113f8:	4599      	cmp	r9, r3
 80113fa:	b2e4      	uxtb	r4, r4
 80113fc:	d3ed      	bcc.n	80113da <uxr_serialize_AGENT_Representation+0x56>
 80113fe:	ea08 0804 	and.w	r8, r8, r4
 8011402:	4640      	mov	r0, r8
 8011404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011408:	f04f 0800 	mov.w	r8, #0
 801140c:	4640      	mov	r0, r8
 801140e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011412:	ea08 0800 	and.w	r8, r8, r0
 8011416:	e7d2      	b.n	80113be <uxr_serialize_AGENT_Representation+0x3a>

08011418 <uxr_serialize_DATAWRITER_Representation>:
 8011418:	b570      	push	{r4, r5, r6, lr}
 801141a:	460d      	mov	r5, r1
 801141c:	7809      	ldrb	r1, [r1, #0]
 801141e:	4606      	mov	r6, r0
 8011420:	f7f9 fd94 	bl	800af4c <ucdr_serialize_uint8_t>
 8011424:	4604      	mov	r4, r0
 8011426:	b130      	cbz	r0, 8011436 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011428:	782b      	ldrb	r3, [r5, #0]
 801142a:	2b02      	cmp	r3, #2
 801142c:	d00c      	beq.n	8011448 <uxr_serialize_DATAWRITER_Representation+0x30>
 801142e:	2b03      	cmp	r3, #3
 8011430:	d010      	beq.n	8011454 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011432:	2b01      	cmp	r3, #1
 8011434:	d008      	beq.n	8011448 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011436:	2202      	movs	r2, #2
 8011438:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801143c:	4630      	mov	r0, r6
 801143e:	f004 fe81 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011442:	4020      	ands	r0, r4
 8011444:	b2c0      	uxtb	r0, r0
 8011446:	bd70      	pop	{r4, r5, r6, pc}
 8011448:	6869      	ldr	r1, [r5, #4]
 801144a:	4630      	mov	r0, r6
 801144c:	f004 ff9a 	bl	8016384 <ucdr_serialize_string>
 8011450:	4604      	mov	r4, r0
 8011452:	e7f0      	b.n	8011436 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011454:	4629      	mov	r1, r5
 8011456:	4630      	mov	r0, r6
 8011458:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801145c:	3104      	adds	r1, #4
 801145e:	f004 ff65 	bl	801632c <ucdr_serialize_sequence_uint8_t>
 8011462:	4604      	mov	r4, r0
 8011464:	e7e7      	b.n	8011436 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011466:	bf00      	nop

08011468 <uxr_serialize_ObjectVariant.part.0>:
 8011468:	b570      	push	{r4, r5, r6, lr}
 801146a:	780b      	ldrb	r3, [r1, #0]
 801146c:	3b01      	subs	r3, #1
 801146e:	460c      	mov	r4, r1
 8011470:	4605      	mov	r5, r0
 8011472:	2b0d      	cmp	r3, #13
 8011474:	d854      	bhi.n	8011520 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011476:	e8df f003 	tbb	[pc, r3]
 801147a:	0730      	.short	0x0730
 801147c:	07071b1b 	.word	0x07071b1b
 8011480:	0c530707 	.word	0x0c530707
 8011484:	494e0c0c 	.word	0x494e0c0c
 8011488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801148c:	3104      	adds	r1, #4
 801148e:	f7ff bfc3 	b.w	8011418 <uxr_serialize_DATAWRITER_Representation>
 8011492:	7909      	ldrb	r1, [r1, #4]
 8011494:	f7f9 fd5a 	bl	800af4c <ucdr_serialize_uint8_t>
 8011498:	b1e8      	cbz	r0, 80114d6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801149a:	7923      	ldrb	r3, [r4, #4]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d001      	beq.n	80114a4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80114a0:	2b02      	cmp	r3, #2
 80114a2:	d13d      	bne.n	8011520 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80114a4:	68a1      	ldr	r1, [r4, #8]
 80114a6:	4628      	mov	r0, r5
 80114a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114ac:	f004 bf6a 	b.w	8016384 <ucdr_serialize_string>
 80114b0:	7909      	ldrb	r1, [r1, #4]
 80114b2:	f7f9 fd4b 	bl	800af4c <ucdr_serialize_uint8_t>
 80114b6:	4606      	mov	r6, r0
 80114b8:	b120      	cbz	r0, 80114c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80114ba:	7923      	ldrb	r3, [r4, #4]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d039      	beq.n	8011534 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80114c0:	2b03      	cmp	r3, #3
 80114c2:	d02f      	beq.n	8011524 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80114c4:	2202      	movs	r2, #2
 80114c6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80114ca:	4628      	mov	r0, r5
 80114cc:	f004 fe3a 	bl	8016144 <ucdr_serialize_array_uint8_t>
 80114d0:	4030      	ands	r0, r6
 80114d2:	b2c0      	uxtb	r0, r0
 80114d4:	bd70      	pop	{r4, r5, r6, pc}
 80114d6:	2000      	movs	r0, #0
 80114d8:	bd70      	pop	{r4, r5, r6, pc}
 80114da:	7909      	ldrb	r1, [r1, #4]
 80114dc:	f7f9 fd36 	bl	800af4c <ucdr_serialize_uint8_t>
 80114e0:	4606      	mov	r6, r0
 80114e2:	b158      	cbz	r0, 80114fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80114e4:	7923      	ldrb	r3, [r4, #4]
 80114e6:	2b02      	cmp	r3, #2
 80114e8:	d003      	beq.n	80114f2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80114ea:	2b03      	cmp	r3, #3
 80114ec:	d028      	beq.n	8011540 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d104      	bne.n	80114fc <uxr_serialize_ObjectVariant.part.0+0x94>
 80114f2:	68a1      	ldr	r1, [r4, #8]
 80114f4:	4628      	mov	r0, r5
 80114f6:	f004 ff45 	bl	8016384 <ucdr_serialize_string>
 80114fa:	4606      	mov	r6, r0
 80114fc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011500:	4628      	mov	r0, r5
 8011502:	f7fa fa5f 	bl	800b9c4 <ucdr_serialize_int16_t>
 8011506:	4030      	ands	r0, r6
 8011508:	b2c0      	uxtb	r0, r0
 801150a:	bd70      	pop	{r4, r5, r6, pc}
 801150c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011510:	3104      	adds	r1, #4
 8011512:	f7ff be7b 	b.w	801120c <uxr_serialize_CLIENT_Representation>
 8011516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801151a:	3104      	adds	r1, #4
 801151c:	f7ff bf32 	b.w	8011384 <uxr_serialize_AGENT_Representation>
 8011520:	2001      	movs	r0, #1
 8011522:	bd70      	pop	{r4, r5, r6, pc}
 8011524:	68a2      	ldr	r2, [r4, #8]
 8011526:	f104 010c 	add.w	r1, r4, #12
 801152a:	4628      	mov	r0, r5
 801152c:	f004 fefe 	bl	801632c <ucdr_serialize_sequence_uint8_t>
 8011530:	4606      	mov	r6, r0
 8011532:	e7c7      	b.n	80114c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011534:	68a1      	ldr	r1, [r4, #8]
 8011536:	4628      	mov	r0, r5
 8011538:	f004 ff24 	bl	8016384 <ucdr_serialize_string>
 801153c:	4606      	mov	r6, r0
 801153e:	e7c1      	b.n	80114c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011540:	68a2      	ldr	r2, [r4, #8]
 8011542:	f104 010c 	add.w	r1, r4, #12
 8011546:	4628      	mov	r0, r5
 8011548:	f004 fef0 	bl	801632c <ucdr_serialize_sequence_uint8_t>
 801154c:	4606      	mov	r6, r0
 801154e:	e7d5      	b.n	80114fc <uxr_serialize_ObjectVariant.part.0+0x94>

08011550 <uxr_deserialize_DATAWRITER_Representation>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	4606      	mov	r6, r0
 8011554:	460d      	mov	r5, r1
 8011556:	f7f9 fd0f 	bl	800af78 <ucdr_deserialize_uint8_t>
 801155a:	4604      	mov	r4, r0
 801155c:	b130      	cbz	r0, 801156c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801155e:	782b      	ldrb	r3, [r5, #0]
 8011560:	2b02      	cmp	r3, #2
 8011562:	d00c      	beq.n	801157e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011564:	2b03      	cmp	r3, #3
 8011566:	d012      	beq.n	801158e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011568:	2b01      	cmp	r3, #1
 801156a:	d008      	beq.n	801157e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801156c:	2202      	movs	r2, #2
 801156e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011572:	4630      	mov	r0, r6
 8011574:	f004 fe4a 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011578:	4020      	ands	r0, r4
 801157a:	b2c0      	uxtb	r0, r0
 801157c:	bd70      	pop	{r4, r5, r6, pc}
 801157e:	6869      	ldr	r1, [r5, #4]
 8011580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011584:	4630      	mov	r0, r6
 8011586:	f004 ff0d 	bl	80163a4 <ucdr_deserialize_string>
 801158a:	4604      	mov	r4, r0
 801158c:	e7ee      	b.n	801156c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801158e:	1d2b      	adds	r3, r5, #4
 8011590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011594:	f105 0108 	add.w	r1, r5, #8
 8011598:	4630      	mov	r0, r6
 801159a:	f004 fed9 	bl	8016350 <ucdr_deserialize_sequence_uint8_t>
 801159e:	4604      	mov	r4, r0
 80115a0:	e7e4      	b.n	801156c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80115a2:	bf00      	nop

080115a4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	460d      	mov	r5, r1
 80115a8:	7809      	ldrb	r1, [r1, #0]
 80115aa:	4606      	mov	r6, r0
 80115ac:	f7f9 fca0 	bl	800aef0 <ucdr_serialize_bool>
 80115b0:	782b      	ldrb	r3, [r5, #0]
 80115b2:	4604      	mov	r4, r0
 80115b4:	b94b      	cbnz	r3, 80115ca <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80115b6:	7a29      	ldrb	r1, [r5, #8]
 80115b8:	4630      	mov	r0, r6
 80115ba:	f7f9 fc99 	bl	800aef0 <ucdr_serialize_bool>
 80115be:	7a2b      	ldrb	r3, [r5, #8]
 80115c0:	4004      	ands	r4, r0
 80115c2:	b2e4      	uxtb	r4, r4
 80115c4:	b943      	cbnz	r3, 80115d8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80115c6:	4620      	mov	r0, r4
 80115c8:	bd70      	pop	{r4, r5, r6, pc}
 80115ca:	6869      	ldr	r1, [r5, #4]
 80115cc:	4630      	mov	r0, r6
 80115ce:	f004 fed9 	bl	8016384 <ucdr_serialize_string>
 80115d2:	4004      	ands	r4, r0
 80115d4:	b2e4      	uxtb	r4, r4
 80115d6:	e7ee      	b.n	80115b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80115d8:	68e9      	ldr	r1, [r5, #12]
 80115da:	4630      	mov	r0, r6
 80115dc:	f004 fed2 	bl	8016384 <ucdr_serialize_string>
 80115e0:	4004      	ands	r4, r0
 80115e2:	4620      	mov	r0, r4
 80115e4:	bd70      	pop	{r4, r5, r6, pc}
 80115e6:	bf00      	nop

080115e8 <uxr_serialize_OBJK_Topic_Binary>:
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	460d      	mov	r5, r1
 80115ec:	6809      	ldr	r1, [r1, #0]
 80115ee:	4606      	mov	r6, r0
 80115f0:	f004 fec8 	bl	8016384 <ucdr_serialize_string>
 80115f4:	7929      	ldrb	r1, [r5, #4]
 80115f6:	4604      	mov	r4, r0
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7f9 fc79 	bl	800aef0 <ucdr_serialize_bool>
 80115fe:	792b      	ldrb	r3, [r5, #4]
 8011600:	4004      	ands	r4, r0
 8011602:	b2e4      	uxtb	r4, r4
 8011604:	b943      	cbnz	r3, 8011618 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011606:	7b29      	ldrb	r1, [r5, #12]
 8011608:	4630      	mov	r0, r6
 801160a:	f7f9 fc71 	bl	800aef0 <ucdr_serialize_bool>
 801160e:	7b2b      	ldrb	r3, [r5, #12]
 8011610:	4004      	ands	r4, r0
 8011612:	b93b      	cbnz	r3, 8011624 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011614:	4620      	mov	r0, r4
 8011616:	bd70      	pop	{r4, r5, r6, pc}
 8011618:	68a9      	ldr	r1, [r5, #8]
 801161a:	4630      	mov	r0, r6
 801161c:	f004 feb2 	bl	8016384 <ucdr_serialize_string>
 8011620:	4004      	ands	r4, r0
 8011622:	e7f0      	b.n	8011606 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011624:	6929      	ldr	r1, [r5, #16]
 8011626:	4630      	mov	r0, r6
 8011628:	f004 feac 	bl	8016384 <ucdr_serialize_string>
 801162c:	4004      	ands	r4, r0
 801162e:	b2e4      	uxtb	r4, r4
 8011630:	4620      	mov	r0, r4
 8011632:	bd70      	pop	{r4, r5, r6, pc}

08011634 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011638:	460c      	mov	r4, r1
 801163a:	7809      	ldrb	r1, [r1, #0]
 801163c:	4606      	mov	r6, r0
 801163e:	f7f9 fc57 	bl	800aef0 <ucdr_serialize_bool>
 8011642:	7823      	ldrb	r3, [r4, #0]
 8011644:	4605      	mov	r5, r0
 8011646:	b96b      	cbnz	r3, 8011664 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011648:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801164c:	4630      	mov	r0, r6
 801164e:	f7f9 fc4f 	bl	800aef0 <ucdr_serialize_bool>
 8011652:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011656:	4005      	ands	r5, r0
 8011658:	b2ed      	uxtb	r5, r5
 801165a:	2b00      	cmp	r3, #0
 801165c:	d169      	bne.n	8011732 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801165e:	4628      	mov	r0, r5
 8011660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011664:	6861      	ldr	r1, [r4, #4]
 8011666:	4630      	mov	r0, r6
 8011668:	f7f9 fe86 	bl	800b378 <ucdr_serialize_uint32_t>
 801166c:	6863      	ldr	r3, [r4, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d06b      	beq.n	801174a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011672:	2800      	cmp	r0, #0
 8011674:	d067      	beq.n	8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011676:	68a1      	ldr	r1, [r4, #8]
 8011678:	4630      	mov	r0, r6
 801167a:	f004 fe83 	bl	8016384 <ucdr_serialize_string>
 801167e:	6863      	ldr	r3, [r4, #4]
 8011680:	2b01      	cmp	r3, #1
 8011682:	d953      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011684:	2800      	cmp	r0, #0
 8011686:	d05e      	beq.n	8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011688:	68e1      	ldr	r1, [r4, #12]
 801168a:	4630      	mov	r0, r6
 801168c:	f004 fe7a 	bl	8016384 <ucdr_serialize_string>
 8011690:	6863      	ldr	r3, [r4, #4]
 8011692:	2b02      	cmp	r3, #2
 8011694:	d94a      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011696:	2800      	cmp	r0, #0
 8011698:	d055      	beq.n	8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801169a:	6921      	ldr	r1, [r4, #16]
 801169c:	4630      	mov	r0, r6
 801169e:	f004 fe71 	bl	8016384 <ucdr_serialize_string>
 80116a2:	6863      	ldr	r3, [r4, #4]
 80116a4:	2b03      	cmp	r3, #3
 80116a6:	d941      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	d04c      	beq.n	8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116ac:	6961      	ldr	r1, [r4, #20]
 80116ae:	4630      	mov	r0, r6
 80116b0:	f004 fe68 	bl	8016384 <ucdr_serialize_string>
 80116b4:	6863      	ldr	r3, [r4, #4]
 80116b6:	2b04      	cmp	r3, #4
 80116b8:	d938      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d043      	beq.n	8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116be:	69a1      	ldr	r1, [r4, #24]
 80116c0:	4630      	mov	r0, r6
 80116c2:	f004 fe5f 	bl	8016384 <ucdr_serialize_string>
 80116c6:	6863      	ldr	r3, [r4, #4]
 80116c8:	2b05      	cmp	r3, #5
 80116ca:	d92f      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d03a      	beq.n	8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116d0:	69e1      	ldr	r1, [r4, #28]
 80116d2:	4630      	mov	r0, r6
 80116d4:	f004 fe56 	bl	8016384 <ucdr_serialize_string>
 80116d8:	6863      	ldr	r3, [r4, #4]
 80116da:	2b06      	cmp	r3, #6
 80116dc:	d926      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116de:	b390      	cbz	r0, 8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116e0:	6a21      	ldr	r1, [r4, #32]
 80116e2:	4630      	mov	r0, r6
 80116e4:	f004 fe4e 	bl	8016384 <ucdr_serialize_string>
 80116e8:	6863      	ldr	r3, [r4, #4]
 80116ea:	2b07      	cmp	r3, #7
 80116ec:	d91e      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116ee:	b350      	cbz	r0, 8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80116f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80116f2:	4630      	mov	r0, r6
 80116f4:	f004 fe46 	bl	8016384 <ucdr_serialize_string>
 80116f8:	6863      	ldr	r3, [r4, #4]
 80116fa:	2b08      	cmp	r3, #8
 80116fc:	d916      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116fe:	b310      	cbz	r0, 8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011700:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011702:	4630      	mov	r0, r6
 8011704:	f004 fe3e 	bl	8016384 <ucdr_serialize_string>
 8011708:	6863      	ldr	r3, [r4, #4]
 801170a:	2b09      	cmp	r3, #9
 801170c:	d90e      	bls.n	801172c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801170e:	b1d0      	cbz	r0, 8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011710:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011714:	2709      	movs	r7, #9
 8011716:	e000      	b.n	801171a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011718:	b1a8      	cbz	r0, 8011746 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801171a:	f858 1b04 	ldr.w	r1, [r8], #4
 801171e:	4630      	mov	r0, r6
 8011720:	f004 fe30 	bl	8016384 <ucdr_serialize_string>
 8011724:	6862      	ldr	r2, [r4, #4]
 8011726:	3701      	adds	r7, #1
 8011728:	4297      	cmp	r7, r2
 801172a:	d3f5      	bcc.n	8011718 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801172c:	4005      	ands	r5, r0
 801172e:	b2ed      	uxtb	r5, r5
 8011730:	e78a      	b.n	8011648 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011732:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011734:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011738:	4630      	mov	r0, r6
 801173a:	f004 fdf7 	bl	801632c <ucdr_serialize_sequence_uint8_t>
 801173e:	4005      	ands	r5, r0
 8011740:	4628      	mov	r0, r5
 8011742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011746:	2500      	movs	r5, #0
 8011748:	e77e      	b.n	8011648 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801174a:	4028      	ands	r0, r5
 801174c:	b2c5      	uxtb	r5, r0
 801174e:	e77b      	b.n	8011648 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011750 <uxr_serialize_OBJK_Publisher_Binary>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	460d      	mov	r5, r1
 8011754:	7809      	ldrb	r1, [r1, #0]
 8011756:	4606      	mov	r6, r0
 8011758:	f7f9 fbca 	bl	800aef0 <ucdr_serialize_bool>
 801175c:	782b      	ldrb	r3, [r5, #0]
 801175e:	4604      	mov	r4, r0
 8011760:	b94b      	cbnz	r3, 8011776 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011762:	7a29      	ldrb	r1, [r5, #8]
 8011764:	4630      	mov	r0, r6
 8011766:	f7f9 fbc3 	bl	800aef0 <ucdr_serialize_bool>
 801176a:	7a2b      	ldrb	r3, [r5, #8]
 801176c:	4004      	ands	r4, r0
 801176e:	b2e4      	uxtb	r4, r4
 8011770:	b943      	cbnz	r3, 8011784 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011772:	4620      	mov	r0, r4
 8011774:	bd70      	pop	{r4, r5, r6, pc}
 8011776:	6869      	ldr	r1, [r5, #4]
 8011778:	4630      	mov	r0, r6
 801177a:	f004 fe03 	bl	8016384 <ucdr_serialize_string>
 801177e:	4004      	ands	r4, r0
 8011780:	b2e4      	uxtb	r4, r4
 8011782:	e7ee      	b.n	8011762 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011784:	f105 010c 	add.w	r1, r5, #12
 8011788:	4630      	mov	r0, r6
 801178a:	f7ff ff53 	bl	8011634 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801178e:	4004      	ands	r4, r0
 8011790:	4620      	mov	r0, r4
 8011792:	bd70      	pop	{r4, r5, r6, pc}

08011794 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011794:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011798:	4688      	mov	r8, r1
 801179a:	8809      	ldrh	r1, [r1, #0]
 801179c:	4681      	mov	r9, r0
 801179e:	f7f9 fc01 	bl	800afa4 <ucdr_serialize_uint16_t>
 80117a2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80117a6:	4606      	mov	r6, r0
 80117a8:	4648      	mov	r0, r9
 80117aa:	f7f9 fba1 	bl	800aef0 <ucdr_serialize_bool>
 80117ae:	f898 3002 	ldrb.w	r3, [r8, #2]
 80117b2:	4006      	ands	r6, r0
 80117b4:	b2f5      	uxtb	r5, r6
 80117b6:	b9eb      	cbnz	r3, 80117f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80117b8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80117bc:	4648      	mov	r0, r9
 80117be:	f7f9 fb97 	bl	800aef0 <ucdr_serialize_bool>
 80117c2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80117c6:	4005      	ands	r5, r0
 80117c8:	bb7b      	cbnz	r3, 801182a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80117ca:	f898 100c 	ldrb.w	r1, [r8, #12]
 80117ce:	4648      	mov	r0, r9
 80117d0:	f7f9 fb8e 	bl	800aef0 <ucdr_serialize_bool>
 80117d4:	f898 300c 	ldrb.w	r3, [r8, #12]
 80117d8:	4005      	ands	r5, r0
 80117da:	b9f3      	cbnz	r3, 801181a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80117dc:	f898 1014 	ldrb.w	r1, [r8, #20]
 80117e0:	4648      	mov	r0, r9
 80117e2:	f7f9 fb85 	bl	800aef0 <ucdr_serialize_bool>
 80117e6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80117ea:	4005      	ands	r5, r0
 80117ec:	b94b      	cbnz	r3, 8011802 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80117ee:	4628      	mov	r0, r5
 80117f0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80117f4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80117f8:	4648      	mov	r0, r9
 80117fa:	f7f9 fbd3 	bl	800afa4 <ucdr_serialize_uint16_t>
 80117fe:	4005      	ands	r5, r0
 8011800:	e7da      	b.n	80117b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011802:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011806:	f108 011c 	add.w	r1, r8, #28
 801180a:	4648      	mov	r0, r9
 801180c:	f004 fd8e 	bl	801632c <ucdr_serialize_sequence_uint8_t>
 8011810:	4028      	ands	r0, r5
 8011812:	b2c5      	uxtb	r5, r0
 8011814:	4628      	mov	r0, r5
 8011816:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801181a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801181e:	4648      	mov	r0, r9
 8011820:	f7f9 fdaa 	bl	800b378 <ucdr_serialize_uint32_t>
 8011824:	4028      	ands	r0, r5
 8011826:	b2c5      	uxtb	r5, r0
 8011828:	e7d8      	b.n	80117dc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801182a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801182e:	4648      	mov	r0, r9
 8011830:	f7f9 fda2 	bl	800b378 <ucdr_serialize_uint32_t>
 8011834:	4028      	ands	r0, r5
 8011836:	b2c5      	uxtb	r5, r0
 8011838:	e7c7      	b.n	80117ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801183a:	bf00      	nop

0801183c <uxr_serialize_OBJK_DataWriter_Binary>:
 801183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801183e:	2202      	movs	r2, #2
 8011840:	460d      	mov	r5, r1
 8011842:	4606      	mov	r6, r0
 8011844:	f004 fc7e 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011848:	78a9      	ldrb	r1, [r5, #2]
 801184a:	4604      	mov	r4, r0
 801184c:	4630      	mov	r0, r6
 801184e:	f7f9 fb4f 	bl	800aef0 <ucdr_serialize_bool>
 8011852:	78ab      	ldrb	r3, [r5, #2]
 8011854:	4004      	ands	r4, r0
 8011856:	b2e4      	uxtb	r4, r4
 8011858:	b90b      	cbnz	r3, 801185e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801185a:	4620      	mov	r0, r4
 801185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801185e:	f105 0108 	add.w	r1, r5, #8
 8011862:	4630      	mov	r0, r6
 8011864:	f7ff ff96 	bl	8011794 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011868:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801186c:	4607      	mov	r7, r0
 801186e:	4630      	mov	r0, r6
 8011870:	f7f9 fb3e 	bl	800aef0 <ucdr_serialize_bool>
 8011874:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011878:	4038      	ands	r0, r7
 801187a:	b2c7      	uxtb	r7, r0
 801187c:	b913      	cbnz	r3, 8011884 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801187e:	403c      	ands	r4, r7
 8011880:	4620      	mov	r0, r4
 8011882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011884:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011888:	4630      	mov	r0, r6
 801188a:	f7f9 ffcb 	bl	800b824 <ucdr_serialize_uint64_t>
 801188e:	4007      	ands	r7, r0
 8011890:	e7f5      	b.n	801187e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011892:	bf00      	nop

08011894 <uxr_deserialize_ObjectVariant>:
 8011894:	b570      	push	{r4, r5, r6, lr}
 8011896:	4605      	mov	r5, r0
 8011898:	460e      	mov	r6, r1
 801189a:	f7f9 fb6d 	bl	800af78 <ucdr_deserialize_uint8_t>
 801189e:	b168      	cbz	r0, 80118bc <uxr_deserialize_ObjectVariant+0x28>
 80118a0:	7833      	ldrb	r3, [r6, #0]
 80118a2:	3b01      	subs	r3, #1
 80118a4:	4604      	mov	r4, r0
 80118a6:	2b0d      	cmp	r3, #13
 80118a8:	d809      	bhi.n	80118be <uxr_deserialize_ObjectVariant+0x2a>
 80118aa:	e8df f003 	tbb	[pc, r3]
 80118ae:	0a41      	.short	0x0a41
 80118b0:	0a0a2323 	.word	0x0a0a2323
 80118b4:	10080a0a 	.word	0x10080a0a
 80118b8:	565c1010 	.word	0x565c1010
 80118bc:	2400      	movs	r4, #0
 80118be:	4620      	mov	r0, r4
 80118c0:	bd70      	pop	{r4, r5, r6, pc}
 80118c2:	1d31      	adds	r1, r6, #4
 80118c4:	4628      	mov	r0, r5
 80118c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118ca:	f7ff be41 	b.w	8011550 <uxr_deserialize_DATAWRITER_Representation>
 80118ce:	1d31      	adds	r1, r6, #4
 80118d0:	4628      	mov	r0, r5
 80118d2:	f7f9 fb51 	bl	800af78 <ucdr_deserialize_uint8_t>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d0f0      	beq.n	80118bc <uxr_deserialize_ObjectVariant+0x28>
 80118da:	7933      	ldrb	r3, [r6, #4]
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d001      	beq.n	80118e4 <uxr_deserialize_ObjectVariant+0x50>
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	d1ec      	bne.n	80118be <uxr_deserialize_ObjectVariant+0x2a>
 80118e4:	68b1      	ldr	r1, [r6, #8]
 80118e6:	4628      	mov	r0, r5
 80118e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118f0:	f004 bd58 	b.w	80163a4 <ucdr_deserialize_string>
 80118f4:	1d31      	adds	r1, r6, #4
 80118f6:	4628      	mov	r0, r5
 80118f8:	f7f9 fb3e 	bl	800af78 <ucdr_deserialize_uint8_t>
 80118fc:	4604      	mov	r4, r0
 80118fe:	b170      	cbz	r0, 801191e <uxr_deserialize_ObjectVariant+0x8a>
 8011900:	7933      	ldrb	r3, [r6, #4]
 8011902:	2b02      	cmp	r3, #2
 8011904:	d04c      	beq.n	80119a0 <uxr_deserialize_ObjectVariant+0x10c>
 8011906:	2b03      	cmp	r3, #3
 8011908:	d109      	bne.n	801191e <uxr_deserialize_ObjectVariant+0x8a>
 801190a:	f106 0308 	add.w	r3, r6, #8
 801190e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011912:	f106 010c 	add.w	r1, r6, #12
 8011916:	4628      	mov	r0, r5
 8011918:	f004 fd1a 	bl	8016350 <ucdr_deserialize_sequence_uint8_t>
 801191c:	4604      	mov	r4, r0
 801191e:	2202      	movs	r2, #2
 8011920:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011924:	4628      	mov	r0, r5
 8011926:	f004 fc71 	bl	801620c <ucdr_deserialize_array_uint8_t>
 801192a:	4020      	ands	r0, r4
 801192c:	b2c4      	uxtb	r4, r0
 801192e:	e7c6      	b.n	80118be <uxr_deserialize_ObjectVariant+0x2a>
 8011930:	1d31      	adds	r1, r6, #4
 8011932:	4628      	mov	r0, r5
 8011934:	f7f9 fb20 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011938:	4604      	mov	r4, r0
 801193a:	b130      	cbz	r0, 801194a <uxr_deserialize_ObjectVariant+0xb6>
 801193c:	7933      	ldrb	r3, [r6, #4]
 801193e:	2b02      	cmp	r3, #2
 8011940:	d036      	beq.n	80119b0 <uxr_deserialize_ObjectVariant+0x11c>
 8011942:	2b03      	cmp	r3, #3
 8011944:	d03c      	beq.n	80119c0 <uxr_deserialize_ObjectVariant+0x12c>
 8011946:	2b01      	cmp	r3, #1
 8011948:	d032      	beq.n	80119b0 <uxr_deserialize_ObjectVariant+0x11c>
 801194a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801194e:	4628      	mov	r0, r5
 8011950:	f7fa f8b8 	bl	800bac4 <ucdr_deserialize_int16_t>
 8011954:	4020      	ands	r0, r4
 8011956:	b2c4      	uxtb	r4, r0
 8011958:	e7b1      	b.n	80118be <uxr_deserialize_ObjectVariant+0x2a>
 801195a:	1d31      	adds	r1, r6, #4
 801195c:	4628      	mov	r0, r5
 801195e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011962:	f7ff bcab 	b.w	80112bc <uxr_deserialize_CLIENT_Representation>
 8011966:	2204      	movs	r2, #4
 8011968:	18b1      	adds	r1, r6, r2
 801196a:	4628      	mov	r0, r5
 801196c:	f004 fc4e 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011970:	2202      	movs	r2, #2
 8011972:	f106 0108 	add.w	r1, r6, #8
 8011976:	4604      	mov	r4, r0
 8011978:	4628      	mov	r0, r5
 801197a:	f004 fc47 	bl	801620c <ucdr_deserialize_array_uint8_t>
 801197e:	2202      	movs	r2, #2
 8011980:	4004      	ands	r4, r0
 8011982:	f106 010a 	add.w	r1, r6, #10
 8011986:	4628      	mov	r0, r5
 8011988:	f004 fc40 	bl	801620c <ucdr_deserialize_array_uint8_t>
 801198c:	b2e4      	uxtb	r4, r4
 801198e:	4603      	mov	r3, r0
 8011990:	f106 010c 	add.w	r1, r6, #12
 8011994:	4628      	mov	r0, r5
 8011996:	401c      	ands	r4, r3
 8011998:	f7f9 fac0 	bl	800af1c <ucdr_deserialize_bool>
 801199c:	4004      	ands	r4, r0
 801199e:	e78e      	b.n	80118be <uxr_deserialize_ObjectVariant+0x2a>
 80119a0:	68b1      	ldr	r1, [r6, #8]
 80119a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119a6:	4628      	mov	r0, r5
 80119a8:	f004 fcfc 	bl	80163a4 <ucdr_deserialize_string>
 80119ac:	4604      	mov	r4, r0
 80119ae:	e7b6      	b.n	801191e <uxr_deserialize_ObjectVariant+0x8a>
 80119b0:	68b1      	ldr	r1, [r6, #8]
 80119b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119b6:	4628      	mov	r0, r5
 80119b8:	f004 fcf4 	bl	80163a4 <ucdr_deserialize_string>
 80119bc:	4604      	mov	r4, r0
 80119be:	e7c4      	b.n	801194a <uxr_deserialize_ObjectVariant+0xb6>
 80119c0:	f106 0308 	add.w	r3, r6, #8
 80119c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80119c8:	f106 010c 	add.w	r1, r6, #12
 80119cc:	4628      	mov	r0, r5
 80119ce:	f004 fcbf 	bl	8016350 <ucdr_deserialize_sequence_uint8_t>
 80119d2:	4604      	mov	r4, r0
 80119d4:	e7b9      	b.n	801194a <uxr_deserialize_ObjectVariant+0xb6>
 80119d6:	bf00      	nop

080119d8 <uxr_deserialize_BaseObjectRequest>:
 80119d8:	b570      	push	{r4, r5, r6, lr}
 80119da:	2202      	movs	r2, #2
 80119dc:	4605      	mov	r5, r0
 80119de:	460e      	mov	r6, r1
 80119e0:	f004 fc14 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80119e4:	2202      	movs	r2, #2
 80119e6:	4604      	mov	r4, r0
 80119e8:	18b1      	adds	r1, r6, r2
 80119ea:	4628      	mov	r0, r5
 80119ec:	f004 fc0e 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80119f0:	4020      	ands	r0, r4
 80119f2:	b2c0      	uxtb	r0, r0
 80119f4:	bd70      	pop	{r4, r5, r6, pc}
 80119f6:	bf00      	nop

080119f8 <uxr_serialize_ActivityInfoVariant>:
 80119f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119fc:	460d      	mov	r5, r1
 80119fe:	7809      	ldrb	r1, [r1, #0]
 8011a00:	4607      	mov	r7, r0
 8011a02:	f7f9 faa3 	bl	800af4c <ucdr_serialize_uint8_t>
 8011a06:	4681      	mov	r9, r0
 8011a08:	b138      	cbz	r0, 8011a1a <uxr_serialize_ActivityInfoVariant+0x22>
 8011a0a:	782b      	ldrb	r3, [r5, #0]
 8011a0c:	2b06      	cmp	r3, #6
 8011a0e:	f000 8082 	beq.w	8011b16 <uxr_serialize_ActivityInfoVariant+0x11e>
 8011a12:	2b0d      	cmp	r3, #13
 8011a14:	d016      	beq.n	8011a44 <uxr_serialize_ActivityInfoVariant+0x4c>
 8011a16:	2b05      	cmp	r3, #5
 8011a18:	d002      	beq.n	8011a20 <uxr_serialize_ActivityInfoVariant+0x28>
 8011a1a:	4648      	mov	r0, r9
 8011a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a20:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011a24:	4638      	mov	r0, r7
 8011a26:	f7f9 ffcd 	bl	800b9c4 <ucdr_serialize_int16_t>
 8011a2a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011a2e:	4681      	mov	r9, r0
 8011a30:	4638      	mov	r0, r7
 8011a32:	f7f9 fef7 	bl	800b824 <ucdr_serialize_uint64_t>
 8011a36:	ea09 0000 	and.w	r0, r9, r0
 8011a3a:	fa5f f980 	uxtb.w	r9, r0
 8011a3e:	4648      	mov	r0, r9
 8011a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a44:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011a48:	4638      	mov	r0, r7
 8011a4a:	f7f9 ffbb 	bl	800b9c4 <ucdr_serialize_int16_t>
 8011a4e:	68e9      	ldr	r1, [r5, #12]
 8011a50:	4681      	mov	r9, r0
 8011a52:	4638      	mov	r0, r7
 8011a54:	f7f9 fc90 	bl	800b378 <ucdr_serialize_uint32_t>
 8011a58:	68eb      	ldr	r3, [r5, #12]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d0eb      	beq.n	8011a36 <uxr_serialize_ActivityInfoVariant+0x3e>
 8011a5e:	b320      	cbz	r0, 8011aaa <uxr_serialize_ActivityInfoVariant+0xb2>
 8011a60:	f105 080c 	add.w	r8, r5, #12
 8011a64:	2600      	movs	r6, #0
 8011a66:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011a6a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8011a6e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011a72:	4638      	mov	r0, r7
 8011a74:	f7f9 fa6a 	bl	800af4c <ucdr_serialize_uint8_t>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d053      	beq.n	8011b24 <uxr_serialize_ActivityInfoVariant+0x12c>
 8011a7c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011a80:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011a84:	0074      	lsls	r4, r6, #1
 8011a86:	00c9      	lsls	r1, r1, #3
 8011a88:	2b03      	cmp	r3, #3
 8011a8a:	d854      	bhi.n	8011b36 <uxr_serialize_ActivityInfoVariant+0x13e>
 8011a8c:	e8df f003 	tbb	[pc, r3]
 8011a90:	02102132 	.word	0x02102132
 8011a94:	4441      	add	r1, r8
 8011a96:	4638      	mov	r0, r7
 8011a98:	6889      	ldr	r1, [r1, #8]
 8011a9a:	f004 fc73 	bl	8016384 <ucdr_serialize_string>
 8011a9e:	68ea      	ldr	r2, [r5, #12]
 8011aa0:	3601      	adds	r6, #1
 8011aa2:	4296      	cmp	r6, r2
 8011aa4:	d242      	bcs.n	8011b2c <uxr_serialize_ActivityInfoVariant+0x134>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d1dd      	bne.n	8011a66 <uxr_serialize_ActivityInfoVariant+0x6e>
 8011aaa:	f04f 0900 	mov.w	r9, #0
 8011aae:	e7b4      	b.n	8011a1a <uxr_serialize_ActivityInfoVariant+0x22>
 8011ab0:	3108      	adds	r1, #8
 8011ab2:	4441      	add	r1, r8
 8011ab4:	2210      	movs	r2, #16
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	f004 fb44 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011abc:	4434      	add	r4, r6
 8011abe:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	f7f9 fc56 	bl	800b378 <ucdr_serialize_uint32_t>
 8011acc:	4020      	ands	r0, r4
 8011ace:	b2c0      	uxtb	r0, r0
 8011ad0:	e7e5      	b.n	8011a9e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011ad2:	3108      	adds	r1, #8
 8011ad4:	4441      	add	r1, r8
 8011ad6:	2204      	movs	r2, #4
 8011ad8:	4638      	mov	r0, r7
 8011ada:	f004 fb33 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011ade:	4434      	add	r4, r6
 8011ae0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011ae4:	4604      	mov	r4, r0
 8011ae6:	8b19      	ldrh	r1, [r3, #24]
 8011ae8:	4638      	mov	r0, r7
 8011aea:	f7f9 fa5b 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011aee:	4020      	ands	r0, r4
 8011af0:	b2c0      	uxtb	r0, r0
 8011af2:	e7d4      	b.n	8011a9e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011af4:	3108      	adds	r1, #8
 8011af6:	4441      	add	r1, r8
 8011af8:	2202      	movs	r2, #2
 8011afa:	4638      	mov	r0, r7
 8011afc:	f004 fb22 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011b00:	4434      	add	r4, r6
 8011b02:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011b06:	4604      	mov	r4, r0
 8011b08:	7d99      	ldrb	r1, [r3, #22]
 8011b0a:	4638      	mov	r0, r7
 8011b0c:	f7f9 fa1e 	bl	800af4c <ucdr_serialize_uint8_t>
 8011b10:	4020      	ands	r0, r4
 8011b12:	b2c0      	uxtb	r0, r0
 8011b14:	e7c3      	b.n	8011a9e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011b16:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011b1a:	4638      	mov	r0, r7
 8011b1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b20:	f7f9 bf50 	b.w	800b9c4 <ucdr_serialize_int16_t>
 8011b24:	68ea      	ldr	r2, [r5, #12]
 8011b26:	3601      	adds	r6, #1
 8011b28:	42b2      	cmp	r2, r6
 8011b2a:	d8be      	bhi.n	8011aaa <uxr_serialize_ActivityInfoVariant+0xb2>
 8011b2c:	ea09 0900 	and.w	r9, r9, r0
 8011b30:	fa5f f989 	uxtb.w	r9, r9
 8011b34:	e771      	b.n	8011a1a <uxr_serialize_ActivityInfoVariant+0x22>
 8011b36:	68eb      	ldr	r3, [r5, #12]
 8011b38:	3601      	adds	r6, #1
 8011b3a:	429e      	cmp	r6, r3
 8011b3c:	f10a 0a18 	add.w	sl, sl, #24
 8011b40:	d395      	bcc.n	8011a6e <uxr_serialize_ActivityInfoVariant+0x76>
 8011b42:	e76a      	b.n	8011a1a <uxr_serialize_ActivityInfoVariant+0x22>

08011b44 <uxr_deserialize_BaseObjectReply>:
 8011b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b48:	2202      	movs	r2, #2
 8011b4a:	4606      	mov	r6, r0
 8011b4c:	460f      	mov	r7, r1
 8011b4e:	f004 fb5d 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011b52:	2202      	movs	r2, #2
 8011b54:	18b9      	adds	r1, r7, r2
 8011b56:	4605      	mov	r5, r0
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f004 fb57 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011b5e:	1d39      	adds	r1, r7, #4
 8011b60:	4680      	mov	r8, r0
 8011b62:	4630      	mov	r0, r6
 8011b64:	f7f9 fa08 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011b68:	1d79      	adds	r1, r7, #5
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	f7f9 fa03 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011b72:	ea05 0508 	and.w	r5, r5, r8
 8011b76:	402c      	ands	r4, r5
 8011b78:	4020      	ands	r0, r4
 8011b7a:	b2c0      	uxtb	r0, r0
 8011b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b80 <uxr_serialize_ReadSpecification>:
 8011b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b84:	460e      	mov	r6, r1
 8011b86:	7809      	ldrb	r1, [r1, #0]
 8011b88:	4607      	mov	r7, r0
 8011b8a:	f7f9 f9df 	bl	800af4c <ucdr_serialize_uint8_t>
 8011b8e:	7871      	ldrb	r1, [r6, #1]
 8011b90:	4604      	mov	r4, r0
 8011b92:	4638      	mov	r0, r7
 8011b94:	f7f9 f9da 	bl	800af4c <ucdr_serialize_uint8_t>
 8011b98:	78b1      	ldrb	r1, [r6, #2]
 8011b9a:	4004      	ands	r4, r0
 8011b9c:	4638      	mov	r0, r7
 8011b9e:	f7f9 f9a7 	bl	800aef0 <ucdr_serialize_bool>
 8011ba2:	78b3      	ldrb	r3, [r6, #2]
 8011ba4:	b2e4      	uxtb	r4, r4
 8011ba6:	4004      	ands	r4, r0
 8011ba8:	b94b      	cbnz	r3, 8011bbe <uxr_serialize_ReadSpecification+0x3e>
 8011baa:	7a31      	ldrb	r1, [r6, #8]
 8011bac:	4638      	mov	r0, r7
 8011bae:	f7f9 f99f 	bl	800aef0 <ucdr_serialize_bool>
 8011bb2:	7a33      	ldrb	r3, [r6, #8]
 8011bb4:	4004      	ands	r4, r0
 8011bb6:	b943      	cbnz	r3, 8011bca <uxr_serialize_ReadSpecification+0x4a>
 8011bb8:	4620      	mov	r0, r4
 8011bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bbe:	6871      	ldr	r1, [r6, #4]
 8011bc0:	4638      	mov	r0, r7
 8011bc2:	f004 fbdf 	bl	8016384 <ucdr_serialize_string>
 8011bc6:	4004      	ands	r4, r0
 8011bc8:	e7ef      	b.n	8011baa <uxr_serialize_ReadSpecification+0x2a>
 8011bca:	8971      	ldrh	r1, [r6, #10]
 8011bcc:	4638      	mov	r0, r7
 8011bce:	f7f9 f9e9 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011bd2:	89b1      	ldrh	r1, [r6, #12]
 8011bd4:	4605      	mov	r5, r0
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	f7f9 f9e4 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011bdc:	89f1      	ldrh	r1, [r6, #14]
 8011bde:	4005      	ands	r5, r0
 8011be0:	4638      	mov	r0, r7
 8011be2:	f7f9 f9df 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011be6:	8a31      	ldrh	r1, [r6, #16]
 8011be8:	4680      	mov	r8, r0
 8011bea:	4638      	mov	r0, r7
 8011bec:	f7f9 f9da 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011bf0:	b2ed      	uxtb	r5, r5
 8011bf2:	4025      	ands	r5, r4
 8011bf4:	ea08 0505 	and.w	r5, r8, r5
 8011bf8:	ea00 0405 	and.w	r4, r0, r5
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c02:	bf00      	nop

08011c04 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011c04:	f7ff bb02 	b.w	801120c <uxr_serialize_CLIENT_Representation>

08011c08 <uxr_serialize_CREATE_Payload>:
 8011c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0a:	2202      	movs	r2, #2
 8011c0c:	4607      	mov	r7, r0
 8011c0e:	460e      	mov	r6, r1
 8011c10:	f004 fa98 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011c14:	2202      	movs	r2, #2
 8011c16:	18b1      	adds	r1, r6, r2
 8011c18:	4605      	mov	r5, r0
 8011c1a:	4638      	mov	r0, r7
 8011c1c:	f004 fa92 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011c20:	7931      	ldrb	r1, [r6, #4]
 8011c22:	4604      	mov	r4, r0
 8011c24:	4638      	mov	r0, r7
 8011c26:	f7f9 f991 	bl	800af4c <ucdr_serialize_uint8_t>
 8011c2a:	b170      	cbz	r0, 8011c4a <uxr_serialize_CREATE_Payload+0x42>
 8011c2c:	7933      	ldrb	r3, [r6, #4]
 8011c2e:	402c      	ands	r4, r5
 8011c30:	3b01      	subs	r3, #1
 8011c32:	b2e4      	uxtb	r4, r4
 8011c34:	2b0d      	cmp	r3, #13
 8011c36:	d809      	bhi.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011c38:	e8df f003 	tbb	[pc, r3]
 8011c3c:	23230a4c 	.word	0x23230a4c
 8011c40:	0a0a0a0a 	.word	0x0a0a0a0a
 8011c44:	12121208 	.word	0x12121208
 8011c48:	3e45      	.short	0x3e45
 8011c4a:	2400      	movs	r4, #0
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c50:	f106 0108 	add.w	r1, r6, #8
 8011c54:	4638      	mov	r0, r7
 8011c56:	f7ff fbdf 	bl	8011418 <uxr_serialize_DATAWRITER_Representation>
 8011c5a:	4004      	ands	r4, r0
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c60:	7a31      	ldrb	r1, [r6, #8]
 8011c62:	4638      	mov	r0, r7
 8011c64:	f7f9 f972 	bl	800af4c <ucdr_serialize_uint8_t>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d0ee      	beq.n	8011c4a <uxr_serialize_CREATE_Payload+0x42>
 8011c6c:	7a33      	ldrb	r3, [r6, #8]
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d001      	beq.n	8011c76 <uxr_serialize_CREATE_Payload+0x6e>
 8011c72:	2b02      	cmp	r3, #2
 8011c74:	d1ea      	bne.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011c76:	68f1      	ldr	r1, [r6, #12]
 8011c78:	4638      	mov	r0, r7
 8011c7a:	f004 fb83 	bl	8016384 <ucdr_serialize_string>
 8011c7e:	4004      	ands	r4, r0
 8011c80:	e7e4      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011c82:	7a31      	ldrb	r1, [r6, #8]
 8011c84:	4638      	mov	r0, r7
 8011c86:	f7f9 f961 	bl	800af4c <ucdr_serialize_uint8_t>
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	b158      	cbz	r0, 8011ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8011c8e:	7a33      	ldrb	r3, [r6, #8]
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	d034      	beq.n	8011cfe <uxr_serialize_CREATE_Payload+0xf6>
 8011c94:	2b03      	cmp	r3, #3
 8011c96:	d106      	bne.n	8011ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8011c98:	68f2      	ldr	r2, [r6, #12]
 8011c9a:	f106 0110 	add.w	r1, r6, #16
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	f004 fb44 	bl	801632c <ucdr_serialize_sequence_uint8_t>
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	2202      	movs	r2, #2
 8011ca8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011cac:	4638      	mov	r0, r7
 8011cae:	f004 fa49 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011cb2:	4028      	ands	r0, r5
 8011cb4:	4004      	ands	r4, r0
 8011cb6:	e7c9      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cb8:	f106 0108 	add.w	r1, r6, #8
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	f7ff faa5 	bl	801120c <uxr_serialize_CLIENT_Representation>
 8011cc2:	4004      	ands	r4, r0
 8011cc4:	e7c2      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cc6:	f106 0108 	add.w	r1, r6, #8
 8011cca:	4638      	mov	r0, r7
 8011ccc:	f7ff fb5a 	bl	8011384 <uxr_serialize_AGENT_Representation>
 8011cd0:	4004      	ands	r4, r0
 8011cd2:	e7bb      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cd4:	7a31      	ldrb	r1, [r6, #8]
 8011cd6:	4638      	mov	r0, r7
 8011cd8:	f7f9 f938 	bl	800af4c <ucdr_serialize_uint8_t>
 8011cdc:	4605      	mov	r5, r0
 8011cde:	b130      	cbz	r0, 8011cee <uxr_serialize_CREATE_Payload+0xe6>
 8011ce0:	7a33      	ldrb	r3, [r6, #8]
 8011ce2:	2b02      	cmp	r3, #2
 8011ce4:	d011      	beq.n	8011d0a <uxr_serialize_CREATE_Payload+0x102>
 8011ce6:	2b03      	cmp	r3, #3
 8011ce8:	d015      	beq.n	8011d16 <uxr_serialize_CREATE_Payload+0x10e>
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d00d      	beq.n	8011d0a <uxr_serialize_CREATE_Payload+0x102>
 8011cee:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011cf2:	4638      	mov	r0, r7
 8011cf4:	f7f9 fe66 	bl	800b9c4 <ucdr_serialize_int16_t>
 8011cf8:	4028      	ands	r0, r5
 8011cfa:	4004      	ands	r4, r0
 8011cfc:	e7a6      	b.n	8011c4c <uxr_serialize_CREATE_Payload+0x44>
 8011cfe:	68f1      	ldr	r1, [r6, #12]
 8011d00:	4638      	mov	r0, r7
 8011d02:	f004 fb3f 	bl	8016384 <ucdr_serialize_string>
 8011d06:	4605      	mov	r5, r0
 8011d08:	e7cd      	b.n	8011ca6 <uxr_serialize_CREATE_Payload+0x9e>
 8011d0a:	68f1      	ldr	r1, [r6, #12]
 8011d0c:	4638      	mov	r0, r7
 8011d0e:	f004 fb39 	bl	8016384 <ucdr_serialize_string>
 8011d12:	4605      	mov	r5, r0
 8011d14:	e7eb      	b.n	8011cee <uxr_serialize_CREATE_Payload+0xe6>
 8011d16:	68f2      	ldr	r2, [r6, #12]
 8011d18:	f106 0110 	add.w	r1, r6, #16
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f004 fb05 	bl	801632c <ucdr_serialize_sequence_uint8_t>
 8011d22:	4605      	mov	r5, r0
 8011d24:	e7e3      	b.n	8011cee <uxr_serialize_CREATE_Payload+0xe6>
 8011d26:	bf00      	nop

08011d28 <uxr_deserialize_GET_INFO_Payload>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	2202      	movs	r2, #2
 8011d2c:	4605      	mov	r5, r0
 8011d2e:	460e      	mov	r6, r1
 8011d30:	f004 fa6c 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011d34:	2202      	movs	r2, #2
 8011d36:	18b1      	adds	r1, r6, r2
 8011d38:	4604      	mov	r4, r0
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	f004 fa66 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011d40:	1d31      	adds	r1, r6, #4
 8011d42:	4004      	ands	r4, r0
 8011d44:	4628      	mov	r0, r5
 8011d46:	f7f9 fc47 	bl	800b5d8 <ucdr_deserialize_uint32_t>
 8011d4a:	b2e4      	uxtb	r4, r4
 8011d4c:	4020      	ands	r0, r4
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}

08011d50 <uxr_serialize_DELETE_Payload>:
 8011d50:	b570      	push	{r4, r5, r6, lr}
 8011d52:	2202      	movs	r2, #2
 8011d54:	4605      	mov	r5, r0
 8011d56:	460e      	mov	r6, r1
 8011d58:	f004 f9f4 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011d5c:	2202      	movs	r2, #2
 8011d5e:	4604      	mov	r4, r0
 8011d60:	18b1      	adds	r1, r6, r2
 8011d62:	4628      	mov	r0, r5
 8011d64:	f004 f9ee 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011d68:	4020      	ands	r0, r4
 8011d6a:	b2c0      	uxtb	r0, r0
 8011d6c:	bd70      	pop	{r4, r5, r6, pc}
 8011d6e:	bf00      	nop

08011d70 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d74:	4605      	mov	r5, r0
 8011d76:	460e      	mov	r6, r1
 8011d78:	f7f9 f8fe 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011d7c:	1c71      	adds	r1, r6, #1
 8011d7e:	4604      	mov	r4, r0
 8011d80:	4628      	mov	r0, r5
 8011d82:	f7f9 f8f9 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011d86:	2204      	movs	r2, #4
 8011d88:	18b1      	adds	r1, r6, r2
 8011d8a:	4680      	mov	r8, r0
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f004 fa3d 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011d92:	f106 0108 	add.w	r1, r6, #8
 8011d96:	4607      	mov	r7, r0
 8011d98:	2202      	movs	r2, #2
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	f004 fa36 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011da0:	ea04 0308 	and.w	r3, r4, r8
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	ea03 0407 	and.w	r4, r3, r7
 8011daa:	2202      	movs	r2, #2
 8011dac:	4607      	mov	r7, r0
 8011dae:	f106 010a 	add.w	r1, r6, #10
 8011db2:	4628      	mov	r0, r5
 8011db4:	f004 fa2a 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011db8:	f106 010c 	add.w	r1, r6, #12
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	461d      	mov	r5, r3
 8011dc2:	f7f9 f8ab 	bl	800af1c <ucdr_deserialize_bool>
 8011dc6:	403c      	ands	r4, r7
 8011dc8:	4025      	ands	r5, r4
 8011dca:	4028      	ands	r0, r5
 8011dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011dd0 <uxr_deserialize_STATUS_Payload>:
 8011dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd4:	2202      	movs	r2, #2
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	460f      	mov	r7, r1
 8011dda:	f004 fa17 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011dde:	2202      	movs	r2, #2
 8011de0:	18b9      	adds	r1, r7, r2
 8011de2:	4605      	mov	r5, r0
 8011de4:	4630      	mov	r0, r6
 8011de6:	f004 fa11 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011dea:	1d39      	adds	r1, r7, #4
 8011dec:	4680      	mov	r8, r0
 8011dee:	4630      	mov	r0, r6
 8011df0:	f7f9 f8c2 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011df4:	1d79      	adds	r1, r7, #5
 8011df6:	4604      	mov	r4, r0
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f7f9 f8bd 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011dfe:	ea05 0508 	and.w	r5, r5, r8
 8011e02:	402c      	ands	r4, r5
 8011e04:	4020      	ands	r0, r4
 8011e06:	b2c0      	uxtb	r0, r0
 8011e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e0c <uxr_serialize_INFO_Payload>:
 8011e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e10:	2202      	movs	r2, #2
 8011e12:	460c      	mov	r4, r1
 8011e14:	4605      	mov	r5, r0
 8011e16:	f004 f995 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011e1a:	2202      	movs	r2, #2
 8011e1c:	18a1      	adds	r1, r4, r2
 8011e1e:	4680      	mov	r8, r0
 8011e20:	4628      	mov	r0, r5
 8011e22:	f004 f98f 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011e26:	7921      	ldrb	r1, [r4, #4]
 8011e28:	4607      	mov	r7, r0
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f7f9 f88e 	bl	800af4c <ucdr_serialize_uint8_t>
 8011e30:	7961      	ldrb	r1, [r4, #5]
 8011e32:	4606      	mov	r6, r0
 8011e34:	4628      	mov	r0, r5
 8011e36:	f7f9 f889 	bl	800af4c <ucdr_serialize_uint8_t>
 8011e3a:	ea08 0807 	and.w	r8, r8, r7
 8011e3e:	ea06 0608 	and.w	r6, r6, r8
 8011e42:	4006      	ands	r6, r0
 8011e44:	7a21      	ldrb	r1, [r4, #8]
 8011e46:	4628      	mov	r0, r5
 8011e48:	f7f9 f852 	bl	800aef0 <ucdr_serialize_bool>
 8011e4c:	7a23      	ldrb	r3, [r4, #8]
 8011e4e:	b2f7      	uxtb	r7, r6
 8011e50:	4606      	mov	r6, r0
 8011e52:	b96b      	cbnz	r3, 8011e70 <uxr_serialize_INFO_Payload+0x64>
 8011e54:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011e58:	4628      	mov	r0, r5
 8011e5a:	f7f9 f849 	bl	800aef0 <ucdr_serialize_bool>
 8011e5e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011e62:	4030      	ands	r0, r6
 8011e64:	b2c6      	uxtb	r6, r0
 8011e66:	b983      	cbnz	r3, 8011e8a <uxr_serialize_INFO_Payload+0x7e>
 8011e68:	ea06 0007 	and.w	r0, r6, r7
 8011e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e70:	7b21      	ldrb	r1, [r4, #12]
 8011e72:	4628      	mov	r0, r5
 8011e74:	f7f9 f86a 	bl	800af4c <ucdr_serialize_uint8_t>
 8011e78:	b188      	cbz	r0, 8011e9e <uxr_serialize_INFO_Payload+0x92>
 8011e7a:	f104 010c 	add.w	r1, r4, #12
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f7ff faf2 	bl	8011468 <uxr_serialize_ObjectVariant.part.0>
 8011e84:	4030      	ands	r0, r6
 8011e86:	b2c6      	uxtb	r6, r0
 8011e88:	e7e4      	b.n	8011e54 <uxr_serialize_INFO_Payload+0x48>
 8011e8a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f7ff fdb2 	bl	80119f8 <uxr_serialize_ActivityInfoVariant>
 8011e94:	4006      	ands	r6, r0
 8011e96:	ea06 0007 	and.w	r0, r6, r7
 8011e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e9e:	4606      	mov	r6, r0
 8011ea0:	e7d8      	b.n	8011e54 <uxr_serialize_INFO_Payload+0x48>
 8011ea2:	bf00      	nop

08011ea4 <uxr_serialize_READ_DATA_Payload>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	2202      	movs	r2, #2
 8011ea8:	4605      	mov	r5, r0
 8011eaa:	460e      	mov	r6, r1
 8011eac:	f004 f94a 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011eb0:	2202      	movs	r2, #2
 8011eb2:	18b1      	adds	r1, r6, r2
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	f004 f944 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011ebc:	1d31      	adds	r1, r6, #4
 8011ebe:	4004      	ands	r4, r0
 8011ec0:	4628      	mov	r0, r5
 8011ec2:	f7ff fe5d 	bl	8011b80 <uxr_serialize_ReadSpecification>
 8011ec6:	b2e4      	uxtb	r4, r4
 8011ec8:	4020      	ands	r0, r4
 8011eca:	bd70      	pop	{r4, r5, r6, pc}

08011ecc <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011ecc:	b570      	push	{r4, r5, r6, lr}
 8011ece:	2202      	movs	r2, #2
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	460e      	mov	r6, r1
 8011ed4:	f004 f936 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011ed8:	2202      	movs	r2, #2
 8011eda:	4604      	mov	r4, r0
 8011edc:	18b1      	adds	r1, r6, r2
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f004 f930 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011ee4:	4020      	ands	r0, r4
 8011ee6:	b2c0      	uxtb	r0, r0
 8011ee8:	bd70      	pop	{r4, r5, r6, pc}
 8011eea:	bf00      	nop

08011eec <uxr_serialize_ACKNACK_Payload>:
 8011eec:	b570      	push	{r4, r5, r6, lr}
 8011eee:	460c      	mov	r4, r1
 8011ef0:	460e      	mov	r6, r1
 8011ef2:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011ef6:	4605      	mov	r5, r0
 8011ef8:	f7f9 f854 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011efc:	2202      	movs	r2, #2
 8011efe:	4621      	mov	r1, r4
 8011f00:	4604      	mov	r4, r0
 8011f02:	4628      	mov	r0, r5
 8011f04:	f004 f91e 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011f08:	7931      	ldrb	r1, [r6, #4]
 8011f0a:	4004      	ands	r4, r0
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	f7f9 f81d 	bl	800af4c <ucdr_serialize_uint8_t>
 8011f12:	b2e4      	uxtb	r4, r4
 8011f14:	4020      	ands	r0, r4
 8011f16:	bd70      	pop	{r4, r5, r6, pc}

08011f18 <uxr_deserialize_ACKNACK_Payload>:
 8011f18:	b570      	push	{r4, r5, r6, lr}
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	460e      	mov	r6, r1
 8011f1e:	f7f9 f941 	bl	800b1a4 <ucdr_deserialize_uint16_t>
 8011f22:	2202      	movs	r2, #2
 8011f24:	18b1      	adds	r1, r6, r2
 8011f26:	4604      	mov	r4, r0
 8011f28:	4628      	mov	r0, r5
 8011f2a:	f004 f96f 	bl	801620c <ucdr_deserialize_array_uint8_t>
 8011f2e:	1d31      	adds	r1, r6, #4
 8011f30:	4004      	ands	r4, r0
 8011f32:	4628      	mov	r0, r5
 8011f34:	f7f9 f820 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011f38:	b2e4      	uxtb	r4, r4
 8011f3a:	4020      	ands	r0, r4
 8011f3c:	bd70      	pop	{r4, r5, r6, pc}
 8011f3e:	bf00      	nop

08011f40 <uxr_serialize_HEARTBEAT_Payload>:
 8011f40:	b570      	push	{r4, r5, r6, lr}
 8011f42:	460d      	mov	r5, r1
 8011f44:	8809      	ldrh	r1, [r1, #0]
 8011f46:	4606      	mov	r6, r0
 8011f48:	f7f9 f82c 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011f4c:	8869      	ldrh	r1, [r5, #2]
 8011f4e:	4604      	mov	r4, r0
 8011f50:	4630      	mov	r0, r6
 8011f52:	f7f9 f827 	bl	800afa4 <ucdr_serialize_uint16_t>
 8011f56:	7929      	ldrb	r1, [r5, #4]
 8011f58:	4004      	ands	r4, r0
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	f7f8 fff6 	bl	800af4c <ucdr_serialize_uint8_t>
 8011f60:	b2e4      	uxtb	r4, r4
 8011f62:	4020      	ands	r0, r4
 8011f64:	bd70      	pop	{r4, r5, r6, pc}
 8011f66:	bf00      	nop

08011f68 <uxr_deserialize_HEARTBEAT_Payload>:
 8011f68:	b570      	push	{r4, r5, r6, lr}
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	460e      	mov	r6, r1
 8011f6e:	f7f9 f919 	bl	800b1a4 <ucdr_deserialize_uint16_t>
 8011f72:	1cb1      	adds	r1, r6, #2
 8011f74:	4604      	mov	r4, r0
 8011f76:	4628      	mov	r0, r5
 8011f78:	f7f9 f914 	bl	800b1a4 <ucdr_deserialize_uint16_t>
 8011f7c:	1d31      	adds	r1, r6, #4
 8011f7e:	4004      	ands	r4, r0
 8011f80:	4628      	mov	r0, r5
 8011f82:	f7f8 fff9 	bl	800af78 <ucdr_deserialize_uint8_t>
 8011f86:	b2e4      	uxtb	r4, r4
 8011f88:	4020      	ands	r0, r4
 8011f8a:	bd70      	pop	{r4, r5, r6, pc}

08011f8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f90:	4605      	mov	r5, r0
 8011f92:	460e      	mov	r6, r1
 8011f94:	f7f9 fea2 	bl	800bcdc <ucdr_deserialize_int32_t>
 8011f98:	1d31      	adds	r1, r6, #4
 8011f9a:	4607      	mov	r7, r0
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	f7f9 fb1b 	bl	800b5d8 <ucdr_deserialize_uint32_t>
 8011fa2:	f106 0108 	add.w	r1, r6, #8
 8011fa6:	4680      	mov	r8, r0
 8011fa8:	4628      	mov	r0, r5
 8011faa:	f7f9 fe97 	bl	800bcdc <ucdr_deserialize_int32_t>
 8011fae:	f106 010c 	add.w	r1, r6, #12
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	f7f9 fb0f 	bl	800b5d8 <ucdr_deserialize_uint32_t>
 8011fba:	ea07 0708 	and.w	r7, r7, r8
 8011fbe:	403c      	ands	r4, r7
 8011fc0:	f106 0110 	add.w	r1, r6, #16
 8011fc4:	4004      	ands	r4, r0
 8011fc6:	4628      	mov	r0, r5
 8011fc8:	f7f9 fe88 	bl	800bcdc <ucdr_deserialize_int32_t>
 8011fcc:	f106 0114 	add.w	r1, r6, #20
 8011fd0:	4607      	mov	r7, r0
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f7f9 fb00 	bl	800b5d8 <ucdr_deserialize_uint32_t>
 8011fd8:	b2e4      	uxtb	r4, r4
 8011fda:	403c      	ands	r4, r7
 8011fdc:	4020      	ands	r0, r4
 8011fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe2:	bf00      	nop

08011fe4 <uxr_serialize_SampleIdentity>:
 8011fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe8:	220c      	movs	r2, #12
 8011fea:	4604      	mov	r4, r0
 8011fec:	460d      	mov	r5, r1
 8011fee:	f004 f8a9 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8011ff2:	2203      	movs	r2, #3
 8011ff4:	f105 010c 	add.w	r1, r5, #12
 8011ff8:	4607      	mov	r7, r0
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f004 f8a2 	bl	8016144 <ucdr_serialize_array_uint8_t>
 8012000:	7be9      	ldrb	r1, [r5, #15]
 8012002:	4680      	mov	r8, r0
 8012004:	4620      	mov	r0, r4
 8012006:	f7f8 ffa1 	bl	800af4c <ucdr_serialize_uint8_t>
 801200a:	6929      	ldr	r1, [r5, #16]
 801200c:	4606      	mov	r6, r0
 801200e:	4620      	mov	r0, r4
 8012010:	f7f9 fdcc 	bl	800bbac <ucdr_serialize_int32_t>
 8012014:	6969      	ldr	r1, [r5, #20]
 8012016:	4603      	mov	r3, r0
 8012018:	4620      	mov	r0, r4
 801201a:	ea07 0708 	and.w	r7, r7, r8
 801201e:	461c      	mov	r4, r3
 8012020:	f7f9 f9aa 	bl	800b378 <ucdr_serialize_uint32_t>
 8012024:	403e      	ands	r6, r7
 8012026:	4034      	ands	r4, r6
 8012028:	4020      	ands	r0, r4
 801202a:	b2c0      	uxtb	r0, r0
 801202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012030 <uxr_deserialize_SampleIdentity>:
 8012030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012034:	220c      	movs	r2, #12
 8012036:	4604      	mov	r4, r0
 8012038:	460d      	mov	r5, r1
 801203a:	f004 f8e7 	bl	801620c <ucdr_deserialize_array_uint8_t>
 801203e:	2203      	movs	r2, #3
 8012040:	f105 010c 	add.w	r1, r5, #12
 8012044:	4607      	mov	r7, r0
 8012046:	4620      	mov	r0, r4
 8012048:	f004 f8e0 	bl	801620c <ucdr_deserialize_array_uint8_t>
 801204c:	f105 010f 	add.w	r1, r5, #15
 8012050:	4680      	mov	r8, r0
 8012052:	4620      	mov	r0, r4
 8012054:	f7f8 ff90 	bl	800af78 <ucdr_deserialize_uint8_t>
 8012058:	f105 0110 	add.w	r1, r5, #16
 801205c:	4606      	mov	r6, r0
 801205e:	4620      	mov	r0, r4
 8012060:	f7f9 fe3c 	bl	800bcdc <ucdr_deserialize_int32_t>
 8012064:	f105 0114 	add.w	r1, r5, #20
 8012068:	4603      	mov	r3, r0
 801206a:	4620      	mov	r0, r4
 801206c:	ea07 0708 	and.w	r7, r7, r8
 8012070:	461c      	mov	r4, r3
 8012072:	f7f9 fab1 	bl	800b5d8 <ucdr_deserialize_uint32_t>
 8012076:	403e      	ands	r6, r7
 8012078:	4034      	ands	r4, r6
 801207a:	4020      	ands	r0, r4
 801207c:	b2c0      	uxtb	r0, r0
 801207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012082:	bf00      	nop

08012084 <rcl_client_get_rmw_handle>:
 8012084:	b118      	cbz	r0, 801208e <rcl_client_get_rmw_handle+0xa>
 8012086:	6800      	ldr	r0, [r0, #0]
 8012088:	b108      	cbz	r0, 801208e <rcl_client_get_rmw_handle+0xa>
 801208a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801208e:	4770      	bx	lr

08012090 <rcl_send_request>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	b1e8      	cbz	r0, 80120d2 <rcl_send_request+0x42>
 8012096:	4604      	mov	r4, r0
 8012098:	6800      	ldr	r0, [r0, #0]
 801209a:	b1d0      	cbz	r0, 80120d2 <rcl_send_request+0x42>
 801209c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80120a0:	b1bb      	cbz	r3, 80120d2 <rcl_send_request+0x42>
 80120a2:	460e      	mov	r6, r1
 80120a4:	b1d1      	cbz	r1, 80120dc <rcl_send_request+0x4c>
 80120a6:	4615      	mov	r5, r2
 80120a8:	b1c2      	cbz	r2, 80120dc <rcl_send_request+0x4c>
 80120aa:	2105      	movs	r1, #5
 80120ac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80120b0:	f002 fda6 	bl	8014c00 <__atomic_load_8>
 80120b4:	6823      	ldr	r3, [r4, #0]
 80120b6:	e9c5 0100 	strd	r0, r1, [r5]
 80120ba:	462a      	mov	r2, r5
 80120bc:	4631      	mov	r1, r6
 80120be:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80120c2:	f003 fc91 	bl	80159e8 <rmw_send_request>
 80120c6:	4606      	mov	r6, r0
 80120c8:	b160      	cbz	r0, 80120e4 <rcl_send_request+0x54>
 80120ca:	2601      	movs	r6, #1
 80120cc:	4630      	mov	r0, r6
 80120ce:	b002      	add	sp, #8
 80120d0:	bd70      	pop	{r4, r5, r6, pc}
 80120d2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80120d6:	4630      	mov	r0, r6
 80120d8:	b002      	add	sp, #8
 80120da:	bd70      	pop	{r4, r5, r6, pc}
 80120dc:	260b      	movs	r6, #11
 80120de:	4630      	mov	r0, r6
 80120e0:	b002      	add	sp, #8
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	6820      	ldr	r0, [r4, #0]
 80120e6:	2105      	movs	r1, #5
 80120e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120ec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80120f0:	9100      	str	r1, [sp, #0]
 80120f2:	f002 fdf1 	bl	8014cd8 <__atomic_exchange_8>
 80120f6:	4630      	mov	r0, r6
 80120f8:	b002      	add	sp, #8
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
 80120fc:	0000      	movs	r0, r0
	...

08012100 <rcl_take_response>:
 8012100:	b570      	push	{r4, r5, r6, lr}
 8012102:	468e      	mov	lr, r1
 8012104:	460c      	mov	r4, r1
 8012106:	4616      	mov	r6, r2
 8012108:	4605      	mov	r5, r0
 801210a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801210e:	b08c      	sub	sp, #48	@ 0x30
 8012110:	f10d 0c18 	add.w	ip, sp, #24
 8012114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012118:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801211c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012120:	b35d      	cbz	r5, 801217a <rcl_take_response+0x7a>
 8012122:	682b      	ldr	r3, [r5, #0]
 8012124:	b34b      	cbz	r3, 801217a <rcl_take_response+0x7a>
 8012126:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801212a:	b330      	cbz	r0, 801217a <rcl_take_response+0x7a>
 801212c:	b346      	cbz	r6, 8012180 <rcl_take_response+0x80>
 801212e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012188 <rcl_take_response+0x88>
 8012132:	2300      	movs	r3, #0
 8012134:	f88d 3007 	strb.w	r3, [sp, #7]
 8012138:	4632      	mov	r2, r6
 801213a:	f10d 0307 	add.w	r3, sp, #7
 801213e:	a902      	add	r1, sp, #8
 8012140:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012144:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012148:	f003 fd56 	bl	8015bf8 <rmw_take_response>
 801214c:	4605      	mov	r5, r0
 801214e:	b9c8      	cbnz	r0, 8012184 <rcl_take_response+0x84>
 8012150:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012154:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8012158:	2a00      	cmp	r2, #0
 801215a:	bf08      	it	eq
 801215c:	461d      	moveq	r5, r3
 801215e:	f10d 0e18 	add.w	lr, sp, #24
 8012162:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012166:	46a4      	mov	ip, r4
 8012168:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801216c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012170:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012174:	4628      	mov	r0, r5
 8012176:	b00c      	add	sp, #48	@ 0x30
 8012178:	bd70      	pop	{r4, r5, r6, pc}
 801217a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801217e:	e7ee      	b.n	801215e <rcl_take_response+0x5e>
 8012180:	250b      	movs	r5, #11
 8012182:	e7ec      	b.n	801215e <rcl_take_response+0x5e>
 8012184:	2501      	movs	r5, #1
 8012186:	e7ea      	b.n	801215e <rcl_take_response+0x5e>
	...

08012190 <rcl_client_is_valid>:
 8012190:	b130      	cbz	r0, 80121a0 <rcl_client_is_valid+0x10>
 8012192:	6800      	ldr	r0, [r0, #0]
 8012194:	b120      	cbz	r0, 80121a0 <rcl_client_is_valid+0x10>
 8012196:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801219a:	3800      	subs	r0, #0
 801219c:	bf18      	it	ne
 801219e:	2001      	movne	r0, #1
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop

080121a4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80121a4:	280b      	cmp	r0, #11
 80121a6:	dc0d      	bgt.n	80121c4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	db09      	blt.n	80121c0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80121ac:	280b      	cmp	r0, #11
 80121ae:	d807      	bhi.n	80121c0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80121b0:	e8df f000 	tbb	[pc, r0]
 80121b4:	07060607 	.word	0x07060607
 80121b8:	06060606 	.word	0x06060606
 80121bc:	07070606 	.word	0x07070606
 80121c0:	2001      	movs	r0, #1
 80121c2:	4770      	bx	lr
 80121c4:	28cb      	cmp	r0, #203	@ 0xcb
 80121c6:	bf18      	it	ne
 80121c8:	2001      	movne	r0, #1
 80121ca:	4770      	bx	lr

080121cc <rcl_get_zero_initialized_context>:
 80121cc:	4a03      	ldr	r2, [pc, #12]	@ (80121dc <rcl_get_zero_initialized_context+0x10>)
 80121ce:	4603      	mov	r3, r0
 80121d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80121d8:	4618      	mov	r0, r3
 80121da:	4770      	bx	lr
 80121dc:	0801934c 	.word	0x0801934c

080121e0 <rcl_context_is_valid>:
 80121e0:	b118      	cbz	r0, 80121ea <rcl_context_is_valid+0xa>
 80121e2:	6840      	ldr	r0, [r0, #4]
 80121e4:	3800      	subs	r0, #0
 80121e6:	bf18      	it	ne
 80121e8:	2001      	movne	r0, #1
 80121ea:	4770      	bx	lr

080121ec <__cleanup_context>:
 80121ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121f0:	4606      	mov	r6, r0
 80121f2:	6800      	ldr	r0, [r0, #0]
 80121f4:	2300      	movs	r3, #0
 80121f6:	6073      	str	r3, [r6, #4]
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d049      	beq.n	8012290 <__cleanup_context+0xa4>
 80121fc:	6947      	ldr	r7, [r0, #20]
 80121fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012202:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012206:	b137      	cbz	r7, 8012216 <__cleanup_context+0x2a>
 8012208:	3014      	adds	r0, #20
 801220a:	f7fa f8b9 	bl	800c380 <rcl_init_options_fini>
 801220e:	4607      	mov	r7, r0
 8012210:	2800      	cmp	r0, #0
 8012212:	d144      	bne.n	801229e <__cleanup_context+0xb2>
 8012214:	6830      	ldr	r0, [r6, #0]
 8012216:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012218:	b143      	cbz	r3, 801222c <__cleanup_context+0x40>
 801221a:	3028      	adds	r0, #40	@ 0x28
 801221c:	f7fb fc7c 	bl	800db18 <rmw_context_fini>
 8012220:	b118      	cbz	r0, 801222a <__cleanup_context+0x3e>
 8012222:	2f00      	cmp	r7, #0
 8012224:	d03e      	beq.n	80122a4 <__cleanup_context+0xb8>
 8012226:	f7fb f9af 	bl	800d588 <rcutils_reset_error>
 801222a:	6830      	ldr	r0, [r6, #0]
 801222c:	6a03      	ldr	r3, [r0, #32]
 801222e:	b1db      	cbz	r3, 8012268 <__cleanup_context+0x7c>
 8012230:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012234:	2a01      	cmp	r2, #1
 8012236:	f17c 0100 	sbcs.w	r1, ip, #0
 801223a:	db11      	blt.n	8012260 <__cleanup_context+0x74>
 801223c:	2400      	movs	r4, #0
 801223e:	4625      	mov	r5, r4
 8012240:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012244:	4649      	mov	r1, r9
 8012246:	b1b8      	cbz	r0, 8012278 <__cleanup_context+0x8c>
 8012248:	47c0      	blx	r8
 801224a:	6833      	ldr	r3, [r6, #0]
 801224c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012250:	3401      	adds	r4, #1
 8012252:	f145 0500 	adc.w	r5, r5, #0
 8012256:	4294      	cmp	r4, r2
 8012258:	eb75 010c 	sbcs.w	r1, r5, ip
 801225c:	6a1b      	ldr	r3, [r3, #32]
 801225e:	dbef      	blt.n	8012240 <__cleanup_context+0x54>
 8012260:	4618      	mov	r0, r3
 8012262:	4649      	mov	r1, r9
 8012264:	47c0      	blx	r8
 8012266:	6830      	ldr	r0, [r6, #0]
 8012268:	4649      	mov	r1, r9
 801226a:	47c0      	blx	r8
 801226c:	2300      	movs	r3, #0
 801226e:	e9c6 3300 	strd	r3, r3, [r6]
 8012272:	4638      	mov	r0, r7
 8012274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012278:	3401      	adds	r4, #1
 801227a:	f145 0500 	adc.w	r5, r5, #0
 801227e:	4294      	cmp	r4, r2
 8012280:	eb75 010c 	sbcs.w	r1, r5, ip
 8012284:	dbdc      	blt.n	8012240 <__cleanup_context+0x54>
 8012286:	4618      	mov	r0, r3
 8012288:	4649      	mov	r1, r9
 801228a:	47c0      	blx	r8
 801228c:	6830      	ldr	r0, [r6, #0]
 801228e:	e7eb      	b.n	8012268 <__cleanup_context+0x7c>
 8012290:	4607      	mov	r7, r0
 8012292:	2300      	movs	r3, #0
 8012294:	e9c6 3300 	strd	r3, r3, [r6]
 8012298:	4638      	mov	r0, r7
 801229a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801229e:	f7fb f973 	bl	800d588 <rcutils_reset_error>
 80122a2:	e7b7      	b.n	8012214 <__cleanup_context+0x28>
 80122a4:	f7ff ff7e 	bl	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 80122a8:	4607      	mov	r7, r0
 80122aa:	e7bc      	b.n	8012226 <__cleanup_context+0x3a>

080122ac <rcl_init>:
 80122ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b0:	1e05      	subs	r5, r0, #0
 80122b2:	b09e      	sub	sp, #120	@ 0x78
 80122b4:	460e      	mov	r6, r1
 80122b6:	4690      	mov	r8, r2
 80122b8:	461f      	mov	r7, r3
 80122ba:	f340 809c 	ble.w	80123f6 <rcl_init+0x14a>
 80122be:	2900      	cmp	r1, #0
 80122c0:	f000 809c 	beq.w	80123fc <rcl_init+0x150>
 80122c4:	f1a1 0e04 	sub.w	lr, r1, #4
 80122c8:	f04f 0c00 	mov.w	ip, #0
 80122cc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80122d0:	f10c 0c01 	add.w	ip, ip, #1
 80122d4:	2c00      	cmp	r4, #0
 80122d6:	f000 8091 	beq.w	80123fc <rcl_init+0x150>
 80122da:	4565      	cmp	r5, ip
 80122dc:	d1f6      	bne.n	80122cc <rcl_init+0x20>
 80122de:	f1b8 0f00 	cmp.w	r8, #0
 80122e2:	f000 808b 	beq.w	80123fc <rcl_init+0x150>
 80122e6:	f8d8 4000 	ldr.w	r4, [r8]
 80122ea:	2c00      	cmp	r4, #0
 80122ec:	f000 8086 	beq.w	80123fc <rcl_init+0x150>
 80122f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80122f2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80122f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	f8cc 3000 	str.w	r3, [ip]
 8012300:	a819      	add	r0, sp, #100	@ 0x64
 8012302:	f7fb f91b 	bl	800d53c <rcutils_allocator_is_valid>
 8012306:	2800      	cmp	r0, #0
 8012308:	d078      	beq.n	80123fc <rcl_init+0x150>
 801230a:	2f00      	cmp	r7, #0
 801230c:	d076      	beq.n	80123fc <rcl_init+0x150>
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d178      	bne.n	8012406 <rcl_init+0x15a>
 8012314:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012318:	2178      	movs	r1, #120	@ 0x78
 801231a:	2001      	movs	r0, #1
 801231c:	4798      	blx	r3
 801231e:	4604      	mov	r4, r0
 8012320:	6038      	str	r0, [r7, #0]
 8012322:	2800      	cmp	r0, #0
 8012324:	f000 80b6 	beq.w	8012494 <rcl_init+0x1e8>
 8012328:	a802      	add	r0, sp, #8
 801232a:	f002 ffb9 	bl	80152a0 <rmw_get_zero_initialized_context>
 801232e:	a902      	add	r1, sp, #8
 8012330:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012334:	2250      	movs	r2, #80	@ 0x50
 8012336:	ac19      	add	r4, sp, #100	@ 0x64
 8012338:	f005 fe07 	bl	8017f4a <memcpy>
 801233c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801233e:	f8d7 e000 	ldr.w	lr, [r7]
 8012342:	46f4      	mov	ip, lr
 8012344:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012348:	6823      	ldr	r3, [r4, #0]
 801234a:	f8cc 3000 	str.w	r3, [ip]
 801234e:	f10e 0114 	add.w	r1, lr, #20
 8012352:	4640      	mov	r0, r8
 8012354:	f7fa f83e 	bl	800c3d4 <rcl_init_options_copy>
 8012358:	4604      	mov	r4, r0
 801235a:	2800      	cmp	r0, #0
 801235c:	d144      	bne.n	80123e8 <rcl_init+0x13c>
 801235e:	f8d7 9000 	ldr.w	r9, [r7]
 8012362:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012366:	f8c9 0020 	str.w	r0, [r9, #32]
 801236a:	f8c9 5018 	str.w	r5, [r9, #24]
 801236e:	f8c9 801c 	str.w	r8, [r9, #28]
 8012372:	2d00      	cmp	r5, #0
 8012374:	d04e      	beq.n	8012414 <rcl_init+0x168>
 8012376:	2e00      	cmp	r6, #0
 8012378:	d04c      	beq.n	8012414 <rcl_init+0x168>
 801237a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801237e:	2104      	movs	r1, #4
 8012380:	4628      	mov	r0, r5
 8012382:	4798      	blx	r3
 8012384:	f8c9 0020 	str.w	r0, [r9, #32]
 8012388:	f8d7 9000 	ldr.w	r9, [r7]
 801238c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012390:	46ca      	mov	sl, r9
 8012392:	b343      	cbz	r3, 80123e6 <rcl_init+0x13a>
 8012394:	2d01      	cmp	r5, #1
 8012396:	f178 0300 	sbcs.w	r3, r8, #0
 801239a:	db3b      	blt.n	8012414 <rcl_init+0x168>
 801239c:	2400      	movs	r4, #0
 801239e:	3e04      	subs	r6, #4
 80123a0:	46a1      	mov	r9, r4
 80123a2:	e00b      	b.n	80123bc <rcl_init+0x110>
 80123a4:	6831      	ldr	r1, [r6, #0]
 80123a6:	f005 fdd0 	bl	8017f4a <memcpy>
 80123aa:	3401      	adds	r4, #1
 80123ac:	f149 0900 	adc.w	r9, r9, #0
 80123b0:	45c8      	cmp	r8, r9
 80123b2:	bf08      	it	eq
 80123b4:	42a5      	cmpeq	r5, r4
 80123b6:	d02b      	beq.n	8012410 <rcl_init+0x164>
 80123b8:	f8d7 a000 	ldr.w	sl, [r7]
 80123bc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80123c0:	f7ed ff38 	bl	8000234 <strlen>
 80123c4:	1c42      	adds	r2, r0, #1
 80123c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123c8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80123ca:	f8da a020 	ldr.w	sl, [sl, #32]
 80123ce:	9201      	str	r2, [sp, #4]
 80123d0:	4610      	mov	r0, r2
 80123d2:	4798      	blx	r3
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80123da:	6a1b      	ldr	r3, [r3, #32]
 80123dc:	9a01      	ldr	r2, [sp, #4]
 80123de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d1de      	bne.n	80123a4 <rcl_init+0xf8>
 80123e6:	240a      	movs	r4, #10
 80123e8:	4638      	mov	r0, r7
 80123ea:	f7ff feff 	bl	80121ec <__cleanup_context>
 80123ee:	4620      	mov	r0, r4
 80123f0:	b01e      	add	sp, #120	@ 0x78
 80123f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f6:	2900      	cmp	r1, #0
 80123f8:	f43f af71 	beq.w	80122de <rcl_init+0x32>
 80123fc:	240b      	movs	r4, #11
 80123fe:	4620      	mov	r0, r4
 8012400:	b01e      	add	sp, #120	@ 0x78
 8012402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012406:	2464      	movs	r4, #100	@ 0x64
 8012408:	4620      	mov	r0, r4
 801240a:	b01e      	add	sp, #120	@ 0x78
 801240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012410:	f8d7 9000 	ldr.w	r9, [r7]
 8012414:	4926      	ldr	r1, [pc, #152]	@ (80124b0 <rcl_init+0x204>)
 8012416:	680b      	ldr	r3, [r1, #0]
 8012418:	3301      	adds	r3, #1
 801241a:	d036      	beq.n	801248a <rcl_init+0x1de>
 801241c:	600b      	str	r3, [r1, #0]
 801241e:	461a      	mov	r2, r3
 8012420:	2400      	movs	r4, #0
 8012422:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012426:	607b      	str	r3, [r7, #4]
 8012428:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801242a:	3301      	adds	r3, #1
 801242c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012430:	d034      	beq.n	801249c <rcl_init+0x1f0>
 8012432:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012436:	b93b      	cbnz	r3, 8012448 <rcl_init+0x19c>
 8012438:	3030      	adds	r0, #48	@ 0x30
 801243a:	f000 f83b 	bl	80124b4 <rcl_get_localhost_only>
 801243e:	4604      	mov	r4, r0
 8012440:	2800      	cmp	r0, #0
 8012442:	d1d1      	bne.n	80123e8 <rcl_init+0x13c>
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	6958      	ldr	r0, [r3, #20]
 8012448:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801244a:	aa18      	add	r2, sp, #96	@ 0x60
 801244c:	a917      	add	r1, sp, #92	@ 0x5c
 801244e:	f001 f871 	bl	8013534 <rcl_validate_enclave_name>
 8012452:	4604      	mov	r4, r0
 8012454:	2800      	cmp	r0, #0
 8012456:	d1c7      	bne.n	80123e8 <rcl_init+0x13c>
 8012458:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801245a:	b9eb      	cbnz	r3, 8012498 <rcl_init+0x1ec>
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	694b      	ldr	r3, [r1, #20]
 8012460:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012462:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012466:	f000 fb3f 	bl	8012ae8 <rcl_get_security_options_from_environment>
 801246a:	4604      	mov	r4, r0
 801246c:	2800      	cmp	r0, #0
 801246e:	d1bb      	bne.n	80123e8 <rcl_init+0x13c>
 8012470:	6839      	ldr	r1, [r7, #0]
 8012472:	6948      	ldr	r0, [r1, #20]
 8012474:	3128      	adds	r1, #40	@ 0x28
 8012476:	3018      	adds	r0, #24
 8012478:	f7fb fa18 	bl	800d8ac <rmw_init>
 801247c:	4604      	mov	r4, r0
 801247e:	2800      	cmp	r0, #0
 8012480:	d0bd      	beq.n	80123fe <rcl_init+0x152>
 8012482:	f7ff fe8f 	bl	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012486:	4604      	mov	r4, r0
 8012488:	e7ae      	b.n	80123e8 <rcl_init+0x13c>
 801248a:	2201      	movs	r2, #1
 801248c:	461c      	mov	r4, r3
 801248e:	600a      	str	r2, [r1, #0]
 8012490:	4613      	mov	r3, r2
 8012492:	e7c6      	b.n	8012422 <rcl_init+0x176>
 8012494:	240a      	movs	r4, #10
 8012496:	e7b2      	b.n	80123fe <rcl_init+0x152>
 8012498:	2401      	movs	r4, #1
 801249a:	e7a5      	b.n	80123e8 <rcl_init+0x13c>
 801249c:	3024      	adds	r0, #36	@ 0x24
 801249e:	f004 fcf1 	bl	8016e84 <rcl_get_default_domain_id>
 80124a2:	4604      	mov	r4, r0
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d19f      	bne.n	80123e8 <rcl_init+0x13c>
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	6958      	ldr	r0, [r3, #20]
 80124ac:	e7c1      	b.n	8012432 <rcl_init+0x186>
 80124ae:	bf00      	nop
 80124b0:	2000ae78 	.word	0x2000ae78

080124b4 <rcl_get_localhost_only>:
 80124b4:	b510      	push	{r4, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	2300      	movs	r3, #0
 80124ba:	9301      	str	r3, [sp, #4]
 80124bc:	b1b8      	cbz	r0, 80124ee <rcl_get_localhost_only+0x3a>
 80124be:	4604      	mov	r4, r0
 80124c0:	a901      	add	r1, sp, #4
 80124c2:	480c      	ldr	r0, [pc, #48]	@ (80124f4 <rcl_get_localhost_only+0x40>)
 80124c4:	f002 fc40 	bl	8014d48 <rcutils_get_env>
 80124c8:	b110      	cbz	r0, 80124d0 <rcl_get_localhost_only+0x1c>
 80124ca:	2001      	movs	r0, #1
 80124cc:	b002      	add	sp, #8
 80124ce:	bd10      	pop	{r4, pc}
 80124d0:	9b01      	ldr	r3, [sp, #4]
 80124d2:	b113      	cbz	r3, 80124da <rcl_get_localhost_only+0x26>
 80124d4:	781a      	ldrb	r2, [r3, #0]
 80124d6:	2a31      	cmp	r2, #49	@ 0x31
 80124d8:	d004      	beq.n	80124e4 <rcl_get_localhost_only+0x30>
 80124da:	2302      	movs	r3, #2
 80124dc:	2000      	movs	r0, #0
 80124de:	7023      	strb	r3, [r4, #0]
 80124e0:	b002      	add	sp, #8
 80124e2:	bd10      	pop	{r4, pc}
 80124e4:	785b      	ldrb	r3, [r3, #1]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1f7      	bne.n	80124da <rcl_get_localhost_only+0x26>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e7f6      	b.n	80124dc <rcl_get_localhost_only+0x28>
 80124ee:	200b      	movs	r0, #11
 80124f0:	b002      	add	sp, #8
 80124f2:	bd10      	pop	{r4, pc}
 80124f4:	08019354 	.word	0x08019354

080124f8 <rcl_get_zero_initialized_node>:
 80124f8:	4a03      	ldr	r2, [pc, #12]	@ (8012508 <rcl_get_zero_initialized_node+0x10>)
 80124fa:	4603      	mov	r3, r0
 80124fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012500:	e883 0003 	stmia.w	r3, {r0, r1}
 8012504:	4618      	mov	r0, r3
 8012506:	4770      	bx	lr
 8012508:	08019370 	.word	0x08019370

0801250c <rcl_node_init>:
 801250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012510:	b0a9      	sub	sp, #164	@ 0xa4
 8012512:	4604      	mov	r4, r0
 8012514:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012518:	a823      	add	r0, sp, #140	@ 0x8c
 801251a:	460e      	mov	r6, r1
 801251c:	4615      	mov	r5, r2
 801251e:	461f      	mov	r7, r3
 8012520:	f004 ff24 	bl	801736c <rcl_guard_condition_get_default_options>
 8012524:	f1b8 0f00 	cmp.w	r8, #0
 8012528:	f000 80e6 	beq.w	80126f8 <rcl_node_init+0x1ec>
 801252c:	4640      	mov	r0, r8
 801252e:	f7fb f805 	bl	800d53c <rcutils_allocator_is_valid>
 8012532:	2800      	cmp	r0, #0
 8012534:	f000 80e0 	beq.w	80126f8 <rcl_node_init+0x1ec>
 8012538:	2e00      	cmp	r6, #0
 801253a:	f000 80dd 	beq.w	80126f8 <rcl_node_init+0x1ec>
 801253e:	2d00      	cmp	r5, #0
 8012540:	f000 80da 	beq.w	80126f8 <rcl_node_init+0x1ec>
 8012544:	2c00      	cmp	r4, #0
 8012546:	f000 80d7 	beq.w	80126f8 <rcl_node_init+0x1ec>
 801254a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801254e:	f1b9 0f00 	cmp.w	r9, #0
 8012552:	f040 80fd 	bne.w	8012750 <rcl_node_init+0x244>
 8012556:	2f00      	cmp	r7, #0
 8012558:	f000 80ce 	beq.w	80126f8 <rcl_node_init+0x1ec>
 801255c:	4638      	mov	r0, r7
 801255e:	f7ff fe3f 	bl	80121e0 <rcl_context_is_valid>
 8012562:	4682      	mov	sl, r0
 8012564:	2800      	cmp	r0, #0
 8012566:	f000 80cd 	beq.w	8012704 <rcl_node_init+0x1f8>
 801256a:	464a      	mov	r2, r9
 801256c:	a922      	add	r1, sp, #136	@ 0x88
 801256e:	4630      	mov	r0, r6
 8012570:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8012574:	f003 f812 	bl	801559c <rmw_validate_node_name>
 8012578:	4681      	mov	r9, r0
 801257a:	2800      	cmp	r0, #0
 801257c:	f040 80be 	bne.w	80126fc <rcl_node_init+0x1f0>
 8012580:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012582:	2800      	cmp	r0, #0
 8012584:	f040 80f0 	bne.w	8012768 <rcl_node_init+0x25c>
 8012588:	4628      	mov	r0, r5
 801258a:	f7ed fe53 	bl	8000234 <strlen>
 801258e:	2800      	cmp	r0, #0
 8012590:	f040 80bb 	bne.w	801270a <rcl_node_init+0x1fe>
 8012594:	4d7c      	ldr	r5, [pc, #496]	@ (8012788 <rcl_node_init+0x27c>)
 8012596:	a922      	add	r1, sp, #136	@ 0x88
 8012598:	2200      	movs	r2, #0
 801259a:	4628      	mov	r0, r5
 801259c:	f002 ffe0 	bl	8015560 <rmw_validate_namespace>
 80125a0:	4681      	mov	r9, r0
 80125a2:	2800      	cmp	r0, #0
 80125a4:	f040 80aa 	bne.w	80126fc <rcl_node_init+0x1f0>
 80125a8:	4682      	mov	sl, r0
 80125aa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80125ac:	2800      	cmp	r0, #0
 80125ae:	f040 80e0 	bne.w	8012772 <rcl_node_init+0x266>
 80125b2:	f8d8 3000 	ldr.w	r3, [r8]
 80125b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125ba:	2078      	movs	r0, #120	@ 0x78
 80125bc:	4798      	blx	r3
 80125be:	4681      	mov	r9, r0
 80125c0:	6060      	str	r0, [r4, #4]
 80125c2:	2800      	cmp	r0, #0
 80125c4:	f000 80ca 	beq.w	801275c <rcl_node_init+0x250>
 80125c8:	2200      	movs	r2, #0
 80125ca:	2300      	movs	r3, #0
 80125cc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80125d0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80125d4:	a808      	add	r0, sp, #32
 80125d6:	f000 f907 	bl	80127e8 <rcl_node_get_default_options>
 80125da:	a908      	add	r1, sp, #32
 80125dc:	4648      	mov	r0, r9
 80125de:	2268      	movs	r2, #104	@ 0x68
 80125e0:	f005 fcb3 	bl	8017f4a <memcpy>
 80125e4:	6861      	ldr	r1, [r4, #4]
 80125e6:	6027      	str	r7, [r4, #0]
 80125e8:	4640      	mov	r0, r8
 80125ea:	f000 f90b 	bl	8012804 <rcl_node_options_copy>
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d158      	bne.n	80126a4 <rcl_node_init+0x198>
 80125f2:	4628      	mov	r0, r5
 80125f4:	f7ed fe1e 	bl	8000234 <strlen>
 80125f8:	4428      	add	r0, r5
 80125fa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80125fe:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012602:	2b2f      	cmp	r3, #47	@ 0x2f
 8012604:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012608:	9300      	str	r3, [sp, #0]
 801260a:	bf0c      	ite	eq
 801260c:	4b5f      	ldreq	r3, [pc, #380]	@ (801278c <rcl_node_init+0x280>)
 801260e:	4b60      	ldrne	r3, [pc, #384]	@ (8012790 <rcl_node_init+0x284>)
 8012610:	9302      	str	r3, [sp, #8]
 8012612:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012616:	9301      	str	r3, [sp, #4]
 8012618:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801261c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012620:	f002 fbba 	bl	8014d98 <rcutils_format_string_limit>
 8012624:	6823      	ldr	r3, [r4, #0]
 8012626:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801262a:	6818      	ldr	r0, [r3, #0]
 801262c:	4631      	mov	r1, r6
 801262e:	3028      	adds	r0, #40	@ 0x28
 8012630:	462a      	mov	r2, r5
 8012632:	6866      	ldr	r6, [r4, #4]
 8012634:	f7fb fb1c 	bl	800dc70 <rmw_create_node>
 8012638:	6863      	ldr	r3, [r4, #4]
 801263a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801263c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801263e:	2800      	cmp	r0, #0
 8012640:	d032      	beq.n	80126a8 <rcl_node_init+0x19c>
 8012642:	f7fb fba9 	bl	800dd98 <rmw_node_get_graph_guard_condition>
 8012646:	4681      	mov	r9, r0
 8012648:	b360      	cbz	r0, 80126a4 <rcl_node_init+0x198>
 801264a:	f8d8 3000 	ldr.w	r3, [r8]
 801264e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012652:	6866      	ldr	r6, [r4, #4]
 8012654:	2008      	movs	r0, #8
 8012656:	4798      	blx	r3
 8012658:	6863      	ldr	r3, [r4, #4]
 801265a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801265c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8012660:	f1bb 0f00 	cmp.w	fp, #0
 8012664:	d020      	beq.n	80126a8 <rcl_node_init+0x19c>
 8012666:	a806      	add	r0, sp, #24
 8012668:	f004 fda4 	bl	80171b4 <rcl_get_zero_initialized_guard_condition>
 801266c:	a806      	add	r0, sp, #24
 801266e:	c803      	ldmia	r0, {r0, r1}
 8012670:	6863      	ldr	r3, [r4, #4]
 8012672:	46c4      	mov	ip, r8
 8012674:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012678:	e88b 0003 	stmia.w	fp, {r0, r1}
 801267c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012680:	ae23      	add	r6, sp, #140	@ 0x8c
 8012682:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012684:	f8dc 3000 	ldr.w	r3, [ip]
 8012688:	6033      	str	r3, [r6, #0]
 801268a:	ab28      	add	r3, sp, #160	@ 0xa0
 801268c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012690:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012694:	4649      	mov	r1, r9
 8012696:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012698:	463a      	mov	r2, r7
 801269a:	4670      	mov	r0, lr
 801269c:	f004 fde0 	bl	8017260 <rcl_guard_condition_init_from_rmw>
 80126a0:	4681      	mov	r9, r0
 80126a2:	b328      	cbz	r0, 80126f0 <rcl_node_init+0x1e4>
 80126a4:	6863      	ldr	r3, [r4, #4]
 80126a6:	b1f3      	cbz	r3, 80126e6 <rcl_node_init+0x1da>
 80126a8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80126aa:	b128      	cbz	r0, 80126b8 <rcl_node_init+0x1ac>
 80126ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80126b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80126b4:	4798      	blx	r3
 80126b6:	6863      	ldr	r3, [r4, #4]
 80126b8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80126ba:	b110      	cbz	r0, 80126c2 <rcl_node_init+0x1b6>
 80126bc:	f7fb faf0 	bl	800dca0 <rmw_destroy_node>
 80126c0:	6863      	ldr	r3, [r4, #4]
 80126c2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80126c4:	b148      	cbz	r0, 80126da <rcl_node_init+0x1ce>
 80126c6:	f004 fe2b 	bl	8017320 <rcl_guard_condition_fini>
 80126ca:	6863      	ldr	r3, [r4, #4]
 80126cc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80126d0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80126d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80126d6:	4798      	blx	r3
 80126d8:	6863      	ldr	r3, [r4, #4]
 80126da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80126de:	4618      	mov	r0, r3
 80126e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80126e4:	4798      	blx	r3
 80126e6:	2300      	movs	r3, #0
 80126e8:	e9c4 3300 	strd	r3, r3, [r4]
 80126ec:	f04f 0901 	mov.w	r9, #1
 80126f0:	f1ba 0f00 	cmp.w	sl, #0
 80126f4:	d125      	bne.n	8012742 <rcl_node_init+0x236>
 80126f6:	e001      	b.n	80126fc <rcl_node_init+0x1f0>
 80126f8:	f04f 090b 	mov.w	r9, #11
 80126fc:	4648      	mov	r0, r9
 80126fe:	b029      	add	sp, #164	@ 0xa4
 8012700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012704:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012708:	e7f8      	b.n	80126fc <rcl_node_init+0x1f0>
 801270a:	782b      	ldrb	r3, [r5, #0]
 801270c:	2b2f      	cmp	r3, #47	@ 0x2f
 801270e:	f43f af42 	beq.w	8012596 <rcl_node_init+0x8a>
 8012712:	9503      	str	r5, [sp, #12]
 8012714:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012718:	9300      	str	r3, [sp, #0]
 801271a:	4b1e      	ldr	r3, [pc, #120]	@ (8012794 <rcl_node_init+0x288>)
 801271c:	9302      	str	r3, [sp, #8]
 801271e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012722:	9301      	str	r3, [sp, #4]
 8012724:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012728:	f002 fb36 	bl	8014d98 <rcutils_format_string_limit>
 801272c:	4605      	mov	r5, r0
 801272e:	b340      	cbz	r0, 8012782 <rcl_node_init+0x276>
 8012730:	2200      	movs	r2, #0
 8012732:	a922      	add	r1, sp, #136	@ 0x88
 8012734:	9222      	str	r2, [sp, #136]	@ 0x88
 8012736:	f002 ff13 	bl	8015560 <rmw_validate_namespace>
 801273a:	4681      	mov	r9, r0
 801273c:	2800      	cmp	r0, #0
 801273e:	f43f af34 	beq.w	80125aa <rcl_node_init+0x9e>
 8012742:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012746:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801274a:	4628      	mov	r0, r5
 801274c:	4798      	blx	r3
 801274e:	e7d5      	b.n	80126fc <rcl_node_init+0x1f0>
 8012750:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012754:	4648      	mov	r0, r9
 8012756:	b029      	add	sp, #164	@ 0xa4
 8012758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801275c:	f04f 090a 	mov.w	r9, #10
 8012760:	f1ba 0f00 	cmp.w	sl, #0
 8012764:	d1ed      	bne.n	8012742 <rcl_node_init+0x236>
 8012766:	e7c9      	b.n	80126fc <rcl_node_init+0x1f0>
 8012768:	f002 ff6a 	bl	8015640 <rmw_node_name_validation_result_string>
 801276c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8012770:	e7c4      	b.n	80126fc <rcl_node_init+0x1f0>
 8012772:	f002 ff07 	bl	8015584 <rmw_namespace_validation_result_string>
 8012776:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801277a:	f1ba 0f00 	cmp.w	sl, #0
 801277e:	d1e0      	bne.n	8012742 <rcl_node_init+0x236>
 8012780:	e7bc      	b.n	80126fc <rcl_node_init+0x1f0>
 8012782:	f04f 090a 	mov.w	r9, #10
 8012786:	e7b9      	b.n	80126fc <rcl_node_init+0x1f0>
 8012788:	08019100 	.word	0x08019100
 801278c:	08019128 	.word	0x08019128
 8012790:	08019104 	.word	0x08019104
 8012794:	0801936c 	.word	0x0801936c

08012798 <rcl_node_is_valid>:
 8012798:	b130      	cbz	r0, 80127a8 <rcl_node_is_valid+0x10>
 801279a:	6843      	ldr	r3, [r0, #4]
 801279c:	b123      	cbz	r3, 80127a8 <rcl_node_is_valid+0x10>
 801279e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80127a0:	b113      	cbz	r3, 80127a8 <rcl_node_is_valid+0x10>
 80127a2:	6800      	ldr	r0, [r0, #0]
 80127a4:	f7ff bd1c 	b.w	80121e0 <rcl_context_is_valid>
 80127a8:	2000      	movs	r0, #0
 80127aa:	4770      	bx	lr

080127ac <rcl_node_get_name>:
 80127ac:	b120      	cbz	r0, 80127b8 <rcl_node_get_name+0xc>
 80127ae:	6840      	ldr	r0, [r0, #4]
 80127b0:	b110      	cbz	r0, 80127b8 <rcl_node_get_name+0xc>
 80127b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80127b4:	b100      	cbz	r0, 80127b8 <rcl_node_get_name+0xc>
 80127b6:	6880      	ldr	r0, [r0, #8]
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop

080127bc <rcl_node_get_namespace>:
 80127bc:	b120      	cbz	r0, 80127c8 <rcl_node_get_namespace+0xc>
 80127be:	6840      	ldr	r0, [r0, #4]
 80127c0:	b110      	cbz	r0, 80127c8 <rcl_node_get_namespace+0xc>
 80127c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80127c4:	b100      	cbz	r0, 80127c8 <rcl_node_get_namespace+0xc>
 80127c6:	68c0      	ldr	r0, [r0, #12]
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop

080127cc <rcl_node_get_options>:
 80127cc:	b128      	cbz	r0, 80127da <rcl_node_get_options+0xe>
 80127ce:	6840      	ldr	r0, [r0, #4]
 80127d0:	b118      	cbz	r0, 80127da <rcl_node_get_options+0xe>
 80127d2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	bf08      	it	eq
 80127d8:	2000      	moveq	r0, #0
 80127da:	4770      	bx	lr

080127dc <rcl_node_get_rmw_handle>:
 80127dc:	b110      	cbz	r0, 80127e4 <rcl_node_get_rmw_handle+0x8>
 80127de:	6840      	ldr	r0, [r0, #4]
 80127e0:	b100      	cbz	r0, 80127e4 <rcl_node_get_rmw_handle+0x8>
 80127e2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop

080127e8 <rcl_node_get_default_options>:
 80127e8:	b510      	push	{r4, lr}
 80127ea:	2268      	movs	r2, #104	@ 0x68
 80127ec:	4604      	mov	r4, r0
 80127ee:	2100      	movs	r1, #0
 80127f0:	f005 fae2 	bl	8017db8 <memset>
 80127f4:	4620      	mov	r0, r4
 80127f6:	f7fa fe93 	bl	800d520 <rcutils_get_default_allocator>
 80127fa:	2301      	movs	r3, #1
 80127fc:	7523      	strb	r3, [r4, #20]
 80127fe:	4620      	mov	r0, r4
 8012800:	bd10      	pop	{r4, pc}
 8012802:	bf00      	nop

08012804 <rcl_node_options_copy>:
 8012804:	b1d0      	cbz	r0, 801283c <rcl_node_options_copy+0x38>
 8012806:	b570      	push	{r4, r5, r6, lr}
 8012808:	460c      	mov	r4, r1
 801280a:	b1a9      	cbz	r1, 8012838 <rcl_node_options_copy+0x34>
 801280c:	4288      	cmp	r0, r1
 801280e:	4684      	mov	ip, r0
 8012810:	d012      	beq.n	8012838 <rcl_node_options_copy+0x34>
 8012812:	4605      	mov	r5, r0
 8012814:	8a86      	ldrh	r6, [r0, #20]
 8012816:	468e      	mov	lr, r1
 8012818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801281a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801281e:	682b      	ldr	r3, [r5, #0]
 8012820:	f8ce 3000 	str.w	r3, [lr]
 8012824:	f10c 0118 	add.w	r1, ip, #24
 8012828:	2250      	movs	r2, #80	@ 0x50
 801282a:	82a6      	strh	r6, [r4, #20]
 801282c:	f104 0018 	add.w	r0, r4, #24
 8012830:	f005 fb8b 	bl	8017f4a <memcpy>
 8012834:	2000      	movs	r0, #0
 8012836:	bd70      	pop	{r4, r5, r6, pc}
 8012838:	200b      	movs	r0, #11
 801283a:	bd70      	pop	{r4, r5, r6, pc}
 801283c:	200b      	movs	r0, #11
 801283e:	4770      	bx	lr

08012840 <rcl_node_resolve_name>:
 8012840:	b082      	sub	sp, #8
 8012842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012846:	b091      	sub	sp, #68	@ 0x44
 8012848:	ac1a      	add	r4, sp, #104	@ 0x68
 801284a:	e884 000c 	stmia.w	r4, {r2, r3}
 801284e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012852:	2800      	cmp	r0, #0
 8012854:	d03b      	beq.n	80128ce <rcl_node_resolve_name+0x8e>
 8012856:	460c      	mov	r4, r1
 8012858:	4605      	mov	r5, r0
 801285a:	f7ff ffb7 	bl	80127cc <rcl_node_get_options>
 801285e:	2800      	cmp	r0, #0
 8012860:	d037      	beq.n	80128d2 <rcl_node_resolve_name+0x92>
 8012862:	4628      	mov	r0, r5
 8012864:	f7ff ffa2 	bl	80127ac <rcl_node_get_name>
 8012868:	4606      	mov	r6, r0
 801286a:	4628      	mov	r0, r5
 801286c:	f7ff ffa6 	bl	80127bc <rcl_node_get_namespace>
 8012870:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012874:	4681      	mov	r9, r0
 8012876:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801287a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801287c:	46ac      	mov	ip, r5
 801287e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012882:	f8de 3000 	ldr.w	r3, [lr]
 8012886:	f8cc 3000 	str.w	r3, [ip]
 801288a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801288c:	b1fb      	cbz	r3, 80128ce <rcl_node_resolve_name+0x8e>
 801288e:	468a      	mov	sl, r1
 8012890:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012894:	f002 fbd8 	bl	8015048 <rcutils_get_zero_initialized_string_map>
 8012898:	ab10      	add	r3, sp, #64	@ 0x40
 801289a:	9008      	str	r0, [sp, #32]
 801289c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80128a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80128a4:	2100      	movs	r1, #0
 80128a6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80128aa:	a808      	add	r0, sp, #32
 80128ac:	f002 fc44 	bl	8015138 <rcutils_string_map_init>
 80128b0:	4607      	mov	r7, r0
 80128b2:	b180      	cbz	r0, 80128d6 <rcl_node_resolve_name+0x96>
 80128b4:	f7fa fe50 	bl	800d558 <rcutils_get_error_string>
 80128b8:	f7fa fe66 	bl	800d588 <rcutils_reset_error>
 80128bc:	2f0a      	cmp	r7, #10
 80128be:	bf18      	it	ne
 80128c0:	2701      	movne	r7, #1
 80128c2:	4638      	mov	r0, r7
 80128c4:	b011      	add	sp, #68	@ 0x44
 80128c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ca:	b002      	add	sp, #8
 80128cc:	4770      	bx	lr
 80128ce:	270b      	movs	r7, #11
 80128d0:	e7f7      	b.n	80128c2 <rcl_node_resolve_name+0x82>
 80128d2:	2701      	movs	r7, #1
 80128d4:	e7f5      	b.n	80128c2 <rcl_node_resolve_name+0x82>
 80128d6:	9009      	str	r0, [sp, #36]	@ 0x24
 80128d8:	9007      	str	r0, [sp, #28]
 80128da:	a808      	add	r0, sp, #32
 80128dc:	f004 fc64 	bl	80171a8 <rcl_get_default_topic_name_substitutions>
 80128e0:	4607      	mov	r7, r0
 80128e2:	b1a8      	cbz	r0, 8012910 <rcl_node_resolve_name+0xd0>
 80128e4:	280a      	cmp	r0, #10
 80128e6:	9c07      	ldr	r4, [sp, #28]
 80128e8:	d000      	beq.n	80128ec <rcl_node_resolve_name+0xac>
 80128ea:	2701      	movs	r7, #1
 80128ec:	a808      	add	r0, sp, #32
 80128ee:	f002 fc63 	bl	80151b8 <rcutils_string_map_fini>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d13d      	bne.n	8012972 <rcl_node_resolve_name+0x132>
 80128f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128f8:	4659      	mov	r1, fp
 80128fa:	47d0      	blx	sl
 80128fc:	4659      	mov	r1, fp
 80128fe:	4620      	mov	r0, r4
 8012900:	47d0      	blx	sl
 8012902:	f1b8 0f00 	cmp.w	r8, #0
 8012906:	d0dc      	beq.n	80128c2 <rcl_node_resolve_name+0x82>
 8012908:	2f67      	cmp	r7, #103	@ 0x67
 801290a:	bf08      	it	eq
 801290c:	2768      	moveq	r7, #104	@ 0x68
 801290e:	e7d8      	b.n	80128c2 <rcl_node_resolve_name+0x82>
 8012910:	ab09      	add	r3, sp, #36	@ 0x24
 8012912:	9305      	str	r3, [sp, #20]
 8012914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012916:	46ec      	mov	ip, sp
 8012918:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801291c:	682b      	ldr	r3, [r5, #0]
 801291e:	f8cc 3000 	str.w	r3, [ip]
 8012922:	464a      	mov	r2, r9
 8012924:	4631      	mov	r1, r6
 8012926:	4620      	mov	r0, r4
 8012928:	ab08      	add	r3, sp, #32
 801292a:	f004 fadf 	bl	8016eec <rcl_expand_topic_name>
 801292e:	4607      	mov	r7, r0
 8012930:	b9b8      	cbnz	r0, 8012962 <rcl_node_resolve_name+0x122>
 8012932:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012934:	9009      	str	r0, [sp, #36]	@ 0x24
 8012936:	4602      	mov	r2, r0
 8012938:	a90a      	add	r1, sp, #40	@ 0x28
 801293a:	4620      	mov	r0, r4
 801293c:	f002 fd4c 	bl	80153d8 <rmw_validate_full_topic_name>
 8012940:	b988      	cbnz	r0, 8012966 <rcl_node_resolve_name+0x126>
 8012942:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012944:	b9d5      	cbnz	r5, 801297c <rcl_node_resolve_name+0x13c>
 8012946:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012948:	a808      	add	r0, sp, #32
 801294a:	601c      	str	r4, [r3, #0]
 801294c:	f002 fc34 	bl	80151b8 <rcutils_string_map_fini>
 8012950:	4607      	mov	r7, r0
 8012952:	b1a8      	cbz	r0, 8012980 <rcl_node_resolve_name+0x140>
 8012954:	f7fa fe00 	bl	800d558 <rcutils_get_error_string>
 8012958:	462c      	mov	r4, r5
 801295a:	f7fa fe15 	bl	800d588 <rcutils_reset_error>
 801295e:	2701      	movs	r7, #1
 8012960:	e7c9      	b.n	80128f6 <rcl_node_resolve_name+0xb6>
 8012962:	9c07      	ldr	r4, [sp, #28]
 8012964:	e7c2      	b.n	80128ec <rcl_node_resolve_name+0xac>
 8012966:	f7fa fdf7 	bl	800d558 <rcutils_get_error_string>
 801296a:	2701      	movs	r7, #1
 801296c:	f7fa fe0c 	bl	800d588 <rcutils_reset_error>
 8012970:	e7bc      	b.n	80128ec <rcl_node_resolve_name+0xac>
 8012972:	f7fa fdf1 	bl	800d558 <rcutils_get_error_string>
 8012976:	f7fa fe07 	bl	800d588 <rcutils_reset_error>
 801297a:	e7bc      	b.n	80128f6 <rcl_node_resolve_name+0xb6>
 801297c:	2767      	movs	r7, #103	@ 0x67
 801297e:	e7b5      	b.n	80128ec <rcl_node_resolve_name+0xac>
 8012980:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012982:	4659      	mov	r1, fp
 8012984:	47d0      	blx	sl
 8012986:	4659      	mov	r1, fp
 8012988:	4638      	mov	r0, r7
 801298a:	47d0      	blx	sl
 801298c:	e799      	b.n	80128c2 <rcl_node_resolve_name+0x82>
 801298e:	bf00      	nop

08012990 <exact_match_lookup>:
 8012990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012992:	f102 0708 	add.w	r7, r2, #8
 8012996:	460b      	mov	r3, r1
 8012998:	4614      	mov	r4, r2
 801299a:	4606      	mov	r6, r0
 801299c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80129a0:	b085      	sub	sp, #20
 80129a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80129a6:	4618      	mov	r0, r3
 80129a8:	4919      	ldr	r1, [pc, #100]	@ (8012a10 <exact_match_lookup+0x80>)
 80129aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80129ae:	f002 f9e5 	bl	8014d7c <rcutils_join_path>
 80129b2:	7833      	ldrb	r3, [r6, #0]
 80129b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80129b6:	4605      	mov	r5, r0
 80129b8:	d023      	beq.n	8012a02 <exact_match_lookup+0x72>
 80129ba:	f104 030c 	add.w	r3, r4, #12
 80129be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80129c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80129c6:	1c70      	adds	r0, r6, #1
 80129c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80129cc:	f002 f9dc 	bl	8014d88 <rcutils_to_native_path>
 80129d0:	4606      	mov	r6, r0
 80129d2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80129d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80129da:	4631      	mov	r1, r6
 80129dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80129e0:	4628      	mov	r0, r5
 80129e2:	f002 f9cb 	bl	8014d7c <rcutils_join_path>
 80129e6:	6862      	ldr	r2, [r4, #4]
 80129e8:	6921      	ldr	r1, [r4, #16]
 80129ea:	4603      	mov	r3, r0
 80129ec:	4630      	mov	r0, r6
 80129ee:	461e      	mov	r6, r3
 80129f0:	4790      	blx	r2
 80129f2:	4628      	mov	r0, r5
 80129f4:	6863      	ldr	r3, [r4, #4]
 80129f6:	6921      	ldr	r1, [r4, #16]
 80129f8:	4798      	blx	r3
 80129fa:	4635      	mov	r5, r6
 80129fc:	4628      	mov	r0, r5
 80129fe:	b005      	add	sp, #20
 8012a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a02:	7873      	ldrb	r3, [r6, #1]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d1d8      	bne.n	80129ba <exact_match_lookup+0x2a>
 8012a08:	4628      	mov	r0, r5
 8012a0a:	b005      	add	sp, #20
 8012a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	080193b4 	.word	0x080193b4

08012a14 <rcl_get_secure_root>:
 8012a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a18:	b085      	sub	sp, #20
 8012a1a:	b168      	cbz	r0, 8012a38 <rcl_get_secure_root+0x24>
 8012a1c:	4607      	mov	r7, r0
 8012a1e:	4608      	mov	r0, r1
 8012a20:	460c      	mov	r4, r1
 8012a22:	f7fa fd8b 	bl	800d53c <rcutils_allocator_is_valid>
 8012a26:	b138      	cbz	r0, 8012a38 <rcl_get_secure_root+0x24>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	482d      	ldr	r0, [pc, #180]	@ (8012ae0 <rcl_get_secure_root+0xcc>)
 8012a2c:	9303      	str	r3, [sp, #12]
 8012a2e:	a903      	add	r1, sp, #12
 8012a30:	f002 f98a 	bl	8014d48 <rcutils_get_env>
 8012a34:	4605      	mov	r5, r0
 8012a36:	b120      	cbz	r0, 8012a42 <rcl_get_secure_root+0x2e>
 8012a38:	2500      	movs	r5, #0
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	b005      	add	sp, #20
 8012a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a42:	9b03      	ldr	r3, [sp, #12]
 8012a44:	781a      	ldrb	r2, [r3, #0]
 8012a46:	2a00      	cmp	r2, #0
 8012a48:	d0f6      	beq.n	8012a38 <rcl_get_secure_root+0x24>
 8012a4a:	f104 090c 	add.w	r9, r4, #12
 8012a4e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012a52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a56:	4618      	mov	r0, r3
 8012a58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012a5c:	f002 fab6 	bl	8014fcc <rcutils_strdup>
 8012a60:	4680      	mov	r8, r0
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d0e8      	beq.n	8012a38 <rcl_get_secure_root+0x24>
 8012a66:	481f      	ldr	r0, [pc, #124]	@ (8012ae4 <rcl_get_secure_root+0xd0>)
 8012a68:	9503      	str	r5, [sp, #12]
 8012a6a:	a903      	add	r1, sp, #12
 8012a6c:	f002 f96c 	bl	8014d48 <rcutils_get_env>
 8012a70:	b160      	cbz	r0, 8012a8c <rcl_get_secure_root+0x78>
 8012a72:	2600      	movs	r6, #0
 8012a74:	6863      	ldr	r3, [r4, #4]
 8012a76:	6921      	ldr	r1, [r4, #16]
 8012a78:	4630      	mov	r0, r6
 8012a7a:	4798      	blx	r3
 8012a7c:	4640      	mov	r0, r8
 8012a7e:	6863      	ldr	r3, [r4, #4]
 8012a80:	6921      	ldr	r1, [r4, #16]
 8012a82:	4798      	blx	r3
 8012a84:	4628      	mov	r0, r5
 8012a86:	b005      	add	sp, #20
 8012a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a8c:	9b03      	ldr	r3, [sp, #12]
 8012a8e:	781e      	ldrb	r6, [r3, #0]
 8012a90:	b1f6      	cbz	r6, 8012ad0 <rcl_get_secure_root+0xbc>
 8012a92:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012a96:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012aa0:	f002 fa94 	bl	8014fcc <rcutils_strdup>
 8012aa4:	4606      	mov	r6, r0
 8012aa6:	2800      	cmp	r0, #0
 8012aa8:	d0e3      	beq.n	8012a72 <rcl_get_secure_root+0x5e>
 8012aaa:	4622      	mov	r2, r4
 8012aac:	4641      	mov	r1, r8
 8012aae:	f7ff ff6f 	bl	8012990 <exact_match_lookup>
 8012ab2:	4605      	mov	r5, r0
 8012ab4:	2d00      	cmp	r5, #0
 8012ab6:	d0dd      	beq.n	8012a74 <rcl_get_secure_root+0x60>
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f002 f95d 	bl	8014d78 <rcutils_is_directory>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	d1d7      	bne.n	8012a74 <rcl_get_secure_root+0x60>
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	6921      	ldr	r1, [r4, #16]
 8012ac8:	461d      	mov	r5, r3
 8012aca:	6863      	ldr	r3, [r4, #4]
 8012acc:	4798      	blx	r3
 8012ace:	e7d1      	b.n	8012a74 <rcl_get_secure_root+0x60>
 8012ad0:	4622      	mov	r2, r4
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	4641      	mov	r1, r8
 8012ad6:	f7ff ff5b 	bl	8012990 <exact_match_lookup>
 8012ada:	4605      	mov	r5, r0
 8012adc:	e7ea      	b.n	8012ab4 <rcl_get_secure_root+0xa0>
 8012ade:	bf00      	nop
 8012ae0:	080193c0 	.word	0x080193c0
 8012ae4:	080193d8 	.word	0x080193d8

08012ae8 <rcl_get_security_options_from_environment>:
 8012ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aec:	b082      	sub	sp, #8
 8012aee:	2300      	movs	r3, #0
 8012af0:	4606      	mov	r6, r0
 8012af2:	460f      	mov	r7, r1
 8012af4:	4820      	ldr	r0, [pc, #128]	@ (8012b78 <rcl_get_security_options_from_environment+0x90>)
 8012af6:	9301      	str	r3, [sp, #4]
 8012af8:	a901      	add	r1, sp, #4
 8012afa:	4690      	mov	r8, r2
 8012afc:	f002 f924 	bl	8014d48 <rcutils_get_env>
 8012b00:	b120      	cbz	r0, 8012b0c <rcl_get_security_options_from_environment+0x24>
 8012b02:	2501      	movs	r5, #1
 8012b04:	4628      	mov	r0, r5
 8012b06:	b002      	add	sp, #8
 8012b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b0c:	491b      	ldr	r1, [pc, #108]	@ (8012b7c <rcl_get_security_options_from_environment+0x94>)
 8012b0e:	4604      	mov	r4, r0
 8012b10:	9801      	ldr	r0, [sp, #4]
 8012b12:	f7ed fb85 	bl	8000220 <strcmp>
 8012b16:	4605      	mov	r5, r0
 8012b18:	b9e8      	cbnz	r0, 8012b56 <rcl_get_security_options_from_environment+0x6e>
 8012b1a:	9001      	str	r0, [sp, #4]
 8012b1c:	f1b8 0f00 	cmp.w	r8, #0
 8012b20:	d020      	beq.n	8012b64 <rcl_get_security_options_from_environment+0x7c>
 8012b22:	4817      	ldr	r0, [pc, #92]	@ (8012b80 <rcl_get_security_options_from_environment+0x98>)
 8012b24:	a901      	add	r1, sp, #4
 8012b26:	f002 f90f 	bl	8014d48 <rcutils_get_env>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d1e9      	bne.n	8012b02 <rcl_get_security_options_from_environment+0x1a>
 8012b2e:	4915      	ldr	r1, [pc, #84]	@ (8012b84 <rcl_get_security_options_from_environment+0x9c>)
 8012b30:	9801      	ldr	r0, [sp, #4]
 8012b32:	f7ed fb75 	bl	8000220 <strcmp>
 8012b36:	fab0 f080 	clz	r0, r0
 8012b3a:	0940      	lsrs	r0, r0, #5
 8012b3c:	f888 0000 	strb.w	r0, [r8]
 8012b40:	4639      	mov	r1, r7
 8012b42:	4630      	mov	r0, r6
 8012b44:	f7ff ff66 	bl	8012a14 <rcl_get_secure_root>
 8012b48:	b170      	cbz	r0, 8012b68 <rcl_get_security_options_from_environment+0x80>
 8012b4a:	f8c8 0004 	str.w	r0, [r8, #4]
 8012b4e:	4628      	mov	r0, r5
 8012b50:	b002      	add	sp, #8
 8012b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b56:	4625      	mov	r5, r4
 8012b58:	4628      	mov	r0, r5
 8012b5a:	f888 4000 	strb.w	r4, [r8]
 8012b5e:	b002      	add	sp, #8
 8012b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b64:	250b      	movs	r5, #11
 8012b66:	e7cd      	b.n	8012b04 <rcl_get_security_options_from_environment+0x1c>
 8012b68:	f898 5000 	ldrb.w	r5, [r8]
 8012b6c:	f1a5 0501 	sub.w	r5, r5, #1
 8012b70:	fab5 f585 	clz	r5, r5
 8012b74:	096d      	lsrs	r5, r5, #5
 8012b76:	e7c5      	b.n	8012b04 <rcl_get_security_options_from_environment+0x1c>
 8012b78:	08019378 	.word	0x08019378
 8012b7c:	0801938c 	.word	0x0801938c
 8012b80:	08019394 	.word	0x08019394
 8012b84:	080193ac 	.word	0x080193ac

08012b88 <rcl_service_get_rmw_handle>:
 8012b88:	b118      	cbz	r0, 8012b92 <rcl_service_get_rmw_handle+0xa>
 8012b8a:	6800      	ldr	r0, [r0, #0]
 8012b8c:	b108      	cbz	r0, 8012b92 <rcl_service_get_rmw_handle+0xa>
 8012b8e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012b92:	4770      	bx	lr

08012b94 <rcl_take_request>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	468e      	mov	lr, r1
 8012b98:	460c      	mov	r4, r1
 8012b9a:	4616      	mov	r6, r2
 8012b9c:	4605      	mov	r5, r0
 8012b9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ba2:	b08c      	sub	sp, #48	@ 0x30
 8012ba4:	f10d 0c18 	add.w	ip, sp, #24
 8012ba8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012bb0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012bb4:	b30d      	cbz	r5, 8012bfa <rcl_take_request+0x66>
 8012bb6:	682b      	ldr	r3, [r5, #0]
 8012bb8:	b1fb      	cbz	r3, 8012bfa <rcl_take_request+0x66>
 8012bba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012bbe:	b1e0      	cbz	r0, 8012bfa <rcl_take_request+0x66>
 8012bc0:	b336      	cbz	r6, 8012c10 <rcl_take_request+0x7c>
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	f88d 3007 	strb.w	r3, [sp, #7]
 8012bc8:	4632      	mov	r2, r6
 8012bca:	f10d 0307 	add.w	r3, sp, #7
 8012bce:	a902      	add	r1, sp, #8
 8012bd0:	f002 ff58 	bl	8015a84 <rmw_take_request>
 8012bd4:	4605      	mov	r5, r0
 8012bd6:	b198      	cbz	r0, 8012c00 <rcl_take_request+0x6c>
 8012bd8:	280a      	cmp	r0, #10
 8012bda:	bf18      	it	ne
 8012bdc:	2501      	movne	r5, #1
 8012bde:	f10d 0e18 	add.w	lr, sp, #24
 8012be2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012be6:	46a4      	mov	ip, r4
 8012be8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012bf0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	b00c      	add	sp, #48	@ 0x30
 8012bf8:	bd70      	pop	{r4, r5, r6, pc}
 8012bfa:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012bfe:	e7ee      	b.n	8012bde <rcl_take_request+0x4a>
 8012c00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012c04:	f240 2359 	movw	r3, #601	@ 0x259
 8012c08:	2a00      	cmp	r2, #0
 8012c0a:	bf08      	it	eq
 8012c0c:	461d      	moveq	r5, r3
 8012c0e:	e7e6      	b.n	8012bde <rcl_take_request+0x4a>
 8012c10:	250b      	movs	r5, #11
 8012c12:	e7e4      	b.n	8012bde <rcl_take_request+0x4a>

08012c14 <rcl_send_response>:
 8012c14:	b170      	cbz	r0, 8012c34 <rcl_send_response+0x20>
 8012c16:	6800      	ldr	r0, [r0, #0]
 8012c18:	b160      	cbz	r0, 8012c34 <rcl_send_response+0x20>
 8012c1a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012c1e:	b148      	cbz	r0, 8012c34 <rcl_send_response+0x20>
 8012c20:	b159      	cbz	r1, 8012c3a <rcl_send_response+0x26>
 8012c22:	b510      	push	{r4, lr}
 8012c24:	b15a      	cbz	r2, 8012c3e <rcl_send_response+0x2a>
 8012c26:	f002 ff8b 	bl	8015b40 <rmw_send_response>
 8012c2a:	b110      	cbz	r0, 8012c32 <rcl_send_response+0x1e>
 8012c2c:	2802      	cmp	r0, #2
 8012c2e:	bf18      	it	ne
 8012c30:	2001      	movne	r0, #1
 8012c32:	bd10      	pop	{r4, pc}
 8012c34:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012c38:	4770      	bx	lr
 8012c3a:	200b      	movs	r0, #11
 8012c3c:	4770      	bx	lr
 8012c3e:	200b      	movs	r0, #11
 8012c40:	bd10      	pop	{r4, pc}
 8012c42:	bf00      	nop

08012c44 <rcl_service_is_valid>:
 8012c44:	b130      	cbz	r0, 8012c54 <rcl_service_is_valid+0x10>
 8012c46:	6800      	ldr	r0, [r0, #0]
 8012c48:	b120      	cbz	r0, 8012c54 <rcl_service_is_valid+0x10>
 8012c4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012c4e:	3800      	subs	r0, #0
 8012c50:	bf18      	it	ne
 8012c52:	2001      	movne	r0, #1
 8012c54:	4770      	bx	lr
 8012c56:	bf00      	nop

08012c58 <rcl_take>:
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d04a      	beq.n	8012cf2 <rcl_take+0x9a>
 8012c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c60:	4604      	mov	r4, r0
 8012c62:	6800      	ldr	r0, [r0, #0]
 8012c64:	b0a4      	sub	sp, #144	@ 0x90
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d03b      	beq.n	8012ce2 <rcl_take+0x8a>
 8012c6a:	461f      	mov	r7, r3
 8012c6c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d036      	beq.n	8012ce2 <rcl_take+0x8a>
 8012c74:	460e      	mov	r6, r1
 8012c76:	2900      	cmp	r1, #0
 8012c78:	d039      	beq.n	8012cee <rcl_take+0x96>
 8012c7a:	4615      	mov	r5, r2
 8012c7c:	2a00      	cmp	r2, #0
 8012c7e:	d03c      	beq.n	8012cfa <rcl_take+0xa2>
 8012c80:	a802      	add	r0, sp, #8
 8012c82:	f002 fba1 	bl	80153c8 <rmw_get_zero_initialized_message_info>
 8012c86:	f10d 0c08 	add.w	ip, sp, #8
 8012c8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012c8e:	46ae      	mov	lr, r5
 8012c90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012c94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012c98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012c9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ca0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012ca4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012ca8:	f04f 0800 	mov.w	r8, #0
 8012cac:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012cb0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012cb4:	6822      	ldr	r2, [r4, #0]
 8012cb6:	462b      	mov	r3, r5
 8012cb8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012cbc:	9700      	str	r7, [sp, #0]
 8012cbe:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012cc2:	4631      	mov	r1, r6
 8012cc4:	f002 ffe2 	bl	8015c8c <rmw_take_with_info>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	b9c0      	cbnz	r0, 8012cfe <rcl_take+0xa6>
 8012ccc:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012cd0:	f240 1291 	movw	r2, #401	@ 0x191
 8012cd4:	2900      	cmp	r1, #0
 8012cd6:	bf08      	it	eq
 8012cd8:	4613      	moveq	r3, r2
 8012cda:	4618      	mov	r0, r3
 8012cdc:	b024      	add	sp, #144	@ 0x90
 8012cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	b024      	add	sp, #144	@ 0x90
 8012cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cee:	230b      	movs	r3, #11
 8012cf0:	e7f3      	b.n	8012cda <rcl_take+0x82>
 8012cf2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	4770      	bx	lr
 8012cfa:	ad14      	add	r5, sp, #80	@ 0x50
 8012cfc:	e7c0      	b.n	8012c80 <rcl_take+0x28>
 8012cfe:	f7ff fa51 	bl	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012d02:	4603      	mov	r3, r0
 8012d04:	e7e9      	b.n	8012cda <rcl_take+0x82>
 8012d06:	bf00      	nop

08012d08 <rcl_subscription_get_rmw_handle>:
 8012d08:	b118      	cbz	r0, 8012d12 <rcl_subscription_get_rmw_handle+0xa>
 8012d0a:	6800      	ldr	r0, [r0, #0]
 8012d0c:	b108      	cbz	r0, 8012d12 <rcl_subscription_get_rmw_handle+0xa>
 8012d0e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012d12:	4770      	bx	lr

08012d14 <rcl_subscription_is_valid>:
 8012d14:	b130      	cbz	r0, 8012d24 <rcl_subscription_is_valid+0x10>
 8012d16:	6800      	ldr	r0, [r0, #0]
 8012d18:	b120      	cbz	r0, 8012d24 <rcl_subscription_is_valid+0x10>
 8012d1a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012d1e:	3800      	subs	r0, #0
 8012d20:	bf18      	it	ne
 8012d22:	2001      	movne	r0, #1
 8012d24:	4770      	bx	lr
 8012d26:	bf00      	nop

08012d28 <rcl_get_system_time>:
 8012d28:	4608      	mov	r0, r1
 8012d2a:	f7fa bc49 	b.w	800d5c0 <rcutils_system_time_now>
 8012d2e:	bf00      	nop

08012d30 <rcl_get_steady_time>:
 8012d30:	4608      	mov	r0, r1
 8012d32:	f7fa bc6d 	b.w	800d610 <rcutils_steady_time_now>
 8012d36:	bf00      	nop

08012d38 <rcl_get_ros_time>:
 8012d38:	7a03      	ldrb	r3, [r0, #8]
 8012d3a:	b510      	push	{r4, lr}
 8012d3c:	460c      	mov	r4, r1
 8012d3e:	b133      	cbz	r3, 8012d4e <rcl_get_ros_time+0x16>
 8012d40:	2105      	movs	r1, #5
 8012d42:	f001 ff5d 	bl	8014c00 <__atomic_load_8>
 8012d46:	e9c4 0100 	strd	r0, r1, [r4]
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	bd10      	pop	{r4, pc}
 8012d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d52:	4608      	mov	r0, r1
 8012d54:	f7fa bc34 	b.w	800d5c0 <rcutils_system_time_now>

08012d58 <rcl_clock_init>:
 8012d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d5a:	4605      	mov	r5, r0
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	4614      	mov	r4, r2
 8012d60:	460e      	mov	r6, r1
 8012d62:	f7fa fbeb 	bl	800d53c <rcutils_allocator_is_valid>
 8012d66:	b128      	cbz	r0, 8012d74 <rcl_clock_init+0x1c>
 8012d68:	2d03      	cmp	r5, #3
 8012d6a:	d803      	bhi.n	8012d74 <rcl_clock_init+0x1c>
 8012d6c:	e8df f005 	tbb	[pc, r5]
 8012d70:	06532e1d 	.word	0x06532e1d
 8012d74:	f04f 0c0b 	mov.w	ip, #11
 8012d78:	4660      	mov	r0, ip
 8012d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d7c:	2e00      	cmp	r6, #0
 8012d7e:	d0f9      	beq.n	8012d74 <rcl_clock_init+0x1c>
 8012d80:	2c00      	cmp	r4, #0
 8012d82:	d0f7      	beq.n	8012d74 <rcl_clock_init+0x1c>
 8012d84:	2300      	movs	r3, #0
 8012d86:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012d8a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012e40 <rcl_clock_init+0xe8>
 8012d8e:	6133      	str	r3, [r6, #16]
 8012d90:	f106 0514 	add.w	r5, r6, #20
 8012d94:	469c      	mov	ip, r3
 8012d96:	2703      	movs	r7, #3
 8012d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	602b      	str	r3, [r5, #0]
 8012da0:	7037      	strb	r7, [r6, #0]
 8012da2:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012da6:	4660      	mov	r0, ip
 8012da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012daa:	2e00      	cmp	r6, #0
 8012dac:	d0e2      	beq.n	8012d74 <rcl_clock_init+0x1c>
 8012dae:	2300      	movs	r3, #0
 8012db0:	7033      	strb	r3, [r6, #0]
 8012db2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012db6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012dba:	469c      	mov	ip, r3
 8012dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dbe:	f106 0514 	add.w	r5, r6, #20
 8012dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dc4:	6823      	ldr	r3, [r4, #0]
 8012dc6:	602b      	str	r3, [r5, #0]
 8012dc8:	4660      	mov	r0, ip
 8012dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dcc:	2e00      	cmp	r6, #0
 8012dce:	d0d1      	beq.n	8012d74 <rcl_clock_init+0x1c>
 8012dd0:	2c00      	cmp	r4, #0
 8012dd2:	d0cf      	beq.n	8012d74 <rcl_clock_init+0x1c>
 8012dd4:	2700      	movs	r7, #0
 8012dd6:	7037      	strb	r7, [r6, #0]
 8012dd8:	46a4      	mov	ip, r4
 8012dda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dde:	f106 0514 	add.w	r5, r6, #20
 8012de2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012de6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dec:	f8dc 3000 	ldr.w	r3, [ip]
 8012df0:	602b      	str	r3, [r5, #0]
 8012df2:	6921      	ldr	r1, [r4, #16]
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	2010      	movs	r0, #16
 8012df8:	4798      	blx	r3
 8012dfa:	6130      	str	r0, [r6, #16]
 8012dfc:	b1d0      	cbz	r0, 8012e34 <rcl_clock_init+0xdc>
 8012dfe:	2200      	movs	r2, #0
 8012e00:	2300      	movs	r3, #0
 8012e02:	e9c0 2300 	strd	r2, r3, [r0]
 8012e06:	2301      	movs	r3, #1
 8012e08:	7207      	strb	r7, [r0, #8]
 8012e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8012e3c <rcl_clock_init+0xe4>)
 8012e0c:	7033      	strb	r3, [r6, #0]
 8012e0e:	46bc      	mov	ip, r7
 8012e10:	60f2      	str	r2, [r6, #12]
 8012e12:	4660      	mov	r0, ip
 8012e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e16:	2e00      	cmp	r6, #0
 8012e18:	d0ac      	beq.n	8012d74 <rcl_clock_init+0x1c>
 8012e1a:	2c00      	cmp	r4, #0
 8012e1c:	d0aa      	beq.n	8012d74 <rcl_clock_init+0x1c>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e24:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012e44 <rcl_clock_init+0xec>
 8012e28:	6133      	str	r3, [r6, #16]
 8012e2a:	f106 0514 	add.w	r5, r6, #20
 8012e2e:	469c      	mov	ip, r3
 8012e30:	2702      	movs	r7, #2
 8012e32:	e7b1      	b.n	8012d98 <rcl_clock_init+0x40>
 8012e34:	f04f 0c0a 	mov.w	ip, #10
 8012e38:	e79e      	b.n	8012d78 <rcl_clock_init+0x20>
 8012e3a:	bf00      	nop
 8012e3c:	08012d39 	.word	0x08012d39
 8012e40:	08012d31 	.word	0x08012d31
 8012e44:	08012d29 	.word	0x08012d29

08012e48 <rcl_clock_get_now>:
 8012e48:	b140      	cbz	r0, 8012e5c <rcl_clock_get_now+0x14>
 8012e4a:	b139      	cbz	r1, 8012e5c <rcl_clock_get_now+0x14>
 8012e4c:	7803      	ldrb	r3, [r0, #0]
 8012e4e:	b11b      	cbz	r3, 8012e58 <rcl_clock_get_now+0x10>
 8012e50:	68c3      	ldr	r3, [r0, #12]
 8012e52:	b10b      	cbz	r3, 8012e58 <rcl_clock_get_now+0x10>
 8012e54:	6900      	ldr	r0, [r0, #16]
 8012e56:	4718      	bx	r3
 8012e58:	2001      	movs	r0, #1
 8012e5a:	4770      	bx	lr
 8012e5c:	200b      	movs	r0, #11
 8012e5e:	4770      	bx	lr

08012e60 <rcl_clock_add_jump_callback>:
 8012e60:	b082      	sub	sp, #8
 8012e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e66:	a906      	add	r1, sp, #24
 8012e68:	e881 000c 	stmia.w	r1, {r2, r3}
 8012e6c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012e70:	b320      	cbz	r0, 8012ebc <rcl_clock_add_jump_callback+0x5c>
 8012e72:	4604      	mov	r4, r0
 8012e74:	3014      	adds	r0, #20
 8012e76:	f7fa fb61 	bl	800d53c <rcutils_allocator_is_valid>
 8012e7a:	b1f8      	cbz	r0, 8012ebc <rcl_clock_add_jump_callback+0x5c>
 8012e7c:	b1f6      	cbz	r6, 8012ebc <rcl_clock_add_jump_callback+0x5c>
 8012e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	db1b      	blt.n	8012ebc <rcl_clock_add_jump_callback+0x5c>
 8012e84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012e88:	2a01      	cmp	r2, #1
 8012e8a:	f173 0300 	sbcs.w	r3, r3, #0
 8012e8e:	da15      	bge.n	8012ebc <rcl_clock_add_jump_callback+0x5c>
 8012e90:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012e94:	2f00      	cmp	r7, #0
 8012e96:	d042      	beq.n	8012f1e <rcl_clock_add_jump_callback+0xbe>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	e003      	b.n	8012ea6 <rcl_clock_add_jump_callback+0x46>
 8012e9e:	42bb      	cmp	r3, r7
 8012ea0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012ea4:	d011      	beq.n	8012eca <rcl_clock_add_jump_callback+0x6a>
 8012ea6:	6811      	ldr	r1, [r2, #0]
 8012ea8:	42b1      	cmp	r1, r6
 8012eaa:	f103 0301 	add.w	r3, r3, #1
 8012eae:	d1f6      	bne.n	8012e9e <rcl_clock_add_jump_callback+0x3e>
 8012eb0:	6a11      	ldr	r1, [r2, #32]
 8012eb2:	42a9      	cmp	r1, r5
 8012eb4:	d1f3      	bne.n	8012e9e <rcl_clock_add_jump_callback+0x3e>
 8012eb6:	f04f 0e01 	mov.w	lr, #1
 8012eba:	e001      	b.n	8012ec0 <rcl_clock_add_jump_callback+0x60>
 8012ebc:	f04f 0e0b 	mov.w	lr, #11
 8012ec0:	4670      	mov	r0, lr
 8012ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec6:	b002      	add	sp, #8
 8012ec8:	4770      	bx	lr
 8012eca:	3301      	adds	r3, #1
 8012ecc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012ed0:	00d9      	lsls	r1, r3, #3
 8012ed2:	69e3      	ldr	r3, [r4, #28]
 8012ed4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012ed6:	4798      	blx	r3
 8012ed8:	b1f0      	cbz	r0, 8012f18 <rcl_clock_add_jump_callback+0xb8>
 8012eda:	68a3      	ldr	r3, [r4, #8]
 8012edc:	6060      	str	r0, [r4, #4]
 8012ede:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012ee2:	f10d 0c18 	add.w	ip, sp, #24
 8012ee6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012eea:	f103 0801 	add.w	r8, r3, #1
 8012eee:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012ef2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ef6:	f106 0708 	add.w	r7, r6, #8
 8012efa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012efc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012f00:	f04f 0e00 	mov.w	lr, #0
 8012f04:	e887 0003 	stmia.w	r7, {r0, r1}
 8012f08:	6235      	str	r5, [r6, #32]
 8012f0a:	4670      	mov	r0, lr
 8012f0c:	f8c4 8008 	str.w	r8, [r4, #8]
 8012f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f14:	b002      	add	sp, #8
 8012f16:	4770      	bx	lr
 8012f18:	f04f 0e0a 	mov.w	lr, #10
 8012f1c:	e7d0      	b.n	8012ec0 <rcl_clock_add_jump_callback+0x60>
 8012f1e:	2128      	movs	r1, #40	@ 0x28
 8012f20:	e7d7      	b.n	8012ed2 <rcl_clock_add_jump_callback+0x72>
 8012f22:	bf00      	nop

08012f24 <rcl_clock_remove_jump_callback>:
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d057      	beq.n	8012fd8 <rcl_clock_remove_jump_callback+0xb4>
 8012f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	3014      	adds	r0, #20
 8012f30:	4688      	mov	r8, r1
 8012f32:	4692      	mov	sl, r2
 8012f34:	f7fa fb02 	bl	800d53c <rcutils_allocator_is_valid>
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	d03b      	beq.n	8012fb4 <rcl_clock_remove_jump_callback+0x90>
 8012f3c:	f1b8 0f00 	cmp.w	r8, #0
 8012f40:	d038      	beq.n	8012fb4 <rcl_clock_remove_jump_callback+0x90>
 8012f42:	68ae      	ldr	r6, [r5, #8]
 8012f44:	b166      	cbz	r6, 8012f60 <rcl_clock_remove_jump_callback+0x3c>
 8012f46:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012f4a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012f4e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012f52:	464c      	mov	r4, r9
 8012f54:	6823      	ldr	r3, [r4, #0]
 8012f56:	4543      	cmp	r3, r8
 8012f58:	d005      	beq.n	8012f66 <rcl_clock_remove_jump_callback+0x42>
 8012f5a:	3428      	adds	r4, #40	@ 0x28
 8012f5c:	42a7      	cmp	r7, r4
 8012f5e:	d1f9      	bne.n	8012f54 <rcl_clock_remove_jump_callback+0x30>
 8012f60:	2001      	movs	r0, #1
 8012f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f66:	6a23      	ldr	r3, [r4, #32]
 8012f68:	3428      	adds	r4, #40	@ 0x28
 8012f6a:	42bc      	cmp	r4, r7
 8012f6c:	d02d      	beq.n	8012fca <rcl_clock_remove_jump_callback+0xa6>
 8012f6e:	4553      	cmp	r3, sl
 8012f70:	d1f0      	bne.n	8012f54 <rcl_clock_remove_jump_callback+0x30>
 8012f72:	46a6      	mov	lr, r4
 8012f74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f78:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012f7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012f8c:	3428      	adds	r4, #40	@ 0x28
 8012f8e:	42a7      	cmp	r7, r4
 8012f90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012f94:	d1ed      	bne.n	8012f72 <rcl_clock_remove_jump_callback+0x4e>
 8012f96:	3e01      	subs	r6, #1
 8012f98:	60ae      	str	r6, [r5, #8]
 8012f9a:	b176      	cbz	r6, 8012fba <rcl_clock_remove_jump_callback+0x96>
 8012f9c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012fa0:	69eb      	ldr	r3, [r5, #28]
 8012fa2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012fa4:	00f1      	lsls	r1, r6, #3
 8012fa6:	4648      	mov	r0, r9
 8012fa8:	4798      	blx	r3
 8012faa:	b1b8      	cbz	r0, 8012fdc <rcl_clock_remove_jump_callback+0xb8>
 8012fac:	6068      	str	r0, [r5, #4]
 8012fae:	2000      	movs	r0, #0
 8012fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fb4:	200b      	movs	r0, #11
 8012fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fba:	4648      	mov	r0, r9
 8012fbc:	69ab      	ldr	r3, [r5, #24]
 8012fbe:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012fc0:	4798      	blx	r3
 8012fc2:	606e      	str	r6, [r5, #4]
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fca:	4553      	cmp	r3, sl
 8012fcc:	d1c8      	bne.n	8012f60 <rcl_clock_remove_jump_callback+0x3c>
 8012fce:	3e01      	subs	r6, #1
 8012fd0:	60ae      	str	r6, [r5, #8]
 8012fd2:	2e00      	cmp	r6, #0
 8012fd4:	d1e2      	bne.n	8012f9c <rcl_clock_remove_jump_callback+0x78>
 8012fd6:	e7f0      	b.n	8012fba <rcl_clock_remove_jump_callback+0x96>
 8012fd8:	200b      	movs	r0, #11
 8012fda:	4770      	bx	lr
 8012fdc:	200a      	movs	r0, #10
 8012fde:	e7ea      	b.n	8012fb6 <rcl_clock_remove_jump_callback+0x92>

08012fe0 <_rcl_timer_time_jump>:
 8012fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe4:	4605      	mov	r5, r0
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	4614      	mov	r4, r2
 8012fea:	b131      	cbz	r1, 8012ffa <_rcl_timer_time_jump+0x1a>
 8012fec:	7803      	ldrb	r3, [r0, #0]
 8012fee:	3b02      	subs	r3, #2
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d93f      	bls.n	8013074 <_rcl_timer_time_jump+0x94>
 8012ff4:	b004      	add	sp, #16
 8012ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ffa:	6813      	ldr	r3, [r2, #0]
 8012ffc:	a902      	add	r1, sp, #8
 8012ffe:	6818      	ldr	r0, [r3, #0]
 8013000:	f7ff ff22 	bl	8012e48 <rcl_clock_get_now>
 8013004:	2800      	cmp	r0, #0
 8013006:	d1f5      	bne.n	8012ff4 <_rcl_timer_time_jump+0x14>
 8013008:	6820      	ldr	r0, [r4, #0]
 801300a:	2105      	movs	r1, #5
 801300c:	3020      	adds	r0, #32
 801300e:	f001 fdf7 	bl	8014c00 <__atomic_load_8>
 8013012:	6823      	ldr	r3, [r4, #0]
 8013014:	4681      	mov	r9, r0
 8013016:	4688      	mov	r8, r1
 8013018:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801301c:	2105      	movs	r1, #5
 801301e:	f001 fdef 	bl	8014c00 <__atomic_load_8>
 8013022:	4607      	mov	r7, r0
 8013024:	6820      	ldr	r0, [r4, #0]
 8013026:	460e      	mov	r6, r1
 8013028:	3018      	adds	r0, #24
 801302a:	2105      	movs	r1, #5
 801302c:	f001 fde8 	bl	8014c00 <__atomic_load_8>
 8013030:	782b      	ldrb	r3, [r5, #0]
 8013032:	9a02      	ldr	r2, [sp, #8]
 8013034:	3b02      	subs	r3, #2
 8013036:	2b01      	cmp	r3, #1
 8013038:	460d      	mov	r5, r1
 801303a:	9b03      	ldr	r3, [sp, #12]
 801303c:	4682      	mov	sl, r0
 801303e:	d937      	bls.n	80130b0 <_rcl_timer_time_jump+0xd0>
 8013040:	42ba      	cmp	r2, r7
 8013042:	eb73 0106 	sbcs.w	r1, r3, r6
 8013046:	da5f      	bge.n	8013108 <_rcl_timer_time_jump+0x128>
 8013048:	454a      	cmp	r2, r9
 801304a:	eb73 0108 	sbcs.w	r1, r3, r8
 801304e:	dad1      	bge.n	8012ff4 <_rcl_timer_time_jump+0x14>
 8013050:	6820      	ldr	r0, [r4, #0]
 8013052:	eb1a 0202 	adds.w	r2, sl, r2
 8013056:	eb43 0305 	adc.w	r3, r3, r5
 801305a:	2505      	movs	r5, #5
 801305c:	3028      	adds	r0, #40	@ 0x28
 801305e:	9500      	str	r5, [sp, #0]
 8013060:	f001 fe04 	bl	8014c6c <__atomic_store_8>
 8013064:	6820      	ldr	r0, [r4, #0]
 8013066:	9500      	str	r5, [sp, #0]
 8013068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801306c:	3020      	adds	r0, #32
 801306e:	f001 fdfd 	bl	8014c6c <__atomic_store_8>
 8013072:	e7bf      	b.n	8012ff4 <_rcl_timer_time_jump+0x14>
 8013074:	6813      	ldr	r3, [r2, #0]
 8013076:	a902      	add	r1, sp, #8
 8013078:	6818      	ldr	r0, [r3, #0]
 801307a:	f7ff fee5 	bl	8012e48 <rcl_clock_get_now>
 801307e:	2800      	cmp	r0, #0
 8013080:	d1b8      	bne.n	8012ff4 <_rcl_timer_time_jump+0x14>
 8013082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013086:	4313      	orrs	r3, r2
 8013088:	d0b4      	beq.n	8012ff4 <_rcl_timer_time_jump+0x14>
 801308a:	6820      	ldr	r0, [r4, #0]
 801308c:	2105      	movs	r1, #5
 801308e:	3028      	adds	r0, #40	@ 0x28
 8013090:	f001 fdb6 	bl	8014c00 <__atomic_load_8>
 8013094:	9d02      	ldr	r5, [sp, #8]
 8013096:	9b03      	ldr	r3, [sp, #12]
 8013098:	4602      	mov	r2, r0
 801309a:	6820      	ldr	r0, [r4, #0]
 801309c:	1b52      	subs	r2, r2, r5
 801309e:	f04f 0405 	mov.w	r4, #5
 80130a2:	9400      	str	r4, [sp, #0]
 80130a4:	eb61 0303 	sbc.w	r3, r1, r3
 80130a8:	3030      	adds	r0, #48	@ 0x30
 80130aa:	f001 fddf 	bl	8014c6c <__atomic_store_8>
 80130ae:	e7a1      	b.n	8012ff4 <_rcl_timer_time_jump+0x14>
 80130b0:	4313      	orrs	r3, r2
 80130b2:	d09f      	beq.n	8012ff4 <_rcl_timer_time_jump+0x14>
 80130b4:	6820      	ldr	r0, [r4, #0]
 80130b6:	f04f 0805 	mov.w	r8, #5
 80130ba:	2300      	movs	r3, #0
 80130bc:	f8cd 8000 	str.w	r8, [sp]
 80130c0:	3030      	adds	r0, #48	@ 0x30
 80130c2:	2200      	movs	r2, #0
 80130c4:	f001 fe08 	bl	8014cd8 <__atomic_exchange_8>
 80130c8:	ea51 0300 	orrs.w	r3, r1, r0
 80130cc:	4606      	mov	r6, r0
 80130ce:	460f      	mov	r7, r1
 80130d0:	d090      	beq.n	8012ff4 <_rcl_timer_time_jump+0x14>
 80130d2:	9a02      	ldr	r2, [sp, #8]
 80130d4:	9b03      	ldr	r3, [sp, #12]
 80130d6:	f8cd 8000 	str.w	r8, [sp]
 80130da:	1a12      	subs	r2, r2, r0
 80130dc:	6820      	ldr	r0, [r4, #0]
 80130de:	eb63 0301 	sbc.w	r3, r3, r1
 80130e2:	eb12 020a 	adds.w	r2, r2, sl
 80130e6:	eb43 0305 	adc.w	r3, r3, r5
 80130ea:	3028      	adds	r0, #40	@ 0x28
 80130ec:	f001 fdbe 	bl	8014c6c <__atomic_store_8>
 80130f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130f4:	f8cd 8000 	str.w	r8, [sp]
 80130f8:	6820      	ldr	r0, [r4, #0]
 80130fa:	1b92      	subs	r2, r2, r6
 80130fc:	eb63 0307 	sbc.w	r3, r3, r7
 8013100:	3020      	adds	r0, #32
 8013102:	f001 fdb3 	bl	8014c6c <__atomic_store_8>
 8013106:	e775      	b.n	8012ff4 <_rcl_timer_time_jump+0x14>
 8013108:	6820      	ldr	r0, [r4, #0]
 801310a:	3008      	adds	r0, #8
 801310c:	f004 f94a 	bl	80173a4 <rcl_trigger_guard_condition>
 8013110:	e770      	b.n	8012ff4 <_rcl_timer_time_jump+0x14>
 8013112:	bf00      	nop

08013114 <rcl_get_zero_initialized_timer>:
 8013114:	4b01      	ldr	r3, [pc, #4]	@ (801311c <rcl_get_zero_initialized_timer+0x8>)
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	4770      	bx	lr
 801311a:	bf00      	nop
 801311c:	080193f8 	.word	0x080193f8

08013120 <rcl_timer_init>:
 8013120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013124:	b0aa      	sub	sp, #168	@ 0xa8
 8013126:	4604      	mov	r4, r0
 8013128:	a835      	add	r0, sp, #212	@ 0xd4
 801312a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801312e:	460d      	mov	r5, r1
 8013130:	4692      	mov	sl, r2
 8013132:	f7fa fa03 	bl	800d53c <rcutils_allocator_is_valid>
 8013136:	2800      	cmp	r0, #0
 8013138:	d064      	beq.n	8013204 <rcl_timer_init+0xe4>
 801313a:	2c00      	cmp	r4, #0
 801313c:	d062      	beq.n	8013204 <rcl_timer_init+0xe4>
 801313e:	2d00      	cmp	r5, #0
 8013140:	d060      	beq.n	8013204 <rcl_timer_init+0xe4>
 8013142:	2f00      	cmp	r7, #0
 8013144:	db5e      	blt.n	8013204 <rcl_timer_init+0xe4>
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	b123      	cbz	r3, 8013154 <rcl_timer_init+0x34>
 801314a:	2664      	movs	r6, #100	@ 0x64
 801314c:	4630      	mov	r0, r6
 801314e:	b02a      	add	sp, #168	@ 0xa8
 8013150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013154:	a908      	add	r1, sp, #32
 8013156:	4628      	mov	r0, r5
 8013158:	f7ff fe76 	bl	8012e48 <rcl_clock_get_now>
 801315c:	4606      	mov	r6, r0
 801315e:	2800      	cmp	r0, #0
 8013160:	d1f4      	bne.n	801314c <rcl_timer_init+0x2c>
 8013162:	ae06      	add	r6, sp, #24
 8013164:	4630      	mov	r0, r6
 8013166:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801316a:	f004 f823 	bl	80171b4 <rcl_get_zero_initialized_guard_condition>
 801316e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013172:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8013176:	ae0b      	add	r6, sp, #44	@ 0x2c
 8013178:	e889 0003 	stmia.w	r9, {r0, r1}
 801317c:	4630      	mov	r0, r6
 801317e:	f004 f8f5 	bl	801736c <rcl_guard_condition_get_default_options>
 8013182:	ab0d      	add	r3, sp, #52	@ 0x34
 8013184:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013188:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801318c:	4651      	mov	r1, sl
 801318e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013192:	4648      	mov	r0, r9
 8013194:	f004 f818 	bl	80171c8 <rcl_guard_condition_init>
 8013198:	4606      	mov	r6, r0
 801319a:	2800      	cmp	r0, #0
 801319c:	d1d6      	bne.n	801314c <rcl_timer_init+0x2c>
 801319e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d033      	beq.n	801320e <rcl_timer_init+0xee>
 80131a6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80131a8:	911a      	str	r1, [sp, #104]	@ 0x68
 80131aa:	4642      	mov	r2, r8
 80131ac:	463b      	mov	r3, r7
 80131ae:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80131b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80131b6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013268 <rcl_timer_init+0x148>
 80131ba:	eb12 0008 	adds.w	r0, r2, r8
 80131be:	eb47 0103 	adc.w	r1, r7, r3
 80131c2:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 80131c6:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80131ca:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80131ce:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80131d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80131d6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 80131da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131de:	f8de 3000 	ldr.w	r3, [lr]
 80131e2:	f8cc 3000 	str.w	r3, [ip]
 80131e6:	f04f 0a00 	mov.w	sl, #0
 80131ea:	4619      	mov	r1, r3
 80131ec:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80131f0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80131f2:	2050      	movs	r0, #80	@ 0x50
 80131f4:	4798      	blx	r3
 80131f6:	6020      	str	r0, [r4, #0]
 80131f8:	b358      	cbz	r0, 8013252 <rcl_timer_init+0x132>
 80131fa:	2250      	movs	r2, #80	@ 0x50
 80131fc:	a916      	add	r1, sp, #88	@ 0x58
 80131fe:	f004 fea4 	bl	8017f4a <memcpy>
 8013202:	e7a3      	b.n	801314c <rcl_timer_init+0x2c>
 8013204:	260b      	movs	r6, #11
 8013206:	4630      	mov	r0, r6
 8013208:	b02a      	add	sp, #168	@ 0xa8
 801320a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801320e:	2001      	movs	r0, #1
 8013210:	2100      	movs	r1, #0
 8013212:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8013216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801321a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801321e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8013222:	4a13      	ldr	r2, [pc, #76]	@ (8013270 <rcl_timer_init+0x150>)
 8013224:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013228:	9405      	str	r4, [sp, #20]
 801322a:	9204      	str	r2, [sp, #16]
 801322c:	ab12      	add	r3, sp, #72	@ 0x48
 801322e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013230:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013234:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013238:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801323c:	4628      	mov	r0, r5
 801323e:	f7ff fe0f 	bl	8012e60 <rcl_clock_add_jump_callback>
 8013242:	4682      	mov	sl, r0
 8013244:	2800      	cmp	r0, #0
 8013246:	d0ae      	beq.n	80131a6 <rcl_timer_init+0x86>
 8013248:	4648      	mov	r0, r9
 801324a:	f004 f869 	bl	8017320 <rcl_guard_condition_fini>
 801324e:	4656      	mov	r6, sl
 8013250:	e77c      	b.n	801314c <rcl_timer_init+0x2c>
 8013252:	4648      	mov	r0, r9
 8013254:	f004 f864 	bl	8017320 <rcl_guard_condition_fini>
 8013258:	4905      	ldr	r1, [pc, #20]	@ (8013270 <rcl_timer_init+0x150>)
 801325a:	4622      	mov	r2, r4
 801325c:	4628      	mov	r0, r5
 801325e:	f7ff fe61 	bl	8012f24 <rcl_clock_remove_jump_callback>
 8013262:	260a      	movs	r6, #10
 8013264:	e772      	b.n	801314c <rcl_timer_init+0x2c>
 8013266:	bf00      	nop
	...
 8013270:	08012fe1 	.word	0x08012fe1

08013274 <rcl_timer_call>:
 8013274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013278:	b087      	sub	sp, #28
 801327a:	2800      	cmp	r0, #0
 801327c:	d06d      	beq.n	801335a <rcl_timer_call+0xe6>
 801327e:	6803      	ldr	r3, [r0, #0]
 8013280:	4604      	mov	r4, r0
 8013282:	2b00      	cmp	r3, #0
 8013284:	d063      	beq.n	801334e <rcl_timer_call+0xda>
 8013286:	f3bf 8f5b 	dmb	ish
 801328a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801328e:	f3bf 8f5b 	dmb	ish
 8013292:	2b00      	cmp	r3, #0
 8013294:	d150      	bne.n	8013338 <rcl_timer_call+0xc4>
 8013296:	6803      	ldr	r3, [r0, #0]
 8013298:	a904      	add	r1, sp, #16
 801329a:	6818      	ldr	r0, [r3, #0]
 801329c:	f7ff fdd4 	bl	8012e48 <rcl_clock_get_now>
 80132a0:	4605      	mov	r5, r0
 80132a2:	2800      	cmp	r0, #0
 80132a4:	d14a      	bne.n	801333c <rcl_timer_call+0xc8>
 80132a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	db4a      	blt.n	8013344 <rcl_timer_call+0xd0>
 80132ae:	6820      	ldr	r0, [r4, #0]
 80132b0:	f04f 0a05 	mov.w	sl, #5
 80132b4:	f8cd a000 	str.w	sl, [sp]
 80132b8:	3020      	adds	r0, #32
 80132ba:	f001 fd0d 	bl	8014cd8 <__atomic_exchange_8>
 80132be:	6823      	ldr	r3, [r4, #0]
 80132c0:	f3bf 8f5b 	dmb	ish
 80132c4:	4680      	mov	r8, r0
 80132c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80132ca:	f3bf 8f5b 	dmb	ish
 80132ce:	6820      	ldr	r0, [r4, #0]
 80132d0:	4689      	mov	r9, r1
 80132d2:	3028      	adds	r0, #40	@ 0x28
 80132d4:	4651      	mov	r1, sl
 80132d6:	f001 fc93 	bl	8014c00 <__atomic_load_8>
 80132da:	4606      	mov	r6, r0
 80132dc:	6820      	ldr	r0, [r4, #0]
 80132de:	460f      	mov	r7, r1
 80132e0:	3018      	adds	r0, #24
 80132e2:	4651      	mov	r1, sl
 80132e4:	f001 fc8c 	bl	8014c00 <__atomic_load_8>
 80132e8:	1836      	adds	r6, r6, r0
 80132ea:	4602      	mov	r2, r0
 80132ec:	4682      	mov	sl, r0
 80132ee:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80132f2:	eb47 0701 	adc.w	r7, r7, r1
 80132f6:	4286      	cmp	r6, r0
 80132f8:	460b      	mov	r3, r1
 80132fa:	eb77 010c 	sbcs.w	r1, r7, ip
 80132fe:	da04      	bge.n	801330a <rcl_timer_call+0x96>
 8013300:	ea53 0102 	orrs.w	r1, r3, r2
 8013304:	d12e      	bne.n	8013364 <rcl_timer_call+0xf0>
 8013306:	4606      	mov	r6, r0
 8013308:	4667      	mov	r7, ip
 801330a:	6820      	ldr	r0, [r4, #0]
 801330c:	2105      	movs	r1, #5
 801330e:	4632      	mov	r2, r6
 8013310:	463b      	mov	r3, r7
 8013312:	3028      	adds	r0, #40	@ 0x28
 8013314:	9100      	str	r1, [sp, #0]
 8013316:	f001 fca9 	bl	8014c6c <__atomic_store_8>
 801331a:	f1bb 0f00 	cmp.w	fp, #0
 801331e:	d00d      	beq.n	801333c <rcl_timer_call+0xc8>
 8013320:	9a04      	ldr	r2, [sp, #16]
 8013322:	9b05      	ldr	r3, [sp, #20]
 8013324:	ebb2 0208 	subs.w	r2, r2, r8
 8013328:	4620      	mov	r0, r4
 801332a:	eb63 0309 	sbc.w	r3, r3, r9
 801332e:	47d8      	blx	fp
 8013330:	4628      	mov	r0, r5
 8013332:	b007      	add	sp, #28
 8013334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013338:	f240 3521 	movw	r5, #801	@ 0x321
 801333c:	4628      	mov	r0, r5
 801333e:	b007      	add	sp, #28
 8013340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013344:	2501      	movs	r5, #1
 8013346:	4628      	mov	r0, r5
 8013348:	b007      	add	sp, #28
 801334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801334e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013352:	4628      	mov	r0, r5
 8013354:	b007      	add	sp, #28
 8013356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801335a:	250b      	movs	r5, #11
 801335c:	4628      	mov	r0, r5
 801335e:	b007      	add	sp, #28
 8013360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013364:	1b80      	subs	r0, r0, r6
 8013366:	eb6c 0107 	sbc.w	r1, ip, r7
 801336a:	3801      	subs	r0, #1
 801336c:	f161 0100 	sbc.w	r1, r1, #0
 8013370:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013374:	f7ed f9c8 	bl	8000708 <__aeabi_ldivmod>
 8013378:	9b02      	ldr	r3, [sp, #8]
 801337a:	3001      	adds	r0, #1
 801337c:	f141 0100 	adc.w	r1, r1, #0
 8013380:	fb00 f303 	mul.w	r3, r0, r3
 8013384:	fb01 330a 	mla	r3, r1, sl, r3
 8013388:	fba0 0a0a 	umull	r0, sl, r0, sl
 801338c:	1986      	adds	r6, r0, r6
 801338e:	4453      	add	r3, sl
 8013390:	eb43 0707 	adc.w	r7, r3, r7
 8013394:	e7b9      	b.n	801330a <rcl_timer_call+0x96>
 8013396:	bf00      	nop

08013398 <rcl_timer_is_ready>:
 8013398:	b570      	push	{r4, r5, r6, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	b378      	cbz	r0, 80133fe <rcl_timer_is_ready+0x66>
 801339e:	6803      	ldr	r3, [r0, #0]
 80133a0:	4604      	mov	r4, r0
 80133a2:	b383      	cbz	r3, 8013406 <rcl_timer_is_ready+0x6e>
 80133a4:	460d      	mov	r5, r1
 80133a6:	b351      	cbz	r1, 80133fe <rcl_timer_is_ready+0x66>
 80133a8:	f3bf 8f5b 	dmb	ish
 80133ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80133b0:	f3bf 8f5b 	dmb	ish
 80133b4:	b953      	cbnz	r3, 80133cc <rcl_timer_is_ready+0x34>
 80133b6:	6803      	ldr	r3, [r0, #0]
 80133b8:	4669      	mov	r1, sp
 80133ba:	6818      	ldr	r0, [r3, #0]
 80133bc:	f7ff fd44 	bl	8012e48 <rcl_clock_get_now>
 80133c0:	4606      	mov	r6, r0
 80133c2:	b140      	cbz	r0, 80133d6 <rcl_timer_is_ready+0x3e>
 80133c4:	f240 3321 	movw	r3, #801	@ 0x321
 80133c8:	4298      	cmp	r0, r3
 80133ca:	d101      	bne.n	80133d0 <rcl_timer_is_ready+0x38>
 80133cc:	2600      	movs	r6, #0
 80133ce:	702e      	strb	r6, [r5, #0]
 80133d0:	4630      	mov	r0, r6
 80133d2:	b002      	add	sp, #8
 80133d4:	bd70      	pop	{r4, r5, r6, pc}
 80133d6:	6820      	ldr	r0, [r4, #0]
 80133d8:	2105      	movs	r1, #5
 80133da:	3028      	adds	r0, #40	@ 0x28
 80133dc:	f001 fc10 	bl	8014c00 <__atomic_load_8>
 80133e0:	9b00      	ldr	r3, [sp, #0]
 80133e2:	1ac0      	subs	r0, r0, r3
 80133e4:	9b01      	ldr	r3, [sp, #4]
 80133e6:	eb61 0103 	sbc.w	r1, r1, r3
 80133ea:	2801      	cmp	r0, #1
 80133ec:	f171 0300 	sbcs.w	r3, r1, #0
 80133f0:	bfb4      	ite	lt
 80133f2:	2301      	movlt	r3, #1
 80133f4:	2300      	movge	r3, #0
 80133f6:	4630      	mov	r0, r6
 80133f8:	702b      	strb	r3, [r5, #0]
 80133fa:	b002      	add	sp, #8
 80133fc:	bd70      	pop	{r4, r5, r6, pc}
 80133fe:	260b      	movs	r6, #11
 8013400:	4630      	mov	r0, r6
 8013402:	b002      	add	sp, #8
 8013404:	bd70      	pop	{r4, r5, r6, pc}
 8013406:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801340a:	e7e1      	b.n	80133d0 <rcl_timer_is_ready+0x38>

0801340c <rcl_timer_get_time_until_next_call>:
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	b330      	cbz	r0, 8013460 <rcl_timer_get_time_until_next_call+0x54>
 8013412:	6803      	ldr	r3, [r0, #0]
 8013414:	4604      	mov	r4, r0
 8013416:	b33b      	cbz	r3, 8013468 <rcl_timer_get_time_until_next_call+0x5c>
 8013418:	460d      	mov	r5, r1
 801341a:	b309      	cbz	r1, 8013460 <rcl_timer_get_time_until_next_call+0x54>
 801341c:	f3bf 8f5b 	dmb	ish
 8013420:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013424:	f3bf 8f5b 	dmb	ish
 8013428:	b9ab      	cbnz	r3, 8013456 <rcl_timer_get_time_until_next_call+0x4a>
 801342a:	6803      	ldr	r3, [r0, #0]
 801342c:	4669      	mov	r1, sp
 801342e:	6818      	ldr	r0, [r3, #0]
 8013430:	f7ff fd0a 	bl	8012e48 <rcl_clock_get_now>
 8013434:	4606      	mov	r6, r0
 8013436:	b958      	cbnz	r0, 8013450 <rcl_timer_get_time_until_next_call+0x44>
 8013438:	6820      	ldr	r0, [r4, #0]
 801343a:	2105      	movs	r1, #5
 801343c:	3028      	adds	r0, #40	@ 0x28
 801343e:	f001 fbdf 	bl	8014c00 <__atomic_load_8>
 8013442:	9b00      	ldr	r3, [sp, #0]
 8013444:	1ac0      	subs	r0, r0, r3
 8013446:	9b01      	ldr	r3, [sp, #4]
 8013448:	6028      	str	r0, [r5, #0]
 801344a:	eb61 0103 	sbc.w	r1, r1, r3
 801344e:	6069      	str	r1, [r5, #4]
 8013450:	4630      	mov	r0, r6
 8013452:	b002      	add	sp, #8
 8013454:	bd70      	pop	{r4, r5, r6, pc}
 8013456:	f240 3621 	movw	r6, #801	@ 0x321
 801345a:	4630      	mov	r0, r6
 801345c:	b002      	add	sp, #8
 801345e:	bd70      	pop	{r4, r5, r6, pc}
 8013460:	260b      	movs	r6, #11
 8013462:	4630      	mov	r0, r6
 8013464:	b002      	add	sp, #8
 8013466:	bd70      	pop	{r4, r5, r6, pc}
 8013468:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801346c:	e7f0      	b.n	8013450 <rcl_timer_get_time_until_next_call+0x44>
 801346e:	bf00      	nop

08013470 <rcl_timer_get_guard_condition>:
 8013470:	b130      	cbz	r0, 8013480 <rcl_timer_get_guard_condition+0x10>
 8013472:	6800      	ldr	r0, [r0, #0]
 8013474:	b120      	cbz	r0, 8013480 <rcl_timer_get_guard_condition+0x10>
 8013476:	68c3      	ldr	r3, [r0, #12]
 8013478:	b10b      	cbz	r3, 801347e <rcl_timer_get_guard_condition+0xe>
 801347a:	3008      	adds	r0, #8
 801347c:	4770      	bx	lr
 801347e:	4618      	mov	r0, r3
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop

08013484 <rcl_validate_enclave_name_with_size>:
 8013484:	b378      	cbz	r0, 80134e6 <rcl_validate_enclave_name_with_size+0x62>
 8013486:	b570      	push	{r4, r5, r6, lr}
 8013488:	4615      	mov	r5, r2
 801348a:	b0c2      	sub	sp, #264	@ 0x108
 801348c:	b302      	cbz	r2, 80134d0 <rcl_validate_enclave_name_with_size+0x4c>
 801348e:	461e      	mov	r6, r3
 8013490:	466a      	mov	r2, sp
 8013492:	ab01      	add	r3, sp, #4
 8013494:	460c      	mov	r4, r1
 8013496:	f002 f815 	bl	80154c4 <rmw_validate_namespace_with_size>
 801349a:	4684      	mov	ip, r0
 801349c:	b9e8      	cbnz	r0, 80134da <rcl_validate_enclave_name_with_size+0x56>
 801349e:	9b00      	ldr	r3, [sp, #0]
 80134a0:	b923      	cbnz	r3, 80134ac <rcl_validate_enclave_name_with_size+0x28>
 80134a2:	2300      	movs	r3, #0
 80134a4:	602b      	str	r3, [r5, #0]
 80134a6:	4660      	mov	r0, ip
 80134a8:	b042      	add	sp, #264	@ 0x108
 80134aa:	bd70      	pop	{r4, r5, r6, pc}
 80134ac:	2b07      	cmp	r3, #7
 80134ae:	d007      	beq.n	80134c0 <rcl_validate_enclave_name_with_size+0x3c>
 80134b0:	1e5a      	subs	r2, r3, #1
 80134b2:	2a05      	cmp	r2, #5
 80134b4:	d833      	bhi.n	801351e <rcl_validate_enclave_name_with_size+0x9a>
 80134b6:	e8df f002 	tbb	[pc, r2]
 80134ba:	2c2f      	.short	0x2c2f
 80134bc:	1a232629 	.word	0x1a232629
 80134c0:	2cff      	cmp	r4, #255	@ 0xff
 80134c2:	d9ee      	bls.n	80134a2 <rcl_validate_enclave_name_with_size+0x1e>
 80134c4:	602b      	str	r3, [r5, #0]
 80134c6:	2e00      	cmp	r6, #0
 80134c8:	d0ed      	beq.n	80134a6 <rcl_validate_enclave_name_with_size+0x22>
 80134ca:	23fe      	movs	r3, #254	@ 0xfe
 80134cc:	6033      	str	r3, [r6, #0]
 80134ce:	e7ea      	b.n	80134a6 <rcl_validate_enclave_name_with_size+0x22>
 80134d0:	f04f 0c0b 	mov.w	ip, #11
 80134d4:	4660      	mov	r0, ip
 80134d6:	b042      	add	sp, #264	@ 0x108
 80134d8:	bd70      	pop	{r4, r5, r6, pc}
 80134da:	f7fe fe63 	bl	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 80134de:	4684      	mov	ip, r0
 80134e0:	4660      	mov	r0, ip
 80134e2:	b042      	add	sp, #264	@ 0x108
 80134e4:	bd70      	pop	{r4, r5, r6, pc}
 80134e6:	f04f 0c0b 	mov.w	ip, #11
 80134ea:	4660      	mov	r0, ip
 80134ec:	4770      	bx	lr
 80134ee:	2306      	movs	r3, #6
 80134f0:	602b      	str	r3, [r5, #0]
 80134f2:	2e00      	cmp	r6, #0
 80134f4:	d0d7      	beq.n	80134a6 <rcl_validate_enclave_name_with_size+0x22>
 80134f6:	9b01      	ldr	r3, [sp, #4]
 80134f8:	6033      	str	r3, [r6, #0]
 80134fa:	4660      	mov	r0, ip
 80134fc:	b042      	add	sp, #264	@ 0x108
 80134fe:	bd70      	pop	{r4, r5, r6, pc}
 8013500:	2305      	movs	r3, #5
 8013502:	602b      	str	r3, [r5, #0]
 8013504:	e7f5      	b.n	80134f2 <rcl_validate_enclave_name_with_size+0x6e>
 8013506:	2304      	movs	r3, #4
 8013508:	602b      	str	r3, [r5, #0]
 801350a:	e7f2      	b.n	80134f2 <rcl_validate_enclave_name_with_size+0x6e>
 801350c:	2303      	movs	r3, #3
 801350e:	602b      	str	r3, [r5, #0]
 8013510:	e7ef      	b.n	80134f2 <rcl_validate_enclave_name_with_size+0x6e>
 8013512:	2302      	movs	r3, #2
 8013514:	602b      	str	r3, [r5, #0]
 8013516:	e7ec      	b.n	80134f2 <rcl_validate_enclave_name_with_size+0x6e>
 8013518:	2301      	movs	r3, #1
 801351a:	602b      	str	r3, [r5, #0]
 801351c:	e7e9      	b.n	80134f2 <rcl_validate_enclave_name_with_size+0x6e>
 801351e:	4a04      	ldr	r2, [pc, #16]	@ (8013530 <rcl_validate_enclave_name_with_size+0xac>)
 8013520:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013524:	a802      	add	r0, sp, #8
 8013526:	f001 fd25 	bl	8014f74 <rcutils_snprintf>
 801352a:	f04f 0c01 	mov.w	ip, #1
 801352e:	e7ba      	b.n	80134a6 <rcl_validate_enclave_name_with_size+0x22>
 8013530:	080193fc 	.word	0x080193fc

08013534 <rcl_validate_enclave_name>:
 8013534:	b168      	cbz	r0, 8013552 <rcl_validate_enclave_name+0x1e>
 8013536:	b570      	push	{r4, r5, r6, lr}
 8013538:	460d      	mov	r5, r1
 801353a:	4616      	mov	r6, r2
 801353c:	4604      	mov	r4, r0
 801353e:	f7ec fe79 	bl	8000234 <strlen>
 8013542:	4633      	mov	r3, r6
 8013544:	4601      	mov	r1, r0
 8013546:	462a      	mov	r2, r5
 8013548:	4620      	mov	r0, r4
 801354a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801354e:	f7ff bf99 	b.w	8013484 <rcl_validate_enclave_name_with_size>
 8013552:	200b      	movs	r0, #11
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop

08013558 <rcl_get_zero_initialized_wait_set>:
 8013558:	b510      	push	{r4, lr}
 801355a:	4c08      	ldr	r4, [pc, #32]	@ (801357c <rcl_get_zero_initialized_wait_set+0x24>)
 801355c:	4686      	mov	lr, r0
 801355e:	4684      	mov	ip, r0
 8013560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013562:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801356c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801356e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013572:	6823      	ldr	r3, [r4, #0]
 8013574:	f8cc 3000 	str.w	r3, [ip]
 8013578:	4670      	mov	r0, lr
 801357a:	bd10      	pop	{r4, pc}
 801357c:	0801945c 	.word	0x0801945c

08013580 <rcl_wait_set_is_valid>:
 8013580:	b118      	cbz	r0, 801358a <rcl_wait_set_is_valid+0xa>
 8013582:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013584:	3800      	subs	r0, #0
 8013586:	bf18      	it	ne
 8013588:	2001      	movne	r0, #1
 801358a:	4770      	bx	lr

0801358c <rcl_wait_set_fini>:
 801358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013590:	b082      	sub	sp, #8
 8013592:	2800      	cmp	r0, #0
 8013594:	f000 8095 	beq.w	80136c2 <rcl_wait_set_fini+0x136>
 8013598:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801359a:	4604      	mov	r4, r0
 801359c:	2e00      	cmp	r6, #0
 801359e:	f000 808c 	beq.w	80136ba <rcl_wait_set_fini+0x12e>
 80135a2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80135a4:	f002 fd48 	bl	8016038 <rmw_destroy_wait_set>
 80135a8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135aa:	1e06      	subs	r6, r0, #0
 80135ac:	bf18      	it	ne
 80135ae:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80135b2:	2d00      	cmp	r5, #0
 80135b4:	f000 8081 	beq.w	80136ba <rcl_wait_set_fini+0x12e>
 80135b8:	6820      	ldr	r0, [r4, #0]
 80135ba:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80135be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135c0:	2700      	movs	r7, #0
 80135c2:	6067      	str	r7, [r4, #4]
 80135c4:	602f      	str	r7, [r5, #0]
 80135c6:	b120      	cbz	r0, 80135d2 <rcl_wait_set_fini+0x46>
 80135c8:	9101      	str	r1, [sp, #4]
 80135ca:	47c0      	blx	r8
 80135cc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135ce:	9901      	ldr	r1, [sp, #4]
 80135d0:	6027      	str	r7, [r4, #0]
 80135d2:	68a8      	ldr	r0, [r5, #8]
 80135d4:	b120      	cbz	r0, 80135e0 <rcl_wait_set_fini+0x54>
 80135d6:	47c0      	blx	r8
 80135d8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135da:	2300      	movs	r3, #0
 80135dc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80135e0:	68a0      	ldr	r0, [r4, #8]
 80135e2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135e6:	f04f 0800 	mov.w	r8, #0
 80135ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80135ee:	f8c5 800c 	str.w	r8, [r5, #12]
 80135f2:	b128      	cbz	r0, 8013600 <rcl_wait_set_fini+0x74>
 80135f4:	47b8      	blx	r7
 80135f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135f8:	f8c4 8008 	str.w	r8, [r4, #8]
 80135fc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013600:	6968      	ldr	r0, [r5, #20]
 8013602:	f04f 0800 	mov.w	r8, #0
 8013606:	f8c5 8010 	str.w	r8, [r5, #16]
 801360a:	b128      	cbz	r0, 8013618 <rcl_wait_set_fini+0x8c>
 801360c:	47b8      	blx	r7
 801360e:	f8c5 8014 	str.w	r8, [r5, #20]
 8013612:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013614:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013616:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013618:	6920      	ldr	r0, [r4, #16]
 801361a:	f04f 0800 	mov.w	r8, #0
 801361e:	f8c4 8014 	str.w	r8, [r4, #20]
 8013622:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8013626:	b128      	cbz	r0, 8013634 <rcl_wait_set_fini+0xa8>
 8013628:	47b8      	blx	r7
 801362a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801362c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013630:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013632:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013634:	69a0      	ldr	r0, [r4, #24]
 8013636:	f04f 0800 	mov.w	r8, #0
 801363a:	f8c4 801c 	str.w	r8, [r4, #28]
 801363e:	f8c5 8018 	str.w	r8, [r5, #24]
 8013642:	b128      	cbz	r0, 8013650 <rcl_wait_set_fini+0xc4>
 8013644:	9101      	str	r1, [sp, #4]
 8013646:	47b8      	blx	r7
 8013648:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801364a:	9901      	ldr	r1, [sp, #4]
 801364c:	f8c4 8018 	str.w	r8, [r4, #24]
 8013650:	6a28      	ldr	r0, [r5, #32]
 8013652:	b120      	cbz	r0, 801365e <rcl_wait_set_fini+0xd2>
 8013654:	47b8      	blx	r7
 8013656:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013658:	2300      	movs	r3, #0
 801365a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801365e:	6a20      	ldr	r0, [r4, #32]
 8013660:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013664:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013666:	2700      	movs	r7, #0
 8013668:	6267      	str	r7, [r4, #36]	@ 0x24
 801366a:	626f      	str	r7, [r5, #36]	@ 0x24
 801366c:	b120      	cbz	r0, 8013678 <rcl_wait_set_fini+0xec>
 801366e:	9101      	str	r1, [sp, #4]
 8013670:	47c0      	blx	r8
 8013672:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013674:	9901      	ldr	r1, [sp, #4]
 8013676:	6227      	str	r7, [r4, #32]
 8013678:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801367a:	b120      	cbz	r0, 8013686 <rcl_wait_set_fini+0xfa>
 801367c:	47c0      	blx	r8
 801367e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013680:	2300      	movs	r3, #0
 8013682:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013686:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013688:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801368c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801368e:	2700      	movs	r7, #0
 8013690:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013692:	632f      	str	r7, [r5, #48]	@ 0x30
 8013694:	b120      	cbz	r0, 80136a0 <rcl_wait_set_fini+0x114>
 8013696:	9101      	str	r1, [sp, #4]
 8013698:	47c0      	blx	r8
 801369a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801369c:	9901      	ldr	r1, [sp, #4]
 801369e:	62a7      	str	r7, [r4, #40]	@ 0x28
 80136a0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80136a2:	b120      	cbz	r0, 80136ae <rcl_wait_set_fini+0x122>
 80136a4:	47c0      	blx	r8
 80136a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136a8:	2300      	movs	r3, #0
 80136aa:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80136ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80136b0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80136b2:	4628      	mov	r0, r5
 80136b4:	4798      	blx	r3
 80136b6:	2300      	movs	r3, #0
 80136b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80136ba:	4630      	mov	r0, r6
 80136bc:	b002      	add	sp, #8
 80136be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c2:	260b      	movs	r6, #11
 80136c4:	4630      	mov	r0, r6
 80136c6:	b002      	add	sp, #8
 80136c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136cc <rcl_wait_set_add_subscription>:
 80136cc:	b318      	cbz	r0, 8013716 <rcl_wait_set_add_subscription+0x4a>
 80136ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80136d0:	b570      	push	{r4, r5, r6, lr}
 80136d2:	4604      	mov	r4, r0
 80136d4:	b30b      	cbz	r3, 801371a <rcl_wait_set_add_subscription+0x4e>
 80136d6:	b319      	cbz	r1, 8013720 <rcl_wait_set_add_subscription+0x54>
 80136d8:	681d      	ldr	r5, [r3, #0]
 80136da:	6840      	ldr	r0, [r0, #4]
 80136dc:	4285      	cmp	r5, r0
 80136de:	d217      	bcs.n	8013710 <rcl_wait_set_add_subscription+0x44>
 80136e0:	6820      	ldr	r0, [r4, #0]
 80136e2:	1c6e      	adds	r6, r5, #1
 80136e4:	601e      	str	r6, [r3, #0]
 80136e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80136ea:	b102      	cbz	r2, 80136ee <rcl_wait_set_add_subscription+0x22>
 80136ec:	6015      	str	r5, [r2, #0]
 80136ee:	4608      	mov	r0, r1
 80136f0:	f7ff fb0a 	bl	8012d08 <rcl_subscription_get_rmw_handle>
 80136f4:	b150      	cbz	r0, 801370c <rcl_wait_set_add_subscription+0x40>
 80136f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80136f8:	6842      	ldr	r2, [r0, #4]
 80136fa:	689b      	ldr	r3, [r3, #8]
 80136fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013700:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013702:	6853      	ldr	r3, [r2, #4]
 8013704:	3301      	adds	r3, #1
 8013706:	2000      	movs	r0, #0
 8013708:	6053      	str	r3, [r2, #4]
 801370a:	bd70      	pop	{r4, r5, r6, pc}
 801370c:	2001      	movs	r0, #1
 801370e:	bd70      	pop	{r4, r5, r6, pc}
 8013710:	f240 3086 	movw	r0, #902	@ 0x386
 8013714:	bd70      	pop	{r4, r5, r6, pc}
 8013716:	200b      	movs	r0, #11
 8013718:	4770      	bx	lr
 801371a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801371e:	bd70      	pop	{r4, r5, r6, pc}
 8013720:	200b      	movs	r0, #11
 8013722:	bd70      	pop	{r4, r5, r6, pc}

08013724 <rcl_wait_set_clear>:
 8013724:	2800      	cmp	r0, #0
 8013726:	d073      	beq.n	8013810 <rcl_wait_set_clear+0xec>
 8013728:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801372a:	b510      	push	{r4, lr}
 801372c:	4604      	mov	r4, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d070      	beq.n	8013814 <rcl_wait_set_clear+0xf0>
 8013732:	6800      	ldr	r0, [r0, #0]
 8013734:	b138      	cbz	r0, 8013746 <rcl_wait_set_clear+0x22>
 8013736:	6862      	ldr	r2, [r4, #4]
 8013738:	2100      	movs	r1, #0
 801373a:	0092      	lsls	r2, r2, #2
 801373c:	f004 fb3c 	bl	8017db8 <memset>
 8013740:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013742:	2200      	movs	r2, #0
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	68a0      	ldr	r0, [r4, #8]
 8013748:	b138      	cbz	r0, 801375a <rcl_wait_set_clear+0x36>
 801374a:	68e2      	ldr	r2, [r4, #12]
 801374c:	2100      	movs	r1, #0
 801374e:	0092      	lsls	r2, r2, #2
 8013750:	f004 fb32 	bl	8017db8 <memset>
 8013754:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013756:	2200      	movs	r2, #0
 8013758:	60da      	str	r2, [r3, #12]
 801375a:	69a0      	ldr	r0, [r4, #24]
 801375c:	b138      	cbz	r0, 801376e <rcl_wait_set_clear+0x4a>
 801375e:	69e2      	ldr	r2, [r4, #28]
 8013760:	2100      	movs	r1, #0
 8013762:	0092      	lsls	r2, r2, #2
 8013764:	f004 fb28 	bl	8017db8 <memset>
 8013768:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801376a:	2200      	movs	r2, #0
 801376c:	619a      	str	r2, [r3, #24]
 801376e:	6a20      	ldr	r0, [r4, #32]
 8013770:	b138      	cbz	r0, 8013782 <rcl_wait_set_clear+0x5e>
 8013772:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013774:	2100      	movs	r1, #0
 8013776:	0092      	lsls	r2, r2, #2
 8013778:	f004 fb1e 	bl	8017db8 <memset>
 801377c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801377e:	2200      	movs	r2, #0
 8013780:	625a      	str	r2, [r3, #36]	@ 0x24
 8013782:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013784:	b138      	cbz	r0, 8013796 <rcl_wait_set_clear+0x72>
 8013786:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013788:	2100      	movs	r1, #0
 801378a:	0092      	lsls	r2, r2, #2
 801378c:	f004 fb14 	bl	8017db8 <memset>
 8013790:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013792:	2200      	movs	r2, #0
 8013794:	631a      	str	r2, [r3, #48]	@ 0x30
 8013796:	6920      	ldr	r0, [r4, #16]
 8013798:	b138      	cbz	r0, 80137aa <rcl_wait_set_clear+0x86>
 801379a:	6962      	ldr	r2, [r4, #20]
 801379c:	2100      	movs	r1, #0
 801379e:	0092      	lsls	r2, r2, #2
 80137a0:	f004 fb0a 	bl	8017db8 <memset>
 80137a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137a6:	2200      	movs	r2, #0
 80137a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80137aa:	6898      	ldr	r0, [r3, #8]
 80137ac:	b138      	cbz	r0, 80137be <rcl_wait_set_clear+0x9a>
 80137ae:	685a      	ldr	r2, [r3, #4]
 80137b0:	2100      	movs	r1, #0
 80137b2:	0092      	lsls	r2, r2, #2
 80137b4:	f004 fb00 	bl	8017db8 <memset>
 80137b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137ba:	2200      	movs	r2, #0
 80137bc:	605a      	str	r2, [r3, #4]
 80137be:	6958      	ldr	r0, [r3, #20]
 80137c0:	b138      	cbz	r0, 80137d2 <rcl_wait_set_clear+0xae>
 80137c2:	691a      	ldr	r2, [r3, #16]
 80137c4:	2100      	movs	r1, #0
 80137c6:	0092      	lsls	r2, r2, #2
 80137c8:	f004 faf6 	bl	8017db8 <memset>
 80137cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137ce:	2200      	movs	r2, #0
 80137d0:	611a      	str	r2, [r3, #16]
 80137d2:	6a18      	ldr	r0, [r3, #32]
 80137d4:	b138      	cbz	r0, 80137e6 <rcl_wait_set_clear+0xc2>
 80137d6:	69da      	ldr	r2, [r3, #28]
 80137d8:	2100      	movs	r1, #0
 80137da:	0092      	lsls	r2, r2, #2
 80137dc:	f004 faec 	bl	8017db8 <memset>
 80137e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137e2:	2200      	movs	r2, #0
 80137e4:	61da      	str	r2, [r3, #28]
 80137e6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80137e8:	b138      	cbz	r0, 80137fa <rcl_wait_set_clear+0xd6>
 80137ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80137ec:	2100      	movs	r1, #0
 80137ee:	0092      	lsls	r2, r2, #2
 80137f0:	f004 fae2 	bl	8017db8 <memset>
 80137f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137f6:	2200      	movs	r2, #0
 80137f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80137fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80137fc:	b138      	cbz	r0, 801380e <rcl_wait_set_clear+0xea>
 80137fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013800:	2100      	movs	r1, #0
 8013802:	0092      	lsls	r2, r2, #2
 8013804:	f004 fad8 	bl	8017db8 <memset>
 8013808:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801380a:	2000      	movs	r0, #0
 801380c:	6358      	str	r0, [r3, #52]	@ 0x34
 801380e:	bd10      	pop	{r4, pc}
 8013810:	200b      	movs	r0, #11
 8013812:	4770      	bx	lr
 8013814:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013818:	bd10      	pop	{r4, pc}
 801381a:	bf00      	nop

0801381c <rcl_wait_set_resize>:
 801381c:	2800      	cmp	r0, #0
 801381e:	f000 8185 	beq.w	8013b2c <rcl_wait_set_resize+0x310>
 8013822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013826:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013828:	b083      	sub	sp, #12
 801382a:	4605      	mov	r5, r0
 801382c:	2c00      	cmp	r4, #0
 801382e:	f000 817f 	beq.w	8013b30 <rcl_wait_set_resize+0x314>
 8013832:	f04f 0900 	mov.w	r9, #0
 8013836:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801383a:	461f      	mov	r7, r3
 801383c:	4688      	mov	r8, r1
 801383e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013842:	4616      	mov	r6, r2
 8013844:	f8c0 9004 	str.w	r9, [r0, #4]
 8013848:	f8c4 9000 	str.w	r9, [r4]
 801384c:	2900      	cmp	r1, #0
 801384e:	f000 80bd 	beq.w	80139cc <rcl_wait_set_resize+0x1b0>
 8013852:	008c      	lsls	r4, r1, #2
 8013854:	6800      	ldr	r0, [r0, #0]
 8013856:	9301      	str	r3, [sp, #4]
 8013858:	4652      	mov	r2, sl
 801385a:	4621      	mov	r1, r4
 801385c:	4798      	blx	r3
 801385e:	9b01      	ldr	r3, [sp, #4]
 8013860:	6028      	str	r0, [r5, #0]
 8013862:	2800      	cmp	r0, #0
 8013864:	f000 80cb 	beq.w	80139fe <rcl_wait_set_resize+0x1e2>
 8013868:	4622      	mov	r2, r4
 801386a:	4649      	mov	r1, r9
 801386c:	9301      	str	r3, [sp, #4]
 801386e:	f004 faa3 	bl	8017db8 <memset>
 8013872:	f8c5 8004 	str.w	r8, [r5, #4]
 8013876:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801387a:	9b01      	ldr	r3, [sp, #4]
 801387c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013880:	f8c8 9004 	str.w	r9, [r8, #4]
 8013884:	4652      	mov	r2, sl
 8013886:	4621      	mov	r1, r4
 8013888:	4798      	blx	r3
 801388a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801388c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013890:	689b      	ldr	r3, [r3, #8]
 8013892:	2b00      	cmp	r3, #0
 8013894:	f000 80ac 	beq.w	80139f0 <rcl_wait_set_resize+0x1d4>
 8013898:	4622      	mov	r2, r4
 801389a:	4649      	mov	r1, r9
 801389c:	4618      	mov	r0, r3
 801389e:	f004 fa8b 	bl	8017db8 <memset>
 80138a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138a8:	f04f 0800 	mov.w	r8, #0
 80138ac:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80138b0:	f8c5 800c 	str.w	r8, [r5, #12]
 80138b4:	f8c4 800c 	str.w	r8, [r4, #12]
 80138b8:	2e00      	cmp	r6, #0
 80138ba:	f040 80a4 	bne.w	8013a06 <rcl_wait_set_resize+0x1ea>
 80138be:	68a8      	ldr	r0, [r5, #8]
 80138c0:	b128      	cbz	r0, 80138ce <rcl_wait_set_resize+0xb2>
 80138c2:	4649      	mov	r1, r9
 80138c4:	4790      	blx	r2
 80138c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138c8:	60ae      	str	r6, [r5, #8]
 80138ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138ce:	f04f 0800 	mov.w	r8, #0
 80138d2:	19f6      	adds	r6, r6, r7
 80138d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80138d8:	f040 80ac 	bne.w	8013a34 <rcl_wait_set_resize+0x218>
 80138dc:	6960      	ldr	r0, [r4, #20]
 80138de:	b130      	cbz	r0, 80138ee <rcl_wait_set_resize+0xd2>
 80138e0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80138e2:	4649      	mov	r1, r9
 80138e4:	4798      	blx	r3
 80138e6:	6166      	str	r6, [r4, #20]
 80138e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138ea:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138ee:	2600      	movs	r6, #0
 80138f0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80138f4:	616e      	str	r6, [r5, #20]
 80138f6:	6426      	str	r6, [r4, #64]	@ 0x40
 80138f8:	2f00      	cmp	r7, #0
 80138fa:	f040 80ad 	bne.w	8013a58 <rcl_wait_set_resize+0x23c>
 80138fe:	6928      	ldr	r0, [r5, #16]
 8013900:	b138      	cbz	r0, 8013912 <rcl_wait_set_resize+0xf6>
 8013902:	4649      	mov	r1, r9
 8013904:	47d0      	blx	sl
 8013906:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013908:	612f      	str	r7, [r5, #16]
 801390a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801390e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013914:	2600      	movs	r6, #0
 8013916:	61ee      	str	r6, [r5, #28]
 8013918:	61a6      	str	r6, [r4, #24]
 801391a:	2b00      	cmp	r3, #0
 801391c:	f040 80af 	bne.w	8013a7e <rcl_wait_set_resize+0x262>
 8013920:	69a8      	ldr	r0, [r5, #24]
 8013922:	b120      	cbz	r0, 801392e <rcl_wait_set_resize+0x112>
 8013924:	4649      	mov	r1, r9
 8013926:	47d0      	blx	sl
 8013928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801392a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801392c:	61ab      	str	r3, [r5, #24]
 801392e:	6a20      	ldr	r0, [r4, #32]
 8013930:	b128      	cbz	r0, 801393e <rcl_wait_set_resize+0x122>
 8013932:	4649      	mov	r1, r9
 8013934:	47d0      	blx	sl
 8013936:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013938:	2300      	movs	r3, #0
 801393a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801393e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013940:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013942:	2600      	movs	r6, #0
 8013944:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013948:	626e      	str	r6, [r5, #36]	@ 0x24
 801394a:	6266      	str	r6, [r4, #36]	@ 0x24
 801394c:	2b00      	cmp	r3, #0
 801394e:	f000 80b6 	beq.w	8013abe <rcl_wait_set_resize+0x2a2>
 8013952:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013956:	6a28      	ldr	r0, [r5, #32]
 8013958:	463a      	mov	r2, r7
 801395a:	4651      	mov	r1, sl
 801395c:	47c8      	blx	r9
 801395e:	6228      	str	r0, [r5, #32]
 8013960:	2800      	cmp	r0, #0
 8013962:	d04c      	beq.n	80139fe <rcl_wait_set_resize+0x1e2>
 8013964:	4652      	mov	r2, sl
 8013966:	4631      	mov	r1, r6
 8013968:	f004 fa26 	bl	8017db8 <memset>
 801396c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801396e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013970:	626b      	str	r3, [r5, #36]	@ 0x24
 8013972:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013974:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013976:	463a      	mov	r2, r7
 8013978:	4651      	mov	r1, sl
 801397a:	47c8      	blx	r9
 801397c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801397e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013980:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013982:	2c00      	cmp	r4, #0
 8013984:	f000 80f0 	beq.w	8013b68 <rcl_wait_set_resize+0x34c>
 8013988:	4620      	mov	r0, r4
 801398a:	4652      	mov	r2, sl
 801398c:	4631      	mov	r1, r6
 801398e:	f004 fa13 	bl	8017db8 <memset>
 8013992:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013996:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013998:	2600      	movs	r6, #0
 801399a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801399e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80139a0:	6326      	str	r6, [r4, #48]	@ 0x30
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	f040 809d 	bne.w	8013ae2 <rcl_wait_set_resize+0x2c6>
 80139a8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80139aa:	b120      	cbz	r0, 80139b6 <rcl_wait_set_resize+0x19a>
 80139ac:	4639      	mov	r1, r7
 80139ae:	47c0      	blx	r8
 80139b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139b4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80139b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80139b8:	b310      	cbz	r0, 8013a00 <rcl_wait_set_resize+0x1e4>
 80139ba:	4639      	mov	r1, r7
 80139bc:	47c0      	blx	r8
 80139be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80139c0:	2000      	movs	r0, #0
 80139c2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80139c6:	b003      	add	sp, #12
 80139c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139cc:	6800      	ldr	r0, [r0, #0]
 80139ce:	b120      	cbz	r0, 80139da <rcl_wait_set_resize+0x1be>
 80139d0:	4651      	mov	r1, sl
 80139d2:	47d8      	blx	fp
 80139d4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139d6:	f8c5 8000 	str.w	r8, [r5]
 80139da:	68a0      	ldr	r0, [r4, #8]
 80139dc:	2800      	cmp	r0, #0
 80139de:	f43f af61 	beq.w	80138a4 <rcl_wait_set_resize+0x88>
 80139e2:	4651      	mov	r1, sl
 80139e4:	47d8      	blx	fp
 80139e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139e8:	2300      	movs	r3, #0
 80139ea:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80139ee:	e759      	b.n	80138a4 <rcl_wait_set_resize+0x88>
 80139f0:	6828      	ldr	r0, [r5, #0]
 80139f2:	9301      	str	r3, [sp, #4]
 80139f4:	4651      	mov	r1, sl
 80139f6:	47d8      	blx	fp
 80139f8:	9b01      	ldr	r3, [sp, #4]
 80139fa:	e9c5 3300 	strd	r3, r3, [r5]
 80139fe:	200a      	movs	r0, #10
 8013a00:	b003      	add	sp, #12
 8013a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a06:	00b4      	lsls	r4, r6, #2
 8013a08:	68a8      	ldr	r0, [r5, #8]
 8013a0a:	464a      	mov	r2, r9
 8013a0c:	4621      	mov	r1, r4
 8013a0e:	4798      	blx	r3
 8013a10:	60a8      	str	r0, [r5, #8]
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d0f3      	beq.n	80139fe <rcl_wait_set_resize+0x1e2>
 8013a16:	4622      	mov	r2, r4
 8013a18:	4641      	mov	r1, r8
 8013a1a:	f004 f9cd 	bl	8017db8 <memset>
 8013a1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a20:	60ee      	str	r6, [r5, #12]
 8013a22:	f04f 0800 	mov.w	r8, #0
 8013a26:	19f6      	adds	r6, r6, r7
 8013a28:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a2c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013a30:	f43f af54 	beq.w	80138dc <rcl_wait_set_resize+0xc0>
 8013a34:	00b6      	lsls	r6, r6, #2
 8013a36:	464a      	mov	r2, r9
 8013a38:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013a3a:	6960      	ldr	r0, [r4, #20]
 8013a3c:	4631      	mov	r1, r6
 8013a3e:	4798      	blx	r3
 8013a40:	4681      	mov	r9, r0
 8013a42:	6160      	str	r0, [r4, #20]
 8013a44:	2800      	cmp	r0, #0
 8013a46:	d076      	beq.n	8013b36 <rcl_wait_set_resize+0x31a>
 8013a48:	4632      	mov	r2, r6
 8013a4a:	4641      	mov	r1, r8
 8013a4c:	f004 f9b4 	bl	8017db8 <memset>
 8013a50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a52:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a56:	e74a      	b.n	80138ee <rcl_wait_set_resize+0xd2>
 8013a58:	00bc      	lsls	r4, r7, #2
 8013a5a:	6928      	ldr	r0, [r5, #16]
 8013a5c:	464a      	mov	r2, r9
 8013a5e:	4621      	mov	r1, r4
 8013a60:	47c0      	blx	r8
 8013a62:	6128      	str	r0, [r5, #16]
 8013a64:	2800      	cmp	r0, #0
 8013a66:	d0ca      	beq.n	80139fe <rcl_wait_set_resize+0x1e2>
 8013a68:	4622      	mov	r2, r4
 8013a6a:	4631      	mov	r1, r6
 8013a6c:	f004 f9a4 	bl	8017db8 <memset>
 8013a70:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a72:	616f      	str	r7, [r5, #20]
 8013a74:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013a78:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a7c:	e749      	b.n	8013912 <rcl_wait_set_resize+0xf6>
 8013a7e:	009c      	lsls	r4, r3, #2
 8013a80:	69a8      	ldr	r0, [r5, #24]
 8013a82:	464a      	mov	r2, r9
 8013a84:	4621      	mov	r1, r4
 8013a86:	47c0      	blx	r8
 8013a88:	61a8      	str	r0, [r5, #24]
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	d0b7      	beq.n	80139fe <rcl_wait_set_resize+0x1e2>
 8013a8e:	4622      	mov	r2, r4
 8013a90:	4631      	mov	r1, r6
 8013a92:	f004 f991 	bl	8017db8 <memset>
 8013a96:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a9a:	61eb      	str	r3, [r5, #28]
 8013a9c:	6a38      	ldr	r0, [r7, #32]
 8013a9e:	61fe      	str	r6, [r7, #28]
 8013aa0:	464a      	mov	r2, r9
 8013aa2:	4621      	mov	r1, r4
 8013aa4:	47c0      	blx	r8
 8013aa6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013aa8:	6238      	str	r0, [r7, #32]
 8013aaa:	6a1f      	ldr	r7, [r3, #32]
 8013aac:	2f00      	cmp	r7, #0
 8013aae:	d054      	beq.n	8013b5a <rcl_wait_set_resize+0x33e>
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	4638      	mov	r0, r7
 8013ab6:	f004 f97f 	bl	8017db8 <memset>
 8013aba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013abc:	e73f      	b.n	801393e <rcl_wait_set_resize+0x122>
 8013abe:	6a28      	ldr	r0, [r5, #32]
 8013ac0:	b120      	cbz	r0, 8013acc <rcl_wait_set_resize+0x2b0>
 8013ac2:	4639      	mov	r1, r7
 8013ac4:	47c0      	blx	r8
 8013ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ac8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013aca:	622b      	str	r3, [r5, #32]
 8013acc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	f43f af60 	beq.w	8013994 <rcl_wait_set_resize+0x178>
 8013ad4:	4639      	mov	r1, r7
 8013ad6:	47c0      	blx	r8
 8013ad8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013ada:	2300      	movs	r3, #0
 8013adc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013ae0:	e758      	b.n	8013994 <rcl_wait_set_resize+0x178>
 8013ae2:	009c      	lsls	r4, r3, #2
 8013ae4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013ae6:	463a      	mov	r2, r7
 8013ae8:	4621      	mov	r1, r4
 8013aea:	47c8      	blx	r9
 8013aec:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d085      	beq.n	80139fe <rcl_wait_set_resize+0x1e2>
 8013af2:	4622      	mov	r2, r4
 8013af4:	4631      	mov	r1, r6
 8013af6:	f004 f95f 	bl	8017db8 <memset>
 8013afa:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013afe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b00:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013b02:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013b06:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013b0a:	463a      	mov	r2, r7
 8013b0c:	4621      	mov	r1, r4
 8013b0e:	47c8      	blx	r9
 8013b10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b12:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b18:	b36b      	cbz	r3, 8013b76 <rcl_wait_set_resize+0x35a>
 8013b1a:	4622      	mov	r2, r4
 8013b1c:	4631      	mov	r1, r6
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f004 f94a 	bl	8017db8 <memset>
 8013b24:	4630      	mov	r0, r6
 8013b26:	b003      	add	sp, #12
 8013b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b2c:	200b      	movs	r0, #11
 8013b2e:	4770      	bx	lr
 8013b30:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b34:	e764      	b.n	8013a00 <rcl_wait_set_resize+0x1e4>
 8013b36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b38:	68a8      	ldr	r0, [r5, #8]
 8013b3a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b3e:	4798      	blx	r3
 8013b40:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b42:	6928      	ldr	r0, [r5, #16]
 8013b44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013b46:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013b48:	f8c5 900c 	str.w	r9, [r5, #12]
 8013b4c:	f8c5 9008 	str.w	r9, [r5, #8]
 8013b50:	4790      	blx	r2
 8013b52:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013b56:	200a      	movs	r0, #10
 8013b58:	e752      	b.n	8013a00 <rcl_wait_set_resize+0x1e4>
 8013b5a:	69a8      	ldr	r0, [r5, #24]
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	47d0      	blx	sl
 8013b60:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013b64:	200a      	movs	r0, #10
 8013b66:	e74b      	b.n	8013a00 <rcl_wait_set_resize+0x1e4>
 8013b68:	6a28      	ldr	r0, [r5, #32]
 8013b6a:	4639      	mov	r1, r7
 8013b6c:	47c0      	blx	r8
 8013b6e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013b72:	200a      	movs	r0, #10
 8013b74:	e744      	b.n	8013a00 <rcl_wait_set_resize+0x1e4>
 8013b76:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013b78:	9301      	str	r3, [sp, #4]
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	47c0      	blx	r8
 8013b7e:	9b01      	ldr	r3, [sp, #4]
 8013b80:	200a      	movs	r0, #10
 8013b82:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013b86:	e73b      	b.n	8013a00 <rcl_wait_set_resize+0x1e4>

08013b88 <rcl_wait_set_init>:
 8013b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b8c:	b084      	sub	sp, #16
 8013b8e:	4604      	mov	r4, r0
 8013b90:	a810      	add	r0, sp, #64	@ 0x40
 8013b92:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013b96:	460f      	mov	r7, r1
 8013b98:	4690      	mov	r8, r2
 8013b9a:	4699      	mov	r9, r3
 8013b9c:	f7f9 fcce 	bl	800d53c <rcutils_allocator_is_valid>
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	d06b      	beq.n	8013c7c <rcl_wait_set_init+0xf4>
 8013ba4:	2c00      	cmp	r4, #0
 8013ba6:	d069      	beq.n	8013c7c <rcl_wait_set_init+0xf4>
 8013ba8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013baa:	b125      	cbz	r5, 8013bb6 <rcl_wait_set_init+0x2e>
 8013bac:	2564      	movs	r5, #100	@ 0x64
 8013bae:	4628      	mov	r0, r5
 8013bb0:	b004      	add	sp, #16
 8013bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb6:	f1ba 0f00 	cmp.w	sl, #0
 8013bba:	d05f      	beq.n	8013c7c <rcl_wait_set_init+0xf4>
 8013bbc:	4650      	mov	r0, sl
 8013bbe:	f7fe fb0f 	bl	80121e0 <rcl_context_is_valid>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d067      	beq.n	8013c96 <rcl_wait_set_init+0x10e>
 8013bc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013bc8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8013bca:	205c      	movs	r0, #92	@ 0x5c
 8013bcc:	4798      	blx	r3
 8013bce:	6320      	str	r0, [r4, #48]	@ 0x30
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	d062      	beq.n	8013c9a <rcl_wait_set_init+0x112>
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	225c      	movs	r2, #92	@ 0x5c
 8013bd8:	f004 f8ee 	bl	8017db8 <memset>
 8013bdc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013be0:	eb03 0e02 	add.w	lr, r3, r2
 8013be4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013be6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013be8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013bec:	449e      	add	lr, r3
 8013bee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013bf2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013bf6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013bfa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013bfe:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013c02:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013c06:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013c0a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013c0e:	f8da a000 	ldr.w	sl, [sl]
 8013c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c14:	44c6      	add	lr, r8
 8013c16:	f8dc 3000 	ldr.w	r3, [ip]
 8013c1a:	602b      	str	r3, [r5, #0]
 8013c1c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013c20:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013c24:	f002 f9fe 	bl	8016024 <rmw_create_wait_set>
 8013c28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c2a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8013c2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013c2e:	b350      	cbz	r0, 8013c86 <rcl_wait_set_init+0xfe>
 8013c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013c32:	9302      	str	r3, [sp, #8]
 8013c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c36:	9301      	str	r3, [sp, #4]
 8013c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c3a:	9300      	str	r3, [sp, #0]
 8013c3c:	4642      	mov	r2, r8
 8013c3e:	464b      	mov	r3, r9
 8013c40:	4639      	mov	r1, r7
 8013c42:	4620      	mov	r0, r4
 8013c44:	f7ff fdea 	bl	801381c <rcl_wait_set_resize>
 8013c48:	4605      	mov	r5, r0
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	d0af      	beq.n	8013bae <rcl_wait_set_init+0x26>
 8013c4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013c50:	bb2b      	cbnz	r3, 8013c9e <rcl_wait_set_init+0x116>
 8013c52:	2600      	movs	r6, #0
 8013c54:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013c58:	9600      	str	r6, [sp, #0]
 8013c5a:	4633      	mov	r3, r6
 8013c5c:	4632      	mov	r2, r6
 8013c5e:	4631      	mov	r1, r6
 8013c60:	4620      	mov	r0, r4
 8013c62:	f7ff fddb 	bl	801381c <rcl_wait_set_resize>
 8013c66:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	d0a0      	beq.n	8013bae <rcl_wait_set_init+0x26>
 8013c6c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013c6e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013c70:	4798      	blx	r3
 8013c72:	4628      	mov	r0, r5
 8013c74:	6326      	str	r6, [r4, #48]	@ 0x30
 8013c76:	b004      	add	sp, #16
 8013c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c7c:	250b      	movs	r5, #11
 8013c7e:	4628      	mov	r0, r5
 8013c80:	b004      	add	sp, #16
 8013c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c86:	2501      	movs	r5, #1
 8013c88:	f002 f9d6 	bl	8016038 <rmw_destroy_wait_set>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	bf18      	it	ne
 8013c90:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013c94:	e7dd      	b.n	8013c52 <rcl_wait_set_init+0xca>
 8013c96:	2565      	movs	r5, #101	@ 0x65
 8013c98:	e789      	b.n	8013bae <rcl_wait_set_init+0x26>
 8013c9a:	250a      	movs	r5, #10
 8013c9c:	e787      	b.n	8013bae <rcl_wait_set_init+0x26>
 8013c9e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013ca0:	e7f2      	b.n	8013c88 <rcl_wait_set_init+0x100>
 8013ca2:	bf00      	nop

08013ca4 <rcl_wait_set_add_guard_condition>:
 8013ca4:	b318      	cbz	r0, 8013cee <rcl_wait_set_add_guard_condition+0x4a>
 8013ca6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ca8:	b570      	push	{r4, r5, r6, lr}
 8013caa:	4604      	mov	r4, r0
 8013cac:	b30b      	cbz	r3, 8013cf2 <rcl_wait_set_add_guard_condition+0x4e>
 8013cae:	b319      	cbz	r1, 8013cf8 <rcl_wait_set_add_guard_condition+0x54>
 8013cb0:	68dd      	ldr	r5, [r3, #12]
 8013cb2:	68c0      	ldr	r0, [r0, #12]
 8013cb4:	4285      	cmp	r5, r0
 8013cb6:	d217      	bcs.n	8013ce8 <rcl_wait_set_add_guard_condition+0x44>
 8013cb8:	68a0      	ldr	r0, [r4, #8]
 8013cba:	1c6e      	adds	r6, r5, #1
 8013cbc:	60de      	str	r6, [r3, #12]
 8013cbe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013cc2:	b102      	cbz	r2, 8013cc6 <rcl_wait_set_add_guard_condition+0x22>
 8013cc4:	6015      	str	r5, [r2, #0]
 8013cc6:	4608      	mov	r0, r1
 8013cc8:	f003 fb7c 	bl	80173c4 <rcl_guard_condition_get_rmw_handle>
 8013ccc:	b150      	cbz	r0, 8013ce4 <rcl_wait_set_add_guard_condition+0x40>
 8013cce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cd0:	6842      	ldr	r2, [r0, #4]
 8013cd2:	695b      	ldr	r3, [r3, #20]
 8013cd4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013cd8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013cda:	6913      	ldr	r3, [r2, #16]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	2000      	movs	r0, #0
 8013ce0:	6113      	str	r3, [r2, #16]
 8013ce2:	bd70      	pop	{r4, r5, r6, pc}
 8013ce4:	2001      	movs	r0, #1
 8013ce6:	bd70      	pop	{r4, r5, r6, pc}
 8013ce8:	f240 3086 	movw	r0, #902	@ 0x386
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	200b      	movs	r0, #11
 8013cf0:	4770      	bx	lr
 8013cf2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013cf6:	bd70      	pop	{r4, r5, r6, pc}
 8013cf8:	200b      	movs	r0, #11
 8013cfa:	bd70      	pop	{r4, r5, r6, pc}

08013cfc <rcl_wait_set_add_timer>:
 8013cfc:	b328      	cbz	r0, 8013d4a <rcl_wait_set_add_timer+0x4e>
 8013cfe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d00:	b570      	push	{r4, r5, r6, lr}
 8013d02:	4604      	mov	r4, r0
 8013d04:	b31b      	cbz	r3, 8013d4e <rcl_wait_set_add_timer+0x52>
 8013d06:	b329      	cbz	r1, 8013d54 <rcl_wait_set_add_timer+0x58>
 8013d08:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013d0a:	6965      	ldr	r5, [r4, #20]
 8013d0c:	42a8      	cmp	r0, r5
 8013d0e:	d219      	bcs.n	8013d44 <rcl_wait_set_add_timer+0x48>
 8013d10:	6925      	ldr	r5, [r4, #16]
 8013d12:	1c46      	adds	r6, r0, #1
 8013d14:	641e      	str	r6, [r3, #64]	@ 0x40
 8013d16:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013d1a:	b102      	cbz	r2, 8013d1e <rcl_wait_set_add_timer+0x22>
 8013d1c:	6010      	str	r0, [r2, #0]
 8013d1e:	4608      	mov	r0, r1
 8013d20:	f7ff fba6 	bl	8013470 <rcl_timer_get_guard_condition>
 8013d24:	b168      	cbz	r0, 8013d42 <rcl_wait_set_add_timer+0x46>
 8013d26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d28:	68e3      	ldr	r3, [r4, #12]
 8013d2a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013d2c:	3b01      	subs	r3, #1
 8013d2e:	441d      	add	r5, r3
 8013d30:	f003 fb48 	bl	80173c4 <rcl_guard_condition_get_rmw_handle>
 8013d34:	b180      	cbz	r0, 8013d58 <rcl_wait_set_add_timer+0x5c>
 8013d36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d38:	6842      	ldr	r2, [r0, #4]
 8013d3a:	695b      	ldr	r3, [r3, #20]
 8013d3c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d40:	2000      	movs	r0, #0
 8013d42:	bd70      	pop	{r4, r5, r6, pc}
 8013d44:	f240 3086 	movw	r0, #902	@ 0x386
 8013d48:	bd70      	pop	{r4, r5, r6, pc}
 8013d4a:	200b      	movs	r0, #11
 8013d4c:	4770      	bx	lr
 8013d4e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d52:	bd70      	pop	{r4, r5, r6, pc}
 8013d54:	200b      	movs	r0, #11
 8013d56:	bd70      	pop	{r4, r5, r6, pc}
 8013d58:	2001      	movs	r0, #1
 8013d5a:	bd70      	pop	{r4, r5, r6, pc}

08013d5c <rcl_wait_set_add_client>:
 8013d5c:	b318      	cbz	r0, 8013da6 <rcl_wait_set_add_client+0x4a>
 8013d5e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d60:	b570      	push	{r4, r5, r6, lr}
 8013d62:	4604      	mov	r4, r0
 8013d64:	b30b      	cbz	r3, 8013daa <rcl_wait_set_add_client+0x4e>
 8013d66:	b319      	cbz	r1, 8013db0 <rcl_wait_set_add_client+0x54>
 8013d68:	699d      	ldr	r5, [r3, #24]
 8013d6a:	69c0      	ldr	r0, [r0, #28]
 8013d6c:	4285      	cmp	r5, r0
 8013d6e:	d217      	bcs.n	8013da0 <rcl_wait_set_add_client+0x44>
 8013d70:	69a0      	ldr	r0, [r4, #24]
 8013d72:	1c6e      	adds	r6, r5, #1
 8013d74:	619e      	str	r6, [r3, #24]
 8013d76:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013d7a:	b102      	cbz	r2, 8013d7e <rcl_wait_set_add_client+0x22>
 8013d7c:	6015      	str	r5, [r2, #0]
 8013d7e:	4608      	mov	r0, r1
 8013d80:	f7fe f980 	bl	8012084 <rcl_client_get_rmw_handle>
 8013d84:	b150      	cbz	r0, 8013d9c <rcl_wait_set_add_client+0x40>
 8013d86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d88:	6842      	ldr	r2, [r0, #4]
 8013d8a:	6a1b      	ldr	r3, [r3, #32]
 8013d8c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d90:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d92:	69d3      	ldr	r3, [r2, #28]
 8013d94:	3301      	adds	r3, #1
 8013d96:	2000      	movs	r0, #0
 8013d98:	61d3      	str	r3, [r2, #28]
 8013d9a:	bd70      	pop	{r4, r5, r6, pc}
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	bd70      	pop	{r4, r5, r6, pc}
 8013da0:	f240 3086 	movw	r0, #902	@ 0x386
 8013da4:	bd70      	pop	{r4, r5, r6, pc}
 8013da6:	200b      	movs	r0, #11
 8013da8:	4770      	bx	lr
 8013daa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
 8013db0:	200b      	movs	r0, #11
 8013db2:	bd70      	pop	{r4, r5, r6, pc}

08013db4 <rcl_wait_set_add_service>:
 8013db4:	b318      	cbz	r0, 8013dfe <rcl_wait_set_add_service+0x4a>
 8013db6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	4604      	mov	r4, r0
 8013dbc:	b30b      	cbz	r3, 8013e02 <rcl_wait_set_add_service+0x4e>
 8013dbe:	b319      	cbz	r1, 8013e08 <rcl_wait_set_add_service+0x54>
 8013dc0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013dc2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013dc4:	4285      	cmp	r5, r0
 8013dc6:	d217      	bcs.n	8013df8 <rcl_wait_set_add_service+0x44>
 8013dc8:	6a20      	ldr	r0, [r4, #32]
 8013dca:	1c6e      	adds	r6, r5, #1
 8013dcc:	625e      	str	r6, [r3, #36]	@ 0x24
 8013dce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013dd2:	b102      	cbz	r2, 8013dd6 <rcl_wait_set_add_service+0x22>
 8013dd4:	6015      	str	r5, [r2, #0]
 8013dd6:	4608      	mov	r0, r1
 8013dd8:	f7fe fed6 	bl	8012b88 <rcl_service_get_rmw_handle>
 8013ddc:	b150      	cbz	r0, 8013df4 <rcl_wait_set_add_service+0x40>
 8013dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013de0:	6842      	ldr	r2, [r0, #4]
 8013de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013de4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013de8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013dea:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013dec:	3301      	adds	r3, #1
 8013dee:	2000      	movs	r0, #0
 8013df0:	6293      	str	r3, [r2, #40]	@ 0x28
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	2001      	movs	r0, #1
 8013df6:	bd70      	pop	{r4, r5, r6, pc}
 8013df8:	f240 3086 	movw	r0, #902	@ 0x386
 8013dfc:	bd70      	pop	{r4, r5, r6, pc}
 8013dfe:	200b      	movs	r0, #11
 8013e00:	4770      	bx	lr
 8013e02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e06:	bd70      	pop	{r4, r5, r6, pc}
 8013e08:	200b      	movs	r0, #11
 8013e0a:	bd70      	pop	{r4, r5, r6, pc}
 8013e0c:	0000      	movs	r0, r0
	...

08013e10 <rcl_wait>:
 8013e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	ed2d 8b02 	vpush	{d8}
 8013e18:	b08d      	sub	sp, #52	@ 0x34
 8013e1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	f000 8143 	beq.w	80140aa <rcl_wait+0x29a>
 8013e24:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013e26:	4605      	mov	r5, r0
 8013e28:	2e00      	cmp	r6, #0
 8013e2a:	f000 8112 	beq.w	8014052 <rcl_wait+0x242>
 8013e2e:	6843      	ldr	r3, [r0, #4]
 8013e30:	b983      	cbnz	r3, 8013e54 <rcl_wait+0x44>
 8013e32:	68eb      	ldr	r3, [r5, #12]
 8013e34:	b973      	cbnz	r3, 8013e54 <rcl_wait+0x44>
 8013e36:	696b      	ldr	r3, [r5, #20]
 8013e38:	b963      	cbnz	r3, 8013e54 <rcl_wait+0x44>
 8013e3a:	69eb      	ldr	r3, [r5, #28]
 8013e3c:	b953      	cbnz	r3, 8013e54 <rcl_wait+0x44>
 8013e3e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013e40:	b943      	cbnz	r3, 8013e54 <rcl_wait+0x44>
 8013e42:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013e44:	b933      	cbnz	r3, 8013e54 <rcl_wait+0x44>
 8013e46:	f240 3085 	movw	r0, #901	@ 0x385
 8013e4a:	b00d      	add	sp, #52	@ 0x34
 8013e4c:	ecbd 8b02 	vpop	{d8}
 8013e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e54:	9b04      	ldr	r3, [sp, #16]
 8013e56:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013e58:	2b01      	cmp	r3, #1
 8013e5a:	9b05      	ldr	r3, [sp, #20]
 8013e5c:	f173 0300 	sbcs.w	r3, r3, #0
 8013e60:	f2c0 80f0 	blt.w	8014044 <rcl_wait+0x234>
 8013e64:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013e68:	4643      	mov	r3, r8
 8013e6a:	2a00      	cmp	r2, #0
 8013e6c:	f000 8133 	beq.w	80140d6 <rcl_wait+0x2c6>
 8013e70:	2400      	movs	r4, #0
 8013e72:	4613      	mov	r3, r2
 8013e74:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80140e8 <rcl_wait+0x2d8>
 8013e78:	46a2      	mov	sl, r4
 8013e7a:	46a3      	mov	fp, r4
 8013e7c:	f240 3921 	movw	r9, #801	@ 0x321
 8013e80:	4632      	mov	r2, r6
 8013e82:	e014      	b.n	8013eae <rcl_wait+0x9e>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	d1e0      	bne.n	8013e4a <rcl_wait+0x3a>
 8013e88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e8c:	4542      	cmp	r2, r8
 8013e8e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013e92:	da03      	bge.n	8013e9c <rcl_wait+0x8c>
 8013e94:	4690      	mov	r8, r2
 8013e96:	461f      	mov	r7, r3
 8013e98:	f04f 0b01 	mov.w	fp, #1
 8013e9c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013e9e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013ea0:	3401      	adds	r4, #1
 8013ea2:	f14a 0a00 	adc.w	sl, sl, #0
 8013ea6:	429c      	cmp	r4, r3
 8013ea8:	f17a 0100 	sbcs.w	r1, sl, #0
 8013eac:	d228      	bcs.n	8013f00 <rcl_wait+0xf0>
 8013eae:	6928      	ldr	r0, [r5, #16]
 8013eb0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013eb4:	a908      	add	r1, sp, #32
 8013eb6:	00a6      	lsls	r6, r4, #2
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d0f1      	beq.n	8013ea0 <rcl_wait+0x90>
 8013ebc:	68eb      	ldr	r3, [r5, #12]
 8013ebe:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013ec2:	4423      	add	r3, r4
 8013ec4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013ec8:	f1be 0f00 	cmp.w	lr, #0
 8013ecc:	d006      	beq.n	8013edc <rcl_wait+0xcc>
 8013ece:	6913      	ldr	r3, [r2, #16]
 8013ed0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	6113      	str	r3, [r2, #16]
 8013ed8:	692b      	ldr	r3, [r5, #16]
 8013eda:	5998      	ldr	r0, [r3, r6]
 8013edc:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013ee0:	f7ff fa94 	bl	801340c <rcl_timer_get_time_until_next_call>
 8013ee4:	4548      	cmp	r0, r9
 8013ee6:	d1cd      	bne.n	8013e84 <rcl_wait+0x74>
 8013ee8:	692b      	ldr	r3, [r5, #16]
 8013eea:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013eec:	2100      	movs	r1, #0
 8013eee:	5199      	str	r1, [r3, r6]
 8013ef0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013ef2:	3401      	adds	r4, #1
 8013ef4:	f14a 0a00 	adc.w	sl, sl, #0
 8013ef8:	429c      	cmp	r4, r3
 8013efa:	f17a 0100 	sbcs.w	r1, sl, #0
 8013efe:	d3d6      	bcc.n	8013eae <rcl_wait+0x9e>
 8013f00:	4616      	mov	r6, r2
 8013f02:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013f06:	4313      	orrs	r3, r2
 8013f08:	46d9      	mov	r9, fp
 8013f0a:	f040 80a9 	bne.w	8014060 <rcl_wait+0x250>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	2200      	movs	r2, #0
 8013f12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013f16:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013f1a:	ab08      	add	r3, sp, #32
 8013f1c:	9302      	str	r3, [sp, #8]
 8013f1e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013f20:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013f24:	e9cd 3200 	strd	r3, r2, [sp]
 8013f28:	f106 0110 	add.w	r1, r6, #16
 8013f2c:	f106 031c 	add.w	r3, r6, #28
 8013f30:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013f34:	1d30      	adds	r0, r6, #4
 8013f36:	f001 fefd 	bl	8015d34 <rmw_wait>
 8013f3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013f3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f3e:	4680      	mov	r8, r0
 8013f40:	b1ca      	cbz	r2, 8013f76 <rcl_wait+0x166>
 8013f42:	2400      	movs	r4, #0
 8013f44:	4627      	mov	r7, r4
 8013f46:	692a      	ldr	r2, [r5, #16]
 8013f48:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013f4c:	f10d 011f 	add.w	r1, sp, #31
 8013f50:	00a6      	lsls	r6, r4, #2
 8013f52:	b160      	cbz	r0, 8013f6e <rcl_wait+0x15e>
 8013f54:	f88d 701f 	strb.w	r7, [sp, #31]
 8013f58:	f7ff fa1e 	bl	8013398 <rcl_timer_is_ready>
 8013f5c:	2800      	cmp	r0, #0
 8013f5e:	f47f af74 	bne.w	8013e4a <rcl_wait+0x3a>
 8013f62:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013f66:	b90b      	cbnz	r3, 8013f6c <rcl_wait+0x15c>
 8013f68:	692a      	ldr	r2, [r5, #16]
 8013f6a:	5193      	str	r3, [r2, r6]
 8013f6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f70:	3401      	adds	r4, #1
 8013f72:	42a2      	cmp	r2, r4
 8013f74:	d8e7      	bhi.n	8013f46 <rcl_wait+0x136>
 8013f76:	f038 0002 	bics.w	r0, r8, #2
 8013f7a:	f040 8090 	bne.w	801409e <rcl_wait+0x28e>
 8013f7e:	686e      	ldr	r6, [r5, #4]
 8013f80:	4602      	mov	r2, r0
 8013f82:	b91e      	cbnz	r6, 8013f8c <rcl_wait+0x17c>
 8013f84:	e00d      	b.n	8013fa2 <rcl_wait+0x192>
 8013f86:	3201      	adds	r2, #1
 8013f88:	42b2      	cmp	r2, r6
 8013f8a:	d00a      	beq.n	8013fa2 <rcl_wait+0x192>
 8013f8c:	6899      	ldr	r1, [r3, #8]
 8013f8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013f92:	2900      	cmp	r1, #0
 8013f94:	d1f7      	bne.n	8013f86 <rcl_wait+0x176>
 8013f96:	682c      	ldr	r4, [r5, #0]
 8013f98:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013f9c:	3201      	adds	r2, #1
 8013f9e:	42b2      	cmp	r2, r6
 8013fa0:	d1f4      	bne.n	8013f8c <rcl_wait+0x17c>
 8013fa2:	68ee      	ldr	r6, [r5, #12]
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	b91e      	cbnz	r6, 8013fb0 <rcl_wait+0x1a0>
 8013fa8:	e00d      	b.n	8013fc6 <rcl_wait+0x1b6>
 8013faa:	3201      	adds	r2, #1
 8013fac:	42b2      	cmp	r2, r6
 8013fae:	d00a      	beq.n	8013fc6 <rcl_wait+0x1b6>
 8013fb0:	6959      	ldr	r1, [r3, #20]
 8013fb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fb6:	2900      	cmp	r1, #0
 8013fb8:	d1f7      	bne.n	8013faa <rcl_wait+0x19a>
 8013fba:	68ac      	ldr	r4, [r5, #8]
 8013fbc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013fc0:	3201      	adds	r2, #1
 8013fc2:	42b2      	cmp	r2, r6
 8013fc4:	d1f4      	bne.n	8013fb0 <rcl_wait+0x1a0>
 8013fc6:	69ee      	ldr	r6, [r5, #28]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	b91e      	cbnz	r6, 8013fd4 <rcl_wait+0x1c4>
 8013fcc:	e00d      	b.n	8013fea <rcl_wait+0x1da>
 8013fce:	3201      	adds	r2, #1
 8013fd0:	42b2      	cmp	r2, r6
 8013fd2:	d00a      	beq.n	8013fea <rcl_wait+0x1da>
 8013fd4:	6a19      	ldr	r1, [r3, #32]
 8013fd6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fda:	2900      	cmp	r1, #0
 8013fdc:	d1f7      	bne.n	8013fce <rcl_wait+0x1be>
 8013fde:	69ac      	ldr	r4, [r5, #24]
 8013fe0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013fe4:	3201      	adds	r2, #1
 8013fe6:	42b2      	cmp	r2, r6
 8013fe8:	d1f4      	bne.n	8013fd4 <rcl_wait+0x1c4>
 8013fea:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013fec:	2200      	movs	r2, #0
 8013fee:	b91e      	cbnz	r6, 8013ff8 <rcl_wait+0x1e8>
 8013ff0:	e00d      	b.n	801400e <rcl_wait+0x1fe>
 8013ff2:	3201      	adds	r2, #1
 8013ff4:	4296      	cmp	r6, r2
 8013ff6:	d00a      	beq.n	801400e <rcl_wait+0x1fe>
 8013ff8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013ffa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013ffe:	2900      	cmp	r1, #0
 8014000:	d1f7      	bne.n	8013ff2 <rcl_wait+0x1e2>
 8014002:	6a2c      	ldr	r4, [r5, #32]
 8014004:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014008:	3201      	adds	r2, #1
 801400a:	4296      	cmp	r6, r2
 801400c:	d1f4      	bne.n	8013ff8 <rcl_wait+0x1e8>
 801400e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8014010:	2200      	movs	r2, #0
 8014012:	b91e      	cbnz	r6, 801401c <rcl_wait+0x20c>
 8014014:	e00d      	b.n	8014032 <rcl_wait+0x222>
 8014016:	3201      	adds	r2, #1
 8014018:	42b2      	cmp	r2, r6
 801401a:	d00a      	beq.n	8014032 <rcl_wait+0x222>
 801401c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801401e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014022:	2900      	cmp	r1, #0
 8014024:	d1f7      	bne.n	8014016 <rcl_wait+0x206>
 8014026:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8014028:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801402c:	3201      	adds	r2, #1
 801402e:	42b2      	cmp	r2, r6
 8014030:	d1f4      	bne.n	801401c <rcl_wait+0x20c>
 8014032:	f1b8 0f02 	cmp.w	r8, #2
 8014036:	f47f af08 	bne.w	8013e4a <rcl_wait+0x3a>
 801403a:	464b      	mov	r3, r9
 801403c:	2b00      	cmp	r3, #0
 801403e:	bf08      	it	eq
 8014040:	2002      	moveq	r0, #2
 8014042:	e702      	b.n	8013e4a <rcl_wait+0x3a>
 8014044:	2a00      	cmp	r2, #0
 8014046:	d03a      	beq.n	80140be <rcl_wait+0x2ae>
 8014048:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801404c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014050:	e70e      	b.n	8013e70 <rcl_wait+0x60>
 8014052:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014056:	b00d      	add	sp, #52	@ 0x34
 8014058:	ecbd 8b02 	vpop	{d8}
 801405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014060:	9b04      	ldr	r3, [sp, #16]
 8014062:	2b01      	cmp	r3, #1
 8014064:	9b05      	ldr	r3, [sp, #20]
 8014066:	f173 0300 	sbcs.w	r3, r3, #0
 801406a:	db24      	blt.n	80140b6 <rcl_wait+0x2a6>
 801406c:	2f00      	cmp	r7, #0
 801406e:	bfbc      	itt	lt
 8014070:	f04f 0800 	movlt.w	r8, #0
 8014074:	4647      	movlt	r7, r8
 8014076:	a31e      	add	r3, pc, #120	@ (adr r3, 80140f0 <rcl_wait+0x2e0>)
 8014078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407c:	4640      	mov	r0, r8
 801407e:	4639      	mov	r1, r7
 8014080:	f7ec fb42 	bl	8000708 <__aeabi_ldivmod>
 8014084:	a31a      	add	r3, pc, #104	@ (adr r3, 80140f0 <rcl_wait+0x2e0>)
 8014086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801408e:	4640      	mov	r0, r8
 8014090:	4639      	mov	r1, r7
 8014092:	f7ec fb39 	bl	8000708 <__aeabi_ldivmod>
 8014096:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801409a:	ab08      	add	r3, sp, #32
 801409c:	e73e      	b.n	8013f1c <rcl_wait+0x10c>
 801409e:	2001      	movs	r0, #1
 80140a0:	b00d      	add	sp, #52	@ 0x34
 80140a2:	ecbd 8b02 	vpop	{d8}
 80140a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140aa:	200b      	movs	r0, #11
 80140ac:	b00d      	add	sp, #52	@ 0x34
 80140ae:	ecbd 8b02 	vpop	{d8}
 80140b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b6:	465b      	mov	r3, fp
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d1d7      	bne.n	801406c <rcl_wait+0x25c>
 80140bc:	e72e      	b.n	8013f1c <rcl_wait+0x10c>
 80140be:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80140c2:	430b      	orrs	r3, r1
 80140c4:	bf08      	it	eq
 80140c6:	4691      	moveq	r9, r2
 80140c8:	f43f af21 	beq.w	8013f0e <rcl_wait+0xfe>
 80140cc:	9b04      	ldr	r3, [sp, #16]
 80140ce:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80140d2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80140d6:	2b01      	cmp	r3, #1
 80140d8:	9b05      	ldr	r3, [sp, #20]
 80140da:	f173 0300 	sbcs.w	r3, r3, #0
 80140de:	f04f 0300 	mov.w	r3, #0
 80140e2:	4699      	mov	r9, r3
 80140e4:	dac2      	bge.n	801406c <rcl_wait+0x25c>
 80140e6:	e719      	b.n	8013f1c <rcl_wait+0x10c>
 80140e8:	ffffffff 	.word	0xffffffff
 80140ec:	7fffffff 	.word	0x7fffffff
 80140f0:	3b9aca00 	.word	0x3b9aca00
 80140f4:	00000000 	.word	0x00000000

080140f8 <rcl_action_take_goal_response>:
 80140f8:	2800      	cmp	r0, #0
 80140fa:	d039      	beq.n	8014170 <rcl_action_take_goal_response+0x78>
 80140fc:	b570      	push	{r4, r5, r6, lr}
 80140fe:	4604      	mov	r4, r0
 8014100:	6800      	ldr	r0, [r0, #0]
 8014102:	b380      	cbz	r0, 8014166 <rcl_action_take_goal_response+0x6e>
 8014104:	460d      	mov	r5, r1
 8014106:	4616      	mov	r6, r2
 8014108:	f7fe f842 	bl	8012190 <rcl_client_is_valid>
 801410c:	b330      	cbz	r0, 801415c <rcl_action_take_goal_response+0x64>
 801410e:	6820      	ldr	r0, [r4, #0]
 8014110:	3004      	adds	r0, #4
 8014112:	f7fe f83d 	bl	8012190 <rcl_client_is_valid>
 8014116:	b308      	cbz	r0, 801415c <rcl_action_take_goal_response+0x64>
 8014118:	6820      	ldr	r0, [r4, #0]
 801411a:	3008      	adds	r0, #8
 801411c:	f7fe f838 	bl	8012190 <rcl_client_is_valid>
 8014120:	b1e0      	cbz	r0, 801415c <rcl_action_take_goal_response+0x64>
 8014122:	6820      	ldr	r0, [r4, #0]
 8014124:	300c      	adds	r0, #12
 8014126:	f7fe fdf5 	bl	8012d14 <rcl_subscription_is_valid>
 801412a:	b1b8      	cbz	r0, 801415c <rcl_action_take_goal_response+0x64>
 801412c:	6820      	ldr	r0, [r4, #0]
 801412e:	3010      	adds	r0, #16
 8014130:	f7fe fdf0 	bl	8012d14 <rcl_subscription_is_valid>
 8014134:	b190      	cbz	r0, 801415c <rcl_action_take_goal_response+0x64>
 8014136:	b1cd      	cbz	r5, 801416c <rcl_action_take_goal_response+0x74>
 8014138:	b1c6      	cbz	r6, 801416c <rcl_action_take_goal_response+0x74>
 801413a:	6820      	ldr	r0, [r4, #0]
 801413c:	4632      	mov	r2, r6
 801413e:	4629      	mov	r1, r5
 8014140:	f7fd ffde 	bl	8012100 <rcl_take_response>
 8014144:	b148      	cbz	r0, 801415a <rcl_action_take_goal_response+0x62>
 8014146:	280a      	cmp	r0, #10
 8014148:	d007      	beq.n	801415a <rcl_action_take_goal_response+0x62>
 801414a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801414e:	f640 0337 	movw	r3, #2103	@ 0x837
 8014152:	4290      	cmp	r0, r2
 8014154:	bf0c      	ite	eq
 8014156:	4618      	moveq	r0, r3
 8014158:	2001      	movne	r0, #1
 801415a:	bd70      	pop	{r4, r5, r6, pc}
 801415c:	f7f9 fa14 	bl	800d588 <rcutils_reset_error>
 8014160:	f640 0036 	movw	r0, #2102	@ 0x836
 8014164:	bd70      	pop	{r4, r5, r6, pc}
 8014166:	f640 0036 	movw	r0, #2102	@ 0x836
 801416a:	bd70      	pop	{r4, r5, r6, pc}
 801416c:	200b      	movs	r0, #11
 801416e:	bd70      	pop	{r4, r5, r6, pc}
 8014170:	f640 0036 	movw	r0, #2102	@ 0x836
 8014174:	4770      	bx	lr
 8014176:	bf00      	nop

08014178 <rcl_action_send_result_request>:
 8014178:	b390      	cbz	r0, 80141e0 <rcl_action_send_result_request+0x68>
 801417a:	b570      	push	{r4, r5, r6, lr}
 801417c:	4604      	mov	r4, r0
 801417e:	6800      	ldr	r0, [r0, #0]
 8014180:	b348      	cbz	r0, 80141d6 <rcl_action_send_result_request+0x5e>
 8014182:	460d      	mov	r5, r1
 8014184:	4616      	mov	r6, r2
 8014186:	f7fe f803 	bl	8012190 <rcl_client_is_valid>
 801418a:	b1f8      	cbz	r0, 80141cc <rcl_action_send_result_request+0x54>
 801418c:	6820      	ldr	r0, [r4, #0]
 801418e:	3004      	adds	r0, #4
 8014190:	f7fd fffe 	bl	8012190 <rcl_client_is_valid>
 8014194:	b1d0      	cbz	r0, 80141cc <rcl_action_send_result_request+0x54>
 8014196:	6820      	ldr	r0, [r4, #0]
 8014198:	3008      	adds	r0, #8
 801419a:	f7fd fff9 	bl	8012190 <rcl_client_is_valid>
 801419e:	b1a8      	cbz	r0, 80141cc <rcl_action_send_result_request+0x54>
 80141a0:	6820      	ldr	r0, [r4, #0]
 80141a2:	300c      	adds	r0, #12
 80141a4:	f7fe fdb6 	bl	8012d14 <rcl_subscription_is_valid>
 80141a8:	b180      	cbz	r0, 80141cc <rcl_action_send_result_request+0x54>
 80141aa:	6820      	ldr	r0, [r4, #0]
 80141ac:	3010      	adds	r0, #16
 80141ae:	f7fe fdb1 	bl	8012d14 <rcl_subscription_is_valid>
 80141b2:	b158      	cbz	r0, 80141cc <rcl_action_send_result_request+0x54>
 80141b4:	b195      	cbz	r5, 80141dc <rcl_action_send_result_request+0x64>
 80141b6:	b18e      	cbz	r6, 80141dc <rcl_action_send_result_request+0x64>
 80141b8:	6820      	ldr	r0, [r4, #0]
 80141ba:	4632      	mov	r2, r6
 80141bc:	4629      	mov	r1, r5
 80141be:	3008      	adds	r0, #8
 80141c0:	f7fd ff66 	bl	8012090 <rcl_send_request>
 80141c4:	3800      	subs	r0, #0
 80141c6:	bf18      	it	ne
 80141c8:	2001      	movne	r0, #1
 80141ca:	bd70      	pop	{r4, r5, r6, pc}
 80141cc:	f7f9 f9dc 	bl	800d588 <rcutils_reset_error>
 80141d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141d4:	bd70      	pop	{r4, r5, r6, pc}
 80141d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80141da:	bd70      	pop	{r4, r5, r6, pc}
 80141dc:	200b      	movs	r0, #11
 80141de:	bd70      	pop	{r4, r5, r6, pc}
 80141e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop

080141e8 <rcl_action_take_result_response>:
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d03a      	beq.n	8014262 <rcl_action_take_result_response+0x7a>
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	4604      	mov	r4, r0
 80141f0:	6800      	ldr	r0, [r0, #0]
 80141f2:	b388      	cbz	r0, 8014258 <rcl_action_take_result_response+0x70>
 80141f4:	460d      	mov	r5, r1
 80141f6:	4616      	mov	r6, r2
 80141f8:	f7fd ffca 	bl	8012190 <rcl_client_is_valid>
 80141fc:	b338      	cbz	r0, 801424e <rcl_action_take_result_response+0x66>
 80141fe:	6820      	ldr	r0, [r4, #0]
 8014200:	3004      	adds	r0, #4
 8014202:	f7fd ffc5 	bl	8012190 <rcl_client_is_valid>
 8014206:	b310      	cbz	r0, 801424e <rcl_action_take_result_response+0x66>
 8014208:	6820      	ldr	r0, [r4, #0]
 801420a:	3008      	adds	r0, #8
 801420c:	f7fd ffc0 	bl	8012190 <rcl_client_is_valid>
 8014210:	b1e8      	cbz	r0, 801424e <rcl_action_take_result_response+0x66>
 8014212:	6820      	ldr	r0, [r4, #0]
 8014214:	300c      	adds	r0, #12
 8014216:	f7fe fd7d 	bl	8012d14 <rcl_subscription_is_valid>
 801421a:	b1c0      	cbz	r0, 801424e <rcl_action_take_result_response+0x66>
 801421c:	6820      	ldr	r0, [r4, #0]
 801421e:	3010      	adds	r0, #16
 8014220:	f7fe fd78 	bl	8012d14 <rcl_subscription_is_valid>
 8014224:	b198      	cbz	r0, 801424e <rcl_action_take_result_response+0x66>
 8014226:	b1d5      	cbz	r5, 801425e <rcl_action_take_result_response+0x76>
 8014228:	b1ce      	cbz	r6, 801425e <rcl_action_take_result_response+0x76>
 801422a:	6820      	ldr	r0, [r4, #0]
 801422c:	4632      	mov	r2, r6
 801422e:	4629      	mov	r1, r5
 8014230:	3008      	adds	r0, #8
 8014232:	f7fd ff65 	bl	8012100 <rcl_take_response>
 8014236:	b148      	cbz	r0, 801424c <rcl_action_take_result_response+0x64>
 8014238:	280a      	cmp	r0, #10
 801423a:	d007      	beq.n	801424c <rcl_action_take_result_response+0x64>
 801423c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014240:	f640 0337 	movw	r3, #2103	@ 0x837
 8014244:	4290      	cmp	r0, r2
 8014246:	bf0c      	ite	eq
 8014248:	4618      	moveq	r0, r3
 801424a:	2001      	movne	r0, #1
 801424c:	bd70      	pop	{r4, r5, r6, pc}
 801424e:	f7f9 f99b 	bl	800d588 <rcutils_reset_error>
 8014252:	f640 0036 	movw	r0, #2102	@ 0x836
 8014256:	bd70      	pop	{r4, r5, r6, pc}
 8014258:	f640 0036 	movw	r0, #2102	@ 0x836
 801425c:	bd70      	pop	{r4, r5, r6, pc}
 801425e:	200b      	movs	r0, #11
 8014260:	bd70      	pop	{r4, r5, r6, pc}
 8014262:	f640 0036 	movw	r0, #2102	@ 0x836
 8014266:	4770      	bx	lr

08014268 <rcl_action_take_cancel_response>:
 8014268:	2800      	cmp	r0, #0
 801426a:	d03a      	beq.n	80142e2 <rcl_action_take_cancel_response+0x7a>
 801426c:	b570      	push	{r4, r5, r6, lr}
 801426e:	4604      	mov	r4, r0
 8014270:	6800      	ldr	r0, [r0, #0]
 8014272:	b388      	cbz	r0, 80142d8 <rcl_action_take_cancel_response+0x70>
 8014274:	460d      	mov	r5, r1
 8014276:	4616      	mov	r6, r2
 8014278:	f7fd ff8a 	bl	8012190 <rcl_client_is_valid>
 801427c:	b338      	cbz	r0, 80142ce <rcl_action_take_cancel_response+0x66>
 801427e:	6820      	ldr	r0, [r4, #0]
 8014280:	3004      	adds	r0, #4
 8014282:	f7fd ff85 	bl	8012190 <rcl_client_is_valid>
 8014286:	b310      	cbz	r0, 80142ce <rcl_action_take_cancel_response+0x66>
 8014288:	6820      	ldr	r0, [r4, #0]
 801428a:	3008      	adds	r0, #8
 801428c:	f7fd ff80 	bl	8012190 <rcl_client_is_valid>
 8014290:	b1e8      	cbz	r0, 80142ce <rcl_action_take_cancel_response+0x66>
 8014292:	6820      	ldr	r0, [r4, #0]
 8014294:	300c      	adds	r0, #12
 8014296:	f7fe fd3d 	bl	8012d14 <rcl_subscription_is_valid>
 801429a:	b1c0      	cbz	r0, 80142ce <rcl_action_take_cancel_response+0x66>
 801429c:	6820      	ldr	r0, [r4, #0]
 801429e:	3010      	adds	r0, #16
 80142a0:	f7fe fd38 	bl	8012d14 <rcl_subscription_is_valid>
 80142a4:	b198      	cbz	r0, 80142ce <rcl_action_take_cancel_response+0x66>
 80142a6:	b1d5      	cbz	r5, 80142de <rcl_action_take_cancel_response+0x76>
 80142a8:	b1ce      	cbz	r6, 80142de <rcl_action_take_cancel_response+0x76>
 80142aa:	6820      	ldr	r0, [r4, #0]
 80142ac:	4632      	mov	r2, r6
 80142ae:	4629      	mov	r1, r5
 80142b0:	3004      	adds	r0, #4
 80142b2:	f7fd ff25 	bl	8012100 <rcl_take_response>
 80142b6:	b148      	cbz	r0, 80142cc <rcl_action_take_cancel_response+0x64>
 80142b8:	280a      	cmp	r0, #10
 80142ba:	d007      	beq.n	80142cc <rcl_action_take_cancel_response+0x64>
 80142bc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80142c0:	f640 0337 	movw	r3, #2103	@ 0x837
 80142c4:	4290      	cmp	r0, r2
 80142c6:	bf0c      	ite	eq
 80142c8:	4618      	moveq	r0, r3
 80142ca:	2001      	movne	r0, #1
 80142cc:	bd70      	pop	{r4, r5, r6, pc}
 80142ce:	f7f9 f95b 	bl	800d588 <rcutils_reset_error>
 80142d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80142d6:	bd70      	pop	{r4, r5, r6, pc}
 80142d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80142dc:	bd70      	pop	{r4, r5, r6, pc}
 80142de:	200b      	movs	r0, #11
 80142e0:	bd70      	pop	{r4, r5, r6, pc}
 80142e2:	f640 0036 	movw	r0, #2102	@ 0x836
 80142e6:	4770      	bx	lr

080142e8 <rcl_action_take_feedback>:
 80142e8:	2800      	cmp	r0, #0
 80142ea:	d038      	beq.n	801435e <rcl_action_take_feedback+0x76>
 80142ec:	b530      	push	{r4, r5, lr}
 80142ee:	4604      	mov	r4, r0
 80142f0:	6800      	ldr	r0, [r0, #0]
 80142f2:	b091      	sub	sp, #68	@ 0x44
 80142f4:	b378      	cbz	r0, 8014356 <rcl_action_take_feedback+0x6e>
 80142f6:	460d      	mov	r5, r1
 80142f8:	f7fd ff4a 	bl	8012190 <rcl_client_is_valid>
 80142fc:	b328      	cbz	r0, 801434a <rcl_action_take_feedback+0x62>
 80142fe:	6820      	ldr	r0, [r4, #0]
 8014300:	3004      	adds	r0, #4
 8014302:	f7fd ff45 	bl	8012190 <rcl_client_is_valid>
 8014306:	b300      	cbz	r0, 801434a <rcl_action_take_feedback+0x62>
 8014308:	6820      	ldr	r0, [r4, #0]
 801430a:	3008      	adds	r0, #8
 801430c:	f7fd ff40 	bl	8012190 <rcl_client_is_valid>
 8014310:	b1d8      	cbz	r0, 801434a <rcl_action_take_feedback+0x62>
 8014312:	6820      	ldr	r0, [r4, #0]
 8014314:	300c      	adds	r0, #12
 8014316:	f7fe fcfd 	bl	8012d14 <rcl_subscription_is_valid>
 801431a:	b1b0      	cbz	r0, 801434a <rcl_action_take_feedback+0x62>
 801431c:	6820      	ldr	r0, [r4, #0]
 801431e:	3010      	adds	r0, #16
 8014320:	f7fe fcf8 	bl	8012d14 <rcl_subscription_is_valid>
 8014324:	b188      	cbz	r0, 801434a <rcl_action_take_feedback+0x62>
 8014326:	b1ed      	cbz	r5, 8014364 <rcl_action_take_feedback+0x7c>
 8014328:	6820      	ldr	r0, [r4, #0]
 801432a:	2300      	movs	r3, #0
 801432c:	466a      	mov	r2, sp
 801432e:	4629      	mov	r1, r5
 8014330:	300c      	adds	r0, #12
 8014332:	f7fe fc91 	bl	8012c58 <rcl_take>
 8014336:	b160      	cbz	r0, 8014352 <rcl_action_take_feedback+0x6a>
 8014338:	f240 1391 	movw	r3, #401	@ 0x191
 801433c:	4298      	cmp	r0, r3
 801433e:	d014      	beq.n	801436a <rcl_action_take_feedback+0x82>
 8014340:	280a      	cmp	r0, #10
 8014342:	bf18      	it	ne
 8014344:	2001      	movne	r0, #1
 8014346:	b011      	add	sp, #68	@ 0x44
 8014348:	bd30      	pop	{r4, r5, pc}
 801434a:	f7f9 f91d 	bl	800d588 <rcutils_reset_error>
 801434e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014352:	b011      	add	sp, #68	@ 0x44
 8014354:	bd30      	pop	{r4, r5, pc}
 8014356:	f640 0036 	movw	r0, #2102	@ 0x836
 801435a:	b011      	add	sp, #68	@ 0x44
 801435c:	bd30      	pop	{r4, r5, pc}
 801435e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014362:	4770      	bx	lr
 8014364:	200b      	movs	r0, #11
 8014366:	b011      	add	sp, #68	@ 0x44
 8014368:	bd30      	pop	{r4, r5, pc}
 801436a:	f640 0037 	movw	r0, #2103	@ 0x837
 801436e:	e7f0      	b.n	8014352 <rcl_action_take_feedback+0x6a>

08014370 <rcl_action_wait_set_add_action_client>:
 8014370:	2800      	cmp	r0, #0
 8014372:	d048      	beq.n	8014406 <rcl_action_wait_set_add_action_client+0x96>
 8014374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014376:	460c      	mov	r4, r1
 8014378:	2900      	cmp	r1, #0
 801437a:	d03c      	beq.n	80143f6 <rcl_action_wait_set_add_action_client+0x86>
 801437c:	4605      	mov	r5, r0
 801437e:	6808      	ldr	r0, [r1, #0]
 8014380:	2800      	cmp	r0, #0
 8014382:	d038      	beq.n	80143f6 <rcl_action_wait_set_add_action_client+0x86>
 8014384:	4617      	mov	r7, r2
 8014386:	461e      	mov	r6, r3
 8014388:	f7fd ff02 	bl	8012190 <rcl_client_is_valid>
 801438c:	b3b0      	cbz	r0, 80143fc <rcl_action_wait_set_add_action_client+0x8c>
 801438e:	6820      	ldr	r0, [r4, #0]
 8014390:	3004      	adds	r0, #4
 8014392:	f7fd fefd 	bl	8012190 <rcl_client_is_valid>
 8014396:	b388      	cbz	r0, 80143fc <rcl_action_wait_set_add_action_client+0x8c>
 8014398:	6820      	ldr	r0, [r4, #0]
 801439a:	3008      	adds	r0, #8
 801439c:	f7fd fef8 	bl	8012190 <rcl_client_is_valid>
 80143a0:	b360      	cbz	r0, 80143fc <rcl_action_wait_set_add_action_client+0x8c>
 80143a2:	6820      	ldr	r0, [r4, #0]
 80143a4:	300c      	adds	r0, #12
 80143a6:	f7fe fcb5 	bl	8012d14 <rcl_subscription_is_valid>
 80143aa:	b338      	cbz	r0, 80143fc <rcl_action_wait_set_add_action_client+0x8c>
 80143ac:	6820      	ldr	r0, [r4, #0]
 80143ae:	3010      	adds	r0, #16
 80143b0:	f7fe fcb0 	bl	8012d14 <rcl_subscription_is_valid>
 80143b4:	b310      	cbz	r0, 80143fc <rcl_action_wait_set_add_action_client+0x8c>
 80143b6:	6821      	ldr	r1, [r4, #0]
 80143b8:	4628      	mov	r0, r5
 80143ba:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80143be:	f7ff fccd 	bl	8013d5c <rcl_wait_set_add_client>
 80143c2:	b9b8      	cbnz	r0, 80143f4 <rcl_action_wait_set_add_action_client+0x84>
 80143c4:	6821      	ldr	r1, [r4, #0]
 80143c6:	4628      	mov	r0, r5
 80143c8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80143cc:	3104      	adds	r1, #4
 80143ce:	f7ff fcc5 	bl	8013d5c <rcl_wait_set_add_client>
 80143d2:	b978      	cbnz	r0, 80143f4 <rcl_action_wait_set_add_action_client+0x84>
 80143d4:	6821      	ldr	r1, [r4, #0]
 80143d6:	4628      	mov	r0, r5
 80143d8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80143dc:	3108      	adds	r1, #8
 80143de:	f7ff fcbd 	bl	8013d5c <rcl_wait_set_add_client>
 80143e2:	b938      	cbnz	r0, 80143f4 <rcl_action_wait_set_add_action_client+0x84>
 80143e4:	6821      	ldr	r1, [r4, #0]
 80143e6:	4628      	mov	r0, r5
 80143e8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80143ec:	310c      	adds	r1, #12
 80143ee:	f7ff f96d 	bl	80136cc <rcl_wait_set_add_subscription>
 80143f2:	b158      	cbz	r0, 801440c <rcl_action_wait_set_add_action_client+0x9c>
 80143f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80143fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143fc:	f7f9 f8c4 	bl	800d588 <rcutils_reset_error>
 8014400:	f640 0036 	movw	r0, #2102	@ 0x836
 8014404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014406:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801440a:	4770      	bx	lr
 801440c:	6821      	ldr	r1, [r4, #0]
 801440e:	4628      	mov	r0, r5
 8014410:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8014414:	3110      	adds	r1, #16
 8014416:	f7ff f959 	bl	80136cc <rcl_wait_set_add_subscription>
 801441a:	2800      	cmp	r0, #0
 801441c:	d1ea      	bne.n	80143f4 <rcl_action_wait_set_add_action_client+0x84>
 801441e:	b11f      	cbz	r7, 8014428 <rcl_action_wait_set_add_action_client+0xb8>
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014426:	603b      	str	r3, [r7, #0]
 8014428:	2e00      	cmp	r6, #0
 801442a:	d0e3      	beq.n	80143f4 <rcl_action_wait_set_add_action_client+0x84>
 801442c:	6823      	ldr	r3, [r4, #0]
 801442e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014432:	6033      	str	r3, [r6, #0]
 8014434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014436:	bf00      	nop

08014438 <rcl_action_client_wait_set_get_entities_ready>:
 8014438:	2800      	cmp	r0, #0
 801443a:	f000 808d 	beq.w	8014558 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801443e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014442:	460c      	mov	r4, r1
 8014444:	2900      	cmp	r1, #0
 8014446:	d077      	beq.n	8014538 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014448:	4605      	mov	r5, r0
 801444a:	6808      	ldr	r0, [r1, #0]
 801444c:	2800      	cmp	r0, #0
 801444e:	d073      	beq.n	8014538 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014450:	4616      	mov	r6, r2
 8014452:	461f      	mov	r7, r3
 8014454:	f7fd fe9c 	bl	8012190 <rcl_client_is_valid>
 8014458:	2800      	cmp	r0, #0
 801445a:	d071      	beq.n	8014540 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801445c:	6820      	ldr	r0, [r4, #0]
 801445e:	3004      	adds	r0, #4
 8014460:	f7fd fe96 	bl	8012190 <rcl_client_is_valid>
 8014464:	2800      	cmp	r0, #0
 8014466:	d06b      	beq.n	8014540 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014468:	6820      	ldr	r0, [r4, #0]
 801446a:	3008      	adds	r0, #8
 801446c:	f7fd fe90 	bl	8012190 <rcl_client_is_valid>
 8014470:	2800      	cmp	r0, #0
 8014472:	d065      	beq.n	8014540 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014474:	6820      	ldr	r0, [r4, #0]
 8014476:	300c      	adds	r0, #12
 8014478:	f7fe fc4c 	bl	8012d14 <rcl_subscription_is_valid>
 801447c:	2800      	cmp	r0, #0
 801447e:	d05f      	beq.n	8014540 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014480:	6820      	ldr	r0, [r4, #0]
 8014482:	3010      	adds	r0, #16
 8014484:	f7fe fc46 	bl	8012d14 <rcl_subscription_is_valid>
 8014488:	2800      	cmp	r0, #0
 801448a:	d059      	beq.n	8014540 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801448c:	2e00      	cmp	r6, #0
 801448e:	d060      	beq.n	8014552 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014490:	2f00      	cmp	r7, #0
 8014492:	d05e      	beq.n	8014552 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014494:	9b06      	ldr	r3, [sp, #24]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d05b      	beq.n	8014552 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801449a:	9b07      	ldr	r3, [sp, #28]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d058      	beq.n	8014552 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80144a0:	9b08      	ldr	r3, [sp, #32]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d055      	beq.n	8014552 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80144a6:	6823      	ldr	r3, [r4, #0]
 80144a8:	686a      	ldr	r2, [r5, #4]
 80144aa:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80144ae:	428a      	cmp	r2, r1
 80144b0:	d94c      	bls.n	801454c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80144b2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80144b6:	4282      	cmp	r2, r0
 80144b8:	d948      	bls.n	801454c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80144ba:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80144be:	69ea      	ldr	r2, [r5, #28]
 80144c0:	42a2      	cmp	r2, r4
 80144c2:	d943      	bls.n	801454c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80144c4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80144c8:	4562      	cmp	r2, ip
 80144ca:	d93f      	bls.n	801454c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80144cc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80144d0:	4572      	cmp	r2, lr
 80144d2:	d93b      	bls.n	801454c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80144d4:	69aa      	ldr	r2, [r5, #24]
 80144d6:	682d      	ldr	r5, [r5, #0]
 80144d8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80144dc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80144e0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80144e4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80144e8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80144ec:	f103 0c0c 	add.w	ip, r3, #12
 80144f0:	eba5 050c 	sub.w	r5, r5, ip
 80144f4:	fab5 f585 	clz	r5, r5
 80144f8:	096d      	lsrs	r5, r5, #5
 80144fa:	7035      	strb	r5, [r6, #0]
 80144fc:	f103 0510 	add.w	r5, r3, #16
 8014500:	1b64      	subs	r4, r4, r5
 8014502:	fab4 f484 	clz	r4, r4
 8014506:	0964      	lsrs	r4, r4, #5
 8014508:	703c      	strb	r4, [r7, #0]
 801450a:	eba3 0008 	sub.w	r0, r3, r8
 801450e:	1d1c      	adds	r4, r3, #4
 8014510:	3308      	adds	r3, #8
 8014512:	1ad3      	subs	r3, r2, r3
 8014514:	fab0 f080 	clz	r0, r0
 8014518:	9a06      	ldr	r2, [sp, #24]
 801451a:	0940      	lsrs	r0, r0, #5
 801451c:	1b09      	subs	r1, r1, r4
 801451e:	7010      	strb	r0, [r2, #0]
 8014520:	fab1 f181 	clz	r1, r1
 8014524:	9a07      	ldr	r2, [sp, #28]
 8014526:	0949      	lsrs	r1, r1, #5
 8014528:	7011      	strb	r1, [r2, #0]
 801452a:	fab3 f383 	clz	r3, r3
 801452e:	9a08      	ldr	r2, [sp, #32]
 8014530:	095b      	lsrs	r3, r3, #5
 8014532:	2000      	movs	r0, #0
 8014534:	7013      	strb	r3, [r2, #0]
 8014536:	e001      	b.n	801453c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014538:	f640 0036 	movw	r0, #2102	@ 0x836
 801453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014540:	f7f9 f822 	bl	800d588 <rcutils_reset_error>
 8014544:	f640 0036 	movw	r0, #2102	@ 0x836
 8014548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801454c:	2001      	movs	r0, #1
 801454e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014552:	200b      	movs	r0, #11
 8014554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014558:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop

08014560 <rcl_action_take_goal_request>:
 8014560:	2800      	cmp	r0, #0
 8014562:	d039      	beq.n	80145d8 <rcl_action_take_goal_request+0x78>
 8014564:	b570      	push	{r4, r5, r6, lr}
 8014566:	4604      	mov	r4, r0
 8014568:	6800      	ldr	r0, [r0, #0]
 801456a:	b380      	cbz	r0, 80145ce <rcl_action_take_goal_request+0x6e>
 801456c:	460d      	mov	r5, r1
 801456e:	4616      	mov	r6, r2
 8014570:	f7fe fb68 	bl	8012c44 <rcl_service_is_valid>
 8014574:	b330      	cbz	r0, 80145c4 <rcl_action_take_goal_request+0x64>
 8014576:	6820      	ldr	r0, [r4, #0]
 8014578:	3004      	adds	r0, #4
 801457a:	f7fe fb63 	bl	8012c44 <rcl_service_is_valid>
 801457e:	b308      	cbz	r0, 80145c4 <rcl_action_take_goal_request+0x64>
 8014580:	6820      	ldr	r0, [r4, #0]
 8014582:	3008      	adds	r0, #8
 8014584:	f7fe fb5e 	bl	8012c44 <rcl_service_is_valid>
 8014588:	b1e0      	cbz	r0, 80145c4 <rcl_action_take_goal_request+0x64>
 801458a:	6820      	ldr	r0, [r4, #0]
 801458c:	300c      	adds	r0, #12
 801458e:	f7f8 f883 	bl	800c698 <rcl_publisher_is_valid>
 8014592:	b1b8      	cbz	r0, 80145c4 <rcl_action_take_goal_request+0x64>
 8014594:	6820      	ldr	r0, [r4, #0]
 8014596:	3010      	adds	r0, #16
 8014598:	f7f8 f87e 	bl	800c698 <rcl_publisher_is_valid>
 801459c:	b190      	cbz	r0, 80145c4 <rcl_action_take_goal_request+0x64>
 801459e:	b1cd      	cbz	r5, 80145d4 <rcl_action_take_goal_request+0x74>
 80145a0:	b1c6      	cbz	r6, 80145d4 <rcl_action_take_goal_request+0x74>
 80145a2:	6820      	ldr	r0, [r4, #0]
 80145a4:	4632      	mov	r2, r6
 80145a6:	4629      	mov	r1, r5
 80145a8:	f7fe faf4 	bl	8012b94 <rcl_take_request>
 80145ac:	b148      	cbz	r0, 80145c2 <rcl_action_take_goal_request+0x62>
 80145ae:	280a      	cmp	r0, #10
 80145b0:	d007      	beq.n	80145c2 <rcl_action_take_goal_request+0x62>
 80145b2:	f240 2259 	movw	r2, #601	@ 0x259
 80145b6:	f640 0399 	movw	r3, #2201	@ 0x899
 80145ba:	4290      	cmp	r0, r2
 80145bc:	bf0c      	ite	eq
 80145be:	4618      	moveq	r0, r3
 80145c0:	2001      	movne	r0, #1
 80145c2:	bd70      	pop	{r4, r5, r6, pc}
 80145c4:	f7f8 ffe0 	bl	800d588 <rcutils_reset_error>
 80145c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80145cc:	bd70      	pop	{r4, r5, r6, pc}
 80145ce:	f640 0098 	movw	r0, #2200	@ 0x898
 80145d2:	bd70      	pop	{r4, r5, r6, pc}
 80145d4:	200b      	movs	r0, #11
 80145d6:	bd70      	pop	{r4, r5, r6, pc}
 80145d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop

080145e0 <rcl_action_send_goal_response>:
 80145e0:	b390      	cbz	r0, 8014648 <rcl_action_send_goal_response+0x68>
 80145e2:	b570      	push	{r4, r5, r6, lr}
 80145e4:	4604      	mov	r4, r0
 80145e6:	6800      	ldr	r0, [r0, #0]
 80145e8:	b348      	cbz	r0, 801463e <rcl_action_send_goal_response+0x5e>
 80145ea:	460d      	mov	r5, r1
 80145ec:	4616      	mov	r6, r2
 80145ee:	f7fe fb29 	bl	8012c44 <rcl_service_is_valid>
 80145f2:	b1f8      	cbz	r0, 8014634 <rcl_action_send_goal_response+0x54>
 80145f4:	6820      	ldr	r0, [r4, #0]
 80145f6:	3004      	adds	r0, #4
 80145f8:	f7fe fb24 	bl	8012c44 <rcl_service_is_valid>
 80145fc:	b1d0      	cbz	r0, 8014634 <rcl_action_send_goal_response+0x54>
 80145fe:	6820      	ldr	r0, [r4, #0]
 8014600:	3008      	adds	r0, #8
 8014602:	f7fe fb1f 	bl	8012c44 <rcl_service_is_valid>
 8014606:	b1a8      	cbz	r0, 8014634 <rcl_action_send_goal_response+0x54>
 8014608:	6820      	ldr	r0, [r4, #0]
 801460a:	300c      	adds	r0, #12
 801460c:	f7f8 f844 	bl	800c698 <rcl_publisher_is_valid>
 8014610:	b180      	cbz	r0, 8014634 <rcl_action_send_goal_response+0x54>
 8014612:	6820      	ldr	r0, [r4, #0]
 8014614:	3010      	adds	r0, #16
 8014616:	f7f8 f83f 	bl	800c698 <rcl_publisher_is_valid>
 801461a:	b158      	cbz	r0, 8014634 <rcl_action_send_goal_response+0x54>
 801461c:	b195      	cbz	r5, 8014644 <rcl_action_send_goal_response+0x64>
 801461e:	b18e      	cbz	r6, 8014644 <rcl_action_send_goal_response+0x64>
 8014620:	6820      	ldr	r0, [r4, #0]
 8014622:	4632      	mov	r2, r6
 8014624:	4629      	mov	r1, r5
 8014626:	f7fe faf5 	bl	8012c14 <rcl_send_response>
 801462a:	b110      	cbz	r0, 8014632 <rcl_action_send_goal_response+0x52>
 801462c:	2802      	cmp	r0, #2
 801462e:	bf18      	it	ne
 8014630:	2001      	movne	r0, #1
 8014632:	bd70      	pop	{r4, r5, r6, pc}
 8014634:	f7f8 ffa8 	bl	800d588 <rcutils_reset_error>
 8014638:	f640 0098 	movw	r0, #2200	@ 0x898
 801463c:	bd70      	pop	{r4, r5, r6, pc}
 801463e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014642:	bd70      	pop	{r4, r5, r6, pc}
 8014644:	200b      	movs	r0, #11
 8014646:	bd70      	pop	{r4, r5, r6, pc}
 8014648:	f640 0098 	movw	r0, #2200	@ 0x898
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop

08014650 <rcl_action_take_result_request>:
 8014650:	2800      	cmp	r0, #0
 8014652:	d03a      	beq.n	80146ca <rcl_action_take_result_request+0x7a>
 8014654:	b570      	push	{r4, r5, r6, lr}
 8014656:	4604      	mov	r4, r0
 8014658:	6800      	ldr	r0, [r0, #0]
 801465a:	b388      	cbz	r0, 80146c0 <rcl_action_take_result_request+0x70>
 801465c:	460d      	mov	r5, r1
 801465e:	4616      	mov	r6, r2
 8014660:	f7fe faf0 	bl	8012c44 <rcl_service_is_valid>
 8014664:	b338      	cbz	r0, 80146b6 <rcl_action_take_result_request+0x66>
 8014666:	6820      	ldr	r0, [r4, #0]
 8014668:	3004      	adds	r0, #4
 801466a:	f7fe faeb 	bl	8012c44 <rcl_service_is_valid>
 801466e:	b310      	cbz	r0, 80146b6 <rcl_action_take_result_request+0x66>
 8014670:	6820      	ldr	r0, [r4, #0]
 8014672:	3008      	adds	r0, #8
 8014674:	f7fe fae6 	bl	8012c44 <rcl_service_is_valid>
 8014678:	b1e8      	cbz	r0, 80146b6 <rcl_action_take_result_request+0x66>
 801467a:	6820      	ldr	r0, [r4, #0]
 801467c:	300c      	adds	r0, #12
 801467e:	f7f8 f80b 	bl	800c698 <rcl_publisher_is_valid>
 8014682:	b1c0      	cbz	r0, 80146b6 <rcl_action_take_result_request+0x66>
 8014684:	6820      	ldr	r0, [r4, #0]
 8014686:	3010      	adds	r0, #16
 8014688:	f7f8 f806 	bl	800c698 <rcl_publisher_is_valid>
 801468c:	b198      	cbz	r0, 80146b6 <rcl_action_take_result_request+0x66>
 801468e:	b1d5      	cbz	r5, 80146c6 <rcl_action_take_result_request+0x76>
 8014690:	b1ce      	cbz	r6, 80146c6 <rcl_action_take_result_request+0x76>
 8014692:	6820      	ldr	r0, [r4, #0]
 8014694:	4632      	mov	r2, r6
 8014696:	4629      	mov	r1, r5
 8014698:	3008      	adds	r0, #8
 801469a:	f7fe fa7b 	bl	8012b94 <rcl_take_request>
 801469e:	b148      	cbz	r0, 80146b4 <rcl_action_take_result_request+0x64>
 80146a0:	280a      	cmp	r0, #10
 80146a2:	d007      	beq.n	80146b4 <rcl_action_take_result_request+0x64>
 80146a4:	f240 2259 	movw	r2, #601	@ 0x259
 80146a8:	f640 0399 	movw	r3, #2201	@ 0x899
 80146ac:	4290      	cmp	r0, r2
 80146ae:	bf0c      	ite	eq
 80146b0:	4618      	moveq	r0, r3
 80146b2:	2001      	movne	r0, #1
 80146b4:	bd70      	pop	{r4, r5, r6, pc}
 80146b6:	f7f8 ff67 	bl	800d588 <rcutils_reset_error>
 80146ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80146be:	bd70      	pop	{r4, r5, r6, pc}
 80146c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80146c4:	bd70      	pop	{r4, r5, r6, pc}
 80146c6:	200b      	movs	r0, #11
 80146c8:	bd70      	pop	{r4, r5, r6, pc}
 80146ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80146ce:	4770      	bx	lr

080146d0 <rcl_action_take_cancel_request>:
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d03a      	beq.n	801474a <rcl_action_take_cancel_request+0x7a>
 80146d4:	b570      	push	{r4, r5, r6, lr}
 80146d6:	4604      	mov	r4, r0
 80146d8:	6800      	ldr	r0, [r0, #0]
 80146da:	b388      	cbz	r0, 8014740 <rcl_action_take_cancel_request+0x70>
 80146dc:	460d      	mov	r5, r1
 80146de:	4616      	mov	r6, r2
 80146e0:	f7fe fab0 	bl	8012c44 <rcl_service_is_valid>
 80146e4:	b338      	cbz	r0, 8014736 <rcl_action_take_cancel_request+0x66>
 80146e6:	6820      	ldr	r0, [r4, #0]
 80146e8:	3004      	adds	r0, #4
 80146ea:	f7fe faab 	bl	8012c44 <rcl_service_is_valid>
 80146ee:	b310      	cbz	r0, 8014736 <rcl_action_take_cancel_request+0x66>
 80146f0:	6820      	ldr	r0, [r4, #0]
 80146f2:	3008      	adds	r0, #8
 80146f4:	f7fe faa6 	bl	8012c44 <rcl_service_is_valid>
 80146f8:	b1e8      	cbz	r0, 8014736 <rcl_action_take_cancel_request+0x66>
 80146fa:	6820      	ldr	r0, [r4, #0]
 80146fc:	300c      	adds	r0, #12
 80146fe:	f7f7 ffcb 	bl	800c698 <rcl_publisher_is_valid>
 8014702:	b1c0      	cbz	r0, 8014736 <rcl_action_take_cancel_request+0x66>
 8014704:	6820      	ldr	r0, [r4, #0]
 8014706:	3010      	adds	r0, #16
 8014708:	f7f7 ffc6 	bl	800c698 <rcl_publisher_is_valid>
 801470c:	b198      	cbz	r0, 8014736 <rcl_action_take_cancel_request+0x66>
 801470e:	b1d5      	cbz	r5, 8014746 <rcl_action_take_cancel_request+0x76>
 8014710:	b1ce      	cbz	r6, 8014746 <rcl_action_take_cancel_request+0x76>
 8014712:	6820      	ldr	r0, [r4, #0]
 8014714:	4632      	mov	r2, r6
 8014716:	4629      	mov	r1, r5
 8014718:	3004      	adds	r0, #4
 801471a:	f7fe fa3b 	bl	8012b94 <rcl_take_request>
 801471e:	b148      	cbz	r0, 8014734 <rcl_action_take_cancel_request+0x64>
 8014720:	280a      	cmp	r0, #10
 8014722:	d007      	beq.n	8014734 <rcl_action_take_cancel_request+0x64>
 8014724:	f240 2259 	movw	r2, #601	@ 0x259
 8014728:	f640 0399 	movw	r3, #2201	@ 0x899
 801472c:	4290      	cmp	r0, r2
 801472e:	bf0c      	ite	eq
 8014730:	4618      	moveq	r0, r3
 8014732:	2001      	movne	r0, #1
 8014734:	bd70      	pop	{r4, r5, r6, pc}
 8014736:	f7f8 ff27 	bl	800d588 <rcutils_reset_error>
 801473a:	f640 0098 	movw	r0, #2200	@ 0x898
 801473e:	bd70      	pop	{r4, r5, r6, pc}
 8014740:	f640 0098 	movw	r0, #2200	@ 0x898
 8014744:	bd70      	pop	{r4, r5, r6, pc}
 8014746:	200b      	movs	r0, #11
 8014748:	bd70      	pop	{r4, r5, r6, pc}
 801474a:	f640 0098 	movw	r0, #2200	@ 0x898
 801474e:	4770      	bx	lr

08014750 <rcl_action_send_cancel_response>:
 8014750:	b398      	cbz	r0, 80147ba <rcl_action_send_cancel_response+0x6a>
 8014752:	b570      	push	{r4, r5, r6, lr}
 8014754:	4604      	mov	r4, r0
 8014756:	6800      	ldr	r0, [r0, #0]
 8014758:	b350      	cbz	r0, 80147b0 <rcl_action_send_cancel_response+0x60>
 801475a:	460d      	mov	r5, r1
 801475c:	4616      	mov	r6, r2
 801475e:	f7fe fa71 	bl	8012c44 <rcl_service_is_valid>
 8014762:	b300      	cbz	r0, 80147a6 <rcl_action_send_cancel_response+0x56>
 8014764:	6820      	ldr	r0, [r4, #0]
 8014766:	3004      	adds	r0, #4
 8014768:	f7fe fa6c 	bl	8012c44 <rcl_service_is_valid>
 801476c:	b1d8      	cbz	r0, 80147a6 <rcl_action_send_cancel_response+0x56>
 801476e:	6820      	ldr	r0, [r4, #0]
 8014770:	3008      	adds	r0, #8
 8014772:	f7fe fa67 	bl	8012c44 <rcl_service_is_valid>
 8014776:	b1b0      	cbz	r0, 80147a6 <rcl_action_send_cancel_response+0x56>
 8014778:	6820      	ldr	r0, [r4, #0]
 801477a:	300c      	adds	r0, #12
 801477c:	f7f7 ff8c 	bl	800c698 <rcl_publisher_is_valid>
 8014780:	b188      	cbz	r0, 80147a6 <rcl_action_send_cancel_response+0x56>
 8014782:	6820      	ldr	r0, [r4, #0]
 8014784:	3010      	adds	r0, #16
 8014786:	f7f7 ff87 	bl	800c698 <rcl_publisher_is_valid>
 801478a:	b160      	cbz	r0, 80147a6 <rcl_action_send_cancel_response+0x56>
 801478c:	b19d      	cbz	r5, 80147b6 <rcl_action_send_cancel_response+0x66>
 801478e:	b196      	cbz	r6, 80147b6 <rcl_action_send_cancel_response+0x66>
 8014790:	6820      	ldr	r0, [r4, #0]
 8014792:	4632      	mov	r2, r6
 8014794:	4629      	mov	r1, r5
 8014796:	3004      	adds	r0, #4
 8014798:	f7fe fa3c 	bl	8012c14 <rcl_send_response>
 801479c:	b110      	cbz	r0, 80147a4 <rcl_action_send_cancel_response+0x54>
 801479e:	2802      	cmp	r0, #2
 80147a0:	bf18      	it	ne
 80147a2:	2001      	movne	r0, #1
 80147a4:	bd70      	pop	{r4, r5, r6, pc}
 80147a6:	f7f8 feef 	bl	800d588 <rcutils_reset_error>
 80147aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80147ae:	bd70      	pop	{r4, r5, r6, pc}
 80147b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80147b4:	bd70      	pop	{r4, r5, r6, pc}
 80147b6:	200b      	movs	r0, #11
 80147b8:	bd70      	pop	{r4, r5, r6, pc}
 80147ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80147be:	4770      	bx	lr

080147c0 <rcl_action_wait_set_add_action_server>:
 80147c0:	2800      	cmp	r0, #0
 80147c2:	d04d      	beq.n	8014860 <rcl_action_wait_set_add_action_server+0xa0>
 80147c4:	b570      	push	{r4, r5, r6, lr}
 80147c6:	460c      	mov	r4, r1
 80147c8:	b159      	cbz	r1, 80147e2 <rcl_action_wait_set_add_action_server+0x22>
 80147ca:	4605      	mov	r5, r0
 80147cc:	6808      	ldr	r0, [r1, #0]
 80147ce:	b140      	cbz	r0, 80147e2 <rcl_action_wait_set_add_action_server+0x22>
 80147d0:	4616      	mov	r6, r2
 80147d2:	f7fe fa37 	bl	8012c44 <rcl_service_is_valid>
 80147d6:	b120      	cbz	r0, 80147e2 <rcl_action_wait_set_add_action_server+0x22>
 80147d8:	6820      	ldr	r0, [r4, #0]
 80147da:	3004      	adds	r0, #4
 80147dc:	f7fe fa32 	bl	8012c44 <rcl_service_is_valid>
 80147e0:	b910      	cbnz	r0, 80147e8 <rcl_action_wait_set_add_action_server+0x28>
 80147e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80147e6:	bd70      	pop	{r4, r5, r6, pc}
 80147e8:	6820      	ldr	r0, [r4, #0]
 80147ea:	3008      	adds	r0, #8
 80147ec:	f7fe fa2a 	bl	8012c44 <rcl_service_is_valid>
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d0f6      	beq.n	80147e2 <rcl_action_wait_set_add_action_server+0x22>
 80147f4:	6820      	ldr	r0, [r4, #0]
 80147f6:	300c      	adds	r0, #12
 80147f8:	f7f7 ff66 	bl	800c6c8 <rcl_publisher_is_valid_except_context>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d0f0      	beq.n	80147e2 <rcl_action_wait_set_add_action_server+0x22>
 8014800:	6820      	ldr	r0, [r4, #0]
 8014802:	3010      	adds	r0, #16
 8014804:	f7f7 ff60 	bl	800c6c8 <rcl_publisher_is_valid_except_context>
 8014808:	2800      	cmp	r0, #0
 801480a:	d0ea      	beq.n	80147e2 <rcl_action_wait_set_add_action_server+0x22>
 801480c:	6821      	ldr	r1, [r4, #0]
 801480e:	4628      	mov	r0, r5
 8014810:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8014814:	f7ff face 	bl	8013db4 <rcl_wait_set_add_service>
 8014818:	2800      	cmp	r0, #0
 801481a:	d1e4      	bne.n	80147e6 <rcl_action_wait_set_add_action_server+0x26>
 801481c:	6821      	ldr	r1, [r4, #0]
 801481e:	4628      	mov	r0, r5
 8014820:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8014824:	3104      	adds	r1, #4
 8014826:	f7ff fac5 	bl	8013db4 <rcl_wait_set_add_service>
 801482a:	2800      	cmp	r0, #0
 801482c:	d1db      	bne.n	80147e6 <rcl_action_wait_set_add_action_server+0x26>
 801482e:	6821      	ldr	r1, [r4, #0]
 8014830:	4628      	mov	r0, r5
 8014832:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8014836:	3108      	adds	r1, #8
 8014838:	f7ff fabc 	bl	8013db4 <rcl_wait_set_add_service>
 801483c:	2800      	cmp	r0, #0
 801483e:	d1d2      	bne.n	80147e6 <rcl_action_wait_set_add_action_server+0x26>
 8014840:	6821      	ldr	r1, [r4, #0]
 8014842:	4628      	mov	r0, r5
 8014844:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014848:	3114      	adds	r1, #20
 801484a:	f7ff fa57 	bl	8013cfc <rcl_wait_set_add_timer>
 801484e:	2800      	cmp	r0, #0
 8014850:	d1c9      	bne.n	80147e6 <rcl_action_wait_set_add_action_server+0x26>
 8014852:	2e00      	cmp	r6, #0
 8014854:	d0c7      	beq.n	80147e6 <rcl_action_wait_set_add_action_server+0x26>
 8014856:	6823      	ldr	r3, [r4, #0]
 8014858:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801485c:	6033      	str	r3, [r6, #0]
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014864:	4770      	bx	lr
 8014866:	bf00      	nop

08014868 <rcl_action_server_wait_set_get_entities_ready>:
 8014868:	2800      	cmp	r0, #0
 801486a:	d05a      	beq.n	8014922 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801486e:	460c      	mov	r4, r1
 8014870:	b161      	cbz	r1, 801488c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014872:	4605      	mov	r5, r0
 8014874:	6808      	ldr	r0, [r1, #0]
 8014876:	b148      	cbz	r0, 801488c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014878:	4616      	mov	r6, r2
 801487a:	461f      	mov	r7, r3
 801487c:	f7fe f9e2 	bl	8012c44 <rcl_service_is_valid>
 8014880:	b120      	cbz	r0, 801488c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014882:	6820      	ldr	r0, [r4, #0]
 8014884:	3004      	adds	r0, #4
 8014886:	f7fe f9dd 	bl	8012c44 <rcl_service_is_valid>
 801488a:	b910      	cbnz	r0, 8014892 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801488c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014892:	6820      	ldr	r0, [r4, #0]
 8014894:	3008      	adds	r0, #8
 8014896:	f7fe f9d5 	bl	8012c44 <rcl_service_is_valid>
 801489a:	2800      	cmp	r0, #0
 801489c:	d0f6      	beq.n	801488c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801489e:	6820      	ldr	r0, [r4, #0]
 80148a0:	300c      	adds	r0, #12
 80148a2:	f7f7 ff11 	bl	800c6c8 <rcl_publisher_is_valid_except_context>
 80148a6:	2800      	cmp	r0, #0
 80148a8:	d0f0      	beq.n	801488c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148aa:	6820      	ldr	r0, [r4, #0]
 80148ac:	3010      	adds	r0, #16
 80148ae:	f7f7 ff0b 	bl	800c6c8 <rcl_publisher_is_valid_except_context>
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d0ea      	beq.n	801488c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80148b6:	b3be      	cbz	r6, 8014928 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80148b8:	b3b7      	cbz	r7, 8014928 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80148ba:	9b06      	ldr	r3, [sp, #24]
 80148bc:	b3a3      	cbz	r3, 8014928 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80148be:	9b07      	ldr	r3, [sp, #28]
 80148c0:	b393      	cbz	r3, 8014928 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80148c2:	6821      	ldr	r1, [r4, #0]
 80148c4:	692a      	ldr	r2, [r5, #16]
 80148c6:	6a2c      	ldr	r4, [r5, #32]
 80148c8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80148cc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80148d0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80148d4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80148d8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80148dc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80148e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80148e4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80148e8:	1a64      	subs	r4, r4, r1
 80148ea:	fab4 f484 	clz	r4, r4
 80148ee:	0964      	lsrs	r4, r4, #5
 80148f0:	7034      	strb	r4, [r6, #0]
 80148f2:	1d0c      	adds	r4, r1, #4
 80148f4:	1b1b      	subs	r3, r3, r4
 80148f6:	fab3 f383 	clz	r3, r3
 80148fa:	095b      	lsrs	r3, r3, #5
 80148fc:	f101 0408 	add.w	r4, r1, #8
 8014900:	703b      	strb	r3, [r7, #0]
 8014902:	f101 0314 	add.w	r3, r1, #20
 8014906:	1b01      	subs	r1, r0, r4
 8014908:	1ad3      	subs	r3, r2, r3
 801490a:	fab1 f181 	clz	r1, r1
 801490e:	9a06      	ldr	r2, [sp, #24]
 8014910:	0949      	lsrs	r1, r1, #5
 8014912:	7011      	strb	r1, [r2, #0]
 8014914:	fab3 f383 	clz	r3, r3
 8014918:	9a07      	ldr	r2, [sp, #28]
 801491a:	095b      	lsrs	r3, r3, #5
 801491c:	2000      	movs	r0, #0
 801491e:	7013      	strb	r3, [r2, #0]
 8014920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014922:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014926:	4770      	bx	lr
 8014928:	200b      	movs	r0, #11
 801492a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801492c <_execute_event_handler>:
 801492c:	2002      	movs	r0, #2
 801492e:	4770      	bx	lr

08014930 <_cancel_goal_event_handler>:
 8014930:	2003      	movs	r0, #3
 8014932:	4770      	bx	lr

08014934 <_succeed_event_handler>:
 8014934:	2004      	movs	r0, #4
 8014936:	4770      	bx	lr

08014938 <_abort_event_handler>:
 8014938:	2006      	movs	r0, #6
 801493a:	4770      	bx	lr

0801493c <_canceled_event_handler>:
 801493c:	2005      	movs	r0, #5
 801493e:	4770      	bx	lr

08014940 <rcl_action_transition_goal_state>:
 8014940:	b2c2      	uxtb	r2, r0
 8014942:	2a06      	cmp	r2, #6
 8014944:	d80c      	bhi.n	8014960 <rcl_action_transition_goal_state+0x20>
 8014946:	2904      	cmp	r1, #4
 8014948:	d80a      	bhi.n	8014960 <rcl_action_transition_goal_state+0x20>
 801494a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801494e:	b410      	push	{r4}
 8014950:	1853      	adds	r3, r2, r1
 8014952:	4c06      	ldr	r4, [pc, #24]	@ (801496c <rcl_action_transition_goal_state+0x2c>)
 8014954:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014958:	b123      	cbz	r3, 8014964 <rcl_action_transition_goal_state+0x24>
 801495a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801495e:	4718      	bx	r3
 8014960:	2000      	movs	r0, #0
 8014962:	4770      	bx	lr
 8014964:	2000      	movs	r0, #0
 8014966:	f85d 4b04 	ldr.w	r4, [sp], #4
 801496a:	4770      	bx	lr
 801496c:	08019490 	.word	0x08019490

08014970 <rcl_action_get_zero_initialized_cancel_response>:
 8014970:	b510      	push	{r4, lr}
 8014972:	4c07      	ldr	r4, [pc, #28]	@ (8014990 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014974:	4686      	mov	lr, r0
 8014976:	4684      	mov	ip, r0
 8014978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801497a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801497e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014980:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	f8cc 3000 	str.w	r3, [ip]
 801498a:	4670      	mov	r0, lr
 801498c:	bd10      	pop	{r4, pc}
 801498e:	bf00      	nop
 8014990:	0801951c 	.word	0x0801951c

08014994 <rclc_action_send_result_request>:
 8014994:	b1d0      	cbz	r0, 80149cc <rclc_action_send_result_request+0x38>
 8014996:	b500      	push	{lr}
 8014998:	4684      	mov	ip, r0
 801499a:	b087      	sub	sp, #28
 801499c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80149a0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80149a4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80149a8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80149ac:	f10d 0e08 	add.w	lr, sp, #8
 80149b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149b4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80149b8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80149bc:	a902      	add	r1, sp, #8
 80149be:	3010      	adds	r0, #16
 80149c0:	f7ff fbda 	bl	8014178 <rcl_action_send_result_request>
 80149c4:	b920      	cbnz	r0, 80149d0 <rclc_action_send_result_request+0x3c>
 80149c6:	b007      	add	sp, #28
 80149c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80149cc:	200b      	movs	r0, #11
 80149ce:	4770      	bx	lr
 80149d0:	9001      	str	r0, [sp, #4]
 80149d2:	f7f8 fdd9 	bl	800d588 <rcutils_reset_error>
 80149d6:	9801      	ldr	r0, [sp, #4]
 80149d8:	b007      	add	sp, #28
 80149da:	f85d fb04 	ldr.w	pc, [sp], #4
 80149de:	bf00      	nop

080149e0 <rclc_action_take_goal_handle>:
 80149e0:	b160      	cbz	r0, 80149fc <rclc_action_take_goal_handle+0x1c>
 80149e2:	6883      	ldr	r3, [r0, #8]
 80149e4:	b143      	cbz	r3, 80149f8 <rclc_action_take_goal_handle+0x18>
 80149e6:	6819      	ldr	r1, [r3, #0]
 80149e8:	6081      	str	r1, [r0, #8]
 80149ea:	2200      	movs	r2, #0
 80149ec:	721a      	strb	r2, [r3, #8]
 80149ee:	68c1      	ldr	r1, [r0, #12]
 80149f0:	6019      	str	r1, [r3, #0]
 80149f2:	621a      	str	r2, [r3, #32]
 80149f4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80149f6:	60c3      	str	r3, [r0, #12]
 80149f8:	4618      	mov	r0, r3
 80149fa:	4770      	bx	lr
 80149fc:	4603      	mov	r3, r0
 80149fe:	e7fb      	b.n	80149f8 <rclc_action_take_goal_handle+0x18>

08014a00 <rclc_action_remove_used_goal_handle>:
 8014a00:	b180      	cbz	r0, 8014a24 <rclc_action_remove_used_goal_handle+0x24>
 8014a02:	b179      	cbz	r1, 8014a24 <rclc_action_remove_used_goal_handle+0x24>
 8014a04:	68c3      	ldr	r3, [r0, #12]
 8014a06:	4299      	cmp	r1, r3
 8014a08:	d00d      	beq.n	8014a26 <rclc_action_remove_used_goal_handle+0x26>
 8014a0a:	b12b      	cbz	r3, 8014a18 <rclc_action_remove_used_goal_handle+0x18>
 8014a0c:	681a      	ldr	r2, [r3, #0]
 8014a0e:	4291      	cmp	r1, r2
 8014a10:	d003      	beq.n	8014a1a <rclc_action_remove_used_goal_handle+0x1a>
 8014a12:	4613      	mov	r3, r2
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d1f9      	bne.n	8014a0c <rclc_action_remove_used_goal_handle+0xc>
 8014a18:	4770      	bx	lr
 8014a1a:	680a      	ldr	r2, [r1, #0]
 8014a1c:	601a      	str	r2, [r3, #0]
 8014a1e:	6883      	ldr	r3, [r0, #8]
 8014a20:	600b      	str	r3, [r1, #0]
 8014a22:	6081      	str	r1, [r0, #8]
 8014a24:	4770      	bx	lr
 8014a26:	680b      	ldr	r3, [r1, #0]
 8014a28:	60c3      	str	r3, [r0, #12]
 8014a2a:	e7f8      	b.n	8014a1e <rclc_action_remove_used_goal_handle+0x1e>

08014a2c <rclc_action_find_goal_handle_by_uuid>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	b180      	cbz	r0, 8014a52 <rclc_action_find_goal_handle_by_uuid+0x26>
 8014a30:	460d      	mov	r5, r1
 8014a32:	b181      	cbz	r1, 8014a56 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8014a34:	68c4      	ldr	r4, [r0, #12]
 8014a36:	b914      	cbnz	r4, 8014a3e <rclc_action_find_goal_handle_by_uuid+0x12>
 8014a38:	e009      	b.n	8014a4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a3a:	6824      	ldr	r4, [r4, #0]
 8014a3c:	b13c      	cbz	r4, 8014a4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a3e:	f104 0009 	add.w	r0, r4, #9
 8014a42:	2210      	movs	r2, #16
 8014a44:	4629      	mov	r1, r5
 8014a46:	f003 f98d 	bl	8017d64 <memcmp>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	d1f5      	bne.n	8014a3a <rclc_action_find_goal_handle_by_uuid+0xe>
 8014a4e:	4620      	mov	r0, r4
 8014a50:	bd38      	pop	{r3, r4, r5, pc}
 8014a52:	4604      	mov	r4, r0
 8014a54:	e7fb      	b.n	8014a4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a56:	460c      	mov	r4, r1
 8014a58:	e7f9      	b.n	8014a4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a5a:	bf00      	nop

08014a5c <rclc_action_find_first_handle_by_status>:
 8014a5c:	b140      	cbz	r0, 8014a70 <rclc_action_find_first_handle_by_status+0x14>
 8014a5e:	68c0      	ldr	r0, [r0, #12]
 8014a60:	b910      	cbnz	r0, 8014a68 <rclc_action_find_first_handle_by_status+0xc>
 8014a62:	e005      	b.n	8014a70 <rclc_action_find_first_handle_by_status+0x14>
 8014a64:	6800      	ldr	r0, [r0, #0]
 8014a66:	b118      	cbz	r0, 8014a70 <rclc_action_find_first_handle_by_status+0x14>
 8014a68:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014a6c:	428b      	cmp	r3, r1
 8014a6e:	d1f9      	bne.n	8014a64 <rclc_action_find_first_handle_by_status+0x8>
 8014a70:	4770      	bx	lr
 8014a72:	bf00      	nop

08014a74 <rclc_action_find_first_terminated_handle>:
 8014a74:	b140      	cbz	r0, 8014a88 <rclc_action_find_first_terminated_handle+0x14>
 8014a76:	68c0      	ldr	r0, [r0, #12]
 8014a78:	b910      	cbnz	r0, 8014a80 <rclc_action_find_first_terminated_handle+0xc>
 8014a7a:	e005      	b.n	8014a88 <rclc_action_find_first_terminated_handle+0x14>
 8014a7c:	6800      	ldr	r0, [r0, #0]
 8014a7e:	b118      	cbz	r0, 8014a88 <rclc_action_find_first_terminated_handle+0x14>
 8014a80:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014a84:	2b03      	cmp	r3, #3
 8014a86:	ddf9      	ble.n	8014a7c <rclc_action_find_first_terminated_handle+0x8>
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop

08014a8c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014a8c:	b170      	cbz	r0, 8014aac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014a8e:	68c0      	ldr	r0, [r0, #12]
 8014a90:	b160      	cbz	r0, 8014aac <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014a92:	b410      	push	{r4}
 8014a94:	e001      	b.n	8014a9a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014a96:	6800      	ldr	r0, [r0, #0]
 8014a98:	b128      	cbz	r0, 8014aa6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014a9a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014a9e:	4299      	cmp	r1, r3
 8014aa0:	bf08      	it	eq
 8014aa2:	4294      	cmpeq	r4, r2
 8014aa4:	d1f7      	bne.n	8014a96 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aaa:	4770      	bx	lr
 8014aac:	4770      	bx	lr
 8014aae:	bf00      	nop

08014ab0 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014ab0:	b170      	cbz	r0, 8014ad0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014ab2:	68c0      	ldr	r0, [r0, #12]
 8014ab4:	b160      	cbz	r0, 8014ad0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014ab6:	b410      	push	{r4}
 8014ab8:	e001      	b.n	8014abe <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014aba:	6800      	ldr	r0, [r0, #0]
 8014abc:	b128      	cbz	r0, 8014aca <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014abe:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014ac2:	4299      	cmp	r1, r3
 8014ac4:	bf08      	it	eq
 8014ac6:	4294      	cmpeq	r4, r2
 8014ac8:	d1f7      	bne.n	8014aba <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ace:	4770      	bx	lr
 8014ad0:	4770      	bx	lr
 8014ad2:	bf00      	nop

08014ad4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014ad4:	b170      	cbz	r0, 8014af4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014ad6:	68c0      	ldr	r0, [r0, #12]
 8014ad8:	b160      	cbz	r0, 8014af4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014ada:	b410      	push	{r4}
 8014adc:	e001      	b.n	8014ae2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014ade:	6800      	ldr	r0, [r0, #0]
 8014ae0:	b128      	cbz	r0, 8014aee <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014ae2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014ae6:	4299      	cmp	r1, r3
 8014ae8:	bf08      	it	eq
 8014aea:	4294      	cmpeq	r4, r2
 8014aec:	d1f7      	bne.n	8014ade <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014af2:	4770      	bx	lr
 8014af4:	4770      	bx	lr
 8014af6:	bf00      	nop

08014af8 <rclc_action_find_first_handle_with_goal_response>:
 8014af8:	b140      	cbz	r0, 8014b0c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014afa:	68c0      	ldr	r0, [r0, #12]
 8014afc:	b910      	cbnz	r0, 8014b04 <rclc_action_find_first_handle_with_goal_response+0xc>
 8014afe:	e005      	b.n	8014b0c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014b00:	6800      	ldr	r0, [r0, #0]
 8014b02:	b118      	cbz	r0, 8014b0c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014b04:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d0f9      	beq.n	8014b00 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014b0c:	4770      	bx	lr
 8014b0e:	bf00      	nop

08014b10 <rclc_action_find_first_handle_with_result_response>:
 8014b10:	b140      	cbz	r0, 8014b24 <rclc_action_find_first_handle_with_result_response+0x14>
 8014b12:	68c0      	ldr	r0, [r0, #12]
 8014b14:	b910      	cbnz	r0, 8014b1c <rclc_action_find_first_handle_with_result_response+0xc>
 8014b16:	e005      	b.n	8014b24 <rclc_action_find_first_handle_with_result_response+0x14>
 8014b18:	6800      	ldr	r0, [r0, #0]
 8014b1a:	b118      	cbz	r0, 8014b24 <rclc_action_find_first_handle_with_result_response+0x14>
 8014b1c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d0f9      	beq.n	8014b18 <rclc_action_find_first_handle_with_result_response+0x8>
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop

08014b28 <rclc_action_server_response_goal_request>:
 8014b28:	b198      	cbz	r0, 8014b52 <rclc_action_server_response_goal_request+0x2a>
 8014b2a:	b510      	push	{r4, lr}
 8014b2c:	6844      	ldr	r4, [r0, #4]
 8014b2e:	b086      	sub	sp, #24
 8014b30:	2200      	movs	r2, #0
 8014b32:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014b36:	460b      	mov	r3, r1
 8014b38:	9205      	str	r2, [sp, #20]
 8014b3a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8014b3e:	aa03      	add	r2, sp, #12
 8014b40:	f104 0010 	add.w	r0, r4, #16
 8014b44:	f88d 300c 	strb.w	r3, [sp, #12]
 8014b48:	f7ff fd4a 	bl	80145e0 <rcl_action_send_goal_response>
 8014b4c:	b918      	cbnz	r0, 8014b56 <rclc_action_server_response_goal_request+0x2e>
 8014b4e:	b006      	add	sp, #24
 8014b50:	bd10      	pop	{r4, pc}
 8014b52:	200b      	movs	r0, #11
 8014b54:	4770      	bx	lr
 8014b56:	9001      	str	r0, [sp, #4]
 8014b58:	f7f8 fd16 	bl	800d588 <rcutils_reset_error>
 8014b5c:	9801      	ldr	r0, [sp, #4]
 8014b5e:	b006      	add	sp, #24
 8014b60:	bd10      	pop	{r4, pc}
 8014b62:	bf00      	nop
 8014b64:	0000      	movs	r0, r0
	...

08014b68 <rclc_action_server_goal_cancel_accept>:
 8014b68:	b310      	cbz	r0, 8014bb0 <rclc_action_server_goal_cancel_accept+0x48>
 8014b6a:	b510      	push	{r4, lr}
 8014b6c:	b090      	sub	sp, #64	@ 0x40
 8014b6e:	4604      	mov	r4, r0
 8014b70:	a806      	add	r0, sp, #24
 8014b72:	f7ff fefd 	bl	8014970 <rcl_action_get_zero_initialized_cancel_response>
 8014b76:	2300      	movs	r3, #0
 8014b78:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014b7c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014b80:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014b84:	f88d 3018 	strb.w	r3, [sp, #24]
 8014b88:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014b8c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014b90:	46ec      	mov	ip, sp
 8014b92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b96:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014bb8 <rclc_action_server_goal_cancel_accept+0x50>
 8014b9a:	6860      	ldr	r0, [r4, #4]
 8014b9c:	aa06      	add	r2, sp, #24
 8014b9e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014ba2:	3010      	adds	r0, #16
 8014ba4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014ba8:	f7ff fdd2 	bl	8014750 <rcl_action_send_cancel_response>
 8014bac:	b010      	add	sp, #64	@ 0x40
 8014bae:	bd10      	pop	{r4, pc}
 8014bb0:	200b      	movs	r0, #11
 8014bb2:	4770      	bx	lr
 8014bb4:	f3af 8000 	nop.w
 8014bb8:	00000001 	.word	0x00000001
 8014bbc:	00000001 	.word	0x00000001

08014bc0 <rclc_action_server_goal_cancel_reject>:
 8014bc0:	b082      	sub	sp, #8
 8014bc2:	b530      	push	{r4, r5, lr}
 8014bc4:	b08b      	sub	sp, #44	@ 0x2c
 8014bc6:	ac0e      	add	r4, sp, #56	@ 0x38
 8014bc8:	e884 000c 	stmia.w	r4, {r2, r3}
 8014bcc:	b188      	cbz	r0, 8014bf2 <rclc_action_server_goal_cancel_reject+0x32>
 8014bce:	4604      	mov	r4, r0
 8014bd0:	a801      	add	r0, sp, #4
 8014bd2:	460d      	mov	r5, r1
 8014bd4:	f7ff fecc 	bl	8014970 <rcl_action_get_zero_initialized_cancel_response>
 8014bd8:	aa01      	add	r2, sp, #4
 8014bda:	a90e      	add	r1, sp, #56	@ 0x38
 8014bdc:	f104 0010 	add.w	r0, r4, #16
 8014be0:	f88d 5004 	strb.w	r5, [sp, #4]
 8014be4:	f7ff fdb4 	bl	8014750 <rcl_action_send_cancel_response>
 8014be8:	b00b      	add	sp, #44	@ 0x2c
 8014bea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bee:	b002      	add	sp, #8
 8014bf0:	4770      	bx	lr
 8014bf2:	200b      	movs	r0, #11
 8014bf4:	b00b      	add	sp, #44	@ 0x2c
 8014bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bfa:	b002      	add	sp, #8
 8014bfc:	4770      	bx	lr
 8014bfe:	bf00      	nop

08014c00 <__atomic_load_8>:
 8014c00:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014c04:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014c08:	4a15      	ldr	r2, [pc, #84]	@ (8014c60 <__atomic_load_8+0x60>)
 8014c0a:	4b16      	ldr	r3, [pc, #88]	@ (8014c64 <__atomic_load_8+0x64>)
 8014c0c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014c10:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014c14:	fb02 f101 	mul.w	r1, r2, r1
 8014c18:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014c1c:	fba3 2301 	umull	r2, r3, r3, r1
 8014c20:	091b      	lsrs	r3, r3, #4
 8014c22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014c26:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014c2a:	b4d0      	push	{r4, r6, r7}
 8014c2c:	4c0e      	ldr	r4, [pc, #56]	@ (8014c68 <__atomic_load_8+0x68>)
 8014c2e:	1ac9      	subs	r1, r1, r3
 8014c30:	1862      	adds	r2, r4, r1
 8014c32:	f04f 0c01 	mov.w	ip, #1
 8014c36:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014c3a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014c3e:	2e00      	cmp	r6, #0
 8014c40:	d1f9      	bne.n	8014c36 <__atomic_load_8+0x36>
 8014c42:	f3bf 8f5b 	dmb	ish
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d1f4      	bne.n	8014c36 <__atomic_load_8+0x36>
 8014c4c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014c50:	f3bf 8f5b 	dmb	ish
 8014c54:	5463      	strb	r3, [r4, r1]
 8014c56:	4630      	mov	r0, r6
 8014c58:	4639      	mov	r1, r7
 8014c5a:	bcd0      	pop	{r4, r6, r7}
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop
 8014c60:	27d4eb2d 	.word	0x27d4eb2d
 8014c64:	b21642c9 	.word	0xb21642c9
 8014c68:	2000ae7c 	.word	0x2000ae7c

08014c6c <__atomic_store_8>:
 8014c6c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014c70:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014c74:	b570      	push	{r4, r5, r6, lr}
 8014c76:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014c7a:	4c14      	ldr	r4, [pc, #80]	@ (8014ccc <__atomic_store_8+0x60>)
 8014c7c:	4d14      	ldr	r5, [pc, #80]	@ (8014cd0 <__atomic_store_8+0x64>)
 8014c7e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014c82:	fb04 f101 	mul.w	r1, r4, r1
 8014c86:	4c13      	ldr	r4, [pc, #76]	@ (8014cd4 <__atomic_store_8+0x68>)
 8014c88:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014c8c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014c90:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014c94:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014c98:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014c9c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014ca0:	eb05 0c0e 	add.w	ip, r5, lr
 8014ca4:	f04f 0401 	mov.w	r4, #1
 8014ca8:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014cac:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014cb0:	2e00      	cmp	r6, #0
 8014cb2:	d1f9      	bne.n	8014ca8 <__atomic_store_8+0x3c>
 8014cb4:	f3bf 8f5b 	dmb	ish
 8014cb8:	b2c9      	uxtb	r1, r1
 8014cba:	2900      	cmp	r1, #0
 8014cbc:	d1f4      	bne.n	8014ca8 <__atomic_store_8+0x3c>
 8014cbe:	e9c0 2300 	strd	r2, r3, [r0]
 8014cc2:	f3bf 8f5b 	dmb	ish
 8014cc6:	f805 100e 	strb.w	r1, [r5, lr]
 8014cca:	bd70      	pop	{r4, r5, r6, pc}
 8014ccc:	27d4eb2d 	.word	0x27d4eb2d
 8014cd0:	2000ae7c 	.word	0x2000ae7c
 8014cd4:	b21642c9 	.word	0xb21642c9

08014cd8 <__atomic_exchange_8>:
 8014cd8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014cdc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014ce0:	4916      	ldr	r1, [pc, #88]	@ (8014d3c <__atomic_exchange_8+0x64>)
 8014ce2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014ce6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014cea:	fb01 fc0c 	mul.w	ip, r1, ip
 8014cee:	4914      	ldr	r1, [pc, #80]	@ (8014d40 <__atomic_exchange_8+0x68>)
 8014cf0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014cf4:	b570      	push	{r4, r5, r6, lr}
 8014cf6:	4605      	mov	r5, r0
 8014cf8:	fba1 010c 	umull	r0, r1, r1, ip
 8014cfc:	0909      	lsrs	r1, r1, #4
 8014cfe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014d02:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014d06:	4e0f      	ldr	r6, [pc, #60]	@ (8014d44 <__atomic_exchange_8+0x6c>)
 8014d08:	ebac 0c01 	sub.w	ip, ip, r1
 8014d0c:	eb06 010c 	add.w	r1, r6, ip
 8014d10:	f04f 0e01 	mov.w	lr, #1
 8014d14:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014d18:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	d1f9      	bne.n	8014d14 <__atomic_exchange_8+0x3c>
 8014d20:	f3bf 8f5b 	dmb	ish
 8014d24:	b2e4      	uxtb	r4, r4
 8014d26:	2c00      	cmp	r4, #0
 8014d28:	d1f4      	bne.n	8014d14 <__atomic_exchange_8+0x3c>
 8014d2a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014d2e:	e9c5 2300 	strd	r2, r3, [r5]
 8014d32:	f3bf 8f5b 	dmb	ish
 8014d36:	f806 400c 	strb.w	r4, [r6, ip]
 8014d3a:	bd70      	pop	{r4, r5, r6, pc}
 8014d3c:	27d4eb2d 	.word	0x27d4eb2d
 8014d40:	b21642c9 	.word	0xb21642c9
 8014d44:	2000ae7c 	.word	0x2000ae7c

08014d48 <rcutils_get_env>:
 8014d48:	b168      	cbz	r0, 8014d66 <rcutils_get_env+0x1e>
 8014d4a:	b510      	push	{r4, lr}
 8014d4c:	460c      	mov	r4, r1
 8014d4e:	b129      	cbz	r1, 8014d5c <rcutils_get_env+0x14>
 8014d50:	f002 fc64 	bl	801761c <getenv>
 8014d54:	b120      	cbz	r0, 8014d60 <rcutils_get_env+0x18>
 8014d56:	6020      	str	r0, [r4, #0]
 8014d58:	2000      	movs	r0, #0
 8014d5a:	bd10      	pop	{r4, pc}
 8014d5c:	4803      	ldr	r0, [pc, #12]	@ (8014d6c <rcutils_get_env+0x24>)
 8014d5e:	bd10      	pop	{r4, pc}
 8014d60:	4b03      	ldr	r3, [pc, #12]	@ (8014d70 <rcutils_get_env+0x28>)
 8014d62:	6023      	str	r3, [r4, #0]
 8014d64:	bd10      	pop	{r4, pc}
 8014d66:	4803      	ldr	r0, [pc, #12]	@ (8014d74 <rcutils_get_env+0x2c>)
 8014d68:	4770      	bx	lr
 8014d6a:	bf00      	nop
 8014d6c:	0801955c 	.word	0x0801955c
 8014d70:	08019680 	.word	0x08019680
 8014d74:	08019540 	.word	0x08019540

08014d78 <rcutils_is_directory>:
 8014d78:	2000      	movs	r0, #0
 8014d7a:	4770      	bx	lr

08014d7c <rcutils_join_path>:
 8014d7c:	b082      	sub	sp, #8
 8014d7e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014d82:	2000      	movs	r0, #0
 8014d84:	b002      	add	sp, #8
 8014d86:	4770      	bx	lr

08014d88 <rcutils_to_native_path>:
 8014d88:	b084      	sub	sp, #16
 8014d8a:	a801      	add	r0, sp, #4
 8014d8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014d90:	b004      	add	sp, #16
 8014d92:	2000      	movs	r0, #0
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop

08014d98 <rcutils_format_string_limit>:
 8014d98:	b40f      	push	{r0, r1, r2, r3}
 8014d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d9c:	b083      	sub	sp, #12
 8014d9e:	ac08      	add	r4, sp, #32
 8014da0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014da6:	b34e      	cbz	r6, 8014dfc <rcutils_format_string_limit+0x64>
 8014da8:	a808      	add	r0, sp, #32
 8014daa:	f7f8 fbc7 	bl	800d53c <rcutils_allocator_is_valid>
 8014dae:	b328      	cbz	r0, 8014dfc <rcutils_format_string_limit+0x64>
 8014db0:	2100      	movs	r1, #0
 8014db2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014db4:	4632      	mov	r2, r6
 8014db6:	4608      	mov	r0, r1
 8014db8:	e9cd 3300 	strd	r3, r3, [sp]
 8014dbc:	f000 f8f4 	bl	8014fa8 <rcutils_vsnprintf>
 8014dc0:	1c43      	adds	r3, r0, #1
 8014dc2:	4605      	mov	r5, r0
 8014dc4:	d01a      	beq.n	8014dfc <rcutils_format_string_limit+0x64>
 8014dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014dc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014dca:	1c47      	adds	r7, r0, #1
 8014dcc:	429f      	cmp	r7, r3
 8014dce:	bf84      	itt	hi
 8014dd0:	461f      	movhi	r7, r3
 8014dd2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014dd6:	4638      	mov	r0, r7
 8014dd8:	9b08      	ldr	r3, [sp, #32]
 8014dda:	4798      	blx	r3
 8014ddc:	4604      	mov	r4, r0
 8014dde:	b168      	cbz	r0, 8014dfc <rcutils_format_string_limit+0x64>
 8014de0:	9b01      	ldr	r3, [sp, #4]
 8014de2:	4632      	mov	r2, r6
 8014de4:	4639      	mov	r1, r7
 8014de6:	f000 f8df 	bl	8014fa8 <rcutils_vsnprintf>
 8014dea:	2800      	cmp	r0, #0
 8014dec:	db02      	blt.n	8014df4 <rcutils_format_string_limit+0x5c>
 8014dee:	2300      	movs	r3, #0
 8014df0:	5563      	strb	r3, [r4, r5]
 8014df2:	e004      	b.n	8014dfe <rcutils_format_string_limit+0x66>
 8014df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014df6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014df8:	4620      	mov	r0, r4
 8014dfa:	4798      	blx	r3
 8014dfc:	2400      	movs	r4, #0
 8014dfe:	4620      	mov	r0, r4
 8014e00:	b003      	add	sp, #12
 8014e02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e06:	b004      	add	sp, #16
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop

08014e0c <rcutils_repl_str>:
 8014e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e10:	ed2d 8b02 	vpush	{d8}
 8014e14:	b087      	sub	sp, #28
 8014e16:	4680      	mov	r8, r0
 8014e18:	4608      	mov	r0, r1
 8014e1a:	f8cd 8004 	str.w	r8, [sp, #4]
 8014e1e:	ee08 2a10 	vmov	s16, r2
 8014e22:	468a      	mov	sl, r1
 8014e24:	4699      	mov	r9, r3
 8014e26:	f7eb fa05 	bl	8000234 <strlen>
 8014e2a:	2600      	movs	r6, #0
 8014e2c:	4647      	mov	r7, r8
 8014e2e:	9002      	str	r0, [sp, #8]
 8014e30:	46b3      	mov	fp, r6
 8014e32:	2510      	movs	r5, #16
 8014e34:	46b0      	mov	r8, r6
 8014e36:	e01d      	b.n	8014e74 <rcutils_repl_str+0x68>
 8014e38:	f10b 0b01 	add.w	fp, fp, #1
 8014e3c:	455e      	cmp	r6, fp
 8014e3e:	d211      	bcs.n	8014e64 <rcutils_repl_str+0x58>
 8014e40:	442e      	add	r6, r5
 8014e42:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014e46:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014e4a:	00b1      	lsls	r1, r6, #2
 8014e4c:	4798      	blx	r3
 8014e4e:	2800      	cmp	r0, #0
 8014e50:	f000 8088 	beq.w	8014f64 <rcutils_repl_str+0x158>
 8014e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e58:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014e5c:	4680      	mov	r8, r0
 8014e5e:	bf28      	it	cs
 8014e60:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014e64:	9a01      	ldr	r2, [sp, #4]
 8014e66:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014e6a:	1aa2      	subs	r2, r4, r2
 8014e6c:	f843 2c04 	str.w	r2, [r3, #-4]
 8014e70:	9b02      	ldr	r3, [sp, #8]
 8014e72:	18e7      	adds	r7, r4, r3
 8014e74:	4651      	mov	r1, sl
 8014e76:	4638      	mov	r0, r7
 8014e78:	f002 ffc5 	bl	8017e06 <strstr>
 8014e7c:	4604      	mov	r4, r0
 8014e7e:	4640      	mov	r0, r8
 8014e80:	2c00      	cmp	r4, #0
 8014e82:	d1d9      	bne.n	8014e38 <rcutils_repl_str+0x2c>
 8014e84:	46b8      	mov	r8, r7
 8014e86:	4607      	mov	r7, r0
 8014e88:	4640      	mov	r0, r8
 8014e8a:	f7eb f9d3 	bl	8000234 <strlen>
 8014e8e:	9b01      	ldr	r3, [sp, #4]
 8014e90:	eba8 0303 	sub.w	r3, r8, r3
 8014e94:	181c      	adds	r4, r3, r0
 8014e96:	9404      	str	r4, [sp, #16]
 8014e98:	f1bb 0f00 	cmp.w	fp, #0
 8014e9c:	d04a      	beq.n	8014f34 <rcutils_repl_str+0x128>
 8014e9e:	ee18 0a10 	vmov	r0, s16
 8014ea2:	f7eb f9c7 	bl	8000234 <strlen>
 8014ea6:	9b02      	ldr	r3, [sp, #8]
 8014ea8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014eac:	1ac3      	subs	r3, r0, r3
 8014eae:	fb0b 4303 	mla	r3, fp, r3, r4
 8014eb2:	461a      	mov	r2, r3
 8014eb4:	9305      	str	r3, [sp, #20]
 8014eb6:	4606      	mov	r6, r0
 8014eb8:	f8d9 3000 	ldr.w	r3, [r9]
 8014ebc:	1c50      	adds	r0, r2, #1
 8014ebe:	4798      	blx	r3
 8014ec0:	9003      	str	r0, [sp, #12]
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d04f      	beq.n	8014f66 <rcutils_repl_str+0x15a>
 8014ec6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014eca:	683a      	ldr	r2, [r7, #0]
 8014ecc:	4641      	mov	r1, r8
 8014ece:	f003 f83c 	bl	8017f4a <memcpy>
 8014ed2:	683d      	ldr	r5, [r7, #0]
 8014ed4:	9b03      	ldr	r3, [sp, #12]
 8014ed6:	9701      	str	r7, [sp, #4]
 8014ed8:	46ba      	mov	sl, r7
 8014eda:	441d      	add	r5, r3
 8014edc:	9f02      	ldr	r7, [sp, #8]
 8014ede:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ee2:	2401      	movs	r4, #1
 8014ee4:	46d1      	mov	r9, sl
 8014ee6:	ee18 aa10 	vmov	sl, s16
 8014eea:	e00a      	b.n	8014f02 <rcutils_repl_str+0xf6>
 8014eec:	f8d9 5000 	ldr.w	r5, [r9]
 8014ef0:	1aaa      	subs	r2, r5, r2
 8014ef2:	1885      	adds	r5, r0, r2
 8014ef4:	f003 f829 	bl	8017f4a <memcpy>
 8014ef8:	45a3      	cmp	fp, r4
 8014efa:	f104 0201 	add.w	r2, r4, #1
 8014efe:	d935      	bls.n	8014f6c <rcutils_repl_str+0x160>
 8014f00:	4614      	mov	r4, r2
 8014f02:	4632      	mov	r2, r6
 8014f04:	4651      	mov	r1, sl
 8014f06:	4628      	mov	r0, r5
 8014f08:	f003 f81f 	bl	8017f4a <memcpy>
 8014f0c:	f859 2b04 	ldr.w	r2, [r9], #4
 8014f10:	45a3      	cmp	fp, r4
 8014f12:	443a      	add	r2, r7
 8014f14:	eb05 0006 	add.w	r0, r5, r6
 8014f18:	eb08 0102 	add.w	r1, r8, r2
 8014f1c:	d1e6      	bne.n	8014eec <rcutils_repl_str+0xe0>
 8014f1e:	9b04      	ldr	r3, [sp, #16]
 8014f20:	1a9a      	subs	r2, r3, r2
 8014f22:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014f26:	f003 f810 	bl	8017f4a <memcpy>
 8014f2a:	9a03      	ldr	r2, [sp, #12]
 8014f2c:	9905      	ldr	r1, [sp, #20]
 8014f2e:	2300      	movs	r3, #0
 8014f30:	5453      	strb	r3, [r2, r1]
 8014f32:	e00b      	b.n	8014f4c <rcutils_repl_str+0x140>
 8014f34:	4620      	mov	r0, r4
 8014f36:	f8d9 3000 	ldr.w	r3, [r9]
 8014f3a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f3e:	3001      	adds	r0, #1
 8014f40:	4798      	blx	r3
 8014f42:	9003      	str	r0, [sp, #12]
 8014f44:	b110      	cbz	r0, 8014f4c <rcutils_repl_str+0x140>
 8014f46:	9901      	ldr	r1, [sp, #4]
 8014f48:	f002 fff7 	bl	8017f3a <strcpy>
 8014f4c:	4638      	mov	r0, r7
 8014f4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014f52:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f56:	4798      	blx	r3
 8014f58:	9803      	ldr	r0, [sp, #12]
 8014f5a:	b007      	add	sp, #28
 8014f5c:	ecbd 8b02 	vpop	{d8}
 8014f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f64:	4647      	mov	r7, r8
 8014f66:	2300      	movs	r3, #0
 8014f68:	9303      	str	r3, [sp, #12]
 8014f6a:	e7ef      	b.n	8014f4c <rcutils_repl_str+0x140>
 8014f6c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014f70:	e7db      	b.n	8014f2a <rcutils_repl_str+0x11e>
 8014f72:	bf00      	nop

08014f74 <rcutils_snprintf>:
 8014f74:	b40c      	push	{r2, r3}
 8014f76:	b530      	push	{r4, r5, lr}
 8014f78:	b083      	sub	sp, #12
 8014f7a:	ab06      	add	r3, sp, #24
 8014f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f80:	9301      	str	r3, [sp, #4]
 8014f82:	b152      	cbz	r2, 8014f9a <rcutils_snprintf+0x26>
 8014f84:	b138      	cbz	r0, 8014f96 <rcutils_snprintf+0x22>
 8014f86:	b141      	cbz	r1, 8014f9a <rcutils_snprintf+0x26>
 8014f88:	f002 fede 	bl	8017d48 <vsniprintf>
 8014f8c:	b003      	add	sp, #12
 8014f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f92:	b002      	add	sp, #8
 8014f94:	4770      	bx	lr
 8014f96:	2900      	cmp	r1, #0
 8014f98:	d0f6      	beq.n	8014f88 <rcutils_snprintf+0x14>
 8014f9a:	f002 ffa1 	bl	8017ee0 <__errno>
 8014f9e:	2316      	movs	r3, #22
 8014fa0:	6003      	str	r3, [r0, #0]
 8014fa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fa6:	e7f1      	b.n	8014f8c <rcutils_snprintf+0x18>

08014fa8 <rcutils_vsnprintf>:
 8014fa8:	b570      	push	{r4, r5, r6, lr}
 8014faa:	b13a      	cbz	r2, 8014fbc <rcutils_vsnprintf+0x14>
 8014fac:	b120      	cbz	r0, 8014fb8 <rcutils_vsnprintf+0x10>
 8014fae:	b129      	cbz	r1, 8014fbc <rcutils_vsnprintf+0x14>
 8014fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fb4:	f002 bec8 	b.w	8017d48 <vsniprintf>
 8014fb8:	2900      	cmp	r1, #0
 8014fba:	d0f9      	beq.n	8014fb0 <rcutils_vsnprintf+0x8>
 8014fbc:	f002 ff90 	bl	8017ee0 <__errno>
 8014fc0:	2316      	movs	r3, #22
 8014fc2:	6003      	str	r3, [r0, #0]
 8014fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fc8:	bd70      	pop	{r4, r5, r6, pc}
 8014fca:	bf00      	nop

08014fcc <rcutils_strdup>:
 8014fcc:	b084      	sub	sp, #16
 8014fce:	b570      	push	{r4, r5, r6, lr}
 8014fd0:	b082      	sub	sp, #8
 8014fd2:	ac07      	add	r4, sp, #28
 8014fd4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014fd8:	4605      	mov	r5, r0
 8014fda:	b1b0      	cbz	r0, 801500a <rcutils_strdup+0x3e>
 8014fdc:	f7eb f92a 	bl	8000234 <strlen>
 8014fe0:	1c42      	adds	r2, r0, #1
 8014fe2:	9b07      	ldr	r3, [sp, #28]
 8014fe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014fe6:	9201      	str	r2, [sp, #4]
 8014fe8:	4606      	mov	r6, r0
 8014fea:	4610      	mov	r0, r2
 8014fec:	4798      	blx	r3
 8014fee:	4604      	mov	r4, r0
 8014ff0:	b128      	cbz	r0, 8014ffe <rcutils_strdup+0x32>
 8014ff2:	9a01      	ldr	r2, [sp, #4]
 8014ff4:	4629      	mov	r1, r5
 8014ff6:	f002 ffa8 	bl	8017f4a <memcpy>
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	55a3      	strb	r3, [r4, r6]
 8014ffe:	4620      	mov	r0, r4
 8015000:	b002      	add	sp, #8
 8015002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015006:	b004      	add	sp, #16
 8015008:	4770      	bx	lr
 801500a:	4604      	mov	r4, r0
 801500c:	e7f7      	b.n	8014ffe <rcutils_strdup+0x32>
 801500e:	bf00      	nop

08015010 <rcutils_strndup>:
 8015010:	b082      	sub	sp, #8
 8015012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015014:	ac06      	add	r4, sp, #24
 8015016:	e884 000c 	stmia.w	r4, {r2, r3}
 801501a:	4605      	mov	r5, r0
 801501c:	b188      	cbz	r0, 8015042 <rcutils_strndup+0x32>
 801501e:	1c4f      	adds	r7, r1, #1
 8015020:	460e      	mov	r6, r1
 8015022:	4638      	mov	r0, r7
 8015024:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015026:	4790      	blx	r2
 8015028:	4604      	mov	r4, r0
 801502a:	b128      	cbz	r0, 8015038 <rcutils_strndup+0x28>
 801502c:	463a      	mov	r2, r7
 801502e:	4629      	mov	r1, r5
 8015030:	f002 ff8b 	bl	8017f4a <memcpy>
 8015034:	2300      	movs	r3, #0
 8015036:	55a3      	strb	r3, [r4, r6]
 8015038:	4620      	mov	r0, r4
 801503a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801503e:	b002      	add	sp, #8
 8015040:	4770      	bx	lr
 8015042:	4604      	mov	r4, r0
 8015044:	e7f8      	b.n	8015038 <rcutils_strndup+0x28>
 8015046:	bf00      	nop

08015048 <rcutils_get_zero_initialized_string_map>:
 8015048:	4b01      	ldr	r3, [pc, #4]	@ (8015050 <rcutils_get_zero_initialized_string_map+0x8>)
 801504a:	2000      	movs	r0, #0
 801504c:	6018      	str	r0, [r3, #0]
 801504e:	4770      	bx	lr
 8015050:	2000ae94 	.word	0x2000ae94

08015054 <rcutils_string_map_reserve>:
 8015054:	2800      	cmp	r0, #0
 8015056:	d05f      	beq.n	8015118 <rcutils_string_map_reserve+0xc4>
 8015058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801505c:	460c      	mov	r4, r1
 801505e:	6801      	ldr	r1, [r0, #0]
 8015060:	b082      	sub	sp, #8
 8015062:	4605      	mov	r5, r0
 8015064:	b129      	cbz	r1, 8015072 <rcutils_string_map_reserve+0x1e>
 8015066:	68cb      	ldr	r3, [r1, #12]
 8015068:	42a3      	cmp	r3, r4
 801506a:	d906      	bls.n	801507a <rcutils_string_map_reserve+0x26>
 801506c:	461c      	mov	r4, r3
 801506e:	2900      	cmp	r1, #0
 8015070:	d1f9      	bne.n	8015066 <rcutils_string_map_reserve+0x12>
 8015072:	201f      	movs	r0, #31
 8015074:	b002      	add	sp, #8
 8015076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801507a:	688b      	ldr	r3, [r1, #8]
 801507c:	42a3      	cmp	r3, r4
 801507e:	d047      	beq.n	8015110 <rcutils_string_map_reserve+0xbc>
 8015080:	6a0e      	ldr	r6, [r1, #32]
 8015082:	2c00      	cmp	r4, #0
 8015084:	d034      	beq.n	80150f0 <rcutils_string_map_reserve+0x9c>
 8015086:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801508a:	d243      	bcs.n	8015114 <rcutils_string_map_reserve+0xc0>
 801508c:	00a7      	lsls	r7, r4, #2
 801508e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015092:	6808      	ldr	r0, [r1, #0]
 8015094:	4632      	mov	r2, r6
 8015096:	4639      	mov	r1, r7
 8015098:	47c0      	blx	r8
 801509a:	2800      	cmp	r0, #0
 801509c:	d03a      	beq.n	8015114 <rcutils_string_map_reserve+0xc0>
 801509e:	682b      	ldr	r3, [r5, #0]
 80150a0:	4632      	mov	r2, r6
 80150a2:	6018      	str	r0, [r3, #0]
 80150a4:	4639      	mov	r1, r7
 80150a6:	6858      	ldr	r0, [r3, #4]
 80150a8:	47c0      	blx	r8
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d032      	beq.n	8015114 <rcutils_string_map_reserve+0xc0>
 80150ae:	682d      	ldr	r5, [r5, #0]
 80150b0:	68ab      	ldr	r3, [r5, #8]
 80150b2:	6068      	str	r0, [r5, #4]
 80150b4:	42a3      	cmp	r3, r4
 80150b6:	d226      	bcs.n	8015106 <rcutils_string_map_reserve+0xb2>
 80150b8:	682a      	ldr	r2, [r5, #0]
 80150ba:	eb00 0c07 	add.w	ip, r0, r7
 80150be:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80150c2:	45e6      	cmp	lr, ip
 80150c4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80150c8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80150cc:	d203      	bcs.n	80150d6 <rcutils_string_map_reserve+0x82>
 80150ce:	eb02 0c07 	add.w	ip, r2, r7
 80150d2:	4566      	cmp	r6, ip
 80150d4:	d322      	bcc.n	801511c <rcutils_string_map_reserve+0xc8>
 80150d6:	1ae3      	subs	r3, r4, r3
 80150d8:	009a      	lsls	r2, r3, #2
 80150da:	4670      	mov	r0, lr
 80150dc:	2100      	movs	r1, #0
 80150de:	9201      	str	r2, [sp, #4]
 80150e0:	f002 fe6a 	bl	8017db8 <memset>
 80150e4:	9a01      	ldr	r2, [sp, #4]
 80150e6:	2100      	movs	r1, #0
 80150e8:	4630      	mov	r0, r6
 80150ea:	f002 fe65 	bl	8017db8 <memset>
 80150ee:	e00a      	b.n	8015106 <rcutils_string_map_reserve+0xb2>
 80150f0:	694f      	ldr	r7, [r1, #20]
 80150f2:	6808      	ldr	r0, [r1, #0]
 80150f4:	4631      	mov	r1, r6
 80150f6:	47b8      	blx	r7
 80150f8:	682b      	ldr	r3, [r5, #0]
 80150fa:	4631      	mov	r1, r6
 80150fc:	6858      	ldr	r0, [r3, #4]
 80150fe:	601c      	str	r4, [r3, #0]
 8015100:	47b8      	blx	r7
 8015102:	682d      	ldr	r5, [r5, #0]
 8015104:	606c      	str	r4, [r5, #4]
 8015106:	2000      	movs	r0, #0
 8015108:	60ac      	str	r4, [r5, #8]
 801510a:	b002      	add	sp, #8
 801510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015110:	2000      	movs	r0, #0
 8015112:	e7af      	b.n	8015074 <rcutils_string_map_reserve+0x20>
 8015114:	200a      	movs	r0, #10
 8015116:	e7ad      	b.n	8015074 <rcutils_string_map_reserve+0x20>
 8015118:	200b      	movs	r0, #11
 801511a:	4770      	bx	lr
 801511c:	1f0b      	subs	r3, r1, #4
 801511e:	4418      	add	r0, r3
 8015120:	4413      	add	r3, r2
 8015122:	3a04      	subs	r2, #4
 8015124:	4417      	add	r7, r2
 8015126:	2200      	movs	r2, #0
 8015128:	f843 2f04 	str.w	r2, [r3, #4]!
 801512c:	42bb      	cmp	r3, r7
 801512e:	f840 2f04 	str.w	r2, [r0, #4]!
 8015132:	d1f9      	bne.n	8015128 <rcutils_string_map_reserve+0xd4>
 8015134:	e7e7      	b.n	8015106 <rcutils_string_map_reserve+0xb2>
 8015136:	bf00      	nop

08015138 <rcutils_string_map_init>:
 8015138:	b082      	sub	sp, #8
 801513a:	b570      	push	{r4, r5, r6, lr}
 801513c:	ac04      	add	r4, sp, #16
 801513e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015142:	b380      	cbz	r0, 80151a6 <rcutils_string_map_init+0x6e>
 8015144:	6806      	ldr	r6, [r0, #0]
 8015146:	4604      	mov	r4, r0
 8015148:	b12e      	cbz	r6, 8015156 <rcutils_string_map_init+0x1e>
 801514a:	251e      	movs	r5, #30
 801514c:	4628      	mov	r0, r5
 801514e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015152:	b002      	add	sp, #8
 8015154:	4770      	bx	lr
 8015156:	a804      	add	r0, sp, #16
 8015158:	460d      	mov	r5, r1
 801515a:	f7f8 f9ef 	bl	800d53c <rcutils_allocator_is_valid>
 801515e:	b310      	cbz	r0, 80151a6 <rcutils_string_map_init+0x6e>
 8015160:	9b04      	ldr	r3, [sp, #16]
 8015162:	9908      	ldr	r1, [sp, #32]
 8015164:	2024      	movs	r0, #36	@ 0x24
 8015166:	4798      	blx	r3
 8015168:	6020      	str	r0, [r4, #0]
 801516a:	b310      	cbz	r0, 80151b2 <rcutils_string_map_init+0x7a>
 801516c:	f10d 0e10 	add.w	lr, sp, #16
 8015170:	e9c0 6600 	strd	r6, r6, [r0]
 8015174:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015178:	f100 0c10 	add.w	ip, r0, #16
 801517c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015180:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015184:	f8de 3000 	ldr.w	r3, [lr]
 8015188:	f8cc 3000 	str.w	r3, [ip]
 801518c:	4629      	mov	r1, r5
 801518e:	4620      	mov	r0, r4
 8015190:	f7ff ff60 	bl	8015054 <rcutils_string_map_reserve>
 8015194:	4605      	mov	r5, r0
 8015196:	2800      	cmp	r0, #0
 8015198:	d0d8      	beq.n	801514c <rcutils_string_map_init+0x14>
 801519a:	9b05      	ldr	r3, [sp, #20]
 801519c:	9908      	ldr	r1, [sp, #32]
 801519e:	6820      	ldr	r0, [r4, #0]
 80151a0:	4798      	blx	r3
 80151a2:	6026      	str	r6, [r4, #0]
 80151a4:	e7d2      	b.n	801514c <rcutils_string_map_init+0x14>
 80151a6:	250b      	movs	r5, #11
 80151a8:	4628      	mov	r0, r5
 80151aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151ae:	b002      	add	sp, #8
 80151b0:	4770      	bx	lr
 80151b2:	250a      	movs	r5, #10
 80151b4:	e7ca      	b.n	801514c <rcutils_string_map_init+0x14>
 80151b6:	bf00      	nop

080151b8 <rcutils_string_map_fini>:
 80151b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151bc:	b082      	sub	sp, #8
 80151be:	2800      	cmp	r0, #0
 80151c0:	d03a      	beq.n	8015238 <rcutils_string_map_fini+0x80>
 80151c2:	6804      	ldr	r4, [r0, #0]
 80151c4:	4606      	mov	r6, r0
 80151c6:	2c00      	cmp	r4, #0
 80151c8:	d032      	beq.n	8015230 <rcutils_string_map_fini+0x78>
 80151ca:	68a3      	ldr	r3, [r4, #8]
 80151cc:	b32b      	cbz	r3, 801521a <rcutils_string_map_fini+0x62>
 80151ce:	2500      	movs	r5, #0
 80151d0:	6822      	ldr	r2, [r4, #0]
 80151d2:	462f      	mov	r7, r5
 80151d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80151d8:	b1e0      	cbz	r0, 8015214 <rcutils_string_map_fini+0x5c>
 80151da:	6a21      	ldr	r1, [r4, #32]
 80151dc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80151e0:	9101      	str	r1, [sp, #4]
 80151e2:	47c0      	blx	r8
 80151e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80151e8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80151ec:	9901      	ldr	r1, [sp, #4]
 80151ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80151f2:	47c0      	blx	r8
 80151f4:	68e3      	ldr	r3, [r4, #12]
 80151f6:	6862      	ldr	r2, [r4, #4]
 80151f8:	3b01      	subs	r3, #1
 80151fa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80151fe:	60e3      	str	r3, [r4, #12]
 8015200:	6834      	ldr	r4, [r6, #0]
 8015202:	68a3      	ldr	r3, [r4, #8]
 8015204:	3501      	adds	r5, #1
 8015206:	429d      	cmp	r5, r3
 8015208:	d207      	bcs.n	801521a <rcutils_string_map_fini+0x62>
 801520a:	6822      	ldr	r2, [r4, #0]
 801520c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015210:	2800      	cmp	r0, #0
 8015212:	d1e2      	bne.n	80151da <rcutils_string_map_fini+0x22>
 8015214:	3501      	adds	r5, #1
 8015216:	429d      	cmp	r5, r3
 8015218:	d3dc      	bcc.n	80151d4 <rcutils_string_map_fini+0x1c>
 801521a:	2100      	movs	r1, #0
 801521c:	4630      	mov	r0, r6
 801521e:	f7ff ff19 	bl	8015054 <rcutils_string_map_reserve>
 8015222:	4604      	mov	r4, r0
 8015224:	b920      	cbnz	r0, 8015230 <rcutils_string_map_fini+0x78>
 8015226:	6830      	ldr	r0, [r6, #0]
 8015228:	6943      	ldr	r3, [r0, #20]
 801522a:	6a01      	ldr	r1, [r0, #32]
 801522c:	4798      	blx	r3
 801522e:	6034      	str	r4, [r6, #0]
 8015230:	4620      	mov	r0, r4
 8015232:	b002      	add	sp, #8
 8015234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015238:	240b      	movs	r4, #11
 801523a:	4620      	mov	r0, r4
 801523c:	b002      	add	sp, #8
 801523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015242:	bf00      	nop

08015244 <rcutils_string_map_getn>:
 8015244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015248:	b300      	cbz	r0, 801528c <rcutils_string_map_getn+0x48>
 801524a:	6807      	ldr	r7, [r0, #0]
 801524c:	b1ff      	cbz	r7, 801528e <rcutils_string_map_getn+0x4a>
 801524e:	4688      	mov	r8, r1
 8015250:	b1e1      	cbz	r1, 801528c <rcutils_string_map_getn+0x48>
 8015252:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015256:	683e      	ldr	r6, [r7, #0]
 8015258:	f1ba 0f00 	cmp.w	sl, #0
 801525c:	d016      	beq.n	801528c <rcutils_string_map_getn+0x48>
 801525e:	4691      	mov	r9, r2
 8015260:	3e04      	subs	r6, #4
 8015262:	2400      	movs	r4, #0
 8015264:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015268:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801526c:	4628      	mov	r0, r5
 801526e:	3401      	adds	r4, #1
 8015270:	b155      	cbz	r5, 8015288 <rcutils_string_map_getn+0x44>
 8015272:	f7ea ffdf 	bl	8000234 <strlen>
 8015276:	4548      	cmp	r0, r9
 8015278:	4602      	mov	r2, r0
 801527a:	4629      	mov	r1, r5
 801527c:	bf38      	it	cc
 801527e:	464a      	movcc	r2, r9
 8015280:	4640      	mov	r0, r8
 8015282:	f002 fdae 	bl	8017de2 <strncmp>
 8015286:	b128      	cbz	r0, 8015294 <rcutils_string_map_getn+0x50>
 8015288:	45a2      	cmp	sl, r4
 801528a:	d1eb      	bne.n	8015264 <rcutils_string_map_getn+0x20>
 801528c:	2700      	movs	r7, #0
 801528e:	4638      	mov	r0, r7
 8015290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f853 700b 	ldr.w	r7, [r3, fp]
 801529a:	4638      	mov	r0, r7
 801529c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152a0 <rmw_get_zero_initialized_context>:
 80152a0:	b510      	push	{r4, lr}
 80152a2:	4604      	mov	r4, r0
 80152a4:	3010      	adds	r0, #16
 80152a6:	f7f8 f9db 	bl	800d660 <rmw_get_zero_initialized_init_options>
 80152aa:	2300      	movs	r3, #0
 80152ac:	2000      	movs	r0, #0
 80152ae:	2100      	movs	r1, #0
 80152b0:	e9c4 0100 	strd	r0, r1, [r4]
 80152b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80152b8:	60a3      	str	r3, [r4, #8]
 80152ba:	4620      	mov	r0, r4
 80152bc:	bd10      	pop	{r4, pc}
 80152be:	bf00      	nop

080152c0 <rmw_time_equal>:
 80152c0:	b4f0      	push	{r4, r5, r6, r7}
 80152c2:	b084      	sub	sp, #16
 80152c4:	ac04      	add	r4, sp, #16
 80152c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80152ca:	4603      	mov	r3, r0
 80152cc:	4924      	ldr	r1, [pc, #144]	@ (8015360 <rmw_time_equal+0xa0>)
 80152ce:	9e03      	ldr	r6, [sp, #12]
 80152d0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80152d4:	2202      	movs	r2, #2
 80152d6:	4299      	cmp	r1, r3
 80152d8:	41aa      	sbcs	r2, r5
 80152da:	d330      	bcc.n	801533e <rmw_time_equal+0x7e>
 80152dc:	4c21      	ldr	r4, [pc, #132]	@ (8015364 <rmw_time_equal+0xa4>)
 80152de:	fba3 3204 	umull	r3, r2, r3, r4
 80152e2:	fb04 2205 	mla	r2, r4, r5, r2
 80152e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80152ea:	43dd      	mvns	r5, r3
 80152ec:	1a8c      	subs	r4, r1, r2
 80152ee:	4285      	cmp	r5, r0
 80152f0:	41b4      	sbcs	r4, r6
 80152f2:	d332      	bcc.n	801535a <rmw_time_equal+0x9a>
 80152f4:	eb10 0c03 	adds.w	ip, r0, r3
 80152f8:	eb42 0106 	adc.w	r1, r2, r6
 80152fc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015300:	4817      	ldr	r0, [pc, #92]	@ (8015360 <rmw_time_equal+0xa0>)
 8015302:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015304:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015306:	2202      	movs	r2, #2
 8015308:	4298      	cmp	r0, r3
 801530a:	41b2      	sbcs	r2, r6
 801530c:	d31c      	bcc.n	8015348 <rmw_time_equal+0x88>
 801530e:	4c15      	ldr	r4, [pc, #84]	@ (8015364 <rmw_time_equal+0xa4>)
 8015310:	fba3 3204 	umull	r3, r2, r3, r4
 8015314:	fb04 2206 	mla	r2, r4, r6, r2
 8015318:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801531c:	43de      	mvns	r6, r3
 801531e:	1a84      	subs	r4, r0, r2
 8015320:	42ae      	cmp	r6, r5
 8015322:	41bc      	sbcs	r4, r7
 8015324:	d315      	bcc.n	8015352 <rmw_time_equal+0x92>
 8015326:	195b      	adds	r3, r3, r5
 8015328:	eb42 0207 	adc.w	r2, r2, r7
 801532c:	428a      	cmp	r2, r1
 801532e:	bf08      	it	eq
 8015330:	4563      	cmpeq	r3, ip
 8015332:	bf0c      	ite	eq
 8015334:	2001      	moveq	r0, #1
 8015336:	2000      	movne	r0, #0
 8015338:	b004      	add	sp, #16
 801533a:	bcf0      	pop	{r4, r5, r6, r7}
 801533c:	4770      	bx	lr
 801533e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015342:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015346:	e7d9      	b.n	80152fc <rmw_time_equal+0x3c>
 8015348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801534c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015350:	e7ec      	b.n	801532c <rmw_time_equal+0x6c>
 8015352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015356:	4602      	mov	r2, r0
 8015358:	e7e8      	b.n	801532c <rmw_time_equal+0x6c>
 801535a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801535e:	e7cd      	b.n	80152fc <rmw_time_equal+0x3c>
 8015360:	25c17d04 	.word	0x25c17d04
 8015364:	3b9aca00 	.word	0x3b9aca00

08015368 <rmw_time_total_nsec>:
 8015368:	b470      	push	{r4, r5, r6}
 801536a:	b085      	sub	sp, #20
 801536c:	ac04      	add	r4, sp, #16
 801536e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015372:	4603      	mov	r3, r0
 8015374:	4912      	ldr	r1, [pc, #72]	@ (80153c0 <rmw_time_total_nsec+0x58>)
 8015376:	9e03      	ldr	r6, [sp, #12]
 8015378:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801537c:	2202      	movs	r2, #2
 801537e:	4299      	cmp	r1, r3
 8015380:	41aa      	sbcs	r2, r5
 8015382:	d311      	bcc.n	80153a8 <rmw_time_total_nsec+0x40>
 8015384:	4c0f      	ldr	r4, [pc, #60]	@ (80153c4 <rmw_time_total_nsec+0x5c>)
 8015386:	fba3 3204 	umull	r3, r2, r3, r4
 801538a:	fb04 2205 	mla	r2, r4, r5, r2
 801538e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015392:	43dd      	mvns	r5, r3
 8015394:	1a8c      	subs	r4, r1, r2
 8015396:	4285      	cmp	r5, r0
 8015398:	41b4      	sbcs	r4, r6
 801539a:	d30c      	bcc.n	80153b6 <rmw_time_total_nsec+0x4e>
 801539c:	1818      	adds	r0, r3, r0
 801539e:	eb42 0106 	adc.w	r1, r2, r6
 80153a2:	b005      	add	sp, #20
 80153a4:	bc70      	pop	{r4, r5, r6}
 80153a6:	4770      	bx	lr
 80153a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80153b0:	b005      	add	sp, #20
 80153b2:	bc70      	pop	{r4, r5, r6}
 80153b4:	4770      	bx	lr
 80153b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153ba:	b005      	add	sp, #20
 80153bc:	bc70      	pop	{r4, r5, r6}
 80153be:	4770      	bx	lr
 80153c0:	25c17d04 	.word	0x25c17d04
 80153c4:	3b9aca00 	.word	0x3b9aca00

080153c8 <rmw_get_zero_initialized_message_info>:
 80153c8:	b510      	push	{r4, lr}
 80153ca:	2240      	movs	r2, #64	@ 0x40
 80153cc:	4604      	mov	r4, r0
 80153ce:	2100      	movs	r1, #0
 80153d0:	f002 fcf2 	bl	8017db8 <memset>
 80153d4:	4620      	mov	r0, r4
 80153d6:	bd10      	pop	{r4, pc}

080153d8 <rmw_validate_full_topic_name>:
 80153d8:	2800      	cmp	r0, #0
 80153da:	d057      	beq.n	801548c <rmw_validate_full_topic_name+0xb4>
 80153dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e0:	460d      	mov	r5, r1
 80153e2:	2900      	cmp	r1, #0
 80153e4:	d054      	beq.n	8015490 <rmw_validate_full_topic_name+0xb8>
 80153e6:	4616      	mov	r6, r2
 80153e8:	4604      	mov	r4, r0
 80153ea:	f7ea ff23 	bl	8000234 <strlen>
 80153ee:	b148      	cbz	r0, 8015404 <rmw_validate_full_topic_name+0x2c>
 80153f0:	7823      	ldrb	r3, [r4, #0]
 80153f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80153f4:	d00d      	beq.n	8015412 <rmw_validate_full_topic_name+0x3a>
 80153f6:	2302      	movs	r3, #2
 80153f8:	602b      	str	r3, [r5, #0]
 80153fa:	b13e      	cbz	r6, 801540c <rmw_validate_full_topic_name+0x34>
 80153fc:	2000      	movs	r0, #0
 80153fe:	6030      	str	r0, [r6, #0]
 8015400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015404:	2301      	movs	r3, #1
 8015406:	602b      	str	r3, [r5, #0]
 8015408:	2e00      	cmp	r6, #0
 801540a:	d1f7      	bne.n	80153fc <rmw_validate_full_topic_name+0x24>
 801540c:	2000      	movs	r0, #0
 801540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015412:	1e43      	subs	r3, r0, #1
 8015414:	5ce2      	ldrb	r2, [r4, r3]
 8015416:	2a2f      	cmp	r2, #47	@ 0x2f
 8015418:	d03c      	beq.n	8015494 <rmw_validate_full_topic_name+0xbc>
 801541a:	1e63      	subs	r3, r4, #1
 801541c:	eb03 0800 	add.w	r8, r3, r0
 8015420:	f1c4 0e01 	rsb	lr, r4, #1
 8015424:	eb0e 0703 	add.w	r7, lr, r3
 8015428:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801542c:	f021 0220 	bic.w	r2, r1, #32
 8015430:	3a41      	subs	r2, #65	@ 0x41
 8015432:	2a19      	cmp	r2, #25
 8015434:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015438:	d90b      	bls.n	8015452 <rmw_validate_full_topic_name+0x7a>
 801543a:	295f      	cmp	r1, #95	@ 0x5f
 801543c:	d009      	beq.n	8015452 <rmw_validate_full_topic_name+0x7a>
 801543e:	f1bc 0f0a 	cmp.w	ip, #10
 8015442:	d906      	bls.n	8015452 <rmw_validate_full_topic_name+0x7a>
 8015444:	2304      	movs	r3, #4
 8015446:	602b      	str	r3, [r5, #0]
 8015448:	2e00      	cmp	r6, #0
 801544a:	d0df      	beq.n	801540c <rmw_validate_full_topic_name+0x34>
 801544c:	6037      	str	r7, [r6, #0]
 801544e:	2000      	movs	r0, #0
 8015450:	e7d6      	b.n	8015400 <rmw_validate_full_topic_name+0x28>
 8015452:	4543      	cmp	r3, r8
 8015454:	d1e6      	bne.n	8015424 <rmw_validate_full_topic_name+0x4c>
 8015456:	4f1a      	ldr	r7, [pc, #104]	@ (80154c0 <rmw_validate_full_topic_name+0xe8>)
 8015458:	2301      	movs	r3, #1
 801545a:	e004      	b.n	8015466 <rmw_validate_full_topic_name+0x8e>
 801545c:	4298      	cmp	r0, r3
 801545e:	f104 0401 	add.w	r4, r4, #1
 8015462:	d91c      	bls.n	801549e <rmw_validate_full_topic_name+0xc6>
 8015464:	4613      	mov	r3, r2
 8015466:	4298      	cmp	r0, r3
 8015468:	f103 0201 	add.w	r2, r3, #1
 801546c:	d0f6      	beq.n	801545c <rmw_validate_full_topic_name+0x84>
 801546e:	7821      	ldrb	r1, [r4, #0]
 8015470:	292f      	cmp	r1, #47	@ 0x2f
 8015472:	d1f3      	bne.n	801545c <rmw_validate_full_topic_name+0x84>
 8015474:	7861      	ldrb	r1, [r4, #1]
 8015476:	292f      	cmp	r1, #47	@ 0x2f
 8015478:	d01c      	beq.n	80154b4 <rmw_validate_full_topic_name+0xdc>
 801547a:	5dc9      	ldrb	r1, [r1, r7]
 801547c:	0749      	lsls	r1, r1, #29
 801547e:	d5ed      	bpl.n	801545c <rmw_validate_full_topic_name+0x84>
 8015480:	2206      	movs	r2, #6
 8015482:	602a      	str	r2, [r5, #0]
 8015484:	2e00      	cmp	r6, #0
 8015486:	d0c1      	beq.n	801540c <rmw_validate_full_topic_name+0x34>
 8015488:	6033      	str	r3, [r6, #0]
 801548a:	e7bf      	b.n	801540c <rmw_validate_full_topic_name+0x34>
 801548c:	200b      	movs	r0, #11
 801548e:	4770      	bx	lr
 8015490:	200b      	movs	r0, #11
 8015492:	e7b5      	b.n	8015400 <rmw_validate_full_topic_name+0x28>
 8015494:	2203      	movs	r2, #3
 8015496:	602a      	str	r2, [r5, #0]
 8015498:	2e00      	cmp	r6, #0
 801549a:	d1f5      	bne.n	8015488 <rmw_validate_full_topic_name+0xb0>
 801549c:	e7b6      	b.n	801540c <rmw_validate_full_topic_name+0x34>
 801549e:	28f7      	cmp	r0, #247	@ 0xf7
 80154a0:	d802      	bhi.n	80154a8 <rmw_validate_full_topic_name+0xd0>
 80154a2:	2000      	movs	r0, #0
 80154a4:	6028      	str	r0, [r5, #0]
 80154a6:	e7ab      	b.n	8015400 <rmw_validate_full_topic_name+0x28>
 80154a8:	2307      	movs	r3, #7
 80154aa:	602b      	str	r3, [r5, #0]
 80154ac:	2e00      	cmp	r6, #0
 80154ae:	d0ad      	beq.n	801540c <rmw_validate_full_topic_name+0x34>
 80154b0:	23f6      	movs	r3, #246	@ 0xf6
 80154b2:	e7e9      	b.n	8015488 <rmw_validate_full_topic_name+0xb0>
 80154b4:	2205      	movs	r2, #5
 80154b6:	602a      	str	r2, [r5, #0]
 80154b8:	2e00      	cmp	r6, #0
 80154ba:	d1e5      	bne.n	8015488 <rmw_validate_full_topic_name+0xb0>
 80154bc:	e7a6      	b.n	801540c <rmw_validate_full_topic_name+0x34>
 80154be:	bf00      	nop
 80154c0:	08019958 	.word	0x08019958

080154c4 <rmw_validate_namespace_with_size>:
 80154c4:	b340      	cbz	r0, 8015518 <rmw_validate_namespace_with_size+0x54>
 80154c6:	b570      	push	{r4, r5, r6, lr}
 80154c8:	4614      	mov	r4, r2
 80154ca:	b0c2      	sub	sp, #264	@ 0x108
 80154cc:	b332      	cbz	r2, 801551c <rmw_validate_namespace_with_size+0x58>
 80154ce:	2901      	cmp	r1, #1
 80154d0:	460d      	mov	r5, r1
 80154d2:	461e      	mov	r6, r3
 80154d4:	d102      	bne.n	80154dc <rmw_validate_namespace_with_size+0x18>
 80154d6:	7803      	ldrb	r3, [r0, #0]
 80154d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80154da:	d012      	beq.n	8015502 <rmw_validate_namespace_with_size+0x3e>
 80154dc:	aa01      	add	r2, sp, #4
 80154de:	4669      	mov	r1, sp
 80154e0:	f7ff ff7a 	bl	80153d8 <rmw_validate_full_topic_name>
 80154e4:	b978      	cbnz	r0, 8015506 <rmw_validate_namespace_with_size+0x42>
 80154e6:	9b00      	ldr	r3, [sp, #0]
 80154e8:	b14b      	cbz	r3, 80154fe <rmw_validate_namespace_with_size+0x3a>
 80154ea:	2b07      	cmp	r3, #7
 80154ec:	d007      	beq.n	80154fe <rmw_validate_namespace_with_size+0x3a>
 80154ee:	1e5a      	subs	r2, r3, #1
 80154f0:	2a05      	cmp	r2, #5
 80154f2:	d82b      	bhi.n	801554c <rmw_validate_namespace_with_size+0x88>
 80154f4:	e8df f002 	tbb	[pc, r2]
 80154f8:	1e212427 	.word	0x1e212427
 80154fc:	141b      	.short	0x141b
 80154fe:	2df5      	cmp	r5, #245	@ 0xf5
 8015500:	d803      	bhi.n	801550a <rmw_validate_namespace_with_size+0x46>
 8015502:	2000      	movs	r0, #0
 8015504:	6020      	str	r0, [r4, #0]
 8015506:	b042      	add	sp, #264	@ 0x108
 8015508:	bd70      	pop	{r4, r5, r6, pc}
 801550a:	2307      	movs	r3, #7
 801550c:	6023      	str	r3, [r4, #0]
 801550e:	2e00      	cmp	r6, #0
 8015510:	d0f9      	beq.n	8015506 <rmw_validate_namespace_with_size+0x42>
 8015512:	23f4      	movs	r3, #244	@ 0xf4
 8015514:	6033      	str	r3, [r6, #0]
 8015516:	e7f6      	b.n	8015506 <rmw_validate_namespace_with_size+0x42>
 8015518:	200b      	movs	r0, #11
 801551a:	4770      	bx	lr
 801551c:	200b      	movs	r0, #11
 801551e:	e7f2      	b.n	8015506 <rmw_validate_namespace_with_size+0x42>
 8015520:	2306      	movs	r3, #6
 8015522:	6023      	str	r3, [r4, #0]
 8015524:	2e00      	cmp	r6, #0
 8015526:	d0ee      	beq.n	8015506 <rmw_validate_namespace_with_size+0x42>
 8015528:	9b01      	ldr	r3, [sp, #4]
 801552a:	6033      	str	r3, [r6, #0]
 801552c:	e7eb      	b.n	8015506 <rmw_validate_namespace_with_size+0x42>
 801552e:	2305      	movs	r3, #5
 8015530:	6023      	str	r3, [r4, #0]
 8015532:	e7f7      	b.n	8015524 <rmw_validate_namespace_with_size+0x60>
 8015534:	2304      	movs	r3, #4
 8015536:	6023      	str	r3, [r4, #0]
 8015538:	e7f4      	b.n	8015524 <rmw_validate_namespace_with_size+0x60>
 801553a:	2303      	movs	r3, #3
 801553c:	6023      	str	r3, [r4, #0]
 801553e:	e7f1      	b.n	8015524 <rmw_validate_namespace_with_size+0x60>
 8015540:	2302      	movs	r3, #2
 8015542:	6023      	str	r3, [r4, #0]
 8015544:	e7ee      	b.n	8015524 <rmw_validate_namespace_with_size+0x60>
 8015546:	2301      	movs	r3, #1
 8015548:	6023      	str	r3, [r4, #0]
 801554a:	e7eb      	b.n	8015524 <rmw_validate_namespace_with_size+0x60>
 801554c:	4a03      	ldr	r2, [pc, #12]	@ (801555c <rmw_validate_namespace_with_size+0x98>)
 801554e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015552:	a802      	add	r0, sp, #8
 8015554:	f7ff fd0e 	bl	8014f74 <rcutils_snprintf>
 8015558:	2001      	movs	r0, #1
 801555a:	e7d4      	b.n	8015506 <rmw_validate_namespace_with_size+0x42>
 801555c:	08019578 	.word	0x08019578

08015560 <rmw_validate_namespace>:
 8015560:	b168      	cbz	r0, 801557e <rmw_validate_namespace+0x1e>
 8015562:	b570      	push	{r4, r5, r6, lr}
 8015564:	460d      	mov	r5, r1
 8015566:	4616      	mov	r6, r2
 8015568:	4604      	mov	r4, r0
 801556a:	f7ea fe63 	bl	8000234 <strlen>
 801556e:	4633      	mov	r3, r6
 8015570:	4601      	mov	r1, r0
 8015572:	462a      	mov	r2, r5
 8015574:	4620      	mov	r0, r4
 8015576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801557a:	f7ff bfa3 	b.w	80154c4 <rmw_validate_namespace_with_size>
 801557e:	200b      	movs	r0, #11
 8015580:	4770      	bx	lr
 8015582:	bf00      	nop

08015584 <rmw_namespace_validation_result_string>:
 8015584:	2807      	cmp	r0, #7
 8015586:	bf9a      	itte	ls
 8015588:	4b02      	ldrls	r3, [pc, #8]	@ (8015594 <rmw_namespace_validation_result_string+0x10>)
 801558a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801558e:	4802      	ldrhi	r0, [pc, #8]	@ (8015598 <rmw_namespace_validation_result_string+0x14>)
 8015590:	4770      	bx	lr
 8015592:	bf00      	nop
 8015594:	08019770 	.word	0x08019770
 8015598:	080195c8 	.word	0x080195c8

0801559c <rmw_validate_node_name>:
 801559c:	2800      	cmp	r0, #0
 801559e:	d03b      	beq.n	8015618 <rmw_validate_node_name+0x7c>
 80155a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a4:	460d      	mov	r5, r1
 80155a6:	2900      	cmp	r1, #0
 80155a8:	d038      	beq.n	801561c <rmw_validate_node_name+0x80>
 80155aa:	4616      	mov	r6, r2
 80155ac:	4604      	mov	r4, r0
 80155ae:	f7ea fe41 	bl	8000234 <strlen>
 80155b2:	b1e0      	cbz	r0, 80155ee <rmw_validate_node_name+0x52>
 80155b4:	1e63      	subs	r3, r4, #1
 80155b6:	eb03 0800 	add.w	r8, r3, r0
 80155ba:	f1c4 0101 	rsb	r1, r4, #1
 80155be:	18cf      	adds	r7, r1, r3
 80155c0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80155c4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80155c8:	f02e 0c20 	bic.w	ip, lr, #32
 80155cc:	2a09      	cmp	r2, #9
 80155ce:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80155d2:	d914      	bls.n	80155fe <rmw_validate_node_name+0x62>
 80155d4:	f1bc 0f19 	cmp.w	ip, #25
 80155d8:	d911      	bls.n	80155fe <rmw_validate_node_name+0x62>
 80155da:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80155de:	d00e      	beq.n	80155fe <rmw_validate_node_name+0x62>
 80155e0:	2302      	movs	r3, #2
 80155e2:	602b      	str	r3, [r5, #0]
 80155e4:	b106      	cbz	r6, 80155e8 <rmw_validate_node_name+0x4c>
 80155e6:	6037      	str	r7, [r6, #0]
 80155e8:	2000      	movs	r0, #0
 80155ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ee:	2301      	movs	r3, #1
 80155f0:	602b      	str	r3, [r5, #0]
 80155f2:	2e00      	cmp	r6, #0
 80155f4:	d0f8      	beq.n	80155e8 <rmw_validate_node_name+0x4c>
 80155f6:	2000      	movs	r0, #0
 80155f8:	6030      	str	r0, [r6, #0]
 80155fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155fe:	4543      	cmp	r3, r8
 8015600:	d1dd      	bne.n	80155be <rmw_validate_node_name+0x22>
 8015602:	7822      	ldrb	r2, [r4, #0]
 8015604:	4b0d      	ldr	r3, [pc, #52]	@ (801563c <rmw_validate_node_name+0xa0>)
 8015606:	5cd3      	ldrb	r3, [r2, r3]
 8015608:	f013 0304 	ands.w	r3, r3, #4
 801560c:	d110      	bne.n	8015630 <rmw_validate_node_name+0x94>
 801560e:	28ff      	cmp	r0, #255	@ 0xff
 8015610:	d806      	bhi.n	8015620 <rmw_validate_node_name+0x84>
 8015612:	602b      	str	r3, [r5, #0]
 8015614:	4618      	mov	r0, r3
 8015616:	e7e8      	b.n	80155ea <rmw_validate_node_name+0x4e>
 8015618:	200b      	movs	r0, #11
 801561a:	4770      	bx	lr
 801561c:	200b      	movs	r0, #11
 801561e:	e7e4      	b.n	80155ea <rmw_validate_node_name+0x4e>
 8015620:	2204      	movs	r2, #4
 8015622:	602a      	str	r2, [r5, #0]
 8015624:	2e00      	cmp	r6, #0
 8015626:	d0df      	beq.n	80155e8 <rmw_validate_node_name+0x4c>
 8015628:	22fe      	movs	r2, #254	@ 0xfe
 801562a:	6032      	str	r2, [r6, #0]
 801562c:	4618      	mov	r0, r3
 801562e:	e7dc      	b.n	80155ea <rmw_validate_node_name+0x4e>
 8015630:	2303      	movs	r3, #3
 8015632:	602b      	str	r3, [r5, #0]
 8015634:	2e00      	cmp	r6, #0
 8015636:	d1de      	bne.n	80155f6 <rmw_validate_node_name+0x5a>
 8015638:	e7d6      	b.n	80155e8 <rmw_validate_node_name+0x4c>
 801563a:	bf00      	nop
 801563c:	08019958 	.word	0x08019958

08015640 <rmw_node_name_validation_result_string>:
 8015640:	2804      	cmp	r0, #4
 8015642:	bf9a      	itte	ls
 8015644:	4b02      	ldrls	r3, [pc, #8]	@ (8015650 <rmw_node_name_validation_result_string+0x10>)
 8015646:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801564a:	4802      	ldrhi	r0, [pc, #8]	@ (8015654 <rmw_node_name_validation_result_string+0x14>)
 801564c:	4770      	bx	lr
 801564e:	bf00      	nop
 8015650:	0801987c 	.word	0x0801987c
 8015654:	08019790 	.word	0x08019790

08015658 <on_status>:
 8015658:	b082      	sub	sp, #8
 801565a:	b002      	add	sp, #8
 801565c:	4770      	bx	lr
 801565e:	bf00      	nop

08015660 <on_topic>:
 8015660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015664:	4a22      	ldr	r2, [pc, #136]	@ (80156f0 <on_topic+0x90>)
 8015666:	b094      	sub	sp, #80	@ 0x50
 8015668:	6812      	ldr	r2, [r2, #0]
 801566a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801566c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015670:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015674:	b3c2      	cbz	r2, 80156e8 <on_topic+0x88>
 8015676:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801567a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801567e:	e001      	b.n	8015684 <on_topic+0x24>
 8015680:	6852      	ldr	r2, [r2, #4]
 8015682:	b38a      	cbz	r2, 80156e8 <on_topic+0x88>
 8015684:	6894      	ldr	r4, [r2, #8]
 8015686:	8aa3      	ldrh	r3, [r4, #20]
 8015688:	428b      	cmp	r3, r1
 801568a:	d1f9      	bne.n	8015680 <on_topic+0x20>
 801568c:	7da3      	ldrb	r3, [r4, #22]
 801568e:	4283      	cmp	r3, r0
 8015690:	d1f6      	bne.n	8015680 <on_topic+0x20>
 8015692:	2248      	movs	r2, #72	@ 0x48
 8015694:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015698:	4668      	mov	r0, sp
 801569a:	f002 fc56 	bl	8017f4a <memcpy>
 801569e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80156a2:	cb0c      	ldmia	r3, {r2, r3}
 80156a4:	4620      	mov	r0, r4
 80156a6:	f7f8 ffbf 	bl	800e628 <rmw_uxrce_get_static_input_buffer_for_entity>
 80156aa:	4607      	mov	r7, r0
 80156ac:	b1e0      	cbz	r0, 80156e8 <on_topic+0x88>
 80156ae:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80156b2:	4632      	mov	r2, r6
 80156b4:	4628      	mov	r0, r5
 80156b6:	f108 0110 	add.w	r1, r8, #16
 80156ba:	f000 fda7 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80156be:	b930      	cbnz	r0, 80156ce <on_topic+0x6e>
 80156c0:	480c      	ldr	r0, [pc, #48]	@ (80156f4 <on_topic+0x94>)
 80156c2:	4639      	mov	r1, r7
 80156c4:	b014      	add	sp, #80	@ 0x50
 80156c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80156ca:	f000 b8bd 	b.w	8015848 <put_memory>
 80156ce:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80156d2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80156d6:	f000 fcc3 	bl	8016060 <rmw_uros_epoch_nanos>
 80156da:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80156de:	2305      	movs	r3, #5
 80156e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80156e4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80156e8:	b014      	add	sp, #80	@ 0x50
 80156ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ee:	bf00      	nop
 80156f0:	2000ae44 	.word	0x2000ae44
 80156f4:	2000ae34 	.word	0x2000ae34

080156f8 <on_request>:
 80156f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fc:	4823      	ldr	r0, [pc, #140]	@ (801578c <on_request+0x94>)
 80156fe:	b094      	sub	sp, #80	@ 0x50
 8015700:	6800      	ldr	r0, [r0, #0]
 8015702:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015704:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015708:	9113      	str	r1, [sp, #76]	@ 0x4c
 801570a:	2800      	cmp	r0, #0
 801570c:	d03b      	beq.n	8015786 <on_request+0x8e>
 801570e:	461d      	mov	r5, r3
 8015710:	e001      	b.n	8015716 <on_request+0x1e>
 8015712:	6840      	ldr	r0, [r0, #4]
 8015714:	b3b8      	cbz	r0, 8015786 <on_request+0x8e>
 8015716:	6884      	ldr	r4, [r0, #8]
 8015718:	8b21      	ldrh	r1, [r4, #24]
 801571a:	4291      	cmp	r1, r2
 801571c:	d1f9      	bne.n	8015712 <on_request+0x1a>
 801571e:	2248      	movs	r2, #72	@ 0x48
 8015720:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015724:	4668      	mov	r0, sp
 8015726:	f002 fc10 	bl	8017f4a <memcpy>
 801572a:	f104 0320 	add.w	r3, r4, #32
 801572e:	cb0c      	ldmia	r3, {r2, r3}
 8015730:	4620      	mov	r0, r4
 8015732:	f7f8 ff79 	bl	800e628 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015736:	4680      	mov	r8, r0
 8015738:	b328      	cbz	r0, 8015786 <on_request+0x8e>
 801573a:	4638      	mov	r0, r7
 801573c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015740:	4632      	mov	r2, r6
 8015742:	f107 0110 	add.w	r1, r7, #16
 8015746:	f000 fd61 	bl	801620c <ucdr_deserialize_array_uint8_t>
 801574a:	b930      	cbnz	r0, 801575a <on_request+0x62>
 801574c:	4810      	ldr	r0, [pc, #64]	@ (8015790 <on_request+0x98>)
 801574e:	4641      	mov	r1, r8
 8015750:	b014      	add	sp, #80	@ 0x50
 8015752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015756:	f000 b877 	b.w	8015848 <put_memory>
 801575a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801575c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015760:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015764:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801576c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015770:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015774:	f000 fc74 	bl	8016060 <rmw_uros_epoch_nanos>
 8015778:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801577c:	2303      	movs	r3, #3
 801577e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015782:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015786:	b014      	add	sp, #80	@ 0x50
 8015788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801578c:	2000ae14 	.word	0x2000ae14
 8015790:	2000ae34 	.word	0x2000ae34

08015794 <on_reply>:
 8015794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015798:	4821      	ldr	r0, [pc, #132]	@ (8015820 <on_reply+0x8c>)
 801579a:	b094      	sub	sp, #80	@ 0x50
 801579c:	6800      	ldr	r0, [r0, #0]
 801579e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80157a0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80157a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80157a6:	b3b8      	cbz	r0, 8015818 <on_reply+0x84>
 80157a8:	461d      	mov	r5, r3
 80157aa:	e001      	b.n	80157b0 <on_reply+0x1c>
 80157ac:	6840      	ldr	r0, [r0, #4]
 80157ae:	b398      	cbz	r0, 8015818 <on_reply+0x84>
 80157b0:	6884      	ldr	r4, [r0, #8]
 80157b2:	8b21      	ldrh	r1, [r4, #24]
 80157b4:	4291      	cmp	r1, r2
 80157b6:	d1f9      	bne.n	80157ac <on_reply+0x18>
 80157b8:	2248      	movs	r2, #72	@ 0x48
 80157ba:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80157be:	4668      	mov	r0, sp
 80157c0:	f002 fbc3 	bl	8017f4a <memcpy>
 80157c4:	f104 0320 	add.w	r3, r4, #32
 80157c8:	cb0c      	ldmia	r3, {r2, r3}
 80157ca:	4620      	mov	r0, r4
 80157cc:	f7f8 ff2c 	bl	800e628 <rmw_uxrce_get_static_input_buffer_for_entity>
 80157d0:	4680      	mov	r8, r0
 80157d2:	b308      	cbz	r0, 8015818 <on_reply+0x84>
 80157d4:	4638      	mov	r0, r7
 80157d6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80157da:	4632      	mov	r2, r6
 80157dc:	f107 0110 	add.w	r1, r7, #16
 80157e0:	f000 fd14 	bl	801620c <ucdr_deserialize_array_uint8_t>
 80157e4:	b930      	cbnz	r0, 80157f4 <on_reply+0x60>
 80157e6:	480f      	ldr	r0, [pc, #60]	@ (8015824 <on_reply+0x90>)
 80157e8:	4641      	mov	r1, r8
 80157ea:	b014      	add	sp, #80	@ 0x50
 80157ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157f0:	f000 b82a 	b.w	8015848 <put_memory>
 80157f4:	2200      	movs	r2, #0
 80157f6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80157fa:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80157fe:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015802:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015806:	f000 fc2b 	bl	8016060 <rmw_uros_epoch_nanos>
 801580a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801580e:	2304      	movs	r3, #4
 8015810:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015814:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015818:	b014      	add	sp, #80	@ 0x50
 801581a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801581e:	bf00      	nop
 8015820:	20006524 	.word	0x20006524
 8015824:	2000ae34 	.word	0x2000ae34

08015828 <get_memory>:
 8015828:	4603      	mov	r3, r0
 801582a:	6840      	ldr	r0, [r0, #4]
 801582c:	b158      	cbz	r0, 8015846 <get_memory+0x1e>
 801582e:	6842      	ldr	r2, [r0, #4]
 8015830:	605a      	str	r2, [r3, #4]
 8015832:	b10a      	cbz	r2, 8015838 <get_memory+0x10>
 8015834:	2100      	movs	r1, #0
 8015836:	6011      	str	r1, [r2, #0]
 8015838:	681a      	ldr	r2, [r3, #0]
 801583a:	6042      	str	r2, [r0, #4]
 801583c:	b102      	cbz	r2, 8015840 <get_memory+0x18>
 801583e:	6010      	str	r0, [r2, #0]
 8015840:	2200      	movs	r2, #0
 8015842:	6002      	str	r2, [r0, #0]
 8015844:	6018      	str	r0, [r3, #0]
 8015846:	4770      	bx	lr

08015848 <put_memory>:
 8015848:	680b      	ldr	r3, [r1, #0]
 801584a:	b10b      	cbz	r3, 8015850 <put_memory+0x8>
 801584c:	684a      	ldr	r2, [r1, #4]
 801584e:	605a      	str	r2, [r3, #4]
 8015850:	684a      	ldr	r2, [r1, #4]
 8015852:	b102      	cbz	r2, 8015856 <put_memory+0xe>
 8015854:	6013      	str	r3, [r2, #0]
 8015856:	6803      	ldr	r3, [r0, #0]
 8015858:	428b      	cmp	r3, r1
 801585a:	6843      	ldr	r3, [r0, #4]
 801585c:	bf08      	it	eq
 801585e:	6002      	streq	r2, [r0, #0]
 8015860:	604b      	str	r3, [r1, #4]
 8015862:	b103      	cbz	r3, 8015866 <put_memory+0x1e>
 8015864:	6019      	str	r1, [r3, #0]
 8015866:	2300      	movs	r3, #0
 8015868:	600b      	str	r3, [r1, #0]
 801586a:	6041      	str	r1, [r0, #4]
 801586c:	4770      	bx	lr
 801586e:	bf00      	nop

08015870 <rmw_destroy_client>:
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	b128      	cbz	r0, 8015880 <rmw_destroy_client+0x10>
 8015874:	4604      	mov	r4, r0
 8015876:	6800      	ldr	r0, [r0, #0]
 8015878:	460d      	mov	r5, r1
 801587a:	f7f9 f84b 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 801587e:	b910      	cbnz	r0, 8015886 <rmw_destroy_client+0x16>
 8015880:	2401      	movs	r4, #1
 8015882:	4620      	mov	r0, r4
 8015884:	bd70      	pop	{r4, r5, r6, pc}
 8015886:	6863      	ldr	r3, [r4, #4]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d0f9      	beq.n	8015880 <rmw_destroy_client+0x10>
 801588c:	2d00      	cmp	r5, #0
 801588e:	d0f7      	beq.n	8015880 <rmw_destroy_client+0x10>
 8015890:	6828      	ldr	r0, [r5, #0]
 8015892:	f7f9 f83f 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 8015896:	2800      	cmp	r0, #0
 8015898:	d0f2      	beq.n	8015880 <rmw_destroy_client+0x10>
 801589a:	686e      	ldr	r6, [r5, #4]
 801589c:	2e00      	cmp	r6, #0
 801589e:	d0ef      	beq.n	8015880 <rmw_destroy_client+0x10>
 80158a0:	6864      	ldr	r4, [r4, #4]
 80158a2:	6932      	ldr	r2, [r6, #16]
 80158a4:	6920      	ldr	r0, [r4, #16]
 80158a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158ae:	6819      	ldr	r1, [r3, #0]
 80158b0:	f7f9 fafa 	bl	800eea8 <uxr_buffer_cancel_data>
 80158b4:	4602      	mov	r2, r0
 80158b6:	6920      	ldr	r0, [r4, #16]
 80158b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80158bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80158c0:	f7f8 ffa8 	bl	800e814 <run_xrce_session>
 80158c4:	6920      	ldr	r0, [r4, #16]
 80158c6:	6932      	ldr	r2, [r6, #16]
 80158c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80158cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158d0:	6819      	ldr	r1, [r3, #0]
 80158d2:	f7f9 f89d 	bl	800ea10 <uxr_buffer_delete_entity>
 80158d6:	4602      	mov	r2, r0
 80158d8:	6920      	ldr	r0, [r4, #16]
 80158da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80158de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80158e2:	f7f8 ff97 	bl	800e814 <run_xrce_session>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	4628      	mov	r0, r5
 80158ea:	bf14      	ite	ne
 80158ec:	2400      	movne	r4, #0
 80158ee:	2402      	moveq	r4, #2
 80158f0:	f7f8 fe78 	bl	800e5e4 <rmw_uxrce_fini_client_memory>
 80158f4:	e7c5      	b.n	8015882 <rmw_destroy_client+0x12>
 80158f6:	bf00      	nop

080158f8 <rmw_get_implementation_identifier>:
 80158f8:	4b01      	ldr	r3, [pc, #4]	@ (8015900 <rmw_get_implementation_identifier+0x8>)
 80158fa:	6818      	ldr	r0, [r3, #0]
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop
 8015900:	080198a8 	.word	0x080198a8

08015904 <create_topic>:
 8015904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015908:	4605      	mov	r5, r0
 801590a:	b084      	sub	sp, #16
 801590c:	4822      	ldr	r0, [pc, #136]	@ (8015998 <create_topic+0x94>)
 801590e:	460f      	mov	r7, r1
 8015910:	4616      	mov	r6, r2
 8015912:	f7ff ff89 	bl	8015828 <get_memory>
 8015916:	4604      	mov	r4, r0
 8015918:	2800      	cmp	r0, #0
 801591a:	d039      	beq.n	8015990 <create_topic+0x8c>
 801591c:	692b      	ldr	r3, [r5, #16]
 801591e:	6884      	ldr	r4, [r0, #8]
 8015920:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80159a0 <create_topic+0x9c>
 8015924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015928:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801592c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015930:	1c42      	adds	r2, r0, #1
 8015932:	2102      	movs	r1, #2
 8015934:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015938:	f7f9 fa86 	bl	800ee48 <uxr_object_id>
 801593c:	223c      	movs	r2, #60	@ 0x3c
 801593e:	6120      	str	r0, [r4, #16]
 8015940:	4641      	mov	r1, r8
 8015942:	4638      	mov	r0, r7
 8015944:	f7f8 ffcc 	bl	800e8e0 <generate_topic_name>
 8015948:	b1f0      	cbz	r0, 8015988 <create_topic+0x84>
 801594a:	4f14      	ldr	r7, [pc, #80]	@ (801599c <create_topic+0x98>)
 801594c:	4630      	mov	r0, r6
 801594e:	2264      	movs	r2, #100	@ 0x64
 8015950:	4639      	mov	r1, r7
 8015952:	f7f8 ff95 	bl	800e880 <generate_type_name>
 8015956:	b1b8      	cbz	r0, 8015988 <create_topic+0x84>
 8015958:	6928      	ldr	r0, [r5, #16]
 801595a:	2306      	movs	r3, #6
 801595c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015960:	f8cd 8000 	str.w	r8, [sp]
 8015964:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015968:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801596c:	6811      	ldr	r1, [r2, #0]
 801596e:	696b      	ldr	r3, [r5, #20]
 8015970:	6922      	ldr	r2, [r4, #16]
 8015972:	f7f9 f8cb 	bl	800eb0c <uxr_buffer_create_topic_bin>
 8015976:	4602      	mov	r2, r0
 8015978:	6928      	ldr	r0, [r5, #16]
 801597a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801597e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015982:	f7f8 ff47 	bl	800e814 <run_xrce_session>
 8015986:	b918      	cbnz	r0, 8015990 <create_topic+0x8c>
 8015988:	4620      	mov	r0, r4
 801598a:	f7f8 fe41 	bl	800e610 <rmw_uxrce_fini_topic_memory>
 801598e:	2400      	movs	r4, #0
 8015990:	4620      	mov	r0, r4
 8015992:	b004      	add	sp, #16
 8015994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015998:	2000ae54 	.word	0x2000ae54
 801599c:	2000aed4 	.word	0x2000aed4
 80159a0:	2000ae98 	.word	0x2000ae98

080159a4 <destroy_topic>:
 80159a4:	b538      	push	{r3, r4, r5, lr}
 80159a6:	6985      	ldr	r5, [r0, #24]
 80159a8:	b1d5      	cbz	r5, 80159e0 <destroy_topic+0x3c>
 80159aa:	4604      	mov	r4, r0
 80159ac:	6928      	ldr	r0, [r5, #16]
 80159ae:	6922      	ldr	r2, [r4, #16]
 80159b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80159b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159b8:	6819      	ldr	r1, [r3, #0]
 80159ba:	f7f9 f829 	bl	800ea10 <uxr_buffer_delete_entity>
 80159be:	4602      	mov	r2, r0
 80159c0:	6928      	ldr	r0, [r5, #16]
 80159c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80159c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80159ca:	f7f8 ff23 	bl	800e814 <run_xrce_session>
 80159ce:	2800      	cmp	r0, #0
 80159d0:	4620      	mov	r0, r4
 80159d2:	bf14      	ite	ne
 80159d4:	2400      	movne	r4, #0
 80159d6:	2402      	moveq	r4, #2
 80159d8:	f7f8 fe1a 	bl	800e610 <rmw_uxrce_fini_topic_memory>
 80159dc:	4620      	mov	r0, r4
 80159de:	bd38      	pop	{r3, r4, r5, pc}
 80159e0:	2401      	movs	r4, #1
 80159e2:	4620      	mov	r0, r4
 80159e4:	bd38      	pop	{r3, r4, r5, pc}
 80159e6:	bf00      	nop

080159e8 <rmw_send_request>:
 80159e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159ec:	4604      	mov	r4, r0
 80159ee:	6800      	ldr	r0, [r0, #0]
 80159f0:	b08b      	sub	sp, #44	@ 0x2c
 80159f2:	460e      	mov	r6, r1
 80159f4:	4615      	mov	r5, r2
 80159f6:	b128      	cbz	r0, 8015a04 <rmw_send_request+0x1c>
 80159f8:	4b21      	ldr	r3, [pc, #132]	@ (8015a80 <rmw_send_request+0x98>)
 80159fa:	6819      	ldr	r1, [r3, #0]
 80159fc:	f7ea fc10 	bl	8000220 <strcmp>
 8015a00:	2800      	cmp	r0, #0
 8015a02:	d139      	bne.n	8015a78 <rmw_send_request+0x90>
 8015a04:	6864      	ldr	r4, [r4, #4]
 8015a06:	6963      	ldr	r3, [r4, #20]
 8015a08:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015a0c:	689b      	ldr	r3, [r3, #8]
 8015a0e:	4798      	blx	r3
 8015a10:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015a14:	4630      	mov	r0, r6
 8015a16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015a1a:	4798      	blx	r3
 8015a1c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015a20:	9000      	str	r0, [sp, #0]
 8015a22:	6922      	ldr	r2, [r4, #16]
 8015a24:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015a26:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015a2a:	ab02      	add	r3, sp, #8
 8015a2c:	f7fb fa8e 	bl	8010f4c <uxr_prepare_output_stream>
 8015a30:	2700      	movs	r7, #0
 8015a32:	6028      	str	r0, [r5, #0]
 8015a34:	606f      	str	r7, [r5, #4]
 8015a36:	b198      	cbz	r0, 8015a60 <rmw_send_request+0x78>
 8015a38:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015a3c:	a902      	add	r1, sp, #8
 8015a3e:	4630      	mov	r0, r6
 8015a40:	4798      	blx	r3
 8015a42:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015a46:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d00c      	beq.n	8015a68 <rmw_send_request+0x80>
 8015a4e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015a50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a54:	f7f9 fffc 	bl	800fa50 <uxr_run_session_until_confirm_delivery>
 8015a58:	4638      	mov	r0, r7
 8015a5a:	b00b      	add	sp, #44	@ 0x2c
 8015a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a60:	2001      	movs	r0, #1
 8015a62:	b00b      	add	sp, #44	@ 0x2c
 8015a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a6c:	f7f9 fc30 	bl	800f2d0 <uxr_flash_output_streams>
 8015a70:	4638      	mov	r0, r7
 8015a72:	b00b      	add	sp, #44	@ 0x2c
 8015a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a78:	200c      	movs	r0, #12
 8015a7a:	b00b      	add	sp, #44	@ 0x2c
 8015a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a80:	080198a8 	.word	0x080198a8

08015a84 <rmw_take_request>:
 8015a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a88:	4605      	mov	r5, r0
 8015a8a:	6800      	ldr	r0, [r0, #0]
 8015a8c:	b089      	sub	sp, #36	@ 0x24
 8015a8e:	460c      	mov	r4, r1
 8015a90:	4690      	mov	r8, r2
 8015a92:	461e      	mov	r6, r3
 8015a94:	b128      	cbz	r0, 8015aa2 <rmw_take_request+0x1e>
 8015a96:	4b28      	ldr	r3, [pc, #160]	@ (8015b38 <rmw_take_request+0xb4>)
 8015a98:	6819      	ldr	r1, [r3, #0]
 8015a9a:	f7ea fbc1 	bl	8000220 <strcmp>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d146      	bne.n	8015b30 <rmw_take_request+0xac>
 8015aa2:	b10e      	cbz	r6, 8015aa8 <rmw_take_request+0x24>
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	7033      	strb	r3, [r6, #0]
 8015aa8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015aac:	f7f8 fe34 	bl	800e718 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ab0:	4648      	mov	r0, r9
 8015ab2:	f7f8 fe09 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ab6:	4607      	mov	r7, r0
 8015ab8:	b3b0      	cbz	r0, 8015b28 <rmw_take_request+0xa4>
 8015aba:	6885      	ldr	r5, [r0, #8]
 8015abc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015ac0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015ac4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015ac8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015acc:	7423      	strb	r3, [r4, #16]
 8015ace:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015ad2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015ad6:	74e2      	strb	r2, [r4, #19]
 8015ad8:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015adc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015ae0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8015ae4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015ae8:	61e1      	str	r1, [r4, #28]
 8015aea:	6162      	str	r2, [r4, #20]
 8015aec:	61a3      	str	r3, [r4, #24]
 8015aee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015af2:	689b      	ldr	r3, [r3, #8]
 8015af4:	4798      	blx	r3
 8015af6:	6844      	ldr	r4, [r0, #4]
 8015af8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8015afc:	f105 0110 	add.w	r1, r5, #16
 8015b00:	4668      	mov	r0, sp
 8015b02:	f7f6 fb65 	bl	800c1d0 <ucdr_init_buffer>
 8015b06:	68e3      	ldr	r3, [r4, #12]
 8015b08:	4641      	mov	r1, r8
 8015b0a:	4668      	mov	r0, sp
 8015b0c:	4798      	blx	r3
 8015b0e:	4639      	mov	r1, r7
 8015b10:	4604      	mov	r4, r0
 8015b12:	480a      	ldr	r0, [pc, #40]	@ (8015b3c <rmw_take_request+0xb8>)
 8015b14:	f7ff fe98 	bl	8015848 <put_memory>
 8015b18:	b106      	cbz	r6, 8015b1c <rmw_take_request+0x98>
 8015b1a:	7034      	strb	r4, [r6, #0]
 8015b1c:	f084 0001 	eor.w	r0, r4, #1
 8015b20:	b2c0      	uxtb	r0, r0
 8015b22:	b009      	add	sp, #36	@ 0x24
 8015b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b28:	2001      	movs	r0, #1
 8015b2a:	b009      	add	sp, #36	@ 0x24
 8015b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b30:	200c      	movs	r0, #12
 8015b32:	b009      	add	sp, #36	@ 0x24
 8015b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b38:	080198a8 	.word	0x080198a8
 8015b3c:	2000ae34 	.word	0x2000ae34

08015b40 <rmw_send_response>:
 8015b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b42:	4605      	mov	r5, r0
 8015b44:	6800      	ldr	r0, [r0, #0]
 8015b46:	b091      	sub	sp, #68	@ 0x44
 8015b48:	460c      	mov	r4, r1
 8015b4a:	4616      	mov	r6, r2
 8015b4c:	b128      	cbz	r0, 8015b5a <rmw_send_response+0x1a>
 8015b4e:	4b29      	ldr	r3, [pc, #164]	@ (8015bf4 <rmw_send_response+0xb4>)
 8015b50:	6819      	ldr	r1, [r3, #0]
 8015b52:	f7ea fb65 	bl	8000220 <strcmp>
 8015b56:	2800      	cmp	r0, #0
 8015b58:	d141      	bne.n	8015bde <rmw_send_response+0x9e>
 8015b5a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015b5e:	9306      	str	r3, [sp, #24]
 8015b60:	4623      	mov	r3, r4
 8015b62:	9207      	str	r2, [sp, #28]
 8015b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b68:	686d      	ldr	r5, [r5, #4]
 8015b6a:	789b      	ldrb	r3, [r3, #2]
 8015b6c:	68a1      	ldr	r1, [r4, #8]
 8015b6e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015b72:	f88d 3016 	strb.w	r3, [sp, #22]
 8015b76:	68e2      	ldr	r2, [r4, #12]
 8015b78:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015b7c:	6860      	ldr	r0, [r4, #4]
 8015b7e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015b82:	ab02      	add	r3, sp, #8
 8015b84:	c307      	stmia	r3!, {r0, r1, r2}
 8015b86:	696b      	ldr	r3, [r5, #20]
 8015b88:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	4798      	blx	r3
 8015b8e:	6844      	ldr	r4, [r0, #4]
 8015b90:	4630      	mov	r0, r6
 8015b92:	6923      	ldr	r3, [r4, #16]
 8015b94:	4798      	blx	r3
 8015b96:	f100 0318 	add.w	r3, r0, #24
 8015b9a:	6938      	ldr	r0, [r7, #16]
 8015b9c:	9300      	str	r3, [sp, #0]
 8015b9e:	692a      	ldr	r2, [r5, #16]
 8015ba0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015ba2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ba6:	ab08      	add	r3, sp, #32
 8015ba8:	f7fb f9d0 	bl	8010f4c <uxr_prepare_output_stream>
 8015bac:	b910      	cbnz	r0, 8015bb4 <rmw_send_response+0x74>
 8015bae:	2001      	movs	r0, #1
 8015bb0:	b011      	add	sp, #68	@ 0x44
 8015bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bb4:	a902      	add	r1, sp, #8
 8015bb6:	a808      	add	r0, sp, #32
 8015bb8:	f7fc fa14 	bl	8011fe4 <uxr_serialize_SampleIdentity>
 8015bbc:	68a3      	ldr	r3, [r4, #8]
 8015bbe:	a908      	add	r1, sp, #32
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	4798      	blx	r3
 8015bc4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015bc8:	6938      	ldr	r0, [r7, #16]
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d00a      	beq.n	8015be4 <rmw_send_response+0xa4>
 8015bce:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015bd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015bd4:	f7f9 ff3c 	bl	800fa50 <uxr_run_session_until_confirm_delivery>
 8015bd8:	2000      	movs	r0, #0
 8015bda:	b011      	add	sp, #68	@ 0x44
 8015bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bde:	200c      	movs	r0, #12
 8015be0:	b011      	add	sp, #68	@ 0x44
 8015be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015be4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015be8:	f7f9 fb72 	bl	800f2d0 <uxr_flash_output_streams>
 8015bec:	2000      	movs	r0, #0
 8015bee:	b011      	add	sp, #68	@ 0x44
 8015bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	080198a8 	.word	0x080198a8

08015bf8 <rmw_take_response>:
 8015bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfc:	4604      	mov	r4, r0
 8015bfe:	6800      	ldr	r0, [r0, #0]
 8015c00:	b088      	sub	sp, #32
 8015c02:	4688      	mov	r8, r1
 8015c04:	4617      	mov	r7, r2
 8015c06:	461d      	mov	r5, r3
 8015c08:	b120      	cbz	r0, 8015c14 <rmw_take_response+0x1c>
 8015c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8015c84 <rmw_take_response+0x8c>)
 8015c0c:	6819      	ldr	r1, [r3, #0]
 8015c0e:	f7ea fb07 	bl	8000220 <strcmp>
 8015c12:	bb78      	cbnz	r0, 8015c74 <rmw_take_response+0x7c>
 8015c14:	b10d      	cbz	r5, 8015c1a <rmw_take_response+0x22>
 8015c16:	2300      	movs	r3, #0
 8015c18:	702b      	strb	r3, [r5, #0]
 8015c1a:	6864      	ldr	r4, [r4, #4]
 8015c1c:	f7f8 fd7c 	bl	800e718 <rmw_uxrce_clean_expired_static_input_buffer>
 8015c20:	4620      	mov	r0, r4
 8015c22:	f7f8 fd51 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c26:	4606      	mov	r6, r0
 8015c28:	b340      	cbz	r0, 8015c7c <rmw_take_response+0x84>
 8015c2a:	6963      	ldr	r3, [r4, #20]
 8015c2c:	6884      	ldr	r4, [r0, #8]
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015c34:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015c38:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015c3c:	4798      	blx	r3
 8015c3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015c42:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015c46:	f104 0110 	add.w	r1, r4, #16
 8015c4a:	4668      	mov	r0, sp
 8015c4c:	f7f6 fac0 	bl	800c1d0 <ucdr_init_buffer>
 8015c50:	4639      	mov	r1, r7
 8015c52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c56:	4668      	mov	r0, sp
 8015c58:	4798      	blx	r3
 8015c5a:	4631      	mov	r1, r6
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	480a      	ldr	r0, [pc, #40]	@ (8015c88 <rmw_take_response+0x90>)
 8015c60:	f7ff fdf2 	bl	8015848 <put_memory>
 8015c64:	b105      	cbz	r5, 8015c68 <rmw_take_response+0x70>
 8015c66:	702c      	strb	r4, [r5, #0]
 8015c68:	f084 0001 	eor.w	r0, r4, #1
 8015c6c:	b2c0      	uxtb	r0, r0
 8015c6e:	b008      	add	sp, #32
 8015c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c74:	200c      	movs	r0, #12
 8015c76:	b008      	add	sp, #32
 8015c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c7c:	2001      	movs	r0, #1
 8015c7e:	b008      	add	sp, #32
 8015c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c84:	080198a8 	.word	0x080198a8
 8015c88:	2000ae34 	.word	0x2000ae34

08015c8c <rmw_take_with_info>:
 8015c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c8e:	4604      	mov	r4, r0
 8015c90:	6800      	ldr	r0, [r0, #0]
 8015c92:	b089      	sub	sp, #36	@ 0x24
 8015c94:	460f      	mov	r7, r1
 8015c96:	4615      	mov	r5, r2
 8015c98:	b128      	cbz	r0, 8015ca6 <rmw_take_with_info+0x1a>
 8015c9a:	4b24      	ldr	r3, [pc, #144]	@ (8015d2c <rmw_take_with_info+0xa0>)
 8015c9c:	6819      	ldr	r1, [r3, #0]
 8015c9e:	f7ea fabf 	bl	8000220 <strcmp>
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	d13e      	bne.n	8015d24 <rmw_take_with_info+0x98>
 8015ca6:	b305      	cbz	r5, 8015cea <rmw_take_with_info+0x5e>
 8015ca8:	6864      	ldr	r4, [r4, #4]
 8015caa:	2300      	movs	r3, #0
 8015cac:	702b      	strb	r3, [r5, #0]
 8015cae:	f7f8 fd33 	bl	800e718 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	f7f8 fd08 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015cb8:	4606      	mov	r6, r0
 8015cba:	b1f0      	cbz	r0, 8015cfa <rmw_take_with_info+0x6e>
 8015cbc:	6881      	ldr	r1, [r0, #8]
 8015cbe:	4668      	mov	r0, sp
 8015cc0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015cc4:	3110      	adds	r1, #16
 8015cc6:	f7f6 fa83 	bl	800c1d0 <ucdr_init_buffer>
 8015cca:	69a3      	ldr	r3, [r4, #24]
 8015ccc:	4639      	mov	r1, r7
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	4668      	mov	r0, sp
 8015cd2:	4798      	blx	r3
 8015cd4:	4631      	mov	r1, r6
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	4815      	ldr	r0, [pc, #84]	@ (8015d30 <rmw_take_with_info+0xa4>)
 8015cda:	f7ff fdb5 	bl	8015848 <put_memory>
 8015cde:	702c      	strb	r4, [r5, #0]
 8015ce0:	f084 0001 	eor.w	r0, r4, #1
 8015ce4:	b2c0      	uxtb	r0, r0
 8015ce6:	b009      	add	sp, #36	@ 0x24
 8015ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cea:	6864      	ldr	r4, [r4, #4]
 8015cec:	f7f8 fd14 	bl	800e718 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cf0:	4620      	mov	r0, r4
 8015cf2:	f7f8 fce9 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015cf6:	4605      	mov	r5, r0
 8015cf8:	b910      	cbnz	r0, 8015d00 <rmw_take_with_info+0x74>
 8015cfa:	2001      	movs	r0, #1
 8015cfc:	b009      	add	sp, #36	@ 0x24
 8015cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d00:	68a9      	ldr	r1, [r5, #8]
 8015d02:	4668      	mov	r0, sp
 8015d04:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015d08:	3110      	adds	r1, #16
 8015d0a:	f7f6 fa61 	bl	800c1d0 <ucdr_init_buffer>
 8015d0e:	69a3      	ldr	r3, [r4, #24]
 8015d10:	4639      	mov	r1, r7
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	4668      	mov	r0, sp
 8015d16:	4798      	blx	r3
 8015d18:	4629      	mov	r1, r5
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	4804      	ldr	r0, [pc, #16]	@ (8015d30 <rmw_take_with_info+0xa4>)
 8015d1e:	f7ff fd93 	bl	8015848 <put_memory>
 8015d22:	e7dd      	b.n	8015ce0 <rmw_take_with_info+0x54>
 8015d24:	200c      	movs	r0, #12
 8015d26:	b009      	add	sp, #36	@ 0x24
 8015d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	080198a8 	.word	0x080198a8
 8015d30:	2000ae34 	.word	0x2000ae34

08015d34 <rmw_wait>:
 8015d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d38:	b089      	sub	sp, #36	@ 0x24
 8015d3a:	4605      	mov	r5, r0
 8015d3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015d3e:	460e      	mov	r6, r1
 8015d40:	4698      	mov	r8, r3
 8015d42:	4691      	mov	r9, r2
 8015d44:	2a00      	cmp	r2, #0
 8015d46:	f000 810a 	beq.w	8015f5e <rmw_wait+0x22a>
 8015d4a:	b16c      	cbz	r4, 8015d68 <rmw_wait+0x34>
 8015d4c:	4bae      	ldr	r3, [pc, #696]	@ (8016008 <rmw_wait+0x2d4>)
 8015d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d50:	af04      	add	r7, sp, #16
 8015d52:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015d56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015d5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d5e:	f7ff faaf 	bl	80152c0 <rmw_time_equal>
 8015d62:	2800      	cmp	r0, #0
 8015d64:	f000 8127 	beq.w	8015fb6 <rmw_wait+0x282>
 8015d68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015d6c:	f7f8 fcd4 	bl	800e718 <rmw_uxrce_clean_expired_static_input_buffer>
 8015d70:	4ba6      	ldr	r3, [pc, #664]	@ (801600c <rmw_wait+0x2d8>)
 8015d72:	681c      	ldr	r4, [r3, #0]
 8015d74:	b14c      	cbz	r4, 8015d8a <rmw_wait+0x56>
 8015d76:	4623      	mov	r3, r4
 8015d78:	2100      	movs	r1, #0
 8015d7a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015d7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015d82:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d1f7      	bne.n	8015d7a <rmw_wait+0x46>
 8015d8a:	f1b9 0f00 	cmp.w	r9, #0
 8015d8e:	d011      	beq.n	8015db4 <rmw_wait+0x80>
 8015d90:	f8d9 1000 	ldr.w	r1, [r9]
 8015d94:	b171      	cbz	r1, 8015db4 <rmw_wait+0x80>
 8015d96:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	2001      	movs	r0, #1
 8015d9e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015da2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015da4:	6912      	ldr	r2, [r2, #16]
 8015da6:	3301      	adds	r3, #1
 8015da8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015dac:	4299      	cmp	r1, r3
 8015dae:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015db2:	d1f4      	bne.n	8015d9e <rmw_wait+0x6a>
 8015db4:	f1b8 0f00 	cmp.w	r8, #0
 8015db8:	d011      	beq.n	8015dde <rmw_wait+0xaa>
 8015dba:	f8d8 1000 	ldr.w	r1, [r8]
 8015dbe:	b171      	cbz	r1, 8015dde <rmw_wait+0xaa>
 8015dc0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	2001      	movs	r0, #1
 8015dc8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015dcc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015dce:	6912      	ldr	r2, [r2, #16]
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015dd6:	4299      	cmp	r1, r3
 8015dd8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015ddc:	d1f4      	bne.n	8015dc8 <rmw_wait+0x94>
 8015dde:	b185      	cbz	r5, 8015e02 <rmw_wait+0xce>
 8015de0:	6829      	ldr	r1, [r5, #0]
 8015de2:	b171      	cbz	r1, 8015e02 <rmw_wait+0xce>
 8015de4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015de8:	2300      	movs	r3, #0
 8015dea:	2001      	movs	r0, #1
 8015dec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015df0:	6a12      	ldr	r2, [r2, #32]
 8015df2:	6912      	ldr	r2, [r2, #16]
 8015df4:	3301      	adds	r3, #1
 8015df6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015dfa:	4299      	cmp	r1, r3
 8015dfc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015e00:	d1f4      	bne.n	8015dec <rmw_wait+0xb8>
 8015e02:	b34c      	cbz	r4, 8015e58 <rmw_wait+0x124>
 8015e04:	4622      	mov	r2, r4
 8015e06:	2300      	movs	r3, #0
 8015e08:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015e0c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015e10:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015e14:	440b      	add	r3, r1
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	2a00      	cmp	r2, #0
 8015e1a:	d1f5      	bne.n	8015e08 <rmw_wait+0xd4>
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	f000 8084 	beq.w	8015f2a <rmw_wait+0x1f6>
 8015e22:	1c7a      	adds	r2, r7, #1
 8015e24:	d00d      	beq.n	8015e42 <rmw_wait+0x10e>
 8015e26:	ee07 7a90 	vmov	s15, r7
 8015e2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015e2e:	ee07 3a90 	vmov	s15, r3
 8015e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e3a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015e3e:	ee17 7a90 	vmov	r7, s15
 8015e42:	68a0      	ldr	r0, [r4, #8]
 8015e44:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015e48:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	f040 8090 	bne.w	8015f72 <rmw_wait+0x23e>
 8015e52:	6864      	ldr	r4, [r4, #4]
 8015e54:	2c00      	cmp	r4, #0
 8015e56:	d1f4      	bne.n	8015e42 <rmw_wait+0x10e>
 8015e58:	f1b9 0f00 	cmp.w	r9, #0
 8015e5c:	f000 80bc 	beq.w	8015fd8 <rmw_wait+0x2a4>
 8015e60:	f8d9 7000 	ldr.w	r7, [r9]
 8015e64:	2f00      	cmp	r7, #0
 8015e66:	f000 808e 	beq.w	8015f86 <rmw_wait+0x252>
 8015e6a:	2400      	movs	r4, #0
 8015e6c:	4627      	mov	r7, r4
 8015e6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015e72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e76:	f7f8 fc27 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	d05f      	beq.n	8015f3e <rmw_wait+0x20a>
 8015e7e:	f8d9 3000 	ldr.w	r3, [r9]
 8015e82:	3401      	adds	r4, #1
 8015e84:	42a3      	cmp	r3, r4
 8015e86:	f04f 0701 	mov.w	r7, #1
 8015e8a:	d8f0      	bhi.n	8015e6e <rmw_wait+0x13a>
 8015e8c:	f1b8 0f00 	cmp.w	r8, #0
 8015e90:	d012      	beq.n	8015eb8 <rmw_wait+0x184>
 8015e92:	f8d8 3000 	ldr.w	r3, [r8]
 8015e96:	b17b      	cbz	r3, 8015eb8 <rmw_wait+0x184>
 8015e98:	2400      	movs	r4, #0
 8015e9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015e9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ea2:	f7f8 fc11 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	d051      	beq.n	8015f4e <rmw_wait+0x21a>
 8015eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8015eae:	3401      	adds	r4, #1
 8015eb0:	42a3      	cmp	r3, r4
 8015eb2:	f04f 0701 	mov.w	r7, #1
 8015eb6:	d8f0      	bhi.n	8015e9a <rmw_wait+0x166>
 8015eb8:	b1dd      	cbz	r5, 8015ef2 <rmw_wait+0x1be>
 8015eba:	682b      	ldr	r3, [r5, #0]
 8015ebc:	b1cb      	cbz	r3, 8015ef2 <rmw_wait+0x1be>
 8015ebe:	2400      	movs	r4, #0
 8015ec0:	686b      	ldr	r3, [r5, #4]
 8015ec2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015ec6:	f7f8 fbff 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015eca:	b158      	cbz	r0, 8015ee4 <rmw_wait+0x1b0>
 8015ecc:	682b      	ldr	r3, [r5, #0]
 8015ece:	3401      	adds	r4, #1
 8015ed0:	42a3      	cmp	r3, r4
 8015ed2:	d969      	bls.n	8015fa8 <rmw_wait+0x274>
 8015ed4:	686b      	ldr	r3, [r5, #4]
 8015ed6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015eda:	2701      	movs	r7, #1
 8015edc:	f7f8 fbf4 	bl	800e6c8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ee0:	2800      	cmp	r0, #0
 8015ee2:	d1f3      	bne.n	8015ecc <rmw_wait+0x198>
 8015ee4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015ee8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015eec:	3401      	adds	r4, #1
 8015eee:	42a3      	cmp	r3, r4
 8015ef0:	d8e6      	bhi.n	8015ec0 <rmw_wait+0x18c>
 8015ef2:	b1a6      	cbz	r6, 8015f1e <rmw_wait+0x1ea>
 8015ef4:	6834      	ldr	r4, [r6, #0]
 8015ef6:	b194      	cbz	r4, 8015f1e <rmw_wait+0x1ea>
 8015ef8:	2300      	movs	r3, #0
 8015efa:	461d      	mov	r5, r3
 8015efc:	e004      	b.n	8015f08 <rmw_wait+0x1d4>
 8015efe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015f02:	3301      	adds	r3, #1
 8015f04:	42a3      	cmp	r3, r4
 8015f06:	d00a      	beq.n	8015f1e <rmw_wait+0x1ea>
 8015f08:	6870      	ldr	r0, [r6, #4]
 8015f0a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015f0e:	7c0a      	ldrb	r2, [r1, #16]
 8015f10:	2a00      	cmp	r2, #0
 8015f12:	d0f4      	beq.n	8015efe <rmw_wait+0x1ca>
 8015f14:	3301      	adds	r3, #1
 8015f16:	42a3      	cmp	r3, r4
 8015f18:	740d      	strb	r5, [r1, #16]
 8015f1a:	4617      	mov	r7, r2
 8015f1c:	d1f4      	bne.n	8015f08 <rmw_wait+0x1d4>
 8015f1e:	2f00      	cmp	r7, #0
 8015f20:	d03e      	beq.n	8015fa0 <rmw_wait+0x26c>
 8015f22:	2000      	movs	r0, #0
 8015f24:	b009      	add	sp, #36	@ 0x24
 8015f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f2a:	68a0      	ldr	r0, [r4, #8]
 8015f2c:	2100      	movs	r1, #0
 8015f2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f32:	f7f9 fd53 	bl	800f9dc <uxr_run_session_timeout>
 8015f36:	6864      	ldr	r4, [r4, #4]
 8015f38:	2c00      	cmp	r4, #0
 8015f3a:	d1f6      	bne.n	8015f2a <rmw_wait+0x1f6>
 8015f3c:	e78c      	b.n	8015e58 <rmw_wait+0x124>
 8015f3e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015f42:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f46:	3401      	adds	r4, #1
 8015f48:	42a3      	cmp	r3, r4
 8015f4a:	d890      	bhi.n	8015e6e <rmw_wait+0x13a>
 8015f4c:	e79e      	b.n	8015e8c <rmw_wait+0x158>
 8015f4e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015f52:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015f56:	3401      	adds	r4, #1
 8015f58:	429c      	cmp	r4, r3
 8015f5a:	d39e      	bcc.n	8015e9a <rmw_wait+0x166>
 8015f5c:	e7ac      	b.n	8015eb8 <rmw_wait+0x184>
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f47f aef3 	bne.w	8015d4a <rmw_wait+0x16>
 8015f64:	2800      	cmp	r0, #0
 8015f66:	f47f aef0 	bne.w	8015d4a <rmw_wait+0x16>
 8015f6a:	2900      	cmp	r1, #0
 8015f6c:	f47f aeed 	bne.w	8015d4a <rmw_wait+0x16>
 8015f70:	e7d7      	b.n	8015f22 <rmw_wait+0x1ee>
 8015f72:	4639      	mov	r1, r7
 8015f74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f78:	f7f9 fd4a 	bl	800fa10 <uxr_run_session_until_data>
 8015f7c:	6864      	ldr	r4, [r4, #4]
 8015f7e:	2c00      	cmp	r4, #0
 8015f80:	f47f af5f 	bne.w	8015e42 <rmw_wait+0x10e>
 8015f84:	e768      	b.n	8015e58 <rmw_wait+0x124>
 8015f86:	f1b8 0f00 	cmp.w	r8, #0
 8015f8a:	d032      	beq.n	8015ff2 <rmw_wait+0x2be>
 8015f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d181      	bne.n	8015e98 <rmw_wait+0x164>
 8015f94:	461f      	mov	r7, r3
 8015f96:	2d00      	cmp	r5, #0
 8015f98:	d18f      	bne.n	8015eba <rmw_wait+0x186>
 8015f9a:	462f      	mov	r7, r5
 8015f9c:	2e00      	cmp	r6, #0
 8015f9e:	d1a9      	bne.n	8015ef4 <rmw_wait+0x1c0>
 8015fa0:	2002      	movs	r0, #2
 8015fa2:	b009      	add	sp, #36	@ 0x24
 8015fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fa8:	2e00      	cmp	r6, #0
 8015faa:	d0ba      	beq.n	8015f22 <rmw_wait+0x1ee>
 8015fac:	6834      	ldr	r4, [r6, #0]
 8015fae:	2701      	movs	r7, #1
 8015fb0:	2c00      	cmp	r4, #0
 8015fb2:	d1a1      	bne.n	8015ef8 <rmw_wait+0x1c4>
 8015fb4:	e7b5      	b.n	8015f22 <rmw_wait+0x1ee>
 8015fb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015fba:	f7ff f9d5 	bl	8015368 <rmw_time_total_nsec>
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	4a13      	ldr	r2, [pc, #76]	@ (8016010 <rmw_wait+0x2dc>)
 8015fc2:	f7ea fbf1 	bl	80007a8 <__aeabi_uldivmod>
 8015fc6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015fca:	f171 0300 	sbcs.w	r3, r1, #0
 8015fce:	4607      	mov	r7, r0
 8015fd0:	bfa8      	it	ge
 8015fd2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015fd6:	e6c9      	b.n	8015d6c <rmw_wait+0x38>
 8015fd8:	f1b8 0f00 	cmp.w	r8, #0
 8015fdc:	d009      	beq.n	8015ff2 <rmw_wait+0x2be>
 8015fde:	f8d8 3000 	ldr.w	r3, [r8]
 8015fe2:	464f      	mov	r7, r9
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	f47f af57 	bne.w	8015e98 <rmw_wait+0x164>
 8015fea:	2d00      	cmp	r5, #0
 8015fec:	f47f af65 	bne.w	8015eba <rmw_wait+0x186>
 8015ff0:	e7d3      	b.n	8015f9a <rmw_wait+0x266>
 8015ff2:	b17d      	cbz	r5, 8016014 <rmw_wait+0x2e0>
 8015ff4:	682b      	ldr	r3, [r5, #0]
 8015ff6:	4647      	mov	r7, r8
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	f47f af60 	bne.w	8015ebe <rmw_wait+0x18a>
 8015ffe:	2e00      	cmp	r6, #0
 8016000:	f47f af78 	bne.w	8015ef4 <rmw_wait+0x1c0>
 8016004:	e7cc      	b.n	8015fa0 <rmw_wait+0x26c>
 8016006:	bf00      	nop
 8016008:	08018d88 	.word	0x08018d88
 801600c:	2000ae24 	.word	0x2000ae24
 8016010:	000f4240 	.word	0x000f4240
 8016014:	2e00      	cmp	r6, #0
 8016016:	d0c3      	beq.n	8015fa0 <rmw_wait+0x26c>
 8016018:	6834      	ldr	r4, [r6, #0]
 801601a:	462f      	mov	r7, r5
 801601c:	2c00      	cmp	r4, #0
 801601e:	f47f af6b 	bne.w	8015ef8 <rmw_wait+0x1c4>
 8016022:	e7bd      	b.n	8015fa0 <rmw_wait+0x26c>

08016024 <rmw_create_wait_set>:
 8016024:	b508      	push	{r3, lr}
 8016026:	4803      	ldr	r0, [pc, #12]	@ (8016034 <rmw_create_wait_set+0x10>)
 8016028:	f7ff fbfe 	bl	8015828 <get_memory>
 801602c:	b108      	cbz	r0, 8016032 <rmw_create_wait_set+0xe>
 801602e:	6880      	ldr	r0, [r0, #8]
 8016030:	3010      	adds	r0, #16
 8016032:	bd08      	pop	{r3, pc}
 8016034:	2000ae64 	.word	0x2000ae64

08016038 <rmw_destroy_wait_set>:
 8016038:	b508      	push	{r3, lr}
 801603a:	4b08      	ldr	r3, [pc, #32]	@ (801605c <rmw_destroy_wait_set+0x24>)
 801603c:	6819      	ldr	r1, [r3, #0]
 801603e:	b911      	cbnz	r1, 8016046 <rmw_destroy_wait_set+0xe>
 8016040:	e00a      	b.n	8016058 <rmw_destroy_wait_set+0x20>
 8016042:	6849      	ldr	r1, [r1, #4]
 8016044:	b141      	cbz	r1, 8016058 <rmw_destroy_wait_set+0x20>
 8016046:	688b      	ldr	r3, [r1, #8]
 8016048:	3310      	adds	r3, #16
 801604a:	4298      	cmp	r0, r3
 801604c:	d1f9      	bne.n	8016042 <rmw_destroy_wait_set+0xa>
 801604e:	4803      	ldr	r0, [pc, #12]	@ (801605c <rmw_destroy_wait_set+0x24>)
 8016050:	f7ff fbfa 	bl	8015848 <put_memory>
 8016054:	2000      	movs	r0, #0
 8016056:	bd08      	pop	{r3, pc}
 8016058:	2001      	movs	r0, #1
 801605a:	bd08      	pop	{r3, pc}
 801605c:	2000ae64 	.word	0x2000ae64

08016060 <rmw_uros_epoch_nanos>:
 8016060:	4b05      	ldr	r3, [pc, #20]	@ (8016078 <rmw_uros_epoch_nanos+0x18>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	b123      	cbz	r3, 8016070 <rmw_uros_epoch_nanos+0x10>
 8016066:	6898      	ldr	r0, [r3, #8]
 8016068:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801606c:	f7f9 b926 	b.w	800f2bc <uxr_epoch_nanos>
 8016070:	2000      	movs	r0, #0
 8016072:	2100      	movs	r1, #0
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	2000ae24 	.word	0x2000ae24

0801607c <ucdr_serialize_endian_array_char>:
 801607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016080:	4619      	mov	r1, r3
 8016082:	461f      	mov	r7, r3
 8016084:	4605      	mov	r5, r0
 8016086:	4690      	mov	r8, r2
 8016088:	f7f6 f84e 	bl	800c128 <ucdr_check_buffer_available_for>
 801608c:	b9e0      	cbnz	r0, 80160c8 <ucdr_serialize_endian_array_char+0x4c>
 801608e:	463e      	mov	r6, r7
 8016090:	e009      	b.n	80160a6 <ucdr_serialize_endian_array_char+0x2a>
 8016092:	68a8      	ldr	r0, [r5, #8]
 8016094:	f001 ff59 	bl	8017f4a <memcpy>
 8016098:	68ab      	ldr	r3, [r5, #8]
 801609a:	6928      	ldr	r0, [r5, #16]
 801609c:	4423      	add	r3, r4
 801609e:	4420      	add	r0, r4
 80160a0:	1b36      	subs	r6, r6, r4
 80160a2:	60ab      	str	r3, [r5, #8]
 80160a4:	6128      	str	r0, [r5, #16]
 80160a6:	4631      	mov	r1, r6
 80160a8:	2201      	movs	r2, #1
 80160aa:	4628      	mov	r0, r5
 80160ac:	f7f6 f8c4 	bl	800c238 <ucdr_check_final_buffer_behavior_array>
 80160b0:	1bb9      	subs	r1, r7, r6
 80160b2:	4441      	add	r1, r8
 80160b4:	4604      	mov	r4, r0
 80160b6:	4602      	mov	r2, r0
 80160b8:	2800      	cmp	r0, #0
 80160ba:	d1ea      	bne.n	8016092 <ucdr_serialize_endian_array_char+0x16>
 80160bc:	2301      	movs	r3, #1
 80160be:	7da8      	ldrb	r0, [r5, #22]
 80160c0:	756b      	strb	r3, [r5, #21]
 80160c2:	4058      	eors	r0, r3
 80160c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160c8:	463a      	mov	r2, r7
 80160ca:	68a8      	ldr	r0, [r5, #8]
 80160cc:	4641      	mov	r1, r8
 80160ce:	f001 ff3c 	bl	8017f4a <memcpy>
 80160d2:	68aa      	ldr	r2, [r5, #8]
 80160d4:	692b      	ldr	r3, [r5, #16]
 80160d6:	443a      	add	r2, r7
 80160d8:	443b      	add	r3, r7
 80160da:	60aa      	str	r2, [r5, #8]
 80160dc:	612b      	str	r3, [r5, #16]
 80160de:	e7ed      	b.n	80160bc <ucdr_serialize_endian_array_char+0x40>

080160e0 <ucdr_deserialize_endian_array_char>:
 80160e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e4:	4619      	mov	r1, r3
 80160e6:	461f      	mov	r7, r3
 80160e8:	4605      	mov	r5, r0
 80160ea:	4690      	mov	r8, r2
 80160ec:	f7f6 f81c 	bl	800c128 <ucdr_check_buffer_available_for>
 80160f0:	b9e0      	cbnz	r0, 801612c <ucdr_deserialize_endian_array_char+0x4c>
 80160f2:	463e      	mov	r6, r7
 80160f4:	e009      	b.n	801610a <ucdr_deserialize_endian_array_char+0x2a>
 80160f6:	68a9      	ldr	r1, [r5, #8]
 80160f8:	f001 ff27 	bl	8017f4a <memcpy>
 80160fc:	68ab      	ldr	r3, [r5, #8]
 80160fe:	6928      	ldr	r0, [r5, #16]
 8016100:	4423      	add	r3, r4
 8016102:	4420      	add	r0, r4
 8016104:	1b36      	subs	r6, r6, r4
 8016106:	60ab      	str	r3, [r5, #8]
 8016108:	6128      	str	r0, [r5, #16]
 801610a:	2201      	movs	r2, #1
 801610c:	4631      	mov	r1, r6
 801610e:	4628      	mov	r0, r5
 8016110:	f7f6 f892 	bl	800c238 <ucdr_check_final_buffer_behavior_array>
 8016114:	4604      	mov	r4, r0
 8016116:	1bb8      	subs	r0, r7, r6
 8016118:	4440      	add	r0, r8
 801611a:	4622      	mov	r2, r4
 801611c:	2c00      	cmp	r4, #0
 801611e:	d1ea      	bne.n	80160f6 <ucdr_deserialize_endian_array_char+0x16>
 8016120:	2301      	movs	r3, #1
 8016122:	7da8      	ldrb	r0, [r5, #22]
 8016124:	756b      	strb	r3, [r5, #21]
 8016126:	4058      	eors	r0, r3
 8016128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801612c:	463a      	mov	r2, r7
 801612e:	68a9      	ldr	r1, [r5, #8]
 8016130:	4640      	mov	r0, r8
 8016132:	f001 ff0a 	bl	8017f4a <memcpy>
 8016136:	68aa      	ldr	r2, [r5, #8]
 8016138:	692b      	ldr	r3, [r5, #16]
 801613a:	443a      	add	r2, r7
 801613c:	443b      	add	r3, r7
 801613e:	60aa      	str	r2, [r5, #8]
 8016140:	612b      	str	r3, [r5, #16]
 8016142:	e7ed      	b.n	8016120 <ucdr_deserialize_endian_array_char+0x40>

08016144 <ucdr_serialize_array_uint8_t>:
 8016144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016148:	4688      	mov	r8, r1
 801614a:	4611      	mov	r1, r2
 801614c:	4617      	mov	r7, r2
 801614e:	4605      	mov	r5, r0
 8016150:	f7f5 ffea 	bl	800c128 <ucdr_check_buffer_available_for>
 8016154:	b9e0      	cbnz	r0, 8016190 <ucdr_serialize_array_uint8_t+0x4c>
 8016156:	463e      	mov	r6, r7
 8016158:	e009      	b.n	801616e <ucdr_serialize_array_uint8_t+0x2a>
 801615a:	68a8      	ldr	r0, [r5, #8]
 801615c:	f001 fef5 	bl	8017f4a <memcpy>
 8016160:	68aa      	ldr	r2, [r5, #8]
 8016162:	692b      	ldr	r3, [r5, #16]
 8016164:	4422      	add	r2, r4
 8016166:	4423      	add	r3, r4
 8016168:	1b36      	subs	r6, r6, r4
 801616a:	60aa      	str	r2, [r5, #8]
 801616c:	612b      	str	r3, [r5, #16]
 801616e:	4631      	mov	r1, r6
 8016170:	2201      	movs	r2, #1
 8016172:	4628      	mov	r0, r5
 8016174:	f7f6 f860 	bl	800c238 <ucdr_check_final_buffer_behavior_array>
 8016178:	1bb9      	subs	r1, r7, r6
 801617a:	4441      	add	r1, r8
 801617c:	4604      	mov	r4, r0
 801617e:	4602      	mov	r2, r0
 8016180:	2800      	cmp	r0, #0
 8016182:	d1ea      	bne.n	801615a <ucdr_serialize_array_uint8_t+0x16>
 8016184:	2301      	movs	r3, #1
 8016186:	7da8      	ldrb	r0, [r5, #22]
 8016188:	756b      	strb	r3, [r5, #21]
 801618a:	4058      	eors	r0, r3
 801618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016190:	463a      	mov	r2, r7
 8016192:	68a8      	ldr	r0, [r5, #8]
 8016194:	4641      	mov	r1, r8
 8016196:	f001 fed8 	bl	8017f4a <memcpy>
 801619a:	68aa      	ldr	r2, [r5, #8]
 801619c:	692b      	ldr	r3, [r5, #16]
 801619e:	443a      	add	r2, r7
 80161a0:	443b      	add	r3, r7
 80161a2:	60aa      	str	r2, [r5, #8]
 80161a4:	612b      	str	r3, [r5, #16]
 80161a6:	e7ed      	b.n	8016184 <ucdr_serialize_array_uint8_t+0x40>

080161a8 <ucdr_serialize_endian_array_uint8_t>:
 80161a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ac:	4619      	mov	r1, r3
 80161ae:	461f      	mov	r7, r3
 80161b0:	4605      	mov	r5, r0
 80161b2:	4690      	mov	r8, r2
 80161b4:	f7f5 ffb8 	bl	800c128 <ucdr_check_buffer_available_for>
 80161b8:	b9e0      	cbnz	r0, 80161f4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80161ba:	463e      	mov	r6, r7
 80161bc:	e009      	b.n	80161d2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80161be:	68a8      	ldr	r0, [r5, #8]
 80161c0:	f001 fec3 	bl	8017f4a <memcpy>
 80161c4:	68ab      	ldr	r3, [r5, #8]
 80161c6:	6928      	ldr	r0, [r5, #16]
 80161c8:	4423      	add	r3, r4
 80161ca:	4420      	add	r0, r4
 80161cc:	1b36      	subs	r6, r6, r4
 80161ce:	60ab      	str	r3, [r5, #8]
 80161d0:	6128      	str	r0, [r5, #16]
 80161d2:	4631      	mov	r1, r6
 80161d4:	2201      	movs	r2, #1
 80161d6:	4628      	mov	r0, r5
 80161d8:	f7f6 f82e 	bl	800c238 <ucdr_check_final_buffer_behavior_array>
 80161dc:	1bb9      	subs	r1, r7, r6
 80161de:	4441      	add	r1, r8
 80161e0:	4604      	mov	r4, r0
 80161e2:	4602      	mov	r2, r0
 80161e4:	2800      	cmp	r0, #0
 80161e6:	d1ea      	bne.n	80161be <ucdr_serialize_endian_array_uint8_t+0x16>
 80161e8:	2301      	movs	r3, #1
 80161ea:	7da8      	ldrb	r0, [r5, #22]
 80161ec:	756b      	strb	r3, [r5, #21]
 80161ee:	4058      	eors	r0, r3
 80161f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f4:	463a      	mov	r2, r7
 80161f6:	68a8      	ldr	r0, [r5, #8]
 80161f8:	4641      	mov	r1, r8
 80161fa:	f001 fea6 	bl	8017f4a <memcpy>
 80161fe:	68aa      	ldr	r2, [r5, #8]
 8016200:	692b      	ldr	r3, [r5, #16]
 8016202:	443a      	add	r2, r7
 8016204:	443b      	add	r3, r7
 8016206:	60aa      	str	r2, [r5, #8]
 8016208:	612b      	str	r3, [r5, #16]
 801620a:	e7ed      	b.n	80161e8 <ucdr_serialize_endian_array_uint8_t+0x40>

0801620c <ucdr_deserialize_array_uint8_t>:
 801620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016210:	4688      	mov	r8, r1
 8016212:	4611      	mov	r1, r2
 8016214:	4617      	mov	r7, r2
 8016216:	4605      	mov	r5, r0
 8016218:	f7f5 ff86 	bl	800c128 <ucdr_check_buffer_available_for>
 801621c:	b9e0      	cbnz	r0, 8016258 <ucdr_deserialize_array_uint8_t+0x4c>
 801621e:	463e      	mov	r6, r7
 8016220:	e009      	b.n	8016236 <ucdr_deserialize_array_uint8_t+0x2a>
 8016222:	68a9      	ldr	r1, [r5, #8]
 8016224:	f001 fe91 	bl	8017f4a <memcpy>
 8016228:	68aa      	ldr	r2, [r5, #8]
 801622a:	692b      	ldr	r3, [r5, #16]
 801622c:	4422      	add	r2, r4
 801622e:	4423      	add	r3, r4
 8016230:	1b36      	subs	r6, r6, r4
 8016232:	60aa      	str	r2, [r5, #8]
 8016234:	612b      	str	r3, [r5, #16]
 8016236:	2201      	movs	r2, #1
 8016238:	4631      	mov	r1, r6
 801623a:	4628      	mov	r0, r5
 801623c:	f7f5 fffc 	bl	800c238 <ucdr_check_final_buffer_behavior_array>
 8016240:	4604      	mov	r4, r0
 8016242:	1bb8      	subs	r0, r7, r6
 8016244:	4440      	add	r0, r8
 8016246:	4622      	mov	r2, r4
 8016248:	2c00      	cmp	r4, #0
 801624a:	d1ea      	bne.n	8016222 <ucdr_deserialize_array_uint8_t+0x16>
 801624c:	2301      	movs	r3, #1
 801624e:	7da8      	ldrb	r0, [r5, #22]
 8016250:	756b      	strb	r3, [r5, #21]
 8016252:	4058      	eors	r0, r3
 8016254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016258:	463a      	mov	r2, r7
 801625a:	68a9      	ldr	r1, [r5, #8]
 801625c:	4640      	mov	r0, r8
 801625e:	f001 fe74 	bl	8017f4a <memcpy>
 8016262:	68aa      	ldr	r2, [r5, #8]
 8016264:	692b      	ldr	r3, [r5, #16]
 8016266:	443a      	add	r2, r7
 8016268:	443b      	add	r3, r7
 801626a:	60aa      	str	r2, [r5, #8]
 801626c:	612b      	str	r3, [r5, #16]
 801626e:	e7ed      	b.n	801624c <ucdr_deserialize_array_uint8_t+0x40>

08016270 <ucdr_deserialize_endian_array_uint8_t>:
 8016270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016274:	4619      	mov	r1, r3
 8016276:	461f      	mov	r7, r3
 8016278:	4605      	mov	r5, r0
 801627a:	4690      	mov	r8, r2
 801627c:	f7f5 ff54 	bl	800c128 <ucdr_check_buffer_available_for>
 8016280:	b9e0      	cbnz	r0, 80162bc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8016282:	463e      	mov	r6, r7
 8016284:	e009      	b.n	801629a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016286:	68a9      	ldr	r1, [r5, #8]
 8016288:	f001 fe5f 	bl	8017f4a <memcpy>
 801628c:	68ab      	ldr	r3, [r5, #8]
 801628e:	6928      	ldr	r0, [r5, #16]
 8016290:	4423      	add	r3, r4
 8016292:	4420      	add	r0, r4
 8016294:	1b36      	subs	r6, r6, r4
 8016296:	60ab      	str	r3, [r5, #8]
 8016298:	6128      	str	r0, [r5, #16]
 801629a:	2201      	movs	r2, #1
 801629c:	4631      	mov	r1, r6
 801629e:	4628      	mov	r0, r5
 80162a0:	f7f5 ffca 	bl	800c238 <ucdr_check_final_buffer_behavior_array>
 80162a4:	4604      	mov	r4, r0
 80162a6:	1bb8      	subs	r0, r7, r6
 80162a8:	4440      	add	r0, r8
 80162aa:	4622      	mov	r2, r4
 80162ac:	2c00      	cmp	r4, #0
 80162ae:	d1ea      	bne.n	8016286 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80162b0:	2301      	movs	r3, #1
 80162b2:	7da8      	ldrb	r0, [r5, #22]
 80162b4:	756b      	strb	r3, [r5, #21]
 80162b6:	4058      	eors	r0, r3
 80162b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162bc:	463a      	mov	r2, r7
 80162be:	68a9      	ldr	r1, [r5, #8]
 80162c0:	4640      	mov	r0, r8
 80162c2:	f001 fe42 	bl	8017f4a <memcpy>
 80162c6:	68aa      	ldr	r2, [r5, #8]
 80162c8:	692b      	ldr	r3, [r5, #16]
 80162ca:	443a      	add	r2, r7
 80162cc:	443b      	add	r3, r7
 80162ce:	60aa      	str	r2, [r5, #8]
 80162d0:	612b      	str	r3, [r5, #16]
 80162d2:	e7ed      	b.n	80162b0 <ucdr_deserialize_endian_array_uint8_t+0x40>

080162d4 <ucdr_serialize_sequence_char>:
 80162d4:	b570      	push	{r4, r5, r6, lr}
 80162d6:	4615      	mov	r5, r2
 80162d8:	460e      	mov	r6, r1
 80162da:	7d01      	ldrb	r1, [r0, #20]
 80162dc:	4604      	mov	r4, r0
 80162de:	f7f5 f8e3 	bl	800b4a8 <ucdr_serialize_endian_uint32_t>
 80162e2:	b90d      	cbnz	r5, 80162e8 <ucdr_serialize_sequence_char+0x14>
 80162e4:	2001      	movs	r0, #1
 80162e6:	bd70      	pop	{r4, r5, r6, pc}
 80162e8:	7d21      	ldrb	r1, [r4, #20]
 80162ea:	462b      	mov	r3, r5
 80162ec:	4632      	mov	r2, r6
 80162ee:	4620      	mov	r0, r4
 80162f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162f4:	f7ff bec2 	b.w	801607c <ucdr_serialize_endian_array_char>

080162f8 <ucdr_deserialize_sequence_char>:
 80162f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162fc:	461d      	mov	r5, r3
 80162fe:	4616      	mov	r6, r2
 8016300:	460f      	mov	r7, r1
 8016302:	461a      	mov	r2, r3
 8016304:	7d01      	ldrb	r1, [r0, #20]
 8016306:	4604      	mov	r4, r0
 8016308:	f7f5 f9f6 	bl	800b6f8 <ucdr_deserialize_endian_uint32_t>
 801630c:	682b      	ldr	r3, [r5, #0]
 801630e:	429e      	cmp	r6, r3
 8016310:	bf3c      	itt	cc
 8016312:	2201      	movcc	r2, #1
 8016314:	75a2      	strbcc	r2, [r4, #22]
 8016316:	b913      	cbnz	r3, 801631e <ucdr_deserialize_sequence_char+0x26>
 8016318:	2001      	movs	r0, #1
 801631a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801631e:	7d21      	ldrb	r1, [r4, #20]
 8016320:	463a      	mov	r2, r7
 8016322:	4620      	mov	r0, r4
 8016324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016328:	f7ff beda 	b.w	80160e0 <ucdr_deserialize_endian_array_char>

0801632c <ucdr_serialize_sequence_uint8_t>:
 801632c:	b570      	push	{r4, r5, r6, lr}
 801632e:	4615      	mov	r5, r2
 8016330:	460e      	mov	r6, r1
 8016332:	7d01      	ldrb	r1, [r0, #20]
 8016334:	4604      	mov	r4, r0
 8016336:	f7f5 f8b7 	bl	800b4a8 <ucdr_serialize_endian_uint32_t>
 801633a:	b90d      	cbnz	r5, 8016340 <ucdr_serialize_sequence_uint8_t+0x14>
 801633c:	2001      	movs	r0, #1
 801633e:	bd70      	pop	{r4, r5, r6, pc}
 8016340:	7d21      	ldrb	r1, [r4, #20]
 8016342:	462b      	mov	r3, r5
 8016344:	4632      	mov	r2, r6
 8016346:	4620      	mov	r0, r4
 8016348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801634c:	f7ff bf2c 	b.w	80161a8 <ucdr_serialize_endian_array_uint8_t>

08016350 <ucdr_deserialize_sequence_uint8_t>:
 8016350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016354:	461d      	mov	r5, r3
 8016356:	4616      	mov	r6, r2
 8016358:	460f      	mov	r7, r1
 801635a:	461a      	mov	r2, r3
 801635c:	7d01      	ldrb	r1, [r0, #20]
 801635e:	4604      	mov	r4, r0
 8016360:	f7f5 f9ca 	bl	800b6f8 <ucdr_deserialize_endian_uint32_t>
 8016364:	682b      	ldr	r3, [r5, #0]
 8016366:	429e      	cmp	r6, r3
 8016368:	bf3c      	itt	cc
 801636a:	2201      	movcc	r2, #1
 801636c:	75a2      	strbcc	r2, [r4, #22]
 801636e:	b913      	cbnz	r3, 8016376 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016370:	2001      	movs	r0, #1
 8016372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016376:	7d21      	ldrb	r1, [r4, #20]
 8016378:	463a      	mov	r2, r7
 801637a:	4620      	mov	r0, r4
 801637c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016380:	f7ff bf76 	b.w	8016270 <ucdr_deserialize_endian_array_uint8_t>

08016384 <ucdr_serialize_string>:
 8016384:	b510      	push	{r4, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	4604      	mov	r4, r0
 801638a:	4608      	mov	r0, r1
 801638c:	9101      	str	r1, [sp, #4]
 801638e:	f7e9 ff51 	bl	8000234 <strlen>
 8016392:	9901      	ldr	r1, [sp, #4]
 8016394:	1c42      	adds	r2, r0, #1
 8016396:	4620      	mov	r0, r4
 8016398:	b002      	add	sp, #8
 801639a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801639e:	f7ff bf99 	b.w	80162d4 <ucdr_serialize_sequence_char>
 80163a2:	bf00      	nop

080163a4 <ucdr_deserialize_string>:
 80163a4:	b500      	push	{lr}
 80163a6:	b083      	sub	sp, #12
 80163a8:	ab01      	add	r3, sp, #4
 80163aa:	f7ff ffa5 	bl	80162f8 <ucdr_deserialize_sequence_char>
 80163ae:	b003      	add	sp, #12
 80163b0:	f85d fb04 	ldr.w	pc, [sp], #4

080163b4 <uxr_init_input_best_effort_stream>:
 80163b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80163b8:	8003      	strh	r3, [r0, #0]
 80163ba:	4770      	bx	lr

080163bc <uxr_reset_input_best_effort_stream>:
 80163bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80163c0:	8003      	strh	r3, [r0, #0]
 80163c2:	4770      	bx	lr

080163c4 <uxr_receive_best_effort_message>:
 80163c4:	b538      	push	{r3, r4, r5, lr}
 80163c6:	4604      	mov	r4, r0
 80163c8:	8800      	ldrh	r0, [r0, #0]
 80163ca:	460d      	mov	r5, r1
 80163cc:	f000 fd42 	bl	8016e54 <uxr_seq_num_cmp>
 80163d0:	4603      	mov	r3, r0
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80163d8:	bfb8      	it	lt
 80163da:	8025      	strhlt	r5, [r4, #0]
 80163dc:	bd38      	pop	{r3, r4, r5, pc}
 80163de:	bf00      	nop

080163e0 <on_full_input_buffer>:
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	4605      	mov	r5, r0
 80163e4:	460c      	mov	r4, r1
 80163e6:	682b      	ldr	r3, [r5, #0]
 80163e8:	6809      	ldr	r1, [r1, #0]
 80163ea:	8920      	ldrh	r0, [r4, #8]
 80163ec:	6862      	ldr	r2, [r4, #4]
 80163ee:	fbb2 f2f0 	udiv	r2, r2, r0
 80163f2:	eba3 0c01 	sub.w	ip, r3, r1
 80163f6:	fbbc fcf2 	udiv	ip, ip, r2
 80163fa:	f10c 0c01 	add.w	ip, ip, #1
 80163fe:	fa1f f38c 	uxth.w	r3, ip
 8016402:	fbb3 f6f0 	udiv	r6, r3, r0
 8016406:	fb00 3316 	mls	r3, r0, r6, r3
 801640a:	b29b      	uxth	r3, r3
 801640c:	fb02 f303 	mul.w	r3, r2, r3
 8016410:	1d18      	adds	r0, r3, #4
 8016412:	4408      	add	r0, r1
 8016414:	7d26      	ldrb	r6, [r4, #20]
 8016416:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801641a:	b116      	cbz	r6, 8016422 <on_full_input_buffer+0x42>
 801641c:	2600      	movs	r6, #0
 801641e:	f840 6c04 	str.w	r6, [r0, #-4]
 8016422:	2a03      	cmp	r2, #3
 8016424:	d801      	bhi.n	801642a <on_full_input_buffer+0x4a>
 8016426:	2001      	movs	r0, #1
 8016428:	bd70      	pop	{r4, r5, r6, pc}
 801642a:	3308      	adds	r3, #8
 801642c:	4419      	add	r1, r3
 801642e:	4628      	mov	r0, r5
 8016430:	692b      	ldr	r3, [r5, #16]
 8016432:	3a04      	subs	r2, #4
 8016434:	f7f5 fec4 	bl	800c1c0 <ucdr_init_buffer_origin>
 8016438:	4628      	mov	r0, r5
 801643a:	4903      	ldr	r1, [pc, #12]	@ (8016448 <on_full_input_buffer+0x68>)
 801643c:	4622      	mov	r2, r4
 801643e:	f7f5 fe9b 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 8016442:	2000      	movs	r0, #0
 8016444:	bd70      	pop	{r4, r5, r6, pc}
 8016446:	bf00      	nop
 8016448:	080163e1 	.word	0x080163e1

0801644c <uxr_init_input_reliable_stream>:
 801644c:	b500      	push	{lr}
 801644e:	e9c0 1200 	strd	r1, r2, [r0]
 8016452:	f04f 0e00 	mov.w	lr, #0
 8016456:	9a01      	ldr	r2, [sp, #4]
 8016458:	8103      	strh	r3, [r0, #8]
 801645a:	6102      	str	r2, [r0, #16]
 801645c:	f880 e014 	strb.w	lr, [r0, #20]
 8016460:	b1d3      	cbz	r3, 8016498 <uxr_init_input_reliable_stream+0x4c>
 8016462:	f8c1 e000 	str.w	lr, [r1]
 8016466:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801646a:	f1bc 0f01 	cmp.w	ip, #1
 801646e:	d913      	bls.n	8016498 <uxr_init_input_reliable_stream+0x4c>
 8016470:	2301      	movs	r3, #1
 8016472:	fbb3 f1fc 	udiv	r1, r3, ip
 8016476:	fb0c 3111 	mls	r1, ip, r1, r3
 801647a:	b289      	uxth	r1, r1
 801647c:	6842      	ldr	r2, [r0, #4]
 801647e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016482:	fb01 f202 	mul.w	r2, r1, r2
 8016486:	6801      	ldr	r1, [r0, #0]
 8016488:	f841 e002 	str.w	lr, [r1, r2]
 801648c:	3301      	adds	r3, #1
 801648e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016492:	b29b      	uxth	r3, r3
 8016494:	459c      	cmp	ip, r3
 8016496:	d8ec      	bhi.n	8016472 <uxr_init_input_reliable_stream+0x26>
 8016498:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801649c:	60c3      	str	r3, [r0, #12]
 801649e:	f85d fb04 	ldr.w	pc, [sp], #4
 80164a2:	bf00      	nop

080164a4 <uxr_reset_input_reliable_stream>:
 80164a4:	8901      	ldrh	r1, [r0, #8]
 80164a6:	b1e9      	cbz	r1, 80164e4 <uxr_reset_input_reliable_stream+0x40>
 80164a8:	f04f 0c00 	mov.w	ip, #0
 80164ac:	b500      	push	{lr}
 80164ae:	4663      	mov	r3, ip
 80164b0:	46e6      	mov	lr, ip
 80164b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80164b6:	fb01 3312 	mls	r3, r1, r2, r3
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	6842      	ldr	r2, [r0, #4]
 80164be:	fbb2 f2f1 	udiv	r2, r2, r1
 80164c2:	fb02 f303 	mul.w	r3, r2, r3
 80164c6:	6802      	ldr	r2, [r0, #0]
 80164c8:	f842 e003 	str.w	lr, [r2, r3]
 80164cc:	f10c 0c01 	add.w	ip, ip, #1
 80164d0:	8901      	ldrh	r1, [r0, #8]
 80164d2:	fa1f f38c 	uxth.w	r3, ip
 80164d6:	4299      	cmp	r1, r3
 80164d8:	d8eb      	bhi.n	80164b2 <uxr_reset_input_reliable_stream+0xe>
 80164da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164de:	60c3      	str	r3, [r0, #12]
 80164e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80164e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164e8:	60c3      	str	r3, [r0, #12]
 80164ea:	4770      	bx	lr

080164ec <uxr_receive_reliable_message>:
 80164ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164f0:	4604      	mov	r4, r0
 80164f2:	460d      	mov	r5, r1
 80164f4:	8901      	ldrh	r1, [r0, #8]
 80164f6:	8980      	ldrh	r0, [r0, #12]
 80164f8:	4690      	mov	r8, r2
 80164fa:	461f      	mov	r7, r3
 80164fc:	f000 fca2 	bl	8016e44 <uxr_seq_num_add>
 8016500:	4629      	mov	r1, r5
 8016502:	4606      	mov	r6, r0
 8016504:	89a0      	ldrh	r0, [r4, #12]
 8016506:	f000 fca5 	bl	8016e54 <uxr_seq_num_cmp>
 801650a:	2800      	cmp	r0, #0
 801650c:	db0a      	blt.n	8016524 <uxr_receive_reliable_message+0x38>
 801650e:	2600      	movs	r6, #0
 8016510:	89e0      	ldrh	r0, [r4, #14]
 8016512:	4629      	mov	r1, r5
 8016514:	f000 fc9e 	bl	8016e54 <uxr_seq_num_cmp>
 8016518:	2800      	cmp	r0, #0
 801651a:	da00      	bge.n	801651e <uxr_receive_reliable_message+0x32>
 801651c:	81e5      	strh	r5, [r4, #14]
 801651e:	4630      	mov	r0, r6
 8016520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016524:	4630      	mov	r0, r6
 8016526:	4629      	mov	r1, r5
 8016528:	f000 fc94 	bl	8016e54 <uxr_seq_num_cmp>
 801652c:	2800      	cmp	r0, #0
 801652e:	dbee      	blt.n	801650e <uxr_receive_reliable_message+0x22>
 8016530:	6923      	ldr	r3, [r4, #16]
 8016532:	4640      	mov	r0, r8
 8016534:	4798      	blx	r3
 8016536:	2101      	movs	r1, #1
 8016538:	4681      	mov	r9, r0
 801653a:	89a0      	ldrh	r0, [r4, #12]
 801653c:	f000 fc82 	bl	8016e44 <uxr_seq_num_add>
 8016540:	f1b9 0f00 	cmp.w	r9, #0
 8016544:	d101      	bne.n	801654a <uxr_receive_reliable_message+0x5e>
 8016546:	4285      	cmp	r5, r0
 8016548:	d047      	beq.n	80165da <uxr_receive_reliable_message+0xee>
 801654a:	8922      	ldrh	r2, [r4, #8]
 801654c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016550:	fb02 5010 	mls	r0, r2, r0, r5
 8016554:	b280      	uxth	r0, r0
 8016556:	6863      	ldr	r3, [r4, #4]
 8016558:	fbb3 f3f2 	udiv	r3, r3, r2
 801655c:	fb00 f303 	mul.w	r3, r0, r3
 8016560:	6820      	ldr	r0, [r4, #0]
 8016562:	3304      	adds	r3, #4
 8016564:	4418      	add	r0, r3
 8016566:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d1cf      	bne.n	801650e <uxr_receive_reliable_message+0x22>
 801656e:	4641      	mov	r1, r8
 8016570:	463a      	mov	r2, r7
 8016572:	f001 fcea 	bl	8017f4a <memcpy>
 8016576:	8921      	ldrh	r1, [r4, #8]
 8016578:	fbb5 f2f1 	udiv	r2, r5, r1
 801657c:	fb01 5212 	mls	r2, r1, r2, r5
 8016580:	b292      	uxth	r2, r2
 8016582:	6863      	ldr	r3, [r4, #4]
 8016584:	fbb3 f3f1 	udiv	r3, r3, r1
 8016588:	fb02 f303 	mul.w	r3, r2, r3
 801658c:	6822      	ldr	r2, [r4, #0]
 801658e:	50d7      	str	r7, [r2, r3]
 8016590:	9a08      	ldr	r2, [sp, #32]
 8016592:	2301      	movs	r3, #1
 8016594:	7013      	strb	r3, [r2, #0]
 8016596:	f1b9 0f00 	cmp.w	r9, #0
 801659a:	d0b8      	beq.n	801650e <uxr_receive_reliable_message+0x22>
 801659c:	89a6      	ldrh	r6, [r4, #12]
 801659e:	4630      	mov	r0, r6
 80165a0:	2101      	movs	r1, #1
 80165a2:	f000 fc4f 	bl	8016e44 <uxr_seq_num_add>
 80165a6:	8922      	ldrh	r2, [r4, #8]
 80165a8:	6863      	ldr	r3, [r4, #4]
 80165aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80165ae:	4606      	mov	r6, r0
 80165b0:	fbb0 f0f2 	udiv	r0, r0, r2
 80165b4:	fb02 6010 	mls	r0, r2, r0, r6
 80165b8:	b280      	uxth	r0, r0
 80165ba:	fb00 f303 	mul.w	r3, r0, r3
 80165be:	6820      	ldr	r0, [r4, #0]
 80165c0:	3304      	adds	r3, #4
 80165c2:	4418      	add	r0, r3
 80165c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d0a0      	beq.n	801650e <uxr_receive_reliable_message+0x22>
 80165cc:	6923      	ldr	r3, [r4, #16]
 80165ce:	4798      	blx	r3
 80165d0:	2802      	cmp	r0, #2
 80165d2:	d008      	beq.n	80165e6 <uxr_receive_reliable_message+0xfa>
 80165d4:	2801      	cmp	r0, #1
 80165d6:	d0e2      	beq.n	801659e <uxr_receive_reliable_message+0xb2>
 80165d8:	e799      	b.n	801650e <uxr_receive_reliable_message+0x22>
 80165da:	9b08      	ldr	r3, [sp, #32]
 80165dc:	81a5      	strh	r5, [r4, #12]
 80165de:	2601      	movs	r6, #1
 80165e0:	f883 9000 	strb.w	r9, [r3]
 80165e4:	e794      	b.n	8016510 <uxr_receive_reliable_message+0x24>
 80165e6:	2601      	movs	r6, #1
 80165e8:	e792      	b.n	8016510 <uxr_receive_reliable_message+0x24>
 80165ea:	bf00      	nop

080165ec <uxr_next_input_reliable_buffer_available>:
 80165ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165f0:	4604      	mov	r4, r0
 80165f2:	460f      	mov	r7, r1
 80165f4:	8980      	ldrh	r0, [r0, #12]
 80165f6:	2101      	movs	r1, #1
 80165f8:	4690      	mov	r8, r2
 80165fa:	f000 fc23 	bl	8016e44 <uxr_seq_num_add>
 80165fe:	8922      	ldrh	r2, [r4, #8]
 8016600:	fbb0 f6f2 	udiv	r6, r0, r2
 8016604:	fb02 0616 	mls	r6, r2, r6, r0
 8016608:	b2b6      	uxth	r6, r6
 801660a:	6863      	ldr	r3, [r4, #4]
 801660c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016610:	fb06 f303 	mul.w	r3, r6, r3
 8016614:	6826      	ldr	r6, [r4, #0]
 8016616:	3304      	adds	r3, #4
 8016618:	441e      	add	r6, r3
 801661a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801661e:	f1b9 0f00 	cmp.w	r9, #0
 8016622:	d023      	beq.n	801666c <uxr_next_input_reliable_buffer_available+0x80>
 8016624:	6923      	ldr	r3, [r4, #16]
 8016626:	4605      	mov	r5, r0
 8016628:	4630      	mov	r0, r6
 801662a:	4798      	blx	r3
 801662c:	4682      	mov	sl, r0
 801662e:	b300      	cbz	r0, 8016672 <uxr_next_input_reliable_buffer_available+0x86>
 8016630:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016634:	2101      	movs	r1, #1
 8016636:	4650      	mov	r0, sl
 8016638:	f000 fc04 	bl	8016e44 <uxr_seq_num_add>
 801663c:	8921      	ldrh	r1, [r4, #8]
 801663e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016642:	4682      	mov	sl, r0
 8016644:	fb01 0212 	mls	r2, r1, r2, r0
 8016648:	e9d4 0300 	ldrd	r0, r3, [r4]
 801664c:	b292      	uxth	r2, r2
 801664e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016652:	fb02 f303 	mul.w	r3, r2, r3
 8016656:	3304      	adds	r3, #4
 8016658:	4418      	add	r0, r3
 801665a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801665e:	b12b      	cbz	r3, 801666c <uxr_next_input_reliable_buffer_available+0x80>
 8016660:	6923      	ldr	r3, [r4, #16]
 8016662:	4798      	blx	r3
 8016664:	2802      	cmp	r0, #2
 8016666:	d01b      	beq.n	80166a0 <uxr_next_input_reliable_buffer_available+0xb4>
 8016668:	2801      	cmp	r0, #1
 801666a:	d0e3      	beq.n	8016634 <uxr_next_input_reliable_buffer_available+0x48>
 801666c:	2000      	movs	r0, #0
 801666e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016672:	464a      	mov	r2, r9
 8016674:	4631      	mov	r1, r6
 8016676:	4638      	mov	r0, r7
 8016678:	f7f5 fdaa 	bl	800c1d0 <ucdr_init_buffer>
 801667c:	8921      	ldrh	r1, [r4, #8]
 801667e:	fbb5 f2f1 	udiv	r2, r5, r1
 8016682:	fb01 5212 	mls	r2, r1, r2, r5
 8016686:	b292      	uxth	r2, r2
 8016688:	6863      	ldr	r3, [r4, #4]
 801668a:	fbb3 f3f1 	udiv	r3, r3, r1
 801668e:	fb02 f303 	mul.w	r3, r2, r3
 8016692:	6822      	ldr	r2, [r4, #0]
 8016694:	f842 a003 	str.w	sl, [r2, r3]
 8016698:	2001      	movs	r0, #1
 801669a:	81a5      	strh	r5, [r4, #12]
 801669c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a0:	8920      	ldrh	r0, [r4, #8]
 80166a2:	fbb5 f3f0 	udiv	r3, r5, r0
 80166a6:	fb00 5513 	mls	r5, r0, r3, r5
 80166aa:	b2ad      	uxth	r5, r5
 80166ac:	6863      	ldr	r3, [r4, #4]
 80166ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80166b2:	fb03 f505 	mul.w	r5, r3, r5
 80166b6:	6823      	ldr	r3, [r4, #0]
 80166b8:	2000      	movs	r0, #0
 80166ba:	5158      	str	r0, [r3, r5]
 80166bc:	eb06 0108 	add.w	r1, r6, r8
 80166c0:	eba9 0208 	sub.w	r2, r9, r8
 80166c4:	4638      	mov	r0, r7
 80166c6:	f7f5 fd83 	bl	800c1d0 <ucdr_init_buffer>
 80166ca:	4638      	mov	r0, r7
 80166cc:	4903      	ldr	r1, [pc, #12]	@ (80166dc <uxr_next_input_reliable_buffer_available+0xf0>)
 80166ce:	4622      	mov	r2, r4
 80166d0:	f7f5 fd52 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 80166d4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80166d8:	2001      	movs	r0, #1
 80166da:	e7c8      	b.n	801666e <uxr_next_input_reliable_buffer_available+0x82>
 80166dc:	080163e1 	.word	0x080163e1

080166e0 <uxr_process_heartbeat>:
 80166e0:	b538      	push	{r3, r4, r5, lr}
 80166e2:	4611      	mov	r1, r2
 80166e4:	4604      	mov	r4, r0
 80166e6:	89c0      	ldrh	r0, [r0, #14]
 80166e8:	4615      	mov	r5, r2
 80166ea:	f000 fbb3 	bl	8016e54 <uxr_seq_num_cmp>
 80166ee:	2800      	cmp	r0, #0
 80166f0:	bfb8      	it	lt
 80166f2:	81e5      	strhlt	r5, [r4, #14]
 80166f4:	bd38      	pop	{r3, r4, r5, pc}
 80166f6:	bf00      	nop

080166f8 <uxr_compute_acknack>:
 80166f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166fc:	8903      	ldrh	r3, [r0, #8]
 80166fe:	8985      	ldrh	r5, [r0, #12]
 8016700:	4604      	mov	r4, r0
 8016702:	460e      	mov	r6, r1
 8016704:	b1d3      	cbz	r3, 801673c <uxr_compute_acknack+0x44>
 8016706:	4628      	mov	r0, r5
 8016708:	2701      	movs	r7, #1
 801670a:	e003      	b.n	8016714 <uxr_compute_acknack+0x1c>
 801670c:	4567      	cmp	r7, ip
 801670e:	d215      	bcs.n	801673c <uxr_compute_acknack+0x44>
 8016710:	89a0      	ldrh	r0, [r4, #12]
 8016712:	3701      	adds	r7, #1
 8016714:	b2b9      	uxth	r1, r7
 8016716:	f000 fb95 	bl	8016e44 <uxr_seq_num_add>
 801671a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801671e:	fbb0 f3fc 	udiv	r3, r0, ip
 8016722:	fb0c 0313 	mls	r3, ip, r3, r0
 8016726:	b29a      	uxth	r2, r3
 8016728:	e9d4 1300 	ldrd	r1, r3, [r4]
 801672c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016730:	fb02 f303 	mul.w	r3, r2, r3
 8016734:	58cb      	ldr	r3, [r1, r3]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d1e8      	bne.n	801670c <uxr_compute_acknack+0x14>
 801673a:	4605      	mov	r5, r0
 801673c:	8035      	strh	r5, [r6, #0]
 801673e:	2101      	movs	r1, #1
 8016740:	4628      	mov	r0, r5
 8016742:	89e7      	ldrh	r7, [r4, #14]
 8016744:	f000 fb82 	bl	8016e4c <uxr_seq_num_sub>
 8016748:	4601      	mov	r1, r0
 801674a:	4638      	mov	r0, r7
 801674c:	f000 fb7e 	bl	8016e4c <uxr_seq_num_sub>
 8016750:	4605      	mov	r5, r0
 8016752:	b318      	cbz	r0, 801679c <uxr_compute_acknack+0xa4>
 8016754:	f04f 0900 	mov.w	r9, #0
 8016758:	464f      	mov	r7, r9
 801675a:	f04f 0801 	mov.w	r8, #1
 801675e:	fa1f f189 	uxth.w	r1, r9
 8016762:	8830      	ldrh	r0, [r6, #0]
 8016764:	f000 fb6e 	bl	8016e44 <uxr_seq_num_add>
 8016768:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801676c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016770:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016774:	fb03 001c 	mls	r0, r3, ip, r0
 8016778:	b283      	uxth	r3, r0
 801677a:	fbb2 f2fc 	udiv	r2, r2, ip
 801677e:	fb02 f303 	mul.w	r3, r2, r3
 8016782:	fa08 f209 	lsl.w	r2, r8, r9
 8016786:	58cb      	ldr	r3, [r1, r3]
 8016788:	f109 0901 	add.w	r9, r9, #1
 801678c:	b90b      	cbnz	r3, 8016792 <uxr_compute_acknack+0x9a>
 801678e:	4317      	orrs	r7, r2
 8016790:	b2bf      	uxth	r7, r7
 8016792:	454d      	cmp	r5, r9
 8016794:	d1e3      	bne.n	801675e <uxr_compute_acknack+0x66>
 8016796:	4638      	mov	r0, r7
 8016798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801679c:	4607      	mov	r7, r0
 801679e:	4638      	mov	r0, r7
 80167a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080167a4 <uxr_init_output_best_effort_stream>:
 80167a4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80167a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80167ac:	6001      	str	r1, [r0, #0]
 80167ae:	7303      	strb	r3, [r0, #12]
 80167b0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop

080167b8 <uxr_reset_output_best_effort_stream>:
 80167b8:	7b02      	ldrb	r2, [r0, #12]
 80167ba:	6042      	str	r2, [r0, #4]
 80167bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80167c0:	81c3      	strh	r3, [r0, #14]
 80167c2:	4770      	bx	lr

080167c4 <uxr_prepare_best_effort_buffer_to_write>:
 80167c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167c6:	4604      	mov	r4, r0
 80167c8:	b083      	sub	sp, #12
 80167ca:	6840      	ldr	r0, [r0, #4]
 80167cc:	460d      	mov	r5, r1
 80167ce:	4616      	mov	r6, r2
 80167d0:	f7fa fafc 	bl	8010dcc <uxr_submessage_padding>
 80167d4:	6863      	ldr	r3, [r4, #4]
 80167d6:	4418      	add	r0, r3
 80167d8:	68a3      	ldr	r3, [r4, #8]
 80167da:	1942      	adds	r2, r0, r5
 80167dc:	4293      	cmp	r3, r2
 80167de:	bf2c      	ite	cs
 80167e0:	2701      	movcs	r7, #1
 80167e2:	2700      	movcc	r7, #0
 80167e4:	d202      	bcs.n	80167ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80167e6:	4638      	mov	r0, r7
 80167e8:	b003      	add	sp, #12
 80167ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ec:	9000      	str	r0, [sp, #0]
 80167ee:	6821      	ldr	r1, [r4, #0]
 80167f0:	4630      	mov	r0, r6
 80167f2:	2300      	movs	r3, #0
 80167f4:	f7f5 fcda 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 80167f8:	6861      	ldr	r1, [r4, #4]
 80167fa:	4638      	mov	r0, r7
 80167fc:	4429      	add	r1, r5
 80167fe:	6061      	str	r1, [r4, #4]
 8016800:	b003      	add	sp, #12
 8016802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016804 <uxr_prepare_best_effort_buffer_to_send>:
 8016804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016808:	4604      	mov	r4, r0
 801680a:	461d      	mov	r5, r3
 801680c:	6840      	ldr	r0, [r0, #4]
 801680e:	7b23      	ldrb	r3, [r4, #12]
 8016810:	4298      	cmp	r0, r3
 8016812:	bf8c      	ite	hi
 8016814:	2601      	movhi	r6, #1
 8016816:	2600      	movls	r6, #0
 8016818:	d802      	bhi.n	8016820 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801681a:	4630      	mov	r0, r6
 801681c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016820:	4688      	mov	r8, r1
 8016822:	89e0      	ldrh	r0, [r4, #14]
 8016824:	2101      	movs	r1, #1
 8016826:	4617      	mov	r7, r2
 8016828:	f000 fb0c 	bl	8016e44 <uxr_seq_num_add>
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	81e0      	strh	r0, [r4, #14]
 8016830:	8028      	strh	r0, [r5, #0]
 8016832:	f8c8 3000 	str.w	r3, [r8]
 8016836:	6863      	ldr	r3, [r4, #4]
 8016838:	603b      	str	r3, [r7, #0]
 801683a:	7b23      	ldrb	r3, [r4, #12]
 801683c:	6063      	str	r3, [r4, #4]
 801683e:	4630      	mov	r0, r6
 8016840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016844 <on_full_output_buffer>:
 8016844:	b538      	push	{r3, r4, r5, lr}
 8016846:	6802      	ldr	r2, [r0, #0]
 8016848:	460c      	mov	r4, r1
 801684a:	6809      	ldr	r1, [r1, #0]
 801684c:	8923      	ldrh	r3, [r4, #8]
 801684e:	eba2 0c01 	sub.w	ip, r2, r1
 8016852:	6862      	ldr	r2, [r4, #4]
 8016854:	fbb2 f2f3 	udiv	r2, r2, r3
 8016858:	fbbc fcf2 	udiv	ip, ip, r2
 801685c:	f10c 0c01 	add.w	ip, ip, #1
 8016860:	fa1f fc8c 	uxth.w	ip, ip
 8016864:	fbbc fef3 	udiv	lr, ip, r3
 8016868:	fb03 c31e 	mls	r3, r3, lr, ip
 801686c:	b29b      	uxth	r3, r3
 801686e:	fb02 f303 	mul.w	r3, r2, r3
 8016872:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016876:	58ca      	ldr	r2, [r1, r3]
 8016878:	4463      	add	r3, ip
 801687a:	eba2 020c 	sub.w	r2, r2, ip
 801687e:	3308      	adds	r3, #8
 8016880:	4605      	mov	r5, r0
 8016882:	4419      	add	r1, r3
 8016884:	3a04      	subs	r2, #4
 8016886:	6903      	ldr	r3, [r0, #16]
 8016888:	f7f5 fc9a 	bl	800c1c0 <ucdr_init_buffer_origin>
 801688c:	4628      	mov	r0, r5
 801688e:	4903      	ldr	r1, [pc, #12]	@ (801689c <on_full_output_buffer+0x58>)
 8016890:	4622      	mov	r2, r4
 8016892:	f7f5 fc71 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 8016896:	2000      	movs	r0, #0
 8016898:	bd38      	pop	{r3, r4, r5, pc}
 801689a:	bf00      	nop
 801689c:	08016845 	.word	0x08016845

080168a0 <uxr_init_output_reliable_stream>:
 80168a0:	b410      	push	{r4}
 80168a2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80168a6:	8103      	strh	r3, [r0, #8]
 80168a8:	e9c0 1200 	strd	r1, r2, [r0]
 80168ac:	f880 c00c 	strb.w	ip, [r0, #12]
 80168b0:	b1d3      	cbz	r3, 80168e8 <uxr_init_output_reliable_stream+0x48>
 80168b2:	f8c1 c000 	str.w	ip, [r1]
 80168b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80168ba:	f1bc 0f01 	cmp.w	ip, #1
 80168be:	d913      	bls.n	80168e8 <uxr_init_output_reliable_stream+0x48>
 80168c0:	2301      	movs	r3, #1
 80168c2:	fbb3 f1fc 	udiv	r1, r3, ip
 80168c6:	fb0c 3111 	mls	r1, ip, r1, r3
 80168ca:	b289      	uxth	r1, r1
 80168cc:	6842      	ldr	r2, [r0, #4]
 80168ce:	6804      	ldr	r4, [r0, #0]
 80168d0:	fbb2 f2fc 	udiv	r2, r2, ip
 80168d4:	fb01 f202 	mul.w	r2, r1, r2
 80168d8:	7b01      	ldrb	r1, [r0, #12]
 80168da:	50a1      	str	r1, [r4, r2]
 80168dc:	3301      	adds	r3, #1
 80168de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	459c      	cmp	ip, r3
 80168e6:	d8ec      	bhi.n	80168c2 <uxr_init_output_reliable_stream+0x22>
 80168e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80168ec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80168f0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80168f4:	4905      	ldr	r1, [pc, #20]	@ (801690c <uxr_init_output_reliable_stream+0x6c>)
 80168f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168fa:	f8c0 100e 	str.w	r1, [r0, #14]
 80168fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016902:	2300      	movs	r3, #0
 8016904:	8242      	strh	r2, [r0, #18]
 8016906:	8403      	strh	r3, [r0, #32]
 8016908:	4770      	bx	lr
 801690a:	bf00      	nop
 801690c:	ffff0000 	.word	0xffff0000

08016910 <uxr_reset_output_reliable_stream>:
 8016910:	8901      	ldrh	r1, [r0, #8]
 8016912:	b1b1      	cbz	r1, 8016942 <uxr_reset_output_reliable_stream+0x32>
 8016914:	f04f 0c00 	mov.w	ip, #0
 8016918:	4663      	mov	r3, ip
 801691a:	fbb3 f2f1 	udiv	r2, r3, r1
 801691e:	fb01 3312 	mls	r3, r1, r2, r3
 8016922:	b29b      	uxth	r3, r3
 8016924:	6842      	ldr	r2, [r0, #4]
 8016926:	fbb2 f2f1 	udiv	r2, r2, r1
 801692a:	6801      	ldr	r1, [r0, #0]
 801692c:	fb02 f303 	mul.w	r3, r2, r3
 8016930:	7b02      	ldrb	r2, [r0, #12]
 8016932:	50ca      	str	r2, [r1, r3]
 8016934:	f10c 0c01 	add.w	ip, ip, #1
 8016938:	8901      	ldrh	r1, [r0, #8]
 801693a:	fa1f f38c 	uxth.w	r3, ip
 801693e:	4299      	cmp	r1, r3
 8016940:	d8eb      	bhi.n	801691a <uxr_reset_output_reliable_stream+0xa>
 8016942:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016946:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801694a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801694e:	4904      	ldr	r1, [pc, #16]	@ (8016960 <uxr_reset_output_reliable_stream+0x50>)
 8016950:	f8c0 100e 	str.w	r1, [r0, #14]
 8016954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016958:	2300      	movs	r3, #0
 801695a:	8242      	strh	r2, [r0, #18]
 801695c:	8403      	strh	r3, [r0, #32]
 801695e:	4770      	bx	lr
 8016960:	ffff0000 	.word	0xffff0000

08016964 <uxr_prepare_reliable_buffer_to_write>:
 8016964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016968:	4604      	mov	r4, r0
 801696a:	b091      	sub	sp, #68	@ 0x44
 801696c:	8900      	ldrh	r0, [r0, #8]
 801696e:	89e6      	ldrh	r6, [r4, #14]
 8016970:	6823      	ldr	r3, [r4, #0]
 8016972:	9204      	str	r2, [sp, #16]
 8016974:	fbb6 f2f0 	udiv	r2, r6, r0
 8016978:	fb00 6212 	mls	r2, r0, r2, r6
 801697c:	b292      	uxth	r2, r2
 801697e:	6865      	ldr	r5, [r4, #4]
 8016980:	fbb5 f5f0 	udiv	r5, r5, r0
 8016984:	fb05 3202 	mla	r2, r5, r2, r3
 8016988:	3204      	adds	r2, #4
 801698a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801698e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016992:	9203      	str	r2, [sp, #12]
 8016994:	468b      	mov	fp, r1
 8016996:	1f2f      	subs	r7, r5, #4
 8016998:	2800      	cmp	r0, #0
 801699a:	f000 814c 	beq.w	8016c36 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801699e:	f04f 0c00 	mov.w	ip, #0
 80169a2:	46e2      	mov	sl, ip
 80169a4:	4661      	mov	r1, ip
 80169a6:	fbb1 f2f0 	udiv	r2, r1, r0
 80169aa:	fb00 1212 	mls	r2, r0, r2, r1
 80169ae:	b292      	uxth	r2, r2
 80169b0:	fb05 f202 	mul.w	r2, r5, r2
 80169b4:	f10c 0c01 	add.w	ip, ip, #1
 80169b8:	589a      	ldr	r2, [r3, r2]
 80169ba:	454a      	cmp	r2, r9
 80169bc:	bf08      	it	eq
 80169be:	f10a 0a01 	addeq.w	sl, sl, #1
 80169c2:	fa1f f18c 	uxth.w	r1, ip
 80169c6:	bf08      	it	eq
 80169c8:	fa1f fa8a 	uxtheq.w	sl, sl
 80169cc:	4281      	cmp	r1, r0
 80169ce:	d3ea      	bcc.n	80169a6 <uxr_prepare_reliable_buffer_to_write+0x42>
 80169d0:	4640      	mov	r0, r8
 80169d2:	2104      	movs	r1, #4
 80169d4:	f8cd a014 	str.w	sl, [sp, #20]
 80169d8:	f7f5 fbfe 	bl	800c1d8 <ucdr_alignment>
 80169dc:	4480      	add	r8, r0
 80169de:	eb08 020b 	add.w	r2, r8, fp
 80169e2:	42ba      	cmp	r2, r7
 80169e4:	f240 80cd 	bls.w	8016b82 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80169e8:	7b22      	ldrb	r2, [r4, #12]
 80169ea:	445a      	add	r2, fp
 80169ec:	42ba      	cmp	r2, r7
 80169ee:	f240 80b5 	bls.w	8016b5c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80169f2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80169f6:	33fc      	adds	r3, #252	@ 0xfc
 80169f8:	b2ba      	uxth	r2, r7
 80169fa:	4413      	add	r3, r2
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	fb0a f903 	mul.w	r9, sl, r3
 8016a02:	45d9      	cmp	r9, fp
 8016a04:	9305      	str	r3, [sp, #20]
 8016a06:	9306      	str	r3, [sp, #24]
 8016a08:	f0c0 80b7 	bcc.w	8016b7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016a0c:	f108 0304 	add.w	r3, r8, #4
 8016a10:	42bb      	cmp	r3, r7
 8016a12:	f080 80db 	bcs.w	8016bcc <uxr_prepare_reliable_buffer_to_write+0x268>
 8016a16:	f1a2 0904 	sub.w	r9, r2, #4
 8016a1a:	eba9 0908 	sub.w	r9, r9, r8
 8016a1e:	9b05      	ldr	r3, [sp, #20]
 8016a20:	fa1f f989 	uxth.w	r9, r9
 8016a24:	ebab 0b09 	sub.w	fp, fp, r9
 8016a28:	fbbb f2f3 	udiv	r2, fp, r3
 8016a2c:	fb03 b312 	mls	r3, r3, r2, fp
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	f000 80c8 	beq.w	8016bc6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016a36:	3201      	adds	r2, #1
 8016a38:	b292      	uxth	r2, r2
 8016a3a:	9306      	str	r3, [sp, #24]
 8016a3c:	4552      	cmp	r2, sl
 8016a3e:	f200 809c 	bhi.w	8016b7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016a42:	f10d 0b20 	add.w	fp, sp, #32
 8016a46:	2a00      	cmp	r2, #0
 8016a48:	d042      	beq.n	8016ad0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8016a4a:	f8cd 801c 	str.w	r8, [sp, #28]
 8016a4e:	f04f 0a00 	mov.w	sl, #0
 8016a52:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016a56:	9505      	str	r5, [sp, #20]
 8016a58:	f10d 0b20 	add.w	fp, sp, #32
 8016a5c:	4615      	mov	r5, r2
 8016a5e:	e000      	b.n	8016a62 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016a60:	46c1      	mov	r9, r8
 8016a62:	8920      	ldrh	r0, [r4, #8]
 8016a64:	fbb6 f2f0 	udiv	r2, r6, r0
 8016a68:	fb00 6112 	mls	r1, r0, r2, r6
 8016a6c:	b28a      	uxth	r2, r1
 8016a6e:	6863      	ldr	r3, [r4, #4]
 8016a70:	fbb3 f1f0 	udiv	r1, r3, r0
 8016a74:	6823      	ldr	r3, [r4, #0]
 8016a76:	fb02 f101 	mul.w	r1, r2, r1
 8016a7a:	3104      	adds	r1, #4
 8016a7c:	4419      	add	r1, r3
 8016a7e:	4658      	mov	r0, fp
 8016a80:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016a84:	9200      	str	r2, [sp, #0]
 8016a86:	2300      	movs	r3, #0
 8016a88:	463a      	mov	r2, r7
 8016a8a:	f7f5 fb8f 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 8016a8e:	464a      	mov	r2, r9
 8016a90:	2300      	movs	r3, #0
 8016a92:	210d      	movs	r1, #13
 8016a94:	4658      	mov	r0, fp
 8016a96:	f7fa f959 	bl	8010d4c <uxr_buffer_submessage_header>
 8016a9a:	8921      	ldrh	r1, [r4, #8]
 8016a9c:	fbb6 f2f1 	udiv	r2, r6, r1
 8016aa0:	fb01 6212 	mls	r2, r1, r2, r6
 8016aa4:	b292      	uxth	r2, r2
 8016aa6:	6863      	ldr	r3, [r4, #4]
 8016aa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8016aac:	fb02 f303 	mul.w	r3, r2, r3
 8016ab0:	6822      	ldr	r2, [r4, #0]
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	50d7      	str	r7, [r2, r3]
 8016ab6:	2101      	movs	r1, #1
 8016ab8:	f000 f9c4 	bl	8016e44 <uxr_seq_num_add>
 8016abc:	f10a 0a01 	add.w	sl, sl, #1
 8016ac0:	fa1f f38a 	uxth.w	r3, sl
 8016ac4:	429d      	cmp	r5, r3
 8016ac6:	4606      	mov	r6, r0
 8016ac8:	d8ca      	bhi.n	8016a60 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8016aca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016ace:	9d05      	ldr	r5, [sp, #20]
 8016ad0:	8920      	ldrh	r0, [r4, #8]
 8016ad2:	fbb6 f3f0 	udiv	r3, r6, r0
 8016ad6:	fb00 6313 	mls	r3, r0, r3, r6
 8016ada:	b299      	uxth	r1, r3
 8016adc:	6863      	ldr	r3, [r4, #4]
 8016ade:	fbb3 f3f0 	udiv	r3, r3, r0
 8016ae2:	fb01 f303 	mul.w	r3, r1, r3
 8016ae6:	6821      	ldr	r1, [r4, #0]
 8016ae8:	3304      	adds	r3, #4
 8016aea:	4419      	add	r1, r3
 8016aec:	463a      	mov	r2, r7
 8016aee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016af2:	9000      	str	r0, [sp, #0]
 8016af4:	2300      	movs	r3, #0
 8016af6:	4658      	mov	r0, fp
 8016af8:	f7f5 fb58 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 8016afc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016b00:	4658      	mov	r0, fp
 8016b02:	fa1f f289 	uxth.w	r2, r9
 8016b06:	2302      	movs	r3, #2
 8016b08:	210d      	movs	r1, #13
 8016b0a:	f7fa f91f 	bl	8010d4c <uxr_buffer_submessage_header>
 8016b0e:	9b03      	ldr	r3, [sp, #12]
 8016b10:	8927      	ldrh	r7, [r4, #8]
 8016b12:	7b20      	ldrb	r0, [r4, #12]
 8016b14:	f108 0104 	add.w	r1, r8, #4
 8016b18:	440b      	add	r3, r1
 8016b1a:	4619      	mov	r1, r3
 8016b1c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016b20:	fb07 6313 	mls	r3, r7, r3, r6
 8016b24:	f1a5 0208 	sub.w	r2, r5, #8
 8016b28:	b29d      	uxth	r5, r3
 8016b2a:	3004      	adds	r0, #4
 8016b2c:	6863      	ldr	r3, [r4, #4]
 8016b2e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016b32:	fb05 f303 	mul.w	r3, r5, r3
 8016b36:	6825      	ldr	r5, [r4, #0]
 8016b38:	4448      	add	r0, r9
 8016b3a:	50e8      	str	r0, [r5, r3]
 8016b3c:	9d04      	ldr	r5, [sp, #16]
 8016b3e:	eba2 0208 	sub.w	r2, r2, r8
 8016b42:	4628      	mov	r0, r5
 8016b44:	f7f5 fb44 	bl	800c1d0 <ucdr_init_buffer>
 8016b48:	4628      	mov	r0, r5
 8016b4a:	493c      	ldr	r1, [pc, #240]	@ (8016c3c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016b4c:	4622      	mov	r2, r4
 8016b4e:	f7f5 fb13 	bl	800c178 <ucdr_set_on_full_buffer_callback>
 8016b52:	2001      	movs	r0, #1
 8016b54:	81e6      	strh	r6, [r4, #14]
 8016b56:	b011      	add	sp, #68	@ 0x44
 8016b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b5c:	2101      	movs	r1, #1
 8016b5e:	89e0      	ldrh	r0, [r4, #14]
 8016b60:	f000 f970 	bl	8016e44 <uxr_seq_num_add>
 8016b64:	8921      	ldrh	r1, [r4, #8]
 8016b66:	4605      	mov	r5, r0
 8016b68:	8a60      	ldrh	r0, [r4, #18]
 8016b6a:	f000 f96b 	bl	8016e44 <uxr_seq_num_add>
 8016b6e:	4601      	mov	r1, r0
 8016b70:	4628      	mov	r0, r5
 8016b72:	f000 f96f 	bl	8016e54 <uxr_seq_num_cmp>
 8016b76:	2800      	cmp	r0, #0
 8016b78:	dd42      	ble.n	8016c00 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8016b7a:	2000      	movs	r0, #0
 8016b7c:	b011      	add	sp, #68	@ 0x44
 8016b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b82:	8921      	ldrh	r1, [r4, #8]
 8016b84:	8a60      	ldrh	r0, [r4, #18]
 8016b86:	9205      	str	r2, [sp, #20]
 8016b88:	f000 f95c 	bl	8016e44 <uxr_seq_num_add>
 8016b8c:	4601      	mov	r1, r0
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f000 f960 	bl	8016e54 <uxr_seq_num_cmp>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	9a05      	ldr	r2, [sp, #20]
 8016b98:	dcef      	bgt.n	8016b7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016b9a:	8927      	ldrh	r7, [r4, #8]
 8016b9c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016ba0:	fb07 6313 	mls	r3, r7, r3, r6
 8016ba4:	b29d      	uxth	r5, r3
 8016ba6:	6863      	ldr	r3, [r4, #4]
 8016ba8:	6824      	ldr	r4, [r4, #0]
 8016baa:	fbb3 f3f7 	udiv	r3, r3, r7
 8016bae:	fb05 f303 	mul.w	r3, r5, r3
 8016bb2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016bb6:	50e2      	str	r2, [r4, r3]
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f8cd 8000 	str.w	r8, [sp]
 8016bbe:	f7f5 faf5 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 8016bc2:	2001      	movs	r0, #1
 8016bc4:	e7da      	b.n	8016b7c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016bc6:	b293      	uxth	r3, r2
 8016bc8:	461a      	mov	r2, r3
 8016bca:	e737      	b.n	8016a3c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016bcc:	4630      	mov	r0, r6
 8016bce:	2101      	movs	r1, #1
 8016bd0:	9207      	str	r2, [sp, #28]
 8016bd2:	f000 f937 	bl	8016e44 <uxr_seq_num_add>
 8016bd6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016bda:	fbb0 f1fc 	udiv	r1, r0, ip
 8016bde:	fb0c 0111 	mls	r1, ip, r1, r0
 8016be2:	4606      	mov	r6, r0
 8016be4:	b288      	uxth	r0, r1
 8016be6:	6863      	ldr	r3, [r4, #4]
 8016be8:	fbb3 f1fc 	udiv	r1, r3, ip
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	9a07      	ldr	r2, [sp, #28]
 8016bf0:	fb00 f101 	mul.w	r1, r0, r1
 8016bf4:	3104      	adds	r1, #4
 8016bf6:	440b      	add	r3, r1
 8016bf8:	9303      	str	r3, [sp, #12]
 8016bfa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016bfe:	e70a      	b.n	8016a16 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016c00:	8921      	ldrh	r1, [r4, #8]
 8016c02:	fbb5 f3f1 	udiv	r3, r5, r1
 8016c06:	fb01 5313 	mls	r3, r1, r3, r5
 8016c0a:	b29a      	uxth	r2, r3
 8016c0c:	6863      	ldr	r3, [r4, #4]
 8016c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016c12:	6821      	ldr	r1, [r4, #0]
 8016c14:	9804      	ldr	r0, [sp, #16]
 8016c16:	fb02 f303 	mul.w	r3, r2, r3
 8016c1a:	3304      	adds	r3, #4
 8016c1c:	7b22      	ldrb	r2, [r4, #12]
 8016c1e:	4419      	add	r1, r3
 8016c20:	445a      	add	r2, fp
 8016c22:	f841 2c04 	str.w	r2, [r1, #-4]
 8016c26:	7b23      	ldrb	r3, [r4, #12]
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	f7f5 fabe 	bl	800c1ac <ucdr_init_buffer_origin_offset>
 8016c30:	81e5      	strh	r5, [r4, #14]
 8016c32:	2001      	movs	r0, #1
 8016c34:	e7a2      	b.n	8016b7c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016c36:	4682      	mov	sl, r0
 8016c38:	e6ca      	b.n	80169d0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016c3a:	bf00      	nop
 8016c3c:	08016845 	.word	0x08016845

08016c40 <uxr_prepare_next_reliable_buffer_to_send>:
 8016c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c42:	4604      	mov	r4, r0
 8016c44:	460f      	mov	r7, r1
 8016c46:	8a00      	ldrh	r0, [r0, #16]
 8016c48:	2101      	movs	r1, #1
 8016c4a:	4616      	mov	r6, r2
 8016c4c:	461d      	mov	r5, r3
 8016c4e:	f000 f8f9 	bl	8016e44 <uxr_seq_num_add>
 8016c52:	8028      	strh	r0, [r5, #0]
 8016c54:	8922      	ldrh	r2, [r4, #8]
 8016c56:	fbb0 f3f2 	udiv	r3, r0, r2
 8016c5a:	fb02 0c13 	mls	ip, r2, r3, r0
 8016c5e:	fa1f fc8c 	uxth.w	ip, ip
 8016c62:	6863      	ldr	r3, [r4, #4]
 8016c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c68:	fb0c fc03 	mul.w	ip, ip, r3
 8016c6c:	6823      	ldr	r3, [r4, #0]
 8016c6e:	89e1      	ldrh	r1, [r4, #14]
 8016c70:	f10c 0c04 	add.w	ip, ip, #4
 8016c74:	4463      	add	r3, ip
 8016c76:	603b      	str	r3, [r7, #0]
 8016c78:	6823      	ldr	r3, [r4, #0]
 8016c7a:	449c      	add	ip, r3
 8016c7c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016c80:	6033      	str	r3, [r6, #0]
 8016c82:	f000 f8e7 	bl	8016e54 <uxr_seq_num_cmp>
 8016c86:	2800      	cmp	r0, #0
 8016c88:	dd01      	ble.n	8016c8e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016c8a:	2000      	movs	r0, #0
 8016c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c8e:	7b23      	ldrb	r3, [r4, #12]
 8016c90:	6832      	ldr	r2, [r6, #0]
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d9f9      	bls.n	8016c8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016c96:	8a61      	ldrh	r1, [r4, #18]
 8016c98:	8a20      	ldrh	r0, [r4, #16]
 8016c9a:	f000 f8d7 	bl	8016e4c <uxr_seq_num_sub>
 8016c9e:	8923      	ldrh	r3, [r4, #8]
 8016ca0:	4283      	cmp	r3, r0
 8016ca2:	d0f2      	beq.n	8016c8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016ca4:	8828      	ldrh	r0, [r5, #0]
 8016ca6:	89e3      	ldrh	r3, [r4, #14]
 8016ca8:	8220      	strh	r0, [r4, #16]
 8016caa:	4298      	cmp	r0, r3
 8016cac:	d001      	beq.n	8016cb2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016cae:	2001      	movs	r0, #1
 8016cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cb2:	2101      	movs	r1, #1
 8016cb4:	f000 f8c6 	bl	8016e44 <uxr_seq_num_add>
 8016cb8:	81e0      	strh	r0, [r4, #14]
 8016cba:	2001      	movs	r0, #1
 8016cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cbe:	bf00      	nop

08016cc0 <uxr_update_output_stream_heartbeat_timestamp>:
 8016cc0:	b570      	push	{r4, r5, r6, lr}
 8016cc2:	8a01      	ldrh	r1, [r0, #16]
 8016cc4:	4604      	mov	r4, r0
 8016cc6:	8a40      	ldrh	r0, [r0, #18]
 8016cc8:	4615      	mov	r5, r2
 8016cca:	461e      	mov	r6, r3
 8016ccc:	f000 f8c2 	bl	8016e54 <uxr_seq_num_cmp>
 8016cd0:	2800      	cmp	r0, #0
 8016cd2:	db07      	blt.n	8016ce4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016cd8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016cdc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016ce0:	2000      	movs	r0, #0
 8016ce2:	bd70      	pop	{r4, r5, r6, pc}
 8016ce4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016ce8:	b940      	cbnz	r0, 8016cfc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016cea:	2301      	movs	r3, #1
 8016cec:	f884 3020 	strb.w	r3, [r4, #32]
 8016cf0:	3564      	adds	r5, #100	@ 0x64
 8016cf2:	f146 0600 	adc.w	r6, r6, #0
 8016cf6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016cfa:	bd70      	pop	{r4, r5, r6, pc}
 8016cfc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016d00:	4295      	cmp	r5, r2
 8016d02:	eb76 0303 	sbcs.w	r3, r6, r3
 8016d06:	bfa5      	ittet	ge
 8016d08:	3001      	addge	r0, #1
 8016d0a:	f884 0020 	strbge.w	r0, [r4, #32]
 8016d0e:	2000      	movlt	r0, #0
 8016d10:	2001      	movge	r0, #1
 8016d12:	e7ed      	b.n	8016cf0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016d14 <uxr_begin_output_nack_buffer_it>:
 8016d14:	8a40      	ldrh	r0, [r0, #18]
 8016d16:	4770      	bx	lr

08016d18 <uxr_next_reliable_nack_buffer_to_send>:
 8016d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d1c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016d20:	b082      	sub	sp, #8
 8016d22:	f1b8 0f00 	cmp.w	r8, #0
 8016d26:	d011      	beq.n	8016d4c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016d28:	4604      	mov	r4, r0
 8016d2a:	8818      	ldrh	r0, [r3, #0]
 8016d2c:	460e      	mov	r6, r1
 8016d2e:	4617      	mov	r7, r2
 8016d30:	461d      	mov	r5, r3
 8016d32:	2101      	movs	r1, #1
 8016d34:	f000 f886 	bl	8016e44 <uxr_seq_num_add>
 8016d38:	8028      	strh	r0, [r5, #0]
 8016d3a:	8a21      	ldrh	r1, [r4, #16]
 8016d3c:	f000 f88a 	bl	8016e54 <uxr_seq_num_cmp>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	dd07      	ble.n	8016d54 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016d44:	f04f 0800 	mov.w	r8, #0
 8016d48:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016d4c:	4640      	mov	r0, r8
 8016d4e:	b002      	add	sp, #8
 8016d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d54:	8921      	ldrh	r1, [r4, #8]
 8016d56:	8828      	ldrh	r0, [r5, #0]
 8016d58:	6823      	ldr	r3, [r4, #0]
 8016d5a:	fbb0 f2f1 	udiv	r2, r0, r1
 8016d5e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016d62:	fa1f f28c 	uxth.w	r2, ip
 8016d66:	9301      	str	r3, [sp, #4]
 8016d68:	6863      	ldr	r3, [r4, #4]
 8016d6a:	fbb3 fcf1 	udiv	ip, r3, r1
 8016d6e:	9b01      	ldr	r3, [sp, #4]
 8016d70:	fb02 fc0c 	mul.w	ip, r2, ip
 8016d74:	f10c 0c04 	add.w	ip, ip, #4
 8016d78:	4463      	add	r3, ip
 8016d7a:	6033      	str	r3, [r6, #0]
 8016d7c:	6823      	ldr	r3, [r4, #0]
 8016d7e:	4463      	add	r3, ip
 8016d80:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016d84:	603b      	str	r3, [r7, #0]
 8016d86:	7b22      	ldrb	r2, [r4, #12]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d0d2      	beq.n	8016d32 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016d8c:	4640      	mov	r0, r8
 8016d8e:	b002      	add	sp, #8
 8016d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d94 <uxr_process_acknack>:
 8016d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d96:	4604      	mov	r4, r0
 8016d98:	460e      	mov	r6, r1
 8016d9a:	4610      	mov	r0, r2
 8016d9c:	2101      	movs	r1, #1
 8016d9e:	f000 f855 	bl	8016e4c <uxr_seq_num_sub>
 8016da2:	8a61      	ldrh	r1, [r4, #18]
 8016da4:	f000 f852 	bl	8016e4c <uxr_seq_num_sub>
 8016da8:	b1c0      	cbz	r0, 8016ddc <uxr_process_acknack+0x48>
 8016daa:	4605      	mov	r5, r0
 8016dac:	2700      	movs	r7, #0
 8016dae:	2101      	movs	r1, #1
 8016db0:	8a60      	ldrh	r0, [r4, #18]
 8016db2:	f000 f847 	bl	8016e44 <uxr_seq_num_add>
 8016db6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016dba:	fbb0 f1fc 	udiv	r1, r0, ip
 8016dbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016dc2:	fb0c 0111 	mls	r1, ip, r1, r0
 8016dc6:	b289      	uxth	r1, r1
 8016dc8:	3701      	adds	r7, #1
 8016dca:	fbb3 f3fc 	udiv	r3, r3, ip
 8016dce:	fb01 f303 	mul.w	r3, r1, r3
 8016dd2:	42bd      	cmp	r5, r7
 8016dd4:	7b21      	ldrb	r1, [r4, #12]
 8016dd6:	8260      	strh	r0, [r4, #18]
 8016dd8:	50d1      	str	r1, [r2, r3]
 8016dda:	d1e8      	bne.n	8016dae <uxr_process_acknack+0x1a>
 8016ddc:	3e00      	subs	r6, #0
 8016dde:	f04f 0300 	mov.w	r3, #0
 8016de2:	bf18      	it	ne
 8016de4:	2601      	movne	r6, #1
 8016de6:	f884 3020 	strb.w	r3, [r4, #32]
 8016dea:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016df0 <uxr_is_output_up_to_date>:
 8016df0:	8a01      	ldrh	r1, [r0, #16]
 8016df2:	8a40      	ldrh	r0, [r0, #18]
 8016df4:	b508      	push	{r3, lr}
 8016df6:	f000 f82d 	bl	8016e54 <uxr_seq_num_cmp>
 8016dfa:	fab0 f080 	clz	r0, r0
 8016dfe:	0940      	lsrs	r0, r0, #5
 8016e00:	bd08      	pop	{r3, pc}
 8016e02:	bf00      	nop

08016e04 <get_available_free_slots>:
 8016e04:	8902      	ldrh	r2, [r0, #8]
 8016e06:	b1da      	cbz	r2, 8016e40 <get_available_free_slots+0x3c>
 8016e08:	b530      	push	{r4, r5, lr}
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	6843      	ldr	r3, [r0, #4]
 8016e0e:	6805      	ldr	r5, [r0, #0]
 8016e10:	7b04      	ldrb	r4, [r0, #12]
 8016e12:	fbb3 fef2 	udiv	lr, r3, r2
 8016e16:	4608      	mov	r0, r1
 8016e18:	460b      	mov	r3, r1
 8016e1a:	fbb3 fcf2 	udiv	ip, r3, r2
 8016e1e:	fb02 331c 	mls	r3, r2, ip, r3
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	fb0e f303 	mul.w	r3, lr, r3
 8016e28:	3101      	adds	r1, #1
 8016e2a:	f855 c003 	ldr.w	ip, [r5, r3]
 8016e2e:	4564      	cmp	r4, ip
 8016e30:	bf08      	it	eq
 8016e32:	3001      	addeq	r0, #1
 8016e34:	b28b      	uxth	r3, r1
 8016e36:	bf08      	it	eq
 8016e38:	b280      	uxtheq	r0, r0
 8016e3a:	4293      	cmp	r3, r2
 8016e3c:	d3ed      	bcc.n	8016e1a <get_available_free_slots+0x16>
 8016e3e:	bd30      	pop	{r4, r5, pc}
 8016e40:	4610      	mov	r0, r2
 8016e42:	4770      	bx	lr

08016e44 <uxr_seq_num_add>:
 8016e44:	4408      	add	r0, r1
 8016e46:	b280      	uxth	r0, r0
 8016e48:	4770      	bx	lr
 8016e4a:	bf00      	nop

08016e4c <uxr_seq_num_sub>:
 8016e4c:	1a40      	subs	r0, r0, r1
 8016e4e:	b280      	uxth	r0, r0
 8016e50:	4770      	bx	lr
 8016e52:	bf00      	nop

08016e54 <uxr_seq_num_cmp>:
 8016e54:	4288      	cmp	r0, r1
 8016e56:	d011      	beq.n	8016e7c <uxr_seq_num_cmp+0x28>
 8016e58:	d309      	bcc.n	8016e6e <uxr_seq_num_cmp+0x1a>
 8016e5a:	4288      	cmp	r0, r1
 8016e5c:	d910      	bls.n	8016e80 <uxr_seq_num_cmp+0x2c>
 8016e5e:	1a40      	subs	r0, r0, r1
 8016e60:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016e64:	bfd4      	ite	le
 8016e66:	2001      	movle	r0, #1
 8016e68:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016e6c:	4770      	bx	lr
 8016e6e:	1a0b      	subs	r3, r1, r0
 8016e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016e74:	daf1      	bge.n	8016e5a <uxr_seq_num_cmp+0x6>
 8016e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e7a:	4770      	bx	lr
 8016e7c:	2000      	movs	r0, #0
 8016e7e:	4770      	bx	lr
 8016e80:	2001      	movs	r0, #1
 8016e82:	4770      	bx	lr

08016e84 <rcl_get_default_domain_id>:
 8016e84:	b530      	push	{r4, r5, lr}
 8016e86:	b083      	sub	sp, #12
 8016e88:	2300      	movs	r3, #0
 8016e8a:	9300      	str	r3, [sp, #0]
 8016e8c:	b1d0      	cbz	r0, 8016ec4 <rcl_get_default_domain_id+0x40>
 8016e8e:	4604      	mov	r4, r0
 8016e90:	4669      	mov	r1, sp
 8016e92:	4815      	ldr	r0, [pc, #84]	@ (8016ee8 <rcl_get_default_domain_id+0x64>)
 8016e94:	f7fd ff58 	bl	8014d48 <rcutils_get_env>
 8016e98:	4602      	mov	r2, r0
 8016e9a:	b110      	cbz	r0, 8016ea2 <rcl_get_default_domain_id+0x1e>
 8016e9c:	2001      	movs	r0, #1
 8016e9e:	b003      	add	sp, #12
 8016ea0:	bd30      	pop	{r4, r5, pc}
 8016ea2:	9b00      	ldr	r3, [sp, #0]
 8016ea4:	b18b      	cbz	r3, 8016eca <rcl_get_default_domain_id+0x46>
 8016ea6:	7818      	ldrb	r0, [r3, #0]
 8016ea8:	2800      	cmp	r0, #0
 8016eaa:	d0f8      	beq.n	8016e9e <rcl_get_default_domain_id+0x1a>
 8016eac:	a901      	add	r1, sp, #4
 8016eae:	4618      	mov	r0, r3
 8016eb0:	9201      	str	r2, [sp, #4]
 8016eb2:	f000 fdc9 	bl	8017a48 <strtoul>
 8016eb6:	4605      	mov	r5, r0
 8016eb8:	b150      	cbz	r0, 8016ed0 <rcl_get_default_domain_id+0x4c>
 8016eba:	1c43      	adds	r3, r0, #1
 8016ebc:	d00d      	beq.n	8016eda <rcl_get_default_domain_id+0x56>
 8016ebe:	6025      	str	r5, [r4, #0]
 8016ec0:	2000      	movs	r0, #0
 8016ec2:	e7ec      	b.n	8016e9e <rcl_get_default_domain_id+0x1a>
 8016ec4:	200b      	movs	r0, #11
 8016ec6:	b003      	add	sp, #12
 8016ec8:	bd30      	pop	{r4, r5, pc}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	b003      	add	sp, #12
 8016ece:	bd30      	pop	{r4, r5, pc}
 8016ed0:	9b01      	ldr	r3, [sp, #4]
 8016ed2:	781b      	ldrb	r3, [r3, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d0f2      	beq.n	8016ebe <rcl_get_default_domain_id+0x3a>
 8016ed8:	e7e0      	b.n	8016e9c <rcl_get_default_domain_id+0x18>
 8016eda:	f001 f801 	bl	8017ee0 <__errno>
 8016ede:	6803      	ldr	r3, [r0, #0]
 8016ee0:	2b22      	cmp	r3, #34	@ 0x22
 8016ee2:	d1ec      	bne.n	8016ebe <rcl_get_default_domain_id+0x3a>
 8016ee4:	e7da      	b.n	8016e9c <rcl_get_default_domain_id+0x18>
 8016ee6:	bf00      	nop
 8016ee8:	080198ac 	.word	0x080198ac

08016eec <rcl_expand_topic_name>:
 8016eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef0:	b08b      	sub	sp, #44	@ 0x2c
 8016ef2:	9306      	str	r3, [sp, #24]
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	f000 80ad 	beq.w	8017054 <rcl_expand_topic_name+0x168>
 8016efa:	460e      	mov	r6, r1
 8016efc:	2900      	cmp	r1, #0
 8016efe:	f000 80a9 	beq.w	8017054 <rcl_expand_topic_name+0x168>
 8016f02:	4617      	mov	r7, r2
 8016f04:	2a00      	cmp	r2, #0
 8016f06:	f000 80a5 	beq.w	8017054 <rcl_expand_topic_name+0x168>
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	f000 80a2 	beq.w	8017054 <rcl_expand_topic_name+0x168>
 8016f10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	f000 809e 	beq.w	8017054 <rcl_expand_topic_name+0x168>
 8016f18:	2200      	movs	r2, #0
 8016f1a:	a909      	add	r1, sp, #36	@ 0x24
 8016f1c:	4680      	mov	r8, r0
 8016f1e:	f000 fa57 	bl	80173d0 <rcl_validate_topic_name>
 8016f22:	4604      	mov	r4, r0
 8016f24:	2800      	cmp	r0, #0
 8016f26:	f040 8096 	bne.w	8017056 <rcl_expand_topic_name+0x16a>
 8016f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	f040 809a 	bne.w	8017066 <rcl_expand_topic_name+0x17a>
 8016f32:	4602      	mov	r2, r0
 8016f34:	a909      	add	r1, sp, #36	@ 0x24
 8016f36:	4630      	mov	r0, r6
 8016f38:	f7fe fb30 	bl	801559c <rmw_validate_node_name>
 8016f3c:	2800      	cmp	r0, #0
 8016f3e:	f040 808e 	bne.w	801705e <rcl_expand_topic_name+0x172>
 8016f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f44:	2a00      	cmp	r2, #0
 8016f46:	f040 8093 	bne.w	8017070 <rcl_expand_topic_name+0x184>
 8016f4a:	a909      	add	r1, sp, #36	@ 0x24
 8016f4c:	4638      	mov	r0, r7
 8016f4e:	f7fe fb07 	bl	8015560 <rmw_validate_namespace>
 8016f52:	2800      	cmp	r0, #0
 8016f54:	f040 8083 	bne.w	801705e <rcl_expand_topic_name+0x172>
 8016f58:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016f5a:	2c00      	cmp	r4, #0
 8016f5c:	f040 80ed 	bne.w	801713a <rcl_expand_topic_name+0x24e>
 8016f60:	217b      	movs	r1, #123	@ 0x7b
 8016f62:	4640      	mov	r0, r8
 8016f64:	f000 ff30 	bl	8017dc8 <strchr>
 8016f68:	f898 3000 	ldrb.w	r3, [r8]
 8016f6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f6e:	4605      	mov	r5, r0
 8016f70:	f000 809e 	beq.w	80170b0 <rcl_expand_topic_name+0x1c4>
 8016f74:	2b7e      	cmp	r3, #126	@ 0x7e
 8016f76:	f040 80a2 	bne.w	80170be <rcl_expand_topic_name+0x1d2>
 8016f7a:	4638      	mov	r0, r7
 8016f7c:	f7e9 f95a 	bl	8000234 <strlen>
 8016f80:	4a82      	ldr	r2, [pc, #520]	@ (801718c <rcl_expand_topic_name+0x2a0>)
 8016f82:	4b83      	ldr	r3, [pc, #524]	@ (8017190 <rcl_expand_topic_name+0x2a4>)
 8016f84:	2801      	cmp	r0, #1
 8016f86:	bf18      	it	ne
 8016f88:	4613      	movne	r3, r2
 8016f8a:	9302      	str	r3, [sp, #8]
 8016f8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016f8e:	9300      	str	r3, [sp, #0]
 8016f90:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016f94:	f108 0301 	add.w	r3, r8, #1
 8016f98:	9305      	str	r3, [sp, #20]
 8016f9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016f9e:	9301      	str	r3, [sp, #4]
 8016fa0:	ab14      	add	r3, sp, #80	@ 0x50
 8016fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016fa4:	f7fd fef8 	bl	8014d98 <rcutils_format_string_limit>
 8016fa8:	4682      	mov	sl, r0
 8016faa:	2800      	cmp	r0, #0
 8016fac:	f000 80c7 	beq.w	801713e <rcl_expand_topic_name+0x252>
 8016fb0:	2d00      	cmp	r5, #0
 8016fb2:	f000 80a2 	beq.w	80170fa <rcl_expand_topic_name+0x20e>
 8016fb6:	217b      	movs	r1, #123	@ 0x7b
 8016fb8:	f000 ff06 	bl	8017dc8 <strchr>
 8016fbc:	46d1      	mov	r9, sl
 8016fbe:	4605      	mov	r5, r0
 8016fc0:	9407      	str	r4, [sp, #28]
 8016fc2:	46d3      	mov	fp, sl
 8016fc4:	464c      	mov	r4, r9
 8016fc6:	2d00      	cmp	r5, #0
 8016fc8:	f000 80be 	beq.w	8017148 <rcl_expand_topic_name+0x25c>
 8016fcc:	217d      	movs	r1, #125	@ 0x7d
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f000 fefa 	bl	8017dc8 <strchr>
 8016fd4:	eba0 0905 	sub.w	r9, r0, r5
 8016fd8:	f109 0a01 	add.w	sl, r9, #1
 8016fdc:	486d      	ldr	r0, [pc, #436]	@ (8017194 <rcl_expand_topic_name+0x2a8>)
 8016fde:	4652      	mov	r2, sl
 8016fe0:	4629      	mov	r1, r5
 8016fe2:	f000 fefe 	bl	8017de2 <strncmp>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	d067      	beq.n	80170ba <rcl_expand_topic_name+0x1ce>
 8016fea:	486b      	ldr	r0, [pc, #428]	@ (8017198 <rcl_expand_topic_name+0x2ac>)
 8016fec:	4652      	mov	r2, sl
 8016fee:	4629      	mov	r1, r5
 8016ff0:	f000 fef7 	bl	8017de2 <strncmp>
 8016ff4:	b130      	cbz	r0, 8017004 <rcl_expand_topic_name+0x118>
 8016ff6:	4869      	ldr	r0, [pc, #420]	@ (801719c <rcl_expand_topic_name+0x2b0>)
 8016ff8:	4652      	mov	r2, sl
 8016ffa:	4629      	mov	r1, r5
 8016ffc:	f000 fef1 	bl	8017de2 <strncmp>
 8017000:	2800      	cmp	r0, #0
 8017002:	d137      	bne.n	8017074 <rcl_expand_topic_name+0x188>
 8017004:	46b9      	mov	r9, r7
 8017006:	ab16      	add	r3, sp, #88	@ 0x58
 8017008:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801700c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017010:	ab14      	add	r3, sp, #80	@ 0x50
 8017012:	4628      	mov	r0, r5
 8017014:	cb0c      	ldmia	r3, {r2, r3}
 8017016:	4651      	mov	r1, sl
 8017018:	f7fd fffa 	bl	8015010 <rcutils_strndup>
 801701c:	4605      	mov	r5, r0
 801701e:	2800      	cmp	r0, #0
 8017020:	f000 809c 	beq.w	801715c <rcl_expand_topic_name+0x270>
 8017024:	464a      	mov	r2, r9
 8017026:	4620      	mov	r0, r4
 8017028:	ab14      	add	r3, sp, #80	@ 0x50
 801702a:	4629      	mov	r1, r5
 801702c:	f7fd feee 	bl	8014e0c <rcutils_repl_str>
 8017030:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017032:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017034:	4604      	mov	r4, r0
 8017036:	4628      	mov	r0, r5
 8017038:	4798      	blx	r3
 801703a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801703c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801703e:	4658      	mov	r0, fp
 8017040:	4798      	blx	r3
 8017042:	2c00      	cmp	r4, #0
 8017044:	d07b      	beq.n	801713e <rcl_expand_topic_name+0x252>
 8017046:	217b      	movs	r1, #123	@ 0x7b
 8017048:	4620      	mov	r0, r4
 801704a:	f000 febd 	bl	8017dc8 <strchr>
 801704e:	46a3      	mov	fp, r4
 8017050:	4605      	mov	r5, r0
 8017052:	e7b8      	b.n	8016fc6 <rcl_expand_topic_name+0xda>
 8017054:	240b      	movs	r4, #11
 8017056:	4620      	mov	r0, r4
 8017058:	b00b      	add	sp, #44	@ 0x2c
 801705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801705e:	f7fb f8a1 	bl	80121a4 <rcl_convert_rmw_ret_to_rcl_ret>
 8017062:	4604      	mov	r4, r0
 8017064:	e7f7      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 8017066:	2467      	movs	r4, #103	@ 0x67
 8017068:	4620      	mov	r0, r4
 801706a:	b00b      	add	sp, #44	@ 0x2c
 801706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017070:	24c9      	movs	r4, #201	@ 0xc9
 8017072:	e7f0      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 8017074:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8017078:	9806      	ldr	r0, [sp, #24]
 801707a:	1c69      	adds	r1, r5, #1
 801707c:	f7fe f8e2 	bl	8015244 <rcutils_string_map_getn>
 8017080:	4681      	mov	r9, r0
 8017082:	2800      	cmp	r0, #0
 8017084:	d1bf      	bne.n	8017006 <rcl_expand_topic_name+0x11a>
 8017086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017088:	aa16      	add	r2, sp, #88	@ 0x58
 801708a:	6018      	str	r0, [r3, #0]
 801708c:	ca07      	ldmia	r2, {r0, r1, r2}
 801708e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017092:	ab14      	add	r3, sp, #80	@ 0x50
 8017094:	cb0c      	ldmia	r3, {r2, r3}
 8017096:	4651      	mov	r1, sl
 8017098:	4628      	mov	r0, r5
 801709a:	f7fd ffb9 	bl	8015010 <rcutils_strndup>
 801709e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80170a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80170a2:	4798      	blx	r3
 80170a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80170a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80170a8:	4658      	mov	r0, fp
 80170aa:	2469      	movs	r4, #105	@ 0x69
 80170ac:	4798      	blx	r3
 80170ae:	e7d2      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 80170b0:	2800      	cmp	r0, #0
 80170b2:	d05b      	beq.n	801716c <rcl_expand_topic_name+0x280>
 80170b4:	46c1      	mov	r9, r8
 80170b6:	46a2      	mov	sl, r4
 80170b8:	e782      	b.n	8016fc0 <rcl_expand_topic_name+0xd4>
 80170ba:	46b1      	mov	r9, r6
 80170bc:	e7a3      	b.n	8017006 <rcl_expand_topic_name+0x11a>
 80170be:	2800      	cmp	r0, #0
 80170c0:	d1f8      	bne.n	80170b4 <rcl_expand_topic_name+0x1c8>
 80170c2:	4638      	mov	r0, r7
 80170c4:	f7e9 f8b6 	bl	8000234 <strlen>
 80170c8:	4a35      	ldr	r2, [pc, #212]	@ (80171a0 <rcl_expand_topic_name+0x2b4>)
 80170ca:	4b36      	ldr	r3, [pc, #216]	@ (80171a4 <rcl_expand_topic_name+0x2b8>)
 80170cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80170d0:	2801      	cmp	r0, #1
 80170d2:	bf18      	it	ne
 80170d4:	4613      	movne	r3, r2
 80170d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80170da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80170de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80170e0:	9703      	str	r7, [sp, #12]
 80170e2:	9200      	str	r2, [sp, #0]
 80170e4:	ab14      	add	r3, sp, #80	@ 0x50
 80170e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80170e8:	f7fd fe56 	bl	8014d98 <rcutils_format_string_limit>
 80170ec:	4682      	mov	sl, r0
 80170ee:	4653      	mov	r3, sl
 80170f0:	b32b      	cbz	r3, 801713e <rcl_expand_topic_name+0x252>
 80170f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80170f4:	f8c3 a000 	str.w	sl, [r3]
 80170f8:	e7ad      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 80170fa:	f89a 3000 	ldrb.w	r3, [sl]
 80170fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8017100:	d0f7      	beq.n	80170f2 <rcl_expand_topic_name+0x206>
 8017102:	4638      	mov	r0, r7
 8017104:	f7e9 f896 	bl	8000234 <strlen>
 8017108:	4a25      	ldr	r2, [pc, #148]	@ (80171a0 <rcl_expand_topic_name+0x2b4>)
 801710a:	4b26      	ldr	r3, [pc, #152]	@ (80171a4 <rcl_expand_topic_name+0x2b8>)
 801710c:	f8cd a010 	str.w	sl, [sp, #16]
 8017110:	2801      	cmp	r0, #1
 8017112:	bf18      	it	ne
 8017114:	4613      	movne	r3, r2
 8017116:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801711a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801711e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017120:	9703      	str	r7, [sp, #12]
 8017122:	9200      	str	r2, [sp, #0]
 8017124:	ab14      	add	r3, sp, #80	@ 0x50
 8017126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017128:	f7fd fe36 	bl	8014d98 <rcutils_format_string_limit>
 801712c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801712e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017130:	4605      	mov	r5, r0
 8017132:	4650      	mov	r0, sl
 8017134:	4798      	blx	r3
 8017136:	46aa      	mov	sl, r5
 8017138:	e7d9      	b.n	80170ee <rcl_expand_topic_name+0x202>
 801713a:	24ca      	movs	r4, #202	@ 0xca
 801713c:	e78b      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 801713e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017140:	2300      	movs	r3, #0
 8017142:	6013      	str	r3, [r2, #0]
 8017144:	240a      	movs	r4, #10
 8017146:	e786      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 8017148:	465b      	mov	r3, fp
 801714a:	9c07      	ldr	r4, [sp, #28]
 801714c:	46da      	mov	sl, fp
 801714e:	2b00      	cmp	r3, #0
 8017150:	d1d3      	bne.n	80170fa <rcl_expand_topic_name+0x20e>
 8017152:	f898 3000 	ldrb.w	r3, [r8]
 8017156:	2b2f      	cmp	r3, #47	@ 0x2f
 8017158:	d0cb      	beq.n	80170f2 <rcl_expand_topic_name+0x206>
 801715a:	e7b2      	b.n	80170c2 <rcl_expand_topic_name+0x1d6>
 801715c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017160:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017162:	6015      	str	r5, [r2, #0]
 8017164:	4658      	mov	r0, fp
 8017166:	4798      	blx	r3
 8017168:	240a      	movs	r4, #10
 801716a:	e774      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 801716c:	ab17      	add	r3, sp, #92	@ 0x5c
 801716e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017172:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017176:	ab14      	add	r3, sp, #80	@ 0x50
 8017178:	cb0e      	ldmia	r3, {r1, r2, r3}
 801717a:	4640      	mov	r0, r8
 801717c:	f7fd ff26 	bl	8014fcc <rcutils_strdup>
 8017180:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017182:	2800      	cmp	r0, #0
 8017184:	6018      	str	r0, [r3, #0]
 8017186:	bf08      	it	eq
 8017188:	240a      	moveq	r4, #10
 801718a:	e764      	b.n	8017056 <rcl_expand_topic_name+0x16a>
 801718c:	080198bc 	.word	0x080198bc
 8017190:	08019118 	.word	0x08019118
 8017194:	080198c4 	.word	0x080198c4
 8017198:	080198cc 	.word	0x080198cc
 801719c:	080198d4 	.word	0x080198d4
 80171a0:	08019104 	.word	0x08019104
 80171a4:	08019128 	.word	0x08019128

080171a8 <rcl_get_default_topic_name_substitutions>:
 80171a8:	2800      	cmp	r0, #0
 80171aa:	bf0c      	ite	eq
 80171ac:	200b      	moveq	r0, #11
 80171ae:	2000      	movne	r0, #0
 80171b0:	4770      	bx	lr
 80171b2:	bf00      	nop

080171b4 <rcl_get_zero_initialized_guard_condition>:
 80171b4:	4a03      	ldr	r2, [pc, #12]	@ (80171c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80171b6:	4603      	mov	r3, r0
 80171b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80171c0:	4618      	mov	r0, r3
 80171c2:	4770      	bx	lr
 80171c4:	080198e0 	.word	0x080198e0

080171c8 <rcl_guard_condition_init>:
 80171c8:	b082      	sub	sp, #8
 80171ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171cc:	b087      	sub	sp, #28
 80171ce:	ac0c      	add	r4, sp, #48	@ 0x30
 80171d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80171d4:	46a6      	mov	lr, r4
 80171d6:	460d      	mov	r5, r1
 80171d8:	4604      	mov	r4, r0
 80171da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80171de:	f10d 0c04 	add.w	ip, sp, #4
 80171e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171e6:	f8de 3000 	ldr.w	r3, [lr]
 80171ea:	f8cc 3000 	str.w	r3, [ip]
 80171ee:	a801      	add	r0, sp, #4
 80171f0:	f7f6 f9a4 	bl	800d53c <rcutils_allocator_is_valid>
 80171f4:	b338      	cbz	r0, 8017246 <rcl_guard_condition_init+0x7e>
 80171f6:	b334      	cbz	r4, 8017246 <rcl_guard_condition_init+0x7e>
 80171f8:	6866      	ldr	r6, [r4, #4]
 80171fa:	b9ee      	cbnz	r6, 8017238 <rcl_guard_condition_init+0x70>
 80171fc:	b31d      	cbz	r5, 8017246 <rcl_guard_condition_init+0x7e>
 80171fe:	4628      	mov	r0, r5
 8017200:	f7fa ffee 	bl	80121e0 <rcl_context_is_valid>
 8017204:	b308      	cbz	r0, 801724a <rcl_guard_condition_init+0x82>
 8017206:	9b01      	ldr	r3, [sp, #4]
 8017208:	9905      	ldr	r1, [sp, #20]
 801720a:	201c      	movs	r0, #28
 801720c:	4798      	blx	r3
 801720e:	4607      	mov	r7, r0
 8017210:	6060      	str	r0, [r4, #4]
 8017212:	b310      	cbz	r0, 801725a <rcl_guard_condition_init+0x92>
 8017214:	6828      	ldr	r0, [r5, #0]
 8017216:	3028      	adds	r0, #40	@ 0x28
 8017218:	f000 f9ac 	bl	8017574 <rmw_create_guard_condition>
 801721c:	6038      	str	r0, [r7, #0]
 801721e:	6860      	ldr	r0, [r4, #4]
 8017220:	6805      	ldr	r5, [r0, #0]
 8017222:	b1a5      	cbz	r5, 801724e <rcl_guard_condition_init+0x86>
 8017224:	2301      	movs	r3, #1
 8017226:	ac01      	add	r4, sp, #4
 8017228:	7103      	strb	r3, [r0, #4]
 801722a:	f100 0708 	add.w	r7, r0, #8
 801722e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017230:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	603b      	str	r3, [r7, #0]
 8017236:	e000      	b.n	801723a <rcl_guard_condition_init+0x72>
 8017238:	2664      	movs	r6, #100	@ 0x64
 801723a:	4630      	mov	r0, r6
 801723c:	b007      	add	sp, #28
 801723e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017242:	b002      	add	sp, #8
 8017244:	4770      	bx	lr
 8017246:	260b      	movs	r6, #11
 8017248:	e7f7      	b.n	801723a <rcl_guard_condition_init+0x72>
 801724a:	2665      	movs	r6, #101	@ 0x65
 801724c:	e7f5      	b.n	801723a <rcl_guard_condition_init+0x72>
 801724e:	9b02      	ldr	r3, [sp, #8]
 8017250:	9905      	ldr	r1, [sp, #20]
 8017252:	4798      	blx	r3
 8017254:	2601      	movs	r6, #1
 8017256:	6065      	str	r5, [r4, #4]
 8017258:	e7ef      	b.n	801723a <rcl_guard_condition_init+0x72>
 801725a:	260a      	movs	r6, #10
 801725c:	e7ed      	b.n	801723a <rcl_guard_condition_init+0x72>
 801725e:	bf00      	nop

08017260 <rcl_guard_condition_init_from_rmw>:
 8017260:	b082      	sub	sp, #8
 8017262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017266:	b086      	sub	sp, #24
 8017268:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801726c:	4604      	mov	r4, r0
 801726e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017272:	460e      	mov	r6, r1
 8017274:	4617      	mov	r7, r2
 8017276:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801727a:	f10d 0e04 	add.w	lr, sp, #4
 801727e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017282:	f8dc 3000 	ldr.w	r3, [ip]
 8017286:	f8ce 3000 	str.w	r3, [lr]
 801728a:	a801      	add	r0, sp, #4
 801728c:	f7f6 f956 	bl	800d53c <rcutils_allocator_is_valid>
 8017290:	b350      	cbz	r0, 80172e8 <rcl_guard_condition_init_from_rmw+0x88>
 8017292:	b34c      	cbz	r4, 80172e8 <rcl_guard_condition_init_from_rmw+0x88>
 8017294:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017298:	f1b8 0f00 	cmp.w	r8, #0
 801729c:	d11e      	bne.n	80172dc <rcl_guard_condition_init_from_rmw+0x7c>
 801729e:	b31f      	cbz	r7, 80172e8 <rcl_guard_condition_init_from_rmw+0x88>
 80172a0:	4638      	mov	r0, r7
 80172a2:	f7fa ff9d 	bl	80121e0 <rcl_context_is_valid>
 80172a6:	b328      	cbz	r0, 80172f4 <rcl_guard_condition_init_from_rmw+0x94>
 80172a8:	9b01      	ldr	r3, [sp, #4]
 80172aa:	9905      	ldr	r1, [sp, #20]
 80172ac:	201c      	movs	r0, #28
 80172ae:	4798      	blx	r3
 80172b0:	4605      	mov	r5, r0
 80172b2:	6060      	str	r0, [r4, #4]
 80172b4:	b358      	cbz	r0, 801730e <rcl_guard_condition_init_from_rmw+0xae>
 80172b6:	b1fe      	cbz	r6, 80172f8 <rcl_guard_condition_init_from_rmw+0x98>
 80172b8:	6006      	str	r6, [r0, #0]
 80172ba:	f880 8004 	strb.w	r8, [r0, #4]
 80172be:	ac01      	add	r4, sp, #4
 80172c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80172c2:	f105 0c08 	add.w	ip, r5, #8
 80172c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172ca:	6823      	ldr	r3, [r4, #0]
 80172cc:	f8cc 3000 	str.w	r3, [ip]
 80172d0:	2000      	movs	r0, #0
 80172d2:	b006      	add	sp, #24
 80172d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172d8:	b002      	add	sp, #8
 80172da:	4770      	bx	lr
 80172dc:	2064      	movs	r0, #100	@ 0x64
 80172de:	b006      	add	sp, #24
 80172e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172e4:	b002      	add	sp, #8
 80172e6:	4770      	bx	lr
 80172e8:	200b      	movs	r0, #11
 80172ea:	b006      	add	sp, #24
 80172ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172f0:	b002      	add	sp, #8
 80172f2:	4770      	bx	lr
 80172f4:	2065      	movs	r0, #101	@ 0x65
 80172f6:	e7f2      	b.n	80172de <rcl_guard_condition_init_from_rmw+0x7e>
 80172f8:	6838      	ldr	r0, [r7, #0]
 80172fa:	3028      	adds	r0, #40	@ 0x28
 80172fc:	f000 f93a 	bl	8017574 <rmw_create_guard_condition>
 8017300:	6028      	str	r0, [r5, #0]
 8017302:	6865      	ldr	r5, [r4, #4]
 8017304:	682e      	ldr	r6, [r5, #0]
 8017306:	b126      	cbz	r6, 8017312 <rcl_guard_condition_init_from_rmw+0xb2>
 8017308:	2301      	movs	r3, #1
 801730a:	712b      	strb	r3, [r5, #4]
 801730c:	e7d7      	b.n	80172be <rcl_guard_condition_init_from_rmw+0x5e>
 801730e:	200a      	movs	r0, #10
 8017310:	e7e5      	b.n	80172de <rcl_guard_condition_init_from_rmw+0x7e>
 8017312:	4628      	mov	r0, r5
 8017314:	9b02      	ldr	r3, [sp, #8]
 8017316:	9905      	ldr	r1, [sp, #20]
 8017318:	4798      	blx	r3
 801731a:	6066      	str	r6, [r4, #4]
 801731c:	2001      	movs	r0, #1
 801731e:	e7de      	b.n	80172de <rcl_guard_condition_init_from_rmw+0x7e>

08017320 <rcl_guard_condition_fini>:
 8017320:	b570      	push	{r4, r5, r6, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	b1f0      	cbz	r0, 8017364 <rcl_guard_condition_fini+0x44>
 8017326:	6843      	ldr	r3, [r0, #4]
 8017328:	4604      	mov	r4, r0
 801732a:	b163      	cbz	r3, 8017346 <rcl_guard_condition_fini+0x26>
 801732c:	6818      	ldr	r0, [r3, #0]
 801732e:	68de      	ldr	r6, [r3, #12]
 8017330:	6999      	ldr	r1, [r3, #24]
 8017332:	b160      	cbz	r0, 801734e <rcl_guard_condition_fini+0x2e>
 8017334:	791d      	ldrb	r5, [r3, #4]
 8017336:	b965      	cbnz	r5, 8017352 <rcl_guard_condition_fini+0x32>
 8017338:	4618      	mov	r0, r3
 801733a:	47b0      	blx	r6
 801733c:	2300      	movs	r3, #0
 801733e:	4628      	mov	r0, r5
 8017340:	6063      	str	r3, [r4, #4]
 8017342:	b002      	add	sp, #8
 8017344:	bd70      	pop	{r4, r5, r6, pc}
 8017346:	461d      	mov	r5, r3
 8017348:	4628      	mov	r0, r5
 801734a:	b002      	add	sp, #8
 801734c:	bd70      	pop	{r4, r5, r6, pc}
 801734e:	4605      	mov	r5, r0
 8017350:	e7f2      	b.n	8017338 <rcl_guard_condition_fini+0x18>
 8017352:	9101      	str	r1, [sp, #4]
 8017354:	f000 f922 	bl	801759c <rmw_destroy_guard_condition>
 8017358:	1e05      	subs	r5, r0, #0
 801735a:	6863      	ldr	r3, [r4, #4]
 801735c:	9901      	ldr	r1, [sp, #4]
 801735e:	bf18      	it	ne
 8017360:	2501      	movne	r5, #1
 8017362:	e7e9      	b.n	8017338 <rcl_guard_condition_fini+0x18>
 8017364:	250b      	movs	r5, #11
 8017366:	4628      	mov	r0, r5
 8017368:	b002      	add	sp, #8
 801736a:	bd70      	pop	{r4, r5, r6, pc}

0801736c <rcl_guard_condition_get_default_options>:
 801736c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801736e:	b087      	sub	sp, #28
 8017370:	4606      	mov	r6, r0
 8017372:	4668      	mov	r0, sp
 8017374:	f7f6 f8d4 	bl	800d520 <rcutils_get_default_allocator>
 8017378:	4b09      	ldr	r3, [pc, #36]	@ (80173a0 <rcl_guard_condition_get_default_options+0x34>)
 801737a:	46ee      	mov	lr, sp
 801737c:	469c      	mov	ip, r3
 801737e:	461d      	mov	r5, r3
 8017380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801738a:	4634      	mov	r4, r6
 801738c:	f8de 7000 	ldr.w	r7, [lr]
 8017390:	f8cc 7000 	str.w	r7, [ip]
 8017394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017396:	4630      	mov	r0, r6
 8017398:	6027      	str	r7, [r4, #0]
 801739a:	b007      	add	sp, #28
 801739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801739e:	bf00      	nop
 80173a0:	2000af38 	.word	0x2000af38

080173a4 <rcl_trigger_guard_condition>:
 80173a4:	b148      	cbz	r0, 80173ba <rcl_trigger_guard_condition+0x16>
 80173a6:	b508      	push	{r3, lr}
 80173a8:	6843      	ldr	r3, [r0, #4]
 80173aa:	b143      	cbz	r3, 80173be <rcl_trigger_guard_condition+0x1a>
 80173ac:	6818      	ldr	r0, [r3, #0]
 80173ae:	f000 f909 	bl	80175c4 <rmw_trigger_guard_condition>
 80173b2:	3800      	subs	r0, #0
 80173b4:	bf18      	it	ne
 80173b6:	2001      	movne	r0, #1
 80173b8:	bd08      	pop	{r3, pc}
 80173ba:	200b      	movs	r0, #11
 80173bc:	4770      	bx	lr
 80173be:	200b      	movs	r0, #11
 80173c0:	bd08      	pop	{r3, pc}
 80173c2:	bf00      	nop

080173c4 <rcl_guard_condition_get_rmw_handle>:
 80173c4:	b110      	cbz	r0, 80173cc <rcl_guard_condition_get_rmw_handle+0x8>
 80173c6:	6840      	ldr	r0, [r0, #4]
 80173c8:	b100      	cbz	r0, 80173cc <rcl_guard_condition_get_rmw_handle+0x8>
 80173ca:	6800      	ldr	r0, [r0, #0]
 80173cc:	4770      	bx	lr
 80173ce:	bf00      	nop

080173d0 <rcl_validate_topic_name>:
 80173d0:	2800      	cmp	r0, #0
 80173d2:	d07a      	beq.n	80174ca <rcl_validate_topic_name+0xfa>
 80173d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173d8:	460e      	mov	r6, r1
 80173da:	2900      	cmp	r1, #0
 80173dc:	d07c      	beq.n	80174d8 <rcl_validate_topic_name+0x108>
 80173de:	4617      	mov	r7, r2
 80173e0:	4605      	mov	r5, r0
 80173e2:	f7e8 ff27 	bl	8000234 <strlen>
 80173e6:	b1b0      	cbz	r0, 8017416 <rcl_validate_topic_name+0x46>
 80173e8:	f895 9000 	ldrb.w	r9, [r5]
 80173ec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017570 <rcl_validate_topic_name+0x1a0>
 80173f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80173f4:	f013 0304 	ands.w	r3, r3, #4
 80173f8:	d169      	bne.n	80174ce <rcl_validate_topic_name+0xfe>
 80173fa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80173fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017402:	2a2f      	cmp	r2, #47	@ 0x2f
 8017404:	d10e      	bne.n	8017424 <rcl_validate_topic_name+0x54>
 8017406:	2202      	movs	r2, #2
 8017408:	6032      	str	r2, [r6, #0]
 801740a:	b36f      	cbz	r7, 8017468 <rcl_validate_topic_name+0x98>
 801740c:	f8c7 8000 	str.w	r8, [r7]
 8017410:	4618      	mov	r0, r3
 8017412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017416:	2301      	movs	r3, #1
 8017418:	6033      	str	r3, [r6, #0]
 801741a:	b32f      	cbz	r7, 8017468 <rcl_validate_topic_name+0x98>
 801741c:	2000      	movs	r0, #0
 801741e:	6038      	str	r0, [r7, #0]
 8017420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017424:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017428:	461c      	mov	r4, r3
 801742a:	4619      	mov	r1, r3
 801742c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017430:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017434:	f1be 0f09 	cmp.w	lr, #9
 8017438:	d919      	bls.n	801746e <rcl_validate_topic_name+0x9e>
 801743a:	f022 0e20 	bic.w	lr, r2, #32
 801743e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017442:	f1be 0f19 	cmp.w	lr, #25
 8017446:	d912      	bls.n	801746e <rcl_validate_topic_name+0x9e>
 8017448:	2a5f      	cmp	r2, #95	@ 0x5f
 801744a:	d019      	beq.n	8017480 <rcl_validate_topic_name+0xb0>
 801744c:	2a2f      	cmp	r2, #47	@ 0x2f
 801744e:	d051      	beq.n	80174f4 <rcl_validate_topic_name+0x124>
 8017450:	2a7e      	cmp	r2, #126	@ 0x7e
 8017452:	d048      	beq.n	80174e6 <rcl_validate_topic_name+0x116>
 8017454:	2a7b      	cmp	r2, #123	@ 0x7b
 8017456:	d054      	beq.n	8017502 <rcl_validate_topic_name+0x132>
 8017458:	2a7d      	cmp	r2, #125	@ 0x7d
 801745a:	d161      	bne.n	8017520 <rcl_validate_topic_name+0x150>
 801745c:	2c00      	cmp	r4, #0
 801745e:	d155      	bne.n	801750c <rcl_validate_topic_name+0x13c>
 8017460:	2305      	movs	r3, #5
 8017462:	6033      	str	r3, [r6, #0]
 8017464:	b107      	cbz	r7, 8017468 <rcl_validate_topic_name+0x98>
 8017466:	6039      	str	r1, [r7, #0]
 8017468:	2000      	movs	r0, #0
 801746a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801746e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017472:	0752      	lsls	r2, r2, #29
 8017474:	d504      	bpl.n	8017480 <rcl_validate_topic_name+0xb0>
 8017476:	b11c      	cbz	r4, 8017480 <rcl_validate_topic_name+0xb0>
 8017478:	b111      	cbz	r1, 8017480 <rcl_validate_topic_name+0xb0>
 801747a:	1e4a      	subs	r2, r1, #1
 801747c:	429a      	cmp	r2, r3
 801747e:	d02d      	beq.n	80174dc <rcl_validate_topic_name+0x10c>
 8017480:	3101      	adds	r1, #1
 8017482:	4288      	cmp	r0, r1
 8017484:	d1d2      	bne.n	801742c <rcl_validate_topic_name+0x5c>
 8017486:	2c00      	cmp	r4, #0
 8017488:	d145      	bne.n	8017516 <rcl_validate_topic_name+0x146>
 801748a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801748e:	d04f      	beq.n	8017530 <rcl_validate_topic_name+0x160>
 8017490:	4620      	mov	r0, r4
 8017492:	2301      	movs	r3, #1
 8017494:	e006      	b.n	80174a4 <rcl_validate_topic_name+0xd4>
 8017496:	428b      	cmp	r3, r1
 8017498:	f105 0501 	add.w	r5, r5, #1
 801749c:	f103 0201 	add.w	r2, r3, #1
 80174a0:	d236      	bcs.n	8017510 <rcl_validate_topic_name+0x140>
 80174a2:	4613      	mov	r3, r2
 80174a4:	4580      	cmp	r8, r0
 80174a6:	f100 0001 	add.w	r0, r0, #1
 80174aa:	d0f4      	beq.n	8017496 <rcl_validate_topic_name+0xc6>
 80174ac:	782a      	ldrb	r2, [r5, #0]
 80174ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80174b0:	d1f1      	bne.n	8017496 <rcl_validate_topic_name+0xc6>
 80174b2:	786a      	ldrb	r2, [r5, #1]
 80174b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80174b8:	0754      	lsls	r4, r2, #29
 80174ba:	d5ec      	bpl.n	8017496 <rcl_validate_topic_name+0xc6>
 80174bc:	2204      	movs	r2, #4
 80174be:	6032      	str	r2, [r6, #0]
 80174c0:	2f00      	cmp	r7, #0
 80174c2:	d0d1      	beq.n	8017468 <rcl_validate_topic_name+0x98>
 80174c4:	603b      	str	r3, [r7, #0]
 80174c6:	2000      	movs	r0, #0
 80174c8:	e7aa      	b.n	8017420 <rcl_validate_topic_name+0x50>
 80174ca:	200b      	movs	r0, #11
 80174cc:	4770      	bx	lr
 80174ce:	2304      	movs	r3, #4
 80174d0:	6033      	str	r3, [r6, #0]
 80174d2:	2f00      	cmp	r7, #0
 80174d4:	d1a2      	bne.n	801741c <rcl_validate_topic_name+0x4c>
 80174d6:	e7c7      	b.n	8017468 <rcl_validate_topic_name+0x98>
 80174d8:	200b      	movs	r0, #11
 80174da:	e7a1      	b.n	8017420 <rcl_validate_topic_name+0x50>
 80174dc:	2309      	movs	r3, #9
 80174de:	6033      	str	r3, [r6, #0]
 80174e0:	2f00      	cmp	r7, #0
 80174e2:	d1c0      	bne.n	8017466 <rcl_validate_topic_name+0x96>
 80174e4:	e7c0      	b.n	8017468 <rcl_validate_topic_name+0x98>
 80174e6:	2900      	cmp	r1, #0
 80174e8:	d0ca      	beq.n	8017480 <rcl_validate_topic_name+0xb0>
 80174ea:	2306      	movs	r3, #6
 80174ec:	6033      	str	r3, [r6, #0]
 80174ee:	2f00      	cmp	r7, #0
 80174f0:	d1b9      	bne.n	8017466 <rcl_validate_topic_name+0x96>
 80174f2:	e7b9      	b.n	8017468 <rcl_validate_topic_name+0x98>
 80174f4:	2c00      	cmp	r4, #0
 80174f6:	d0c3      	beq.n	8017480 <rcl_validate_topic_name+0xb0>
 80174f8:	2308      	movs	r3, #8
 80174fa:	6033      	str	r3, [r6, #0]
 80174fc:	2f00      	cmp	r7, #0
 80174fe:	d1b2      	bne.n	8017466 <rcl_validate_topic_name+0x96>
 8017500:	e7b2      	b.n	8017468 <rcl_validate_topic_name+0x98>
 8017502:	2c00      	cmp	r4, #0
 8017504:	d1f8      	bne.n	80174f8 <rcl_validate_topic_name+0x128>
 8017506:	460b      	mov	r3, r1
 8017508:	2401      	movs	r4, #1
 801750a:	e7b9      	b.n	8017480 <rcl_validate_topic_name+0xb0>
 801750c:	2400      	movs	r4, #0
 801750e:	e7b7      	b.n	8017480 <rcl_validate_topic_name+0xb0>
 8017510:	2000      	movs	r0, #0
 8017512:	6030      	str	r0, [r6, #0]
 8017514:	e784      	b.n	8017420 <rcl_validate_topic_name+0x50>
 8017516:	2205      	movs	r2, #5
 8017518:	6032      	str	r2, [r6, #0]
 801751a:	2f00      	cmp	r7, #0
 801751c:	d1d2      	bne.n	80174c4 <rcl_validate_topic_name+0xf4>
 801751e:	e7a3      	b.n	8017468 <rcl_validate_topic_name+0x98>
 8017520:	2c00      	cmp	r4, #0
 8017522:	bf14      	ite	ne
 8017524:	2308      	movne	r3, #8
 8017526:	2303      	moveq	r3, #3
 8017528:	6033      	str	r3, [r6, #0]
 801752a:	2f00      	cmp	r7, #0
 801752c:	d19b      	bne.n	8017466 <rcl_validate_topic_name+0x96>
 801752e:	e79b      	b.n	8017468 <rcl_validate_topic_name+0x98>
 8017530:	2301      	movs	r3, #1
 8017532:	e00a      	b.n	801754a <rcl_validate_topic_name+0x17a>
 8017534:	2c01      	cmp	r4, #1
 8017536:	d013      	beq.n	8017560 <rcl_validate_topic_name+0x190>
 8017538:	4299      	cmp	r1, r3
 801753a:	f104 0401 	add.w	r4, r4, #1
 801753e:	f105 0501 	add.w	r5, r5, #1
 8017542:	f103 0201 	add.w	r2, r3, #1
 8017546:	d9e3      	bls.n	8017510 <rcl_validate_topic_name+0x140>
 8017548:	4613      	mov	r3, r2
 801754a:	45a0      	cmp	r8, r4
 801754c:	d0f4      	beq.n	8017538 <rcl_validate_topic_name+0x168>
 801754e:	782a      	ldrb	r2, [r5, #0]
 8017550:	2a2f      	cmp	r2, #47	@ 0x2f
 8017552:	d1ef      	bne.n	8017534 <rcl_validate_topic_name+0x164>
 8017554:	786a      	ldrb	r2, [r5, #1]
 8017556:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801755a:	0752      	lsls	r2, r2, #29
 801755c:	d5ec      	bpl.n	8017538 <rcl_validate_topic_name+0x168>
 801755e:	e7ad      	b.n	80174bc <rcl_validate_topic_name+0xec>
 8017560:	2307      	movs	r3, #7
 8017562:	6033      	str	r3, [r6, #0]
 8017564:	2f00      	cmp	r7, #0
 8017566:	f43f af7f 	beq.w	8017468 <rcl_validate_topic_name+0x98>
 801756a:	603c      	str	r4, [r7, #0]
 801756c:	2000      	movs	r0, #0
 801756e:	e757      	b.n	8017420 <rcl_validate_topic_name+0x50>
 8017570:	08019958 	.word	0x08019958

08017574 <rmw_create_guard_condition>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4605      	mov	r5, r0
 8017578:	4807      	ldr	r0, [pc, #28]	@ (8017598 <rmw_create_guard_condition+0x24>)
 801757a:	f7fe f955 	bl	8015828 <get_memory>
 801757e:	b148      	cbz	r0, 8017594 <rmw_create_guard_condition+0x20>
 8017580:	6884      	ldr	r4, [r0, #8]
 8017582:	2300      	movs	r3, #0
 8017584:	7423      	strb	r3, [r4, #16]
 8017586:	61e5      	str	r5, [r4, #28]
 8017588:	f7fe f9b6 	bl	80158f8 <rmw_get_implementation_identifier>
 801758c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017590:	f104 0014 	add.w	r0, r4, #20
 8017594:	bd38      	pop	{r3, r4, r5, pc}
 8017596:	bf00      	nop
 8017598:	2000add4 	.word	0x2000add4

0801759c <rmw_destroy_guard_condition>:
 801759c:	b508      	push	{r3, lr}
 801759e:	4b08      	ldr	r3, [pc, #32]	@ (80175c0 <rmw_destroy_guard_condition+0x24>)
 80175a0:	6819      	ldr	r1, [r3, #0]
 80175a2:	b911      	cbnz	r1, 80175aa <rmw_destroy_guard_condition+0xe>
 80175a4:	e00a      	b.n	80175bc <rmw_destroy_guard_condition+0x20>
 80175a6:	6849      	ldr	r1, [r1, #4]
 80175a8:	b141      	cbz	r1, 80175bc <rmw_destroy_guard_condition+0x20>
 80175aa:	688b      	ldr	r3, [r1, #8]
 80175ac:	3314      	adds	r3, #20
 80175ae:	4298      	cmp	r0, r3
 80175b0:	d1f9      	bne.n	80175a6 <rmw_destroy_guard_condition+0xa>
 80175b2:	4803      	ldr	r0, [pc, #12]	@ (80175c0 <rmw_destroy_guard_condition+0x24>)
 80175b4:	f7fe f948 	bl	8015848 <put_memory>
 80175b8:	2000      	movs	r0, #0
 80175ba:	bd08      	pop	{r3, pc}
 80175bc:	2001      	movs	r0, #1
 80175be:	bd08      	pop	{r3, pc}
 80175c0:	2000add4 	.word	0x2000add4

080175c4 <rmw_trigger_guard_condition>:
 80175c4:	b160      	cbz	r0, 80175e0 <rmw_trigger_guard_condition+0x1c>
 80175c6:	b510      	push	{r4, lr}
 80175c8:	4604      	mov	r4, r0
 80175ca:	6800      	ldr	r0, [r0, #0]
 80175cc:	f7f7 f9a2 	bl	800e914 <is_uxrce_rmw_identifier_valid>
 80175d0:	b908      	cbnz	r0, 80175d6 <rmw_trigger_guard_condition+0x12>
 80175d2:	2001      	movs	r0, #1
 80175d4:	bd10      	pop	{r4, pc}
 80175d6:	6863      	ldr	r3, [r4, #4]
 80175d8:	2201      	movs	r2, #1
 80175da:	741a      	strb	r2, [r3, #16]
 80175dc:	2000      	movs	r0, #0
 80175de:	bd10      	pop	{r4, pc}
 80175e0:	2001      	movs	r0, #1
 80175e2:	4770      	bx	lr

080175e4 <calloc>:
 80175e4:	4b02      	ldr	r3, [pc, #8]	@ (80175f0 <calloc+0xc>)
 80175e6:	460a      	mov	r2, r1
 80175e8:	4601      	mov	r1, r0
 80175ea:	6818      	ldr	r0, [r3, #0]
 80175ec:	f000 b802 	b.w	80175f4 <_calloc_r>
 80175f0:	200001e4 	.word	0x200001e4

080175f4 <_calloc_r>:
 80175f4:	b570      	push	{r4, r5, r6, lr}
 80175f6:	fba1 5402 	umull	r5, r4, r1, r2
 80175fa:	b93c      	cbnz	r4, 801760c <_calloc_r+0x18>
 80175fc:	4629      	mov	r1, r5
 80175fe:	f000 f887 	bl	8017710 <_malloc_r>
 8017602:	4606      	mov	r6, r0
 8017604:	b928      	cbnz	r0, 8017612 <_calloc_r+0x1e>
 8017606:	2600      	movs	r6, #0
 8017608:	4630      	mov	r0, r6
 801760a:	bd70      	pop	{r4, r5, r6, pc}
 801760c:	220c      	movs	r2, #12
 801760e:	6002      	str	r2, [r0, #0]
 8017610:	e7f9      	b.n	8017606 <_calloc_r+0x12>
 8017612:	462a      	mov	r2, r5
 8017614:	4621      	mov	r1, r4
 8017616:	f000 fbcf 	bl	8017db8 <memset>
 801761a:	e7f5      	b.n	8017608 <_calloc_r+0x14>

0801761c <getenv>:
 801761c:	b507      	push	{r0, r1, r2, lr}
 801761e:	4b04      	ldr	r3, [pc, #16]	@ (8017630 <getenv+0x14>)
 8017620:	4601      	mov	r1, r0
 8017622:	aa01      	add	r2, sp, #4
 8017624:	6818      	ldr	r0, [r3, #0]
 8017626:	f000 f805 	bl	8017634 <_findenv_r>
 801762a:	b003      	add	sp, #12
 801762c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017630:	200001e4 	.word	0x200001e4

08017634 <_findenv_r>:
 8017634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017638:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80176a8 <_findenv_r+0x74>
 801763c:	4606      	mov	r6, r0
 801763e:	4689      	mov	r9, r1
 8017640:	4617      	mov	r7, r2
 8017642:	f000 fcaf 	bl	8017fa4 <__env_lock>
 8017646:	f8da 4000 	ldr.w	r4, [sl]
 801764a:	b134      	cbz	r4, 801765a <_findenv_r+0x26>
 801764c:	464b      	mov	r3, r9
 801764e:	4698      	mov	r8, r3
 8017650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017654:	b13a      	cbz	r2, 8017666 <_findenv_r+0x32>
 8017656:	2a3d      	cmp	r2, #61	@ 0x3d
 8017658:	d1f9      	bne.n	801764e <_findenv_r+0x1a>
 801765a:	4630      	mov	r0, r6
 801765c:	f000 fca8 	bl	8017fb0 <__env_unlock>
 8017660:	2000      	movs	r0, #0
 8017662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017666:	eba8 0809 	sub.w	r8, r8, r9
 801766a:	46a3      	mov	fp, r4
 801766c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017670:	2800      	cmp	r0, #0
 8017672:	d0f2      	beq.n	801765a <_findenv_r+0x26>
 8017674:	4642      	mov	r2, r8
 8017676:	4649      	mov	r1, r9
 8017678:	f000 fbb3 	bl	8017de2 <strncmp>
 801767c:	2800      	cmp	r0, #0
 801767e:	d1f4      	bne.n	801766a <_findenv_r+0x36>
 8017680:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017684:	eb03 0508 	add.w	r5, r3, r8
 8017688:	f813 3008 	ldrb.w	r3, [r3, r8]
 801768c:	2b3d      	cmp	r3, #61	@ 0x3d
 801768e:	d1ec      	bne.n	801766a <_findenv_r+0x36>
 8017690:	f8da 3000 	ldr.w	r3, [sl]
 8017694:	ebab 0303 	sub.w	r3, fp, r3
 8017698:	109b      	asrs	r3, r3, #2
 801769a:	4630      	mov	r0, r6
 801769c:	603b      	str	r3, [r7, #0]
 801769e:	f000 fc87 	bl	8017fb0 <__env_unlock>
 80176a2:	1c68      	adds	r0, r5, #1
 80176a4:	e7dd      	b.n	8017662 <_findenv_r+0x2e>
 80176a6:	bf00      	nop
 80176a8:	20000000 	.word	0x20000000

080176ac <malloc>:
 80176ac:	4b02      	ldr	r3, [pc, #8]	@ (80176b8 <malloc+0xc>)
 80176ae:	4601      	mov	r1, r0
 80176b0:	6818      	ldr	r0, [r3, #0]
 80176b2:	f000 b82d 	b.w	8017710 <_malloc_r>
 80176b6:	bf00      	nop
 80176b8:	200001e4 	.word	0x200001e4

080176bc <free>:
 80176bc:	4b02      	ldr	r3, [pc, #8]	@ (80176c8 <free+0xc>)
 80176be:	4601      	mov	r1, r0
 80176c0:	6818      	ldr	r0, [r3, #0]
 80176c2:	f000 bc7b 	b.w	8017fbc <_free_r>
 80176c6:	bf00      	nop
 80176c8:	200001e4 	.word	0x200001e4

080176cc <sbrk_aligned>:
 80176cc:	b570      	push	{r4, r5, r6, lr}
 80176ce:	4e0f      	ldr	r6, [pc, #60]	@ (801770c <sbrk_aligned+0x40>)
 80176d0:	460c      	mov	r4, r1
 80176d2:	6831      	ldr	r1, [r6, #0]
 80176d4:	4605      	mov	r5, r0
 80176d6:	b911      	cbnz	r1, 80176de <sbrk_aligned+0x12>
 80176d8:	f000 fbe0 	bl	8017e9c <_sbrk_r>
 80176dc:	6030      	str	r0, [r6, #0]
 80176de:	4621      	mov	r1, r4
 80176e0:	4628      	mov	r0, r5
 80176e2:	f000 fbdb 	bl	8017e9c <_sbrk_r>
 80176e6:	1c43      	adds	r3, r0, #1
 80176e8:	d103      	bne.n	80176f2 <sbrk_aligned+0x26>
 80176ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80176ee:	4620      	mov	r0, r4
 80176f0:	bd70      	pop	{r4, r5, r6, pc}
 80176f2:	1cc4      	adds	r4, r0, #3
 80176f4:	f024 0403 	bic.w	r4, r4, #3
 80176f8:	42a0      	cmp	r0, r4
 80176fa:	d0f8      	beq.n	80176ee <sbrk_aligned+0x22>
 80176fc:	1a21      	subs	r1, r4, r0
 80176fe:	4628      	mov	r0, r5
 8017700:	f000 fbcc 	bl	8017e9c <_sbrk_r>
 8017704:	3001      	adds	r0, #1
 8017706:	d1f2      	bne.n	80176ee <sbrk_aligned+0x22>
 8017708:	e7ef      	b.n	80176ea <sbrk_aligned+0x1e>
 801770a:	bf00      	nop
 801770c:	2000af4c 	.word	0x2000af4c

08017710 <_malloc_r>:
 8017710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017714:	1ccd      	adds	r5, r1, #3
 8017716:	f025 0503 	bic.w	r5, r5, #3
 801771a:	3508      	adds	r5, #8
 801771c:	2d0c      	cmp	r5, #12
 801771e:	bf38      	it	cc
 8017720:	250c      	movcc	r5, #12
 8017722:	2d00      	cmp	r5, #0
 8017724:	4606      	mov	r6, r0
 8017726:	db01      	blt.n	801772c <_malloc_r+0x1c>
 8017728:	42a9      	cmp	r1, r5
 801772a:	d904      	bls.n	8017736 <_malloc_r+0x26>
 801772c:	230c      	movs	r3, #12
 801772e:	6033      	str	r3, [r6, #0]
 8017730:	2000      	movs	r0, #0
 8017732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017736:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801780c <_malloc_r+0xfc>
 801773a:	f000 f869 	bl	8017810 <__malloc_lock>
 801773e:	f8d8 3000 	ldr.w	r3, [r8]
 8017742:	461c      	mov	r4, r3
 8017744:	bb44      	cbnz	r4, 8017798 <_malloc_r+0x88>
 8017746:	4629      	mov	r1, r5
 8017748:	4630      	mov	r0, r6
 801774a:	f7ff ffbf 	bl	80176cc <sbrk_aligned>
 801774e:	1c43      	adds	r3, r0, #1
 8017750:	4604      	mov	r4, r0
 8017752:	d158      	bne.n	8017806 <_malloc_r+0xf6>
 8017754:	f8d8 4000 	ldr.w	r4, [r8]
 8017758:	4627      	mov	r7, r4
 801775a:	2f00      	cmp	r7, #0
 801775c:	d143      	bne.n	80177e6 <_malloc_r+0xd6>
 801775e:	2c00      	cmp	r4, #0
 8017760:	d04b      	beq.n	80177fa <_malloc_r+0xea>
 8017762:	6823      	ldr	r3, [r4, #0]
 8017764:	4639      	mov	r1, r7
 8017766:	4630      	mov	r0, r6
 8017768:	eb04 0903 	add.w	r9, r4, r3
 801776c:	f000 fb96 	bl	8017e9c <_sbrk_r>
 8017770:	4581      	cmp	r9, r0
 8017772:	d142      	bne.n	80177fa <_malloc_r+0xea>
 8017774:	6821      	ldr	r1, [r4, #0]
 8017776:	1a6d      	subs	r5, r5, r1
 8017778:	4629      	mov	r1, r5
 801777a:	4630      	mov	r0, r6
 801777c:	f7ff ffa6 	bl	80176cc <sbrk_aligned>
 8017780:	3001      	adds	r0, #1
 8017782:	d03a      	beq.n	80177fa <_malloc_r+0xea>
 8017784:	6823      	ldr	r3, [r4, #0]
 8017786:	442b      	add	r3, r5
 8017788:	6023      	str	r3, [r4, #0]
 801778a:	f8d8 3000 	ldr.w	r3, [r8]
 801778e:	685a      	ldr	r2, [r3, #4]
 8017790:	bb62      	cbnz	r2, 80177ec <_malloc_r+0xdc>
 8017792:	f8c8 7000 	str.w	r7, [r8]
 8017796:	e00f      	b.n	80177b8 <_malloc_r+0xa8>
 8017798:	6822      	ldr	r2, [r4, #0]
 801779a:	1b52      	subs	r2, r2, r5
 801779c:	d420      	bmi.n	80177e0 <_malloc_r+0xd0>
 801779e:	2a0b      	cmp	r2, #11
 80177a0:	d917      	bls.n	80177d2 <_malloc_r+0xc2>
 80177a2:	1961      	adds	r1, r4, r5
 80177a4:	42a3      	cmp	r3, r4
 80177a6:	6025      	str	r5, [r4, #0]
 80177a8:	bf18      	it	ne
 80177aa:	6059      	strne	r1, [r3, #4]
 80177ac:	6863      	ldr	r3, [r4, #4]
 80177ae:	bf08      	it	eq
 80177b0:	f8c8 1000 	streq.w	r1, [r8]
 80177b4:	5162      	str	r2, [r4, r5]
 80177b6:	604b      	str	r3, [r1, #4]
 80177b8:	4630      	mov	r0, r6
 80177ba:	f000 f82f 	bl	801781c <__malloc_unlock>
 80177be:	f104 000b 	add.w	r0, r4, #11
 80177c2:	1d23      	adds	r3, r4, #4
 80177c4:	f020 0007 	bic.w	r0, r0, #7
 80177c8:	1ac2      	subs	r2, r0, r3
 80177ca:	bf1c      	itt	ne
 80177cc:	1a1b      	subne	r3, r3, r0
 80177ce:	50a3      	strne	r3, [r4, r2]
 80177d0:	e7af      	b.n	8017732 <_malloc_r+0x22>
 80177d2:	6862      	ldr	r2, [r4, #4]
 80177d4:	42a3      	cmp	r3, r4
 80177d6:	bf0c      	ite	eq
 80177d8:	f8c8 2000 	streq.w	r2, [r8]
 80177dc:	605a      	strne	r2, [r3, #4]
 80177de:	e7eb      	b.n	80177b8 <_malloc_r+0xa8>
 80177e0:	4623      	mov	r3, r4
 80177e2:	6864      	ldr	r4, [r4, #4]
 80177e4:	e7ae      	b.n	8017744 <_malloc_r+0x34>
 80177e6:	463c      	mov	r4, r7
 80177e8:	687f      	ldr	r7, [r7, #4]
 80177ea:	e7b6      	b.n	801775a <_malloc_r+0x4a>
 80177ec:	461a      	mov	r2, r3
 80177ee:	685b      	ldr	r3, [r3, #4]
 80177f0:	42a3      	cmp	r3, r4
 80177f2:	d1fb      	bne.n	80177ec <_malloc_r+0xdc>
 80177f4:	2300      	movs	r3, #0
 80177f6:	6053      	str	r3, [r2, #4]
 80177f8:	e7de      	b.n	80177b8 <_malloc_r+0xa8>
 80177fa:	230c      	movs	r3, #12
 80177fc:	6033      	str	r3, [r6, #0]
 80177fe:	4630      	mov	r0, r6
 8017800:	f000 f80c 	bl	801781c <__malloc_unlock>
 8017804:	e794      	b.n	8017730 <_malloc_r+0x20>
 8017806:	6005      	str	r5, [r0, #0]
 8017808:	e7d6      	b.n	80177b8 <_malloc_r+0xa8>
 801780a:	bf00      	nop
 801780c:	2000af50 	.word	0x2000af50

08017810 <__malloc_lock>:
 8017810:	4801      	ldr	r0, [pc, #4]	@ (8017818 <__malloc_lock+0x8>)
 8017812:	f000 bb90 	b.w	8017f36 <__retarget_lock_acquire_recursive>
 8017816:	bf00      	nop
 8017818:	2000b095 	.word	0x2000b095

0801781c <__malloc_unlock>:
 801781c:	4801      	ldr	r0, [pc, #4]	@ (8017824 <__malloc_unlock+0x8>)
 801781e:	f000 bb8b 	b.w	8017f38 <__retarget_lock_release_recursive>
 8017822:	bf00      	nop
 8017824:	2000b095 	.word	0x2000b095

08017828 <srand>:
 8017828:	b538      	push	{r3, r4, r5, lr}
 801782a:	4b10      	ldr	r3, [pc, #64]	@ (801786c <srand+0x44>)
 801782c:	681d      	ldr	r5, [r3, #0]
 801782e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017830:	4604      	mov	r4, r0
 8017832:	b9b3      	cbnz	r3, 8017862 <srand+0x3a>
 8017834:	2018      	movs	r0, #24
 8017836:	f7ff ff39 	bl	80176ac <malloc>
 801783a:	4602      	mov	r2, r0
 801783c:	6328      	str	r0, [r5, #48]	@ 0x30
 801783e:	b920      	cbnz	r0, 801784a <srand+0x22>
 8017840:	4b0b      	ldr	r3, [pc, #44]	@ (8017870 <srand+0x48>)
 8017842:	480c      	ldr	r0, [pc, #48]	@ (8017874 <srand+0x4c>)
 8017844:	2146      	movs	r1, #70	@ 0x46
 8017846:	f000 fb8f 	bl	8017f68 <__assert_func>
 801784a:	490b      	ldr	r1, [pc, #44]	@ (8017878 <srand+0x50>)
 801784c:	4b0b      	ldr	r3, [pc, #44]	@ (801787c <srand+0x54>)
 801784e:	e9c0 1300 	strd	r1, r3, [r0]
 8017852:	4b0b      	ldr	r3, [pc, #44]	@ (8017880 <srand+0x58>)
 8017854:	6083      	str	r3, [r0, #8]
 8017856:	230b      	movs	r3, #11
 8017858:	8183      	strh	r3, [r0, #12]
 801785a:	2100      	movs	r1, #0
 801785c:	2001      	movs	r0, #1
 801785e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017862:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017864:	2200      	movs	r2, #0
 8017866:	611c      	str	r4, [r3, #16]
 8017868:	615a      	str	r2, [r3, #20]
 801786a:	bd38      	pop	{r3, r4, r5, pc}
 801786c:	200001e4 	.word	0x200001e4
 8017870:	080198e8 	.word	0x080198e8
 8017874:	080198ff 	.word	0x080198ff
 8017878:	abcd330e 	.word	0xabcd330e
 801787c:	e66d1234 	.word	0xe66d1234
 8017880:	0005deec 	.word	0x0005deec

08017884 <rand>:
 8017884:	4b16      	ldr	r3, [pc, #88]	@ (80178e0 <rand+0x5c>)
 8017886:	b510      	push	{r4, lr}
 8017888:	681c      	ldr	r4, [r3, #0]
 801788a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801788c:	b9b3      	cbnz	r3, 80178bc <rand+0x38>
 801788e:	2018      	movs	r0, #24
 8017890:	f7ff ff0c 	bl	80176ac <malloc>
 8017894:	4602      	mov	r2, r0
 8017896:	6320      	str	r0, [r4, #48]	@ 0x30
 8017898:	b920      	cbnz	r0, 80178a4 <rand+0x20>
 801789a:	4b12      	ldr	r3, [pc, #72]	@ (80178e4 <rand+0x60>)
 801789c:	4812      	ldr	r0, [pc, #72]	@ (80178e8 <rand+0x64>)
 801789e:	2152      	movs	r1, #82	@ 0x52
 80178a0:	f000 fb62 	bl	8017f68 <__assert_func>
 80178a4:	4911      	ldr	r1, [pc, #68]	@ (80178ec <rand+0x68>)
 80178a6:	4b12      	ldr	r3, [pc, #72]	@ (80178f0 <rand+0x6c>)
 80178a8:	e9c0 1300 	strd	r1, r3, [r0]
 80178ac:	4b11      	ldr	r3, [pc, #68]	@ (80178f4 <rand+0x70>)
 80178ae:	6083      	str	r3, [r0, #8]
 80178b0:	230b      	movs	r3, #11
 80178b2:	8183      	strh	r3, [r0, #12]
 80178b4:	2100      	movs	r1, #0
 80178b6:	2001      	movs	r0, #1
 80178b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80178bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80178be:	480e      	ldr	r0, [pc, #56]	@ (80178f8 <rand+0x74>)
 80178c0:	690b      	ldr	r3, [r1, #16]
 80178c2:	694c      	ldr	r4, [r1, #20]
 80178c4:	4a0d      	ldr	r2, [pc, #52]	@ (80178fc <rand+0x78>)
 80178c6:	4358      	muls	r0, r3
 80178c8:	fb02 0004 	mla	r0, r2, r4, r0
 80178cc:	fba3 3202 	umull	r3, r2, r3, r2
 80178d0:	3301      	adds	r3, #1
 80178d2:	eb40 0002 	adc.w	r0, r0, r2
 80178d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80178da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80178de:	bd10      	pop	{r4, pc}
 80178e0:	200001e4 	.word	0x200001e4
 80178e4:	080198e8 	.word	0x080198e8
 80178e8:	080198ff 	.word	0x080198ff
 80178ec:	abcd330e 	.word	0xabcd330e
 80178f0:	e66d1234 	.word	0xe66d1234
 80178f4:	0005deec 	.word	0x0005deec
 80178f8:	5851f42d 	.word	0x5851f42d
 80178fc:	4c957f2d 	.word	0x4c957f2d

08017900 <realloc>:
 8017900:	4b02      	ldr	r3, [pc, #8]	@ (801790c <realloc+0xc>)
 8017902:	460a      	mov	r2, r1
 8017904:	4601      	mov	r1, r0
 8017906:	6818      	ldr	r0, [r3, #0]
 8017908:	f000 b802 	b.w	8017910 <_realloc_r>
 801790c:	200001e4 	.word	0x200001e4

08017910 <_realloc_r>:
 8017910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017914:	4680      	mov	r8, r0
 8017916:	4615      	mov	r5, r2
 8017918:	460c      	mov	r4, r1
 801791a:	b921      	cbnz	r1, 8017926 <_realloc_r+0x16>
 801791c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017920:	4611      	mov	r1, r2
 8017922:	f7ff bef5 	b.w	8017710 <_malloc_r>
 8017926:	b92a      	cbnz	r2, 8017934 <_realloc_r+0x24>
 8017928:	f000 fb48 	bl	8017fbc <_free_r>
 801792c:	2400      	movs	r4, #0
 801792e:	4620      	mov	r0, r4
 8017930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017934:	f000 fb8c 	bl	8018050 <_malloc_usable_size_r>
 8017938:	4285      	cmp	r5, r0
 801793a:	4606      	mov	r6, r0
 801793c:	d802      	bhi.n	8017944 <_realloc_r+0x34>
 801793e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017942:	d8f4      	bhi.n	801792e <_realloc_r+0x1e>
 8017944:	4629      	mov	r1, r5
 8017946:	4640      	mov	r0, r8
 8017948:	f7ff fee2 	bl	8017710 <_malloc_r>
 801794c:	4607      	mov	r7, r0
 801794e:	2800      	cmp	r0, #0
 8017950:	d0ec      	beq.n	801792c <_realloc_r+0x1c>
 8017952:	42b5      	cmp	r5, r6
 8017954:	462a      	mov	r2, r5
 8017956:	4621      	mov	r1, r4
 8017958:	bf28      	it	cs
 801795a:	4632      	movcs	r2, r6
 801795c:	f000 faf5 	bl	8017f4a <memcpy>
 8017960:	4621      	mov	r1, r4
 8017962:	4640      	mov	r0, r8
 8017964:	f000 fb2a 	bl	8017fbc <_free_r>
 8017968:	463c      	mov	r4, r7
 801796a:	e7e0      	b.n	801792e <_realloc_r+0x1e>

0801796c <_strtoul_l.constprop.0>:
 801796c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017970:	4e34      	ldr	r6, [pc, #208]	@ (8017a44 <_strtoul_l.constprop.0+0xd8>)
 8017972:	4686      	mov	lr, r0
 8017974:	460d      	mov	r5, r1
 8017976:	4628      	mov	r0, r5
 8017978:	f815 4b01 	ldrb.w	r4, [r5], #1
 801797c:	5d37      	ldrb	r7, [r6, r4]
 801797e:	f017 0708 	ands.w	r7, r7, #8
 8017982:	d1f8      	bne.n	8017976 <_strtoul_l.constprop.0+0xa>
 8017984:	2c2d      	cmp	r4, #45	@ 0x2d
 8017986:	d12f      	bne.n	80179e8 <_strtoul_l.constprop.0+0x7c>
 8017988:	782c      	ldrb	r4, [r5, #0]
 801798a:	2701      	movs	r7, #1
 801798c:	1c85      	adds	r5, r0, #2
 801798e:	f033 0010 	bics.w	r0, r3, #16
 8017992:	d109      	bne.n	80179a8 <_strtoul_l.constprop.0+0x3c>
 8017994:	2c30      	cmp	r4, #48	@ 0x30
 8017996:	d12c      	bne.n	80179f2 <_strtoul_l.constprop.0+0x86>
 8017998:	7828      	ldrb	r0, [r5, #0]
 801799a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801799e:	2858      	cmp	r0, #88	@ 0x58
 80179a0:	d127      	bne.n	80179f2 <_strtoul_l.constprop.0+0x86>
 80179a2:	786c      	ldrb	r4, [r5, #1]
 80179a4:	2310      	movs	r3, #16
 80179a6:	3502      	adds	r5, #2
 80179a8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80179ac:	2600      	movs	r6, #0
 80179ae:	fbb8 f8f3 	udiv	r8, r8, r3
 80179b2:	fb03 f908 	mul.w	r9, r3, r8
 80179b6:	ea6f 0909 	mvn.w	r9, r9
 80179ba:	4630      	mov	r0, r6
 80179bc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80179c0:	f1bc 0f09 	cmp.w	ip, #9
 80179c4:	d81c      	bhi.n	8017a00 <_strtoul_l.constprop.0+0x94>
 80179c6:	4664      	mov	r4, ip
 80179c8:	42a3      	cmp	r3, r4
 80179ca:	dd2a      	ble.n	8017a22 <_strtoul_l.constprop.0+0xb6>
 80179cc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80179d0:	d007      	beq.n	80179e2 <_strtoul_l.constprop.0+0x76>
 80179d2:	4580      	cmp	r8, r0
 80179d4:	d322      	bcc.n	8017a1c <_strtoul_l.constprop.0+0xb0>
 80179d6:	d101      	bne.n	80179dc <_strtoul_l.constprop.0+0x70>
 80179d8:	45a1      	cmp	r9, r4
 80179da:	db1f      	blt.n	8017a1c <_strtoul_l.constprop.0+0xb0>
 80179dc:	fb00 4003 	mla	r0, r0, r3, r4
 80179e0:	2601      	movs	r6, #1
 80179e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179e6:	e7e9      	b.n	80179bc <_strtoul_l.constprop.0+0x50>
 80179e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80179ea:	bf04      	itt	eq
 80179ec:	782c      	ldrbeq	r4, [r5, #0]
 80179ee:	1c85      	addeq	r5, r0, #2
 80179f0:	e7cd      	b.n	801798e <_strtoul_l.constprop.0+0x22>
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d1d8      	bne.n	80179a8 <_strtoul_l.constprop.0+0x3c>
 80179f6:	2c30      	cmp	r4, #48	@ 0x30
 80179f8:	bf0c      	ite	eq
 80179fa:	2308      	moveq	r3, #8
 80179fc:	230a      	movne	r3, #10
 80179fe:	e7d3      	b.n	80179a8 <_strtoul_l.constprop.0+0x3c>
 8017a00:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017a04:	f1bc 0f19 	cmp.w	ip, #25
 8017a08:	d801      	bhi.n	8017a0e <_strtoul_l.constprop.0+0xa2>
 8017a0a:	3c37      	subs	r4, #55	@ 0x37
 8017a0c:	e7dc      	b.n	80179c8 <_strtoul_l.constprop.0+0x5c>
 8017a0e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017a12:	f1bc 0f19 	cmp.w	ip, #25
 8017a16:	d804      	bhi.n	8017a22 <_strtoul_l.constprop.0+0xb6>
 8017a18:	3c57      	subs	r4, #87	@ 0x57
 8017a1a:	e7d5      	b.n	80179c8 <_strtoul_l.constprop.0+0x5c>
 8017a1c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017a20:	e7df      	b.n	80179e2 <_strtoul_l.constprop.0+0x76>
 8017a22:	1c73      	adds	r3, r6, #1
 8017a24:	d106      	bne.n	8017a34 <_strtoul_l.constprop.0+0xc8>
 8017a26:	2322      	movs	r3, #34	@ 0x22
 8017a28:	f8ce 3000 	str.w	r3, [lr]
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	b932      	cbnz	r2, 8017a3e <_strtoul_l.constprop.0+0xd2>
 8017a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a34:	b107      	cbz	r7, 8017a38 <_strtoul_l.constprop.0+0xcc>
 8017a36:	4240      	negs	r0, r0
 8017a38:	2a00      	cmp	r2, #0
 8017a3a:	d0f9      	beq.n	8017a30 <_strtoul_l.constprop.0+0xc4>
 8017a3c:	b106      	cbz	r6, 8017a40 <_strtoul_l.constprop.0+0xd4>
 8017a3e:	1e69      	subs	r1, r5, #1
 8017a40:	6011      	str	r1, [r2, #0]
 8017a42:	e7f5      	b.n	8017a30 <_strtoul_l.constprop.0+0xc4>
 8017a44:	08019958 	.word	0x08019958

08017a48 <strtoul>:
 8017a48:	4613      	mov	r3, r2
 8017a4a:	460a      	mov	r2, r1
 8017a4c:	4601      	mov	r1, r0
 8017a4e:	4802      	ldr	r0, [pc, #8]	@ (8017a58 <strtoul+0x10>)
 8017a50:	6800      	ldr	r0, [r0, #0]
 8017a52:	f7ff bf8b 	b.w	801796c <_strtoul_l.constprop.0>
 8017a56:	bf00      	nop
 8017a58:	200001e4 	.word	0x200001e4

08017a5c <std>:
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	b510      	push	{r4, lr}
 8017a60:	4604      	mov	r4, r0
 8017a62:	e9c0 3300 	strd	r3, r3, [r0]
 8017a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a6a:	6083      	str	r3, [r0, #8]
 8017a6c:	8181      	strh	r1, [r0, #12]
 8017a6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017a70:	81c2      	strh	r2, [r0, #14]
 8017a72:	6183      	str	r3, [r0, #24]
 8017a74:	4619      	mov	r1, r3
 8017a76:	2208      	movs	r2, #8
 8017a78:	305c      	adds	r0, #92	@ 0x5c
 8017a7a:	f000 f99d 	bl	8017db8 <memset>
 8017a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8017ab4 <std+0x58>)
 8017a80:	6263      	str	r3, [r4, #36]	@ 0x24
 8017a82:	4b0d      	ldr	r3, [pc, #52]	@ (8017ab8 <std+0x5c>)
 8017a84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017a86:	4b0d      	ldr	r3, [pc, #52]	@ (8017abc <std+0x60>)
 8017a88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8017ac0 <std+0x64>)
 8017a8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8017a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8017ac4 <std+0x68>)
 8017a90:	6224      	str	r4, [r4, #32]
 8017a92:	429c      	cmp	r4, r3
 8017a94:	d006      	beq.n	8017aa4 <std+0x48>
 8017a96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017a9a:	4294      	cmp	r4, r2
 8017a9c:	d002      	beq.n	8017aa4 <std+0x48>
 8017a9e:	33d0      	adds	r3, #208	@ 0xd0
 8017aa0:	429c      	cmp	r4, r3
 8017aa2:	d105      	bne.n	8017ab0 <std+0x54>
 8017aa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017aac:	f000 ba42 	b.w	8017f34 <__retarget_lock_init_recursive>
 8017ab0:	bd10      	pop	{r4, pc}
 8017ab2:	bf00      	nop
 8017ab4:	08017c6d 	.word	0x08017c6d
 8017ab8:	08017c8f 	.word	0x08017c8f
 8017abc:	08017cc7 	.word	0x08017cc7
 8017ac0:	08017ceb 	.word	0x08017ceb
 8017ac4:	2000af54 	.word	0x2000af54

08017ac8 <stdio_exit_handler>:
 8017ac8:	4a02      	ldr	r2, [pc, #8]	@ (8017ad4 <stdio_exit_handler+0xc>)
 8017aca:	4903      	ldr	r1, [pc, #12]	@ (8017ad8 <stdio_exit_handler+0x10>)
 8017acc:	4803      	ldr	r0, [pc, #12]	@ (8017adc <stdio_exit_handler+0x14>)
 8017ace:	f000 b869 	b.w	8017ba4 <_fwalk_sglue>
 8017ad2:	bf00      	nop
 8017ad4:	200001d8 	.word	0x200001d8
 8017ad8:	080189b9 	.word	0x080189b9
 8017adc:	200001e8 	.word	0x200001e8

08017ae0 <cleanup_stdio>:
 8017ae0:	6841      	ldr	r1, [r0, #4]
 8017ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8017b14 <cleanup_stdio+0x34>)
 8017ae4:	4299      	cmp	r1, r3
 8017ae6:	b510      	push	{r4, lr}
 8017ae8:	4604      	mov	r4, r0
 8017aea:	d001      	beq.n	8017af0 <cleanup_stdio+0x10>
 8017aec:	f000 ff64 	bl	80189b8 <_fflush_r>
 8017af0:	68a1      	ldr	r1, [r4, #8]
 8017af2:	4b09      	ldr	r3, [pc, #36]	@ (8017b18 <cleanup_stdio+0x38>)
 8017af4:	4299      	cmp	r1, r3
 8017af6:	d002      	beq.n	8017afe <cleanup_stdio+0x1e>
 8017af8:	4620      	mov	r0, r4
 8017afa:	f000 ff5d 	bl	80189b8 <_fflush_r>
 8017afe:	68e1      	ldr	r1, [r4, #12]
 8017b00:	4b06      	ldr	r3, [pc, #24]	@ (8017b1c <cleanup_stdio+0x3c>)
 8017b02:	4299      	cmp	r1, r3
 8017b04:	d004      	beq.n	8017b10 <cleanup_stdio+0x30>
 8017b06:	4620      	mov	r0, r4
 8017b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b0c:	f000 bf54 	b.w	80189b8 <_fflush_r>
 8017b10:	bd10      	pop	{r4, pc}
 8017b12:	bf00      	nop
 8017b14:	2000af54 	.word	0x2000af54
 8017b18:	2000afbc 	.word	0x2000afbc
 8017b1c:	2000b024 	.word	0x2000b024

08017b20 <global_stdio_init.part.0>:
 8017b20:	b510      	push	{r4, lr}
 8017b22:	4b0b      	ldr	r3, [pc, #44]	@ (8017b50 <global_stdio_init.part.0+0x30>)
 8017b24:	4c0b      	ldr	r4, [pc, #44]	@ (8017b54 <global_stdio_init.part.0+0x34>)
 8017b26:	4a0c      	ldr	r2, [pc, #48]	@ (8017b58 <global_stdio_init.part.0+0x38>)
 8017b28:	601a      	str	r2, [r3, #0]
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	2104      	movs	r1, #4
 8017b30:	f7ff ff94 	bl	8017a5c <std>
 8017b34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017b38:	2201      	movs	r2, #1
 8017b3a:	2109      	movs	r1, #9
 8017b3c:	f7ff ff8e 	bl	8017a5c <std>
 8017b40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017b44:	2202      	movs	r2, #2
 8017b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b4a:	2112      	movs	r1, #18
 8017b4c:	f7ff bf86 	b.w	8017a5c <std>
 8017b50:	2000b08c 	.word	0x2000b08c
 8017b54:	2000af54 	.word	0x2000af54
 8017b58:	08017ac9 	.word	0x08017ac9

08017b5c <__sfp_lock_acquire>:
 8017b5c:	4801      	ldr	r0, [pc, #4]	@ (8017b64 <__sfp_lock_acquire+0x8>)
 8017b5e:	f000 b9ea 	b.w	8017f36 <__retarget_lock_acquire_recursive>
 8017b62:	bf00      	nop
 8017b64:	2000b096 	.word	0x2000b096

08017b68 <__sfp_lock_release>:
 8017b68:	4801      	ldr	r0, [pc, #4]	@ (8017b70 <__sfp_lock_release+0x8>)
 8017b6a:	f000 b9e5 	b.w	8017f38 <__retarget_lock_release_recursive>
 8017b6e:	bf00      	nop
 8017b70:	2000b096 	.word	0x2000b096

08017b74 <__sinit>:
 8017b74:	b510      	push	{r4, lr}
 8017b76:	4604      	mov	r4, r0
 8017b78:	f7ff fff0 	bl	8017b5c <__sfp_lock_acquire>
 8017b7c:	6a23      	ldr	r3, [r4, #32]
 8017b7e:	b11b      	cbz	r3, 8017b88 <__sinit+0x14>
 8017b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b84:	f7ff bff0 	b.w	8017b68 <__sfp_lock_release>
 8017b88:	4b04      	ldr	r3, [pc, #16]	@ (8017b9c <__sinit+0x28>)
 8017b8a:	6223      	str	r3, [r4, #32]
 8017b8c:	4b04      	ldr	r3, [pc, #16]	@ (8017ba0 <__sinit+0x2c>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d1f5      	bne.n	8017b80 <__sinit+0xc>
 8017b94:	f7ff ffc4 	bl	8017b20 <global_stdio_init.part.0>
 8017b98:	e7f2      	b.n	8017b80 <__sinit+0xc>
 8017b9a:	bf00      	nop
 8017b9c:	08017ae1 	.word	0x08017ae1
 8017ba0:	2000b08c 	.word	0x2000b08c

08017ba4 <_fwalk_sglue>:
 8017ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ba8:	4607      	mov	r7, r0
 8017baa:	4688      	mov	r8, r1
 8017bac:	4614      	mov	r4, r2
 8017bae:	2600      	movs	r6, #0
 8017bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8017bb8:	d505      	bpl.n	8017bc6 <_fwalk_sglue+0x22>
 8017bba:	6824      	ldr	r4, [r4, #0]
 8017bbc:	2c00      	cmp	r4, #0
 8017bbe:	d1f7      	bne.n	8017bb0 <_fwalk_sglue+0xc>
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bc6:	89ab      	ldrh	r3, [r5, #12]
 8017bc8:	2b01      	cmp	r3, #1
 8017bca:	d907      	bls.n	8017bdc <_fwalk_sglue+0x38>
 8017bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	d003      	beq.n	8017bdc <_fwalk_sglue+0x38>
 8017bd4:	4629      	mov	r1, r5
 8017bd6:	4638      	mov	r0, r7
 8017bd8:	47c0      	blx	r8
 8017bda:	4306      	orrs	r6, r0
 8017bdc:	3568      	adds	r5, #104	@ 0x68
 8017bde:	e7e9      	b.n	8017bb4 <_fwalk_sglue+0x10>

08017be0 <iprintf>:
 8017be0:	b40f      	push	{r0, r1, r2, r3}
 8017be2:	b507      	push	{r0, r1, r2, lr}
 8017be4:	4906      	ldr	r1, [pc, #24]	@ (8017c00 <iprintf+0x20>)
 8017be6:	ab04      	add	r3, sp, #16
 8017be8:	6808      	ldr	r0, [r1, #0]
 8017bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bee:	6881      	ldr	r1, [r0, #8]
 8017bf0:	9301      	str	r3, [sp, #4]
 8017bf2:	f000 fbb7 	bl	8018364 <_vfiprintf_r>
 8017bf6:	b003      	add	sp, #12
 8017bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bfc:	b004      	add	sp, #16
 8017bfe:	4770      	bx	lr
 8017c00:	200001e4 	.word	0x200001e4

08017c04 <sniprintf>:
 8017c04:	b40c      	push	{r2, r3}
 8017c06:	b530      	push	{r4, r5, lr}
 8017c08:	4b17      	ldr	r3, [pc, #92]	@ (8017c68 <sniprintf+0x64>)
 8017c0a:	1e0c      	subs	r4, r1, #0
 8017c0c:	681d      	ldr	r5, [r3, #0]
 8017c0e:	b09d      	sub	sp, #116	@ 0x74
 8017c10:	da08      	bge.n	8017c24 <sniprintf+0x20>
 8017c12:	238b      	movs	r3, #139	@ 0x8b
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c1a:	b01d      	add	sp, #116	@ 0x74
 8017c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c20:	b002      	add	sp, #8
 8017c22:	4770      	bx	lr
 8017c24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017c28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017c2c:	bf14      	ite	ne
 8017c2e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017c32:	4623      	moveq	r3, r4
 8017c34:	9304      	str	r3, [sp, #16]
 8017c36:	9307      	str	r3, [sp, #28]
 8017c38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017c3c:	9002      	str	r0, [sp, #8]
 8017c3e:	9006      	str	r0, [sp, #24]
 8017c40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017c44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017c46:	ab21      	add	r3, sp, #132	@ 0x84
 8017c48:	a902      	add	r1, sp, #8
 8017c4a:	4628      	mov	r0, r5
 8017c4c:	9301      	str	r3, [sp, #4]
 8017c4e:	f000 fa63 	bl	8018118 <_svfiprintf_r>
 8017c52:	1c43      	adds	r3, r0, #1
 8017c54:	bfbc      	itt	lt
 8017c56:	238b      	movlt	r3, #139	@ 0x8b
 8017c58:	602b      	strlt	r3, [r5, #0]
 8017c5a:	2c00      	cmp	r4, #0
 8017c5c:	d0dd      	beq.n	8017c1a <sniprintf+0x16>
 8017c5e:	9b02      	ldr	r3, [sp, #8]
 8017c60:	2200      	movs	r2, #0
 8017c62:	701a      	strb	r2, [r3, #0]
 8017c64:	e7d9      	b.n	8017c1a <sniprintf+0x16>
 8017c66:	bf00      	nop
 8017c68:	200001e4 	.word	0x200001e4

08017c6c <__sread>:
 8017c6c:	b510      	push	{r4, lr}
 8017c6e:	460c      	mov	r4, r1
 8017c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c74:	f000 f900 	bl	8017e78 <_read_r>
 8017c78:	2800      	cmp	r0, #0
 8017c7a:	bfab      	itete	ge
 8017c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8017c80:	181b      	addge	r3, r3, r0
 8017c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017c86:	bfac      	ite	ge
 8017c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017c8a:	81a3      	strhlt	r3, [r4, #12]
 8017c8c:	bd10      	pop	{r4, pc}

08017c8e <__swrite>:
 8017c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c92:	461f      	mov	r7, r3
 8017c94:	898b      	ldrh	r3, [r1, #12]
 8017c96:	05db      	lsls	r3, r3, #23
 8017c98:	4605      	mov	r5, r0
 8017c9a:	460c      	mov	r4, r1
 8017c9c:	4616      	mov	r6, r2
 8017c9e:	d505      	bpl.n	8017cac <__swrite+0x1e>
 8017ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ca4:	2302      	movs	r3, #2
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	f000 f8d4 	bl	8017e54 <_lseek_r>
 8017cac:	89a3      	ldrh	r3, [r4, #12]
 8017cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017cb6:	81a3      	strh	r3, [r4, #12]
 8017cb8:	4632      	mov	r2, r6
 8017cba:	463b      	mov	r3, r7
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc2:	f000 b8fb 	b.w	8017ebc <_write_r>

08017cc6 <__sseek>:
 8017cc6:	b510      	push	{r4, lr}
 8017cc8:	460c      	mov	r4, r1
 8017cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cce:	f000 f8c1 	bl	8017e54 <_lseek_r>
 8017cd2:	1c43      	adds	r3, r0, #1
 8017cd4:	89a3      	ldrh	r3, [r4, #12]
 8017cd6:	bf15      	itete	ne
 8017cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017ce2:	81a3      	strheq	r3, [r4, #12]
 8017ce4:	bf18      	it	ne
 8017ce6:	81a3      	strhne	r3, [r4, #12]
 8017ce8:	bd10      	pop	{r4, pc}

08017cea <__sclose>:
 8017cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cee:	f000 b8a1 	b.w	8017e34 <_close_r>

08017cf2 <_vsniprintf_r>:
 8017cf2:	b530      	push	{r4, r5, lr}
 8017cf4:	4614      	mov	r4, r2
 8017cf6:	2c00      	cmp	r4, #0
 8017cf8:	b09b      	sub	sp, #108	@ 0x6c
 8017cfa:	4605      	mov	r5, r0
 8017cfc:	461a      	mov	r2, r3
 8017cfe:	da05      	bge.n	8017d0c <_vsniprintf_r+0x1a>
 8017d00:	238b      	movs	r3, #139	@ 0x8b
 8017d02:	6003      	str	r3, [r0, #0]
 8017d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d08:	b01b      	add	sp, #108	@ 0x6c
 8017d0a:	bd30      	pop	{r4, r5, pc}
 8017d0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017d10:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017d14:	bf14      	ite	ne
 8017d16:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017d1a:	4623      	moveq	r3, r4
 8017d1c:	9302      	str	r3, [sp, #8]
 8017d1e:	9305      	str	r3, [sp, #20]
 8017d20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d24:	9100      	str	r1, [sp, #0]
 8017d26:	9104      	str	r1, [sp, #16]
 8017d28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017d2c:	4669      	mov	r1, sp
 8017d2e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017d30:	f000 f9f2 	bl	8018118 <_svfiprintf_r>
 8017d34:	1c43      	adds	r3, r0, #1
 8017d36:	bfbc      	itt	lt
 8017d38:	238b      	movlt	r3, #139	@ 0x8b
 8017d3a:	602b      	strlt	r3, [r5, #0]
 8017d3c:	2c00      	cmp	r4, #0
 8017d3e:	d0e3      	beq.n	8017d08 <_vsniprintf_r+0x16>
 8017d40:	9b00      	ldr	r3, [sp, #0]
 8017d42:	2200      	movs	r2, #0
 8017d44:	701a      	strb	r2, [r3, #0]
 8017d46:	e7df      	b.n	8017d08 <_vsniprintf_r+0x16>

08017d48 <vsniprintf>:
 8017d48:	b507      	push	{r0, r1, r2, lr}
 8017d4a:	9300      	str	r3, [sp, #0]
 8017d4c:	4613      	mov	r3, r2
 8017d4e:	460a      	mov	r2, r1
 8017d50:	4601      	mov	r1, r0
 8017d52:	4803      	ldr	r0, [pc, #12]	@ (8017d60 <vsniprintf+0x18>)
 8017d54:	6800      	ldr	r0, [r0, #0]
 8017d56:	f7ff ffcc 	bl	8017cf2 <_vsniprintf_r>
 8017d5a:	b003      	add	sp, #12
 8017d5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d60:	200001e4 	.word	0x200001e4

08017d64 <memcmp>:
 8017d64:	b510      	push	{r4, lr}
 8017d66:	3901      	subs	r1, #1
 8017d68:	4402      	add	r2, r0
 8017d6a:	4290      	cmp	r0, r2
 8017d6c:	d101      	bne.n	8017d72 <memcmp+0xe>
 8017d6e:	2000      	movs	r0, #0
 8017d70:	e005      	b.n	8017d7e <memcmp+0x1a>
 8017d72:	7803      	ldrb	r3, [r0, #0]
 8017d74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d78:	42a3      	cmp	r3, r4
 8017d7a:	d001      	beq.n	8017d80 <memcmp+0x1c>
 8017d7c:	1b18      	subs	r0, r3, r4
 8017d7e:	bd10      	pop	{r4, pc}
 8017d80:	3001      	adds	r0, #1
 8017d82:	e7f2      	b.n	8017d6a <memcmp+0x6>

08017d84 <memmove>:
 8017d84:	4288      	cmp	r0, r1
 8017d86:	b510      	push	{r4, lr}
 8017d88:	eb01 0402 	add.w	r4, r1, r2
 8017d8c:	d902      	bls.n	8017d94 <memmove+0x10>
 8017d8e:	4284      	cmp	r4, r0
 8017d90:	4623      	mov	r3, r4
 8017d92:	d807      	bhi.n	8017da4 <memmove+0x20>
 8017d94:	1e43      	subs	r3, r0, #1
 8017d96:	42a1      	cmp	r1, r4
 8017d98:	d008      	beq.n	8017dac <memmove+0x28>
 8017d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017da2:	e7f8      	b.n	8017d96 <memmove+0x12>
 8017da4:	4402      	add	r2, r0
 8017da6:	4601      	mov	r1, r0
 8017da8:	428a      	cmp	r2, r1
 8017daa:	d100      	bne.n	8017dae <memmove+0x2a>
 8017dac:	bd10      	pop	{r4, pc}
 8017dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017db6:	e7f7      	b.n	8017da8 <memmove+0x24>

08017db8 <memset>:
 8017db8:	4402      	add	r2, r0
 8017dba:	4603      	mov	r3, r0
 8017dbc:	4293      	cmp	r3, r2
 8017dbe:	d100      	bne.n	8017dc2 <memset+0xa>
 8017dc0:	4770      	bx	lr
 8017dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8017dc6:	e7f9      	b.n	8017dbc <memset+0x4>

08017dc8 <strchr>:
 8017dc8:	b2c9      	uxtb	r1, r1
 8017dca:	4603      	mov	r3, r0
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dd2:	b112      	cbz	r2, 8017dda <strchr+0x12>
 8017dd4:	428a      	cmp	r2, r1
 8017dd6:	d1f9      	bne.n	8017dcc <strchr+0x4>
 8017dd8:	4770      	bx	lr
 8017dda:	2900      	cmp	r1, #0
 8017ddc:	bf18      	it	ne
 8017dde:	2000      	movne	r0, #0
 8017de0:	4770      	bx	lr

08017de2 <strncmp>:
 8017de2:	b510      	push	{r4, lr}
 8017de4:	b16a      	cbz	r2, 8017e02 <strncmp+0x20>
 8017de6:	3901      	subs	r1, #1
 8017de8:	1884      	adds	r4, r0, r2
 8017dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017df2:	429a      	cmp	r2, r3
 8017df4:	d103      	bne.n	8017dfe <strncmp+0x1c>
 8017df6:	42a0      	cmp	r0, r4
 8017df8:	d001      	beq.n	8017dfe <strncmp+0x1c>
 8017dfa:	2a00      	cmp	r2, #0
 8017dfc:	d1f5      	bne.n	8017dea <strncmp+0x8>
 8017dfe:	1ad0      	subs	r0, r2, r3
 8017e00:	bd10      	pop	{r4, pc}
 8017e02:	4610      	mov	r0, r2
 8017e04:	e7fc      	b.n	8017e00 <strncmp+0x1e>

08017e06 <strstr>:
 8017e06:	780a      	ldrb	r2, [r1, #0]
 8017e08:	b570      	push	{r4, r5, r6, lr}
 8017e0a:	b96a      	cbnz	r2, 8017e28 <strstr+0x22>
 8017e0c:	bd70      	pop	{r4, r5, r6, pc}
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d109      	bne.n	8017e26 <strstr+0x20>
 8017e12:	460c      	mov	r4, r1
 8017e14:	4605      	mov	r5, r0
 8017e16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d0f6      	beq.n	8017e0c <strstr+0x6>
 8017e1e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017e22:	429e      	cmp	r6, r3
 8017e24:	d0f7      	beq.n	8017e16 <strstr+0x10>
 8017e26:	3001      	adds	r0, #1
 8017e28:	7803      	ldrb	r3, [r0, #0]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d1ef      	bne.n	8017e0e <strstr+0x8>
 8017e2e:	4618      	mov	r0, r3
 8017e30:	e7ec      	b.n	8017e0c <strstr+0x6>
	...

08017e34 <_close_r>:
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	4d06      	ldr	r5, [pc, #24]	@ (8017e50 <_close_r+0x1c>)
 8017e38:	2300      	movs	r3, #0
 8017e3a:	4604      	mov	r4, r0
 8017e3c:	4608      	mov	r0, r1
 8017e3e:	602b      	str	r3, [r5, #0]
 8017e40:	f7ea f868 	bl	8001f14 <_close>
 8017e44:	1c43      	adds	r3, r0, #1
 8017e46:	d102      	bne.n	8017e4e <_close_r+0x1a>
 8017e48:	682b      	ldr	r3, [r5, #0]
 8017e4a:	b103      	cbz	r3, 8017e4e <_close_r+0x1a>
 8017e4c:	6023      	str	r3, [r4, #0]
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	2000b090 	.word	0x2000b090

08017e54 <_lseek_r>:
 8017e54:	b538      	push	{r3, r4, r5, lr}
 8017e56:	4d07      	ldr	r5, [pc, #28]	@ (8017e74 <_lseek_r+0x20>)
 8017e58:	4604      	mov	r4, r0
 8017e5a:	4608      	mov	r0, r1
 8017e5c:	4611      	mov	r1, r2
 8017e5e:	2200      	movs	r2, #0
 8017e60:	602a      	str	r2, [r5, #0]
 8017e62:	461a      	mov	r2, r3
 8017e64:	f7ea f87d 	bl	8001f62 <_lseek>
 8017e68:	1c43      	adds	r3, r0, #1
 8017e6a:	d102      	bne.n	8017e72 <_lseek_r+0x1e>
 8017e6c:	682b      	ldr	r3, [r5, #0]
 8017e6e:	b103      	cbz	r3, 8017e72 <_lseek_r+0x1e>
 8017e70:	6023      	str	r3, [r4, #0]
 8017e72:	bd38      	pop	{r3, r4, r5, pc}
 8017e74:	2000b090 	.word	0x2000b090

08017e78 <_read_r>:
 8017e78:	b538      	push	{r3, r4, r5, lr}
 8017e7a:	4d07      	ldr	r5, [pc, #28]	@ (8017e98 <_read_r+0x20>)
 8017e7c:	4604      	mov	r4, r0
 8017e7e:	4608      	mov	r0, r1
 8017e80:	4611      	mov	r1, r2
 8017e82:	2200      	movs	r2, #0
 8017e84:	602a      	str	r2, [r5, #0]
 8017e86:	461a      	mov	r2, r3
 8017e88:	f7ea f80b 	bl	8001ea2 <_read>
 8017e8c:	1c43      	adds	r3, r0, #1
 8017e8e:	d102      	bne.n	8017e96 <_read_r+0x1e>
 8017e90:	682b      	ldr	r3, [r5, #0]
 8017e92:	b103      	cbz	r3, 8017e96 <_read_r+0x1e>
 8017e94:	6023      	str	r3, [r4, #0]
 8017e96:	bd38      	pop	{r3, r4, r5, pc}
 8017e98:	2000b090 	.word	0x2000b090

08017e9c <_sbrk_r>:
 8017e9c:	b538      	push	{r3, r4, r5, lr}
 8017e9e:	4d06      	ldr	r5, [pc, #24]	@ (8017eb8 <_sbrk_r+0x1c>)
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	4608      	mov	r0, r1
 8017ea6:	602b      	str	r3, [r5, #0]
 8017ea8:	f7ea f868 	bl	8001f7c <_sbrk>
 8017eac:	1c43      	adds	r3, r0, #1
 8017eae:	d102      	bne.n	8017eb6 <_sbrk_r+0x1a>
 8017eb0:	682b      	ldr	r3, [r5, #0]
 8017eb2:	b103      	cbz	r3, 8017eb6 <_sbrk_r+0x1a>
 8017eb4:	6023      	str	r3, [r4, #0]
 8017eb6:	bd38      	pop	{r3, r4, r5, pc}
 8017eb8:	2000b090 	.word	0x2000b090

08017ebc <_write_r>:
 8017ebc:	b538      	push	{r3, r4, r5, lr}
 8017ebe:	4d07      	ldr	r5, [pc, #28]	@ (8017edc <_write_r+0x20>)
 8017ec0:	4604      	mov	r4, r0
 8017ec2:	4608      	mov	r0, r1
 8017ec4:	4611      	mov	r1, r2
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	602a      	str	r2, [r5, #0]
 8017eca:	461a      	mov	r2, r3
 8017ecc:	f7ea f806 	bl	8001edc <_write>
 8017ed0:	1c43      	adds	r3, r0, #1
 8017ed2:	d102      	bne.n	8017eda <_write_r+0x1e>
 8017ed4:	682b      	ldr	r3, [r5, #0]
 8017ed6:	b103      	cbz	r3, 8017eda <_write_r+0x1e>
 8017ed8:	6023      	str	r3, [r4, #0]
 8017eda:	bd38      	pop	{r3, r4, r5, pc}
 8017edc:	2000b090 	.word	0x2000b090

08017ee0 <__errno>:
 8017ee0:	4b01      	ldr	r3, [pc, #4]	@ (8017ee8 <__errno+0x8>)
 8017ee2:	6818      	ldr	r0, [r3, #0]
 8017ee4:	4770      	bx	lr
 8017ee6:	bf00      	nop
 8017ee8:	200001e4 	.word	0x200001e4

08017eec <__libc_init_array>:
 8017eec:	b570      	push	{r4, r5, r6, lr}
 8017eee:	4d0d      	ldr	r5, [pc, #52]	@ (8017f24 <__libc_init_array+0x38>)
 8017ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8017f28 <__libc_init_array+0x3c>)
 8017ef2:	1b64      	subs	r4, r4, r5
 8017ef4:	10a4      	asrs	r4, r4, #2
 8017ef6:	2600      	movs	r6, #0
 8017ef8:	42a6      	cmp	r6, r4
 8017efa:	d109      	bne.n	8017f10 <__libc_init_array+0x24>
 8017efc:	4d0b      	ldr	r5, [pc, #44]	@ (8017f2c <__libc_init_array+0x40>)
 8017efe:	4c0c      	ldr	r4, [pc, #48]	@ (8017f30 <__libc_init_array+0x44>)
 8017f00:	f000 fef8 	bl	8018cf4 <_init>
 8017f04:	1b64      	subs	r4, r4, r5
 8017f06:	10a4      	asrs	r4, r4, #2
 8017f08:	2600      	movs	r6, #0
 8017f0a:	42a6      	cmp	r6, r4
 8017f0c:	d105      	bne.n	8017f1a <__libc_init_array+0x2e>
 8017f0e:	bd70      	pop	{r4, r5, r6, pc}
 8017f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f14:	4798      	blx	r3
 8017f16:	3601      	adds	r6, #1
 8017f18:	e7ee      	b.n	8017ef8 <__libc_init_array+0xc>
 8017f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f1e:	4798      	blx	r3
 8017f20:	3601      	adds	r6, #1
 8017f22:	e7f2      	b.n	8017f0a <__libc_init_array+0x1e>
 8017f24:	08019ad0 	.word	0x08019ad0
 8017f28:	08019ad0 	.word	0x08019ad0
 8017f2c:	08019ad0 	.word	0x08019ad0
 8017f30:	08019ad8 	.word	0x08019ad8

08017f34 <__retarget_lock_init_recursive>:
 8017f34:	4770      	bx	lr

08017f36 <__retarget_lock_acquire_recursive>:
 8017f36:	4770      	bx	lr

08017f38 <__retarget_lock_release_recursive>:
 8017f38:	4770      	bx	lr

08017f3a <strcpy>:
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f40:	f803 2b01 	strb.w	r2, [r3], #1
 8017f44:	2a00      	cmp	r2, #0
 8017f46:	d1f9      	bne.n	8017f3c <strcpy+0x2>
 8017f48:	4770      	bx	lr

08017f4a <memcpy>:
 8017f4a:	440a      	add	r2, r1
 8017f4c:	4291      	cmp	r1, r2
 8017f4e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017f52:	d100      	bne.n	8017f56 <memcpy+0xc>
 8017f54:	4770      	bx	lr
 8017f56:	b510      	push	{r4, lr}
 8017f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f60:	4291      	cmp	r1, r2
 8017f62:	d1f9      	bne.n	8017f58 <memcpy+0xe>
 8017f64:	bd10      	pop	{r4, pc}
	...

08017f68 <__assert_func>:
 8017f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f6a:	4614      	mov	r4, r2
 8017f6c:	461a      	mov	r2, r3
 8017f6e:	4b09      	ldr	r3, [pc, #36]	@ (8017f94 <__assert_func+0x2c>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	4605      	mov	r5, r0
 8017f74:	68d8      	ldr	r0, [r3, #12]
 8017f76:	b954      	cbnz	r4, 8017f8e <__assert_func+0x26>
 8017f78:	4b07      	ldr	r3, [pc, #28]	@ (8017f98 <__assert_func+0x30>)
 8017f7a:	461c      	mov	r4, r3
 8017f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f80:	9100      	str	r1, [sp, #0]
 8017f82:	462b      	mov	r3, r5
 8017f84:	4905      	ldr	r1, [pc, #20]	@ (8017f9c <__assert_func+0x34>)
 8017f86:	f000 fd3f 	bl	8018a08 <fiprintf>
 8017f8a:	f000 fde3 	bl	8018b54 <abort>
 8017f8e:	4b04      	ldr	r3, [pc, #16]	@ (8017fa0 <__assert_func+0x38>)
 8017f90:	e7f4      	b.n	8017f7c <__assert_func+0x14>
 8017f92:	bf00      	nop
 8017f94:	200001e4 	.word	0x200001e4
 8017f98:	08019a93 	.word	0x08019a93
 8017f9c:	08019a65 	.word	0x08019a65
 8017fa0:	08019a58 	.word	0x08019a58

08017fa4 <__env_lock>:
 8017fa4:	4801      	ldr	r0, [pc, #4]	@ (8017fac <__env_lock+0x8>)
 8017fa6:	f7ff bfc6 	b.w	8017f36 <__retarget_lock_acquire_recursive>
 8017faa:	bf00      	nop
 8017fac:	2000b094 	.word	0x2000b094

08017fb0 <__env_unlock>:
 8017fb0:	4801      	ldr	r0, [pc, #4]	@ (8017fb8 <__env_unlock+0x8>)
 8017fb2:	f7ff bfc1 	b.w	8017f38 <__retarget_lock_release_recursive>
 8017fb6:	bf00      	nop
 8017fb8:	2000b094 	.word	0x2000b094

08017fbc <_free_r>:
 8017fbc:	b538      	push	{r3, r4, r5, lr}
 8017fbe:	4605      	mov	r5, r0
 8017fc0:	2900      	cmp	r1, #0
 8017fc2:	d041      	beq.n	8018048 <_free_r+0x8c>
 8017fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fc8:	1f0c      	subs	r4, r1, #4
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	bfb8      	it	lt
 8017fce:	18e4      	addlt	r4, r4, r3
 8017fd0:	f7ff fc1e 	bl	8017810 <__malloc_lock>
 8017fd4:	4a1d      	ldr	r2, [pc, #116]	@ (801804c <_free_r+0x90>)
 8017fd6:	6813      	ldr	r3, [r2, #0]
 8017fd8:	b933      	cbnz	r3, 8017fe8 <_free_r+0x2c>
 8017fda:	6063      	str	r3, [r4, #4]
 8017fdc:	6014      	str	r4, [r2, #0]
 8017fde:	4628      	mov	r0, r5
 8017fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fe4:	f7ff bc1a 	b.w	801781c <__malloc_unlock>
 8017fe8:	42a3      	cmp	r3, r4
 8017fea:	d908      	bls.n	8017ffe <_free_r+0x42>
 8017fec:	6820      	ldr	r0, [r4, #0]
 8017fee:	1821      	adds	r1, r4, r0
 8017ff0:	428b      	cmp	r3, r1
 8017ff2:	bf01      	itttt	eq
 8017ff4:	6819      	ldreq	r1, [r3, #0]
 8017ff6:	685b      	ldreq	r3, [r3, #4]
 8017ff8:	1809      	addeq	r1, r1, r0
 8017ffa:	6021      	streq	r1, [r4, #0]
 8017ffc:	e7ed      	b.n	8017fda <_free_r+0x1e>
 8017ffe:	461a      	mov	r2, r3
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	b10b      	cbz	r3, 8018008 <_free_r+0x4c>
 8018004:	42a3      	cmp	r3, r4
 8018006:	d9fa      	bls.n	8017ffe <_free_r+0x42>
 8018008:	6811      	ldr	r1, [r2, #0]
 801800a:	1850      	adds	r0, r2, r1
 801800c:	42a0      	cmp	r0, r4
 801800e:	d10b      	bne.n	8018028 <_free_r+0x6c>
 8018010:	6820      	ldr	r0, [r4, #0]
 8018012:	4401      	add	r1, r0
 8018014:	1850      	adds	r0, r2, r1
 8018016:	4283      	cmp	r3, r0
 8018018:	6011      	str	r1, [r2, #0]
 801801a:	d1e0      	bne.n	8017fde <_free_r+0x22>
 801801c:	6818      	ldr	r0, [r3, #0]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	6053      	str	r3, [r2, #4]
 8018022:	4408      	add	r0, r1
 8018024:	6010      	str	r0, [r2, #0]
 8018026:	e7da      	b.n	8017fde <_free_r+0x22>
 8018028:	d902      	bls.n	8018030 <_free_r+0x74>
 801802a:	230c      	movs	r3, #12
 801802c:	602b      	str	r3, [r5, #0]
 801802e:	e7d6      	b.n	8017fde <_free_r+0x22>
 8018030:	6820      	ldr	r0, [r4, #0]
 8018032:	1821      	adds	r1, r4, r0
 8018034:	428b      	cmp	r3, r1
 8018036:	bf04      	itt	eq
 8018038:	6819      	ldreq	r1, [r3, #0]
 801803a:	685b      	ldreq	r3, [r3, #4]
 801803c:	6063      	str	r3, [r4, #4]
 801803e:	bf04      	itt	eq
 8018040:	1809      	addeq	r1, r1, r0
 8018042:	6021      	streq	r1, [r4, #0]
 8018044:	6054      	str	r4, [r2, #4]
 8018046:	e7ca      	b.n	8017fde <_free_r+0x22>
 8018048:	bd38      	pop	{r3, r4, r5, pc}
 801804a:	bf00      	nop
 801804c:	2000af50 	.word	0x2000af50

08018050 <_malloc_usable_size_r>:
 8018050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018054:	1f18      	subs	r0, r3, #4
 8018056:	2b00      	cmp	r3, #0
 8018058:	bfbc      	itt	lt
 801805a:	580b      	ldrlt	r3, [r1, r0]
 801805c:	18c0      	addlt	r0, r0, r3
 801805e:	4770      	bx	lr

08018060 <__ssputs_r>:
 8018060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018064:	688e      	ldr	r6, [r1, #8]
 8018066:	461f      	mov	r7, r3
 8018068:	42be      	cmp	r6, r7
 801806a:	680b      	ldr	r3, [r1, #0]
 801806c:	4682      	mov	sl, r0
 801806e:	460c      	mov	r4, r1
 8018070:	4690      	mov	r8, r2
 8018072:	d82d      	bhi.n	80180d0 <__ssputs_r+0x70>
 8018074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018078:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801807c:	d026      	beq.n	80180cc <__ssputs_r+0x6c>
 801807e:	6965      	ldr	r5, [r4, #20]
 8018080:	6909      	ldr	r1, [r1, #16]
 8018082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018086:	eba3 0901 	sub.w	r9, r3, r1
 801808a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801808e:	1c7b      	adds	r3, r7, #1
 8018090:	444b      	add	r3, r9
 8018092:	106d      	asrs	r5, r5, #1
 8018094:	429d      	cmp	r5, r3
 8018096:	bf38      	it	cc
 8018098:	461d      	movcc	r5, r3
 801809a:	0553      	lsls	r3, r2, #21
 801809c:	d527      	bpl.n	80180ee <__ssputs_r+0x8e>
 801809e:	4629      	mov	r1, r5
 80180a0:	f7ff fb36 	bl	8017710 <_malloc_r>
 80180a4:	4606      	mov	r6, r0
 80180a6:	b360      	cbz	r0, 8018102 <__ssputs_r+0xa2>
 80180a8:	6921      	ldr	r1, [r4, #16]
 80180aa:	464a      	mov	r2, r9
 80180ac:	f7ff ff4d 	bl	8017f4a <memcpy>
 80180b0:	89a3      	ldrh	r3, [r4, #12]
 80180b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80180b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80180ba:	81a3      	strh	r3, [r4, #12]
 80180bc:	6126      	str	r6, [r4, #16]
 80180be:	6165      	str	r5, [r4, #20]
 80180c0:	444e      	add	r6, r9
 80180c2:	eba5 0509 	sub.w	r5, r5, r9
 80180c6:	6026      	str	r6, [r4, #0]
 80180c8:	60a5      	str	r5, [r4, #8]
 80180ca:	463e      	mov	r6, r7
 80180cc:	42be      	cmp	r6, r7
 80180ce:	d900      	bls.n	80180d2 <__ssputs_r+0x72>
 80180d0:	463e      	mov	r6, r7
 80180d2:	6820      	ldr	r0, [r4, #0]
 80180d4:	4632      	mov	r2, r6
 80180d6:	4641      	mov	r1, r8
 80180d8:	f7ff fe54 	bl	8017d84 <memmove>
 80180dc:	68a3      	ldr	r3, [r4, #8]
 80180de:	1b9b      	subs	r3, r3, r6
 80180e0:	60a3      	str	r3, [r4, #8]
 80180e2:	6823      	ldr	r3, [r4, #0]
 80180e4:	4433      	add	r3, r6
 80180e6:	6023      	str	r3, [r4, #0]
 80180e8:	2000      	movs	r0, #0
 80180ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ee:	462a      	mov	r2, r5
 80180f0:	f7ff fc0e 	bl	8017910 <_realloc_r>
 80180f4:	4606      	mov	r6, r0
 80180f6:	2800      	cmp	r0, #0
 80180f8:	d1e0      	bne.n	80180bc <__ssputs_r+0x5c>
 80180fa:	6921      	ldr	r1, [r4, #16]
 80180fc:	4650      	mov	r0, sl
 80180fe:	f7ff ff5d 	bl	8017fbc <_free_r>
 8018102:	230c      	movs	r3, #12
 8018104:	f8ca 3000 	str.w	r3, [sl]
 8018108:	89a3      	ldrh	r3, [r4, #12]
 801810a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801810e:	81a3      	strh	r3, [r4, #12]
 8018110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018114:	e7e9      	b.n	80180ea <__ssputs_r+0x8a>
	...

08018118 <_svfiprintf_r>:
 8018118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801811c:	4698      	mov	r8, r3
 801811e:	898b      	ldrh	r3, [r1, #12]
 8018120:	061b      	lsls	r3, r3, #24
 8018122:	b09d      	sub	sp, #116	@ 0x74
 8018124:	4607      	mov	r7, r0
 8018126:	460d      	mov	r5, r1
 8018128:	4614      	mov	r4, r2
 801812a:	d510      	bpl.n	801814e <_svfiprintf_r+0x36>
 801812c:	690b      	ldr	r3, [r1, #16]
 801812e:	b973      	cbnz	r3, 801814e <_svfiprintf_r+0x36>
 8018130:	2140      	movs	r1, #64	@ 0x40
 8018132:	f7ff faed 	bl	8017710 <_malloc_r>
 8018136:	6028      	str	r0, [r5, #0]
 8018138:	6128      	str	r0, [r5, #16]
 801813a:	b930      	cbnz	r0, 801814a <_svfiprintf_r+0x32>
 801813c:	230c      	movs	r3, #12
 801813e:	603b      	str	r3, [r7, #0]
 8018140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018144:	b01d      	add	sp, #116	@ 0x74
 8018146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801814a:	2340      	movs	r3, #64	@ 0x40
 801814c:	616b      	str	r3, [r5, #20]
 801814e:	2300      	movs	r3, #0
 8018150:	9309      	str	r3, [sp, #36]	@ 0x24
 8018152:	2320      	movs	r3, #32
 8018154:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018158:	f8cd 800c 	str.w	r8, [sp, #12]
 801815c:	2330      	movs	r3, #48	@ 0x30
 801815e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80182fc <_svfiprintf_r+0x1e4>
 8018162:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018166:	f04f 0901 	mov.w	r9, #1
 801816a:	4623      	mov	r3, r4
 801816c:	469a      	mov	sl, r3
 801816e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018172:	b10a      	cbz	r2, 8018178 <_svfiprintf_r+0x60>
 8018174:	2a25      	cmp	r2, #37	@ 0x25
 8018176:	d1f9      	bne.n	801816c <_svfiprintf_r+0x54>
 8018178:	ebba 0b04 	subs.w	fp, sl, r4
 801817c:	d00b      	beq.n	8018196 <_svfiprintf_r+0x7e>
 801817e:	465b      	mov	r3, fp
 8018180:	4622      	mov	r2, r4
 8018182:	4629      	mov	r1, r5
 8018184:	4638      	mov	r0, r7
 8018186:	f7ff ff6b 	bl	8018060 <__ssputs_r>
 801818a:	3001      	adds	r0, #1
 801818c:	f000 80a7 	beq.w	80182de <_svfiprintf_r+0x1c6>
 8018190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018192:	445a      	add	r2, fp
 8018194:	9209      	str	r2, [sp, #36]	@ 0x24
 8018196:	f89a 3000 	ldrb.w	r3, [sl]
 801819a:	2b00      	cmp	r3, #0
 801819c:	f000 809f 	beq.w	80182de <_svfiprintf_r+0x1c6>
 80181a0:	2300      	movs	r3, #0
 80181a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80181a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181aa:	f10a 0a01 	add.w	sl, sl, #1
 80181ae:	9304      	str	r3, [sp, #16]
 80181b0:	9307      	str	r3, [sp, #28]
 80181b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80181b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80181b8:	4654      	mov	r4, sl
 80181ba:	2205      	movs	r2, #5
 80181bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181c0:	484e      	ldr	r0, [pc, #312]	@ (80182fc <_svfiprintf_r+0x1e4>)
 80181c2:	f7e8 f845 	bl	8000250 <memchr>
 80181c6:	9a04      	ldr	r2, [sp, #16]
 80181c8:	b9d8      	cbnz	r0, 8018202 <_svfiprintf_r+0xea>
 80181ca:	06d0      	lsls	r0, r2, #27
 80181cc:	bf44      	itt	mi
 80181ce:	2320      	movmi	r3, #32
 80181d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181d4:	0711      	lsls	r1, r2, #28
 80181d6:	bf44      	itt	mi
 80181d8:	232b      	movmi	r3, #43	@ 0x2b
 80181da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181de:	f89a 3000 	ldrb.w	r3, [sl]
 80181e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80181e4:	d015      	beq.n	8018212 <_svfiprintf_r+0xfa>
 80181e6:	9a07      	ldr	r2, [sp, #28]
 80181e8:	4654      	mov	r4, sl
 80181ea:	2000      	movs	r0, #0
 80181ec:	f04f 0c0a 	mov.w	ip, #10
 80181f0:	4621      	mov	r1, r4
 80181f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181f6:	3b30      	subs	r3, #48	@ 0x30
 80181f8:	2b09      	cmp	r3, #9
 80181fa:	d94b      	bls.n	8018294 <_svfiprintf_r+0x17c>
 80181fc:	b1b0      	cbz	r0, 801822c <_svfiprintf_r+0x114>
 80181fe:	9207      	str	r2, [sp, #28]
 8018200:	e014      	b.n	801822c <_svfiprintf_r+0x114>
 8018202:	eba0 0308 	sub.w	r3, r0, r8
 8018206:	fa09 f303 	lsl.w	r3, r9, r3
 801820a:	4313      	orrs	r3, r2
 801820c:	9304      	str	r3, [sp, #16]
 801820e:	46a2      	mov	sl, r4
 8018210:	e7d2      	b.n	80181b8 <_svfiprintf_r+0xa0>
 8018212:	9b03      	ldr	r3, [sp, #12]
 8018214:	1d19      	adds	r1, r3, #4
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	9103      	str	r1, [sp, #12]
 801821a:	2b00      	cmp	r3, #0
 801821c:	bfbb      	ittet	lt
 801821e:	425b      	neglt	r3, r3
 8018220:	f042 0202 	orrlt.w	r2, r2, #2
 8018224:	9307      	strge	r3, [sp, #28]
 8018226:	9307      	strlt	r3, [sp, #28]
 8018228:	bfb8      	it	lt
 801822a:	9204      	strlt	r2, [sp, #16]
 801822c:	7823      	ldrb	r3, [r4, #0]
 801822e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018230:	d10a      	bne.n	8018248 <_svfiprintf_r+0x130>
 8018232:	7863      	ldrb	r3, [r4, #1]
 8018234:	2b2a      	cmp	r3, #42	@ 0x2a
 8018236:	d132      	bne.n	801829e <_svfiprintf_r+0x186>
 8018238:	9b03      	ldr	r3, [sp, #12]
 801823a:	1d1a      	adds	r2, r3, #4
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	9203      	str	r2, [sp, #12]
 8018240:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018244:	3402      	adds	r4, #2
 8018246:	9305      	str	r3, [sp, #20]
 8018248:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801830c <_svfiprintf_r+0x1f4>
 801824c:	7821      	ldrb	r1, [r4, #0]
 801824e:	2203      	movs	r2, #3
 8018250:	4650      	mov	r0, sl
 8018252:	f7e7 fffd 	bl	8000250 <memchr>
 8018256:	b138      	cbz	r0, 8018268 <_svfiprintf_r+0x150>
 8018258:	9b04      	ldr	r3, [sp, #16]
 801825a:	eba0 000a 	sub.w	r0, r0, sl
 801825e:	2240      	movs	r2, #64	@ 0x40
 8018260:	4082      	lsls	r2, r0
 8018262:	4313      	orrs	r3, r2
 8018264:	3401      	adds	r4, #1
 8018266:	9304      	str	r3, [sp, #16]
 8018268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801826c:	4824      	ldr	r0, [pc, #144]	@ (8018300 <_svfiprintf_r+0x1e8>)
 801826e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018272:	2206      	movs	r2, #6
 8018274:	f7e7 ffec 	bl	8000250 <memchr>
 8018278:	2800      	cmp	r0, #0
 801827a:	d036      	beq.n	80182ea <_svfiprintf_r+0x1d2>
 801827c:	4b21      	ldr	r3, [pc, #132]	@ (8018304 <_svfiprintf_r+0x1ec>)
 801827e:	bb1b      	cbnz	r3, 80182c8 <_svfiprintf_r+0x1b0>
 8018280:	9b03      	ldr	r3, [sp, #12]
 8018282:	3307      	adds	r3, #7
 8018284:	f023 0307 	bic.w	r3, r3, #7
 8018288:	3308      	adds	r3, #8
 801828a:	9303      	str	r3, [sp, #12]
 801828c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801828e:	4433      	add	r3, r6
 8018290:	9309      	str	r3, [sp, #36]	@ 0x24
 8018292:	e76a      	b.n	801816a <_svfiprintf_r+0x52>
 8018294:	fb0c 3202 	mla	r2, ip, r2, r3
 8018298:	460c      	mov	r4, r1
 801829a:	2001      	movs	r0, #1
 801829c:	e7a8      	b.n	80181f0 <_svfiprintf_r+0xd8>
 801829e:	2300      	movs	r3, #0
 80182a0:	3401      	adds	r4, #1
 80182a2:	9305      	str	r3, [sp, #20]
 80182a4:	4619      	mov	r1, r3
 80182a6:	f04f 0c0a 	mov.w	ip, #10
 80182aa:	4620      	mov	r0, r4
 80182ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182b0:	3a30      	subs	r2, #48	@ 0x30
 80182b2:	2a09      	cmp	r2, #9
 80182b4:	d903      	bls.n	80182be <_svfiprintf_r+0x1a6>
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d0c6      	beq.n	8018248 <_svfiprintf_r+0x130>
 80182ba:	9105      	str	r1, [sp, #20]
 80182bc:	e7c4      	b.n	8018248 <_svfiprintf_r+0x130>
 80182be:	fb0c 2101 	mla	r1, ip, r1, r2
 80182c2:	4604      	mov	r4, r0
 80182c4:	2301      	movs	r3, #1
 80182c6:	e7f0      	b.n	80182aa <_svfiprintf_r+0x192>
 80182c8:	ab03      	add	r3, sp, #12
 80182ca:	9300      	str	r3, [sp, #0]
 80182cc:	462a      	mov	r2, r5
 80182ce:	4b0e      	ldr	r3, [pc, #56]	@ (8018308 <_svfiprintf_r+0x1f0>)
 80182d0:	a904      	add	r1, sp, #16
 80182d2:	4638      	mov	r0, r7
 80182d4:	f3af 8000 	nop.w
 80182d8:	1c42      	adds	r2, r0, #1
 80182da:	4606      	mov	r6, r0
 80182dc:	d1d6      	bne.n	801828c <_svfiprintf_r+0x174>
 80182de:	89ab      	ldrh	r3, [r5, #12]
 80182e0:	065b      	lsls	r3, r3, #25
 80182e2:	f53f af2d 	bmi.w	8018140 <_svfiprintf_r+0x28>
 80182e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80182e8:	e72c      	b.n	8018144 <_svfiprintf_r+0x2c>
 80182ea:	ab03      	add	r3, sp, #12
 80182ec:	9300      	str	r3, [sp, #0]
 80182ee:	462a      	mov	r2, r5
 80182f0:	4b05      	ldr	r3, [pc, #20]	@ (8018308 <_svfiprintf_r+0x1f0>)
 80182f2:	a904      	add	r1, sp, #16
 80182f4:	4638      	mov	r0, r7
 80182f6:	f000 f9bb 	bl	8018670 <_printf_i>
 80182fa:	e7ed      	b.n	80182d8 <_svfiprintf_r+0x1c0>
 80182fc:	08019a94 	.word	0x08019a94
 8018300:	08019a9e 	.word	0x08019a9e
 8018304:	00000000 	.word	0x00000000
 8018308:	08018061 	.word	0x08018061
 801830c:	08019a9a 	.word	0x08019a9a

08018310 <__sfputc_r>:
 8018310:	6893      	ldr	r3, [r2, #8]
 8018312:	3b01      	subs	r3, #1
 8018314:	2b00      	cmp	r3, #0
 8018316:	b410      	push	{r4}
 8018318:	6093      	str	r3, [r2, #8]
 801831a:	da08      	bge.n	801832e <__sfputc_r+0x1e>
 801831c:	6994      	ldr	r4, [r2, #24]
 801831e:	42a3      	cmp	r3, r4
 8018320:	db01      	blt.n	8018326 <__sfputc_r+0x16>
 8018322:	290a      	cmp	r1, #10
 8018324:	d103      	bne.n	801832e <__sfputc_r+0x1e>
 8018326:	f85d 4b04 	ldr.w	r4, [sp], #4
 801832a:	f000 bb7f 	b.w	8018a2c <__swbuf_r>
 801832e:	6813      	ldr	r3, [r2, #0]
 8018330:	1c58      	adds	r0, r3, #1
 8018332:	6010      	str	r0, [r2, #0]
 8018334:	7019      	strb	r1, [r3, #0]
 8018336:	4608      	mov	r0, r1
 8018338:	f85d 4b04 	ldr.w	r4, [sp], #4
 801833c:	4770      	bx	lr

0801833e <__sfputs_r>:
 801833e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018340:	4606      	mov	r6, r0
 8018342:	460f      	mov	r7, r1
 8018344:	4614      	mov	r4, r2
 8018346:	18d5      	adds	r5, r2, r3
 8018348:	42ac      	cmp	r4, r5
 801834a:	d101      	bne.n	8018350 <__sfputs_r+0x12>
 801834c:	2000      	movs	r0, #0
 801834e:	e007      	b.n	8018360 <__sfputs_r+0x22>
 8018350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018354:	463a      	mov	r2, r7
 8018356:	4630      	mov	r0, r6
 8018358:	f7ff ffda 	bl	8018310 <__sfputc_r>
 801835c:	1c43      	adds	r3, r0, #1
 801835e:	d1f3      	bne.n	8018348 <__sfputs_r+0xa>
 8018360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018364 <_vfiprintf_r>:
 8018364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018368:	460d      	mov	r5, r1
 801836a:	b09d      	sub	sp, #116	@ 0x74
 801836c:	4614      	mov	r4, r2
 801836e:	4698      	mov	r8, r3
 8018370:	4606      	mov	r6, r0
 8018372:	b118      	cbz	r0, 801837c <_vfiprintf_r+0x18>
 8018374:	6a03      	ldr	r3, [r0, #32]
 8018376:	b90b      	cbnz	r3, 801837c <_vfiprintf_r+0x18>
 8018378:	f7ff fbfc 	bl	8017b74 <__sinit>
 801837c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801837e:	07d9      	lsls	r1, r3, #31
 8018380:	d405      	bmi.n	801838e <_vfiprintf_r+0x2a>
 8018382:	89ab      	ldrh	r3, [r5, #12]
 8018384:	059a      	lsls	r2, r3, #22
 8018386:	d402      	bmi.n	801838e <_vfiprintf_r+0x2a>
 8018388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801838a:	f7ff fdd4 	bl	8017f36 <__retarget_lock_acquire_recursive>
 801838e:	89ab      	ldrh	r3, [r5, #12]
 8018390:	071b      	lsls	r3, r3, #28
 8018392:	d501      	bpl.n	8018398 <_vfiprintf_r+0x34>
 8018394:	692b      	ldr	r3, [r5, #16]
 8018396:	b99b      	cbnz	r3, 80183c0 <_vfiprintf_r+0x5c>
 8018398:	4629      	mov	r1, r5
 801839a:	4630      	mov	r0, r6
 801839c:	f000 fb84 	bl	8018aa8 <__swsetup_r>
 80183a0:	b170      	cbz	r0, 80183c0 <_vfiprintf_r+0x5c>
 80183a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80183a4:	07dc      	lsls	r4, r3, #31
 80183a6:	d504      	bpl.n	80183b2 <_vfiprintf_r+0x4e>
 80183a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183ac:	b01d      	add	sp, #116	@ 0x74
 80183ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b2:	89ab      	ldrh	r3, [r5, #12]
 80183b4:	0598      	lsls	r0, r3, #22
 80183b6:	d4f7      	bmi.n	80183a8 <_vfiprintf_r+0x44>
 80183b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80183ba:	f7ff fdbd 	bl	8017f38 <__retarget_lock_release_recursive>
 80183be:	e7f3      	b.n	80183a8 <_vfiprintf_r+0x44>
 80183c0:	2300      	movs	r3, #0
 80183c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80183c4:	2320      	movs	r3, #32
 80183c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80183ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80183ce:	2330      	movs	r3, #48	@ 0x30
 80183d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018580 <_vfiprintf_r+0x21c>
 80183d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80183d8:	f04f 0901 	mov.w	r9, #1
 80183dc:	4623      	mov	r3, r4
 80183de:	469a      	mov	sl, r3
 80183e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80183e4:	b10a      	cbz	r2, 80183ea <_vfiprintf_r+0x86>
 80183e6:	2a25      	cmp	r2, #37	@ 0x25
 80183e8:	d1f9      	bne.n	80183de <_vfiprintf_r+0x7a>
 80183ea:	ebba 0b04 	subs.w	fp, sl, r4
 80183ee:	d00b      	beq.n	8018408 <_vfiprintf_r+0xa4>
 80183f0:	465b      	mov	r3, fp
 80183f2:	4622      	mov	r2, r4
 80183f4:	4629      	mov	r1, r5
 80183f6:	4630      	mov	r0, r6
 80183f8:	f7ff ffa1 	bl	801833e <__sfputs_r>
 80183fc:	3001      	adds	r0, #1
 80183fe:	f000 80a7 	beq.w	8018550 <_vfiprintf_r+0x1ec>
 8018402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018404:	445a      	add	r2, fp
 8018406:	9209      	str	r2, [sp, #36]	@ 0x24
 8018408:	f89a 3000 	ldrb.w	r3, [sl]
 801840c:	2b00      	cmp	r3, #0
 801840e:	f000 809f 	beq.w	8018550 <_vfiprintf_r+0x1ec>
 8018412:	2300      	movs	r3, #0
 8018414:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801841c:	f10a 0a01 	add.w	sl, sl, #1
 8018420:	9304      	str	r3, [sp, #16]
 8018422:	9307      	str	r3, [sp, #28]
 8018424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018428:	931a      	str	r3, [sp, #104]	@ 0x68
 801842a:	4654      	mov	r4, sl
 801842c:	2205      	movs	r2, #5
 801842e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018432:	4853      	ldr	r0, [pc, #332]	@ (8018580 <_vfiprintf_r+0x21c>)
 8018434:	f7e7 ff0c 	bl	8000250 <memchr>
 8018438:	9a04      	ldr	r2, [sp, #16]
 801843a:	b9d8      	cbnz	r0, 8018474 <_vfiprintf_r+0x110>
 801843c:	06d1      	lsls	r1, r2, #27
 801843e:	bf44      	itt	mi
 8018440:	2320      	movmi	r3, #32
 8018442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018446:	0713      	lsls	r3, r2, #28
 8018448:	bf44      	itt	mi
 801844a:	232b      	movmi	r3, #43	@ 0x2b
 801844c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018450:	f89a 3000 	ldrb.w	r3, [sl]
 8018454:	2b2a      	cmp	r3, #42	@ 0x2a
 8018456:	d015      	beq.n	8018484 <_vfiprintf_r+0x120>
 8018458:	9a07      	ldr	r2, [sp, #28]
 801845a:	4654      	mov	r4, sl
 801845c:	2000      	movs	r0, #0
 801845e:	f04f 0c0a 	mov.w	ip, #10
 8018462:	4621      	mov	r1, r4
 8018464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018468:	3b30      	subs	r3, #48	@ 0x30
 801846a:	2b09      	cmp	r3, #9
 801846c:	d94b      	bls.n	8018506 <_vfiprintf_r+0x1a2>
 801846e:	b1b0      	cbz	r0, 801849e <_vfiprintf_r+0x13a>
 8018470:	9207      	str	r2, [sp, #28]
 8018472:	e014      	b.n	801849e <_vfiprintf_r+0x13a>
 8018474:	eba0 0308 	sub.w	r3, r0, r8
 8018478:	fa09 f303 	lsl.w	r3, r9, r3
 801847c:	4313      	orrs	r3, r2
 801847e:	9304      	str	r3, [sp, #16]
 8018480:	46a2      	mov	sl, r4
 8018482:	e7d2      	b.n	801842a <_vfiprintf_r+0xc6>
 8018484:	9b03      	ldr	r3, [sp, #12]
 8018486:	1d19      	adds	r1, r3, #4
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	9103      	str	r1, [sp, #12]
 801848c:	2b00      	cmp	r3, #0
 801848e:	bfbb      	ittet	lt
 8018490:	425b      	neglt	r3, r3
 8018492:	f042 0202 	orrlt.w	r2, r2, #2
 8018496:	9307      	strge	r3, [sp, #28]
 8018498:	9307      	strlt	r3, [sp, #28]
 801849a:	bfb8      	it	lt
 801849c:	9204      	strlt	r2, [sp, #16]
 801849e:	7823      	ldrb	r3, [r4, #0]
 80184a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80184a2:	d10a      	bne.n	80184ba <_vfiprintf_r+0x156>
 80184a4:	7863      	ldrb	r3, [r4, #1]
 80184a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80184a8:	d132      	bne.n	8018510 <_vfiprintf_r+0x1ac>
 80184aa:	9b03      	ldr	r3, [sp, #12]
 80184ac:	1d1a      	adds	r2, r3, #4
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	9203      	str	r2, [sp, #12]
 80184b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80184b6:	3402      	adds	r4, #2
 80184b8:	9305      	str	r3, [sp, #20]
 80184ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018590 <_vfiprintf_r+0x22c>
 80184be:	7821      	ldrb	r1, [r4, #0]
 80184c0:	2203      	movs	r2, #3
 80184c2:	4650      	mov	r0, sl
 80184c4:	f7e7 fec4 	bl	8000250 <memchr>
 80184c8:	b138      	cbz	r0, 80184da <_vfiprintf_r+0x176>
 80184ca:	9b04      	ldr	r3, [sp, #16]
 80184cc:	eba0 000a 	sub.w	r0, r0, sl
 80184d0:	2240      	movs	r2, #64	@ 0x40
 80184d2:	4082      	lsls	r2, r0
 80184d4:	4313      	orrs	r3, r2
 80184d6:	3401      	adds	r4, #1
 80184d8:	9304      	str	r3, [sp, #16]
 80184da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184de:	4829      	ldr	r0, [pc, #164]	@ (8018584 <_vfiprintf_r+0x220>)
 80184e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80184e4:	2206      	movs	r2, #6
 80184e6:	f7e7 feb3 	bl	8000250 <memchr>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	d03f      	beq.n	801856e <_vfiprintf_r+0x20a>
 80184ee:	4b26      	ldr	r3, [pc, #152]	@ (8018588 <_vfiprintf_r+0x224>)
 80184f0:	bb1b      	cbnz	r3, 801853a <_vfiprintf_r+0x1d6>
 80184f2:	9b03      	ldr	r3, [sp, #12]
 80184f4:	3307      	adds	r3, #7
 80184f6:	f023 0307 	bic.w	r3, r3, #7
 80184fa:	3308      	adds	r3, #8
 80184fc:	9303      	str	r3, [sp, #12]
 80184fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018500:	443b      	add	r3, r7
 8018502:	9309      	str	r3, [sp, #36]	@ 0x24
 8018504:	e76a      	b.n	80183dc <_vfiprintf_r+0x78>
 8018506:	fb0c 3202 	mla	r2, ip, r2, r3
 801850a:	460c      	mov	r4, r1
 801850c:	2001      	movs	r0, #1
 801850e:	e7a8      	b.n	8018462 <_vfiprintf_r+0xfe>
 8018510:	2300      	movs	r3, #0
 8018512:	3401      	adds	r4, #1
 8018514:	9305      	str	r3, [sp, #20]
 8018516:	4619      	mov	r1, r3
 8018518:	f04f 0c0a 	mov.w	ip, #10
 801851c:	4620      	mov	r0, r4
 801851e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018522:	3a30      	subs	r2, #48	@ 0x30
 8018524:	2a09      	cmp	r2, #9
 8018526:	d903      	bls.n	8018530 <_vfiprintf_r+0x1cc>
 8018528:	2b00      	cmp	r3, #0
 801852a:	d0c6      	beq.n	80184ba <_vfiprintf_r+0x156>
 801852c:	9105      	str	r1, [sp, #20]
 801852e:	e7c4      	b.n	80184ba <_vfiprintf_r+0x156>
 8018530:	fb0c 2101 	mla	r1, ip, r1, r2
 8018534:	4604      	mov	r4, r0
 8018536:	2301      	movs	r3, #1
 8018538:	e7f0      	b.n	801851c <_vfiprintf_r+0x1b8>
 801853a:	ab03      	add	r3, sp, #12
 801853c:	9300      	str	r3, [sp, #0]
 801853e:	462a      	mov	r2, r5
 8018540:	4b12      	ldr	r3, [pc, #72]	@ (801858c <_vfiprintf_r+0x228>)
 8018542:	a904      	add	r1, sp, #16
 8018544:	4630      	mov	r0, r6
 8018546:	f3af 8000 	nop.w
 801854a:	4607      	mov	r7, r0
 801854c:	1c78      	adds	r0, r7, #1
 801854e:	d1d6      	bne.n	80184fe <_vfiprintf_r+0x19a>
 8018550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018552:	07d9      	lsls	r1, r3, #31
 8018554:	d405      	bmi.n	8018562 <_vfiprintf_r+0x1fe>
 8018556:	89ab      	ldrh	r3, [r5, #12]
 8018558:	059a      	lsls	r2, r3, #22
 801855a:	d402      	bmi.n	8018562 <_vfiprintf_r+0x1fe>
 801855c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801855e:	f7ff fceb 	bl	8017f38 <__retarget_lock_release_recursive>
 8018562:	89ab      	ldrh	r3, [r5, #12]
 8018564:	065b      	lsls	r3, r3, #25
 8018566:	f53f af1f 	bmi.w	80183a8 <_vfiprintf_r+0x44>
 801856a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801856c:	e71e      	b.n	80183ac <_vfiprintf_r+0x48>
 801856e:	ab03      	add	r3, sp, #12
 8018570:	9300      	str	r3, [sp, #0]
 8018572:	462a      	mov	r2, r5
 8018574:	4b05      	ldr	r3, [pc, #20]	@ (801858c <_vfiprintf_r+0x228>)
 8018576:	a904      	add	r1, sp, #16
 8018578:	4630      	mov	r0, r6
 801857a:	f000 f879 	bl	8018670 <_printf_i>
 801857e:	e7e4      	b.n	801854a <_vfiprintf_r+0x1e6>
 8018580:	08019a94 	.word	0x08019a94
 8018584:	08019a9e 	.word	0x08019a9e
 8018588:	00000000 	.word	0x00000000
 801858c:	0801833f 	.word	0x0801833f
 8018590:	08019a9a 	.word	0x08019a9a

08018594 <_printf_common>:
 8018594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018598:	4616      	mov	r6, r2
 801859a:	4698      	mov	r8, r3
 801859c:	688a      	ldr	r2, [r1, #8]
 801859e:	690b      	ldr	r3, [r1, #16]
 80185a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80185a4:	4293      	cmp	r3, r2
 80185a6:	bfb8      	it	lt
 80185a8:	4613      	movlt	r3, r2
 80185aa:	6033      	str	r3, [r6, #0]
 80185ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80185b0:	4607      	mov	r7, r0
 80185b2:	460c      	mov	r4, r1
 80185b4:	b10a      	cbz	r2, 80185ba <_printf_common+0x26>
 80185b6:	3301      	adds	r3, #1
 80185b8:	6033      	str	r3, [r6, #0]
 80185ba:	6823      	ldr	r3, [r4, #0]
 80185bc:	0699      	lsls	r1, r3, #26
 80185be:	bf42      	ittt	mi
 80185c0:	6833      	ldrmi	r3, [r6, #0]
 80185c2:	3302      	addmi	r3, #2
 80185c4:	6033      	strmi	r3, [r6, #0]
 80185c6:	6825      	ldr	r5, [r4, #0]
 80185c8:	f015 0506 	ands.w	r5, r5, #6
 80185cc:	d106      	bne.n	80185dc <_printf_common+0x48>
 80185ce:	f104 0a19 	add.w	sl, r4, #25
 80185d2:	68e3      	ldr	r3, [r4, #12]
 80185d4:	6832      	ldr	r2, [r6, #0]
 80185d6:	1a9b      	subs	r3, r3, r2
 80185d8:	42ab      	cmp	r3, r5
 80185da:	dc26      	bgt.n	801862a <_printf_common+0x96>
 80185dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80185e0:	6822      	ldr	r2, [r4, #0]
 80185e2:	3b00      	subs	r3, #0
 80185e4:	bf18      	it	ne
 80185e6:	2301      	movne	r3, #1
 80185e8:	0692      	lsls	r2, r2, #26
 80185ea:	d42b      	bmi.n	8018644 <_printf_common+0xb0>
 80185ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80185f0:	4641      	mov	r1, r8
 80185f2:	4638      	mov	r0, r7
 80185f4:	47c8      	blx	r9
 80185f6:	3001      	adds	r0, #1
 80185f8:	d01e      	beq.n	8018638 <_printf_common+0xa4>
 80185fa:	6823      	ldr	r3, [r4, #0]
 80185fc:	6922      	ldr	r2, [r4, #16]
 80185fe:	f003 0306 	and.w	r3, r3, #6
 8018602:	2b04      	cmp	r3, #4
 8018604:	bf02      	ittt	eq
 8018606:	68e5      	ldreq	r5, [r4, #12]
 8018608:	6833      	ldreq	r3, [r6, #0]
 801860a:	1aed      	subeq	r5, r5, r3
 801860c:	68a3      	ldr	r3, [r4, #8]
 801860e:	bf0c      	ite	eq
 8018610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018614:	2500      	movne	r5, #0
 8018616:	4293      	cmp	r3, r2
 8018618:	bfc4      	itt	gt
 801861a:	1a9b      	subgt	r3, r3, r2
 801861c:	18ed      	addgt	r5, r5, r3
 801861e:	2600      	movs	r6, #0
 8018620:	341a      	adds	r4, #26
 8018622:	42b5      	cmp	r5, r6
 8018624:	d11a      	bne.n	801865c <_printf_common+0xc8>
 8018626:	2000      	movs	r0, #0
 8018628:	e008      	b.n	801863c <_printf_common+0xa8>
 801862a:	2301      	movs	r3, #1
 801862c:	4652      	mov	r2, sl
 801862e:	4641      	mov	r1, r8
 8018630:	4638      	mov	r0, r7
 8018632:	47c8      	blx	r9
 8018634:	3001      	adds	r0, #1
 8018636:	d103      	bne.n	8018640 <_printf_common+0xac>
 8018638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801863c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018640:	3501      	adds	r5, #1
 8018642:	e7c6      	b.n	80185d2 <_printf_common+0x3e>
 8018644:	18e1      	adds	r1, r4, r3
 8018646:	1c5a      	adds	r2, r3, #1
 8018648:	2030      	movs	r0, #48	@ 0x30
 801864a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801864e:	4422      	add	r2, r4
 8018650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018658:	3302      	adds	r3, #2
 801865a:	e7c7      	b.n	80185ec <_printf_common+0x58>
 801865c:	2301      	movs	r3, #1
 801865e:	4622      	mov	r2, r4
 8018660:	4641      	mov	r1, r8
 8018662:	4638      	mov	r0, r7
 8018664:	47c8      	blx	r9
 8018666:	3001      	adds	r0, #1
 8018668:	d0e6      	beq.n	8018638 <_printf_common+0xa4>
 801866a:	3601      	adds	r6, #1
 801866c:	e7d9      	b.n	8018622 <_printf_common+0x8e>
	...

08018670 <_printf_i>:
 8018670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018674:	7e0f      	ldrb	r7, [r1, #24]
 8018676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018678:	2f78      	cmp	r7, #120	@ 0x78
 801867a:	4691      	mov	r9, r2
 801867c:	4680      	mov	r8, r0
 801867e:	460c      	mov	r4, r1
 8018680:	469a      	mov	sl, r3
 8018682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018686:	d807      	bhi.n	8018698 <_printf_i+0x28>
 8018688:	2f62      	cmp	r7, #98	@ 0x62
 801868a:	d80a      	bhi.n	80186a2 <_printf_i+0x32>
 801868c:	2f00      	cmp	r7, #0
 801868e:	f000 80d2 	beq.w	8018836 <_printf_i+0x1c6>
 8018692:	2f58      	cmp	r7, #88	@ 0x58
 8018694:	f000 80b9 	beq.w	801880a <_printf_i+0x19a>
 8018698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801869c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80186a0:	e03a      	b.n	8018718 <_printf_i+0xa8>
 80186a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80186a6:	2b15      	cmp	r3, #21
 80186a8:	d8f6      	bhi.n	8018698 <_printf_i+0x28>
 80186aa:	a101      	add	r1, pc, #4	@ (adr r1, 80186b0 <_printf_i+0x40>)
 80186ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80186b0:	08018709 	.word	0x08018709
 80186b4:	0801871d 	.word	0x0801871d
 80186b8:	08018699 	.word	0x08018699
 80186bc:	08018699 	.word	0x08018699
 80186c0:	08018699 	.word	0x08018699
 80186c4:	08018699 	.word	0x08018699
 80186c8:	0801871d 	.word	0x0801871d
 80186cc:	08018699 	.word	0x08018699
 80186d0:	08018699 	.word	0x08018699
 80186d4:	08018699 	.word	0x08018699
 80186d8:	08018699 	.word	0x08018699
 80186dc:	0801881d 	.word	0x0801881d
 80186e0:	08018747 	.word	0x08018747
 80186e4:	080187d7 	.word	0x080187d7
 80186e8:	08018699 	.word	0x08018699
 80186ec:	08018699 	.word	0x08018699
 80186f0:	0801883f 	.word	0x0801883f
 80186f4:	08018699 	.word	0x08018699
 80186f8:	08018747 	.word	0x08018747
 80186fc:	08018699 	.word	0x08018699
 8018700:	08018699 	.word	0x08018699
 8018704:	080187df 	.word	0x080187df
 8018708:	6833      	ldr	r3, [r6, #0]
 801870a:	1d1a      	adds	r2, r3, #4
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	6032      	str	r2, [r6, #0]
 8018710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018718:	2301      	movs	r3, #1
 801871a:	e09d      	b.n	8018858 <_printf_i+0x1e8>
 801871c:	6833      	ldr	r3, [r6, #0]
 801871e:	6820      	ldr	r0, [r4, #0]
 8018720:	1d19      	adds	r1, r3, #4
 8018722:	6031      	str	r1, [r6, #0]
 8018724:	0606      	lsls	r6, r0, #24
 8018726:	d501      	bpl.n	801872c <_printf_i+0xbc>
 8018728:	681d      	ldr	r5, [r3, #0]
 801872a:	e003      	b.n	8018734 <_printf_i+0xc4>
 801872c:	0645      	lsls	r5, r0, #25
 801872e:	d5fb      	bpl.n	8018728 <_printf_i+0xb8>
 8018730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018734:	2d00      	cmp	r5, #0
 8018736:	da03      	bge.n	8018740 <_printf_i+0xd0>
 8018738:	232d      	movs	r3, #45	@ 0x2d
 801873a:	426d      	negs	r5, r5
 801873c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018740:	4859      	ldr	r0, [pc, #356]	@ (80188a8 <_printf_i+0x238>)
 8018742:	230a      	movs	r3, #10
 8018744:	e011      	b.n	801876a <_printf_i+0xfa>
 8018746:	6821      	ldr	r1, [r4, #0]
 8018748:	6833      	ldr	r3, [r6, #0]
 801874a:	0608      	lsls	r0, r1, #24
 801874c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018750:	d402      	bmi.n	8018758 <_printf_i+0xe8>
 8018752:	0649      	lsls	r1, r1, #25
 8018754:	bf48      	it	mi
 8018756:	b2ad      	uxthmi	r5, r5
 8018758:	2f6f      	cmp	r7, #111	@ 0x6f
 801875a:	4853      	ldr	r0, [pc, #332]	@ (80188a8 <_printf_i+0x238>)
 801875c:	6033      	str	r3, [r6, #0]
 801875e:	bf14      	ite	ne
 8018760:	230a      	movne	r3, #10
 8018762:	2308      	moveq	r3, #8
 8018764:	2100      	movs	r1, #0
 8018766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801876a:	6866      	ldr	r6, [r4, #4]
 801876c:	60a6      	str	r6, [r4, #8]
 801876e:	2e00      	cmp	r6, #0
 8018770:	bfa2      	ittt	ge
 8018772:	6821      	ldrge	r1, [r4, #0]
 8018774:	f021 0104 	bicge.w	r1, r1, #4
 8018778:	6021      	strge	r1, [r4, #0]
 801877a:	b90d      	cbnz	r5, 8018780 <_printf_i+0x110>
 801877c:	2e00      	cmp	r6, #0
 801877e:	d04b      	beq.n	8018818 <_printf_i+0x1a8>
 8018780:	4616      	mov	r6, r2
 8018782:	fbb5 f1f3 	udiv	r1, r5, r3
 8018786:	fb03 5711 	mls	r7, r3, r1, r5
 801878a:	5dc7      	ldrb	r7, [r0, r7]
 801878c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018790:	462f      	mov	r7, r5
 8018792:	42bb      	cmp	r3, r7
 8018794:	460d      	mov	r5, r1
 8018796:	d9f4      	bls.n	8018782 <_printf_i+0x112>
 8018798:	2b08      	cmp	r3, #8
 801879a:	d10b      	bne.n	80187b4 <_printf_i+0x144>
 801879c:	6823      	ldr	r3, [r4, #0]
 801879e:	07df      	lsls	r7, r3, #31
 80187a0:	d508      	bpl.n	80187b4 <_printf_i+0x144>
 80187a2:	6923      	ldr	r3, [r4, #16]
 80187a4:	6861      	ldr	r1, [r4, #4]
 80187a6:	4299      	cmp	r1, r3
 80187a8:	bfde      	ittt	le
 80187aa:	2330      	movle	r3, #48	@ 0x30
 80187ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80187b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80187b4:	1b92      	subs	r2, r2, r6
 80187b6:	6122      	str	r2, [r4, #16]
 80187b8:	f8cd a000 	str.w	sl, [sp]
 80187bc:	464b      	mov	r3, r9
 80187be:	aa03      	add	r2, sp, #12
 80187c0:	4621      	mov	r1, r4
 80187c2:	4640      	mov	r0, r8
 80187c4:	f7ff fee6 	bl	8018594 <_printf_common>
 80187c8:	3001      	adds	r0, #1
 80187ca:	d14a      	bne.n	8018862 <_printf_i+0x1f2>
 80187cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187d0:	b004      	add	sp, #16
 80187d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187d6:	6823      	ldr	r3, [r4, #0]
 80187d8:	f043 0320 	orr.w	r3, r3, #32
 80187dc:	6023      	str	r3, [r4, #0]
 80187de:	4833      	ldr	r0, [pc, #204]	@ (80188ac <_printf_i+0x23c>)
 80187e0:	2778      	movs	r7, #120	@ 0x78
 80187e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80187e6:	6823      	ldr	r3, [r4, #0]
 80187e8:	6831      	ldr	r1, [r6, #0]
 80187ea:	061f      	lsls	r7, r3, #24
 80187ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80187f0:	d402      	bmi.n	80187f8 <_printf_i+0x188>
 80187f2:	065f      	lsls	r7, r3, #25
 80187f4:	bf48      	it	mi
 80187f6:	b2ad      	uxthmi	r5, r5
 80187f8:	6031      	str	r1, [r6, #0]
 80187fa:	07d9      	lsls	r1, r3, #31
 80187fc:	bf44      	itt	mi
 80187fe:	f043 0320 	orrmi.w	r3, r3, #32
 8018802:	6023      	strmi	r3, [r4, #0]
 8018804:	b11d      	cbz	r5, 801880e <_printf_i+0x19e>
 8018806:	2310      	movs	r3, #16
 8018808:	e7ac      	b.n	8018764 <_printf_i+0xf4>
 801880a:	4827      	ldr	r0, [pc, #156]	@ (80188a8 <_printf_i+0x238>)
 801880c:	e7e9      	b.n	80187e2 <_printf_i+0x172>
 801880e:	6823      	ldr	r3, [r4, #0]
 8018810:	f023 0320 	bic.w	r3, r3, #32
 8018814:	6023      	str	r3, [r4, #0]
 8018816:	e7f6      	b.n	8018806 <_printf_i+0x196>
 8018818:	4616      	mov	r6, r2
 801881a:	e7bd      	b.n	8018798 <_printf_i+0x128>
 801881c:	6833      	ldr	r3, [r6, #0]
 801881e:	6825      	ldr	r5, [r4, #0]
 8018820:	6961      	ldr	r1, [r4, #20]
 8018822:	1d18      	adds	r0, r3, #4
 8018824:	6030      	str	r0, [r6, #0]
 8018826:	062e      	lsls	r6, r5, #24
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	d501      	bpl.n	8018830 <_printf_i+0x1c0>
 801882c:	6019      	str	r1, [r3, #0]
 801882e:	e002      	b.n	8018836 <_printf_i+0x1c6>
 8018830:	0668      	lsls	r0, r5, #25
 8018832:	d5fb      	bpl.n	801882c <_printf_i+0x1bc>
 8018834:	8019      	strh	r1, [r3, #0]
 8018836:	2300      	movs	r3, #0
 8018838:	6123      	str	r3, [r4, #16]
 801883a:	4616      	mov	r6, r2
 801883c:	e7bc      	b.n	80187b8 <_printf_i+0x148>
 801883e:	6833      	ldr	r3, [r6, #0]
 8018840:	1d1a      	adds	r2, r3, #4
 8018842:	6032      	str	r2, [r6, #0]
 8018844:	681e      	ldr	r6, [r3, #0]
 8018846:	6862      	ldr	r2, [r4, #4]
 8018848:	2100      	movs	r1, #0
 801884a:	4630      	mov	r0, r6
 801884c:	f7e7 fd00 	bl	8000250 <memchr>
 8018850:	b108      	cbz	r0, 8018856 <_printf_i+0x1e6>
 8018852:	1b80      	subs	r0, r0, r6
 8018854:	6060      	str	r0, [r4, #4]
 8018856:	6863      	ldr	r3, [r4, #4]
 8018858:	6123      	str	r3, [r4, #16]
 801885a:	2300      	movs	r3, #0
 801885c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018860:	e7aa      	b.n	80187b8 <_printf_i+0x148>
 8018862:	6923      	ldr	r3, [r4, #16]
 8018864:	4632      	mov	r2, r6
 8018866:	4649      	mov	r1, r9
 8018868:	4640      	mov	r0, r8
 801886a:	47d0      	blx	sl
 801886c:	3001      	adds	r0, #1
 801886e:	d0ad      	beq.n	80187cc <_printf_i+0x15c>
 8018870:	6823      	ldr	r3, [r4, #0]
 8018872:	079b      	lsls	r3, r3, #30
 8018874:	d413      	bmi.n	801889e <_printf_i+0x22e>
 8018876:	68e0      	ldr	r0, [r4, #12]
 8018878:	9b03      	ldr	r3, [sp, #12]
 801887a:	4298      	cmp	r0, r3
 801887c:	bfb8      	it	lt
 801887e:	4618      	movlt	r0, r3
 8018880:	e7a6      	b.n	80187d0 <_printf_i+0x160>
 8018882:	2301      	movs	r3, #1
 8018884:	4632      	mov	r2, r6
 8018886:	4649      	mov	r1, r9
 8018888:	4640      	mov	r0, r8
 801888a:	47d0      	blx	sl
 801888c:	3001      	adds	r0, #1
 801888e:	d09d      	beq.n	80187cc <_printf_i+0x15c>
 8018890:	3501      	adds	r5, #1
 8018892:	68e3      	ldr	r3, [r4, #12]
 8018894:	9903      	ldr	r1, [sp, #12]
 8018896:	1a5b      	subs	r3, r3, r1
 8018898:	42ab      	cmp	r3, r5
 801889a:	dcf2      	bgt.n	8018882 <_printf_i+0x212>
 801889c:	e7eb      	b.n	8018876 <_printf_i+0x206>
 801889e:	2500      	movs	r5, #0
 80188a0:	f104 0619 	add.w	r6, r4, #25
 80188a4:	e7f5      	b.n	8018892 <_printf_i+0x222>
 80188a6:	bf00      	nop
 80188a8:	08019aa5 	.word	0x08019aa5
 80188ac:	08019ab6 	.word	0x08019ab6

080188b0 <__sflush_r>:
 80188b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80188b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188b8:	0716      	lsls	r6, r2, #28
 80188ba:	4605      	mov	r5, r0
 80188bc:	460c      	mov	r4, r1
 80188be:	d454      	bmi.n	801896a <__sflush_r+0xba>
 80188c0:	684b      	ldr	r3, [r1, #4]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	dc02      	bgt.n	80188cc <__sflush_r+0x1c>
 80188c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	dd48      	ble.n	801895e <__sflush_r+0xae>
 80188cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80188ce:	2e00      	cmp	r6, #0
 80188d0:	d045      	beq.n	801895e <__sflush_r+0xae>
 80188d2:	2300      	movs	r3, #0
 80188d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80188d8:	682f      	ldr	r7, [r5, #0]
 80188da:	6a21      	ldr	r1, [r4, #32]
 80188dc:	602b      	str	r3, [r5, #0]
 80188de:	d030      	beq.n	8018942 <__sflush_r+0x92>
 80188e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80188e2:	89a3      	ldrh	r3, [r4, #12]
 80188e4:	0759      	lsls	r1, r3, #29
 80188e6:	d505      	bpl.n	80188f4 <__sflush_r+0x44>
 80188e8:	6863      	ldr	r3, [r4, #4]
 80188ea:	1ad2      	subs	r2, r2, r3
 80188ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80188ee:	b10b      	cbz	r3, 80188f4 <__sflush_r+0x44>
 80188f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80188f2:	1ad2      	subs	r2, r2, r3
 80188f4:	2300      	movs	r3, #0
 80188f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80188f8:	6a21      	ldr	r1, [r4, #32]
 80188fa:	4628      	mov	r0, r5
 80188fc:	47b0      	blx	r6
 80188fe:	1c43      	adds	r3, r0, #1
 8018900:	89a3      	ldrh	r3, [r4, #12]
 8018902:	d106      	bne.n	8018912 <__sflush_r+0x62>
 8018904:	6829      	ldr	r1, [r5, #0]
 8018906:	291d      	cmp	r1, #29
 8018908:	d82b      	bhi.n	8018962 <__sflush_r+0xb2>
 801890a:	4a2a      	ldr	r2, [pc, #168]	@ (80189b4 <__sflush_r+0x104>)
 801890c:	410a      	asrs	r2, r1
 801890e:	07d6      	lsls	r6, r2, #31
 8018910:	d427      	bmi.n	8018962 <__sflush_r+0xb2>
 8018912:	2200      	movs	r2, #0
 8018914:	6062      	str	r2, [r4, #4]
 8018916:	04d9      	lsls	r1, r3, #19
 8018918:	6922      	ldr	r2, [r4, #16]
 801891a:	6022      	str	r2, [r4, #0]
 801891c:	d504      	bpl.n	8018928 <__sflush_r+0x78>
 801891e:	1c42      	adds	r2, r0, #1
 8018920:	d101      	bne.n	8018926 <__sflush_r+0x76>
 8018922:	682b      	ldr	r3, [r5, #0]
 8018924:	b903      	cbnz	r3, 8018928 <__sflush_r+0x78>
 8018926:	6560      	str	r0, [r4, #84]	@ 0x54
 8018928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801892a:	602f      	str	r7, [r5, #0]
 801892c:	b1b9      	cbz	r1, 801895e <__sflush_r+0xae>
 801892e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018932:	4299      	cmp	r1, r3
 8018934:	d002      	beq.n	801893c <__sflush_r+0x8c>
 8018936:	4628      	mov	r0, r5
 8018938:	f7ff fb40 	bl	8017fbc <_free_r>
 801893c:	2300      	movs	r3, #0
 801893e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018940:	e00d      	b.n	801895e <__sflush_r+0xae>
 8018942:	2301      	movs	r3, #1
 8018944:	4628      	mov	r0, r5
 8018946:	47b0      	blx	r6
 8018948:	4602      	mov	r2, r0
 801894a:	1c50      	adds	r0, r2, #1
 801894c:	d1c9      	bne.n	80188e2 <__sflush_r+0x32>
 801894e:	682b      	ldr	r3, [r5, #0]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d0c6      	beq.n	80188e2 <__sflush_r+0x32>
 8018954:	2b1d      	cmp	r3, #29
 8018956:	d001      	beq.n	801895c <__sflush_r+0xac>
 8018958:	2b16      	cmp	r3, #22
 801895a:	d11e      	bne.n	801899a <__sflush_r+0xea>
 801895c:	602f      	str	r7, [r5, #0]
 801895e:	2000      	movs	r0, #0
 8018960:	e022      	b.n	80189a8 <__sflush_r+0xf8>
 8018962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018966:	b21b      	sxth	r3, r3
 8018968:	e01b      	b.n	80189a2 <__sflush_r+0xf2>
 801896a:	690f      	ldr	r7, [r1, #16]
 801896c:	2f00      	cmp	r7, #0
 801896e:	d0f6      	beq.n	801895e <__sflush_r+0xae>
 8018970:	0793      	lsls	r3, r2, #30
 8018972:	680e      	ldr	r6, [r1, #0]
 8018974:	bf08      	it	eq
 8018976:	694b      	ldreq	r3, [r1, #20]
 8018978:	600f      	str	r7, [r1, #0]
 801897a:	bf18      	it	ne
 801897c:	2300      	movne	r3, #0
 801897e:	eba6 0807 	sub.w	r8, r6, r7
 8018982:	608b      	str	r3, [r1, #8]
 8018984:	f1b8 0f00 	cmp.w	r8, #0
 8018988:	dde9      	ble.n	801895e <__sflush_r+0xae>
 801898a:	6a21      	ldr	r1, [r4, #32]
 801898c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801898e:	4643      	mov	r3, r8
 8018990:	463a      	mov	r2, r7
 8018992:	4628      	mov	r0, r5
 8018994:	47b0      	blx	r6
 8018996:	2800      	cmp	r0, #0
 8018998:	dc08      	bgt.n	80189ac <__sflush_r+0xfc>
 801899a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801899e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80189a2:	81a3      	strh	r3, [r4, #12]
 80189a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189ac:	4407      	add	r7, r0
 80189ae:	eba8 0800 	sub.w	r8, r8, r0
 80189b2:	e7e7      	b.n	8018984 <__sflush_r+0xd4>
 80189b4:	dfbffffe 	.word	0xdfbffffe

080189b8 <_fflush_r>:
 80189b8:	b538      	push	{r3, r4, r5, lr}
 80189ba:	690b      	ldr	r3, [r1, #16]
 80189bc:	4605      	mov	r5, r0
 80189be:	460c      	mov	r4, r1
 80189c0:	b913      	cbnz	r3, 80189c8 <_fflush_r+0x10>
 80189c2:	2500      	movs	r5, #0
 80189c4:	4628      	mov	r0, r5
 80189c6:	bd38      	pop	{r3, r4, r5, pc}
 80189c8:	b118      	cbz	r0, 80189d2 <_fflush_r+0x1a>
 80189ca:	6a03      	ldr	r3, [r0, #32]
 80189cc:	b90b      	cbnz	r3, 80189d2 <_fflush_r+0x1a>
 80189ce:	f7ff f8d1 	bl	8017b74 <__sinit>
 80189d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d0f3      	beq.n	80189c2 <_fflush_r+0xa>
 80189da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80189dc:	07d0      	lsls	r0, r2, #31
 80189de:	d404      	bmi.n	80189ea <_fflush_r+0x32>
 80189e0:	0599      	lsls	r1, r3, #22
 80189e2:	d402      	bmi.n	80189ea <_fflush_r+0x32>
 80189e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80189e6:	f7ff faa6 	bl	8017f36 <__retarget_lock_acquire_recursive>
 80189ea:	4628      	mov	r0, r5
 80189ec:	4621      	mov	r1, r4
 80189ee:	f7ff ff5f 	bl	80188b0 <__sflush_r>
 80189f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80189f4:	07da      	lsls	r2, r3, #31
 80189f6:	4605      	mov	r5, r0
 80189f8:	d4e4      	bmi.n	80189c4 <_fflush_r+0xc>
 80189fa:	89a3      	ldrh	r3, [r4, #12]
 80189fc:	059b      	lsls	r3, r3, #22
 80189fe:	d4e1      	bmi.n	80189c4 <_fflush_r+0xc>
 8018a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018a02:	f7ff fa99 	bl	8017f38 <__retarget_lock_release_recursive>
 8018a06:	e7dd      	b.n	80189c4 <_fflush_r+0xc>

08018a08 <fiprintf>:
 8018a08:	b40e      	push	{r1, r2, r3}
 8018a0a:	b503      	push	{r0, r1, lr}
 8018a0c:	4601      	mov	r1, r0
 8018a0e:	ab03      	add	r3, sp, #12
 8018a10:	4805      	ldr	r0, [pc, #20]	@ (8018a28 <fiprintf+0x20>)
 8018a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a16:	6800      	ldr	r0, [r0, #0]
 8018a18:	9301      	str	r3, [sp, #4]
 8018a1a:	f7ff fca3 	bl	8018364 <_vfiprintf_r>
 8018a1e:	b002      	add	sp, #8
 8018a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a24:	b003      	add	sp, #12
 8018a26:	4770      	bx	lr
 8018a28:	200001e4 	.word	0x200001e4

08018a2c <__swbuf_r>:
 8018a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a2e:	460e      	mov	r6, r1
 8018a30:	4614      	mov	r4, r2
 8018a32:	4605      	mov	r5, r0
 8018a34:	b118      	cbz	r0, 8018a3e <__swbuf_r+0x12>
 8018a36:	6a03      	ldr	r3, [r0, #32]
 8018a38:	b90b      	cbnz	r3, 8018a3e <__swbuf_r+0x12>
 8018a3a:	f7ff f89b 	bl	8017b74 <__sinit>
 8018a3e:	69a3      	ldr	r3, [r4, #24]
 8018a40:	60a3      	str	r3, [r4, #8]
 8018a42:	89a3      	ldrh	r3, [r4, #12]
 8018a44:	071a      	lsls	r2, r3, #28
 8018a46:	d501      	bpl.n	8018a4c <__swbuf_r+0x20>
 8018a48:	6923      	ldr	r3, [r4, #16]
 8018a4a:	b943      	cbnz	r3, 8018a5e <__swbuf_r+0x32>
 8018a4c:	4621      	mov	r1, r4
 8018a4e:	4628      	mov	r0, r5
 8018a50:	f000 f82a 	bl	8018aa8 <__swsetup_r>
 8018a54:	b118      	cbz	r0, 8018a5e <__swbuf_r+0x32>
 8018a56:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018a5a:	4638      	mov	r0, r7
 8018a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a5e:	6823      	ldr	r3, [r4, #0]
 8018a60:	6922      	ldr	r2, [r4, #16]
 8018a62:	1a98      	subs	r0, r3, r2
 8018a64:	6963      	ldr	r3, [r4, #20]
 8018a66:	b2f6      	uxtb	r6, r6
 8018a68:	4283      	cmp	r3, r0
 8018a6a:	4637      	mov	r7, r6
 8018a6c:	dc05      	bgt.n	8018a7a <__swbuf_r+0x4e>
 8018a6e:	4621      	mov	r1, r4
 8018a70:	4628      	mov	r0, r5
 8018a72:	f7ff ffa1 	bl	80189b8 <_fflush_r>
 8018a76:	2800      	cmp	r0, #0
 8018a78:	d1ed      	bne.n	8018a56 <__swbuf_r+0x2a>
 8018a7a:	68a3      	ldr	r3, [r4, #8]
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	60a3      	str	r3, [r4, #8]
 8018a80:	6823      	ldr	r3, [r4, #0]
 8018a82:	1c5a      	adds	r2, r3, #1
 8018a84:	6022      	str	r2, [r4, #0]
 8018a86:	701e      	strb	r6, [r3, #0]
 8018a88:	6962      	ldr	r2, [r4, #20]
 8018a8a:	1c43      	adds	r3, r0, #1
 8018a8c:	429a      	cmp	r2, r3
 8018a8e:	d004      	beq.n	8018a9a <__swbuf_r+0x6e>
 8018a90:	89a3      	ldrh	r3, [r4, #12]
 8018a92:	07db      	lsls	r3, r3, #31
 8018a94:	d5e1      	bpl.n	8018a5a <__swbuf_r+0x2e>
 8018a96:	2e0a      	cmp	r6, #10
 8018a98:	d1df      	bne.n	8018a5a <__swbuf_r+0x2e>
 8018a9a:	4621      	mov	r1, r4
 8018a9c:	4628      	mov	r0, r5
 8018a9e:	f7ff ff8b 	bl	80189b8 <_fflush_r>
 8018aa2:	2800      	cmp	r0, #0
 8018aa4:	d0d9      	beq.n	8018a5a <__swbuf_r+0x2e>
 8018aa6:	e7d6      	b.n	8018a56 <__swbuf_r+0x2a>

08018aa8 <__swsetup_r>:
 8018aa8:	b538      	push	{r3, r4, r5, lr}
 8018aaa:	4b29      	ldr	r3, [pc, #164]	@ (8018b50 <__swsetup_r+0xa8>)
 8018aac:	4605      	mov	r5, r0
 8018aae:	6818      	ldr	r0, [r3, #0]
 8018ab0:	460c      	mov	r4, r1
 8018ab2:	b118      	cbz	r0, 8018abc <__swsetup_r+0x14>
 8018ab4:	6a03      	ldr	r3, [r0, #32]
 8018ab6:	b90b      	cbnz	r3, 8018abc <__swsetup_r+0x14>
 8018ab8:	f7ff f85c 	bl	8017b74 <__sinit>
 8018abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ac0:	0719      	lsls	r1, r3, #28
 8018ac2:	d422      	bmi.n	8018b0a <__swsetup_r+0x62>
 8018ac4:	06da      	lsls	r2, r3, #27
 8018ac6:	d407      	bmi.n	8018ad8 <__swsetup_r+0x30>
 8018ac8:	2209      	movs	r2, #9
 8018aca:	602a      	str	r2, [r5, #0]
 8018acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018ad0:	81a3      	strh	r3, [r4, #12]
 8018ad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ad6:	e033      	b.n	8018b40 <__swsetup_r+0x98>
 8018ad8:	0758      	lsls	r0, r3, #29
 8018ada:	d512      	bpl.n	8018b02 <__swsetup_r+0x5a>
 8018adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018ade:	b141      	cbz	r1, 8018af2 <__swsetup_r+0x4a>
 8018ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018ae4:	4299      	cmp	r1, r3
 8018ae6:	d002      	beq.n	8018aee <__swsetup_r+0x46>
 8018ae8:	4628      	mov	r0, r5
 8018aea:	f7ff fa67 	bl	8017fbc <_free_r>
 8018aee:	2300      	movs	r3, #0
 8018af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8018af2:	89a3      	ldrh	r3, [r4, #12]
 8018af4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018af8:	81a3      	strh	r3, [r4, #12]
 8018afa:	2300      	movs	r3, #0
 8018afc:	6063      	str	r3, [r4, #4]
 8018afe:	6923      	ldr	r3, [r4, #16]
 8018b00:	6023      	str	r3, [r4, #0]
 8018b02:	89a3      	ldrh	r3, [r4, #12]
 8018b04:	f043 0308 	orr.w	r3, r3, #8
 8018b08:	81a3      	strh	r3, [r4, #12]
 8018b0a:	6923      	ldr	r3, [r4, #16]
 8018b0c:	b94b      	cbnz	r3, 8018b22 <__swsetup_r+0x7a>
 8018b0e:	89a3      	ldrh	r3, [r4, #12]
 8018b10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018b18:	d003      	beq.n	8018b22 <__swsetup_r+0x7a>
 8018b1a:	4621      	mov	r1, r4
 8018b1c:	4628      	mov	r0, r5
 8018b1e:	f000 f846 	bl	8018bae <__smakebuf_r>
 8018b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b26:	f013 0201 	ands.w	r2, r3, #1
 8018b2a:	d00a      	beq.n	8018b42 <__swsetup_r+0x9a>
 8018b2c:	2200      	movs	r2, #0
 8018b2e:	60a2      	str	r2, [r4, #8]
 8018b30:	6962      	ldr	r2, [r4, #20]
 8018b32:	4252      	negs	r2, r2
 8018b34:	61a2      	str	r2, [r4, #24]
 8018b36:	6922      	ldr	r2, [r4, #16]
 8018b38:	b942      	cbnz	r2, 8018b4c <__swsetup_r+0xa4>
 8018b3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018b3e:	d1c5      	bne.n	8018acc <__swsetup_r+0x24>
 8018b40:	bd38      	pop	{r3, r4, r5, pc}
 8018b42:	0799      	lsls	r1, r3, #30
 8018b44:	bf58      	it	pl
 8018b46:	6962      	ldrpl	r2, [r4, #20]
 8018b48:	60a2      	str	r2, [r4, #8]
 8018b4a:	e7f4      	b.n	8018b36 <__swsetup_r+0x8e>
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	e7f7      	b.n	8018b40 <__swsetup_r+0x98>
 8018b50:	200001e4 	.word	0x200001e4

08018b54 <abort>:
 8018b54:	b508      	push	{r3, lr}
 8018b56:	2006      	movs	r0, #6
 8018b58:	f000 f88e 	bl	8018c78 <raise>
 8018b5c:	2001      	movs	r0, #1
 8018b5e:	f7e9 f995 	bl	8001e8c <_exit>

08018b62 <__swhatbuf_r>:
 8018b62:	b570      	push	{r4, r5, r6, lr}
 8018b64:	460c      	mov	r4, r1
 8018b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b6a:	2900      	cmp	r1, #0
 8018b6c:	b096      	sub	sp, #88	@ 0x58
 8018b6e:	4615      	mov	r5, r2
 8018b70:	461e      	mov	r6, r3
 8018b72:	da0d      	bge.n	8018b90 <__swhatbuf_r+0x2e>
 8018b74:	89a3      	ldrh	r3, [r4, #12]
 8018b76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018b7a:	f04f 0100 	mov.w	r1, #0
 8018b7e:	bf14      	ite	ne
 8018b80:	2340      	movne	r3, #64	@ 0x40
 8018b82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018b86:	2000      	movs	r0, #0
 8018b88:	6031      	str	r1, [r6, #0]
 8018b8a:	602b      	str	r3, [r5, #0]
 8018b8c:	b016      	add	sp, #88	@ 0x58
 8018b8e:	bd70      	pop	{r4, r5, r6, pc}
 8018b90:	466a      	mov	r2, sp
 8018b92:	f000 f879 	bl	8018c88 <_fstat_r>
 8018b96:	2800      	cmp	r0, #0
 8018b98:	dbec      	blt.n	8018b74 <__swhatbuf_r+0x12>
 8018b9a:	9901      	ldr	r1, [sp, #4]
 8018b9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018ba0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018ba4:	4259      	negs	r1, r3
 8018ba6:	4159      	adcs	r1, r3
 8018ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018bac:	e7eb      	b.n	8018b86 <__swhatbuf_r+0x24>

08018bae <__smakebuf_r>:
 8018bae:	898b      	ldrh	r3, [r1, #12]
 8018bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bb2:	079d      	lsls	r5, r3, #30
 8018bb4:	4606      	mov	r6, r0
 8018bb6:	460c      	mov	r4, r1
 8018bb8:	d507      	bpl.n	8018bca <__smakebuf_r+0x1c>
 8018bba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018bbe:	6023      	str	r3, [r4, #0]
 8018bc0:	6123      	str	r3, [r4, #16]
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	6163      	str	r3, [r4, #20]
 8018bc6:	b003      	add	sp, #12
 8018bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bca:	ab01      	add	r3, sp, #4
 8018bcc:	466a      	mov	r2, sp
 8018bce:	f7ff ffc8 	bl	8018b62 <__swhatbuf_r>
 8018bd2:	9f00      	ldr	r7, [sp, #0]
 8018bd4:	4605      	mov	r5, r0
 8018bd6:	4639      	mov	r1, r7
 8018bd8:	4630      	mov	r0, r6
 8018bda:	f7fe fd99 	bl	8017710 <_malloc_r>
 8018bde:	b948      	cbnz	r0, 8018bf4 <__smakebuf_r+0x46>
 8018be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018be4:	059a      	lsls	r2, r3, #22
 8018be6:	d4ee      	bmi.n	8018bc6 <__smakebuf_r+0x18>
 8018be8:	f023 0303 	bic.w	r3, r3, #3
 8018bec:	f043 0302 	orr.w	r3, r3, #2
 8018bf0:	81a3      	strh	r3, [r4, #12]
 8018bf2:	e7e2      	b.n	8018bba <__smakebuf_r+0xc>
 8018bf4:	89a3      	ldrh	r3, [r4, #12]
 8018bf6:	6020      	str	r0, [r4, #0]
 8018bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018bfc:	81a3      	strh	r3, [r4, #12]
 8018bfe:	9b01      	ldr	r3, [sp, #4]
 8018c00:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018c04:	b15b      	cbz	r3, 8018c1e <__smakebuf_r+0x70>
 8018c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	f000 f84e 	bl	8018cac <_isatty_r>
 8018c10:	b128      	cbz	r0, 8018c1e <__smakebuf_r+0x70>
 8018c12:	89a3      	ldrh	r3, [r4, #12]
 8018c14:	f023 0303 	bic.w	r3, r3, #3
 8018c18:	f043 0301 	orr.w	r3, r3, #1
 8018c1c:	81a3      	strh	r3, [r4, #12]
 8018c1e:	89a3      	ldrh	r3, [r4, #12]
 8018c20:	431d      	orrs	r5, r3
 8018c22:	81a5      	strh	r5, [r4, #12]
 8018c24:	e7cf      	b.n	8018bc6 <__smakebuf_r+0x18>

08018c26 <_raise_r>:
 8018c26:	291f      	cmp	r1, #31
 8018c28:	b538      	push	{r3, r4, r5, lr}
 8018c2a:	4605      	mov	r5, r0
 8018c2c:	460c      	mov	r4, r1
 8018c2e:	d904      	bls.n	8018c3a <_raise_r+0x14>
 8018c30:	2316      	movs	r3, #22
 8018c32:	6003      	str	r3, [r0, #0]
 8018c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c38:	bd38      	pop	{r3, r4, r5, pc}
 8018c3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018c3c:	b112      	cbz	r2, 8018c44 <_raise_r+0x1e>
 8018c3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c42:	b94b      	cbnz	r3, 8018c58 <_raise_r+0x32>
 8018c44:	4628      	mov	r0, r5
 8018c46:	f000 f853 	bl	8018cf0 <_getpid_r>
 8018c4a:	4622      	mov	r2, r4
 8018c4c:	4601      	mov	r1, r0
 8018c4e:	4628      	mov	r0, r5
 8018c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c54:	f000 b83a 	b.w	8018ccc <_kill_r>
 8018c58:	2b01      	cmp	r3, #1
 8018c5a:	d00a      	beq.n	8018c72 <_raise_r+0x4c>
 8018c5c:	1c59      	adds	r1, r3, #1
 8018c5e:	d103      	bne.n	8018c68 <_raise_r+0x42>
 8018c60:	2316      	movs	r3, #22
 8018c62:	6003      	str	r3, [r0, #0]
 8018c64:	2001      	movs	r0, #1
 8018c66:	e7e7      	b.n	8018c38 <_raise_r+0x12>
 8018c68:	2100      	movs	r1, #0
 8018c6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018c6e:	4620      	mov	r0, r4
 8018c70:	4798      	blx	r3
 8018c72:	2000      	movs	r0, #0
 8018c74:	e7e0      	b.n	8018c38 <_raise_r+0x12>
	...

08018c78 <raise>:
 8018c78:	4b02      	ldr	r3, [pc, #8]	@ (8018c84 <raise+0xc>)
 8018c7a:	4601      	mov	r1, r0
 8018c7c:	6818      	ldr	r0, [r3, #0]
 8018c7e:	f7ff bfd2 	b.w	8018c26 <_raise_r>
 8018c82:	bf00      	nop
 8018c84:	200001e4 	.word	0x200001e4

08018c88 <_fstat_r>:
 8018c88:	b538      	push	{r3, r4, r5, lr}
 8018c8a:	4d07      	ldr	r5, [pc, #28]	@ (8018ca8 <_fstat_r+0x20>)
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	4604      	mov	r4, r0
 8018c90:	4608      	mov	r0, r1
 8018c92:	4611      	mov	r1, r2
 8018c94:	602b      	str	r3, [r5, #0]
 8018c96:	f7e9 f949 	bl	8001f2c <_fstat>
 8018c9a:	1c43      	adds	r3, r0, #1
 8018c9c:	d102      	bne.n	8018ca4 <_fstat_r+0x1c>
 8018c9e:	682b      	ldr	r3, [r5, #0]
 8018ca0:	b103      	cbz	r3, 8018ca4 <_fstat_r+0x1c>
 8018ca2:	6023      	str	r3, [r4, #0]
 8018ca4:	bd38      	pop	{r3, r4, r5, pc}
 8018ca6:	bf00      	nop
 8018ca8:	2000b090 	.word	0x2000b090

08018cac <_isatty_r>:
 8018cac:	b538      	push	{r3, r4, r5, lr}
 8018cae:	4d06      	ldr	r5, [pc, #24]	@ (8018cc8 <_isatty_r+0x1c>)
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	4608      	mov	r0, r1
 8018cb6:	602b      	str	r3, [r5, #0]
 8018cb8:	f7e9 f948 	bl	8001f4c <_isatty>
 8018cbc:	1c43      	adds	r3, r0, #1
 8018cbe:	d102      	bne.n	8018cc6 <_isatty_r+0x1a>
 8018cc0:	682b      	ldr	r3, [r5, #0]
 8018cc2:	b103      	cbz	r3, 8018cc6 <_isatty_r+0x1a>
 8018cc4:	6023      	str	r3, [r4, #0]
 8018cc6:	bd38      	pop	{r3, r4, r5, pc}
 8018cc8:	2000b090 	.word	0x2000b090

08018ccc <_kill_r>:
 8018ccc:	b538      	push	{r3, r4, r5, lr}
 8018cce:	4d07      	ldr	r5, [pc, #28]	@ (8018cec <_kill_r+0x20>)
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	4604      	mov	r4, r0
 8018cd4:	4608      	mov	r0, r1
 8018cd6:	4611      	mov	r1, r2
 8018cd8:	602b      	str	r3, [r5, #0]
 8018cda:	f7e9 f8c7 	bl	8001e6c <_kill>
 8018cde:	1c43      	adds	r3, r0, #1
 8018ce0:	d102      	bne.n	8018ce8 <_kill_r+0x1c>
 8018ce2:	682b      	ldr	r3, [r5, #0]
 8018ce4:	b103      	cbz	r3, 8018ce8 <_kill_r+0x1c>
 8018ce6:	6023      	str	r3, [r4, #0]
 8018ce8:	bd38      	pop	{r3, r4, r5, pc}
 8018cea:	bf00      	nop
 8018cec:	2000b090 	.word	0x2000b090

08018cf0 <_getpid_r>:
 8018cf0:	f7e9 b8b4 	b.w	8001e5c <_getpid>

08018cf4 <_init>:
 8018cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cf6:	bf00      	nop
 8018cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018cfa:	bc08      	pop	{r3}
 8018cfc:	469e      	mov	lr, r3
 8018cfe:	4770      	bx	lr

08018d00 <_fini>:
 8018d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d02:	bf00      	nop
 8018d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d06:	bc08      	pop	{r3}
 8018d08:	469e      	mov	lr, r3
 8018d0a:	4770      	bx	lr
